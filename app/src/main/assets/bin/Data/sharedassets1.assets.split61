, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_74;
      tmpvar_74 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_75;
      highp float fOscillation_76;
      fOscillation_76 = 1.0;
      highp float fAmount_77;
      highp float fTarget_78;
      highp vec4 tmpvar_79;
      tmpvar_79.x = (tmpvar_74 + _glesMultiTexCoord0.w);
      tmpvar_79.y = ((tmpvar_74 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_79.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_74 + _glesMultiTexCoord0.w));
      tmpvar_79.w = ((tmpvar_74 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      vOscillations_75 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      highp float tmpvar_81;
      tmpvar_81 = (vOscillations_75.y * vOscillations_75.z);
      fTarget_78 = 1.0;
      fAmount_77 = tmpvar_81;
      if ((tmpvar_81 < 0.0)) {
        fTarget_78 = -1.0;
        fAmount_77 = -(tmpvar_81);
      };
      fOscillation_76 = (((
        (mix (mix (tmpvar_81, fTarget_78, fAmount_77), fTarget_78, fAmount_77) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_75.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_75.w * _ST_WindBranchWhip.x)));
      vPos_71 = (tmpvar_69 + ((tmpvar_73 * fOscillation_76) * _ST_WindBranch.y));
      highp vec4 tmpvar_82;
      tmpvar_82.zw = vec2(0.0, 0.0);
      tmpvar_82.x = ((tmpvar_74 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_82.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_83;
      highp vec4 tmpvar_84;
      tmpvar_84 = abs(((
        fract((tmpvar_82 + 0.5))
       * 2.0) - 1.0));
      tmpvar_83 = (((
        (tmpvar_84 * tmpvar_84)
       * 
        (3.0 - (2.0 * tmpvar_84))
      ) - 0.5) * 2.0);
      fAdherenceScale_72 = (1.0 - ((
        ((tmpvar_83.x * tmpvar_83.y) * tmpvar_83.x)
       * tmpvar_83.y) * _ST_WindTurbulences.x));
      fAdherenceScale_72 = (fAdherenceScale_72 + ((vOscillations_75.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_71 = (vPos_71 + ((
        ((vRotatedBranchAnchor_17 - vPos_71) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_72) * _glesMultiTexCoord0.z));
      vPos_70 = vPos_71;
    } else {
      highp vec3 vPos_85;
      vPos_85 = vPos_70;
      highp vec3 tmpvar_86;
      tmpvar_86 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_87;
      tmpvar_87 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_88;
      highp float fAmount_89;
      highp float fTarget_90;
      highp vec4 tmpvar_91;
      tmpvar_91.w = 0.0;
      tmpvar_91.x = (tmpvar_87 + _glesMultiTexCoord0.w);
      tmpvar_91.y = ((tmpvar_87 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_91.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_87 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_92;
      tmpvar_92 = abs(((
        fract((tmpvar_91 + 0.5))
       * 2.0) - 1.0));
      vOscillations_88 = (((
        (tmpvar_92 * tmpvar_92)
       * 
        (3.0 - (2.0 * tmpvar_92))
      ) - 0.5) * 2.0);
      highp float tmpvar_93;
      tmpvar_93 = (vOscillations_88.y * vOscillations_88.z);
      fTarget_90 = 1.0;
      fAmount_89 = tmpvar_93;
      if ((tmpvar_93 < 0.0)) {
        fTarget_90 = -1.0;
        fAmount_89 = -(tmpvar_93);
      };
      vPos_85 = (vPos_70 + ((tmpvar_86 * 
        (((mix (
          mix (tmpvar_93, fTarget_90, fAmount_89)
        , fTarget_90, fAmount_89) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_88.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_70 = vPos_85;
    };
    FinalPosition_19 = vPos_70;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_94;
    vPos_94 = FinalPosition_19;
    highp float fAdjust_95;
    highp float fLength_96;
    fLength_96 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_97;
    tmpvar_97 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_95 = tmpvar_97;
    if ((tmpvar_97 != 0.0)) {
      fAdjust_95 = pow (tmpvar_97, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_98;
    tmpvar_98.zw = vec2(0.0, 0.0);
    tmpvar_98.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_98.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_99;
    highp vec4 tmpvar_100;
    tmpvar_100 = abs(((
      fract((tmpvar_98 + 0.5))
     * 2.0) - 1.0));
    tmpvar_99 = (((
      (tmpvar_100 * tmpvar_100)
     * 
      (3.0 - (2.0 * tmpvar_100))
    ) - 0.5) * 2.0);
    vPos_94.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_99.x + (tmpvar_99.y * tmpvar_99.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_95)));
    vPos_94 = (normalize(vPos_94) * fLength_96);
    FinalPosition_19 = vPos_94;
  };
  tmpvar_15.xyz = FinalPosition_19;
  tmpvar_5 = tmpvar_8;
  highp vec3 tmpvar_101;
  tmpvar_101 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_102;
  v_102.x = _World2Object[0].x;
  v_102.y = _World2Object[1].x;
  v_102.z = _World2Object[2].x;
  v_102.w = _World2Object[3].x;
  highp vec4 v_103;
  v_103.x = _World2Object[0].y;
  v_103.y = _World2Object[1].y;
  v_103.z = _World2Object[2].y;
  v_103.w = _World2Object[3].y;
  highp vec4 v_104;
  v_104.x = _World2Object[0].z;
  v_104.y = _World2Object[1].z;
  v_104.z = _World2Object[2].z;
  v_104.w = _World2Object[3].z;
  highp vec3 tmpvar_105;
  tmpvar_105 = normalize(((
    (v_102.xyz * tmpvar_16.x)
   + 
    (v_103.xyz * tmpvar_16.y)
  ) + (v_104.xyz * tmpvar_16.z)));
  worldNormal_3 = tmpvar_105;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_106;
  tmpvar_106.w = 1.0;
  tmpvar_106.xyz = worldNormal_3;
  mediump vec3 tmpvar_107;
  mediump vec4 normal_108;
  normal_108 = tmpvar_106;
  mediump vec3 x2_109;
  mediump vec4 tmpvar_110;
  tmpvar_110 = (normal_108.xyzz * normal_108.yzzx);
  x2_109.x = dot (unity_SHBr, tmpvar_110);
  x2_109.y = dot (unity_SHBg, tmpvar_110);
  x2_109.z = dot (unity_SHBb, tmpvar_110);
  tmpvar_107 = (x2_109 + (unity_SHC.xyz * (
    (normal_108.x * normal_108.x)
   - 
    (normal_108.y * normal_108.y)
  )));
  highp vec3 lightColor0_111;
  lightColor0_111 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_112;
  lightColor1_112 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_113;
  lightColor2_113 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_114;
  lightColor3_114 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_115;
  lightAttenSq_115 = unity_4LightAtten0;
  highp vec3 normal_116;
  normal_116 = worldNormal_3;
  highp vec4 tmpvar_117;
  tmpvar_117 = (unity_4LightPosX0 - tmpvar_101.x);
  highp vec4 tmpvar_118;
  tmpvar_118 = (unity_4LightPosY0 - tmpvar_101.y);
  highp vec4 tmpvar_119;
  tmpvar_119 = (unity_4LightPosZ0 - tmpvar_101.z);
  highp vec4 tmpvar_120;
  tmpvar_120 = (((tmpvar_117 * tmpvar_117) + (tmpvar_118 * tmpvar_118)) + (tmpvar_119 * tmpvar_119));
  highp vec4 tmpvar_121;
  tmpvar_121 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_117 * normal_116.x) + (tmpvar_118 * normal_116.y)) + (tmpvar_119 * normal_116.z))
   * 
    inversesqrt(tmpvar_120)
  )) * (1.0/((1.0 + 
    (tmpvar_120 * lightAttenSq_115)
  ))));
  highp vec3 tmpvar_122;
  tmpvar_122 = (tmpvar_107 + ((
    ((lightColor0_111 * tmpvar_121.x) + (lightColor1_112 * tmpvar_121.y))
   + 
    (lightColor2_113 * tmpvar_121.z)
  ) + (lightColor3_114 * tmpvar_121.w)));
  tmpvar_6 = tmpvar_122;
  highp vec4 tmpvar_123;
  tmpvar_123 = (unity_World2Shadow[0] * (_Object2World * tmpvar_15));
  tmpvar_7 = tmpvar_123;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_101;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  lowp float shadow_17;
  mediump float tmpvar_18;
  tmpvar_18 = texture (_ShadowMapTexture, xlv_TEXCOORD5.xyz);
  lowp float tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump float tmpvar_20;
  tmpvar_20 = (_LightShadowData.x + (tmpvar_19 * (1.0 - _LightShadowData.x)));
  shadow_17 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_21;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_17;
  mediump vec3 normalWorld_22;
  normalWorld_22 = tmpvar_5;
  mediump vec3 tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_22;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  tmpvar_23 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_23;
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_28 = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tmpvar_9 * tmpvar_23) * diff_28);
  c_27.xyz = tmpvar_30;
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  mediump vec3 tmpvar_31;
  tmpvar_31 = (c_27.xyz + (tmpvar_9 * (xlv_TEXCOORD4 + x1_25)));
  c_26.xyz = tmpvar_31;
  c_4.xyz = c_26.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_9;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_13;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_22;
  tmpvar_22 = ((_glesVertex.xyz - _glesMultiTexCoord1.xyz) * mix (1.0, _glesMultiTexCoord1.w, unity_LODFade.x));
  highp mat3 tmpvar_23;
  tmpvar_23[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_23[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_23[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_24;
  tmpvar_24 = (normalize((tmpvar_22 * tmpvar_23)) * sqrt(dot (tmpvar_22, tmpvar_22)));
  FinalPosition_18 = tmpvar_24;
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_25;
    tmpvar_25 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_26;
    isBestWind_26 = (tmpvar_19 == 4.0);
    bool bLeaf2_27;
    bLeaf2_27 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_28;
    vPos_28 = tmpvar_24;
    highp vec3 vDirection_29;
    vDirection_29 = tmpvar_2;
    highp float tmpvar_30;
    if (bLeaf2_27) {
      tmpvar_30 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_31;
    if (bLeaf2_27) {
      tmpvar_31 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_32;
    highp vec4 tmpvar_33;
    tmpvar_33.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_33.x = (tmpvar_30 + tmpvar_25);
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    vPos_32 = (tmpvar_24 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_31 * (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_29 = tmpvar_2;
    vPos_28 = vPos_32;
    if (isBestWind_26) {
      highp vec3 tmpvar_35;
      tmpvar_35 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_36;
      if (bLeaf2_27) {
        tmpvar_36 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_37;
      if (bLeaf2_27) {
        tmpvar_37 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_38;
      if (bLeaf2_27) {
        tmpvar_38 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_39;
      if (bLeaf2_27) {
        tmpvar_39 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_40;
      if (bLeaf2_27) {
        tmpvar_40 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_40 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_41;
      if (bLeaf2_27) {
        tmpvar_41 = bool(1);
      } else {
        tmpvar_41 = bool(1);
      };
      highp float fTwitch_42;
      highp vec3 vAxis_43;
      highp vec3 tmpvar_44;
      tmpvar_44 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_45;
      tmpvar_45 = ((tmpvar_44.x + tmpvar_44.y) + tmpvar_44.z);
      highp vec4 tmpvar_46;
      tmpvar_46.x = (tmpvar_36 + tmpvar_45);
      tmpvar_46.y = ((tmpvar_36 * 0.75) - tmpvar_45);
      tmpvar_46.z = ((tmpvar_36 * 0.01) + tmpvar_45);
      tmpvar_46.w = (tmpvar_36 + tmpvar_45);
      highp vec4 tmpvar_47;
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      tmpvar_47 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = sqrt(dot (vPos_32, vPos_32));
      highp float fAngle_50;
      fAngle_50 = ((_glesMultiTexCoord2.x * tmpvar_38) * (tmpvar_47.x + (tmpvar_47.y * tmpvar_47.y)));
      highp vec2 vSinCos_51;
      vSinCos_51.x = sin(fAngle_50);
      vSinCos_51.y = cos(fAngle_50);
      highp float tmpvar_52;
      tmpvar_52 = (1.0 - vSinCos_51.y);
      highp mat3 tmpvar_53;
      tmpvar_53[0].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.x) + vSinCos_51.y);
      tmpvar_53[0].y = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.y) + (vSinCos_51.x * tmpvar_35.z));
      tmpvar_53[0].z = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.z) - (vSinCos_51.x * tmpvar_35.y));
      tmpvar_53[1].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.y) - (vSinCos_51.x * tmpvar_35.z));
      tmpvar_53[1].y = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.y) + vSinCos_51.y);
      tmpvar_53[1].z = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.z) + (vSinCos_51.x * tmpvar_35.x));
      tmpvar_53[2].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.z) + (vSinCos_51.x * tmpvar_35.y));
      tmpvar_53[2].y = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.z) - (vSinCos_51.x * tmpvar_35.x));
      tmpvar_53[2].z = (((tmpvar_52 * tmpvar_35.z) * tmpvar_35.z) + vSinCos_51.y);
      highp vec3 tmpvar_54;
      tmpvar_54 = ((tmpvar_35.yzx * vRotatedWindVector_17.zxy) - (tmpvar_35.zxy * vRotatedWindVector_17.yzx));
      vAxis_43.xz = tmpvar_54.xz;
      highp float tmpvar_55;
      tmpvar_55 = clamp (dot (vRotatedWindVector_17, tmpvar_35), -1.0, 1.0);
      vAxis_43.y = (tmpvar_54.y + tmpvar_55);
      highp vec3 tmpvar_56;
      tmpvar_56 = normalize(vAxis_43);
      vAxis_43 = tmpvar_56;
      highp float tmpvar_57;
      tmpvar_57 = (1.570796 - (sign(tmpvar_55) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_55))) * (1.570796 + (abs(tmpvar_55) * (-0.2146018 + 
          (abs(tmpvar_55) * (0.08656672 + (abs(tmpvar_55) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_58;
      tmpvar_58 = (tmpvar_47.y - (tmpvar_47.x * tmpvar_47.x));
      fTwitch_42 = 0.0;
      if (tmpvar_41) {
        highp float fTime_59;
        fTime_59 = (tmpvar_40.z + tmpvar_45);
        highp vec4 tmpvar_60;
        tmpvar_60.zw = vec2(0.0, 0.0);
        tmpvar_60.x = fTime_59;
        tmpvar_60.y = (0.87 * fTime_59);
        highp vec4 tmpvar_61;
        highp vec4 tmpvar_62;
        tmpvar_62 = abs(((
          fract((tmpvar_60 + 0.5))
         * 2.0) - 1.0));
        tmpvar_61 = (((
          (tmpvar_62 * tmpvar_62)
         * 
          (3.0 - (2.0 * tmpvar_62))
        ) - 0.5) * 2.0);
        fTwitch_42 = (tmpvar_40.x * pow (clamp (
          ((((tmpvar_61.x * tmpvar_61.y) * tmpvar_61.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_40.y));
      };
      highp float fAngle_63;
      fAngle_63 = (_glesMultiTexCoord2.x * ((
        (tmpvar_57 * tmpvar_39)
       + 
        (tmpvar_58 * tmpvar_37)
      ) + fTwitch_42));
      highp vec2 vSinCos_64;
      vSinCos_64.x = sin(fAngle_63);
      vSinCos_64.y = cos(fAngle_63);
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - vSinCos_64.y);
      highp mat3 tmpvar_66;
      tmpvar_66[0].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.x) + vSinCos_64.y);
      tmpvar_66[0].y = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.y) + (vSinCos_64.x * tmpvar_56.z));
      tmpvar_66[0].z = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.z) - (vSinCos_64.x * tmpvar_56.y));
      tmpvar_66[1].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.y) - (vSinCos_64.x * tmpvar_56.z));
      tmpvar_66[1].y = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.y) + vSinCos_64.y);
      tmpvar_66[1].z = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.z) + (vSinCos_64.x * tmpvar_56.x));
      tmpvar_66[2].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.z) + (vSinCos_64.x * tmpvar_56.y));
      tmpvar_66[2].y = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.z) - (vSinCos_64.x * tmpvar_56.x));
      tmpvar_66[2].z = (((tmpvar_65 * tmpvar_56.z) * tmpvar_56.z) + vSinCos_64.y);
      highp mat3 tmpvar_67;
      tmpvar_67 = (tmpvar_53 * tmpvar_66);
      vDirection_29 = (tmpvar_67 * _glesNormal);
      vPos_28 = (normalize((tmpvar_67 * vPos_32)) * tmpvar_49);
    };
    tmpvar_15 = vDirection_29;
    FinalPosition_18 = vPos_28;
  };
  highp vec3 tmpvar_68;
  tmpvar_68 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  FinalPosition_18 = tmpvar_68;
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_69;
    vPos_69 = tmpvar_68;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_70;
      vPos_70 = tmpvar_68;
      highp float fAdherenceScale_71;
      highp vec3 tmpvar_72;
      tmpvar_72 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_73;
      tmpvar_73 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_74;
      highp float fOscillation_75;
      fOscillation_75 = 1.0;
      highp float fAmount_76;
      highp float fTarget_77;
      highp vec4 tmpvar_78;
      tmpvar_78.x = (tmpvar_73 + _glesMultiTexCoord0.w);
      tmpvar_78.y = ((tmpvar_73 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_78.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_73 + _glesMultiTexCoord0.w));
      tmpvar_78.w = ((tmpvar_73 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      vOscillations_74 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      highp float tmpvar_80;
      tmpvar_80 = (vOscillations_74.y * vOscillations_74.z);
      fTarget_77 = 1.0;
      fAmount_76 = tmpvar_80;
      if ((tmpvar_80 < 0.0)) {
        fTarget_77 = -1.0;
        fAmount_76 = -(tmpvar_80);
      };
      fOscillation_75 = (((
        (mix (mix (tmpvar_80, fTarget_77, fAmount_76), fTarget_77, fAmount_76) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_74.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_74.w * _ST_WindBranchWhip.x)));
      vPos_70 = (tmpvar_68 + ((tmpvar_72 * fOscillation_75) * _ST_WindBranch.y));
      highp vec4 tmpvar_81;
      tmpvar_81.zw = vec2(0.0, 0.0);
      tmpvar_81.x = ((tmpvar_73 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_81.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_82;
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_81 + 0.5))
       * 2.0) - 1.0));
      tmpvar_82 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      fAdherenceScale_71 = (1.0 - ((
        ((tmpvar_82.x * tmpvar_82.y) * tmpvar_82.x)
       * tmpvar_82.y) * _ST_WindTurbulences.x));
      fAdherenceScale_71 = (fAdherenceScale_71 + ((vOscillations_74.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_70 = (vPos_70 + ((
        ((vRotatedBranchAnchor_16 - vPos_70) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_71) * _glesMultiTexCoord0.z));
      vPos_69 = vPos_70;
    } else {
      highp vec3 vPos_84;
      vPos_84 = vPos_69;
      highp vec3 tmpvar_85;
      tmpvar_85 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_86;
      tmpvar_86 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_87;
      highp float fAmount_88;
      highp float fTarget_89;
      highp vec4 tmpvar_90;
      tmpvar_90.w = 0.0;
      tmpvar_90.x = (tmpvar_86 + _glesMultiTexCoord0.w);
      tmpvar_90.y = ((tmpvar_86 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_90.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_86 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_91;
      tmpvar_91 = abs(((
        fract((tmpvar_90 + 0.5))
       * 2.0) - 1.0));
      vOscillations_87 = (((
        (tmpvar_91 * tmpvar_91)
       * 
        (3.0 - (2.0 * tmpvar_91))
      ) - 0.5) * 2.0);
      highp float tmpvar_92;
      tmpvar_92 = (vOscillations_87.y * vOscillations_87.z);
      fTarget_89 = 1.0;
      fAmount_88 = tmpvar_92;
      if ((tmpvar_92 < 0.0)) {
        fTarget_89 = -1.0;
        fAmount_88 = -(tmpvar_92);
      };
      vPos_84 = (vPos_69 + ((tmpvar_85 * 
        (((mix (
          mix (tmpvar_92, fTarget_89, fAmount_88)
        , fTarget_89, fAmount_88) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_87.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_69 = vPos_84;
    };
    FinalPosition_18 = vPos_69;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_93;
    vPos_93 = FinalPosition_18;
    highp float fAdjust_94;
    highp float fLength_95;
    fLength_95 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_96;
    tmpvar_96 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_94 = tmpvar_96;
    if ((tmpvar_96 != 0.0)) {
      fAdjust_94 = pow (tmpvar_96, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_97;
    tmpvar_97.zw = vec2(0.0, 0.0);
    tmpvar_97.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_97.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_98;
    highp vec4 tmpvar_99;
    tmpvar_99 = abs(((
      fract((tmpvar_97 + 0.5))
     * 2.0) - 1.0));
    tmpvar_98 = (((
      (tmpvar_99 * tmpvar_99)
     * 
      (3.0 - (2.0 * tmpvar_99))
    ) - 0.5) * 2.0);
    vPos_93.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_98.x + (tmpvar_98.y * tmpvar_98.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_94)));
    vPos_93 = (normalize(vPos_93) * fLength_95);
    FinalPosition_18 = vPos_93;
  };
  tmpvar_14.xyz = FinalPosition_18;
  tmpvar_6 = tmpvar_7;
  highp vec3 tmpvar_100;
  tmpvar_100 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_101;
  v_101.x = _World2Object[0].x;
  v_101.y = _World2Object[1].x;
  v_101.z = _World2Object[2].x;
  v_101.w = _World2Object[3].x;
  highp vec4 v_102;
  v_102.x = _World2Object[0].y;
  v_102.y = _World2Object[1].y;
  v_102.z = _World2Object[2].y;
  v_102.w = _World2Object[3].y;
  highp vec4 v_103;
  v_103.x = _World2Object[0].z;
  v_103.y = _World2Object[1].z;
  v_103.z = _World2Object[2].z;
  v_103.w = _World2Object[3].z;
  highp vec3 tmpvar_104;
  tmpvar_104 = normalize(((
    (v_101.xyz * tmpvar_15.x)
   + 
    (v_102.xyz * tmpvar_15.y)
  ) + (v_103.xyz * tmpvar_15.z)));
  worldNormal_5 = tmpvar_104;
  highp mat3 tmpvar_105;
  tmpvar_105[0] = _Object2World[0].xyz;
  tmpvar_105[1] = _Object2World[1].xyz;
  tmpvar_105[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_106;
  tmpvar_106 = normalize((tmpvar_105 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_106;
  lowp vec3 tmpvar_107;
  tmpvar_107 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_108;
  tmpvar_108 = (tmpvar_107 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_108;
  highp vec4 tmpvar_109;
  tmpvar_109.x = worldTangent_4.x;
  tmpvar_109.y = worldBinormal_3.x;
  tmpvar_109.z = worldNormal_5.x;
  tmpvar_109.w = tmpvar_100.x;
  highp vec4 tmpvar_110;
  tmpvar_110.x = worldTangent_4.y;
  tmpvar_110.y = worldBinormal_3.y;
  tmpvar_110.z = worldNormal_5.y;
  tmpvar_110.w = tmpvar_100.y;
  highp vec4 tmpvar_111;
  tmpvar_111.x = worldTangent_4.z;
  tmpvar_111.y = worldBinormal_3.z;
  tmpvar_111.z = worldNormal_5.z;
  tmpvar_111.w = tmpvar_100.z;
  lowp vec4 tmpvar_112;
  tmpvar_112.w = 1.0;
  tmpvar_112.xyz = worldNormal_5;
  mediump vec4 normal_113;
  normal_113 = tmpvar_112;
  mediump vec3 x2_114;
  mediump vec4 tmpvar_115;
  tmpvar_115 = (normal_113.xyzz * normal_113.yzzx);
  x2_114.x = dot (unity_SHBr, tmpvar_115);
  x2_114.y = dot (unity_SHBg, tmpvar_115);
  x2_114.z = dot (unity_SHBb, tmpvar_115);
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_109;
  xlv_TEXCOORD1 = tmpvar_110;
  xlv_TEXCOORD2 = tmpvar_111;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = (x2_114 + (unity_SHC.xyz * (
    (normal_113.x * normal_113.x)
   - 
    (normal_113.y * normal_113.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_12;
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_14 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_15;
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_3.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_3.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_3.z = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_20;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_21;
  normalWorld_21 = worldN_3;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_21;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_26 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tmpvar_8 * tmpvar_1) * diff_26);
  c_25.xyz = tmpvar_28;
  c_25.w = tmpvar_9;
  c_24.w = c_25.w;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (c_25.xyz + (tmpvar_8 * (xlv_TEXCOORD5 + x1_23)));
  c_24.xyz = tmpvar_29;
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
in vec4 _glesTANGENT;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_9;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_13;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_22;
  tmpvar_22 = ((_glesVertex.xyz - _glesMultiTexCoord1.xyz) * mix (1.0, _glesMultiTexCoord1.w, unity_LODFade.x));
  highp mat3 tmpvar_23;
  tmpvar_23[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_23[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_23[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_24;
  tmpvar_24 = (normalize((tmpvar_22 * tmpvar_23)) * sqrt(dot (tmpvar_22, tmpvar_22)));
  FinalPosition_18 = tmpvar_24;
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_25;
    tmpvar_25 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_26;
    isBestWind_26 = (tmpvar_19 == 4.0);
    bool bLeaf2_27;
    bLeaf2_27 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_28;
    vPos_28 = tmpvar_24;
    highp vec3 vDirection_29;
    vDirection_29 = tmpvar_2;
    highp float tmpvar_30;
    if (bLeaf2_27) {
      tmpvar_30 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_31;
    if (bLeaf2_27) {
      tmpvar_31 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_32;
    highp vec4 tmpvar_33;
    tmpvar_33.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_33.x = (tmpvar_30 + tmpvar_25);
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    vPos_32 = (tmpvar_24 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_31 * (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_29 = tmpvar_2;
    vPos_28 = vPos_32;
    if (isBestWind_26) {
      highp vec3 tmpvar_35;
      tmpvar_35 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_36;
      if (bLeaf2_27) {
        tmpvar_36 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_37;
      if (bLeaf2_27) {
        tmpvar_37 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_38;
      if (bLeaf2_27) {
        tmpvar_38 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_39;
      if (bLeaf2_27) {
        tmpvar_39 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_40;
      if (bLeaf2_27) {
        tmpvar_40 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_40 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_41;
      if (bLeaf2_27) {
        tmpvar_41 = bool(1);
      } else {
        tmpvar_41 = bool(1);
      };
      highp float fTwitch_42;
      highp vec3 vAxis_43;
      highp vec3 tmpvar_44;
      tmpvar_44 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_45;
      tmpvar_45 = ((tmpvar_44.x + tmpvar_44.y) + tmpvar_44.z);
      highp vec4 tmpvar_46;
      tmpvar_46.x = (tmpvar_36 + tmpvar_45);
      tmpvar_46.y = ((tmpvar_36 * 0.75) - tmpvar_45);
      tmpvar_46.z = ((tmpvar_36 * 0.01) + tmpvar_45);
      tmpvar_46.w = (tmpvar_36 + tmpvar_45);
      highp vec4 tmpvar_47;
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      tmpvar_47 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = sqrt(dot (vPos_32, vPos_32));
      highp float fAngle_50;
      fAngle_50 = ((_glesMultiTexCoord2.x * tmpvar_38) * (tmpvar_47.x + (tmpvar_47.y * tmpvar_47.y)));
      highp vec2 vSinCos_51;
      vSinCos_51.x = sin(fAngle_50);
      vSinCos_51.y = cos(fAngle_50);
      highp float tmpvar_52;
      tmpvar_52 = (1.0 - vSinCos_51.y);
      highp mat3 tmpvar_53;
      tmpvar_53[0].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.x) + vSinCos_51.y);
      tmpvar_53[0].y = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.y) + (vSinCos_51.x * tmpvar_35.z));
      tmpvar_53[0].z = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.z) - (vSinCos_51.x * tmpvar_35.y));
      tmpvar_53[1].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.y) - (vSinCos_51.x * tmpvar_35.z));
      tmpvar_53[1].y = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.y) + vSinCos_51.y);
      tmpvar_53[1].z = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.z) + (vSinCos_51.x * tmpvar_35.x));
      tmpvar_53[2].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.z) + (vSinCos_51.x * tmpvar_35.y));
      tmpvar_53[2].y = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.z) - (vSinCos_51.x * tmpvar_35.x));
      tmpvar_53[2].z = (((tmpvar_52 * tmpvar_35.z) * tmpvar_35.z) + vSinCos_51.y);
      highp vec3 tmpvar_54;
      tmpvar_54 = ((tmpvar_35.yzx * vRotatedWindVector_17.zxy) - (tmpvar_35.zxy * vRotatedWindVector_17.yzx));
      vAxis_43.xz = tmpvar_54.xz;
      highp float tmpvar_55;
      tmpvar_55 = clamp (dot (vRotatedWindVector_17, tmpvar_35), -1.0, 1.0);
      vAxis_43.y = (tmpvar_54.y + tmpvar_55);
      highp vec3 tmpvar_56;
      tmpvar_56 = normalize(vAxis_43);
      vAxis_43 = tmpvar_56;
      highp float tmpvar_57;
      tmpvar_57 = (1.570796 - (sign(tmpvar_55) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_55))) * (1.570796 + (abs(tmpvar_55) * (-0.2146018 + 
          (abs(tmpvar_55) * (0.08656672 + (abs(tmpvar_55) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_58;
      tmpvar_58 = (tmpvar_47.y - (tmpvar_47.x * tmpvar_47.x));
      fTwitch_42 = 0.0;
      if (tmpvar_41) {
        highp float fTime_59;
        fTime_59 = (tmpvar_40.z + tmpvar_45);
        highp vec4 tmpvar_60;
        tmpvar_60.zw = vec2(0.0, 0.0);
        tmpvar_60.x = fTime_59;
        tmpvar_60.y = (0.87 * fTime_59);
        highp vec4 tmpvar_61;
        highp vec4 tmpvar_62;
        tmpvar_62 = abs(((
          fract((tmpvar_60 + 0.5))
         * 2.0) - 1.0));
        tmpvar_61 = (((
          (tmpvar_62 * tmpvar_62)
         * 
          (3.0 - (2.0 * tmpvar_62))
        ) - 0.5) * 2.0);
        fTwitch_42 = (tmpvar_40.x * pow (clamp (
          ((((tmpvar_61.x * tmpvar_61.y) * tmpvar_61.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_40.y));
      };
      highp float fAngle_63;
      fAngle_63 = (_glesMultiTexCoord2.x * ((
        (tmpvar_57 * tmpvar_39)
       + 
        (tmpvar_58 * tmpvar_37)
      ) + fTwitch_42));
      highp vec2 vSinCos_64;
      vSinCos_64.x = sin(fAngle_63);
      vSinCos_64.y = cos(fAngle_63);
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - vSinCos_64.y);
      highp mat3 tmpvar_66;
      tmpvar_66[0].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.x) + vSinCos_64.y);
      tmpvar_66[0].y = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.y) + (vSinCos_64.x * tmpvar_56.z));
      tmpvar_66[0].z = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.z) - (vSinCos_64.x * tmpvar_56.y));
      tmpvar_66[1].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.y) - (vSinCos_64.x * tmpvar_56.z));
      tmpvar_66[1].y = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.y) + vSinCos_64.y);
      tmpvar_66[1].z = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.z) + (vSinCos_64.x * tmpvar_56.x));
      tmpvar_66[2].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.z) + (vSinCos_64.x * tmpvar_56.y));
      tmpvar_66[2].y = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.z) - (vSinCos_64.x * tmpvar_56.x));
      tmpvar_66[2].z = (((tmpvar_65 * tmpvar_56.z) * tmpvar_56.z) + vSinCos_64.y);
      highp mat3 tmpvar_67;
      tmpvar_67 = (tmpvar_53 * tmpvar_66);
      vDirection_29 = (tmpvar_67 * _glesNormal);
      vPos_28 = (normalize((tmpvar_67 * vPos_32)) * tmpvar_49);
    };
    tmpvar_15 = vDirection_29;
    FinalPosition_18 = vPos_28;
  };
  highp vec3 tmpvar_68;
  tmpvar_68 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  FinalPosition_18 = tmpvar_68;
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_69;
    vPos_69 = tmpvar_68;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_70;
      vPos_70 = tmpvar_68;
      highp float fAdherenceScale_71;
      highp vec3 tmpvar_72;
      tmpvar_72 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_73;
      tmpvar_73 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_74;
      highp float fOscillation_75;
      fOscillation_75 = 1.0;
      highp float fAmount_76;
      highp float fTarget_77;
      highp vec4 tmpvar_78;
      tmpvar_78.x = (tmpvar_73 + _glesMultiTexCoord0.w);
      tmpvar_78.y = ((tmpvar_73 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_78.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_73 + _glesMultiTexCoord0.w));
      tmpvar_78.w = ((tmpvar_73 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      vOscillations_74 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      highp float tmpvar_80;
      tmpvar_80 = (vOscillations_74.y * vOscillations_74.z);
      fTarget_77 = 1.0;
      fAmount_76 = tmpvar_80;
      if ((tmpvar_80 < 0.0)) {
        fTarget_77 = -1.0;
        fAmount_76 = -(tmpvar_80);
      };
      fOscillation_75 = (((
        (mix (mix (tmpvar_80, fTarget_77, fAmount_76), fTarget_77, fAmount_76) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_74.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_74.w * _ST_WindBranchWhip.x)));
      vPos_70 = (tmpvar_68 + ((tmpvar_72 * fOscillation_75) * _ST_WindBranch.y));
      highp vec4 tmpvar_81;
      tmpvar_81.zw = vec2(0.0, 0.0);
      tmpvar_81.x = ((tmpvar_73 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_81.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_82;
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_81 + 0.5))
       * 2.0) - 1.0));
      tmpvar_82 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      fAdherenceScale_71 = (1.0 - ((
        ((tmpvar_82.x * tmpvar_82.y) * tmpvar_82.x)
       * tmpvar_82.y) * _ST_WindTurbulences.x));
      fAdherenceScale_71 = (fAdherenceScale_71 + ((vOscillations_74.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_70 = (vPos_70 + ((
        ((vRotatedBranchAnchor_16 - vPos_70) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_71) * _glesMultiTexCoord0.z));
      vPos_69 = vPos_70;
    } else {
      highp vec3 vPos_84;
      vPos_84 = vPos_69;
      highp vec3 tmpvar_85;
      tmpvar_85 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_86;
      tmpvar_86 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_87;
      highp float fAmount_88;
      highp float fTarget_89;
      highp vec4 tmpvar_90;
      tmpvar_90.w = 0.0;
      tmpvar_90.x = (tmpvar_86 + _glesMultiTexCoord0.w);
      tmpvar_90.y = ((tmpvar_86 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_90.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_86 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_91;
      tmpvar_91 = abs(((
        fract((tmpvar_90 + 0.5))
       * 2.0) - 1.0));
      vOscillations_87 = (((
        (tmpvar_91 * tmpvar_91)
       * 
        (3.0 - (2.0 * tmpvar_91))
      ) - 0.5) * 2.0);
      highp float tmpvar_92;
      tmpvar_92 = (vOscillations_87.y * vOscillations_87.z);
      fTarget_89 = 1.0;
      fAmount_88 = tmpvar_92;
      if ((tmpvar_92 < 0.0)) {
        fTarget_89 = -1.0;
        fAmount_88 = -(tmpvar_92);
      };
      vPos_84 = (vPos_69 + ((tmpvar_85 * 
        (((mix (
          mix (tmpvar_92, fTarget_89, fAmount_88)
        , fTarget_89, fAmount_88) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_87.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_69 = vPos_84;
    };
    FinalPosition_18 = vPos_69;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_93;
    vPos_93 = FinalPosition_18;
    highp float fAdjust_94;
    highp float fLength_95;
    fLength_95 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_96;
    tmpvar_96 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_94 = tmpvar_96;
    if ((tmpvar_96 != 0.0)) {
      fAdjust_94 = pow (tmpvar_96, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_97;
    tmpvar_97.zw = vec2(0.0, 0.0);
    tmpvar_97.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_97.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_98;
    highp vec4 tmpvar_99;
    tmpvar_99 = abs(((
      fract((tmpvar_97 + 0.5))
     * 2.0) - 1.0));
    tmpvar_98 = (((
      (tmpvar_99 * tmpvar_99)
     * 
      (3.0 - (2.0 * tmpvar_99))
    ) - 0.5) * 2.0);
    vPos_93.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_98.x + (tmpvar_98.y * tmpvar_98.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_94)));
    vPos_93 = (normalize(vPos_93) * fLength_95);
    FinalPosition_18 = vPos_93;
  };
  tmpvar_14.xyz = FinalPosition_18;
  tmpvar_6 = tmpvar_7;
  highp vec3 tmpvar_100;
  tmpvar_100 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_101;
  v_101.x = _World2Object[0].x;
  v_101.y = _World2Object[1].x;
  v_101.z = _World2Object[2].x;
  v_101.w = _World2Object[3].x;
  highp vec4 v_102;
  v_102.x = _World2Object[0].y;
  v_102.y = _World2Object[1].y;
  v_102.z = _World2Object[2].y;
  v_102.w = _World2Object[3].y;
  highp vec4 v_103;
  v_103.x = _World2Object[0].z;
  v_103.y = _World2Object[1].z;
  v_103.z = _World2Object[2].z;
  v_103.w = _World2Object[3].z;
  highp vec3 tmpvar_104;
  tmpvar_104 = normalize(((
    (v_101.xyz * tmpvar_15.x)
   + 
    (v_102.xyz * tmpvar_15.y)
  ) + (v_103.xyz * tmpvar_15.z)));
  worldNormal_5 = tmpvar_104;
  highp mat3 tmpvar_105;
  tmpvar_105[0] = _Object2World[0].xyz;
  tmpvar_105[1] = _Object2World[1].xyz;
  tmpvar_105[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_106;
  tmpvar_106 = normalize((tmpvar_105 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_106;
  lowp vec3 tmpvar_107;
  tmpvar_107 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_108;
  tmpvar_108 = (tmpvar_107 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_108;
  highp vec4 tmpvar_109;
  tmpvar_109.x = worldTangent_4.x;
  tmpvar_109.y = worldBinormal_3.x;
  tmpvar_109.z = worldNormal_5.x;
  tmpvar_109.w = tmpvar_100.x;
  highp vec4 tmpvar_110;
  tmpvar_110.x = worldTangent_4.y;
  tmpvar_110.y = worldBinormal_3.y;
  tmpvar_110.z = worldNormal_5.y;
  tmpvar_110.w = tmpvar_100.y;
  highp vec4 tmpvar_111;
  tmpvar_111.x = worldTangent_4.z;
  tmpvar_111.y = worldBinormal_3.z;
  tmpvar_111.z = worldNormal_5.z;
  tmpvar_111.w = tmpvar_100.z;
  lowp vec4 tmpvar_112;
  tmpvar_112.w = 1.0;
  tmpvar_112.xyz = worldNormal_5;
  mediump vec4 normal_113;
  normal_113 = tmpvar_112;
  mediump vec3 x2_114;
  mediump vec4 tmpvar_115;
  tmpvar_115 = (normal_113.xyzz * normal_113.yzzx);
  x2_114.x = dot (unity_SHBr, tmpvar_115);
  x2_114.y = dot (unity_SHBg, tmpvar_115);
  x2_114.z = dot (unity_SHBb, tmpvar_115);
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_109;
  xlv_TEXCOORD1 = tmpvar_110;
  xlv_TEXCOORD2 = tmpvar_111;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = (x2_114 + (unity_SHC.xyz * (
    (normal_113.x * normal_113.x)
   - 
    (normal_113.y * normal_113.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_12;
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_14 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_15;
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_3.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_3.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_3.z = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_20;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_21;
  normalWorld_21 = worldN_3;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_21;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_26 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tmpvar_8 * tmpvar_1) * diff_26);
  c_25.xyz = tmpvar_28;
  c_25.w = tmpvar_9;
  c_24.w = c_25.w;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (c_25.xyz + (tmpvar_8 * (xlv_TEXCOORD5 + x1_23)));
  c_24.xyz = tmpvar_29;
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_10;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_14;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_23;
  tmpvar_23 = ((_glesVertex.xyz - _glesMultiTexCoord1.xyz) * mix (1.0, _glesMultiTexCoord1.w, unity_LODFade.x));
  highp mat3 tmpvar_24;
  tmpvar_24[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_24[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_24[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_25;
  tmpvar_25 = (normalize((tmpvar_23 * tmpvar_24)) * sqrt(dot (tmpvar_23, tmpvar_23)));
  FinalPosition_19 = tmpvar_25;
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_26;
    tmpvar_26 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_27;
    isBestWind_27 = (tmpvar_20 == 4.0);
    bool bLeaf2_28;
    bLeaf2_28 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_29;
    vPos_29 = tmpvar_25;
    highp vec3 vDirection_30;
    vDirection_30 = tmpvar_2;
    highp float tmpvar_31;
    if (bLeaf2_28) {
      tmpvar_31 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_32;
    if (bLeaf2_28) {
      tmpvar_32 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_32 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_33;
    highp vec4 tmpvar_34;
    tmpvar_34.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_34.x = (tmpvar_31 + tmpvar_26);
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    vPos_33 = (tmpvar_25 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_32 * (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_30 = tmpvar_2;
    vPos_29 = vPos_33;
    if (isBestWind_27) {
      highp vec3 tmpvar_36;
      tmpvar_36 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_37;
      if (bLeaf2_28) {
        tmpvar_37 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_38;
      if (bLeaf2_28) {
        tmpvar_38 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_39;
      if (bLeaf2_28) {
        tmpvar_39 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_40;
      if (bLeaf2_28) {
        tmpvar_40 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_40 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_41;
      if (bLeaf2_28) {
        tmpvar_41 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_41 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_42;
      if (bLeaf2_28) {
        tmpvar_42 = bool(1);
      } else {
        tmpvar_42 = bool(1);
      };
      highp float fTwitch_43;
      highp vec3 vAxis_44;
      highp vec3 tmpvar_45;
      tmpvar_45 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_46;
      tmpvar_46 = ((tmpvar_45.x + tmpvar_45.y) + tmpvar_45.z);
      highp vec4 tmpvar_47;
      tmpvar_47.x = (tmpvar_37 + tmpvar_46);
      tmpvar_47.y = ((tmpvar_37 * 0.75) - tmpvar_46);
      tmpvar_47.z = ((tmpvar_37 * 0.01) + tmpvar_46);
      tmpvar_47.w = (tmpvar_37 + tmpvar_46);
      highp vec4 tmpvar_48;
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      tmpvar_48 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = sqrt(dot (vPos_33, vPos_33));
      highp float fAngle_51;
      fAngle_51 = ((_glesMultiTexCoord2.x * tmpvar_39) * (tmpvar_48.x + (tmpvar_48.y * tmpvar_48.y)));
      highp vec2 vSinCos_52;
      vSinCos_52.x = sin(fAngle_51);
      vSinCos_52.y = cos(fAngle_51);
      highp float tmpvar_53;
      tmpvar_53 = (1.0 - vSinCos_52.y);
      highp mat3 tmpvar_54;
      tmpvar_54[0].x = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.x) + vSinCos_52.y);
      tmpvar_54[0].y = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.y) + (vSinCos_52.x * tmpvar_36.z));
      tmpvar_54[0].z = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.z) - (vSinCos_52.x * tmpvar_36.y));
      tmpvar_54[1].x = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.y) - (vSinCos_52.x * tmpvar_36.z));
      tmpvar_54[1].y = (((tmpvar_53 * tmpvar_36.y) * tmpvar_36.y) + vSinCos_52.y);
      tmpvar_54[1].z = (((tmpvar_53 * tmpvar_36.y) * tmpvar_36.z) + (vSinCos_52.x * tmpvar_36.x));
      tmpvar_54[2].x = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.z) + (vSinCos_52.x * tmpvar_36.y));
      tmpvar_54[2].y = (((tmpvar_53 * tmpvar_36.y) * tmpvar_36.z) - (vSinCos_52.x * tmpvar_36.x));
      tmpvar_54[2].z = (((tmpvar_53 * tmpvar_36.z) * tmpvar_36.z) + vSinCos_52.y);
      highp vec3 tmpvar_55;
      tmpvar_55 = ((tmpvar_36.yzx * vRotatedWindVector_18.zxy) - (tmpvar_36.zxy * vRotatedWindVector_18.yzx));
      vAxis_44.xz = tmpvar_55.xz;
      highp float tmpvar_56;
      tmpvar_56 = clamp (dot (vRotatedWindVector_18, tmpvar_36), -1.0, 1.0);
      vAxis_44.y = (tmpvar_55.y + tmpvar_56);
      highp vec3 tmpvar_57;
      tmpvar_57 = normalize(vAxis_44);
      vAxis_44 = tmpvar_57;
      highp float tmpvar_58;
      tmpvar_58 = (1.570796 - (sign(tmpvar_56) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_56))) * (1.570796 + (abs(tmpvar_56) * (-0.2146018 + 
          (abs(tmpvar_56) * (0.08656672 + (abs(tmpvar_56) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_59;
      tmpvar_59 = (tmpvar_48.y - (tmpvar_48.x * tmpvar_48.x));
      fTwitch_43 = 0.0;
      if (tmpvar_42) {
        highp float fTime_60;
        fTime_60 = (tmpvar_41.z + tmpvar_46);
        highp vec4 tmpvar_61;
        tmpvar_61.zw = vec2(0.0, 0.0);
        tmpvar_61.x = fTime_60;
        tmpvar_61.y = (0.87 * fTime_60);
        highp vec4 tmpvar_62;
        highp vec4 tmpvar_63;
        tmpvar_63 = abs(((
          fract((tmpvar_61 + 0.5))
         * 2.0) - 1.0));
        tmpvar_62 = (((
          (tmpvar_63 * tmpvar_63)
         * 
          (3.0 - (2.0 * tmpvar_63))
        ) - 0.5) * 2.0);
        fTwitch_43 = (tmpvar_41.x * pow (clamp (
          ((((tmpvar_62.x * tmpvar_62.y) * tmpvar_62.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_41.y));
      };
      highp float fAngle_64;
      fAngle_64 = (_glesMultiTexCoord2.x * ((
        (tmpvar_58 * tmpvar_40)
       + 
        (tmpvar_59 * tmpvar_38)
      ) + fTwitch_43));
      highp vec2 vSinCos_65;
      vSinCos_65.x = sin(fAngle_64);
      vSinCos_65.y = cos(fAngle_64);
      highp float tmpvar_66;
      tmpvar_66 = (1.0 - vSinCos_65.y);
      highp mat3 tmpvar_67;
      tmpvar_67[0].x = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.x) + vSinCos_65.y);
      tmpvar_67[0].y = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.y) + (vSinCos_65.x * tmpvar_57.z));
      tmpvar_67[0].z = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.z) - (vSinCos_65.x * tmpvar_57.y));
      tmpvar_67[1].x = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.y) - (vSinCos_65.x * tmpvar_57.z));
      tmpvar_67[1].y = (((tmpvar_66 * tmpvar_57.y) * tmpvar_57.y) + vSinCos_65.y);
      tmpvar_67[1].z = (((tmpvar_66 * tmpvar_57.y) * tmpvar_57.z) + (vSinCos_65.x * tmpvar_57.x));
      tmpvar_67[2].x = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.z) + (vSinCos_65.x * tmpvar_57.y));
      tmpvar_67[2].y = (((tmpvar_66 * tmpvar_57.y) * tmpvar_57.z) - (vSinCos_65.x * tmpvar_57.x));
      tmpvar_67[2].z = (((tmpvar_66 * tmpvar_57.z) * tmpvar_57.z) + vSinCos_65.y);
      highp mat3 tmpvar_68;
      tmpvar_68 = (tmpvar_54 * tmpvar_67);
      vDirection_30 = (tmpvar_68 * _glesNormal);
      vPos_29 = (normalize((tmpvar_68 * vPos_33)) * tmpvar_50);
    };
    tmpvar_16 = vDirection_30;
    FinalPosition_19 = vPos_29;
  };
  highp vec3 tmpvar_69;
  tmpvar_69 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_69;
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_70;
    vPos_70 = tmpvar_69;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_71;
      vPos_71 = tmpvar_69;
      highp float fAdherenceScale_72;
      highp vec3 tmpvar_73;
      tmpvar_73 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_74;
      tmpvar_74 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_75;
      highp float fOscillation_76;
      fOscillation_76 = 1.0;
      highp float fAmount_77;
      highp float fTarget_78;
      highp vec4 tmpvar_79;
      tmpvar_79.x = (tmpvar_74 + _glesMultiTexCoord0.w);
      tmpvar_79.y = ((tmpvar_74 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_79.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_74 + _glesMultiTexCoord0.w));
      tmpvar_79.w = ((tmpvar_74 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      vOscillations_75 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      highp float tmpvar_81;
      tmpvar_81 = (vOscillations_75.y * vOscillations_75.z);
      fTarget_78 = 1.0;
      fAmount_77 = tmpvar_81;
      if ((tmpvar_81 < 0.0)) {
        fTarget_78 = -1.0;
        fAmount_77 = -(tmpvar_81);
      };
      fOscillation_76 = (((
        (mix (mix (tmpvar_81, fTarget_78, fAmount_77), fTarget_78, fAmount_77) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_75.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_75.w * _ST_WindBranchWhip.x)));
      vPos_71 = (tmpvar_69 + ((tmpvar_73 * fOscillation_76) * _ST_WindBranch.y));
      highp vec4 tmpvar_82;
      tmpvar_82.zw = vec2(0.0, 0.0);
      tmpvar_82.x = ((tmpvar_74 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_82.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_83;
      highp vec4 tmpvar_84;
      tmpvar_84 = abs(((
        fract((tmpvar_82 + 0.5))
       * 2.0) - 1.0));
      tmpvar_83 = (((
        (tmpvar_84 * tmpvar_84)
       * 
        (3.0 - (2.0 * tmpvar_84))
      ) - 0.5) * 2.0);
      fAdherenceScale_72 = (1.0 - ((
        ((tmpvar_83.x * tmpvar_83.y) * tmpvar_83.x)
       * tmpvar_83.y) * _ST_WindTurbulences.x));
      fAdherenceScale_72 = (fAdherenceScale_72 + ((vOscillations_75.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_71 = (vPos_71 + ((
        ((vRotatedBranchAnchor_17 - vPos_71) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_72) * _glesMultiTexCoord0.z));
      vPos_70 = vPos_71;
    } else {
      highp vec3 vPos_85;
      vPos_85 = vPos_70;
      highp vec3 tmpvar_86;
      tmpvar_86 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_87;
      tmpvar_87 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_88;
      highp float fAmount_89;
      highp float fTarget_90;
      highp vec4 tmpvar_91;
      tmpvar_91.w = 0.0;
      tmpvar_91.x = (tmpvar_87 + _glesMultiTexCoord0.w);
      tmpvar_91.y = ((tmpvar_87 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_91.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_87 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_92;
      tmpvar_92 = abs(((
        fract((tmpvar_91 + 0.5))
       * 2.0) - 1.0));
      vOscillations_88 = (((
        (tmpvar_92 * tmpvar_92)
       * 
        (3.0 - (2.0 * tmpvar_92))
      ) - 0.5) * 2.0);
      highp float tmpvar_93;
      tmpvar_93 = (vOscillations_88.y * vOscillations_88.z);
      fTarget_90 = 1.0;
      fAmount_89 = tmpvar_93;
      if ((tmpvar_93 < 0.0)) {
        fTarget_90 = -1.0;
        fAmount_89 = -(tmpvar_93);
      };
      vPos_85 = (vPos_70 + ((tmpvar_86 * 
        (((mix (
          mix (tmpvar_93, fTarget_90, fAmount_89)
        , fTarget_90, fAmount_89) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_88.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_70 = vPos_85;
    };
    FinalPosition_19 = vPos_70;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_94;
    vPos_94 = FinalPosition_19;
    highp float fAdjust_95;
    highp float fLength_96;
    fLength_96 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_97;
    tmpvar_97 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_95 = tmpvar_97;
    if ((tmpvar_97 != 0.0)) {
      fAdjust_95 = pow (tmpvar_97, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_98;
    tmpvar_98.zw = vec2(0.0, 0.0);
    tmpvar_98.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_98.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_99;
    highp vec4 tmpvar_100;
    tmpvar_100 = abs(((
      fract((tmpvar_98 + 0.5))
     * 2.0) - 1.0));
    tmpvar_99 = (((
      (tmpvar_100 * tmpvar_100)
     * 
      (3.0 - (2.0 * tmpvar_100))
    ) - 0.5) * 2.0);
    vPos_94.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_99.x + (tmpvar_99.y * tmpvar_99.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_95)));
    vPos_94 = (normalize(vPos_94) * fLength_96);
    FinalPosition_19 = vPos_94;
  };
  tmpvar_15.xyz = FinalPosition_19;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_101;
  tmpvar_101 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_102;
  v_102.x = _World2Object[0].x;
  v_102.y = _World2Object[1].x;
  v_102.z = _World2Object[2].x;
  v_102.w = _World2Object[3].x;
  highp vec4 v_103;
  v_103.x = _World2Object[0].y;
  v_103.y = _World2Object[1].y;
  v_103.z = _World2Object[2].y;
  v_103.w = _World2Object[3].y;
  highp vec4 v_104;
  v_104.x = _World2Object[0].z;
  v_104.y = _World2Object[1].z;
  v_104.z = _World2Object[2].z;
  v_104.w = _World2Object[3].z;
  highp vec3 tmpvar_105;
  tmpvar_105 = normalize(((
    (v_102.xyz * tmpvar_16.x)
   + 
    (v_103.xyz * tmpvar_16.y)
  ) + (v_104.xyz * tmpvar_16.z)));
  worldNormal_5 = tmpvar_105;
  highp mat3 tmpvar_106;
  tmpvar_106[0] = _Object2World[0].xyz;
  tmpvar_106[1] = _Object2World[1].xyz;
  tmpvar_106[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize((tmpvar_106 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_107;
  lowp vec3 tmpvar_108;
  tmpvar_108 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_109;
  tmpvar_109 = (tmpvar_108 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_109;
  highp vec4 tmpvar_110;
  tmpvar_110.x = worldTangent_4.x;
  tmpvar_110.y = worldBinormal_3.x;
  tmpvar_110.z = worldNormal_5.x;
  tmpvar_110.w = tmpvar_101.x;
  highp vec4 tmpvar_111;
  tmpvar_111.x = worldTangent_4.y;
  tmpvar_111.y = worldBinormal_3.y;
  tmpvar_111.z = worldNormal_5.y;
  tmpvar_111.w = tmpvar_101.y;
  highp vec4 tmpvar_112;
  tmpvar_112.x = worldTangent_4.z;
  tmpvar_112.y = worldBinormal_3.z;
  tmpvar_112.z = worldNormal_5.z;
  tmpvar_112.w = tmpvar_101.z;
  lowp vec4 tmpvar_113;
  tmpvar_113.w = 1.0;
  tmpvar_113.xyz = worldNormal_5;
  mediump vec4 normal_114;
  normal_114 = tmpvar_113;
  mediump vec3 x2_115;
  mediump vec4 tmpvar_116;
  tmpvar_116 = (normal_114.xyzz * normal_114.yzzx);
  x2_115.x = dot (unity_SHBr, tmpvar_116);
  x2_115.y = dot (unity_SHBg, tmpvar_116);
  x2_115.z = dot (unity_SHBb, tmpvar_116);
  highp vec4 tmpvar_117;
  tmpvar_117 = (unity_World2Shadow[0] * (_Object2World * tmpvar_15));
  tmpvar_7 = tmpvar_117;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_110;
  xlv_TEXCOORD1 = tmpvar_111;
  xlv_TEXCOORD2 = tmpvar_112;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = (x2_115 + (unity_SHC.xyz * (
    (normal_114.x * normal_114.x)
   - 
    (normal_114.y * normal_114.y)
  )));
  xlv_TEXCOORD6 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_18;
  mediump float dist_19;
  lowp float tmpvar_20;
  tmpvar_20 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x;
  dist_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (float((dist_19 > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_4.x = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_4.y = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_4.z = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_25;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_18;
  mediump vec3 normalWorld_26;
  normalWorld_26 = worldN_4;
  mediump vec3 tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = normalWorld_26;
  mediump vec3 x1_29;
  x1_29.x = dot (unity_SHAr, tmpvar_28);
  x1_29.y = dot (unity_SHAg, tmpvar_28);
  x1_29.z = dot (unity_SHAb, tmpvar_28);
  tmpvar_27 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_27;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_32 = tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_9 * tmpvar_27) * diff_32);
  c_31.xyz = tmpvar_34;
  c_31.w = tmpvar_10;
  c_30.w = c_31.w;
  mediump vec3 tmpvar_35;
  tmpvar_35 = (c_31.xyz + (tmpvar_9 * (xlv_TEXCOORD5 + x1_29)));
  c_30.xyz = tmpvar_35;
  c_5.xyz = c_30.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_10;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_14;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_23;
  tmpvar_23 = ((_glesVertex.xyz - _glesMultiTexCoord1.xyz) * mix (1.0, _glesMultiTexCoord1.w, unity_LODFade.x));
  highp mat3 tmpvar_24;
  tmpvar_24[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_24[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_24[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_25;
  tmpvar_25 = (normalize((tmpvar_23 * tmpvar_24)) * sqrt(dot (tmpvar_23, tmpvar_23)));
  FinalPosition_19 = tmpvar_25;
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_26;
    tmpvar_26 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_27;
    isBestWind_27 = (tmpvar_20 == 4.0);
    bool bLeaf2_28;
    bLeaf2_28 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_29;
    vPos_29 = tmpvar_25;
    highp vec3 vDirection_30;
    vDirection_30 = tmpvar_2;
    highp float tmpvar_31;
    if (bLeaf2_28) {
      tmpvar_31 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_32;
    if (bLeaf2_28) {
      tmpvar_32 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_32 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_33;
    highp vec4 tmpvar_34;
    tmpvar_34.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_34.x = (tmpvar_31 + tmpvar_26);
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    vPos_33 = (tmpvar_25 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_32 * (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_30 = tmpvar_2;
    vPos_29 = vPos_33;
    if (isBestWind_27) {
      highp vec3 tmpvar_36;
      tmpvar_36 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_37;
      if (bLeaf2_28) {
        tmpvar_37 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_38;
      if (bLeaf2_28) {
        tmpvar_38 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_39;
      if (bLeaf2_28) {
        tmpvar_39 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_40;
      if (bLeaf2_28) {
        tmpvar_40 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_40 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_41;
      if (bLeaf2_28) {
        tmpvar_41 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_41 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_42;
      if (bLeaf2_28) {
        tmpvar_42 = bool(1);
      } else {
        tmpvar_42 = bool(1);
      };
      highp float fTwitch_43;
      highp vec3 vAxis_44;
      highp vec3 tmpvar_45;
      tmpvar_45 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_46;
      tmpvar_46 = ((tmpvar_45.x + tmpvar_45.y) + tmpvar_45.z);
      highp vec4 tmpvar_47;
      tmpvar_47.x = (tmpvar_37 + tmpvar_46);
      tmpvar_47.y = ((tmpvar_37 * 0.75) - tmpvar_46);
      tmpvar_47.z = ((tmpvar_37 * 0.01) + tmpvar_46);
      tmpvar_47.w = (tmpvar_37 + tmpvar_46);
      highp vec4 tmpvar_48;
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      tmpvar_48 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = sqrt(dot (vPos_33, vPos_33));
      highp float fAngle_51;
      fAngle_51 = ((_glesMultiTexCoord2.x * tmpvar_39) * (tmpvar_48.x + (tmpvar_48.y * tmpvar_48.y)));
      highp vec2 vSinCos_52;
      vSinCos_52.x = sin(fAngle_51);
      vSinCos_52.y = cos(fAngle_51);
      highp float tmpvar_53;
      tmpvar_53 = (1.0 - vSinCos_52.y);
      highp mat3 tmpvar_54;
      tmpvar_54[0].x = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.x) + vSinCos_52.y);
      tmpvar_54[0].y = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.y) + (vSinCos_52.x * tmpvar_36.z));
      tmpvar_54[0].z = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.z) - (vSinCos_52.x * tmpvar_36.y));
      tmpvar_54[1].x = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.y) - (vSinCos_52.x * tmpvar_36.z));
      tmpvar_54[1].y = (((tmpvar_53 * tmpvar_36.y) * tmpvar_36.y) + vSinCos_52.y);
      tmpvar_54[1].z = (((tmpvar_53 * tmpvar_36.y) * tmpvar_36.z) + (vSinCos_52.x * tmpvar_36.x));
      tmpvar_54[2].x = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.z) + (vSinCos_52.x * tmpvar_36.y));
      tmpvar_54[2].y = (((tmpvar_53 * tmpvar_36.y) * tmpvar_36.z) - (vSinCos_52.x * tmpvar_36.x));
      tmpvar_54[2].z = (((tmpvar_53 * tmpvar_36.z) * tmpvar_36.z) + vSinCos_52.y);
      highp vec3 tmpvar_55;
      tmpvar_55 = ((tmpvar_36.yzx * vRotatedWindVector_18.zxy) - (tmpvar_36.zxy * vRotatedWindVector_18.yzx));
      vAxis_44.xz = tmpvar_55.xz;
      highp float tmpvar_56;
      tmpvar_56 = clamp (dot (vRotatedWindVector_18, tmpvar_36), -1.0, 1.0);
      vAxis_44.y = (tmpvar_55.y + tmpvar_56);
      highp vec3 tmpvar_57;
      tmpvar_57 = normalize(vAxis_44);
      vAxis_44 = tmpvar_57;
      highp float tmpvar_58;
      tmpvar_58 = (1.570796 - (sign(tmpvar_56) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_56))) * (1.570796 + (abs(tmpvar_56) * (-0.2146018 + 
          (abs(tmpvar_56) * (0.08656672 + (abs(tmpvar_56) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_59;
      tmpvar_59 = (tmpvar_48.y - (tmpvar_48.x * tmpvar_48.x));
      fTwitch_43 = 0.0;
      if (tmpvar_42) {
        highp float fTime_60;
        fTime_60 = (tmpvar_41.z + tmpvar_46);
        highp vec4 tmpvar_61;
        tmpvar_61.zw = vec2(0.0, 0.0);
        tmpvar_61.x = fTime_60;
        tmpvar_61.y = (0.87 * fTime_60);
        highp vec4 tmpvar_62;
        highp vec4 tmpvar_63;
        tmpvar_63 = abs(((
          fract((tmpvar_61 + 0.5))
         * 2.0) - 1.0));
        tmpvar_62 = (((
          (tmpvar_63 * tmpvar_63)
         * 
          (3.0 - (2.0 * tmpvar_63))
        ) - 0.5) * 2.0);
        fTwitch_43 = (tmpvar_41.x * pow (clamp (
          ((((tmpvar_62.x * tmpvar_62.y) * tmpvar_62.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_41.y));
      };
      highp float fAngle_64;
      fAngle_64 = (_glesMultiTexCoord2.x * ((
        (tmpvar_58 * tmpvar_40)
       + 
        (tmpvar_59 * tmpvar_38)
      ) + fTwitch_43));
      highp vec2 vSinCos_65;
      vSinCos_65.x = sin(fAngle_64);
      vSinCos_65.y = cos(fAngle_64);
      highp float tmpvar_66;
      tmpvar_66 = (1.0 - vSinCos_65.y);
      highp mat3 tmpvar_67;
      tmpvar_67[0].x = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.x) + vSinCos_65.y);
      tmpvar_67[0].y = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.y) + (vSinCos_65.x * tmpvar_57.z));
      tmpvar_67[0].z = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.z) - (vSinCos_65.x * tmpvar_57.y));
      tmpvar_67[1].x = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.y) - (vSinCos_65.x * tmpvar_57.z));
      tmpvar_67[1].y = (((tmpvar_66 * tmpvar_57.y) * tmpvar_57.y) + vSinCos_65.y);
      tmpvar_67[1].z = (((tmpvar_66 * tmpvar_57.y) * tmpvar_57.z) + (vSinCos_65.x * tmpvar_57.x));
      tmpvar_67[2].x = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.z) + (vSinCos_65.x * tmpvar_57.y));
      tmpvar_67[2].y = (((tmpvar_66 * tmpvar_57.y) * tmpvar_57.z) - (vSinCos_65.x * tmpvar_57.x));
      tmpvar_67[2].z = (((tmpvar_66 * tmpvar_57.z) * tmpvar_57.z) + vSinCos_65.y);
      highp mat3 tmpvar_68;
      tmpvar_68 = (tmpvar_54 * tmpvar_67);
      vDirection_30 = (tmpvar_68 * _glesNormal);
      vPos_29 = (normalize((tmpvar_68 * vPos_33)) * tmpvar_50);
    };
    tmpvar_16 = vDirection_30;
    FinalPosition_19 = vPos_29;
  };
  highp vec3 tmpvar_69;
  tmpvar_69 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_69;
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_70;
    vPos_70 = tmpvar_69;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_71;
      vPos_71 = tmpvar_69;
      highp float fAdherenceScale_72;
      highp vec3 tmpvar_73;
      tmpvar_73 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_74;
      tmpvar_74 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_75;
      highp float fOscillation_76;
      fOscillation_76 = 1.0;
      highp float fAmount_77;
      highp float fTarget_78;
      highp vec4 tmpvar_79;
      tmpvar_79.x = (tmpvar_74 + _glesMultiTexCoord0.w);
      tmpvar_79.y = ((tmpvar_74 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_79.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_74 + _glesMultiTexCoord0.w));
      tmpvar_79.w = ((tmpvar_74 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      vOscillations_75 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      highp float tmpvar_81;
      tmpvar_81 = (vOscillations_75.y * vOscillations_75.z);
      fTarget_78 = 1.0;
      fAmount_77 = tmpvar_81;
      if ((tmpvar_81 < 0.0)) {
        fTarget_78 = -1.0;
        fAmount_77 = -(tmpvar_81);
      };
      fOscillation_76 = (((
        (mix (mix (tmpvar_81, fTarget_78, fAmount_77), fTarget_78, fAmount_77) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_75.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_75.w * _ST_WindBranchWhip.x)));
      vPos_71 = (tmpvar_69 + ((tmpvar_73 * fOscillation_76) * _ST_WindBranch.y));
      highp vec4 tmpvar_82;
      tmpvar_82.zw = vec2(0.0, 0.0);
      tmpvar_82.x = ((tmpvar_74 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_82.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_83;
      highp vec4 tmpvar_84;
      tmpvar_84 = abs(((
        fract((tmpvar_82 + 0.5))
       * 2.0) - 1.0));
      tmpvar_83 = (((
        (tmpvar_84 * tmpvar_84)
       * 
        (3.0 - (2.0 * tmpvar_84))
      ) - 0.5) * 2.0);
      fAdherenceScale_72 = (1.0 - ((
        ((tmpvar_83.x * tmpvar_83.y) * tmpvar_83.x)
       * tmpvar_83.y) * _ST_WindTurbulences.x));
      fAdherenceScale_72 = (fAdherenceScale_72 + ((vOscillations_75.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_71 = (vPos_71 + ((
        ((vRotatedBranchAnchor_17 - vPos_71) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_72) * _glesMultiTexCoord0.z));
      vPos_70 = vPos_71;
    } else {
      highp vec3 vPos_85;
      vPos_85 = vPos_70;
      highp vec3 tmpvar_86;
      tmpvar_86 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_87;
      tmpvar_87 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_88;
      highp float fAmount_89;
      highp float fTarget_90;
      highp vec4 tmpvar_91;
      tmpvar_91.w = 0.0;
      tmpvar_91.x = (tmpvar_87 + _glesMultiTexCoord0.w);
      tmpvar_91.y = ((tmpvar_87 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_91.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_87 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_92;
      tmpvar_92 = abs(((
        fract((tmpvar_91 + 0.5))
       * 2.0) - 1.0));
      vOscillations_88 = (((
        (tmpvar_92 * tmpvar_92)
       * 
        (3.0 - (2.0 * tmpvar_92))
      ) - 0.5) * 2.0);
      highp float tmpvar_93;
      tmpvar_93 = (vOscillations_88.y * vOscillations_88.z);
      fTarget_90 = 1.0;
      fAmount_89 = tmpvar_93;
      if ((tmpvar_93 < 0.0)) {
        fTarget_90 = -1.0;
        fAmount_89 = -(tmpvar_93);
      };
      vPos_85 = (vPos_70 + ((tmpvar_86 * 
        (((mix (
          mix (tmpvar_93, fTarget_90, fAmount_89)
        , fTarget_90, fAmount_89) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_88.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_70 = vPos_85;
    };
    FinalPosition_19 = vPos_70;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_94;
    vPos_94 = FinalPosition_19;
    highp float fAdjust_95;
    highp float fLength_96;
    fLength_96 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_97;
    tmpvar_97 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_95 = tmpvar_97;
    if ((tmpvar_97 != 0.0)) {
      fAdjust_95 = pow (tmpvar_97, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_98;
    tmpvar_98.zw = vec2(0.0, 0.0);
    tmpvar_98.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_98.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_99;
    highp vec4 tmpvar_100;
    tmpvar_100 = abs(((
      fract((tmpvar_98 + 0.5))
     * 2.0) - 1.0));
    tmpvar_99 = (((
      (tmpvar_100 * tmpvar_100)
     * 
      (3.0 - (2.0 * tmpvar_100))
    ) - 0.5) * 2.0);
    vPos_94.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_99.x + (tmpvar_99.y * tmpvar_99.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_95)));
    vPos_94 = (normalize(vPos_94) * fLength_96);
    FinalPosition_19 = vPos_94;
  };
  tmpvar_15.xyz = FinalPosition_19;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_101;
  tmpvar_101 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_102;
  v_102.x = _World2Object[0].x;
  v_102.y = _World2Object[1].x;
  v_102.z = _World2Object[2].x;
  v_102.w = _World2Object[3].x;
  highp vec4 v_103;
  v_103.x = _World2Object[0].y;
  v_103.y = _World2Object[1].y;
  v_103.z = _World2Object[2].y;
  v_103.w = _World2Object[3].y;
  highp vec4 v_104;
  v_104.x = _World2Object[0].z;
  v_104.y = _World2Object[1].z;
  v_104.z = _World2Object[2].z;
  v_104.w = _World2Object[3].z;
  highp vec3 tmpvar_105;
  tmpvar_105 = normalize(((
    (v_102.xyz * tmpvar_16.x)
   + 
    (v_103.xyz * tmpvar_16.y)
  ) + (v_104.xyz * tmpvar_16.z)));
  worldNormal_5 = tmpvar_105;
  highp mat3 tmpvar_106;
  tmpvar_106[0] = _Object2World[0].xyz;
  tmpvar_106[1] = _Object2World[1].xyz;
  tmpvar_106[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize((tmpvar_106 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_107;
  lowp vec3 tmpvar_108;
  tmpvar_108 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_109;
  tmpvar_109 = (tmpvar_108 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_109;
  highp vec4 tmpvar_110;
  tmpvar_110.x = worldTangent_4.x;
  tmpvar_110.y = worldBinormal_3.x;
  tmpvar_110.z = worldNormal_5.x;
  tmpvar_110.w = tmpvar_101.x;
  highp vec4 tmpvar_111;
  tmpvar_111.x = worldTangent_4.y;
  tmpvar_111.y = worldBinormal_3.y;
  tmpvar_111.z = worldNormal_5.y;
  tmpvar_111.w = tmpvar_101.y;
  highp vec4 tmpvar_112;
  tmpvar_112.x = worldTangent_4.z;
  tmpvar_112.y = worldBinormal_3.z;
  tmpvar_112.z = worldNormal_5.z;
  tmpvar_112.w = tmpvar_101.z;
  lowp vec4 tmpvar_113;
  tmpvar_113.w = 1.0;
  tmpvar_113.xyz = worldNormal_5;
  mediump vec3 tmpvar_114;
  mediump vec4 normal_115;
  normal_115 = tmpvar_113;
  mediump vec3 x2_116;
  mediump vec4 tmpvar_117;
  tmpvar_117 = (normal_115.xyzz * normal_115.yzzx);
  x2_116.x = dot (unity_SHBr, tmpvar_117);
  x2_116.y = dot (unity_SHBg, tmpvar_117);
  x2_116.z = dot (unity_SHBb, tmpvar_117);
  tmpvar_114 = (x2_116 + (unity_SHC.xyz * (
    (normal_115.x * normal_115.x)
   - 
    (normal_115.y * normal_115.y)
  )));
  highp vec3 lightColor0_118;
  lightColor0_118 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_119;
  lightColor1_119 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_120;
  lightColor2_120 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_121;
  lightColor3_121 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_122;
  lightAttenSq_122 = unity_4LightAtten0;
  highp vec3 normal_123;
  normal_123 = worldNormal_5;
  highp vec4 tmpvar_124;
  tmpvar_124 = (unity_4LightPosX0 - tmpvar_101.x);
  highp vec4 tmpvar_125;
  tmpvar_125 = (unity_4LightPosY0 - tmpvar_101.y);
  highp vec4 tmpvar_126;
  tmpvar_126 = (unity_4LightPosZ0 - tmpvar_101.z);
  highp vec4 tmpvar_127;
  tmpvar_127 = (((tmpvar_124 * tmpvar_124) + (tmpvar_125 * tmpvar_125)) + (tmpvar_126 * tmpvar_126));
  highp vec4 tmpvar_128;
  tmpvar_128 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_124 * normal_123.x) + (tmpvar_125 * normal_123.y)) + (tmpvar_126 * normal_123.z))
   * 
    inversesqrt(tmpvar_127)
  )) * (1.0/((1.0 + 
    (tmpvar_127 * lightAttenSq_122)
  ))));
  highp vec3 tmpvar_129;
  tmpvar_129 = (tmpvar_114 + ((
    ((lightColor0_118 * tmpvar_128.x) + (lightColor1_119 * tmpvar_128.y))
   + 
    (lightColor2_120 * tmpvar_128.z)
  ) + (lightColor3_121 * tmpvar_128.w)));
  tmpvar_7 = tmpvar_129;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_110;
  xlv_TEXCOORD1 = tmpvar_111;
  xlv_TEXCOORD2 = tmpvar_112;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_12;
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_14 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_15;
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_3.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_3.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_3.z = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_20;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_21;
  normalWorld_21 = worldN_3;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_21;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_26 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tmpvar_8 * tmpvar_1) * diff_26);
  c_25.xyz = tmpvar_28;
  c_25.w = tmpvar_9;
  c_24.w = c_25.w;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (c_25.xyz + (tmpvar_8 * (xlv_TEXCOORD5 + x1_23)));
  c_24.xyz = tmpvar_29;
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
in vec4 _glesTANGENT;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_10;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_14;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_23;
  tmpvar_23 = ((_glesVertex.xyz - _glesMultiTexCoord1.xyz) * mix (1.0, _glesMultiTexCoord1.w, unity_LODFade.x));
  highp mat3 tmpvar_24;
  tmpvar_24[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_24[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_24[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_25;
  tmpvar_25 = (normalize((tmpvar_23 * tmpvar_24)) * sqrt(dot (tmpvar_23, tmpvar_23)));
  FinalPosition_19 = tmpvar_25;
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_26;
    tmpvar_26 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_27;
    isBestWind_27 = (tmpvar_20 == 4.0);
    bool bLeaf2_28;
    bLeaf2_28 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_29;
    vPos_29 = tmpvar_25;
    highp vec3 vDirection_30;
    vDirection_30 = tmpvar_2;
    highp float tmpvar_31;
    if (bLeaf2_28) {
      tmpvar_31 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_32;
    if (bLeaf2_28) {
      tmpvar_32 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_32 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_33;
    highp vec4 tmpvar_34;
    tmpvar_34.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_34.x = (tmpvar_31 + tmpvar_26);
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    vPos_33 = (tmpvar_25 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_32 * (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_30 = tmpvar_2;
    vPos_29 = vPos_33;
    if (isBestWind_27) {
      highp vec3 tmpvar_36;
      tmpvar_36 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_37;
      if (bLeaf2_28) {
        tmpvar_37 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_38;
      if (bLeaf2_28) {
        tmpvar_38 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_39;
      if (bLeaf2_28) {
        tmpvar_39 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_40;
      if (bLeaf2_28) {
        tmpvar_40 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_40 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_41;
      if (bLeaf2_28) {
        tmpvar_41 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_41 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_42;
      if (bLeaf2_28) {
        tmpvar_42 = bool(1);
      } else {
        tmpvar_42 = bool(1);
      };
      highp float fTwitch_43;
      highp vec3 vAxis_44;
      highp vec3 tmpvar_45;
      tmpvar_45 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_46;
      tmpvar_46 = ((tmpvar_45.x + tmpvar_45.y) + tmpvar_45.z);
      highp vec4 tmpvar_47;
      tmpvar_47.x = (tmpvar_37 + tmpvar_46);
      tmpvar_47.y = ((tmpvar_37 * 0.75) - tmpvar_46);
      tmpvar_47.z = ((tmpvar_37 * 0.01) + tmpvar_46);
      tmpvar_47.w = (tmpvar_37 + tmpvar_46);
      highp vec4 tmpvar_48;
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      tmpvar_48 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = sqrt(dot (vPos_33, vPos_33));
      highp float fAngle_51;
      fAngle_51 = ((_glesMultiTexCoord2.x * tmpvar_39) * (tmpvar_48.x + (tmpvar_48.y * tmpvar_48.y)));
      highp vec2 vSinCos_52;
      vSinCos_52.x = sin(fAngle_51);
      vSinCos_52.y = cos(fAngle_51);
      highp float tmpvar_53;
      tmpvar_53 = (1.0 - vSinCos_52.y);
      highp mat3 tmpvar_54;
      tmpvar_54[0].x = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.x) + vSinCos_52.y);
      tmpvar_54[0].y = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.y) + (vSinCos_52.x * tmpvar_36.z));
      tmpvar_54[0].z = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.z) - (vSinCos_52.x * tmpvar_36.y));
      tmpvar_54[1].x = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.y) - (vSinCos_52.x * tmpvar_36.z));
      tmpvar_54[1].y = (((tmpvar_53 * tmpvar_36.y) * tmpvar_36.y) + vSinCos_52.y);
      tmpvar_54[1].z = (((tmpvar_53 * tmpvar_36.y) * tmpvar_36.z) + (vSinCos_52.x * tmpvar_36.x));
      tmpvar_54[2].x = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.z) + (vSinCos_52.x * tmpvar_36.y));
      tmpvar_54[2].y = (((tmpvar_53 * tmpvar_36.y) * tmpvar_36.z) - (vSinCos_52.x * tmpvar_36.x));
      tmpvar_54[2].z = (((tmpvar_53 * tmpvar_36.z) * tmpvar_36.z) + vSinCos_52.y);
      highp vec3 tmpvar_55;
      tmpvar_55 = ((tmpvar_36.yzx * vRotatedWindVector_18.zxy) - (tmpvar_36.zxy * vRotatedWindVector_18.yzx));
      vAxis_44.xz = tmpvar_55.xz;
      highp float tmpvar_56;
      tmpvar_56 = clamp (dot (vRotatedWindVector_18, tmpvar_36), -1.0, 1.0);
      vAxis_44.y = (tmpvar_55.y + tmpvar_56);
      highp vec3 tmpvar_57;
      tmpvar_57 = normalize(vAxis_44);
      vAxis_44 = tmpvar_57;
      highp float tmpvar_58;
      tmpvar_58 = (1.570796 - (sign(tmpvar_56) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_56))) * (1.570796 + (abs(tmpvar_56) * (-0.2146018 + 
          (abs(tmpvar_56) * (0.08656672 + (abs(tmpvar_56) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_59;
      tmpvar_59 = (tmpvar_48.y - (tmpvar_48.x * tmpvar_48.x));
      fTwitch_43 = 0.0;
      if (tmpvar_42) {
        highp float fTime_60;
        fTime_60 = (tmpvar_41.z + tmpvar_46);
        highp vec4 tmpvar_61;
        tmpvar_61.zw = vec2(0.0, 0.0);
        tmpvar_61.x = fTime_60;
        tmpvar_61.y = (0.87 * fTime_60);
        highp vec4 tmpvar_62;
        highp vec4 tmpvar_63;
        tmpvar_63 = abs(((
          fract((tmpvar_61 + 0.5))
         * 2.0) - 1.0));
        tmpvar_62 = (((
          (tmpvar_63 * tmpvar_63)
         * 
          (3.0 - (2.0 * tmpvar_63))
        ) - 0.5) * 2.0);
        fTwitch_43 = (tmpvar_41.x * pow (clamp (
          ((((tmpvar_62.x * tmpvar_62.y) * tmpvar_62.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_41.y));
      };
      highp float fAngle_64;
      fAngle_64 = (_glesMultiTexCoord2.x * ((
        (tmpvar_58 * tmpvar_40)
       + 
        (tmpvar_59 * tmpvar_38)
      ) + fTwitch_43));
      highp vec2 vSinCos_65;
      vSinCos_65.x = sin(fAngle_64);
      vSinCos_65.y = cos(fAngle_64);
      highp float tmpvar_66;
      tmpvar_66 = (1.0 - vSinCos_65.y);
      highp mat3 tmpvar_67;
      tmpvar_67[0].x = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.x) + vSinCos_65.y);
      tmpvar_67[0].y = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.y) + (vSinCos_65.x * tmpvar_57.z));
      tmpvar_67[0].z = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.z) - (vSinCos_65.x * tmpvar_57.y));
      tmpvar_67[1].x = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.y) - (vSinCos_65.x * tmpvar_57.z));
      tmpvar_67[1].y = (((tmpvar_66 * tmpvar_57.y) * tmpvar_57.y) + vSinCos_65.y);
      tmpvar_67[1].z = (((tmpvar_66 * tmpvar_57.y) * tmpvar_57.z) + (vSinCos_65.x * tmpvar_57.x));
      tmpvar_67[2].x = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.z) + (vSinCos_65.x * tmpvar_57.y));
      tmpvar_67[2].y = (((tmpvar_66 * tmpvar_57.y) * tmpvar_57.z) - (vSinCos_65.x * tmpvar_57.x));
      tmpvar_67[2].z = (((tmpvar_66 * tmpvar_57.z) * tmpvar_57.z) + vSinCos_65.y);
      highp mat3 tmpvar_68;
      tmpvar_68 = (tmpvar_54 * tmpvar_67);
      vDirection_30 = (tmpvar_68 * _glesNormal);
      vPos_29 = (normalize((tmpvar_68 * vPos_33)) * tmpvar_50);
    };
    tmpvar_16 = vDirection_30;
    FinalPosition_19 = vPos_29;
  };
  highp vec3 tmpvar_69;
  tmpvar_69 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_69;
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_70;
    vPos_70 = tmpvar_69;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_71;
      vPos_71 = tmpvar_69;
      highp float fAdherenceScale_72;
      highp vec3 tmpvar_73;
      tmpvar_73 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_74;
      tmpvar_74 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_75;
      highp float fOscillation_76;
      fOscillation_76 = 1.0;
      highp float fAmount_77;
      highp float fTarget_78;
      highp vec4 tmpvar_79;
      tmpvar_79.x = (tmpvar_74 + _glesMultiTexCoord0.w);
      tmpvar_79.y = ((tmpvar_74 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_79.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_74 + _glesMultiTexCoord0.w));
      tmpvar_79.w = ((tmpvar_74 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      vOscillations_75 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      highp float tmpvar_81;
      tmpvar_81 = (vOscillations_75.y * vOscillations_75.z);
      fTarget_78 = 1.0;
      fAmount_77 = tmpvar_81;
      if ((tmpvar_81 < 0.0)) {
        fTarget_78 = -1.0;
        fAmount_77 = -(tmpvar_81);
      };
      fOscillation_76 = (((
        (mix (mix (tmpvar_81, fTarget_78, fAmount_77), fTarget_78, fAmount_77) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_75.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_75.w * _ST_WindBranchWhip.x)));
      vPos_71 = (tmpvar_69 + ((tmpvar_73 * fOscillation_76) * _ST_WindBranch.y));
      highp vec4 tmpvar_82;
      tmpvar_82.zw = vec2(0.0, 0.0);
      tmpvar_82.x = ((tmpvar_74 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_82.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_83;
      highp vec4 tmpvar_84;
      tmpvar_84 = abs(((
        fract((tmpvar_82 + 0.5))
       * 2.0) - 1.0));
      tmpvar_83 = (((
        (tmpvar_84 * tmpvar_84)
       * 
        (3.0 - (2.0 * tmpvar_84))
      ) - 0.5) * 2.0);
      fAdherenceScale_72 = (1.0 - ((
        ((tmpvar_83.x * tmpvar_83.y) * tmpvar_83.x)
       * tmpvar_83.y) * _ST_WindTurbulences.x));
      fAdherenceScale_72 = (fAdherenceScale_72 + ((vOscillations_75.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_71 = (vPos_71 + ((
        ((vRotatedBranchAnchor_17 - vPos_71) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_72) * _glesMultiTexCoord0.z));
      vPos_70 = vPos_71;
    } else {
      highp vec3 vPos_85;
      vPos_85 = vPos_70;
      highp vec3 tmpvar_86;
      tmpvar_86 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_87;
      tmpvar_87 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_88;
      highp float fAmount_89;
      highp float fTarget_90;
      highp vec4 tmpvar_91;
      tmpvar_91.w = 0.0;
      tmpvar_91.x = (tmpvar_87 + _glesMultiTexCoord0.w);
      tmpvar_91.y = ((tmpvar_87 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_91.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_87 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_92;
      tmpvar_92 = abs(((
        fract((tmpvar_91 + 0.5))
       * 2.0) - 1.0));
      vOscillations_88 = (((
        (tmpvar_92 * tmpvar_92)
       * 
        (3.0 - (2.0 * tmpvar_92))
      ) - 0.5) * 2.0);
      highp float tmpvar_93;
      tmpvar_93 = (vOscillations_88.y * vOscillations_88.z);
      fTarget_90 = 1.0;
      fAmount_89 = tmpvar_93;
      if ((tmpvar_93 < 0.0)) {
        fTarget_90 = -1.0;
        fAmount_89 = -(tmpvar_93);
      };
      vPos_85 = (vPos_70 + ((tmpvar_86 * 
        (((mix (
          mix (tmpvar_93, fTarget_90, fAmount_89)
        , fTarget_90, fAmount_89) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_88.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_70 = vPos_85;
    };
    FinalPosition_19 = vPos_70;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_94;
    vPos_94 = FinalPosition_19;
    highp float fAdjust_95;
    highp float fLength_96;
    fLength_96 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_97;
    tmpvar_97 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_95 = tmpvar_97;
    if ((tmpvar_97 != 0.0)) {
      fAdjust_95 = pow (tmpvar_97, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_98;
    tmpvar_98.zw = vec2(0.0, 0.0);
    tmpvar_98.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_98.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_99;
    highp vec4 tmpvar_100;
    tmpvar_100 = abs(((
      fract((tmpvar_98 + 0.5))
     * 2.0) - 1.0));
    tmpvar_99 = (((
      (tmpvar_100 * tmpvar_100)
     * 
      (3.0 - (2.0 * tmpvar_100))
    ) - 0.5) * 2.0);
    vPos_94.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_99.x + (tmpvar_99.y * tmpvar_99.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_95)));
    vPos_94 = (normalize(vPos_94) * fLength_96);
    FinalPosition_19 = vPos_94;
  };
  tmpvar_15.xyz = FinalPosition_19;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_101;
  tmpvar_101 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_102;
  v_102.x = _World2Object[0].x;
  v_102.y = _World2Object[1].x;
  v_102.z = _World2Object[2].x;
  v_102.w = _World2Object[3].x;
  highp vec4 v_103;
  v_103.x = _World2Object[0].y;
  v_103.y = _World2Object[1].y;
  v_103.z = _World2Object[2].y;
  v_103.w = _World2Object[3].y;
  highp vec4 v_104;
  v_104.x = _World2Object[0].z;
  v_104.y = _World2Object[1].z;
  v_104.z = _World2Object[2].z;
  v_104.w = _World2Object[3].z;
  highp vec3 tmpvar_105;
  tmpvar_105 = normalize(((
    (v_102.xyz * tmpvar_16.x)
   + 
    (v_103.xyz * tmpvar_16.y)
  ) + (v_104.xyz * tmpvar_16.z)));
  worldNormal_5 = tmpvar_105;
  highp mat3 tmpvar_106;
  tmpvar_106[0] = _Object2World[0].xyz;
  tmpvar_106[1] = _Object2World[1].xyz;
  tmpvar_106[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize((tmpvar_106 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_107;
  lowp vec3 tmpvar_108;
  tmpvar_108 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_109;
  tmpvar_109 = (tmpvar_108 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_109;
  highp vec4 tmpvar_110;
  tmpvar_110.x = worldTangent_4.x;
  tmpvar_110.y = worldBinormal_3.x;
  tmpvar_110.z = worldNormal_5.x;
  tmpvar_110.w = tmpvar_101.x;
  highp vec4 tmpvar_111;
  tmpvar_111.x = worldTangent_4.y;
  tmpvar_111.y = worldBinormal_3.y;
  tmpvar_111.z = worldNormal_5.y;
  tmpvar_111.w = tmpvar_101.y;
  highp vec4 tmpvar_112;
  tmpvar_112.x = worldTangent_4.z;
  tmpvar_112.y = worldBinormal_3.z;
  tmpvar_112.z = worldNormal_5.z;
  tmpvar_112.w = tmpvar_101.z;
  lowp vec4 tmpvar_113;
  tmpvar_113.w = 1.0;
  tmpvar_113.xyz = worldNormal_5;
  mediump vec3 tmpvar_114;
  mediump vec4 normal_115;
  normal_115 = tmpvar_113;
  mediump vec3 x2_116;
  mediump vec4 tmpvar_117;
  tmpvar_117 = (normal_115.xyzz * normal_115.yzzx);
  x2_116.x = dot (unity_SHBr, tmpvar_117);
  x2_116.y = dot (unity_SHBg, tmpvar_117);
  x2_116.z = dot (unity_SHBb, tmpvar_117);
  tmpvar_114 = (x2_116 + (unity_SHC.xyz * (
    (normal_115.x * normal_115.x)
   - 
    (normal_115.y * normal_115.y)
  )));
  highp vec3 lightColor0_118;
  lightColor0_118 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_119;
  lightColor1_119 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_120;
  lightColor2_120 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_121;
  lightColor3_121 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_122;
  lightAttenSq_122 = unity_4LightAtten0;
  highp vec3 normal_123;
  normal_123 = worldNormal_5;
  highp vec4 tmpvar_124;
  tmpvar_124 = (unity_4LightPosX0 - tmpvar_101.x);
  highp vec4 tmpvar_125;
  tmpvar_125 = (unity_4LightPosY0 - tmpvar_101.y);
  highp vec4 tmpvar_126;
  tmpvar_126 = (unity_4LightPosZ0 - tmpvar_101.z);
  highp vec4 tmpvar_127;
  tmpvar_127 = (((tmpvar_124 * tmpvar_124) + (tmpvar_125 * tmpvar_125)) + (tmpvar_126 * tmpvar_126));
  highp vec4 tmpvar_128;
  tmpvar_128 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_124 * normal_123.x) + (tmpvar_125 * normal_123.y)) + (tmpvar_126 * normal_123.z))
   * 
    inversesqrt(tmpvar_127)
  )) * (1.0/((1.0 + 
    (tmpvar_127 * lightAttenSq_122)
  ))));
  highp vec3 tmpvar_129;
  tmpvar_129 = (tmpvar_114 + ((
    ((lightColor0_118 * tmpvar_128.x) + (lightColor1_119 * tmpvar_128.y))
   + 
    (lightColor2_120 * tmpvar_128.z)
  ) + (lightColor3_121 * tmpvar_128.w)));
  tmpvar_7 = tmpvar_129;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_110;
  xlv_TEXCOORD1 = tmpvar_111;
  xlv_TEXCOORD2 = tmpvar_112;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_12;
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_14 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_15;
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_3.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_3.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_3.z = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_20;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_21;
  normalWorld_21 = worldN_3;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_21;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_26 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tmpvar_8 * tmpvar_1) * diff_26);
  c_25.xyz = tmpvar_28;
  c_25.w = tmpvar_9;
  c_24.w = c_25.w;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (c_25.xyz + (tmpvar_8 * (xlv_TEXCOORD5 + x1_23)));
  c_24.xyz = tmpvar_29;
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_10.xy = tmpvar_11;
  tmpvar_9.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_9.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_15;
  highp vec4 tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_16 = tmpvar_1;
  tmpvar_17 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  FinalPosition_20 = tmpvar_1.xyz;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_24;
  tmpvar_24 = ((_glesVertex.xyz - _glesMultiTexCoord1.xyz) * mix (1.0, _glesMultiTexCoord1.w, unity_LODFade.x));
  highp mat3 tmpvar_25;
  tmpvar_25[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_25[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_25[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_26;
  tmpvar_26 = (normalize((tmpvar_24 * tmpvar_25)) * sqrt(dot (tmpvar_24, tmpvar_24)));
  FinalPosition_20 = tmpvar_26;
  if (((tmpvar_21 > 1.0) && (tmpvar_21 < 5.0))) {
    highp float tmpvar_27;
    tmpvar_27 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_28;
    isBestWind_28 = (tmpvar_21 == 4.0);
    bool bLeaf2_29;
    bLeaf2_29 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_30;
    vPos_30 = tmpvar_26;
    highp vec3 vDirection_31;
    vDirection_31 = tmpvar_2;
    highp float tmpvar_32;
    if (bLeaf2_29) {
      tmpvar_32 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_32 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_33;
    if (bLeaf2_29) {
      tmpvar_33 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_33 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_34;
    highp vec4 tmpvar_35;
    tmpvar_35.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_35.x = (tmpvar_32 + tmpvar_27);
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_35 + 0.5))
     * 2.0) - 1.0));
    vPos_34 = (tmpvar_26 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_33 * (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_31 = tmpvar_2;
    vPos_30 = vPos_34;
    if (isBestWind_28) {
      highp vec3 tmpvar_37;
      tmpvar_37 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_38;
      if (bLeaf2_29) {
        tmpvar_38 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_39;
      if (bLeaf2_29) {
        tmpvar_39 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_40;
      if (bLeaf2_29) {
        tmpvar_40 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_40 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_41;
      if (bLeaf2_29) {
        tmpvar_41 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_41 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_42;
      if (bLeaf2_29) {
        tmpvar_42 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_42 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_43;
      if (bLeaf2_29) {
        tmpvar_43 = bool(1);
      } else {
        tmpvar_43 = bool(1);
      };
      highp float fTwitch_44;
      highp vec3 vAxis_45;
      highp vec3 tmpvar_46;
      tmpvar_46 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_47;
      tmpvar_47 = ((tmpvar_46.x + tmpvar_46.y) + tmpvar_46.z);
      highp vec4 tmpvar_48;
      tmpvar_48.x = (tmpvar_38 + tmpvar_47);
      tmpvar_48.y = ((tmpvar_38 * 0.75) - tmpvar_47);
      tmpvar_48.z = ((tmpvar_38 * 0.01) + tmpvar_47);
      tmpvar_48.w = (tmpvar_38 + tmpvar_47);
      highp vec4 tmpvar_49;
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      tmpvar_49 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      highp float tmpvar_51;
      tmpvar_51 = sqrt(dot (vPos_34, vPos_34));
      highp float fAngle_52;
      fAngle_52 = ((_glesMultiTexCoord2.x * tmpvar_40) * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y)));
      highp vec2 vSinCos_53;
      vSinCos_53.x = sin(fAngle_52);
      vSinCos_53.y = cos(fAngle_52);
      highp float tmpvar_54;
      tmpvar_54 = (1.0 - vSinCos_53.y);
      highp mat3 tmpvar_55;
      tmpvar_55[0].x = (((tmpvar_54 * tmpvar_37.x) * tmpvar_37.x) + vSinCos_53.y);
      tmpvar_55[0].y = (((tmpvar_54 * tmpvar_37.x) * tmpvar_37.y) + (vSinCos_53.x * tmpvar_37.z));
      tmpvar_55[0].z = (((tmpvar_54 * tmpvar_37.x) * tmpvar_37.z) - (vSinCos_53.x * tmpvar_37.y));
      tmpvar_55[1].x = (((tmpvar_54 * tmpvar_37.x) * tmpvar_37.y) - (vSinCos_53.x * tmpvar_37.z));
      tmpvar_55[1].y = (((tmpvar_54 * tmpvar_37.y) * tmpvar_37.y) + vSinCos_53.y);
      tmpvar_55[1].z = (((tmpvar_54 * tmpvar_37.y) * tmpvar_37.z) + (vSinCos_53.x * tmpvar_37.x));
      tmpvar_55[2].x = (((tmpvar_54 * tmpvar_37.x) * tmpvar_37.z) + (vSinCos_53.x * tmpvar_37.y));
      tmpvar_55[2].y = (((tmpvar_54 * tmpvar_37.y) * tmpvar_37.z) - (vSinCos_53.x * tmpvar_37.x));
      tmpvar_55[2].z = (((tmpvar_54 * tmpvar_37.z) * tmpvar_37.z) + vSinCos_53.y);
      highp vec3 tmpvar_56;
      tmpvar_56 = ((tmpvar_37.yzx * vRotatedWindVector_19.zxy) - (tmpvar_37.zxy * vRotatedWindVector_19.yzx));
      vAxis_45.xz = tmpvar_56.xz;
      highp float tmpvar_57;
      tmpvar_57 = clamp (dot (vRotatedWindVector_19, tmpvar_37), -1.0, 1.0);
      vAxis_45.y = (tmpvar_56.y + tmpvar_57);
      highp vec3 tmpvar_58;
      tmpvar_58 = normalize(vAxis_45);
      vAxis_45 = tmpvar_58;
      highp float tmpvar_59;
      tmpvar_59 = (1.570796 - (sign(tmpvar_57) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_57))) * (1.570796 + (abs(tmpvar_57) * (-0.2146018 + 
          (abs(tmpvar_57) * (0.08656672 + (abs(tmpvar_57) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_60;
      tmpvar_60 = (tmpvar_49.y - (tmpvar_49.x * tmpvar_49.x));
      fTwitch_44 = 0.0;
      if (tmpvar_43) {
        highp float fTime_61;
        fTime_61 = (tmpvar_42.z + tmpvar_47);
        highp vec4 tmpvar_62;
        tmpvar_62.zw = vec2(0.0, 0.0);
        tmpvar_62.x = fTime_61;
        tmpvar_62.y = (0.87 * fTime_61);
        highp vec4 tmpvar_63;
        highp vec4 tmpvar_64;
        tmpvar_64 = abs(((
          fract((tmpvar_62 + 0.5))
         * 2.0) - 1.0));
        tmpvar_63 = (((
          (tmpvar_64 * tmpvar_64)
         * 
          (3.0 - (2.0 * tmpvar_64))
        ) - 0.5) * 2.0);
        fTwitch_44 = (tmpvar_42.x * pow (clamp (
          ((((tmpvar_63.x * tmpvar_63.y) * tmpvar_63.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_42.y));
      };
      highp float fAngle_65;
      fAngle_65 = (_glesMultiTexCoord2.x * ((
        (tmpvar_59 * tmpvar_41)
       + 
        (tmpvar_60 * tmpvar_39)
      ) + fTwitch_44));
      highp vec2 vSinCos_66;
      vSinCos_66.x = sin(fAngle_65);
      vSinCos_66.y = cos(fAngle_65);
      highp float tmpvar_67;
      tmpvar_67 = (1.0 - vSinCos_66.y);
      highp mat3 tmpvar_68;
      tmpvar_68[0].x = (((tmpvar_67 * tmpvar_58.x) * tmpvar_58.x) + vSinCos_66.y);
      tmpvar_68[0].y = (((tmpvar_67 * tmpvar_58.x) * tmpvar_58.y) + (vSinCos_66.x * tmpvar_58.z));
      tmpvar_68[0].z = (((tmpvar_67 * tmpvar_58.x) * tmpvar_58.z) - (vSinCos_66.x * tmpvar_58.y));
      tmpvar_68[1].x = (((tmpvar_67 * tmpvar_58.x) * tmpvar_58.y) - (vSinCos_66.x * tmpvar_58.z));
      tmpvar_68[1].y = (((tmpvar_67 * tmpvar_58.y) * tmpvar_58.y) + vSinCos_66.y);
      tmpvar_68[1].z = (((tmpvar_67 * tmpvar_58.y) * tmpvar_58.z) + (vSinCos_66.x * tmpvar_58.x));
      tmpvar_68[2].x = (((tmpvar_67 * tmpvar_58.x) * tmpvar_58.z) + (vSinCos_66.x * tmpvar_58.y));
      tmpvar_68[2].y = (((tmpvar_67 * tmpvar_58.y) * tmpvar_58.z) - (vSinCos_66.x * tmpvar_58.x));
      tmpvar_68[2].z = (((tmpvar_67 * tmpvar_58.z) * tmpvar_58.z) + vSinCos_66.y);
      highp mat3 tmpvar_69;
      tmpvar_69 = (tmpvar_55 * tmpvar_68);
      vDirection_31 = (tmpvar_69 * _glesNormal);
      vPos_30 = (normalize((tmpvar_69 * vPos_34)) * tmpvar_51);
    };
    tmpvar_17 = vDirection_31;
    FinalPosition_20 = vPos_30;
  };
  highp vec3 tmpvar_70;
  tmpvar_70 = (FinalPosition_20 + _glesMultiTexCoord1.xyz);
  FinalPosition_20 = tmpvar_70;
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_71;
    vPos_71 = tmpvar_70;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_72;
      vPos_72 = tmpvar_70;
      highp float fAdherenceScale_73;
      highp vec3 tmpvar_74;
      tmpvar_74 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_75;
      tmpvar_75 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_76;
      highp float fOscillation_77;
      fOscillation_77 = 1.0;
      highp float fAmount_78;
      highp float fTarget_79;
      highp vec4 tmpvar_80;
      tmpvar_80.x = (tmpvar_75 + _glesMultiTexCoord0.w);
      tmpvar_80.y = ((tmpvar_75 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_80.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_75 + _glesMultiTexCoord0.w));
      tmpvar_80.w = ((tmpvar_75 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      vOscillations_76 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      highp float tmpvar_82;
      tmpvar_82 = (vOscillations_76.y * vOscillations_76.z);
      fTarget_79 = 1.0;
      fAmount_78 = tmpvar_82;
      if ((tmpvar_82 < 0.0)) {
        fTarget_79 = -1.0;
        fAmount_78 = -(tmpvar_82);
      };
      fOscillation_77 = (((
        (mix (mix (tmpvar_82, fTarget_79, fAmount_78), fTarget_79, fAmount_78) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_76.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_76.w * _ST_WindBranchWhip.x)));
      vPos_72 = (tmpvar_70 + ((tmpvar_74 * fOscillation_77) * _ST_WindBranch.y));
      highp vec4 tmpvar_83;
      tmpvar_83.zw = vec2(0.0, 0.0);
      tmpvar_83.x = ((tmpvar_75 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_83.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_84;
      highp vec4 tmpvar_85;
      tmpvar_85 = abs(((
        fract((tmpvar_83 + 0.5))
       * 2.0) - 1.0));
      tmpvar_84 = (((
        (tmpvar_85 * tmpvar_85)
       * 
        (3.0 - (2.0 * tmpvar_85))
      ) - 0.5) * 2.0);
      fAdherenceScale_73 = (1.0 - ((
        ((tmpvar_84.x * tmpvar_84.y) * tmpvar_84.x)
       * tmpvar_84.y) * _ST_WindTurbulences.x));
      fAdherenceScale_73 = (fAdherenceScale_73 + ((vOscillations_76.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_72 = (vPos_72 + ((
        ((vRotatedBranchAnchor_18 - vPos_72) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_73) * _glesMultiTexCoord0.z));
      vPos_71 = vPos_72;
    } else {
      highp vec3 vPos_86;
      vPos_86 = vPos_71;
      highp vec3 tmpvar_87;
      tmpvar_87 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_88;
      tmpvar_88 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_89;
      highp float fAmount_90;
      highp float fTarget_91;
      highp vec4 tmpvar_92;
      tmpvar_92.w = 0.0;
      tmpvar_92.x = (tmpvar_88 + _glesMultiTexCoord0.w);
      tmpvar_92.y = ((tmpvar_88 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_92.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_88 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_93;
      tmpvar_93 = abs(((
        fract((tmpvar_92 + 0.5))
       * 2.0) - 1.0));
      vOscillations_89 = (((
        (tmpvar_93 * tmpvar_93)
       * 
        (3.0 - (2.0 * tmpvar_93))
      ) - 0.5) * 2.0);
      highp float tmpvar_94;
      tmpvar_94 = (vOscillations_89.y * vOscillations_89.z);
      fTarget_91 = 1.0;
      fAmount_90 = tmpvar_94;
      if ((tmpvar_94 < 0.0)) {
        fTarget_91 = -1.0;
        fAmount_90 = -(tmpvar_94);
      };
      vPos_86 = (vPos_71 + ((tmpvar_87 * 
        (((mix (
          mix (tmpvar_94, fTarget_91, fAmount_90)
        , fTarget_91, fAmount_90) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_89.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_71 = vPos_86;
    };
    FinalPosition_20 = vPos_71;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_95;
    vPos_95 = FinalPosition_20;
    highp float fAdjust_96;
    highp float fLength_97;
    fLength_97 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_98;
    tmpvar_98 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_96 = tmpvar_98;
    if ((tmpvar_98 != 0.0)) {
      fAdjust_96 = pow (tmpvar_98, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_99;
    tmpvar_99.zw = vec2(0.0, 0.0);
    tmpvar_99.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_99.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_100;
    highp vec4 tmpvar_101;
    tmpvar_101 = abs(((
      fract((tmpvar_99 + 0.5))
     * 2.0) - 1.0));
    tmpvar_100 = (((
      (tmpvar_101 * tmpvar_101)
     * 
      (3.0 - (2.0 * tmpvar_101))
    ) - 0.5) * 2.0);
    vPos_95.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_100.x + (tmpvar_100.y * tmpvar_100.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_96)));
    vPos_95 = (normalize(vPos_95) * fLength_97);
    FinalPosition_20 = vPos_95;
  };
  tmpvar_16.xyz = FinalPosition_20;
  tmpvar_6 = tmpvar_9;
  highp vec3 tmpvar_102;
  tmpvar_102 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_103;
  v_103.x = _World2Object[0].x;
  v_103.y = _World2Object[1].x;
  v_103.z = _World2Object[2].x;
  v_103.w = _World2Object[3].x;
  highp vec4 v_104;
  v_104.x = _World2Object[0].y;
  v_104.y = _World2Object[1].y;
  v_104.z = _World2Object[2].y;
  v_104.w = _World2Object[3].y;
  highp vec4 v_105;
  v_105.x = _World2Object[0].z;
  v_105.y = _World2Object[1].z;
  v_105.z = _World2Object[2].z;
  v_105.w = _World2Object[3].z;
  highp vec3 tmpvar_106;
  tmpvar_106 = normalize(((
    (v_103.xyz * tmpvar_17.x)
   + 
    (v_104.xyz * tmpvar_17.y)
  ) + (v_105.xyz * tmpvar_17.z)));
  worldNormal_5 = tmpvar_106;
  highp mat3 tmpvar_107;
  tmpvar_107[0] = _Object2World[0].xyz;
  tmpvar_107[1] = _Object2World[1].xyz;
  tmpvar_107[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_108;
  tmpvar_108 = normalize((tmpvar_107 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_108;
  lowp vec3 tmpvar_109;
  tmpvar_109 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_110;
  tmpvar_110 = (tmpvar_109 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_110;
  highp vec4 tmpvar_111;
  tmpvar_111.x = worldTangent_4.x;
  tmpvar_111.y = worldBinormal_3.x;
  tmpvar_111.z = worldNormal_5.x;
  tmpvar_111.w = tmpvar_102.x;
  highp vec4 tmpvar_112;
  tmpvar_112.x = worldTangent_4.y;
  tmpvar_112.y = worldBinormal_3.y;
  tmpvar_112.z = worldNormal_5.y;
  tmpvar_112.w = tmpvar_102.y;
  highp vec4 tmpvar_113;
  tmpvar_113.x = worldTangent_4.z;
  tmpvar_113.y = worldBinormal_3.z;
  tmpvar_113.z = worldNormal_5.z;
  tmpvar_113.w = tmpvar_102.z;
  lowp vec4 tmpvar_114;
  tmpvar_114.w = 1.0;
  tmpvar_114.xyz = worldNormal_5;
  mediump vec3 tmpvar_115;
  mediump vec4 normal_116;
  normal_116 = tmpvar_114;
  mediump vec3 x2_117;
  mediump vec4 tmpvar_118;
  tmpvar_118 = (normal_116.xyzz * normal_116.yzzx);
  x2_117.x = dot (unity_SHBr, tmpvar_118);
  x2_117.y = dot (unity_SHBg, tmpvar_118);
  x2_117.z = dot (unity_SHBb, tmpvar_118);
  tmpvar_115 = (x2_117 + (unity_SHC.xyz * (
    (normal_116.x * normal_116.x)
   - 
    (normal_116.y * normal_116.y)
  )));
  highp vec3 lightColor0_119;
  lightColor0_119 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_120;
  lightColor1_120 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_121;
  lightColor2_121 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_122;
  lightColor3_122 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_123;
  lightAttenSq_123 = unity_4LightAtten0;
  highp vec3 normal_124;
  normal_124 = worldNormal_5;
  highp vec4 tmpvar_125;
  tmpvar_125 = (unity_4LightPosX0 - tmpvar_102.x);
  highp vec4 tmpvar_126;
  tmpvar_126 = (unity_4LightPosY0 - tmpvar_102.y);
  highp vec4 tmpvar_127;
  tmpvar_127 = (unity_4LightPosZ0 - tmpvar_102.z);
  highp vec4 tmpvar_128;
  tmpvar_128 = (((tmpvar_125 * tmpvar_125) + (tmpvar_126 * tmpvar_126)) + (tmpvar_127 * tmpvar_127));
  highp vec4 tmpvar_129;
  tmpvar_129 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_125 * normal_124.x) + (tmpvar_126 * normal_124.y)) + (tmpvar_127 * normal_124.z))
   * 
    inversesqrt(tmpvar_128)
  )) * (1.0/((1.0 + 
    (tmpvar_128 * lightAttenSq_123)
  ))));
  highp vec3 tmpvar_130;
  tmpvar_130 = (tmpvar_115 + ((
    ((lightColor0_119 * tmpvar_129.x) + (lightColor1_120 * tmpvar_129.y))
   + 
    (lightColor2_121 * tmpvar_129.z)
  ) + (lightColor3_122 * tmpvar_129.w)));
  tmpvar_7 = tmpvar_130;
  highp vec4 tmpvar_131;
  tmpvar_131 = (unity_World2Shadow[0] * (_Object2World * tmpvar_16));
  tmpvar_8 = tmpvar_131;
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_111;
  xlv_TEXCOORD1 = tmpvar_112;
  xlv_TEXCOORD2 = tmpvar_113;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_18;
  mediump float dist_19;
  lowp float tmpvar_20;
  tmpvar_20 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x;
  dist_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (float((dist_19 > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_4.x = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_4.y = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_4.z = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_25;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_18;
  mediump vec3 normalWorld_26;
  normalWorld_26 = worldN_4;
  mediump vec3 tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = normalWorld_26;
  mediump vec3 x1_29;
  x1_29.x = dot (unity_SHAr, tmpvar_28);
  x1_29.y = dot (unity_SHAg, tmpvar_28);
  x1_29.z = dot (unity_SHAb, tmpvar_28);
  tmpvar_27 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_27;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_32 = tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_9 * tmpvar_27) * diff_32);
  c_31.xyz = tmpvar_34;
  c_31.w = tmpvar_10;
  c_30.w = c_31.w;
  mediump vec3 tmpvar_35;
  tmpvar_35 = (c_31.xyz + (tmpvar_9 * (xlv_TEXCOORD5 + x1_29)));
  c_30.xyz = tmpvar_35;
  c_5.xyz = c_30.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_10;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_14;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_23;
  tmpvar_23 = ((_glesVertex.xyz - _glesMultiTexCoord1.xyz) * mix (1.0, _glesMultiTexCoord1.w, unity_LODFade.x));
  highp mat3 tmpvar_24;
  tmpvar_24[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_24[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_24[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_25;
  tmpvar_25 = (normalize((tmpvar_23 * tmpvar_24)) * sqrt(dot (tmpvar_23, tmpvar_23)));
  FinalPosition_19 = tmpvar_25;
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_26;
    tmpvar_26 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_27;
    isBestWind_27 = (tmpvar_20 == 4.0);
    bool bLeaf2_28;
    bLeaf2_28 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_29;
    vPos_29 = tmpvar_25;
    highp vec3 vDirection_30;
    vDirection_30 = tmpvar_2;
    highp float tmpvar_31;
    if (bLeaf2_28) {
      tmpvar_31 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_32;
    if (bLeaf2_28) {
      tmpvar_32 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_32 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_33;
    highp vec4 tmpvar_34;
    tmpvar_34.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_34.x = (tmpvar_31 + tmpvar_26);
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    vPos_33 = (tmpvar_25 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_32 * (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_30 = tmpvar_2;
    vPos_29 = vPos_33;
    if (isBestWind_27) {
      highp vec3 tmpvar_36;
      tmpvar_36 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_37;
      if (bLeaf2_28) {
        tmpvar_37 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_38;
      if (bLeaf2_28) {
        tmpvar_38 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_39;
      if (bLeaf2_28) {
        tmpvar_39 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_40;
      if (bLeaf2_28) {
        tmpvar_40 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_40 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_41;
      if (bLeaf2_28) {
        tmpvar_41 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_41 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_42;
      if (bLeaf2_28) {
        tmpvar_42 = bool(1);
      } else {
        tmpvar_42 = bool(1);
      };
      highp float fTwitch_43;
      highp vec3 vAxis_44;
      highp vec3 tmpvar_45;
      tmpvar_45 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_46;
      tmpvar_46 = ((tmpvar_45.x + tmpvar_45.y) + tmpvar_45.z);
      highp vec4 tmpvar_47;
      tmpvar_47.x = (tmpvar_37 + tmpvar_46);
      tmpvar_47.y = ((tmpvar_37 * 0.75) - tmpvar_46);
      tmpvar_47.z = ((tmpvar_37 * 0.01) + tmpvar_46);
      tmpvar_47.w = (tmpvar_37 + tmpvar_46);
      highp vec4 tmpvar_48;
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      tmpvar_48 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = sqrt(dot (vPos_33, vPos_33));
      highp float fAngle_51;
      fAngle_51 = ((_glesMultiTexCoord2.x * tmpvar_39) * (tmpvar_48.x + (tmpvar_48.y * tmpvar_48.y)));
      highp vec2 vSinCos_52;
      vSinCos_52.x = sin(fAngle_51);
      vSinCos_52.y = cos(fAngle_51);
      highp float tmpvar_53;
      tmpvar_53 = (1.0 - vSinCos_52.y);
      highp mat3 tmpvar_54;
      tmpvar_54[0].x = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.x) + vSinCos_52.y);
      tmpvar_54[0].y = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.y) + (vSinCos_52.x * tmpvar_36.z));
      tmpvar_54[0].z = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.z) - (vSinCos_52.x * tmpvar_36.y));
      tmpvar_54[1].x = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.y) - (vSinCos_52.x * tmpvar_36.z));
      tmpvar_54[1].y = (((tmpvar_53 * tmpvar_36.y) * tmpvar_36.y) + vSinCos_52.y);
      tmpvar_54[1].z = (((tmpvar_53 * tmpvar_36.y) * tmpvar_36.z) + (vSinCos_52.x * tmpvar_36.x));
      tmpvar_54[2].x = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.z) + (vSinCos_52.x * tmpvar_36.y));
      tmpvar_54[2].y = (((tmpvar_53 * tmpvar_36.y) * tmpvar_36.z) - (vSinCos_52.x * tmpvar_36.x));
      tmpvar_54[2].z = (((tmpvar_53 * tmpvar_36.z) * tmpvar_36.z) + vSinCos_52.y);
      highp vec3 tmpvar_55;
      tmpvar_55 = ((tmpvar_36.yzx * vRotatedWindVector_18.zxy) - (tmpvar_36.zxy * vRotatedWindVector_18.yzx));
      vAxis_44.xz = tmpvar_55.xz;
      highp float tmpvar_56;
      tmpvar_56 = clamp (dot (vRotatedWindVector_18, tmpvar_36), -1.0, 1.0);
      vAxis_44.y = (tmpvar_55.y + tmpvar_56);
      highp vec3 tmpvar_57;
      tmpvar_57 = normalize(vAxis_44);
      vAxis_44 = tmpvar_57;
      highp float tmpvar_58;
      tmpvar_58 = (1.570796 - (sign(tmpvar_56) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_56))) * (1.570796 + (abs(tmpvar_56) * (-0.2146018 + 
          (abs(tmpvar_56) * (0.08656672 + (abs(tmpvar_56) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_59;
      tmpvar_59 = (tmpvar_48.y - (tmpvar_48.x * tmpvar_48.x));
      fTwitch_43 = 0.0;
      if (tmpvar_42) {
        highp float fTime_60;
        fTime_60 = (tmpvar_41.z + tmpvar_46);
        highp vec4 tmpvar_61;
        tmpvar_61.zw = vec2(0.0, 0.0);
        tmpvar_61.x = fTime_60;
        tmpvar_61.y = (0.87 * fTime_60);
        highp vec4 tmpvar_62;
        highp vec4 tmpvar_63;
        tmpvar_63 = abs(((
          fract((tmpvar_61 + 0.5))
         * 2.0) - 1.0));
        tmpvar_62 = (((
          (tmpvar_63 * tmpvar_63)
         * 
          (3.0 - (2.0 * tmpvar_63))
        ) - 0.5) * 2.0);
        fTwitch_43 = (tmpvar_41.x * pow (clamp (
          ((((tmpvar_62.x * tmpvar_62.y) * tmpvar_62.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_41.y));
      };
      highp float fAngle_64;
      fAngle_64 = (_glesMultiTexCoord2.x * ((
        (tmpvar_58 * tmpvar_40)
       + 
        (tmpvar_59 * tmpvar_38)
      ) + fTwitch_43));
      highp vec2 vSinCos_65;
      vSinCos_65.x = sin(fAngle_64);
      vSinCos_65.y = cos(fAngle_64);
      highp float tmpvar_66;
      tmpvar_66 = (1.0 - vSinCos_65.y);
      highp mat3 tmpvar_67;
      tmpvar_67[0].x = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.x) + vSinCos_65.y);
      tmpvar_67[0].y = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.y) + (vSinCos_65.x * tmpvar_57.z));
      tmpvar_67[0].z = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.z) - (vSinCos_65.x * tmpvar_57.y));
      tmpvar_67[1].x = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.y) - (vSinCos_65.x * tmpvar_57.z));
      tmpvar_67[1].y = (((tmpvar_66 * tmpvar_57.y) * tmpvar_57.y) + vSinCos_65.y);
      tmpvar_67[1].z = (((tmpvar_66 * tmpvar_57.y) * tmpvar_57.z) + (vSinCos_65.x * tmpvar_57.x));
      tmpvar_67[2].x = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.z) + (vSinCos_65.x * tmpvar_57.y));
      tmpvar_67[2].y = (((tmpvar_66 * tmpvar_57.y) * tmpvar_57.z) - (vSinCos_65.x * tmpvar_57.x));
      tmpvar_67[2].z = (((tmpvar_66 * tmpvar_57.z) * tmpvar_57.z) + vSinCos_65.y);
      highp mat3 tmpvar_68;
      tmpvar_68 = (tmpvar_54 * tmpvar_67);
      vDirection_30 = (tmpvar_68 * _glesNormal);
      vPos_29 = (normalize((tmpvar_68 * vPos_33)) * tmpvar_50);
    };
    tmpvar_16 = vDirection_30;
    FinalPosition_19 = vPos_29;
  };
  highp vec3 tmpvar_69;
  tmpvar_69 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_69;
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_70;
    vPos_70 = tmpvar_69;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_71;
      vPos_71 = tmpvar_69;
      highp float fAdherenceScale_72;
      highp vec3 tmpvar_73;
      tmpvar_73 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_74;
      tmpvar_74 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_75;
      highp float fOscillation_76;
      fOscillation_76 = 1.0;
      highp float fAmount_77;
      highp float fTarget_78;
      highp vec4 tmpvar_79;
      tmpvar_79.x = (tmpvar_74 + _glesMultiTexCoord0.w);
      tmpvar_79.y = ((tmpvar_74 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_79.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_74 + _glesMultiTexCoord0.w));
      tmpvar_79.w = ((tmpvar_74 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      vOscillations_75 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      highp float tmpvar_81;
      tmpvar_81 = (vOscillations_75.y * vOscillations_75.z);
      fTarget_78 = 1.0;
      fAmount_77 = tmpvar_81;
      if ((tmpvar_81 < 0.0)) {
        fTarget_78 = -1.0;
        fAmount_77 = -(tmpvar_81);
      };
      fOscillation_76 = (((
        (mix (mix (tmpvar_81, fTarget_78, fAmount_77), fTarget_78, fAmount_77) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_75.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_75.w * _ST_WindBranchWhip.x)));
      vPos_71 = (tmpvar_69 + ((tmpvar_73 * fOscillation_76) * _ST_WindBranch.y));
      highp vec4 tmpvar_82;
      tmpvar_82.zw = vec2(0.0, 0.0);
      tmpvar_82.x = ((tmpvar_74 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_82.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_83;
      highp vec4 tmpvar_84;
      tmpvar_84 = abs(((
        fract((tmpvar_82 + 0.5))
       * 2.0) - 1.0));
      tmpvar_83 = (((
        (tmpvar_84 * tmpvar_84)
       * 
        (3.0 - (2.0 * tmpvar_84))
      ) - 0.5) * 2.0);
      fAdherenceScale_72 = (1.0 - ((
        ((tmpvar_83.x * tmpvar_83.y) * tmpvar_83.x)
       * tmpvar_83.y) * _ST_WindTurbulences.x));
      fAdherenceScale_72 = (fAdherenceScale_72 + ((vOscillations_75.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_71 = (vPos_71 + ((
        ((vRotatedBranchAnchor_17 - vPos_71) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_72) * _glesMultiTexCoord0.z));
      vPos_70 = vPos_71;
    } else {
      highp vec3 vPos_85;
      vPos_85 = vPos_70;
      highp vec3 tmpvar_86;
      tmpvar_86 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_87;
      tmpvar_87 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_88;
      highp float fAmount_89;
      highp float fTarget_90;
      highp vec4 tmpvar_91;
      tmpvar_91.w = 0.0;
      tmpvar_91.x = (tmpvar_87 + _glesMultiTexCoord0.w);
      tmpvar_91.y = ((tmpvar_87 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_91.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_87 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_92;
      tmpvar_92 = abs(((
        fract((tmpvar_91 + 0.5))
       * 2.0) - 1.0));
      vOscillations_88 = (((
        (tmpvar_92 * tmpvar_92)
       * 
        (3.0 - (2.0 * tmpvar_92))
      ) - 0.5) * 2.0);
      highp float tmpvar_93;
      tmpvar_93 = (vOscillations_88.y * vOscillations_88.z);
      fTarget_90 = 1.0;
      fAmount_89 = tmpvar_93;
      if ((tmpvar_93 < 0.0)) {
        fTarget_90 = -1.0;
        fAmount_89 = -(tmpvar_93);
      };
      vPos_85 = (vPos_70 + ((tmpvar_86 * 
        (((mix (
          mix (tmpvar_93, fTarget_90, fAmount_89)
        , fTarget_90, fAmount_89) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_88.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_70 = vPos_85;
    };
    FinalPosition_19 = vPos_70;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_94;
    vPos_94 = FinalPosition_19;
    highp float fAdjust_95;
    highp float fLength_96;
    fLength_96 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_97;
    tmpvar_97 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_95 = tmpvar_97;
    if ((tmpvar_97 != 0.0)) {
      fAdjust_95 = pow (tmpvar_97, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_98;
    tmpvar_98.zw = vec2(0.0, 0.0);
    tmpvar_98.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_98.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_99;
    highp vec4 tmpvar_100;
    tmpvar_100 = abs(((
      fract((tmpvar_98 + 0.5))
     * 2.0) - 1.0));
    tmpvar_99 = (((
      (tmpvar_100 * tmpvar_100)
     * 
      (3.0 - (2.0 * tmpvar_100))
    ) - 0.5) * 2.0);
    vPos_94.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_99.x + (tmpvar_99.y * tmpvar_99.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_95)));
    vPos_94 = (normalize(vPos_94) * fLength_96);
    FinalPosition_19 = vPos_94;
  };
  tmpvar_15.xyz = FinalPosition_19;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_101;
  tmpvar_101 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_102;
  v_102.x = _World2Object[0].x;
  v_102.y = _World2Object[1].x;
  v_102.z = _World2Object[2].x;
  v_102.w = _World2Object[3].x;
  highp vec4 v_103;
  v_103.x = _World2Object[0].y;
  v_103.y = _World2Object[1].y;
  v_103.z = _World2Object[2].y;
  v_103.w = _World2Object[3].y;
  highp vec4 v_104;
  v_104.x = _World2Object[0].z;
  v_104.y = _World2Object[1].z;
  v_104.z = _World2Object[2].z;
  v_104.w = _World2Object[3].z;
  highp vec3 tmpvar_105;
  tmpvar_105 = normalize(((
    (v_102.xyz * tmpvar_16.x)
   + 
    (v_103.xyz * tmpvar_16.y)
  ) + (v_104.xyz * tmpvar_16.z)));
  worldNormal_5 = tmpvar_105;
  highp mat3 tmpvar_106;
  tmpvar_106[0] = _Object2World[0].xyz;
  tmpvar_106[1] = _Object2World[1].xyz;
  tmpvar_106[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize((tmpvar_106 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_107;
  lowp vec3 tmpvar_108;
  tmpvar_108 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_109;
  tmpvar_109 = (tmpvar_108 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_109;
  highp vec4 tmpvar_110;
  tmpvar_110.x = worldTangent_4.x;
  tmpvar_110.y = worldBinormal_3.x;
  tmpvar_110.z = worldNormal_5.x;
  tmpvar_110.w = tmpvar_101.x;
  highp vec4 tmpvar_111;
  tmpvar_111.x = worldTangent_4.y;
  tmpvar_111.y = worldBinormal_3.y;
  tmpvar_111.z = worldNormal_5.y;
  tmpvar_111.w = tmpvar_101.y;
  highp vec4 tmpvar_112;
  tmpvar_112.x = worldTangent_4.z;
  tmpvar_112.y = worldBinormal_3.z;
  tmpvar_112.z = worldNormal_5.z;
  tmpvar_112.w = tmpvar_101.z;
  lowp vec4 tmpvar_113;
  tmpvar_113.w = 1.0;
  tmpvar_113.xyz = worldNormal_5;
  mediump vec4 normal_114;
  normal_114 = tmpvar_113;
  mediump vec3 x2_115;
  mediump vec4 tmpvar_116;
  tmpvar_116 = (normal_114.xyzz * normal_114.yzzx);
  x2_115.x = dot (unity_SHBr, tmpvar_116);
  x2_115.y = dot (unity_SHBg, tmpvar_116);
  x2_115.z = dot (unity_SHBb, tmpvar_116);
  highp vec4 tmpvar_117;
  tmpvar_117 = (unity_World2Shadow[0] * (_Object2World * tmpvar_15));
  tmpvar_7 = tmpvar_117;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_110;
  xlv_TEXCOORD1 = tmpvar_111;
  xlv_TEXCOORD2 = tmpvar_112;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = (x2_115 + (unity_SHC.xyz * (
    (normal_114.x * normal_114.x)
   - 
    (normal_114.y * normal_114.y)
  )));
  xlv_TEXCOORD6 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_18;
  lowp float tmpvar_19;
  tmpvar_19 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz);
  mediump float tmpvar_20;
  tmpvar_20 = (_LightShadowData.x + (tmpvar_19 * (1.0 - _LightShadowData.x)));
  shadow_18 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_4.x = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_4.y = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_4.z = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_24;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_18;
  mediump vec3 normalWorld_25;
  normalWorld_25 = worldN_4;
  mediump vec3 tmpvar_26;
  mediump vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = normalWorld_25;
  mediump vec3 x1_28;
  x1_28.x = dot (unity_SHAr, tmpvar_27);
  x1_28.y = dot (unity_SHAg, tmpvar_27);
  x1_28.z = dot (unity_SHAb, tmpvar_27);
  tmpvar_26 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_26;
  lowp vec4 c_29;
  lowp vec4 c_30;
  lowp float diff_31;
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_31 = tmpvar_32;
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((tmpvar_9 * tmpvar_26) * diff_31);
  c_30.xyz = tmpvar_33;
  c_30.w = tmpvar_10;
  c_29.w = c_30.w;
  mediump vec3 tmpvar_34;
  tmpvar_34 = (c_30.xyz + (tmpvar_9 * (xlv_TEXCOORD5 + x1_28)));
  c_29.xyz = tmpvar_34;
  c_5.xyz = c_29.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
in vec4 _glesTANGENT;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_10;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_14;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_23;
  tmpvar_23 = ((_glesVertex.xyz - _glesMultiTexCoord1.xyz) * mix (1.0, _glesMultiTexCoord1.w, unity_LODFade.x));
  highp mat3 tmpvar_24;
  tmpvar_24[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_24[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_24[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_25;
  tmpvar_25 = (normalize((tmpvar_23 * tmpvar_24)) * sqrt(dot (tmpvar_23, tmpvar_23)));
  FinalPosition_19 = tmpvar_25;
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_26;
    tmpvar_26 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_27;
    isBestWind_27 = (tmpvar_20 == 4.0);
    bool bLeaf2_28;
    bLeaf2_28 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_29;
    vPos_29 = tmpvar_25;
    highp vec3 vDirection_30;
    vDirection_30 = tmpvar_2;
    highp float tmpvar_31;
    if (bLeaf2_28) {
      tmpvar_31 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_32;
    if (bLeaf2_28) {
      tmpvar_32 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_32 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_33;
    highp vec4 tmpvar_34;
    tmpvar_34.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_34.x = (tmpvar_31 + tmpvar_26);
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    vPos_33 = (tmpvar_25 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_32 * (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_30 = tmpvar_2;
    vPos_29 = vPos_33;
    if (isBestWind_27) {
      highp vec3 tmpvar_36;
      tmpvar_36 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_37;
      if (bLeaf2_28) {
        tmpvar_37 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_38;
      if (bLeaf2_28) {
        tmpvar_38 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_39;
      if (bLeaf2_28) {
        tmpvar_39 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_40;
      if (bLeaf2_28) {
        tmpvar_40 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_40 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_41;
      if (bLeaf2_28) {
        tmpvar_41 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_41 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_42;
      if (bLeaf2_28) {
        tmpvar_42 = bool(1);
      } else {
        tmpvar_42 = bool(1);
      };
      highp float fTwitch_43;
      highp vec3 vAxis_44;
      highp vec3 tmpvar_45;
      tmpvar_45 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_46;
      tmpvar_46 = ((tmpvar_45.x + tmpvar_45.y) + tmpvar_45.z);
      highp vec4 tmpvar_47;
      tmpvar_47.x = (tmpvar_37 + tmpvar_46);
      tmpvar_47.y = ((tmpvar_37 * 0.75) - tmpvar_46);
      tmpvar_47.z = ((tmpvar_37 * 0.01) + tmpvar_46);
      tmpvar_47.w = (tmpvar_37 + tmpvar_46);
      highp vec4 tmpvar_48;
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      tmpvar_48 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = sqrt(dot (vPos_33, vPos_33));
      highp float fAngle_51;
      fAngle_51 = ((_glesMultiTexCoord2.x * tmpvar_39) * (tmpvar_48.x + (tmpvar_48.y * tmpvar_48.y)));
      highp vec2 vSinCos_52;
      vSinCos_52.x = sin(fAngle_51);
      vSinCos_52.y = cos(fAngle_51);
      highp float tmpvar_53;
      tmpvar_53 = (1.0 - vSinCos_52.y);
      highp mat3 tmpvar_54;
      tmpvar_54[0].x = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.x) + vSinCos_52.y);
      tmpvar_54[0].y = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.y) + (vSinCos_52.x * tmpvar_36.z));
      tmpvar_54[0].z = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.z) - (vSinCos_52.x * tmpvar_36.y));
      tmpvar_54[1].x = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.y) - (vSinCos_52.x * tmpvar_36.z));
      tmpvar_54[1].y = (((tmpvar_53 * tmpvar_36.y) * tmpvar_36.y) + vSinCos_52.y);
      tmpvar_54[1].z = (((tmpvar_53 * tmpvar_36.y) * tmpvar_36.z) + (vSinCos_52.x * tmpvar_36.x));
      tmpvar_54[2].x = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.z) + (vSinCos_52.x * tmpvar_36.y));
      tmpvar_54[2].y = (((tmpvar_53 * tmpvar_36.y) * tmpvar_36.z) - (vSinCos_52.x * tmpvar_36.x));
      tmpvar_54[2].z = (((tmpvar_53 * tmpvar_36.z) * tmpvar_36.z) + vSinCos_52.y);
      highp vec3 tmpvar_55;
      tmpvar_55 = ((tmpvar_36.yzx * vRotatedWindVector_18.zxy) - (tmpvar_36.zxy * vRotatedWindVector_18.yzx));
      vAxis_44.xz = tmpvar_55.xz;
      highp float tmpvar_56;
      tmpvar_56 = clamp (dot (vRotatedWindVector_18, tmpvar_36), -1.0, 1.0);
      vAxis_44.y = (tmpvar_55.y + tmpvar_56);
      highp vec3 tmpvar_57;
      tmpvar_57 = normalize(vAxis_44);
      vAxis_44 = tmpvar_57;
      highp float tmpvar_58;
      tmpvar_58 = (1.570796 - (sign(tmpvar_56) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_56))) * (1.570796 + (abs(tmpvar_56) * (-0.2146018 + 
          (abs(tmpvar_56) * (0.08656672 + (abs(tmpvar_56) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_59;
      tmpvar_59 = (tmpvar_48.y - (tmpvar_48.x * tmpvar_48.x));
      fTwitch_43 = 0.0;
      if (tmpvar_42) {
        highp float fTime_60;
        fTime_60 = (tmpvar_41.z + tmpvar_46);
        highp vec4 tmpvar_61;
        tmpvar_61.zw = vec2(0.0, 0.0);
        tmpvar_61.x = fTime_60;
        tmpvar_61.y = (0.87 * fTime_60);
        highp vec4 tmpvar_62;
        highp vec4 tmpvar_63;
        tmpvar_63 = abs(((
          fract((tmpvar_61 + 0.5))
         * 2.0) - 1.0));
        tmpvar_62 = (((
          (tmpvar_63 * tmpvar_63)
         * 
          (3.0 - (2.0 * tmpvar_63))
        ) - 0.5) * 2.0);
        fTwitch_43 = (tmpvar_41.x * pow (clamp (
          ((((tmpvar_62.x * tmpvar_62.y) * tmpvar_62.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_41.y));
      };
      highp float fAngle_64;
      fAngle_64 = (_glesMultiTexCoord2.x * ((
        (tmpvar_58 * tmpvar_40)
       + 
        (tmpvar_59 * tmpvar_38)
      ) + fTwitch_43));
      highp vec2 vSinCos_65;
      vSinCos_65.x = sin(fAngle_64);
      vSinCos_65.y = cos(fAngle_64);
      highp float tmpvar_66;
      tmpvar_66 = (1.0 - vSinCos_65.y);
      highp mat3 tmpvar_67;
      tmpvar_67[0].x = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.x) + vSinCos_65.y);
      tmpvar_67[0].y = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.y) + (vSinCos_65.x * tmpvar_57.z));
      tmpvar_67[0].z = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.z) - (vSinCos_65.x * tmpvar_57.y));
      tmpvar_67[1].x = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.y) - (vSinCos_65.x * tmpvar_57.z));
      tmpvar_67[1].y = (((tmpvar_66 * tmpvar_57.y) * tmpvar_57.y) + vSinCos_65.y);
      tmpvar_67[1].z = (((tmpvar_66 * tmpvar_57.y) * tmpvar_57.z) + (vSinCos_65.x * tmpvar_57.x));
      tmpvar_67[2].x = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.z) + (vSinCos_65.x * tmpvar_57.y));
      tmpvar_67[2].y = (((tmpvar_66 * tmpvar_57.y) * tmpvar_57.z) - (vSinCos_65.x * tmpvar_57.x));
      tmpvar_67[2].z = (((tmpvar_66 * tmpvar_57.z) * tmpvar_57.z) + vSinCos_65.y);
      highp mat3 tmpvar_68;
      tmpvar_68 = (tmpvar_54 * tmpvar_67);
      vDirection_30 = (tmpvar_68 * _glesNormal);
      vPos_29 = (normalize((tmpvar_68 * vPos_33)) * tmpvar_50);
    };
    tmpvar_16 = vDirection_30;
    FinalPosition_19 = vPos_29;
  };
  highp vec3 tmpvar_69;
  tmpvar_69 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_69;
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_70;
    vPos_70 = tmpvar_69;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_71;
      vPos_71 = tmpvar_69;
      highp float fAdherenceScale_72;
      highp vec3 tmpvar_73;
      tmpvar_73 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_74;
      tmpvar_74 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_75;
      highp float fOscillation_76;
      fOscillation_76 = 1.0;
      highp float fAmount_77;
      highp float fTarget_78;
      highp vec4 tmpvar_79;
      tmpvar_79.x = (tmpvar_74 + _glesMultiTexCoord0.w);
      tmpvar_79.y = ((tmpvar_74 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_79.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_74 + _glesMultiTexCoord0.w));
      tmpvar_79.w = ((tmpvar_74 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      vOscillations_75 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      highp float tmpvar_81;
      tmpvar_81 = (vOscillations_75.y * vOscillations_75.z);
      fTarget_78 = 1.0;
      fAmount_77 = tmpvar_81;
      if ((tmpvar_81 < 0.0)) {
        fTarget_78 = -1.0;
        fAmount_77 = -(tmpvar_81);
      };
      fOscillation_76 = (((
        (mix (mix (tmpvar_81, fTarget_78, fAmount_77), fTarget_78, fAmount_77) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_75.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_75.w * _ST_WindBranchWhip.x)));
      vPos_71 = (tmpvar_69 + ((tmpvar_73 * fOscillation_76) * _ST_WindBranch.y));
      highp vec4 tmpvar_82;
      tmpvar_82.zw = vec2(0.0, 0.0);
      tmpvar_82.x = ((tmpvar_74 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_82.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_83;
      highp vec4 tmpvar_84;
      tmpvar_84 = abs(((
        fract((tmpvar_82 + 0.5))
       * 2.0) - 1.0));
      tmpvar_83 = (((
        (tmpvar_84 * tmpvar_84)
       * 
        (3.0 - (2.0 * tmpvar_84))
      ) - 0.5) * 2.0);
      fAdherenceScale_72 = (1.0 - ((
        ((tmpvar_83.x * tmpvar_83.y) * tmpvar_83.x)
       * tmpvar_83.y) * _ST_WindTurbulences.x));
      fAdherenceScale_72 = (fAdherenceScale_72 + ((vOscillations_75.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_71 = (vPos_71 + ((
        ((vRotatedBranchAnchor_17 - vPos_71) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_72) * _glesMultiTexCoord0.z));
      vPos_70 = vPos_71;
    } else {
      highp vec3 vPos_85;
      vPos_85 = vPos_70;
      highp vec3 tmpvar_86;
      tmpvar_86 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_87;
      tmpvar_87 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_88;
      highp float fAmount_89;
      highp float fTarget_90;
      highp vec4 tmpvar_91;
      tmpvar_91.w = 0.0;
      tmpvar_91.x = (tmpvar_87 + _glesMultiTexCoord0.w);
      tmpvar_91.y = ((tmpvar_87 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_91.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_87 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_92;
      tmpvar_92 = abs(((
        fract((tmpvar_91 + 0.5))
       * 2.0) - 1.0));
      vOscillations_88 = (((
        (tmpvar_92 * tmpvar_92)
       * 
        (3.0 - (2.0 * tmpvar_92))
      ) - 0.5) * 2.0);
      highp float tmpvar_93;
      tmpvar_93 = (vOscillations_88.y * vOscillations_88.z);
      fTarget_90 = 1.0;
      fAmount_89 = tmpvar_93;
      if ((tmpvar_93 < 0.0)) {
        fTarget_90 = -1.0;
        fAmount_89 = -(tmpvar_93);
      };
      vPos_85 = (vPos_70 + ((tmpvar_86 * 
        (((mix (
          mix (tmpvar_93, fTarget_90, fAmount_89)
        , fTarget_90, fAmount_89) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_88.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_70 = vPos_85;
    };
    FinalPosition_19 = vPos_70;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_94;
    vPos_94 = FinalPosition_19;
    highp float fAdjust_95;
    highp float fLength_96;
    fLength_96 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_97;
    tmpvar_97 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_95 = tmpvar_97;
    if ((tmpvar_97 != 0.0)) {
      fAdjust_95 = pow (tmpvar_97, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_98;
    tmpvar_98.zw = vec2(0.0, 0.0);
    tmpvar_98.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_98.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_99;
    highp vec4 tmpvar_100;
    tmpvar_100 = abs(((
      fract((tmpvar_98 + 0.5))
     * 2.0) - 1.0));
    tmpvar_99 = (((
      (tmpvar_100 * tmpvar_100)
     * 
      (3.0 - (2.0 * tmpvar_100))
    ) - 0.5) * 2.0);
    vPos_94.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_99.x + (tmpvar_99.y * tmpvar_99.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_95)));
    vPos_94 = (normalize(vPos_94) * fLength_96);
    FinalPosition_19 = vPos_94;
  };
  tmpvar_15.xyz = FinalPosition_19;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_101;
  tmpvar_101 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_102;
  v_102.x = _World2Object[0].x;
  v_102.y = _World2Object[1].x;
  v_102.z = _World2Object[2].x;
  v_102.w = _World2Object[3].x;
  highp vec4 v_103;
  v_103.x = _World2Object[0].y;
  v_103.y = _World2Object[1].y;
  v_103.z = _World2Object[2].y;
  v_103.w = _World2Object[3].y;
  highp vec4 v_104;
  v_104.x = _World2Object[0].z;
  v_104.y = _World2Object[1].z;
  v_104.z = _World2Object[2].z;
  v_104.w = _World2Object[3].z;
  highp vec3 tmpvar_105;
  tmpvar_105 = normalize(((
    (v_102.xyz * tmpvar_16.x)
   + 
    (v_103.xyz * tmpvar_16.y)
  ) + (v_104.xyz * tmpvar_16.z)));
  worldNormal_5 = tmpvar_105;
  highp mat3 tmpvar_106;
  tmpvar_106[0] = _Object2World[0].xyz;
  tmpvar_106[1] = _Object2World[1].xyz;
  tmpvar_106[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize((tmpvar_106 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_107;
  lowp vec3 tmpvar_108;
  tmpvar_108 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_109;
  tmpvar_109 = (tmpvar_108 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_109;
  highp vec4 tmpvar_110;
  tmpvar_110.x = worldTangent_4.x;
  tmpvar_110.y = worldBinormal_3.x;
  tmpvar_110.z = worldNormal_5.x;
  tmpvar_110.w = tmpvar_101.x;
  highp vec4 tmpvar_111;
  tmpvar_111.x = worldTangent_4.y;
  tmpvar_111.y = worldBinormal_3.y;
  tmpvar_111.z = worldNormal_5.y;
  tmpvar_111.w = tmpvar_101.y;
  highp vec4 tmpvar_112;
  tmpvar_112.x = worldTangent_4.z;
  tmpvar_112.y = worldBinormal_3.z;
  tmpvar_112.z = worldNormal_5.z;
  tmpvar_112.w = tmpvar_101.z;
  lowp vec4 tmpvar_113;
  tmpvar_113.w = 1.0;
  tmpvar_113.xyz = worldNormal_5;
  mediump vec4 normal_114;
  normal_114 = tmpvar_113;
  mediump vec3 x2_115;
  mediump vec4 tmpvar_116;
  tmpvar_116 = (normal_114.xyzz * normal_114.yzzx);
  x2_115.x = dot (unity_SHBr, tmpvar_116);
  x2_115.y = dot (unity_SHBg, tmpvar_116);
  x2_115.z = dot (unity_SHBb, tmpvar_116);
  highp vec4 tmpvar_117;
  tmpvar_117 = (unity_World2Shadow[0] * (_Object2World * tmpvar_15));
  tmpvar_7 = tmpvar_117;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_110;
  xlv_TEXCOORD1 = tmpvar_111;
  xlv_TEXCOORD2 = tmpvar_112;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = (x2_115 + (unity_SHC.xyz * (
    (normal_114.x * normal_114.x)
   - 
    (normal_114.y * normal_114.y)
  )));
  xlv_TEXCOORD6 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_18;
  mediump float tmpvar_19;
  tmpvar_19 = texture (_ShadowMapTexture, xlv_TEXCOORD6.xyz);
  lowp float tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump float tmpvar_21;
  tmpvar_21 = (_LightShadowData.x + (tmpvar_20 * (1.0 - _LightShadowData.x)));
  shadow_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_4.x = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_4.y = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_4.z = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_25;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_18;
  mediump vec3 normalWorld_26;
  normalWorld_26 = worldN_4;
  mediump vec3 tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = normalWorld_26;
  mediump vec3 x1_29;
  x1_29.x = dot (unity_SHAr, tmpvar_28);
  x1_29.y = dot (unity_SHAg, tmpvar_28);
  x1_29.z = dot (unity_SHAb, tmpvar_28);
  tmpvar_27 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_27;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_32 = tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_9 * tmpvar_27) * diff_32);
  c_31.xyz = tmpvar_34;
  c_31.w = tmpvar_10;
  c_30.w = c_31.w;
  mediump vec3 tmpvar_35;
  tmpvar_35 = (c_31.xyz + (tmpvar_9 * (xlv_TEXCOORD5 + x1_29)));
  c_30.xyz = tmpvar_35;
  c_5.xyz = c_30.xyz;
  c_5.w = 1.0;
  _glesFragData[0] = c_5;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_10.xy = tmpvar_11;
  tmpvar_9.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_9.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_15;
  highp vec4 tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_16 = tmpvar_1;
  tmpvar_17 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  FinalPosition_20 = tmpvar_1.xyz;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_24;
  tmpvar_24 = ((_glesVertex.xyz - _glesMultiTexCoord1.xyz) * mix (1.0, _glesMultiTexCoord1.w, unity_LODFade.x));
  highp mat3 tmpvar_25;
  tmpvar_25[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_25[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_25[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_26;
  tmpvar_26 = (normalize((tmpvar_24 * tmpvar_25)) * sqrt(dot (tmpvar_24, tmpvar_24)));
  FinalPosition_20 = tmpvar_26;
  if (((tmpvar_21 > 1.0) && (tmpvar_21 < 5.0))) {
    highp float tmpvar_27;
    tmpvar_27 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_28;
    isBestWind_28 = (tmpvar_21 == 4.0);
    bool bLeaf2_29;
    bLeaf2_29 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_30;
    vPos_30 = tmpvar_26;
    highp vec3 vDirection_31;
    vDirection_31 = tmpvar_2;
    highp float tmpvar_32;
    if (bLeaf2_29) {
      tmpvar_32 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_32 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_33;
    if (bLeaf2_29) {
      tmpvar_33 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_33 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_34;
    highp vec4 tmpvar_35;
    tmpvar_35.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_35.x = (tmpvar_32 + tmpvar_27);
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_35 + 0.5))
     * 2.0) - 1.0));
    vPos_34 = (tmpvar_26 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_33 * (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_31 = tmpvar_2;
    vPos_30 = vPos_34;
    if (isBestWind_28) {
      highp vec3 tmpvar_37;
      tmpvar_37 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_38;
      if (bLeaf2_29) {
        tmpvar_38 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_39;
      if (bLeaf2_29) {
        tmpvar_39 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_40;
      if (bLeaf2_29) {
        tmpvar_40 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_40 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_41;
      if (bLeaf2_29) {
        tmpvar_41 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_41 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_42;
      if (bLeaf2_29) {
        tmpvar_42 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_42 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_43;
      if (bLeaf2_29) {
        tmpvar_43 = bool(1);
      } else {
        tmpvar_43 = bool(1);
      };
      highp float fTwitch_44;
      highp vec3 vAxis_45;
      highp vec3 tmpvar_46;
      tmpvar_46 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_47;
      tmpvar_47 = ((tmpvar_46.x + tmpvar_46.y) + tmpvar_46.z);
      highp vec4 tmpvar_48;
      tmpvar_48.x = (tmpvar_38 + tmpvar_47);
      tmpvar_48.y = ((tmpvar_38 * 0.75) - tmpvar_47);
      tmpvar_48.z = ((tmpvar_38 * 0.01) + tmpvar_47);
      tmpvar_48.w = (tmpvar_38 + tmpvar_47);
      highp vec4 tmpvar_49;
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      tmpvar_49 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      highp float tmpvar_51;
      tmpvar_51 = sqrt(dot (vPos_34, vPos_34));
      highp float fAngle_52;
      fAngle_52 = ((_glesMultiTexCoord2.x * tmpvar_40) * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y)));
      highp vec2 vSinCos_53;
      vSinCos_53.x = sin(fAngle_52);
      vSinCos_53.y = cos(fAngle_52);
      highp float tmpvar_54;
      tmpvar_54 = (1.0 - vSinCos_53.y);
      highp mat3 tmpvar_55;
      tmpvar_55[0].x = (((tmpvar_54 * tmpvar_37.x) * tmpvar_37.x) + vSinCos_53.y);
      tmpvar_55[0].y = (((tmpvar_54 * tmpvar_37.x) * tmpvar_37.y) + (vSinCos_53.x * tmpvar_37.z));
      tmpvar_55[0].z = (((tmpvar_54 * tmpvar_37.x) * tmpvar_37.z) - (vSinCos_53.x * tmpvar_37.y));
      tmpvar_55[1].x = (((tmpvar_54 * tmpvar_37.x) * tmpvar_37.y) - (vSinCos_53.x * tmpvar_37.z));
      tmpvar_55[1].y = (((tmpvar_54 * tmpvar_37.y) * tmpvar_37.y) + vSinCos_53.y);
      tmpvar_55[1].z = (((tmpvar_54 * tmpvar_37.y) * tmpvar_37.z) + (vSinCos_53.x * tmpvar_37.x));
      tmpvar_55[2].x = (((tmpvar_54 * tmpvar_37.x) * tmpvar_37.z) + (vSinCos_53.x * tmpvar_37.y));
      tmpvar_55[2].y = (((tmpvar_54 * tmpvar_37.y) * tmpvar_37.z) - (vSinCos_53.x * tmpvar_37.x));
      tmpvar_55[2].z = (((tmpvar_54 * tmpvar_37.z) * tmpvar_37.z) + vSinCos_53.y);
      highp vec3 tmpvar_56;
      tmpvar_56 = ((tmpvar_37.yzx * vRotatedWindVector_19.zxy) - (tmpvar_37.zxy * vRotatedWindVector_19.yzx));
      vAxis_45.xz = tmpvar_56.xz;
      highp float tmpvar_57;
      tmpvar_57 = clamp (dot (vRotatedWindVector_19, tmpvar_37), -1.0, 1.0);
      vAxis_45.y = (tmpvar_56.y + tmpvar_57);
      highp vec3 tmpvar_58;
      tmpvar_58 = normalize(vAxis_45);
      vAxis_45 = tmpvar_58;
      highp float tmpvar_59;
      tmpvar_59 = (1.570796 - (sign(tmpvar_57) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_57))) * (1.570796 + (abs(tmpvar_57) * (-0.2146018 + 
          (abs(tmpvar_57) * (0.08656672 + (abs(tmpvar_57) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_60;
      tmpvar_60 = (tmpvar_49.y - (tmpvar_49.x * tmpvar_49.x));
      fTwitch_44 = 0.0;
      if (tmpvar_43) {
        highp float fTime_61;
        fTime_61 = (tmpvar_42.z + tmpvar_47);
        highp vec4 tmpvar_62;
        tmpvar_62.zw = vec2(0.0, 0.0);
        tmpvar_62.x = fTime_61;
        tmpvar_62.y = (0.87 * fTime_61);
        highp vec4 tmpvar_63;
        highp vec4 tmpvar_64;
        tmpvar_64 = abs(((
          fract((tmpvar_62 + 0.5))
         * 2.0) - 1.0));
        tmpvar_63 = (((
          (tmpvar_64 * tmpvar_64)
         * 
          (3.0 - (2.0 * tmpvar_64))
        ) - 0.5) * 2.0);
        fTwitch_44 = (tmpvar_42.x * pow (clamp (
          ((((tmpvar_63.x * tmpvar_63.y) * tmpvar_63.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_42.y));
      };
      highp float fAngle_65;
      fAngle_65 = (_glesMultiTexCoord2.x * ((
        (tmpvar_59 * tmpvar_41)
       + 
        (tmpvar_60 * tmpvar_39)
      ) + fTwitch_44));
      highp vec2 vSinCos_66;
      vSinCos_66.x = sin(fAngle_65);
      vSinCos_66.y = cos(fAngle_65);
      highp float tmpvar_67;
      tmpvar_67 = (1.0 - vSinCos_66.y);
      highp mat3 tmpvar_68;
      tmpvar_68[0].x = (((tmpvar_67 * tmpvar_58.x) * tmpvar_58.x) + vSinCos_66.y);
      tmpvar_68[0].y = (((tmpvar_67 * tmpvar_58.x) * tmpvar_58.y) + (vSinCos_66.x * tmpvar_58.z));
      tmpvar_68[0].z = (((tmpvar_67 * tmpvar_58.x) * tmpvar_58.z) - (vSinCos_66.x * tmpvar_58.y));
      tmpvar_68[1].x = (((tmpvar_67 * tmpvar_58.x) * tmpvar_58.y) - (vSinCos_66.x * tmpvar_58.z));
      tmpvar_68[1].y = (((tmpvar_67 * tmpvar_58.y) * tmpvar_58.y) + vSinCos_66.y);
      tmpvar_68[1].z = (((tmpvar_67 * tmpvar_58.y) * tmpvar_58.z) + (vSinCos_66.x * tmpvar_58.x));
      tmpvar_68[2].x = (((tmpvar_67 * tmpvar_58.x) * tmpvar_58.z) + (vSinCos_66.x * tmpvar_58.y));
      tmpvar_68[2].y = (((tmpvar_67 * tmpvar_58.y) * tmpvar_58.z) - (vSinCos_66.x * tmpvar_58.x));
      tmpvar_68[2].z = (((tmpvar_67 * tmpvar_58.z) * tmpvar_58.z) + vSinCos_66.y);
      highp mat3 tmpvar_69;
      tmpvar_69 = (tmpvar_55 * tmpvar_68);
      vDirection_31 = (tmpvar_69 * _glesNormal);
      vPos_30 = (normalize((tmpvar_69 * vPos_34)) * tmpvar_51);
    };
    tmpvar_17 = vDirection_31;
    FinalPosition_20 = vPos_30;
  };
  highp vec3 tmpvar_70;
  tmpvar_70 = (FinalPosition_20 + _glesMultiTexCoord1.xyz);
  FinalPosition_20 = tmpvar_70;
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_71;
    vPos_71 = tmpvar_70;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_72;
      vPos_72 = tmpvar_70;
      highp float fAdherenceScale_73;
      highp vec3 tmpvar_74;
      tmpvar_74 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_75;
      tmpvar_75 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_76;
      highp float fOscillation_77;
      fOscillation_77 = 1.0;
      highp float fAmount_78;
      highp float fTarget_79;
      highp vec4 tmpvar_80;
      tmpvar_80.x = (tmpvar_75 + _glesMultiTexCoord0.w);
      tmpvar_80.y = ((tmpvar_75 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_80.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_75 + _glesMultiTexCoord0.w));
      tmpvar_80.w = ((tmpvar_75 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      vOscillations_76 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      highp float tmpvar_82;
      tmpvar_82 = (vOscillations_76.y * vOscillations_76.z);
      fTarget_79 = 1.0;
      fAmount_78 = tmpvar_82;
      if ((tmpvar_82 < 0.0)) {
        fTarget_79 = -1.0;
        fAmount_78 = -(tmpvar_82);
      };
      fOscillation_77 = (((
        (mix (mix (tmpvar_82, fTarget_79, fAmount_78), fTarget_79, fAmount_78) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_76.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_76.w * _ST_WindBranchWhip.x)));
      vPos_72 = (tmpvar_70 + ((tmpvar_74 * fOscillation_77) * _ST_WindBranch.y));
      highp vec4 tmpvar_83;
      tmpvar_83.zw = vec2(0.0, 0.0);
      tmpvar_83.x = ((tmpvar_75 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_83.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_84;
      highp vec4 tmpvar_85;
      tmpvar_85 = abs(((
        fract((tmpvar_83 + 0.5))
       * 2.0) - 1.0));
      tmpvar_84 = (((
        (tmpvar_85 * tmpvar_85)
       * 
        (3.0 - (2.0 * tmpvar_85))
      ) - 0.5) * 2.0);
      fAdherenceScale_73 = (1.0 - ((
        ((tmpvar_84.x * tmpvar_84.y) * tmpvar_84.x)
       * tmpvar_84.y) * _ST_WindTurbulences.x));
      fAdherenceScale_73 = (fAdherenceScale_73 + ((vOscillations_76.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_72 = (vPos_72 + ((
        ((vRotatedBranchAnchor_18 - vPos_72) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_73) * _glesMultiTexCoord0.z));
      vPos_71 = vPos_72;
    } else {
      highp vec3 vPos_86;
      vPos_86 = vPos_71;
      highp vec3 tmpvar_87;
      tmpvar_87 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_88;
      tmpvar_88 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_89;
      highp float fAmount_90;
      highp float fTarget_91;
      highp vec4 tmpvar_92;
      tmpvar_92.w = 0.0;
      tmpvar_92.x = (tmpvar_88 + _glesMultiTexCoord0.w);
      tmpvar_92.y = ((tmpvar_88 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_92.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_88 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_93;
      tmpvar_93 = abs(((
        fract((tmpvar_92 + 0.5))
       * 2.0) - 1.0));
      vOscillations_89 = (((
        (tmpvar_93 * tmpvar_93)
       * 
        (3.0 - (2.0 * tmpvar_93))
      ) - 0.5) * 2.0);
      highp float tmpvar_94;
      tmpvar_94 = (vOscillations_89.y * vOscillations_89.z);
      fTarget_91 = 1.0;
      fAmount_90 = tmpvar_94;
      if ((tmpvar_94 < 0.0)) {
        fTarget_91 = -1.0;
        fAmount_90 = -(tmpvar_94);
      };
      vPos_86 = (vPos_71 + ((tmpvar_87 * 
        (((mix (
          mix (tmpvar_94, fTarget_91, fAmount_90)
        , fTarget_91, fAmount_90) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_89.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_71 = vPos_86;
    };
    FinalPosition_20 = vPos_71;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_95;
    vPos_95 = FinalPosition_20;
    highp float fAdjust_96;
    highp float fLength_97;
    fLength_97 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_98;
    tmpvar_98 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_96 = tmpvar_98;
    if ((tmpvar_98 != 0.0)) {
      fAdjust_96 = pow (tmpvar_98, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_99;
    tmpvar_99.zw = vec2(0.0, 0.0);
    tmpvar_99.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_99.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_100;
    highp vec4 tmpvar_101;
    tmpvar_101 = abs(((
      fract((tmpvar_99 + 0.5))
     * 2.0) - 1.0));
    tmpvar_100 = (((
      (tmpvar_101 * tmpvar_101)
     * 
      (3.0 - (2.0 * tmpvar_101))
    ) - 0.5) * 2.0);
    vPos_95.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_100.x + (tmpvar_100.y * tmpvar_100.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_96)));
    vPos_95 = (normalize(vPos_95) * fLength_97);
    FinalPosition_20 = vPos_95;
  };
  tmpvar_16.xyz = FinalPosition_20;
  tmpvar_6 = tmpvar_9;
  highp vec3 tmpvar_102;
  tmpvar_102 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_103;
  v_103.x = _World2Object[0].x;
  v_103.y = _World2Object[1].x;
  v_103.z = _World2Object[2].x;
  v_103.w = _World2Object[3].x;
  highp vec4 v_104;
  v_104.x = _World2Object[0].y;
  v_104.y = _World2Object[1].y;
  v_104.z = _World2Object[2].y;
  v_104.w = _World2Object[3].y;
  highp vec4 v_105;
  v_105.x = _World2Object[0].z;
  v_105.y = _World2Object[1].z;
  v_105.z = _World2Object[2].z;
  v_105.w = _World2Object[3].z;
  highp vec3 tmpvar_106;
  tmpvar_106 = normalize(((
    (v_103.xyz * tmpvar_17.x)
   + 
    (v_104.xyz * tmpvar_17.y)
  ) + (v_105.xyz * tmpvar_17.z)));
  worldNormal_5 = tmpvar_106;
  highp mat3 tmpvar_107;
  tmpvar_107[0] = _Object2World[0].xyz;
  tmpvar_107[1] = _Object2World[1].xyz;
  tmpvar_107[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_108;
  tmpvar_108 = normalize((tmpvar_107 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_108;
  lowp vec3 tmpvar_109;
  tmpvar_109 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_110;
  tmpvar_110 = (tmpvar_109 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_110;
  highp vec4 tmpvar_111;
  tmpvar_111.x = worldTangent_4.x;
  tmpvar_111.y = worldBinormal_3.x;
  tmpvar_111.z = worldNormal_5.x;
  tmpvar_111.w = tmpvar_102.x;
  highp vec4 tmpvar_112;
  tmpvar_112.x = worldTangent_4.y;
  tmpvar_112.y = worldBinormal_3.y;
  tmpvar_112.z = worldNormal_5.y;
  tmpvar_112.w = tmpvar_102.y;
  highp vec4 tmpvar_113;
  tmpvar_113.x = worldTangent_4.z;
  tmpvar_113.y = worldBinormal_3.z;
  tmpvar_113.z = worldNormal_5.z;
  tmpvar_113.w = tmpvar_102.z;
  lowp vec4 tmpvar_114;
  tmpvar_114.w = 1.0;
  tmpvar_114.xyz = worldNormal_5;
  mediump vec3 tmpvar_115;
  mediump vec4 normal_116;
  normal_116 = tmpvar_114;
  mediump vec3 x2_117;
  mediump vec4 tmpvar_118;
  tmpvar_118 = (normal_116.xyzz * normal_116.yzzx);
  x2_117.x = dot (unity_SHBr, tmpvar_118);
  x2_117.y = dot (unity_SHBg, tmpvar_118);
  x2_117.z = dot (unity_SHBb, tmpvar_118);
  tmpvar_115 = (x2_117 + (unity_SHC.xyz * (
    (normal_116.x * normal_116.x)
   - 
    (normal_116.y * normal_116.y)
  )));
  highp vec3 lightColor0_119;
  lightColor0_119 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_120;
  lightColor1_120 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_121;
  lightColor2_121 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_122;
  lightColor3_122 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_123;
  lightAttenSq_123 = unity_4LightAtten0;
  highp vec3 normal_124;
  normal_124 = worldNormal_5;
  highp vec4 tmpvar_125;
  tmpvar_125 = (unity_4LightPosX0 - tmpvar_102.x);
  highp vec4 tmpvar_126;
  tmpvar_126 = (unity_4LightPosY0 - tmpvar_102.y);
  highp vec4 tmpvar_127;
  tmpvar_127 = (unity_4LightPosZ0 - tmpvar_102.z);
  highp vec4 tmpvar_128;
  tmpvar_128 = (((tmpvar_125 * tmpvar_125) + (tmpvar_126 * tmpvar_126)) + (tmpvar_127 * tmpvar_127));
  highp vec4 tmpvar_129;
  tmpvar_129 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_125 * normal_124.x) + (tmpvar_126 * normal_124.y)) + (tmpvar_127 * normal_124.z))
   * 
    inversesqrt(tmpvar_128)
  )) * (1.0/((1.0 + 
    (tmpvar_128 * lightAttenSq_123)
  ))));
  highp vec3 tmpvar_130;
  tmpvar_130 = (tmpvar_115 + ((
    ((lightColor0_119 * tmpvar_129.x) + (lightColor1_120 * tmpvar_129.y))
   + 
    (lightColor2_121 * tmpvar_129.z)
  ) + (lightColor3_122 * tmpvar_129.w)));
  tmpvar_7 = tmpvar_130;
  highp vec4 tmpvar_131;
  tmpvar_131 = (unity_World2Shadow[0] * (_Object2World * tmpvar_16));
  tmpvar_8 = tmpvar_131;
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_111;
  xlv_TEXCOORD1 = tmpvar_112;
  xlv_TEXCOORD2 = tmpvar_113;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_18;
  lowp float tmpvar_19;
  tmpvar_19 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz);
  mediump float tmpvar_20;
  tmpvar_20 = (_LightShadowData.x + (tmpvar_19 * (1.0 - _LightShadowData.x)));
  shadow_18 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_4.x = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_4.y = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_4.z = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_24;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_18;
  mediump vec3 normalWorld_25;
  normalWorld_25 = worldN_4;
  mediump vec3 tmpvar_26;
  mediump vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = normalWorld_25;
  mediump vec3 x1_28;
  x1_28.x = dot (unity_SHAr, tmpvar_27);
  x1_28.y = dot (unity_SHAg, tmpvar_27);
  x1_28.z = dot (unity_SHAb, tmpvar_27);
  tmpvar_26 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_26;
  lowp vec4 c_29;
  lowp vec4 c_30;
  lowp float diff_31;
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_31 = tmpvar_32;
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((tmpvar_9 * tmpvar_26) * diff_31);
  c_30.xyz = tmpvar_33;
  c_30.w = tmpvar_10;
  c_29.w = c_30.w;
  mediump vec3 tmpvar_34;
  tmpvar_34 = (c_30.xyz + (tmpvar_9 * (xlv_TEXCOORD5 + x1_28)));
  c_29.xyz = tmpvar_34;
  c_5.xyz = c_29.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
in vec4 _glesTANGENT;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_10.xy = tmpvar_11;
  tmpvar_9.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_9.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_15;
  highp vec4 tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_16 = tmpvar_1;
  tmpvar_17 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  FinalPosition_20 = tmpvar_1.xyz;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_24;
  tmpvar_24 = ((_glesVertex.xyz - _glesMultiTexCoord1.xyz) * mix (1.0, _glesMultiTexCoord1.w, unity_LODFade.x));
  highp mat3 tmpvar_25;
  tmpvar_25[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_25[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_25[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_26;
  tmpvar_26 = (normalize((tmpvar_24 * tmpvar_25)) * sqrt(dot (tmpvar_24, tmpvar_24)));
  FinalPosition_20 = tmpvar_26;
  if (((tmpvar_21 > 1.0) && (tmpvar_21 < 5.0))) {
    highp float tmpvar_27;
    tmpvar_27 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_28;
    isBestWind_28 = (tmpvar_21 == 4.0);
    bool bLeaf2_29;
    bLeaf2_29 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_30;
    vPos_30 = tmpvar_26;
    highp vec3 vDirection_31;
    vDirection_31 = tmpvar_2;
    highp float tmpvar_32;
    if (bLeaf2_29) {
      tmpvar_32 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_32 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_33;
    if (bLeaf2_29) {
      tmpvar_33 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_33 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_34;
    highp vec4 tmpvar_35;
    tmpvar_35.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_35.x = (tmpvar_32 + tmpvar_27);
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_35 + 0.5))
     * 2.0) - 1.0));
    vPos_34 = (tmpvar_26 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_33 * (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_31 = tmpvar_2;
    vPos_30 = vPos_34;
    if (isBestWind_28) {
      highp vec3 tmpvar_37;
      tmpvar_37 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_38;
      if (bLeaf2_29) {
        tmpvar_38 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_39;
      if (bLeaf2_29) {
        tmpvar_39 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_40;
      if (bLeaf2_29) {
        tmpvar_40 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_40 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_41;
      if (bLeaf2_29) {
        tmpvar_41 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_41 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_42;
      if (bLeaf2_29) {
        tmpvar_42 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_42 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_43;
      if (bLeaf2_29) {
        tmpvar_43 = bool(1);
      } else {
        tmpvar_43 = bool(1);
      };
      highp float fTwitch_44;
      highp vec3 vAxis_45;
      highp vec3 tmpvar_46;
      tmpvar_46 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_47;
      tmpvar_47 = ((tmpvar_46.x + tmpvar_46.y) + tmpvar_46.z);
      highp vec4 tmpvar_48;
      tmpvar_48.x = (tmpvar_38 + tmpvar_47);
      tmpvar_48.y = ((tmpvar_38 * 0.75) - tmpvar_47);
      tmpvar_48.z = ((tmpvar_38 * 0.01) + tmpvar_47);
      tmpvar_48.w = (tmpvar_38 + tmpvar_47);
      highp vec4 tmpvar_49;
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      tmpvar_49 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      highp float tmpvar_51;
      tmpvar_51 = sqrt(dot (vPos_34, vPos_34));
      highp float fAngle_52;
      fAngle_52 = ((_glesMultiTexCoord2.x * tmpvar_40) * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y)));
      highp vec2 vSinCos_53;
      vSinCos_53.x = sin(fAngle_52);
      vSinCos_53.y = cos(fAngle_52);
      highp float tmpvar_54;
      tmpvar_54 = (1.0 - vSinCos_53.y);
      highp mat3 tmpvar_55;
      tmpvar_55[0].x = (((tmpvar_54 * tmpvar_37.x) * tmpvar_37.x) + vSinCos_53.y);
      tmpvar_55[0].y = (((tmpvar_54 * tmpvar_37.x) * tmpvar_37.y) + (vSinCos_53.x * tmpvar_37.z));
      tmpvar_55[0].z = (((tmpvar_54 * tmpvar_37.x) * tmpvar_37.z) - (vSinCos_53.x * tmpvar_37.y));
      tmpvar_55[1].x = (((tmpvar_54 * tmpvar_37.x) * tmpvar_37.y) - (vSinCos_53.x * tmpvar_37.z));
      tmpvar_55[1].y = (((tmpvar_54 * tmpvar_37.y) * tmpvar_37.y) + vSinCos_53.y);
      tmpvar_55[1].z = (((tmpvar_54 * tmpvar_37.y) * tmpvar_37.z) + (vSinCos_53.x * tmpvar_37.x));
      tmpvar_55[2].x = (((tmpvar_54 * tmpvar_37.x) * tmpvar_37.z) + (vSinCos_53.x * tmpvar_37.y));
      tmpvar_55[2].y = (((tmpvar_54 * tmpvar_37.y) * tmpvar_37.z) - (vSinCos_53.x * tmpvar_37.x));
      tmpvar_55[2].z = (((tmpvar_54 * tmpvar_37.z) * tmpvar_37.z) + vSinCos_53.y);
      highp vec3 tmpvar_56;
      tmpvar_56 = ((tmpvar_37.yzx * vRotatedWindVector_19.zxy) - (tmpvar_37.zxy * vRotatedWindVector_19.yzx));
      vAxis_45.xz = tmpvar_56.xz;
      highp float tmpvar_57;
      tmpvar_57 = clamp (dot (vRotatedWindVector_19, tmpvar_37), -1.0, 1.0);
      vAxis_45.y = (tmpvar_56.y + tmpvar_57);
      highp vec3 tmpvar_58;
      tmpvar_58 = normalize(vAxis_45);
      vAxis_45 = tmpvar_58;
      highp float tmpvar_59;
      tmpvar_59 = (1.570796 - (sign(tmpvar_57) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_57))) * (1.570796 + (abs(tmpvar_57) * (-0.2146018 + 
          (abs(tmpvar_57) * (0.08656672 + (abs(tmpvar_57) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_60;
      tmpvar_60 = (tmpvar_49.y - (tmpvar_49.x * tmpvar_49.x));
      fTwitch_44 = 0.0;
      if (tmpvar_43) {
        highp float fTime_61;
        fTime_61 = (tmpvar_42.z + tmpvar_47);
        highp vec4 tmpvar_62;
        tmpvar_62.zw = vec2(0.0, 0.0);
        tmpvar_62.x = fTime_61;
        tmpvar_62.y = (0.87 * fTime_61);
        highp vec4 tmpvar_63;
        highp vec4 tmpvar_64;
        tmpvar_64 = abs(((
          fract((tmpvar_62 + 0.5))
         * 2.0) - 1.0));
        tmpvar_63 = (((
          (tmpvar_64 * tmpvar_64)
         * 
          (3.0 - (2.0 * tmpvar_64))
        ) - 0.5) * 2.0);
        fTwitch_44 = (tmpvar_42.x * pow (clamp (
          ((((tmpvar_63.x * tmpvar_63.y) * tmpvar_63.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_42.y));
      };
      highp float fAngle_65;
      fAngle_65 = (_glesMultiTexCoord2.x * ((
        (tmpvar_59 * tmpvar_41)
       + 
        (tmpvar_60 * tmpvar_39)
      ) + fTwitch_44));
      highp vec2 vSinCos_66;
      vSinCos_66.x = sin(fAngle_65);
      vSinCos_66.y = cos(fAngle_65);
      highp float tmpvar_67;
      tmpvar_67 = (1.0 - vSinCos_66.y);
      highp mat3 tmpvar_68;
      tmpvar_68[0].x = (((tmpvar_67 * tmpvar_58.x) * tmpvar_58.x) + vSinCos_66.y);
      tmpvar_68[0].y = (((tmpvar_67 * tmpvar_58.x) * tmpvar_58.y) + (vSinCos_66.x * tmpvar_58.z));
      tmpvar_68[0].z = (((tmpvar_67 * tmpvar_58.x) * tmpvar_58.z) - (vSinCos_66.x * tmpvar_58.y));
      tmpvar_68[1].x = (((tmpvar_67 * tmpvar_58.x) * tmpvar_58.y) - (vSinCos_66.x * tmpvar_58.z));
      tmpvar_68[1].y = (((tmpvar_67 * tmpvar_58.y) * tmpvar_58.y) + vSinCos_66.y);
      tmpvar_68[1].z = (((tmpvar_67 * tmpvar_58.y) * tmpvar_58.z) + (vSinCos_66.x * tmpvar_58.x));
      tmpvar_68[2].x = (((tmpvar_67 * tmpvar_58.x) * tmpvar_58.z) + (vSinCos_66.x * tmpvar_58.y));
      tmpvar_68[2].y = (((tmpvar_67 * tmpvar_58.y) * tmpvar_58.z) - (vSinCos_66.x * tmpvar_58.x));
      tmpvar_68[2].z = (((tmpvar_67 * tmpvar_58.z) * tmpvar_58.z) + vSinCos_66.y);
      highp mat3 tmpvar_69;
      tmpvar_69 = (tmpvar_55 * tmpvar_68);
      vDirection_31 = (tmpvar_69 * _glesNormal);
      vPos_30 = (normalize((tmpvar_69 * vPos_34)) * tmpvar_51);
    };
    tmpvar_17 = vDirection_31;
    FinalPosition_20 = vPos_30;
  };
  highp vec3 tmpvar_70;
  tmpvar_70 = (FinalPosition_20 + _glesMultiTexCoord1.xyz);
  FinalPosition_20 = tmpvar_70;
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_71;
    vPos_71 = tmpvar_70;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_72;
      vPos_72 = tmpvar_70;
      highp float fAdherenceScale_73;
      highp vec3 tmpvar_74;
      tmpvar_74 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_75;
      tmpvar_75 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_76;
      highp float fOscillation_77;
      fOscillation_77 = 1.0;
      highp float fAmount_78;
      highp float fTarget_79;
      highp vec4 tmpvar_80;
      tmpvar_80.x = (tmpvar_75 + _glesMultiTexCoord0.w);
      tmpvar_80.y = ((tmpvar_75 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_80.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_75 + _glesMultiTexCoord0.w));
      tmpvar_80.w = ((tmpvar_75 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      vOscillations_76 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      highp float tmpvar_82;
      tmpvar_82 = (vOscillations_76.y * vOscillations_76.z);
      fTarget_79 = 1.0;
      fAmount_78 = tmpvar_82;
      if ((tmpvar_82 < 0.0)) {
        fTarget_79 = -1.0;
        fAmount_78 = -(tmpvar_82);
      };
      fOscillation_77 = (((
        (mix (mix (tmpvar_82, fTarget_79, fAmount_78), fTarget_79, fAmount_78) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_76.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_76.w * _ST_WindBranchWhip.x)));
      vPos_72 = (tmpvar_70 + ((tmpvar_74 * fOscillation_77) * _ST_WindBranch.y));
      highp vec4 tmpvar_83;
      tmpvar_83.zw = vec2(0.0, 0.0);
      tmpvar_83.x = ((tmpvar_75 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_83.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_84;
      highp vec4 tmpvar_85;
      tmpvar_85 = abs(((
        fract((tmpvar_83 + 0.5))
       * 2.0) - 1.0));
      tmpvar_84 = (((
        (tmpvar_85 * tmpvar_85)
       * 
        (3.0 - (2.0 * tmpvar_85))
      ) - 0.5) * 2.0);
      fAdherenceScale_73 = (1.0 - ((
        ((tmpvar_84.x * tmpvar_84.y) * tmpvar_84.x)
       * tmpvar_84.y) * _ST_WindTurbulences.x));
      fAdherenceScale_73 = (fAdherenceScale_73 + ((vOscillations_76.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_72 = (vPos_72 + ((
        ((vRotatedBranchAnchor_18 - vPos_72) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_73) * _glesMultiTexCoord0.z));
      vPos_71 = vPos_72;
    } else {
      highp vec3 vPos_86;
      vPos_86 = vPos_71;
      highp vec3 tmpvar_87;
      tmpvar_87 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_88;
      tmpvar_88 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_89;
      highp float fAmount_90;
      highp float fTarget_91;
      highp vec4 tmpvar_92;
      tmpvar_92.w = 0.0;
      tmpvar_92.x = (tmpvar_88 + _glesMultiTexCoord0.w);
      tmpvar_92.y = ((tmpvar_88 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_92.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_88 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_93;
      tmpvar_93 = abs(((
        fract((tmpvar_92 + 0.5))
       * 2.0) - 1.0));
      vOscillations_89 = (((
        (tmpvar_93 * tmpvar_93)
       * 
        (3.0 - (2.0 * tmpvar_93))
      ) - 0.5) * 2.0);
      highp float tmpvar_94;
      tmpvar_94 = (vOscillations_89.y * vOscillations_89.z);
      fTarget_91 = 1.0;
      fAmount_90 = tmpvar_94;
      if ((tmpvar_94 < 0.0)) {
        fTarget_91 = -1.0;
        fAmount_90 = -(tmpvar_94);
      };
      vPos_86 = (vPos_71 + ((tmpvar_87 * 
        (((mix (
          mix (tmpvar_94, fTarget_91, fAmount_90)
        , fTarget_91, fAmount_90) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_89.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_71 = vPos_86;
    };
    FinalPosition_20 = vPos_71;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_95;
    vPos_95 = FinalPosition_20;
    highp float fAdjust_96;
    highp float fLength_97;
    fLength_97 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_98;
    tmpvar_98 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_96 = tmpvar_98;
    if ((tmpvar_98 != 0.0)) {
      fAdjust_96 = pow (tmpvar_98, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_99;
    tmpvar_99.zw = vec2(0.0, 0.0);
    tmpvar_99.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_99.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_100;
    highp vec4 tmpvar_101;
    tmpvar_101 = abs(((
      fract((tmpvar_99 + 0.5))
     * 2.0) - 1.0));
    tmpvar_100 = (((
      (tmpvar_101 * tmpvar_101)
     * 
      (3.0 - (2.0 * tmpvar_101))
    ) - 0.5) * 2.0);
    vPos_95.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_100.x + (tmpvar_100.y * tmpvar_100.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_96)));
    vPos_95 = (normalize(vPos_95) * fLength_97);
    FinalPosition_20 = vPos_95;
  };
  tmpvar_16.xyz = FinalPosition_20;
  tmpvar_6 = tmpvar_9;
  highp vec3 tmpvar_102;
  tmpvar_102 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_103;
  v_103.x = _World2Object[0].x;
  v_103.y = _World2Object[1].x;
  v_103.z = _World2Object[2].x;
  v_103.w = _World2Object[3].x;
  highp vec4 v_104;
  v_104.x = _World2Object[0].y;
  v_104.y = _World2Object[1].y;
  v_104.z = _World2Object[2].y;
  v_104.w = _World2Object[3].y;
  highp vec4 v_105;
  v_105.x = _World2Object[0].z;
  v_105.y = _World2Object[1].z;
  v_105.z = _World2Object[2].z;
  v_105.w = _World2Object[3].z;
  highp vec3 tmpvar_106;
  tmpvar_106 = normalize(((
    (v_103.xyz * tmpvar_17.x)
   + 
    (v_104.xyz * tmpvar_17.y)
  ) + (v_105.xyz * tmpvar_17.z)));
  worldNormal_5 = tmpvar_106;
  highp mat3 tmpvar_107;
  tmpvar_107[0] = _Object2World[0].xyz;
  tmpvar_107[1] = _Object2World[1].xyz;
  tmpvar_107[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_108;
  tmpvar_108 = normalize((tmpvar_107 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_108;
  lowp vec3 tmpvar_109;
  tmpvar_109 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_110;
  tmpvar_110 = (tmpvar_109 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_110;
  highp vec4 tmpvar_111;
  tmpvar_111.x = worldTangent_4.x;
  tmpvar_111.y = worldBinormal_3.x;
  tmpvar_111.z = worldNormal_5.x;
  tmpvar_111.w = tmpvar_102.x;
  highp vec4 tmpvar_112;
  tmpvar_112.x = worldTangent_4.y;
  tmpvar_112.y = worldBinormal_3.y;
  tmpvar_112.z = worldNormal_5.y;
  tmpvar_112.w = tmpvar_102.y;
  highp vec4 tmpvar_113;
  tmpvar_113.x = worldTangent_4.z;
  tmpvar_113.y = worldBinormal_3.z;
  tmpvar_113.z = worldNormal_5.z;
  tmpvar_113.w = tmpvar_102.z;
  lowp vec4 tmpvar_114;
  tmpvar_114.w = 1.0;
  tmpvar_114.xyz = worldNormal_5;
  mediump vec3 tmpvar_115;
  mediump vec4 normal_116;
  normal_116 = tmpvar_114;
  mediump vec3 x2_117;
  mediump vec4 tmpvar_118;
  tmpvar_118 = (normal_116.xyzz * normal_116.yzzx);
  x2_117.x = dot (unity_SHBr, tmpvar_118);
  x2_117.y = dot (unity_SHBg, tmpvar_118);
  x2_117.z = dot (unity_SHBb, tmpvar_118);
  tmpvar_115 = (x2_117 + (unity_SHC.xyz * (
    (normal_116.x * normal_116.x)
   - 
    (normal_116.y * normal_116.y)
  )));
  highp vec3 lightColor0_119;
  lightColor0_119 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_120;
  lightColor1_120 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_121;
  lightColor2_121 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_122;
  lightColor3_122 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_123;
  lightAttenSq_123 = unity_4LightAtten0;
  highp vec3 normal_124;
  normal_124 = worldNormal_5;
  highp vec4 tmpvar_125;
  tmpvar_125 = (unity_4LightPosX0 - tmpvar_102.x);
  highp vec4 tmpvar_126;
  tmpvar_126 = (unity_4LightPosY0 - tmpvar_102.y);
  highp vec4 tmpvar_127;
  tmpvar_127 = (unity_4LightPosZ0 - tmpvar_102.z);
  highp vec4 tmpvar_128;
  tmpvar_128 = (((tmpvar_125 * tmpvar_125) + (tmpvar_126 * tmpvar_126)) + (tmpvar_127 * tmpvar_127));
  highp vec4 tmpvar_129;
  tmpvar_129 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_125 * normal_124.x) + (tmpvar_126 * normal_124.y)) + (tmpvar_127 * normal_124.z))
   * 
    inversesqrt(tmpvar_128)
  )) * (1.0/((1.0 + 
    (tmpvar_128 * lightAttenSq_123)
  ))));
  highp vec3 tmpvar_130;
  tmpvar_130 = (tmpvar_115 + ((
    ((lightColor0_119 * tmpvar_129.x) + (lightColor1_120 * tmpvar_129.y))
   + 
    (lightColor2_121 * tmpvar_129.z)
  ) + (lightColor3_122 * tmpvar_129.w)));
  tmpvar_7 = tmpvar_130;
  highp vec4 tmpvar_131;
  tmpvar_131 = (unity_World2Shadow[0] * (_Object2World * tmpvar_16));
  tmpvar_8 = tmpvar_131;
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_111;
  xlv_TEXCOORD1 = tmpvar_112;
  xlv_TEXCOORD2 = tmpvar_113;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_18;
  mediump float tmpvar_19;
  tmpvar_19 = texture (_ShadowMapTexture, xlv_TEXCOORD6.xyz);
  lowp float tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump float tmpvar_21;
  tmpvar_21 = (_LightShadowData.x + (tmpvar_20 * (1.0 - _LightShadowData.x)));
  shadow_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_4.x = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_4.y = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_4.z = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_25;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_18;
  mediump vec3 normalWorld_26;
  normalWorld_26 = worldN_4;
  mediump vec3 tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = normalWorld_26;
  mediump vec3 x1_29;
  x1_29.x = dot (unity_SHAr, tmpvar_28);
  x1_29.y = dot (unity_SHAg, tmpvar_28);
  x1_29.z = dot (unity_SHAb, tmpvar_28);
  tmpvar_27 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_27;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_32 = tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_9 * tmpvar_27) * diff_32);
  c_31.xyz = tmpvar_34;
  c_31.w = tmpvar_10;
  c_30.w = c_31.w;
  mediump vec3 tmpvar_35;
  tmpvar_35 = (c_31.xyz + (tmpvar_9 * (xlv_TEXCOORD5 + x1_29)));
  c_30.xyz = tmpvar_35;
  c_5.xyz = c_30.xyz;
  c_5.w = 1.0;
  _glesFragData[0] = c_5;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_8;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  FinalPosition_13 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_14;
      highp float fAdherenceScale_21;
      highp vec3 tmpvar_22;
      tmpvar_22 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_23;
      tmpvar_23 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (tmpvar_23 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((tmpvar_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_23 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((tmpvar_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        (mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_24.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((tmpvar_22 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((tmpvar_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_21 = (1.0 - ((
        ((tmpvar_32.x * tmpvar_32.y) * tmpvar_32.x)
       * tmpvar_32.y) * _ST_WindTurbulences.x));
      fAdherenceScale_21 = (fAdherenceScale_21 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_11 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_21) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp vec3 tmpvar_35;
      tmpvar_35 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_36;
      tmpvar_36 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_37;
      highp float fAmount_38;
      highp float fTarget_39;
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.x = (tmpvar_36 + _glesMultiTexCoord0.w);
      tmpvar_40.y = ((tmpvar_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_40.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_39 = 1.0;
      fAmount_38 = tmpvar_42;
      if ((tmpvar_42 < 0.0)) {
        fTarget_39 = -1.0;
        fAmount_38 = -(tmpvar_42);
      };
      vPos_34 = (vPos_19 + ((tmpvar_35 * 
        (((mix (
          mix (tmpvar_42, fTarget_39, fAmount_38)
        , fTarget_39, fAmount_38) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_13 = vPos_19;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_43;
    vPos_43 = FinalPosition_13;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    vPos_43.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * (
      ((_ST_WindGlobal.y * (tmpvar_48.x + (tmpvar_48.y * tmpvar_48.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_44)));
    vPos_43 = (normalize(vPos_43) * fLength_45);
    FinalPosition_13 = vPos_43;
  };
  tmpvar_10.xyz = FinalPosition_13;
  highp vec4 tmpvar_50;
  tmpvar_50 = (glstate_matrix_mvp * tmpvar_10);
  highp vec4 o_51;
  highp vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_50 * 0.5);
  highp vec2 tmpvar_53;
  tmpvar_53.x = tmpvar_52.x;
  tmpvar_53.y = (tmpvar_52.y * _ProjectionParams.x);
  o_51.xy = (tmpvar_53 + tmpvar_52.w);
  o_51.zw = tmpvar_50.zw;
  highp vec3 tmpvar_54;
  tmpvar_54 = o_51.xyw;
  tmpvar_7 = tmpvar_54;
  highp vec2 tmpvar_55;
  tmpvar_55 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_55;
  tmpvar_4 = tmpvar_5;
  highp vec4 v_56;
  v_56.x = _World2Object[0].x;
  v_56.y = _World2Object[1].x;
  v_56.z = _World2Object[2].x;
  v_56.w = _World2Object[3].x;
  highp vec4 v_57;
  v_57.x = _World2Object[0].y;
  v_57.y = _World2Object[1].y;
  v_57.z = _World2Object[2].y;
  v_57.w = _World2Object[3].y;
  highp vec4 v_58;
  v_58.x = _World2Object[0].z;
  v_58.y = _World2Object[1].z;
  v_58.z = _World2Object[2].z;
  v_58.w = _World2Object[3].z;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(((
    (v_56.xyz * _glesNormal.x)
   + 
    (v_57.xyz * _glesNormal.y)
  ) + (v_58.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_59;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_60;
  tmpvar_60.w = 1.0;
  tmpvar_60.xyz = worldNormal_2;
  mediump vec4 normal_61;
  normal_61 = tmpvar_60;
  mediump vec3 x2_62;
  mediump vec4 tmpvar_63;
  tmpvar_63 = (normal_61.xyzz * normal_61.yzzx);
  x2_62.x = dot (unity_SHBr, tmpvar_63);
  x2_62.y = dot (unity_SHBg, tmpvar_63);
  x2_62.z = dot (unity_SHBb, tmpvar_63);
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = (x2_62 + (unity_SHC.xyz * (
    (normal_61.x * normal_61.x)
   - 
    (normal_61.y * normal_61.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  mediump float tmpvar_13;
  tmpvar_13 = fract(tmpvar_12.y);
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_13 * 0.0625) + unity_LODFade.y);
  projUV_11.y = tmpvar_14;
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_19;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_4;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_20;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_25 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.xyz = tmpvar_27;
  c_24.w = tmpvar_9;
  c_23.w = c_24.w;
  mediump vec3 tmpvar_28;
  tmpvar_28 = (c_24.xyz + (tmpvar_8 * (xlv_TEXCOORD5 + x1_22)));
  c_23.xyz = tmpvar_28;
  c_3.xyz = c_23.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_8;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  FinalPosition_13 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_14;
      highp float fAdherenceScale_21;
      highp vec3 tmpvar_22;
      tmpvar_22 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_23;
      tmpvar_23 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (tmpvar_23 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((tmpvar_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_23 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((tmpvar_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        (mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_24.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((tmpvar_22 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((tmpvar_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_21 = (1.0 - ((
        ((tmpvar_32.x * tmpvar_32.y) * tmpvar_32.x)
       * tmpvar_32.y) * _ST_WindTurbulences.x));
      fAdherenceScale_21 = (fAdherenceScale_21 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_11 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_21) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp vec3 tmpvar_35;
      tmpvar_35 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_36;
      tmpvar_36 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_37;
      highp float fAmount_38;
      highp float fTarget_39;
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.x = (tmpvar_36 + _glesMultiTexCoord0.w);
      tmpvar_40.y = ((tmpvar_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_40.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_39 = 1.0;
      fAmount_38 = tmpvar_42;
      if ((tmpvar_42 < 0.0)) {
        fTarget_39 = -1.0;
        fAmount_38 = -(tmpvar_42);
      };
      vPos_34 = (vPos_19 + ((tmpvar_35 * 
        (((mix (
          mix (tmpvar_42, fTarget_39, fAmount_38)
        , fTarget_39, fAmount_38) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_13 = vPos_19;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_43;
    vPos_43 = FinalPosition_13;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    vPos_43.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * (
      ((_ST_WindGlobal.y * (tmpvar_48.x + (tmpvar_48.y * tmpvar_48.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_44)));
    vPos_43 = (normalize(vPos_43) * fLength_45);
    FinalPosition_13 = vPos_43;
  };
  tmpvar_10.xyz = FinalPosition_13;
  highp vec4 tmpvar_50;
  tmpvar_50 = (glstate_matrix_mvp * tmpvar_10);
  highp vec4 o_51;
  highp vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_50 * 0.5);
  highp vec2 tmpvar_53;
  tmpvar_53.x = tmpvar_52.x;
  tmpvar_53.y = (tmpvar_52.y * _ProjectionParams.x);
  o_51.xy = (tmpvar_53 + tmpvar_52.w);
  o_51.zw = tmpvar_50.zw;
  highp vec3 tmpvar_54;
  tmpvar_54 = o_51.xyw;
  tmpvar_7 = tmpvar_54;
  highp vec2 tmpvar_55;
  tmpvar_55 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_55;
  tmpvar_4 = tmpvar_5;
  highp vec4 v_56;
  v_56.x = _World2Object[0].x;
  v_56.y = _World2Object[1].x;
  v_56.z = _World2Object[2].x;
  v_56.w = _World2Object[3].x;
  highp vec4 v_57;
  v_57.x = _World2Object[0].y;
  v_57.y = _World2Object[1].y;
  v_57.z = _World2Object[2].y;
  v_57.w = _World2Object[3].y;
  highp vec4 v_58;
  v_58.x = _World2Object[0].z;
  v_58.y = _World2Object[1].z;
  v_58.z = _World2Object[2].z;
  v_58.w = _World2Object[3].z;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(((
    (v_56.xyz * _glesNormal.x)
   + 
    (v_57.xyz * _glesNormal.y)
  ) + (v_58.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_59;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_60;
  tmpvar_60.w = 1.0;
  tmpvar_60.xyz = worldNormal_2;
  mediump vec4 normal_61;
  normal_61 = tmpvar_60;
  mediump vec3 x2_62;
  mediump vec4 tmpvar_63;
  tmpvar_63 = (normal_61.xyzz * normal_61.yzzx);
  x2_62.x = dot (unity_SHBr, tmpvar_63);
  x2_62.y = dot (unity_SHBg, tmpvar_63);
  x2_62.z = dot (unity_SHBb, tmpvar_63);
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = (x2_62 + (unity_SHC.xyz * (
    (normal_61.x * normal_61.x)
   - 
    (normal_61.y * normal_61.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  mediump float tmpvar_13;
  tmpvar_13 = fract(tmpvar_12.y);
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_13 * 0.0625) + unity_LODFade.y);
  projUV_11.y = tmpvar_14;
  lowp float x_15;
  x_15 = (texture (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_19;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_4;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_20;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_25 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.xyz = tmpvar_27;
  c_24.w = tmpvar_9;
  c_23.w = c_24.w;
  mediump vec3 tmpvar_28;
  tmpvar_28 = (c_24.xyz + (tmpvar_8 * (xlv_TEXCOORD5 + x1_22)));
  c_23.xyz = tmpvar_28;
  c_3.xyz = c_23.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_15;
      highp float fAdherenceScale_22;
      highp vec3 tmpvar_23;
      tmpvar_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_24;
      tmpvar_24 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (tmpvar_24 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((tmpvar_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_24 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((tmpvar_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        (mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_25.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((tmpvar_23 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((tmpvar_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((
        ((tmpvar_33.x * tmpvar_33.y) * tmpvar_33.x)
       * tmpvar_33.y) * _ST_WindTurbulences.x));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_12 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp vec3 tmpvar_36;
      tmpvar_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_37;
      tmpvar_37 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_38;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (tmpvar_37 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((tmpvar_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      vPos_35 = (vPos_20 + ((tmpvar_36 * 
        (((mix (
          mix (tmpvar_43, fTarget_40, fAmount_39)
        , fTarget_40, fAmount_39) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_14;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_47;
    tmpvar_47 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    vPos_44.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * (
      ((_ST_WindGlobal.y * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_45)));
    vPos_44 = (normalize(vPos_44) * fLength_46);
    FinalPosition_14 = vPos_44;
  };
  tmpvar_11.xyz = FinalPosition_14;
  highp vec4 tmpvar_51;
  tmpvar_51 = (glstate_matrix_mvp * tmpvar_11);
  highp vec4 o_52;
  highp vec4 tmpvar_53;
  tmpvar_53 = (tmpvar_51 * 0.5);
  highp vec2 tmpvar_54;
  tmpvar_54.x = tmpvar_53.x;
  tmpvar_54.y = (tmpvar_53.y * _ProjectionParams.x);
  o_52.xy = (tmpvar_54 + tmpvar_53.w);
  o_52.zw = tmpvar_51.zw;
  highp vec3 tmpvar_55;
  tmpvar_55 = o_52.xyw;
  tmpvar_8 = tmpvar_55;
  highp vec2 tmpvar_56;
  tmpvar_56 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_56;
  tmpvar_4 = tmpvar_6;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * _glesNormal.x)
   + 
    (v_58.xyz * _glesNormal.y)
  ) + (v_59.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_60;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_61;
  tmpvar_61.w = 1.0;
  tmpvar_61.xyz = worldNormal_2;
  mediump vec4 normal_62;
  normal_62 = tmpvar_61;
  mediump vec3 x2_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (normal_62.xyzz * normal_62.yzzx);
  x2_63.x = dot (unity_SHBr, tmpvar_64);
  x2_63.y = dot (unity_SHBg, tmpvar_64);
  x2_63.z = dot (unity_SHBb, tmpvar_64);
  highp vec4 tmpvar_65;
  tmpvar_65 = (unity_World2Shadow[0] * (_Object2World * tmpvar_11));
  tmpvar_5 = tmpvar_65;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = (x2_63 + (unity_SHC.xyz * (
    (normal_62.x * normal_62.x)
   - 
    (normal_62.y * normal_62.y)
  )));
  xlv_TEXCOORD6 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_19;
  lowp float tmpvar_20;
  mediump float dist_21;
  lowp float tmpvar_22;
  tmpvar_22 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x;
  dist_21 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (float((dist_21 > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_20 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_24;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_20;
  mediump vec3 normalWorld_25;
  normalWorld_25 = tmpvar_5;
  mediump vec3 tmpvar_26;
  mediump vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = normalWorld_25;
  mediump vec3 x1_28;
  x1_28.x = dot (unity_SHAr, tmpvar_27);
  x1_28.y = dot (unity_SHAg, tmpvar_27);
  x1_28.z = dot (unity_SHAb, tmpvar_27);
  tmpvar_26 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_26;
  lowp vec4 c_29;
  lowp vec4 c_30;
  lowp float diff_31;
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_31 = tmpvar_32;
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((tmpvar_9 * tmpvar_26) * diff_31);
  c_30.xyz = tmpvar_33;
  c_30.w = tmpvar_10;
  c_29.w = c_30.w;
  mediump vec3 tmpvar_34;
  tmpvar_34 = (c_30.xyz + (tmpvar_9 * (xlv_TEXCOORD5 + x1_28)));
  c_29.xyz = tmpvar_34;
  c_4.xyz = c_29.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_15;
      highp float fAdherenceScale_22;
      highp vec3 tmpvar_23;
      tmpvar_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_24;
      tmpvar_24 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (tmpvar_24 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((tmpvar_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_24 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((tmpvar_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        (mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_25.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((tmpvar_23 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((tmpvar_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((
        ((tmpvar_33.x * tmpvar_33.y) * tmpvar_33.x)
       * tmpvar_33.y) * _ST_WindTurbulences.x));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_12 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp vec3 tmpvar_36;
      tmpvar_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_37;
      tmpvar_37 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_38;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (tmpvar_37 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((tmpvar_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      vPos_35 = (vPos_20 + ((tmpvar_36 * 
        (((mix (
          mix (tmpvar_43, fTarget_40, fAmount_39)
        , fTarget_40, fAmount_39) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_14;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_47;
    tmpvar_47 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    vPos_44.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * (
      ((_ST_WindGlobal.y * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_45)));
    vPos_44 = (normalize(vPos_44) * fLength_46);
    FinalPosition_14 = vPos_44;
  };
  tmpvar_11.xyz = FinalPosition_14;
  highp vec4 tmpvar_51;
  tmpvar_51 = (glstate_matrix_mvp * tmpvar_11);
  highp vec4 o_52;
  highp vec4 tmpvar_53;
  tmpvar_53 = (tmpvar_51 * 0.5);
  highp vec2 tmpvar_54;
  tmpvar_54.x = tmpvar_53.x;
  tmpvar_54.y = (tmpvar_53.y * _ProjectionParams.x);
  o_52.xy = (tmpvar_54 + tmpvar_53.w);
  o_52.zw = tmpvar_51.zw;
  highp vec3 tmpvar_55;
  tmpvar_55 = o_52.xyw;
  tmpvar_8 = tmpvar_55;
  highp vec2 tmpvar_56;
  tmpvar_56 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_56;
  tmpvar_4 = tmpvar_6;
  highp vec3 tmpvar_57;
  tmpvar_57 = (_Object2World * tmpvar_11).xyz;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * _glesNormal.x)
   + 
    (v_59.xyz * _glesNormal.y)
  ) + (v_60.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_61;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_62;
  tmpvar_62.w = 1.0;
  tmpvar_62.xyz = worldNormal_2;
  mediump vec3 tmpvar_63;
  mediump vec4 normal_64;
  normal_64 = tmpvar_62;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  tmpvar_63 = (x2_65 + (unity_SHC.xyz * (
    (normal_64.x * normal_64.x)
   - 
    (normal_64.y * normal_64.y)
  )));
  highp vec3 lightColor0_67;
  lightColor0_67 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_68;
  lightColor1_68 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_69;
  lightColor2_69 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_70;
  lightColor3_70 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_71;
  lightAttenSq_71 = unity_4LightAtten0;
  highp vec3 normal_72;
  normal_72 = worldNormal_2;
  highp vec4 tmpvar_73;
  tmpvar_73 = (unity_4LightPosX0 - tmpvar_57.x);
  highp vec4 tmpvar_74;
  tmpvar_74 = (unity_4LightPosY0 - tmpvar_57.y);
  highp vec4 tmpvar_75;
  tmpvar_75 = (unity_4LightPosZ0 - tmpvar_57.z);
  highp vec4 tmpvar_76;
  tmpvar_76 = (((tmpvar_73 * tmpvar_73) + (tmpvar_74 * tmpvar_74)) + (tmpvar_75 * tmpvar_75));
  highp vec4 tmpvar_77;
  tmpvar_77 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_73 * normal_72.x) + (tmpvar_74 * normal_72.y)) + (tmpvar_75 * normal_72.z))
   * 
    inversesqrt(tmpvar_76)
  )) * (1.0/((1.0 + 
    (tmpvar_76 * lightAttenSq_71)
  ))));
  highp vec3 tmpvar_78;
  tmpvar_78 = (tmpvar_63 + ((
    ((lightColor0_67 * tmpvar_77.x) + (lightColor1_68 * tmpvar_77.y))
   + 
    (lightColor2_69 * tmpvar_77.z)
  ) + (lightColor3_70 * tmpvar_77.w)));
  tmpvar_5 = tmpvar_78;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_57;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  mediump float tmpvar_13;
  tmpvar_13 = fract(tmpvar_12.y);
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_13 * 0.0625) + unity_LODFade.y);
  projUV_11.y = tmpvar_14;
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_19;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_4;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_20;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_25 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.xyz = tmpvar_27;
  c_24.w = tmpvar_9;
  c_23.w = c_24.w;
  mediump vec3 tmpvar_28;
  tmpvar_28 = (c_24.xyz + (tmpvar_8 * (xlv_TEXCOORD5 + x1_22)));
  c_23.xyz = tmpvar_28;
  c_3.xyz = c_23.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_15;
      highp float fAdherenceScale_22;
      highp vec3 tmpvar_23;
      tmpvar_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_24;
      tmpvar_24 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (tmpvar_24 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((tmpvar_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_24 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((tmpvar_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        (mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_25.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((tmpvar_23 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((tmpvar_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((
        ((tmpvar_33.x * tmpvar_33.y) * tmpvar_33.x)
       * tmpvar_33.y) * _ST_WindTurbulences.x));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_12 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp vec3 tmpvar_36;
      tmpvar_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_37;
      tmpvar_37 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_38;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (tmpvar_37 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((tmpvar_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      vPos_35 = (vPos_20 + ((tmpvar_36 * 
        (((mix (
          mix (tmpvar_43, fTarget_40, fAmount_39)
        , fTarget_40, fAmount_39) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_14;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_47;
    tmpvar_47 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    vPos_44.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * (
      ((_ST_WindGlobal.y * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_45)));
    vPos_44 = (normalize(vPos_44) * fLength_46);
    FinalPosition_14 = vPos_44;
  };
  tmpvar_11.xyz = FinalPosition_14;
  highp vec4 tmpvar_51;
  tmpvar_51 = (glstate_matrix_mvp * tmpvar_11);
  highp vec4 o_52;
  highp vec4 tmpvar_53;
  tmpvar_53 = (tmpvar_51 * 0.5);
  highp vec2 tmpvar_54;
  tmpvar_54.x = tmpvar_53.x;
  tmpvar_54.y = (tmpvar_53.y * _ProjectionParams.x);
  o_52.xy = (tmpvar_54 + tmpvar_53.w);
  o_52.zw = tmpvar_51.zw;
  highp vec3 tmpvar_55;
  tmpvar_55 = o_52.xyw;
  tmpvar_8 = tmpvar_55;
  highp vec2 tmpvar_56;
  tmpvar_56 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_56;
  tmpvar_4 = tmpvar_6;
  highp vec3 tmpvar_57;
  tmpvar_57 = (_Object2World * tmpvar_11).xyz;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * _glesNormal.x)
   + 
    (v_59.xyz * _glesNormal.y)
  ) + (v_60.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_61;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_62;
  tmpvar_62.w = 1.0;
  tmpvar_62.xyz = worldNormal_2;
  mediump vec3 tmpvar_63;
  mediump vec4 normal_64;
  normal_64 = tmpvar_62;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  tmpvar_63 = (x2_65 + (unity_SHC.xyz * (
    (normal_64.x * normal_64.x)
   - 
    (normal_64.y * normal_64.y)
  )));
  highp vec3 lightColor0_67;
  lightColor0_67 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_68;
  lightColor1_68 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_69;
  lightColor2_69 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_70;
  lightColor3_70 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_71;
  lightAttenSq_71 = unity_4LightAtten0;
  highp vec3 normal_72;
  normal_72 = worldNormal_2;
  highp vec4 tmpvar_73;
  tmpvar_73 = (unity_4LightPosX0 - tmpvar_57.x);
  highp vec4 tmpvar_74;
  tmpvar_74 = (unity_4LightPosY0 - tmpvar_57.y);
  highp vec4 tmpvar_75;
  tmpvar_75 = (unity_4LightPosZ0 - tmpvar_57.z);
  highp vec4 tmpvar_76;
  tmpvar_76 = (((tmpvar_73 * tmpvar_73) + (tmpvar_74 * tmpvar_74)) + (tmpvar_75 * tmpvar_75));
  highp vec4 tmpvar_77;
  tmpvar_77 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_73 * normal_72.x) + (tmpvar_74 * normal_72.y)) + (tmpvar_75 * normal_72.z))
   * 
    inversesqrt(tmpvar_76)
  )) * (1.0/((1.0 + 
    (tmpvar_76 * lightAttenSq_71)
  ))));
  highp vec3 tmpvar_78;
  tmpvar_78 = (tmpvar_63 + ((
    ((lightColor0_67 * tmpvar_77.x) + (lightColor1_68 * tmpvar_77.y))
   + 
    (lightColor2_69 * tmpvar_77.z)
  ) + (lightColor3_70 * tmpvar_77.w)));
  tmpvar_5 = tmpvar_78;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_57;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_5;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  mediump float tmpvar_13;
  tmpvar_13 = fract(tmpvar_12.y);
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_13 * 0.0625) + unity_LODFade.y);
  projUV_11.y = tmpvar_14;
  lowp float x_15;
  x_15 = (texture (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_19;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_4;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_20;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_25 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.xyz = tmpvar_27;
  c_24.w = tmpvar_9;
  c_23.w = c_24.w;
  mediump vec3 tmpvar_28;
  tmpvar_28 = (c_24.xyz + (tmpvar_8 * (xlv_TEXCOORD5 + x1_22)));
  c_23.xyz = tmpvar_28;
  c_3.xyz = c_23.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_16;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_16;
      highp float fAdherenceScale_23;
      highp vec3 tmpvar_24;
      tmpvar_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_25;
      tmpvar_25 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (tmpvar_25 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((tmpvar_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_25 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((tmpvar_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        (mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_26.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (_glesVertex.xyz + ((tmpvar_24 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((tmpvar_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((
        ((tmpvar_34.x * tmpvar_34.y) * tmpvar_34.x)
       * tmpvar_34.y) * _ST_WindTurbulences.x));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_13 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp vec3 tmpvar_37;
      tmpvar_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_38;
      tmpvar_38 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_39;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (tmpvar_38 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((tmpvar_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      vPos_36 = (vPos_21 + ((tmpvar_37 * 
        (((mix (
          mix (tmpvar_44, fTarget_41, fAmount_40)
        , fTarget_41, fAmount_40) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_15 = vPos_21;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_50.x + (tmpvar_50.y * tmpvar_50.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_46)));
    vPos_45 = (normalize(vPos_45) * fLength_47);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  highp vec4 tmpvar_52;
  tmpvar_52 = (glstate_matrix_mvp * tmpvar_12);
  highp vec4 o_53;
  highp vec4 tmpvar_54;
  tmpvar_54 = (tmpvar_52 * 0.5);
  highp vec2 tmpvar_55;
  tmpvar_55.x = tmpvar_54.x;
  tmpvar_55.y = (tmpvar_54.y * _ProjectionParams.x);
  o_53.xy = (tmpvar_55 + tmpvar_54.w);
  o_53.zw = tmpvar_52.zw;
  highp vec3 tmpvar_56;
  tmpvar_56 = o_53.xyw;
  tmpvar_9 = tmpvar_56;
  highp vec2 tmpvar_57;
  tmpvar_57 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_57;
  tmpvar_4 = tmpvar_7;
  highp vec3 tmpvar_58;
  tmpvar_58 = (_Object2World * tmpvar_12).xyz;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * _glesNormal.x)
   + 
    (v_60.xyz * _glesNormal.y)
  ) + (v_61.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_62;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_2;
  mediump vec3 tmpvar_64;
  mediump vec4 normal_65;
  normal_65 = tmpvar_63;
  mediump vec3 x2_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (normal_65.xyzz * normal_65.yzzx);
  x2_66.x = dot (unity_SHBr, tmpvar_67);
  x2_66.y = dot (unity_SHBg, tmpvar_67);
  x2_66.z = dot (unity_SHBb, tmpvar_67);
  tmpvar_64 = (x2_66 + (unity_SHC.xyz * (
    (normal_65.x * normal_65.x)
   - 
    (normal_65.y * normal_65.y)
  )));
  highp vec3 lightColor0_68;
  lightColor0_68 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_69;
  lightColor1_69 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_70;
  lightColor2_70 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_71;
  lightColor3_71 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_72;
  lightAttenSq_72 = unity_4LightAtten0;
  highp vec3 normal_73;
  normal_73 = worldNormal_2;
  highp vec4 tmpvar_74;
  tmpvar_74 = (unity_4LightPosX0 - tmpvar_58.x);
  highp vec4 tmpvar_75;
  tmpvar_75 = (unity_4LightPosY0 - tmpvar_58.y);
  highp vec4 tmpvar_76;
  tmpvar_76 = (unity_4LightPosZ0 - tmpvar_58.z);
  highp vec4 tmpvar_77;
  tmpvar_77 = (((tmpvar_74 * tmpvar_74) + (tmpvar_75 * tmpvar_75)) + (tmpvar_76 * tmpvar_76));
  highp vec4 tmpvar_78;
  tmpvar_78 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_74 * normal_73.x) + (tmpvar_75 * normal_73.y)) + (tmpvar_76 * normal_73.z))
   * 
    inversesqrt(tmpvar_77)
  )) * (1.0/((1.0 + 
    (tmpvar_77 * lightAttenSq_72)
  ))));
  highp vec3 tmpvar_79;
  tmpvar_79 = (tmpvar_64 + ((
    ((lightColor0_68 * tmpvar_78.x) + (lightColor1_69 * tmpvar_78.y))
   + 
    (lightColor2_70 * tmpvar_78.z)
  ) + (lightColor3_71 * tmpvar_78.w)));
  tmpvar_5 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = (unity_World2Shadow[0] * (_Object2World * tmpvar_12));
  tmpvar_6 = tmpvar_80;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_58;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_19;
  lowp float tmpvar_20;
  mediump float dist_21;
  lowp float tmpvar_22;
  tmpvar_22 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x;
  dist_21 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (float((dist_21 > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_20 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_24;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_20;
  mediump vec3 normalWorld_25;
  normalWorld_25 = tmpvar_5;
  mediump vec3 tmpvar_26;
  mediump vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = normalWorld_25;
  mediump vec3 x1_28;
  x1_28.x = dot (unity_SHAr, tmpvar_27);
  x1_28.y = dot (unity_SHAg, tmpvar_27);
  x1_28.z = dot (unity_SHAb, tmpvar_27);
  tmpvar_26 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_26;
  lowp vec4 c_29;
  lowp vec4 c_30;
  lowp float diff_31;
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_31 = tmpvar_32;
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((tmpvar_9 * tmpvar_26) * diff_31);
  c_30.xyz = tmpvar_33;
  c_30.w = tmpvar_10;
  c_29.w = c_30.w;
  mediump vec3 tmpvar_34;
  tmpvar_34 = (c_30.xyz + (tmpvar_9 * (xlv_TEXCOORD5 + x1_28)));
  c_29.xyz = tmpvar_34;
  c_4.xyz = c_29.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_15;
      highp float fAdherenceScale_22;
      highp vec3 tmpvar_23;
      tmpvar_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_24;
      tmpvar_24 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (tmpvar_24 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((tmpvar_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_24 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((tmpvar_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        (mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_25.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((tmpvar_23 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((tmpvar_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((
        ((tmpvar_33.x * tmpvar_33.y) * tmpvar_33.x)
       * tmpvar_33.y) * _ST_WindTurbulences.x));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_12 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp vec3 tmpvar_36;
      tmpvar_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_37;
      tmpvar_37 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_38;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (tmpvar_37 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((tmpvar_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      vPos_35 = (vPos_20 + ((tmpvar_36 * 
        (((mix (
          mix (tmpvar_43, fTarget_40, fAmount_39)
        , fTarget_40, fAmount_39) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_14;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_47;
    tmpvar_47 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    vPos_44.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * (
      ((_ST_WindGlobal.y * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_45)));
    vPos_44 = (normalize(vPos_44) * fLength_46);
    FinalPosition_14 = vPos_44;
  };
  tmpvar_11.xyz = FinalPosition_14;
  highp vec4 tmpvar_51;
  tmpvar_51 = (glstate_matrix_mvp * tmpvar_11);
  highp vec4 o_52;
  highp vec4 tmpvar_53;
  tmpvar_53 = (tmpvar_51 * 0.5);
  highp vec2 tmpvar_54;
  tmpvar_54.x = tmpvar_53.x;
  tmpvar_54.y = (tmpvar_53.y * _ProjectionParams.x);
  o_52.xy = (tmpvar_54 + tmpvar_53.w);
  o_52.zw = tmpvar_51.zw;
  highp vec3 tmpvar_55;
  tmpvar_55 = o_52.xyw;
  tmpvar_8 = tmpvar_55;
  highp vec2 tmpvar_56;
  tmpvar_56 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_56;
  tmpvar_4 = tmpvar_6;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * _glesNormal.x)
   + 
    (v_58.xyz * _glesNormal.y)
  ) + (v_59.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_60;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_61;
  tmpvar_61.w = 1.0;
  tmpvar_61.xyz = worldNormal_2;
  mediump vec4 normal_62;
  normal_62 = tmpvar_61;
  mediump vec3 x2_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (normal_62.xyzz * normal_62.yzzx);
  x2_63.x = dot (unity_SHBr, tmpvar_64);
  x2_63.y = dot (unity_SHBg, tmpvar_64);
  x2_63.z = dot (unity_SHBb, tmpvar_64);
  highp vec4 tmpvar_65;
  tmpvar_65 = (unity_World2Shadow[0] * (_Object2World * tmpvar_11));
  tmpvar_5 = tmpvar_65;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = (x2_63 + (unity_SHC.xyz * (
    (normal_62.x * normal_62.x)
   - 
    (normal_62.y * normal_62.y)
  )));
  xlv_TEXCOORD6 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_19;
  lowp float shadow_20;
  lowp float tmpvar_21;
  tmpvar_21 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz);
  mediump float tmpvar_22;
  tmpvar_22 = (_LightShadowData.x + (tmpvar_21 * (1.0 - _LightShadowData.x)));
  shadow_20 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_23;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_20;
  mediump vec3 normalWorld_24;
  normalWorld_24 = tmpvar_5;
  mediump vec3 tmpvar_25;
  mediump vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = normalWorld_24;
  mediump vec3 x1_27;
  x1_27.x = dot (unity_SHAr, tmpvar_26);
  x1_27.y = dot (unity_SHAg, tmpvar_26);
  x1_27.z = dot (unity_SHAb, tmpvar_26);
  tmpvar_25 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_25;
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_30 = tmpvar_31;
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tmpvar_9 * tmpvar_25) * diff_30);
  c_29.xyz = tmpvar_32;
  c_29.w = tmpvar_10;
  c_28.w = c_29.w;
  mediump vec3 tmpvar_33;
  tmpvar_33 = (c_29.xyz + (tmpvar_9 * (xlv_TEXCOORD5 + x1_27)));
  c_28.xyz = tmpvar_33;
  c_4.xyz = c_28.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_15;
      highp float fAdherenceScale_22;
      highp vec3 tmpvar_23;
      tmpvar_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_24;
      tmpvar_24 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (tmpvar_24 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((tmpvar_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_24 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((tmpvar_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        (mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_25.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((tmpvar_23 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((tmpvar_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((
        ((tmpvar_33.x * tmpvar_33.y) * tmpvar_33.x)
       * tmpvar_33.y) * _ST_WindTurbulences.x));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_12 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp vec3 tmpvar_36;
      tmpvar_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_37;
      tmpvar_37 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_38;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (tmpvar_37 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((tmpvar_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      vPos_35 = (vPos_20 + ((tmpvar_36 * 
        (((mix (
          mix (tmpvar_43, fTarget_40, fAmount_39)
        , fTarget_40, fAmount_39) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_14;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_47;
    tmpvar_47 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    vPos_44.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * (
      ((_ST_WindGlobal.y * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_45)));
    vPos_44 = (normalize(vPos_44) * fLength_46);
    FinalPosition_14 = vPos_44;
  };
  tmpvar_11.xyz = FinalPosition_14;
  highp vec4 tmpvar_51;
  tmpvar_51 = (glstate_matrix_mvp * tmpvar_11);
  highp vec4 o_52;
  highp vec4 tmpvar_53;
  tmpvar_53 = (tmpvar_51 * 0.5);
  highp vec2 tmpvar_54;
  tmpvar_54.x = tmpvar_53.x;
  tmpvar_54.y = (tmpvar_53.y * _ProjectionParams.x);
  o_52.xy = (tmpvar_54 + tmpvar_53.w);
  o_52.zw = tmpvar_51.zw;
  highp vec3 tmpvar_55;
  tmpvar_55 = o_52.xyw;
  tmpvar_8 = tmpvar_55;
  highp vec2 tmpvar_56;
  tmpvar_56 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_56;
  tmpvar_4 = tmpvar_6;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * _glesNormal.x)
   + 
    (v_58.xyz * _glesNormal.y)
  ) + (v_59.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_60;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_61;
  tmpvar_61.w = 1.0;
  tmpvar_61.xyz = worldNormal_2;
  mediump vec4 normal_62;
  normal_62 = tmpvar_61;
  mediump vec3 x2_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (normal_62.xyzz * normal_62.yzzx);
  x2_63.x = dot (unity_SHBr, tmpvar_64);
  x2_63.y = dot (unity_SHBg, tmpvar_64);
  x2_63.z = dot (unity_SHBb, tmpvar_64);
  highp vec4 tmpvar_65;
  tmpvar_65 = (unity_World2Shadow[0] * (_Object2World * tmpvar_11));
  tmpvar_5 = tmpvar_65;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = (x2_63 + (unity_SHC.xyz * (
    (normal_62.x * normal_62.x)
   - 
    (normal_62.y * normal_62.y)
  )));
  xlv_TEXCOORD6 = tmpvar_5;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_19;
  lowp float shadow_20;
  mediump float tmpvar_21;
  tmpvar_21 = texture (_ShadowMapTexture, xlv_TEXCOORD6.xyz);
  lowp float tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump float tmpvar_23;
  tmpvar_23 = (_LightShadowData.x + (tmpvar_22 * (1.0 - _LightShadowData.x)));
  shadow_20 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_24;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_20;
  mediump vec3 normalWorld_25;
  normalWorld_25 = tmpvar_5;
  mediump vec3 tmpvar_26;
  mediump vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = normalWorld_25;
  mediump vec3 x1_28;
  x1_28.x = dot (unity_SHAr, tmpvar_27);
  x1_28.y = dot (unity_SHAg, tmpvar_27);
  x1_28.z = dot (unity_SHAb, tmpvar_27);
  tmpvar_26 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_26;
  lowp vec4 c_29;
  lowp vec4 c_30;
  lowp float diff_31;
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_31 = tmpvar_32;
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((tmpvar_9 * tmpvar_26) * diff_31);
  c_30.xyz = tmpvar_33;
  c_30.w = tmpvar_10;
  c_29.w = c_30.w;
  mediump vec3 tmpvar_34;
  tmpvar_34 = (c_30.xyz + (tmpvar_9 * (xlv_TEXCOORD5 + x1_28)));
  c_29.xyz = tmpvar_34;
  c_4.xyz = c_29.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_16;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_16;
      highp float fAdherenceScale_23;
      highp vec3 tmpvar_24;
      tmpvar_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_25;
      tmpvar_25 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (tmpvar_25 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((tmpvar_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_25 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((tmpvar_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        (mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_26.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (_glesVertex.xyz + ((tmpvar_24 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((tmpvar_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((
        ((tmpvar_34.x * tmpvar_34.y) * tmpvar_34.x)
       * tmpvar_34.y) * _ST_WindTurbulences.x));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_13 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp vec3 tmpvar_37;
      tmpvar_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_38;
      tmpvar_38 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_39;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (tmpvar_38 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((tmpvar_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      vPos_36 = (vPos_21 + ((tmpvar_37 * 
        (((mix (
          mix (tmpvar_44, fTarget_41, fAmount_40)
        , fTarget_41, fAmount_40) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_15 = vPos_21;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_50.x + (tmpvar_50.y * tmpvar_50.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_46)));
    vPos_45 = (normalize(vPos_45) * fLength_47);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  highp vec4 tmpvar_52;
  tmpvar_52 = (glstate_matrix_mvp * tmpvar_12);
  highp vec4 o_53;
  highp vec4 tmpvar_54;
  tmpvar_54 = (tmpvar_52 * 0.5);
  highp vec2 tmpvar_55;
  tmpvar_55.x = tmpvar_54.x;
  tmpvar_55.y = (tmpvar_54.y * _ProjectionParams.x);
  o_53.xy = (tmpvar_55 + tmpvar_54.w);
  o_53.zw = tmpvar_52.zw;
  highp vec3 tmpvar_56;
  tmpvar_56 = o_53.xyw;
  tmpvar_9 = tmpvar_56;
  highp vec2 tmpvar_57;
  tmpvar_57 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_57;
  tmpvar_4 = tmpvar_7;
  highp vec3 tmpvar_58;
  tmpvar_58 = (_Object2World * tmpvar_12).xyz;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * _glesNormal.x)
   + 
    (v_60.xyz * _glesNormal.y)
  ) + (v_61.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_62;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_2;
  mediump vec3 tmpvar_64;
  mediump vec4 normal_65;
  normal_65 = tmpvar_63;
  mediump vec3 x2_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (normal_65.xyzz * normal_65.yzzx);
  x2_66.x = dot (unity_SHBr, tmpvar_67);
  x2_66.y = dot (unity_SHBg, tmpvar_67);
  x2_66.z = dot (unity_SHBb, tmpvar_67);
  tmpvar_64 = (x2_66 + (unity_SHC.xyz * (
    (normal_65.x * normal_65.x)
   - 
    (normal_65.y * normal_65.y)
  )));
  highp vec3 lightColor0_68;
  lightColor0_68 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_69;
  lightColor1_69 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_70;
  lightColor2_70 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_71;
  lightColor3_71 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_72;
  lightAttenSq_72 = unity_4LightAtten0;
  highp vec3 normal_73;
  normal_73 = worldNormal_2;
  highp vec4 tmpvar_74;
  tmpvar_74 = (unity_4LightPosX0 - tmpvar_58.x);
  highp vec4 tmpvar_75;
  tmpvar_75 = (unity_4LightPosY0 - tmpvar_58.y);
  highp vec4 tmpvar_76;
  tmpvar_76 = (unity_4LightPosZ0 - tmpvar_58.z);
  highp vec4 tmpvar_77;
  tmpvar_77 = (((tmpvar_74 * tmpvar_74) + (tmpvar_75 * tmpvar_75)) + (tmpvar_76 * tmpvar_76));
  highp vec4 tmpvar_78;
  tmpvar_78 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_74 * normal_73.x) + (tmpvar_75 * normal_73.y)) + (tmpvar_76 * normal_73.z))
   * 
    inversesqrt(tmpvar_77)
  )) * (1.0/((1.0 + 
    (tmpvar_77 * lightAttenSq_72)
  ))));
  highp vec3 tmpvar_79;
  tmpvar_79 = (tmpvar_64 + ((
    ((lightColor0_68 * tmpvar_78.x) + (lightColor1_69 * tmpvar_78.y))
   + 
    (lightColor2_70 * tmpvar_78.z)
  ) + (lightColor3_71 * tmpvar_78.w)));
  tmpvar_5 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = (unity_World2Shadow[0] * (_Object2World * tmpvar_12));
  tmpvar_6 = tmpvar_80;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_58;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_19;
  lowp float shadow_20;
  lowp float tmpvar_21;
  tmpvar_21 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz);
  mediump float tmpvar_22;
  tmpvar_22 = (_LightShadowData.x + (tmpvar_21 * (1.0 - _LightShadowData.x)));
  shadow_20 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_23;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_20;
  mediump vec3 normalWorld_24;
  normalWorld_24 = tmpvar_5;
  mediump vec3 tmpvar_25;
  mediump vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = normalWorld_24;
  mediump vec3 x1_27;
  x1_27.x = dot (unity_SHAr, tmpvar_26);
  x1_27.y = dot (unity_SHAg, tmpvar_26);
  x1_27.z = dot (unity_SHAb, tmpvar_26);
  tmpvar_25 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_25;
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_30 = tmpvar_31;
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tmpvar_9 * tmpvar_25) * diff_30);
  c_29.xyz = tmpvar_32;
  c_29.w = tmpvar_10;
  c_28.w = c_29.w;
  mediump vec3 tmpvar_33;
  tmpvar_33 = (c_29.xyz + (tmpvar_9 * (xlv_TEXCOORD5 + x1_27)));
  c_28.xyz = tmpvar_33;
  c_4.xyz = c_28.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_16;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_16;
      highp float fAdherenceScale_23;
      highp vec3 tmpvar_24;
      tmpvar_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_25;
      tmpvar_25 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (tmpvar_25 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((tmpvar_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_25 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((tmpvar_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        (mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_26.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (_glesVertex.xyz + ((tmpvar_24 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((tmpvar_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((
        ((tmpvar_34.x * tmpvar_34.y) * tmpvar_34.x)
       * tmpvar_34.y) * _ST_WindTurbulences.x));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_13 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp vec3 tmpvar_37;
      tmpvar_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_38;
      tmpvar_38 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_39;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (tmpvar_38 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((tmpvar_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      vPos_36 = (vPos_21 + ((tmpvar_37 * 
        (((mix (
          mix (tmpvar_44, fTarget_41, fAmount_40)
        , fTarget_41, fAmount_40) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_15 = vPos_21;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_50.x + (tmpvar_50.y * tmpvar_50.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_46)));
    vPos_45 = (normalize(vPos_45) * fLength_47);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  highp vec4 tmpvar_52;
  tmpvar_52 = (glstate_matrix_mvp * tmpvar_12);
  highp vec4 o_53;
  highp vec4 tmpvar_54;
  tmpvar_54 = (tmpvar_52 * 0.5);
  highp vec2 tmpvar_55;
  tmpvar_55.x = tmpvar_54.x;
  tmpvar_55.y = (tmpvar_54.y * _ProjectionParams.x);
  o_53.xy = (tmpvar_55 + tmpvar_54.w);
  o_53.zw = tmpvar_52.zw;
  highp vec3 tmpvar_56;
  tmpvar_56 = o_53.xyw;
  tmpvar_9 = tmpvar_56;
  highp vec2 tmpvar_57;
  tmpvar_57 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_57;
  tmpvar_4 = tmpvar_7;
  highp vec3 tmpvar_58;
  tmpvar_58 = (_Object2World * tmpvar_12).xyz;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * _glesNormal.x)
   + 
    (v_60.xyz * _glesNormal.y)
  ) + (v_61.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_62;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_2;
  mediump vec3 tmpvar_64;
  mediump vec4 normal_65;
  normal_65 = tmpvar_63;
  mediump vec3 x2_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (normal_65.xyzz * normal_65.yzzx);
  x2_66.x = dot (unity_SHBr, tmpvar_67);
  x2_66.y = dot (unity_SHBg, tmpvar_67);
  x2_66.z = dot (unity_SHBb, tmpvar_67);
  tmpvar_64 = (x2_66 + (unity_SHC.xyz * (
    (normal_65.x * normal_65.x)
   - 
    (normal_65.y * normal_65.y)
  )));
  highp vec3 lightColor0_68;
  lightColor0_68 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_69;
  lightColor1_69 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_70;
  lightColor2_70 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_71;
  lightColor3_71 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_72;
  lightAttenSq_72 = unity_4LightAtten0;
  highp vec3 normal_73;
  normal_73 = worldNormal_2;
  highp vec4 tmpvar_74;
  tmpvar_74 = (unity_4LightPosX0 - tmpvar_58.x);
  highp vec4 tmpvar_75;
  tmpvar_75 = (unity_4LightPosY0 - tmpvar_58.y);
  highp vec4 tmpvar_76;
  tmpvar_76 = (unity_4LightPosZ0 - tmpvar_58.z);
  highp vec4 tmpvar_77;
  tmpvar_77 = (((tmpvar_74 * tmpvar_74) + (tmpvar_75 * tmpvar_75)) + (tmpvar_76 * tmpvar_76));
  highp vec4 tmpvar_78;
  tmpvar_78 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_74 * normal_73.x) + (tmpvar_75 * normal_73.y)) + (tmpvar_76 * normal_73.z))
   * 
    inversesqrt(tmpvar_77)
  )) * (1.0/((1.0 + 
    (tmpvar_77 * lightAttenSq_72)
  ))));
  highp vec3 tmpvar_79;
  tmpvar_79 = (tmpvar_64 + ((
    ((lightColor0_68 * tmpvar_78.x) + (lightColor1_69 * tmpvar_78.y))
   + 
    (lightColor2_70 * tmpvar_78.z)
  ) + (lightColor3_71 * tmpvar_78.w)));
  tmpvar_5 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = (unity_World2Shadow[0] * (_Object2World * tmpvar_12));
  tmpvar_6 = tmpvar_80;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_58;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = tmpvar_6;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_19;
  lowp float shadow_20;
  mediump float tmpvar_21;
  tmpvar_21 = texture (_ShadowMapTexture, xlv_TEXCOORD6.xyz);
  lowp float tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump float tmpvar_23;
  tmpvar_23 = (_LightShadowData.x + (tmpvar_22 * (1.0 - _LightShadowData.x)));
  shadow_20 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_24;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_20;
  mediump vec3 normalWorld_25;
  normalWorld_25 = tmpvar_5;
  mediump vec3 tmpvar_26;
  mediump vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = normalWorld_25;
  mediump vec3 x1_28;
  x1_28.x = dot (unity_SHAr, tmpvar_27);
  x1_28.y = dot (unity_SHAg, tmpvar_27);
  x1_28.z = dot (unity_SHAb, tmpvar_27);
  tmpvar_26 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_26;
  lowp vec4 c_29;
  lowp vec4 c_30;
  lowp float diff_31;
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_31 = tmpvar_32;
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((tmpvar_9 * tmpvar_26) * diff_31);
  c_30.xyz = tmpvar_33;
  c_30.w = tmpvar_10;
  c_29.w = c_30.w;
  mediump vec3 tmpvar_34;
  tmpvar_34 = (c_30.xyz + (tmpvar_9 * (xlv_TEXCOORD5 + x1_28)));
  c_29.xyz = tmpvar_34;
  c_4.xyz = c_29.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_8;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_9;
  highp float cse_10;
  cse_10 = _Object2World[3].x;
  highp float cse_11;
  cse_11 = _Object2World[3].y;
  highp float tmpvar_12;
  tmpvar_12 = clamp (((
    fract(((cse_10 + cse_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_17;
      highp float fAdherenceScale_23;
      highp vec3 tmpvar_24;
      tmpvar_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_25;
      tmpvar_25 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (tmpvar_25 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((tmpvar_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_25 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((tmpvar_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        (mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_26.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (_glesVertex.xyz + ((tmpvar_24 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((tmpvar_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((
        ((tmpvar_34.x * tmpvar_34.y) * tmpvar_34.x)
       * tmpvar_34.y) * _ST_WindTurbulences.x));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_14 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp vec3 tmpvar_37;
      tmpvar_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_38;
      tmpvar_38 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_39;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (tmpvar_38 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((tmpvar_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      vPos_36 = (vPos_21 + ((tmpvar_37 * 
        (((mix (
          mix (tmpvar_44, fTarget_41, fAmount_40)
        , fTarget_41, fAmount_40) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_16;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (cse_10 + _ST_WindGlobal.x);
    tmpvar_49.y = (cse_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    vPos_45.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_50.x + (tmpvar_50.y * tmpvar_50.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_46)));
    vPos_45 = (normalize(vPos_45) * fLength_47);
    FinalPosition_16 = vPos_45;
  };
  tmpvar_13.xyz = FinalPosition_16;
  highp vec4 tmpvar_52;
  tmpvar_52 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_53;
  highp vec4 tmpvar_54;
  tmpvar_54 = (tmpvar_52 * 0.5);
  highp vec2 tmpvar_55;
  tmpvar_55.x = tmpvar_54.x;
  tmpvar_55.y = (tmpvar_54.y * _ProjectionParams.x);
  o_53.xy = (tmpvar_55 + tmpvar_54.w);
  o_53.zw = tmpvar_52.zw;
  highp vec3 tmpvar_56;
  tmpvar_56 = o_53.xyw;
  tmpvar_7 = tmpvar_56;
  highp vec2 tmpvar_57;
  tmpvar_57 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_57;
  tmpvar_4 = tmpvar_5;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * _glesNormal.x)
   + 
    (v_59.xyz * _glesNormal.y)
  ) + (v_60.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_61;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_62;
  tmpvar_62.w = 1.0;
  tmpvar_62.xyz = worldNormal_2;
  mediump vec4 normal_63;
  normal_63 = tmpvar_62;
  mediump vec3 x2_64;
  mediump vec4 tmpvar_65;
  tmpvar_65 = (normal_63.xyzz * normal_63.yzzx);
  x2_64.x = dot (unity_SHBr, tmpvar_65);
  x2_64.y = dot (unity_SHBg, tmpvar_65);
  x2_64.z = dot (unity_SHBb, tmpvar_65);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = (x2_64 + (unity_SHC.xyz * (
    (normal_63.x * normal_63.x)
   - 
    (normal_63.y * normal_63.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  mediump float tmpvar_13;
  tmpvar_13 = fract(tmpvar_12.y);
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_13 * 0.0625) + unity_LODFade.y);
  projUV_11.y = tmpvar_14;
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_18 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_19;
  tmpvar_19 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_20;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_21;
  normalWorld_21 = tmpvar_4;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_21;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_26 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tmpvar_8 * tmpvar_1) * diff_26);
  c_25.xyz = tmpvar_28;
  c_25.w = tmpvar_9;
  c_24.w = c_25.w;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (c_25.xyz + (tmpvar_8 * (xlv_TEXCOORD5 + x1_23)));
  c_24.xyz = tmpvar_29;
  c_3.xyz = c_24.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_8;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_9;
  highp float cse_10;
  cse_10 = _Object2World[3].x;
  highp float cse_11;
  cse_11 = _Object2World[3].y;
  highp float tmpvar_12;
  tmpvar_12 = clamp (((
    fract(((cse_10 + cse_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_17;
      highp float fAdherenceScale_23;
      highp vec3 tmpvar_24;
      tmpvar_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_25;
      tmpvar_25 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (tmpvar_25 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((tmpvar_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_25 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((tmpvar_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        (mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_26.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (_glesVertex.xyz + ((tmpvar_24 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((tmpvar_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((
        ((tmpvar_34.x * tmpvar_34.y) * tmpvar_34.x)
       * tmpvar_34.y) * _ST_WindTurbulences.x));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_14 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp vec3 tmpvar_37;
      tmpvar_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_38;
      tmpvar_38 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_39;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (tmpvar_38 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((tmpvar_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      vPos_36 = (vPos_21 + ((tmpvar_37 * 
        (((mix (
          mix (tmpvar_44, fTarget_41, fAmount_40)
        , fTarget_41, fAmount_40) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_16;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (cse_10 + _ST_WindGlobal.x);
    tmpvar_49.y = (cse_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    vPos_45.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_50.x + (tmpvar_50.y * tmpvar_50.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_46)));
    vPos_45 = (normalize(vPos_45) * fLength_47);
    FinalPosition_16 = vPos_45;
  };
  tmpvar_13.xyz = FinalPosition_16;
  highp vec4 tmpvar_52;
  tmpvar_52 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_53;
  highp vec4 tmpvar_54;
  tmpvar_54 = (tmpvar_52 * 0.5);
  highp vec2 tmpvar_55;
  tmpvar_55.x = tmpvar_54.x;
  tmpvar_55.y = (tmpvar_54.y * _ProjectionParams.x);
  o_53.xy = (tmpvar_55 + tmpvar_54.w);
  o_53.zw = tmpvar_52.zw;
  highp vec3 tmpvar_56;
  tmpvar_56 = o_53.xyw;
  tmpvar_7 = tmpvar_56;
  highp vec2 tmpvar_57;
  tmpvar_57 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_57;
  tmpvar_4 = tmpvar_5;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * _glesNormal.x)
   + 
    (v_59.xyz * _glesNormal.y)
  ) + (v_60.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_61;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_62;
  tmpvar_62.w = 1.0;
  tmpvar_62.xyz = worldNormal_2;
  mediump vec4 normal_63;
  normal_63 = tmpvar_62;
  mediump vec3 x2_64;
  mediump vec4 tmpvar_65;
  tmpvar_65 = (normal_63.xyzz * normal_63.yzzx);
  x2_64.x = dot (unity_SHBr, tmpvar_65);
  x2_64.y = dot (unity_SHBg, tmpvar_65);
  x2_64.z = dot (unity_SHBb, tmpvar_65);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = (x2_64 + (unity_SHC.xyz * (
    (normal_63.x * normal_63.x)
   - 
    (normal_63.y * normal_63.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  mediump float tmpvar_13;
  tmpvar_13 = fract(tmpvar_12.y);
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_13 * 0.0625) + unity_LODFade.y);
  projUV_11.y = tmpvar_14;
  lowp float x_15;
  x_15 = (texture (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_18 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_19;
  tmpvar_19 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_20;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_21;
  normalWorld_21 = tmpvar_4;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_21;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_26 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tmpvar_8 * tmpvar_1) * diff_26);
  c_25.xyz = tmpvar_28;
  c_25.w = tmpvar_9;
  c_24.w = c_25.w;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (c_25.xyz + (tmpvar_8 * (xlv_TEXCOORD5 + x1_23)));
  c_24.xyz = tmpvar_29;
  c_3.xyz = c_24.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fAdherenceScale_24;
      highp vec3 tmpvar_25;
      tmpvar_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_26;
      tmpvar_26 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (tmpvar_26 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((tmpvar_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_26 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((tmpvar_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        (mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_27.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((tmpvar_25 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((tmpvar_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((
        ((tmpvar_35.x * tmpvar_35.y) * tmpvar_35.x)
       * tmpvar_35.y) * _ST_WindTurbulences.x));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp vec3 tmpvar_38;
      tmpvar_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_39;
      tmpvar_39 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_40;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (tmpvar_39 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((tmpvar_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      vPos_37 = (vPos_22 + ((tmpvar_38 * 
        (((mix (
          mix (tmpvar_45, fTarget_42, fAmount_41)
        , fTarget_42, fAmount_41) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_17;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_50.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    vPos_46.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * (
      ((_ST_WindGlobal.y * (tmpvar_51.x + (tmpvar_51.y * tmpvar_51.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_47)));
    vPos_46 = (normalize(vPos_46) * fLength_48);
    FinalPosition_17 = vPos_46;
  };
  tmpvar_14.xyz = FinalPosition_17;
  highp vec4 tmpvar_53;
  tmpvar_53 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (tmpvar_53 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = tmpvar_53.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  tmpvar_8 = tmpvar_57;
  highp vec2 tmpvar_58;
  tmpvar_58 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_58;
  tmpvar_4 = tmpvar_6;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * _glesNormal.x)
   + 
    (v_60.xyz * _glesNormal.y)
  ) + (v_61.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_62;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_2;
  mediump vec4 normal_64;
  normal_64 = tmpvar_63;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  highp vec4 tmpvar_67;
  tmpvar_67 = (unity_World2Shadow[0] * (_Object2World * tmpvar_14));
  tmpvar_5 = tmpvar_67;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = (x2_65 + (unity_SHC.xyz * (
    (normal_64.x * normal_64.x)
   - 
    (normal_64.y * normal_64.y)
  )));
  xlv_TEXCOORD6 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_19 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  lowp float tmpvar_21;
  mediump float dist_22;
  lowp float tmpvar_23;
  tmpvar_23 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x;
  dist_22 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (float((dist_22 > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_21 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_25;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_21;
  mediump vec3 normalWorld_26;
  normalWorld_26 = tmpvar_5;
  mediump vec3 tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = normalWorld_26;
  mediump vec3 x1_29;
  x1_29.x = dot (unity_SHAr, tmpvar_28);
  x1_29.y = dot (unity_SHAg, tmpvar_28);
  x1_29.z = dot (unity_SHAb, tmpvar_28);
  tmpvar_27 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_27;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_32 = tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_9 * tmpvar_27) * diff_32);
  c_31.xyz = tmpvar_34;
  c_31.w = tmpvar_10;
  c_30.w = c_31.w;
  mediump vec3 tmpvar_35;
  tmpvar_35 = (c_31.xyz + (tmpvar_9 * (xlv_TEXCOORD5 + x1_29)));
  c_30.xyz = tmpvar_35;
  c_4.xyz = c_30.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fAdherenceScale_24;
      highp vec3 tmpvar_25;
      tmpvar_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_26;
      tmpvar_26 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (tmpvar_26 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((tmpvar_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_26 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((tmpvar_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        (mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_27.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((tmpvar_25 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((tmpvar_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((
        ((tmpvar_35.x * tmpvar_35.y) * tmpvar_35.x)
       * tmpvar_35.y) * _ST_WindTurbulences.x));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp vec3 tmpvar_38;
      tmpvar_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_39;
      tmpvar_39 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_40;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (tmpvar_39 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((tmpvar_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      vPos_37 = (vPos_22 + ((tmpvar_38 * 
        (((mix (
          mix (tmpvar_45, fTarget_42, fAmount_41)
        , fTarget_42, fAmount_41) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_17;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_50.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    vPos_46.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * (
      ((_ST_WindGlobal.y * (tmpvar_51.x + (tmpvar_51.y * tmpvar_51.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_47)));
    vPos_46 = (normalize(vPos_46) * fLength_48);
    FinalPosition_17 = vPos_46;
  };
  tmpvar_14.xyz = FinalPosition_17;
  highp vec4 tmpvar_53;
  tmpvar_53 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (tmpvar_53 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = tmpvar_53.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  tmpvar_8 = tmpvar_57;
  highp vec2 tmpvar_58;
  tmpvar_58 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_58;
  tmpvar_4 = tmpvar_6;
  highp vec3 tmpvar_59;
  tmpvar_59 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_60;
  v_60.x = _World2Object[0].x;
  v_60.y = _World2Object[1].x;
  v_60.z = _World2Object[2].x;
  v_60.w = _World2Object[3].x;
  highp vec4 v_61;
  v_61.x = _World2Object[0].y;
  v_61.y = _World2Object[1].y;
  v_61.z = _World2Object[2].y;
  v_61.w = _World2Object[3].y;
  highp vec4 v_62;
  v_62.x = _World2Object[0].z;
  v_62.y = _World2Object[1].z;
  v_62.z = _World2Object[2].z;
  v_62.w = _World2Object[3].z;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize(((
    (v_60.xyz * _glesNormal.x)
   + 
    (v_61.xyz * _glesNormal.y)
  ) + (v_62.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_63;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_64;
  tmpvar_64.w = 1.0;
  tmpvar_64.xyz = worldNormal_2;
  mediump vec3 tmpvar_65;
  mediump vec4 normal_66;
  normal_66 = tmpvar_64;
  mediump vec3 x2_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = (normal_66.xyzz * normal_66.yzzx);
  x2_67.x = dot (unity_SHBr, tmpvar_68);
  x2_67.y = dot (unity_SHBg, tmpvar_68);
  x2_67.z = dot (unity_SHBb, tmpvar_68);
  tmpvar_65 = (x2_67 + (unity_SHC.xyz * (
    (normal_66.x * normal_66.x)
   - 
    (normal_66.y * normal_66.y)
  )));
  highp vec3 lightColor0_69;
  lightColor0_69 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_70;
  lightColor1_70 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_71;
  lightColor2_71 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_72;
  lightColor3_72 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_73;
  lightAttenSq_73 = unity_4LightAtten0;
  highp vec3 normal_74;
  normal_74 = worldNormal_2;
  highp vec4 tmpvar_75;
  tmpvar_75 = (unity_4LightPosX0 - tmpvar_59.x);
  highp vec4 tmpvar_76;
  tmpvar_76 = (unity_4LightPosY0 - tmpvar_59.y);
  highp vec4 tmpvar_77;
  tmpvar_77 = (unity_4LightPosZ0 - tmpvar_59.z);
  highp vec4 tmpvar_78;
  tmpvar_78 = (((tmpvar_75 * tmpvar_75) + (tmpvar_76 * tmpvar_76)) + (tmpvar_77 * tmpvar_77));
  highp vec4 tmpvar_79;
  tmpvar_79 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_75 * normal_74.x) + (tmpvar_76 * normal_74.y)) + (tmpvar_77 * normal_74.z))
   * 
    inversesqrt(tmpvar_78)
  )) * (1.0/((1.0 + 
    (tmpvar_78 * lightAttenSq_73)
  ))));
  highp vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_65 + ((
    ((lightColor0_69 * tmpvar_79.x) + (lightColor1_70 * tmpvar_79.y))
   + 
    (lightColor2_71 * tmpvar_79.z)
  ) + (lightColor3_72 * tmpvar_79.w)));
  tmpvar_5 = tmpvar_80;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_59;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  mediump float tmpvar_13;
  tmpvar_13 = fract(tmpvar_12.y);
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_13 * 0.0625) + unity_LODFade.y);
  projUV_11.y = tmpvar_14;
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_18 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_19;
  tmpvar_19 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_20;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_21;
  normalWorld_21 = tmpvar_4;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_21;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_26 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tmpvar_8 * tmpvar_1) * diff_26);
  c_25.xyz = tmpvar_28;
  c_25.w = tmpvar_9;
  c_24.w = c_25.w;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (c_25.xyz + (tmpvar_8 * (xlv_TEXCOORD5 + x1_23)));
  c_24.xyz = tmpvar_29;
  c_3.xyz = c_24.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fAdherenceScale_24;
      highp vec3 tmpvar_25;
      tmpvar_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_26;
      tmpvar_26 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (tmpvar_26 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((tmpvar_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_26 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((tmpvar_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        (mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_27.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((tmpvar_25 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((tmpvar_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((
        ((tmpvar_35.x * tmpvar_35.y) * tmpvar_35.x)
       * tmpvar_35.y) * _ST_WindTurbulences.x));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp vec3 tmpvar_38;
      tmpvar_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_39;
      tmpvar_39 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_40;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (tmpvar_39 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((tmpvar_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      vPos_37 = (vPos_22 + ((tmpvar_38 * 
        (((mix (
          mix (tmpvar_45, fTarget_42, fAmount_41)
        , fTarget_42, fAmount_41) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_17;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_50.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    vPos_46.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * (
      ((_ST_WindGlobal.y * (tmpvar_51.x + (tmpvar_51.y * tmpvar_51.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_47)));
    vPos_46 = (normalize(vPos_46) * fLength_48);
    FinalPosition_17 = vPos_46;
  };
  tmpvar_14.xyz = FinalPosition_17;
  highp vec4 tmpvar_53;
  tmpvar_53 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (tmpvar_53 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = tmpvar_53.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  tmpvar_8 = tmpvar_57;
  highp vec2 tmpvar_58;
  tmpvar_58 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_58;
  tmpvar_4 = tmpvar_6;
  highp vec3 tmpvar_59;
  tmpvar_59 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_60;
  v_60.x = _World2Object[0].x;
  v_60.y = _World2Object[1].x;
  v_60.z = _World2Object[2].x;
  v_60.w = _World2Object[3].x;
  highp vec4 v_61;
  v_61.x = _World2Object[0].y;
  v_61.y = _World2Object[1].y;
  v_61.z = _World2Object[2].y;
  v_61.w = _World2Object[3].y;
  highp vec4 v_62;
  v_62.x = _World2Object[0].z;
  v_62.y = _World2Object[1].z;
  v_62.z = _World2Object[2].z;
  v_62.w = _World2Object[3].z;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize(((
    (v_60.xyz * _glesNormal.x)
   + 
    (v_61.xyz * _glesNormal.y)
  ) + (v_62.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_63;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_64;
  tmpvar_64.w = 1.0;
  tmpvar_64.xyz = worldNormal_2;
  mediump vec3 tmpvar_65;
  mediump vec4 normal_66;
  normal_66 = tmpvar_64;
  mediump vec3 x2_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = (normal_66.xyzz * normal_66.yzzx);
  x2_67.x = dot (unity_SHBr, tmpvar_68);
  x2_67.y = dot (unity_SHBg, tmpvar_68);
  x2_67.z = dot (unity_SHBb, tmpvar_68);
  tmpvar_65 = (x2_67 + (unity_SHC.xyz * (
    (normal_66.x * normal_66.x)
   - 
    (normal_66.y * normal_66.y)
  )));
  highp vec3 lightColor0_69;
  lightColor0_69 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_70;
  lightColor1_70 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_71;
  lightColor2_71 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_72;
  lightColor3_72 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_73;
  lightAttenSq_73 = unity_4LightAtten0;
  highp vec3 normal_74;
  normal_74 = worldNormal_2;
  highp vec4 tmpvar_75;
  tmpvar_75 = (unity_4LightPosX0 - tmpvar_59.x);
  highp vec4 tmpvar_76;
  tmpvar_76 = (unity_4LightPosY0 - tmpvar_59.y);
  highp vec4 tmpvar_77;
  tmpvar_77 = (unity_4LightPosZ0 - tmpvar_59.z);
  highp vec4 tmpvar_78;
  tmpvar_78 = (((tmpvar_75 * tmpvar_75) + (tmpvar_76 * tmpvar_76)) + (tmpvar_77 * tmpvar_77));
  highp vec4 tmpvar_79;
  tmpvar_79 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_75 * normal_74.x) + (tmpvar_76 * normal_74.y)) + (tmpvar_77 * normal_74.z))
   * 
    inversesqrt(tmpvar_78)
  )) * (1.0/((1.0 + 
    (tmpvar_78 * lightAttenSq_73)
  ))));
  highp vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_65 + ((
    ((lightColor0_69 * tmpvar_79.x) + (lightColor1_70 * tmpvar_79.y))
   + 
    (lightColor2_71 * tmpvar_79.z)
  ) + (lightColor3_72 * tmpvar_79.w)));
  tmpvar_5 = tmpvar_80;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_59;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_5;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  mediump float tmpvar_13;
  tmpvar_13 = fract(tmpvar_12.y);
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_13 * 0.0625) + unity_LODFade.y);
  projUV_11.y = tmpvar_14;
  lowp float x_15;
  x_15 = (texture (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_18 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_19;
  tmpvar_19 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_20;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_21;
  normalWorld_21 = tmpvar_4;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_21;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_26 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tmpvar_8 * tmpvar_1) * diff_26);
  c_25.xyz = tmpvar_28;
  c_25.w = tmpvar_9;
  c_24.w = c_25.w;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (c_25.xyz + (tmpvar_8 * (xlv_TEXCOORD5 + x1_23)));
  c_24.xyz = tmpvar_29;
  c_3.xyz = c_24.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_19;
      highp float fAdherenceScale_25;
      highp vec3 tmpvar_26;
      tmpvar_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_27;
      tmpvar_27 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (tmpvar_27 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_27 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((tmpvar_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        (mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_28.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (_glesVertex.xyz + ((tmpvar_26 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((tmpvar_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((
        ((tmpvar_36.x * tmpvar_36.y) * tmpvar_36.x)
       * tmpvar_36.y) * _ST_WindTurbulences.x));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp vec3 tmpvar_39;
      tmpvar_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_40;
      tmpvar_40 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_41;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (tmpvar_40 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((tmpvar_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      vPos_38 = (vPos_23 + ((tmpvar_39 * 
        (((mix (
          mix (tmpvar_46, fTarget_43, fAmount_42)
        , fTarget_43, fAmount_42) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_18;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_51.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    vPos_47.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_52.x + (tmpvar_52.y * tmpvar_52.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_48)));
    vPos_47 = (normalize(vPos_47) * fLength_49);
    FinalPosition_18 = vPos_47;
  };
  tmpvar_15.xyz = FinalPosition_18;
  highp vec4 tmpvar_54;
  tmpvar_54 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (tmpvar_54 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = tmpvar_54.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  tmpvar_9 = tmpvar_58;
  highp vec2 tmpvar_59;
  tmpvar_59 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_59;
  tmpvar_4 = tmpvar_7;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_64;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = worldNormal_2;
  mediump vec3 tmpvar_66;
  mediump vec4 normal_67;
  normal_67 = tmpvar_65;
  mediump vec3 x2_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = (normal_67.xyzz * normal_67.yzzx);
  x2_68.x = dot (unity_SHBr, tmpvar_69);
  x2_68.y = dot (unity_SHBg, tmpvar_69);
  x2_68.z = dot (unity_SHBb, tmpvar_69);
  tmpvar_66 = (x2_68 + (unity_SHC.xyz * (
    (normal_67.x * normal_67.x)
   - 
    (normal_67.y * normal_67.y)
  )));
  highp vec3 lightColor0_70;
  lightColor0_70 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_71;
  lightColor1_71 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_72;
  lightColor2_72 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_73;
  lightColor3_73 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_74;
  lightAttenSq_74 = unity_4LightAtten0;
  highp vec3 normal_75;
  normal_75 = worldNormal_2;
  highp vec4 tmpvar_76;
  tmpvar_76 = (unity_4LightPosX0 - tmpvar_60.x);
  highp vec4 tmpvar_77;
  tmpvar_77 = (unity_4LightPosY0 - tmpvar_60.y);
  highp vec4 tmpvar_78;
  tmpvar_78 = (unity_4LightPosZ0 - tmpvar_60.z);
  highp vec4 tmpvar_79;
  tmpvar_79 = (((tmpvar_76 * tmpvar_76) + (tmpvar_77 * tmpvar_77)) + (tmpvar_78 * tmpvar_78));
  highp vec4 tmpvar_80;
  tmpvar_80 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_76 * normal_75.x) + (tmpvar_77 * normal_75.y)) + (tmpvar_78 * normal_75.z))
   * 
    inversesqrt(tmpvar_79)
  )) * (1.0/((1.0 + 
    (tmpvar_79 * lightAttenSq_74)
  ))));
  highp vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_66 + ((
    ((lightColor0_70 * tmpvar_80.x) + (lightColor1_71 * tmpvar_80.y))
   + 
    (lightColor2_72 * tmpvar_80.z)
  ) + (lightColor3_73 * tmpvar_80.w)));
  tmpvar_5 = tmpvar_81;
  highp vec4 tmpvar_82;
  tmpvar_82 = (unity_World2Shadow[0] * (_Object2World * tmpvar_15));
  tmpvar_6 = tmpvar_82;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_60;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_19 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  lowp float tmpvar_21;
  mediump float dist_22;
  lowp float tmpvar_23;
  tmpvar_23 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x;
  dist_22 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (float((dist_22 > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_21 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_25;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_21;
  mediump vec3 normalWorld_26;
  normalWorld_26 = tmpvar_5;
  mediump vec3 tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = normalWorld_26;
  mediump vec3 x1_29;
  x1_29.x = dot (unity_SHAr, tmpvar_28);
  x1_29.y = dot (unity_SHAg, tmpvar_28);
  x1_29.z = dot (unity_SHAb, tmpvar_28);
  tmpvar_27 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_27;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_32 = tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_9 * tmpvar_27) * diff_32);
  c_31.xyz = tmpvar_34;
  c_31.w = tmpvar_10;
  c_30.w = c_31.w;
  mediump vec3 tmpvar_35;
  tmpvar_35 = (c_31.xyz + (tmpvar_9 * (xlv_TEXCOORD5 + x1_29)));
  c_30.xyz = tmpvar_35;
  c_4.xyz = c_30.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fAdherenceScale_24;
      highp vec3 tmpvar_25;
      tmpvar_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_26;
      tmpvar_26 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (tmpvar_26 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((tmpvar_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_26 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((tmpvar_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        (mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_27.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((tmpvar_25 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((tmpvar_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((
        ((tmpvar_35.x * tmpvar_35.y) * tmpvar_35.x)
       * tmpvar_35.y) * _ST_WindTurbulences.x));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp vec3 tmpvar_38;
      tmpvar_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_39;
      tmpvar_39 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_40;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (tmpvar_39 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((tmpvar_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      vPos_37 = (vPos_22 + ((tmpvar_38 * 
        (((mix (
          mix (tmpvar_45, fTarget_42, fAmount_41)
        , fTarget_42, fAmount_41) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_17;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_50.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    vPos_46.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * (
      ((_ST_WindGlobal.y * (tmpvar_51.x + (tmpvar_51.y * tmpvar_51.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_47)));
    vPos_46 = (normalize(vPos_46) * fLength_48);
    FinalPosition_17 = vPos_46;
  };
  tmpvar_14.xyz = FinalPosition_17;
  highp vec4 tmpvar_53;
  tmpvar_53 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (tmpvar_53 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = tmpvar_53.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  tmpvar_8 = tmpvar_57;
  highp vec2 tmpvar_58;
  tmpvar_58 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_58;
  tmpvar_4 = tmpvar_6;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * _glesNormal.x)
   + 
    (v_60.xyz * _glesNormal.y)
  ) + (v_61.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_62;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_2;
  mediump vec4 normal_64;
  normal_64 = tmpvar_63;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  highp vec4 tmpvar_67;
  tmpvar_67 = (unity_World2Shadow[0] * (_Object2World * tmpvar_14));
  tmpvar_5 = tmpvar_67;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = (x2_65 + (unity_SHC.xyz * (
    (normal_64.x * normal_64.x)
   - 
    (normal_64.y * normal_64.y)
  )));
  xlv_TEXCOORD6 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_19 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  lowp float shadow_21;
  lowp float tmpvar_22;
  tmpvar_22 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz);
  mediump float tmpvar_23;
  tmpvar_23 = (_LightShadowData.x + (tmpvar_22 * (1.0 - _LightShadowData.x)));
  shadow_21 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_24;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_21;
  mediump vec3 normalWorld_25;
  normalWorld_25 = tmpvar_5;
  mediump vec3 tmpvar_26;
  mediump vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = normalWorld_25;
  mediump vec3 x1_28;
  x1_28.x = dot (unity_SHAr, tmpvar_27);
  x1_28.y = dot (unity_SHAg, tmpvar_27);
  x1_28.z = dot (unity_SHAb, tmpvar_27);
  tmpvar_26 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_26;
  lowp vec4 c_29;
  lowp vec4 c_30;
  lowp float diff_31;
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_31 = tmpvar_32;
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((tmpvar_9 * tmpvar_26) * diff_31);
  c_30.xyz = tmpvar_33;
  c_30.w = tmpvar_10;
  c_29.w = c_30.w;
  mediump vec3 tmpvar_34;
  tmpvar_34 = (c_30.xyz + (tmpvar_9 * (xlv_TEXCOORD5 + x1_28)));
  c_29.xyz = tmpvar_34;
  c_4.xyz = c_29.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fAdherenceScale_24;
      highp vec3 tmpvar_25;
      tmpvar_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_26;
      tmpvar_26 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (tmpvar_26 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((tmpvar_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_26 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((tmpvar_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        (mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_27.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((tmpvar_25 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((tmpvar_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((
        ((tmpvar_35.x * tmpvar_35.y) * tmpvar_35.x)
       * tmpvar_35.y) * _ST_WindTurbulences.x));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp vec3 tmpvar_38;
      tmpvar_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_39;
      tmpvar_39 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_40;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (tmpvar_39 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((tmpvar_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      vPos_37 = (vPos_22 + ((tmpvar_38 * 
        (((mix (
          mix (tmpvar_45, fTarget_42, fAmount_41)
        , fTarget_42, fAmount_41) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_17;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_50.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    vPos_46.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * (
      ((_ST_WindGlobal.y * (tmpvar_51.x + (tmpvar_51.y * tmpvar_51.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_47)));
    vPos_46 = (normalize(vPos_46) * fLength_48);
    FinalPosition_17 = vPos_46;
  };
  tmpvar_14.xyz = FinalPosition_17;
  highp vec4 tmpvar_53;
  tmpvar_53 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (tmpvar_53 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = tmpvar_53.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  tmpvar_8 = tmpvar_57;
  highp vec2 tmpvar_58;
  tmpvar_58 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_58;
  tmpvar_4 = tmpvar_6;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * _glesNormal.x)
   + 
    (v_60.xyz * _glesNormal.y)
  ) + (v_61.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_62;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_2;
  mediump vec4 normal_64;
  normal_64 = tmpvar_63;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  highp vec4 tmpvar_67;
  tmpvar_67 = (unity_World2Shadow[0] * (_Object2World * tmpvar_14));
  tmpvar_5 = tmpvar_67;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = (x2_65 + (unity_SHC.xyz * (
    (normal_64.x * normal_64.x)
   - 
    (normal_64.y * normal_64.y)
  )));
  xlv_TEXCOORD6 = tmpvar_5;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_19 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  lowp float shadow_21;
  mediump float tmpvar_22;
  tmpvar_22 = texture (_ShadowMapTexture, xlv_TEXCOORD6.xyz);
  lowp float tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump float tmpvar_24;
  tmpvar_24 = (_LightShadowData.x + (tmpvar_23 * (1.0 - _LightShadowData.x)));
  shadow_21 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_25;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_21;
  mediump vec3 normalWorld_26;
  normalWorld_26 = tmpvar_5;
  mediump vec3 tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = normalWorld_26;
  mediump vec3 x1_29;
  x1_29.x = dot (unity_SHAr, tmpvar_28);
  x1_29.y = dot (unity_SHAg, tmpvar_28);
  x1_29.z = dot (unity_SHAb, tmpvar_28);
  tmpvar_27 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_27;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_32 = tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_9 * tmpvar_27) * diff_32);
  c_31.xyz = tmpvar_34;
  c_31.w = tmpvar_10;
  c_30.w = c_31.w;
  mediump vec3 tmpvar_35;
  tmpvar_35 = (c_31.xyz + (tmpvar_9 * (xlv_TEXCOORD5 + x1_29)));
  c_30.xyz = tmpvar_35;
  c_4.xyz = c_30.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_19;
      highp float fAdherenceScale_25;
      highp vec3 tmpvar_26;
      tmpvar_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_27;
      tmpvar_27 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (tmpvar_27 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_27 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((tmpvar_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        (mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_28.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (_glesVertex.xyz + ((tmpvar_26 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((tmpvar_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((
        ((tmpvar_36.x * tmpvar_36.y) * tmpvar_36.x)
       * tmpvar_36.y) * _ST_WindTurbulences.x));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp vec3 tmpvar_39;
      tmpvar_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_40;
      tmpvar_40 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_41;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (tmpvar_40 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((tmpvar_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      vPos_38 = (vPos_23 + ((tmpvar_39 * 
        (((mix (
          mix (tmpvar_46, fTarget_43, fAmount_42)
        , fTarget_43, fAmount_42) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_18;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_51.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    vPos_47.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_52.x + (tmpvar_52.y * tmpvar_52.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_48)));
    vPos_47 = (normalize(vPos_47) * fLength_49);
    FinalPosition_18 = vPos_47;
  };
  tmpvar_15.xyz = FinalPosition_18;
  highp vec4 tmpvar_54;
  tmpvar_54 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (tmpvar_54 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = tmpvar_54.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  tmpvar_9 = tmpvar_58;
  highp vec2 tmpvar_59;
  tmpvar_59 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_59;
  tmpvar_4 = tmpvar_7;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_64;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = worldNormal_2;
  mediump vec3 tmpvar_66;
  mediump vec4 normal_67;
  normal_67 = tmpvar_65;
  mediump vec3 x2_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = (normal_67.xyzz * normal_67.yzzx);
  x2_68.x = dot (unity_SHBr, tmpvar_69);
  x2_68.y = dot (unity_SHBg, tmpvar_69);
  x2_68.z = dot (unity_SHBb, tmpvar_69);
  tmpvar_66 = (x2_68 + (unity_SHC.xyz * (
    (normal_67.x * normal_67.x)
   - 
    (normal_67.y * normal_67.y)
  )));
  highp vec3 lightColor0_70;
  lightColor0_70 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_71;
  lightColor1_71 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_72;
  lightColor2_72 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_73;
  lightColor3_73 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_74;
  lightAttenSq_74 = unity_4LightAtten0;
  highp vec3 normal_75;
  normal_75 = worldNormal_2;
  highp vec4 tmpvar_76;
  tmpvar_76 = (unity_4LightPosX0 - tmpvar_60.x);
  highp vec4 tmpvar_77;
  tmpvar_77 = (unity_4LightPosY0 - tmpvar_60.y);
  highp vec4 tmpvar_78;
  tmpvar_78 = (unity_4LightPosZ0 - tmpvar_60.z);
  highp vec4 tmpvar_79;
  tmpvar_79 = (((tmpvar_76 * tmpvar_76) + (tmpvar_77 * tmpvar_77)) + (tmpvar_78 * tmpvar_78));
  highp vec4 tmpvar_80;
  tmpvar_80 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_76 * normal_75.x) + (tmpvar_77 * normal_75.y)) + (tmpvar_78 * normal_75.z))
   * 
    inversesqrt(tmpvar_79)
  )) * (1.0/((1.0 + 
    (tmpvar_79 * lightAttenSq_74)
  ))));
  highp vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_66 + ((
    ((lightColor0_70 * tmpvar_80.x) + (lightColor1_71 * tmpvar_80.y))
   + 
    (lightColor2_72 * tmpvar_80.z)
  ) + (lightColor3_73 * tmpvar_80.w)));
  tmpvar_5 = tmpvar_81;
  highp vec4 tmpvar_82;
  tmpvar_82 = (unity_World2Shadow[0] * (_Object2World * tmpvar_15));
  tmpvar_6 = tmpvar_82;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_60;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_19 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  lowp float shadow_21;
  lowp float tmpvar_22;
  tmpvar_22 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz);
  mediump float tmpvar_23;
  tmpvar_23 = (_LightShadowData.x + (tmpvar_22 * (1.0 - _LightShadowData.x)));
  shadow_21 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_24;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_21;
  mediump vec3 normalWorld_25;
  normalWorld_25 = tmpvar_5;
  mediump vec3 tmpvar_26;
  mediump vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = normalWorld_25;
  mediump vec3 x1_28;
  x1_28.x = dot (unity_SHAr, tmpvar_27);
  x1_28.y = dot (unity_SHAg, tmpvar_27);
  x1_28.z = dot (unity_SHAb, tmpvar_27);
  tmpvar_26 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_26;
  lowp vec4 c_29;
  lowp vec4 c_30;
  lowp float diff_31;
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_31 = tmpvar_32;
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((tmpvar_9 * tmpvar_26) * diff_31);
  c_30.xyz = tmpvar_33;
  c_30.w = tmpvar_10;
  c_29.w = c_30.w;
  mediump vec3 tmpvar_34;
  tmpvar_34 = (c_30.xyz + (tmpvar_9 * (xlv_TEXCOORD5 + x1_28)));
  c_29.xyz = tmpvar_34;
  c_4.xyz = c_29.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_19;
      highp float fAdherenceScale_25;
      highp vec3 tmpvar_26;
      tmpvar_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_27;
      tmpvar_27 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (tmpvar_27 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_27 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((tmpvar_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        (mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_28.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (_glesVertex.xyz + ((tmpvar_26 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((tmpvar_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((
        ((tmpvar_36.x * tmpvar_36.y) * tmpvar_36.x)
       * tmpvar_36.y) * _ST_WindTurbulences.x));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp vec3 tmpvar_39;
      tmpvar_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_40;
      tmpvar_40 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_41;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (tmpvar_40 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((tmpvar_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      vPos_38 = (vPos_23 + ((tmpvar_39 * 
        (((mix (
          mix (tmpvar_46, fTarget_43, fAmount_42)
        , fTarget_43, fAmount_42) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_18;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_51.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    vPos_47.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_52.x + (tmpvar_52.y * tmpvar_52.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_48)));
    vPos_47 = (normalize(vPos_47) * fLength_49);
    FinalPosition_18 = vPos_47;
  };
  tmpvar_15.xyz = FinalPosition_18;
  highp vec4 tmpvar_54;
  tmpvar_54 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (tmpvar_54 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = tmpvar_54.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  tmpvar_9 = tmpvar_58;
  highp vec2 tmpvar_59;
  tmpvar_59 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_59;
  tmpvar_4 = tmpvar_7;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_64;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = worldNormal_2;
  mediump vec3 tmpvar_66;
  mediump vec4 normal_67;
  normal_67 = tmpvar_65;
  mediump vec3 x2_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = (normal_67.xyzz * normal_67.yzzx);
  x2_68.x = dot (unity_SHBr, tmpvar_69);
  x2_68.y = dot (unity_SHBg, tmpvar_69);
  x2_68.z = dot (unity_SHBb, tmpvar_69);
  tmpvar_66 = (x2_68 + (unity_SHC.xyz * (
    (normal_67.x * normal_67.x)
   - 
    (normal_67.y * normal_67.y)
  )));
  highp vec3 lightColor0_70;
  lightColor0_70 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_71;
  lightColor1_71 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_72;
  lightColor2_72 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_73;
  lightColor3_73 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_74;
  lightAttenSq_74 = unity_4LightAtten0;
  highp vec3 normal_75;
  normal_75 = worldNormal_2;
  highp vec4 tmpvar_76;
  tmpvar_76 = (unity_4LightPosX0 - tmpvar_60.x);
  highp vec4 tmpvar_77;
  tmpvar_77 = (unity_4LightPosY0 - tmpvar_60.y);
  highp vec4 tmpvar_78;
  tmpvar_78 = (unity_4LightPosZ0 - tmpvar_60.z);
  highp vec4 tmpvar_79;
  tmpvar_79 = (((tmpvar_76 * tmpvar_76) + (tmpvar_77 * tmpvar_77)) + (tmpvar_78 * tmpvar_78));
  highp vec4 tmpvar_80;
  tmpvar_80 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_76 * normal_75.x) + (tmpvar_77 * normal_75.y)) + (tmpvar_78 * normal_75.z))
   * 
    inversesqrt(tmpvar_79)
  )) * (1.0/((1.0 + 
    (tmpvar_79 * lightAttenSq_74)
  ))));
  highp vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_66 + ((
    ((lightColor0_70 * tmpvar_80.x) + (lightColor1_71 * tmpvar_80.y))
   + 
    (lightColor2_72 * tmpvar_80.z)
  ) + (lightColor3_73 * tmpvar_80.w)));
  tmpvar_5 = tmpvar_81;
  highp vec4 tmpvar_82;
  tmpvar_82 = (unity_World2Shadow[0] * (_Object2World * tmpvar_15));
  tmpvar_6 = tmpvar_82;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_60;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = tmpvar_6;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_19 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  lowp float shadow_21;
  mediump float tmpvar_22;
  tmpvar_22 = texture (_ShadowMapTexture, xlv_TEXCOORD6.xyz);
  lowp float tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump float tmpvar_24;
  tmpvar_24 = (_LightShadowData.x + (tmpvar_23 * (1.0 - _LightShadowData.x)));
  shadow_21 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_25;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_21;
  mediump vec3 normalWorld_26;
  normalWorld_26 = tmpvar_5;
  mediump vec3 tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = normalWorld_26;
  mediump vec3 x1_29;
  x1_29.x = dot (unity_SHAr, tmpvar_28);
  x1_29.y = dot (unity_SHAg, tmpvar_28);
  x1_29.z = dot (unity_SHAb, tmpvar_28);
  tmpvar_27 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_27;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_32 = tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_9 * tmpvar_27) * diff_32);
  c_31.xyz = tmpvar_34;
  c_31.w = tmpvar_10;
  c_30.w = c_31.w;
  mediump vec3 tmpvar_35;
  tmpvar_35 = (c_31.xyz + (tmpvar_9 * (xlv_TEXCOORD5 + x1_29)));
  c_30.xyz = tmpvar_35;
  c_4.xyz = c_30.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fAdherenceScale_24;
      highp vec3 tmpvar_25;
      tmpvar_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_26;
      tmpvar_26 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (tmpvar_26 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((tmpvar_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_26 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((tmpvar_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        (mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_27.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((tmpvar_25 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((tmpvar_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((
        ((tmpvar_35.x * tmpvar_35.y) * tmpvar_35.x)
       * tmpvar_35.y) * _ST_WindTurbulences.x));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp vec3 tmpvar_38;
      tmpvar_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_39;
      tmpvar_39 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_40;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (tmpvar_39 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((tmpvar_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      vPos_37 = (vPos_22 + ((tmpvar_38 * 
        (((mix (
          mix (tmpvar_45, fTarget_42, fAmount_41)
        , fTarget_42, fAmount_41) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_17;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_50.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    vPos_46.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * (
      ((_ST_WindGlobal.y * (tmpvar_51.x + (tmpvar_51.y * tmpvar_51.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_47)));
    vPos_46 = (normalize(vPos_46) * fLength_48);
    FinalPosition_17 = vPos_46;
  };
  tmpvar_14.xyz = FinalPosition_17;
  highp vec4 tmpvar_53;
  tmpvar_53 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (tmpvar_53 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = tmpvar_53.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  tmpvar_8 = tmpvar_57;
  highp vec2 tmpvar_58;
  tmpvar_58 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_58;
  tmpvar_5 = tmpvar_6;
  highp vec3 tmpvar_59;
  tmpvar_59 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_60;
  v_60.x = _World2Object[0].x;
  v_60.y = _World2Object[1].x;
  v_60.z = _World2Object[2].x;
  v_60.w = _World2Object[3].x;
  highp vec4 v_61;
  v_61.x = _World2Object[0].y;
  v_61.y = _World2Object[1].y;
  v_61.z = _World2Object[2].y;
  v_61.w = _World2Object[3].y;
  highp vec4 v_62;
  v_62.x = _World2Object[0].z;
  v_62.y = _World2Object[1].z;
  v_62.z = _World2Object[2].z;
  v_62.w = _World2Object[3].z;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize(((
    (v_60.xyz * _glesNormal.x)
   + 
    (v_61.xyz * _glesNormal.y)
  ) + (v_62.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_63;
  highp mat3 tmpvar_64;
  tmpvar_64[0] = _Object2World[0].xyz;
  tmpvar_64[1] = _Object2World[1].xyz;
  tmpvar_64[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_65;
  tmpvar_65 = normalize((tmpvar_64 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_65;
  lowp vec3 tmpvar_66;
  tmpvar_66 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_67;
  tmpvar_67 = (tmpvar_66 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68.x = worldTangent_3.x;
  tmpvar_68.y = worldBinormal_2.x;
  tmpvar_68.z = worldNormal_4.x;
  tmpvar_68.w = tmpvar_59.x;
  highp vec4 tmpvar_69;
  tmpvar_69.x = worldTangent_3.y;
  tmpvar_69.y = worldBinormal_2.y;
  tmpvar_69.z = worldNormal_4.y;
  tmpvar_69.w = tmpvar_59.y;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_3.z;
  tmpvar_70.y = worldBinormal_2.z;
  tmpvar_70.z = worldNormal_4.z;
  tmpvar_70.w = tmpvar_59.z;
  lowp vec4 tmpvar_71;
  tmpvar_71.w = 1.0;
  tmpvar_71.xyz = worldNormal_4;
  mediump vec4 normal_72;
  normal_72 = tmpvar_71;
  mediump vec3 x2_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = (normal_72.xyzz * normal_72.yzzx);
  x2_73.x = dot (unity_SHBr, tmpvar_74);
  x2_73.y = dot (unity_SHBg, tmpvar_74);
  x2_73.z = dot (unity_SHBb, tmpvar_74);
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_68;
  xlv_TEXCOORD1 = tmpvar_69;
  xlv_TEXCOORD2 = tmpvar_70;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = (x2_73 + (unity_SHC.xyz * (
    (normal_72.x * normal_72.x)
   - 
    (normal_72.y * normal_72.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_11.x = tmpvar_12.x;
  mediump float tmpvar_13;
  tmpvar_13 = fract(tmpvar_12.y);
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_13 * 0.0625) + unity_LODFade.y);
  projUV_11.y = tmpvar_14;
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_18 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_19;
  tmpvar_19 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD0.xyz, tmpvar_20);
  worldN_3.x = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD1.xyz, tmpvar_20);
  worldN_3.y = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD2.xyz, tmpvar_20);
  worldN_3.z = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_24;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_25;
  normalWorld_25 = worldN_3;
  mediump vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = normalWorld_25;
  mediump vec3 x1_27;
  x1_27.x = dot (unity_SHAr, tmpvar_26);
  x1_27.y = dot (unity_SHAg, tmpvar_26);
  x1_27.z = dot (unity_SHAb, tmpvar_26);
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_30 = tmpvar_31;
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tmpvar_8 * tmpvar_1) * diff_30);
  c_29.xyz = tmpvar_32;
  c_29.w = tmpvar_9;
  c_28.w = c_29.w;
  mediump vec3 tmpvar_33;
  tmpvar_33 = (c_29.xyz + (tmpvar_8 * (xlv_TEXCOORD6 + x1_27)));
  c_28.xyz = tmpvar_33;
  c_4.xyz = c_28.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fAdherenceScale_24;
      highp vec3 tmpvar_25;
      tmpvar_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_26;
      tmpvar_26 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (tmpvar_26 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((tmpvar_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_26 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((tmpvar_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        (mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_27.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((tmpvar_25 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((tmpvar_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((
        ((tmpvar_35.x * tmpvar_35.y) * tmpvar_35.x)
       * tmpvar_35.y) * _ST_WindTurbulences.x));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp vec3 tmpvar_38;
      tmpvar_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_39;
      tmpvar_39 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_40;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (tmpvar_39 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((tmpvar_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      vPos_37 = (vPos_22 + ((tmpvar_38 * 
        (((mix (
          mix (tmpvar_45, fTarget_42, fAmount_41)
        , fTarget_42, fAmount_41) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_17;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_50.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    vPos_46.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * (
      ((_ST_WindGlobal.y * (tmpvar_51.x + (tmpvar_51.y * tmpvar_51.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_47)));
    vPos_46 = (normalize(vPos_46) * fLength_48);
    FinalPosition_17 = vPos_46;
  };
  tmpvar_14.xyz = FinalPosition_17;
  highp vec4 tmpvar_53;
  tmpvar_53 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (tmpvar_53 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = tmpvar_53.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  tmpvar_8 = tmpvar_57;
  highp vec2 tmpvar_58;
  tmpvar_58 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_58;
  tmpvar_5 = tmpvar_6;
  highp vec3 tmpvar_59;
  tmpvar_59 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_60;
  v_60.x = _World2Object[0].x;
  v_60.y = _World2Object[1].x;
  v_60.z = _World2Object[2].x;
  v_60.w = _World2Object[3].x;
  highp vec4 v_61;
  v_61.x = _World2Object[0].y;
  v_61.y = _World2Object[1].y;
  v_61.z = _World2Object[2].y;
  v_61.w = _World2Object[3].y;
  highp vec4 v_62;
  v_62.x = _World2Object[0].z;
  v_62.y = _World2Object[1].z;
  v_62.z = _World2Object[2].z;
  v_62.w = _World2Object[3].z;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize(((
    (v_60.xyz * _glesNormal.x)
   + 
    (v_61.xyz * _glesNormal.y)
  ) + (v_62.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_63;
  highp mat3 tmpvar_64;
  tmpvar_64[0] = _Object2World[0].xyz;
  tmpvar_64[1] = _Object2World[1].xyz;
  tmpvar_64[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_65;
  tmpvar_65 = normalize((tmpvar_64 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_65;
  lowp vec3 tmpvar_66;
  tmpvar_66 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_67;
  tmpvar_67 = (tmpvar_66 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68.x = worldTangent_3.x;
  tmpvar_68.y = worldBinormal_2.x;
  tmpvar_68.z = worldNormal_4.x;
  tmpvar_68.w = tmpvar_59.x;
  highp vec4 tmpvar_69;
  tmpvar_69.x = worldTangent_3.y;
  tmpvar_69.y = worldBinormal_2.y;
  tmpvar_69.z = worldNormal_4.y;
  tmpvar_69.w = tmpvar_59.y;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_3.z;
  tmpvar_70.y = worldBinormal_2.z;
  tmpvar_70.z = worldNormal_4.z;
  tmpvar_70.w = tmpvar_59.z;
  lowp vec4 tmpvar_71;
  tmpvar_71.w = 1.0;
  tmpvar_71.xyz = worldNormal_4;
  mediump vec4 normal_72;
  normal_72 = tmpvar_71;
  mediump vec3 x2_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = (normal_72.xyzz * normal_72.yzzx);
  x2_73.x = dot (unity_SHBr, tmpvar_74);
  x2_73.y = dot (unity_SHBg, tmpvar_74);
  x2_73.z = dot (unity_SHBb, tmpvar_74);
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_68;
  xlv_TEXCOORD1 = tmpvar_69;
  xlv_TEXCOORD2 = tmpvar_70;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = (x2_73 + (unity_SHC.xyz * (
    (normal_72.x * normal_72.x)
   - 
    (normal_72.y * normal_72.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_11.x = tmpvar_12.x;
  mediump float tmpvar_13;
  tmpvar_13 = fract(tmpvar_12.y);
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_13 * 0.0625) + unity_LODFade.y);
  projUV_11.y = tmpvar_14;
  lowp float x_15;
  x_15 = (texture (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_18 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_19;
  tmpvar_19 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD0.xyz, tmpvar_20);
  worldN_3.x = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD1.xyz, tmpvar_20);
  worldN_3.y = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD2.xyz, tmpvar_20);
  worldN_3.z = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_24;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_25;
  normalWorld_25 = worldN_3;
  mediump vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = normalWorld_25;
  mediump vec3 x1_27;
  x1_27.x = dot (unity_SHAr, tmpvar_26);
  x1_27.y = dot (unity_SHAg, tmpvar_26);
  x1_27.z = dot (unity_SHAb, tmpvar_26);
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_30 = tmpvar_31;
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tmpvar_8 * tmpvar_1) * diff_30);
  c_29.xyz = tmpvar_32;
  c_29.w = tmpvar_9;
  c_28.w = c_29.w;
  mediump vec3 tmpvar_33;
  tmpvar_33 = (c_29.xyz + (tmpvar_8 * (xlv_TEXCOORD6 + x1_27)));
  c_28.xyz = tmpvar_33;
  c_4.xyz = c_28.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_19;
      highp float fAdherenceScale_25;
      highp vec3 tmpvar_26;
      tmpvar_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_27;
      tmpvar_27 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (tmpvar_27 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_27 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((tmpvar_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        (mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_28.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (_glesVertex.xyz + ((tmpvar_26 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((tmpvar_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((
        ((tmpvar_36.x * tmpvar_36.y) * tmpvar_36.x)
       * tmpvar_36.y) * _ST_WindTurbulences.x));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp vec3 tmpvar_39;
      tmpvar_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_40;
      tmpvar_40 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_41;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (tmpvar_40 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((tmpvar_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      vPos_38 = (vPos_23 + ((tmpvar_39 * 
        (((mix (
          mix (tmpvar_46, fTarget_43, fAmount_42)
        , fTarget_43, fAmount_42) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_18;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_51.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    vPos_47.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_52.x + (tmpvar_52.y * tmpvar_52.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_48)));
    vPos_47 = (normalize(vPos_47) * fLength_49);
    FinalPosition_18 = vPos_47;
  };
  tmpvar_15.xyz = FinalPosition_18;
  highp vec4 tmpvar_54;
  tmpvar_54 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (tmpvar_54 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = tmpvar_54.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  tmpvar_9 = tmpvar_58;
  highp vec2 tmpvar_59;
  tmpvar_59 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_59;
  tmpvar_5 = tmpvar_7;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_64;
  highp mat3 tmpvar_65;
  tmpvar_65[0] = _Object2World[0].xyz;
  tmpvar_65[1] = _Object2World[1].xyz;
  tmpvar_65[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize((tmpvar_65 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_67 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69.x = worldTangent_3.x;
  tmpvar_69.y = worldBinormal_2.x;
  tmpvar_69.z = worldNormal_4.x;
  tmpvar_69.w = tmpvar_60.x;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_3.y;
  tmpvar_70.y = worldBinormal_2.y;
  tmpvar_70.z = worldNormal_4.y;
  tmpvar_70.w = tmpvar_60.y;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_3.z;
  tmpvar_71.y = worldBinormal_2.z;
  tmpvar_71.z = worldNormal_4.z;
  tmpvar_71.w = tmpvar_60.z;
  lowp vec4 tmpvar_72;
  tmpvar_72.w = 1.0;
  tmpvar_72.xyz = worldNormal_4;
  mediump vec4 normal_73;
  normal_73 = tmpvar_72;
  mediump vec3 x2_74;
  mediump vec4 tmpvar_75;
  tmpvar_75 = (normal_73.xyzz * normal_73.yzzx);
  x2_74.x = dot (unity_SHBr, tmpvar_75);
  x2_74.y = dot (unity_SHBg, tmpvar_75);
  x2_74.z = dot (unity_SHBb, tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = (unity_World2Shadow[0] * (_Object2World * tmpvar_15));
  tmpvar_6 = tmpvar_76;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_69;
  xlv_TEXCOORD1 = tmpvar_70;
  xlv_TEXCOORD2 = tmpvar_71;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = (x2_74 + (unity_SHC.xyz * (
    (normal_73.x * normal_73.x)
   - 
    (normal_73.y * normal_73.y)
  )));
  xlv_TEXCOORD7 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_19 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_22;
  mediump float dist_23;
  lowp float tmpvar_24;
  tmpvar_24 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x;
  dist_23 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (float((dist_23 > 
    (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w)
  )), _LightShadowData.x);
  tmpvar_22 = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD0.xyz, tmpvar_21);
  worldN_4.x = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD1.xyz, tmpvar_21);
  worldN_4.y = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD2.xyz, tmpvar_21);
  worldN_4.z = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_29;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_22;
  mediump vec3 normalWorld_30;
  normalWorld_30 = worldN_4;
  mediump vec3 tmpvar_31;
  mediump vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = normalWorld_30;
  mediump vec3 x1_33;
  x1_33.x = dot (unity_SHAr, tmpvar_32);
  x1_33.y = dot (unity_SHAg, tmpvar_32);
  x1_33.z = dot (unity_SHAb, tmpvar_32);
  tmpvar_31 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_31;
  lowp vec4 c_34;
  lowp vec4 c_35;
  lowp float diff_36;
  mediump float tmpvar_37;
  tmpvar_37 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_36 = tmpvar_37;
  mediump vec3 tmpvar_38;
  tmpvar_38 = ((tmpvar_9 * tmpvar_31) * diff_36);
  c_35.xyz = tmpvar_38;
  c_35.w = tmpvar_10;
  c_34.w = c_35.w;
  mediump vec3 tmpvar_39;
  tmpvar_39 = (c_35.xyz + (tmpvar_9 * (xlv_TEXCOORD6 + x1_33)));
  c_34.xyz = tmpvar_39;
  c_5.xyz = c_34.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_19;
      highp float fAdherenceScale_25;
      highp vec3 tmpvar_26;
      tmpvar_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_27;
      tmpvar_27 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (tmpvar_27 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_27 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((tmpvar_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        (mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_28.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (_glesVertex.xyz + ((tmpvar_26 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((tmpvar_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((
        ((tmpvar_36.x * tmpvar_36.y) * tmpvar_36.x)
       * tmpvar_36.y) * _ST_WindTurbulences.x));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp vec3 tmpvar_39;
      tmpvar_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_40;
      tmpvar_40 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_41;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (tmpvar_40 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((tmpvar_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      vPos_38 = (vPos_23 + ((tmpvar_39 * 
        (((mix (
          mix (tmpvar_46, fTarget_43, fAmount_42)
        , fTarget_43, fAmount_42) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_18;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_51.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    vPos_47.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_52.x + (tmpvar_52.y * tmpvar_52.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_48)));
    vPos_47 = (normalize(vPos_47) * fLength_49);
    FinalPosition_18 = vPos_47;
  };
  tmpvar_15.xyz = FinalPosition_18;
  highp vec4 tmpvar_54;
  tmpvar_54 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (tmpvar_54 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = tmpvar_54.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  tmpvar_9 = tmpvar_58;
  highp vec2 tmpvar_59;
  tmpvar_59 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_59;
  tmpvar_5 = tmpvar_7;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_64;
  highp mat3 tmpvar_65;
  tmpvar_65[0] = _Object2World[0].xyz;
  tmpvar_65[1] = _Object2World[1].xyz;
  tmpvar_65[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize((tmpvar_65 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_67 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69.x = worldTangent_3.x;
  tmpvar_69.y = worldBinormal_2.x;
  tmpvar_69.z = worldNormal_4.x;
  tmpvar_69.w = tmpvar_60.x;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_3.y;
  tmpvar_70.y = worldBinormal_2.y;
  tmpvar_70.z = worldNormal_4.y;
  tmpvar_70.w = tmpvar_60.y;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_3.z;
  tmpvar_71.y = worldBinormal_2.z;
  tmpvar_71.z = worldNormal_4.z;
  tmpvar_71.w = tmpvar_60.z;
  lowp vec4 tmpvar_72;
  tmpvar_72.w = 1.0;
  tmpvar_72.xyz = worldNormal_4;
  mediump vec3 tmpvar_73;
  mediump vec4 normal_74;
  normal_74 = tmpvar_72;
  mediump vec3 x2_75;
  mediump vec4 tmpvar_76;
  tmpvar_76 = (normal_74.xyzz * normal_74.yzzx);
  x2_75.x = dot (unity_SHBr, tmpvar_76);
  x2_75.y = dot (unity_SHBg, tmpvar_76);
  x2_75.z = dot (unity_SHBb, tmpvar_76);
  tmpvar_73 = (x2_75 + (unity_SHC.xyz * (
    (normal_74.x * normal_74.x)
   - 
    (normal_74.y * normal_74.y)
  )));
  highp vec3 lightColor0_77;
  lightColor0_77 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_78;
  lightColor1_78 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_79;
  lightColor2_79 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_80;
  lightColor3_80 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_81;
  lightAttenSq_81 = unity_4LightAtten0;
  highp vec3 normal_82;
  normal_82 = worldNormal_4;
  highp vec4 tmpvar_83;
  tmpvar_83 = (unity_4LightPosX0 - tmpvar_60.x);
  highp vec4 tmpvar_84;
  tmpvar_84 = (unity_4LightPosY0 - tmpvar_60.y);
  highp vec4 tmpvar_85;
  tmpvar_85 = (unity_4LightPosZ0 - tmpvar_60.z);
  highp vec4 tmpvar_86;
  tmpvar_86 = (((tmpvar_83 * tmpvar_83) + (tmpvar_84 * tmpvar_84)) + (tmpvar_85 * tmpvar_85));
  highp vec4 tmpvar_87;
  tmpvar_87 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_83 * normal_82.x) + (tmpvar_84 * normal_82.y)) + (tmpvar_85 * normal_82.z))
   * 
    inversesqrt(tmpvar_86)
  )) * (1.0/((1.0 + 
    (tmpvar_86 * lightAttenSq_81)
  ))));
  highp vec3 tmpvar_88;
  tmpvar_88 = (tmpvar_73 + ((
    ((lightColor0_77 * tmpvar_87.x) + (lightColor1_78 * tmpvar_87.y))
   + 
    (lightColor2_79 * tmpvar_87.z)
  ) + (lightColor3_80 * tmpvar_87.w)));
  tmpvar_6 = tmpvar_88;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_69;
  xlv_TEXCOORD1 = tmpvar_70;
  xlv_TEXCOORD2 = tmpvar_71;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_11.x = tmpvar_12.x;
  mediump float tmpvar_13;
  tmpvar_13 = fract(tmpvar_12.y);
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_13 * 0.0625) + unity_LODFade.y);
  projUV_11.y = tmpvar_14;
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_18 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_19;
  tmpvar_19 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD0.xyz, tmpvar_20);
  worldN_3.x = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD1.xyz, tmpvar_20);
  worldN_3.y = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD2.xyz, tmpvar_20);
  worldN_3.z = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_24;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_25;
  normalWorld_25 = worldN_3;
  mediump vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = normalWorld_25;
  mediump vec3 x1_27;
  x1_27.x = dot (unity_SHAr, tmpvar_26);
  x1_27.y = dot (unity_SHAg, tmpvar_26);
  x1_27.z = dot (unity_SHAb, tmpvar_26);
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_30 = tmpvar_31;
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tmpvar_8 * tmpvar_1) * diff_30);
  c_29.xyz = tmpvar_32;
  c_29.w = tmpvar_9;
  c_28.w = c_29.w;
  mediump vec3 tmpvar_33;
  tmpvar_33 = (c_29.xyz + (tmpvar_8 * (xlv_TEXCOORD6 + x1_27)));
  c_28.xyz = tmpvar_33;
  c_4.xyz = c_28.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_19;
      highp float fAdherenceScale_25;
      highp vec3 tmpvar_26;
      tmpvar_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_27;
      tmpvar_27 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (tmpvar_27 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_27 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((tmpvar_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        (mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_28.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (_glesVertex.xyz + ((tmpvar_26 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((tmpvar_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((
        ((tmpvar_36.x * tmpvar_36.y) * tmpvar_36.x)
       * tmpvar_36.y) * _ST_WindTurbulences.x));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp vec3 tmpvar_39;
      tmpvar_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_40;
      tmpvar_40 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_41;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (tmpvar_40 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((tmpvar_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      vPos_38 = (vPos_23 + ((tmpvar_39 * 
        (((mix (
          mix (tmpvar_46, fTarget_43, fAmount_42)
        , fTarget_43, fAmount_42) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_18;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_51.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    vPos_47.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_52.x + (tmpvar_52.y * tmpvar_52.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_48)));
    vPos_47 = (normalize(vPos_47) * fLength_49);
    FinalPosition_18 = vPos_47;
  };
  tmpvar_15.xyz = FinalPosition_18;
  highp vec4 tmpvar_54;
  tmpvar_54 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (tmpvar_54 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = tmpvar_54.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  tmpvar_9 = tmpvar_58;
  highp vec2 tmpvar_59;
  tmpvar_59 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_59;
  tmpvar_5 = tmpvar_7;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_64;
  highp mat3 tmpvar_65;
  tmpvar_65[0] = _Object2World[0].xyz;
  tmpvar_65[1] = _Object2World[1].xyz;
  tmpvar_65[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize((tmpvar_65 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_67 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69.x = worldTangent_3.x;
  tmpvar_69.y = worldBinormal_2.x;
  tmpvar_69.z = worldNormal_4.x;
  tmpvar_69.w = tmpvar_60.x;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_3.y;
  tmpvar_70.y = worldBinormal_2.y;
  tmpvar_70.z = worldNormal_4.y;
  tmpvar_70.w = tmpvar_60.y;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_3.z;
  tmpvar_71.y = worldBinormal_2.z;
  tmpvar_71.z = worldNormal_4.z;
  tmpvar_71.w = tmpvar_60.z;
  lowp vec4 tmpvar_72;
  tmpvar_72.w = 1.0;
  tmpvar_72.xyz = worldNormal_4;
  mediump vec3 tmpvar_73;
  mediump vec4 normal_74;
  normal_74 = tmpvar_72;
  mediump vec3 x2_75;
  mediump vec4 tmpvar_76;
  tmpvar_76 = (normal_74.xyzz * normal_74.yzzx);
  x2_75.x = dot (unity_SHBr, tmpvar_76);
  x2_75.y = dot (unity_SHBg, tmpvar_76);
  x2_75.z = dot (unity_SHBb, tmpvar_76);
  tmpvar_73 = (x2_75 + (unity_SHC.xyz * (
    (normal_74.x * normal_74.x)
   - 
    (normal_74.y * normal_74.y)
  )));
  highp vec3 lightColor0_77;
  lightColor0_77 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_78;
  lightColor1_78 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_79;
  lightColor2_79 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_80;
  lightColor3_80 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_81;
  lightAttenSq_81 = unity_4LightAtten0;
  highp vec3 normal_82;
  normal_82 = worldNormal_4;
  highp vec4 tmpvar_83;
  tmpvar_83 = (unity_4LightPosX0 - tmpvar_60.x);
  highp vec4 tmpvar_84;
  tmpvar_84 = (unity_4LightPosY0 - tmpvar_60.y);
  highp vec4 tmpvar_85;
  tmpvar_85 = (unity_4LightPosZ0 - tmpvar_60.z);
  highp vec4 tmpvar_86;
  tmpvar_86 = (((tmpvar_83 * tmpvar_83) + (tmpvar_84 * tmpvar_84)) + (tmpvar_85 * tmpvar_85));
  highp vec4 tmpvar_87;
  tmpvar_87 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_83 * normal_82.x) + (tmpvar_84 * normal_82.y)) + (tmpvar_85 * normal_82.z))
   * 
    inversesqrt(tmpvar_86)
  )) * (1.0/((1.0 + 
    (tmpvar_86 * lightAttenSq_81)
  ))));
  highp vec3 tmpvar_88;
  tmpvar_88 = (tmpvar_73 + ((
    ((lightColor0_77 * tmpvar_87.x) + (lightColor1_78 * tmpvar_87.y))
   + 
    (lightColor2_79 * tmpvar_87.z)
  ) + (lightColor3_80 * tmpvar_87.w)));
  tmpvar_6 = tmpvar_88;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_69;
  xlv_TEXCOORD1 = tmpvar_70;
  xlv_TEXCOORD2 = tmpvar_71;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_6;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_11.x = tmpvar_12.x;
  mediump float tmpvar_13;
  tmpvar_13 = fract(tmpvar_12.y);
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_13 * 0.0625) + unity_LODFade.y);
  projUV_11.y = tmpvar_14;
  lowp float x_15;
  x_15 = (texture (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_18 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_19;
  tmpvar_19 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD0.xyz, tmpvar_20);
  worldN_3.x = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD1.xyz, tmpvar_20);
  worldN_3.y = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD2.xyz, tmpvar_20);
  worldN_3.z = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_24;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_25;
  normalWorld_25 = worldN_3;
  mediump vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = normalWorld_25;
  mediump vec3 x1_27;
  x1_27.x = dot (unity_SHAr, tmpvar_26);
  x1_27.y = dot (unity_SHAg, tmpvar_26);
  x1_27.z = dot (unity_SHAb, tmpvar_26);
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_30 = tmpvar_31;
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tmpvar_8 * tmpvar_1) * diff_30);
  c_29.xyz = tmpvar_32;
  c_29.w = tmpvar_9;
  c_28.w = c_29.w;
  mediump vec3 tmpvar_33;
  tmpvar_33 = (c_29.xyz + (tmpvar_8 * (xlv_TEXCOORD6 + x1_27)));
  c_28.xyz = tmpvar_33;
  c_4.xyz = c_28.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_11;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = tmpvar_1.xyz;
  FinalPosition_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = tmpvar_20;
      highp float fAdherenceScale_26;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((tmpvar_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        (mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_29.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (_glesVertex.xyz + ((tmpvar_27 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((tmpvar_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((
        ((tmpvar_37.x * tmpvar_37.y) * tmpvar_37.x)
       * tmpvar_37.y) * _ST_WindTurbulences.x));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_17 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp vec3 tmpvar_40;
      tmpvar_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_41;
      tmpvar_41 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_42;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (tmpvar_41 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((tmpvar_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      vPos_39 = (vPos_24 + ((tmpvar_40 * 
        (((mix (
          mix (tmpvar_47, fTarget_44, fAmount_43)
        , fTarget_44, fAmount_43) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_19 = vPos_24;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_19;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_52.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    vPos_48.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_53.x + (tmpvar_53.y * tmpvar_53.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_49)));
    vPos_48 = (normalize(vPos_48) * fLength_50);
    FinalPosition_19 = vPos_48;
  };
  tmpvar_16.xyz = FinalPosition_19;
  highp vec4 tmpvar_55;
  tmpvar_55 = (glstate_matrix_mvp * tmpvar_16);
  highp vec4 o_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (tmpvar_55 * 0.5);
  highp vec2 tmpvar_58;
  tmpvar_58.x = tmpvar_57.x;
  tmpvar_58.y = (tmpvar_57.y * _ProjectionParams.x);
  o_56.xy = (tmpvar_58 + tmpvar_57.w);
  o_56.zw = tmpvar_55.zw;
  highp vec3 tmpvar_59;
  tmpvar_59 = o_56.xyw;
  tmpvar_10 = tmpvar_59;
  highp vec2 tmpvar_60;
  tmpvar_60 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_60;
  tmpvar_5 = tmpvar_8;
  highp vec3 tmpvar_61;
  tmpvar_61 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_62;
  v_62.x = _World2Object[0].x;
  v_62.y = _World2Object[1].x;
  v_62.z = _World2Object[2].x;
  v_62.w = _World2Object[3].x;
  highp vec4 v_63;
  v_63.x = _World2Object[0].y;
  v_63.y = _World2Object[1].y;
  v_63.z = _World2Object[2].y;
  v_63.w = _World2Object[3].y;
  highp vec4 v_64;
  v_64.x = _World2Object[0].z;
  v_64.y = _World2Object[1].z;
  v_64.z = _World2Object[2].z;
  v_64.w = _World2Object[3].z;
  highp vec3 tmpvar_65;
  tmpvar_65 = normalize(((
    (v_62.xyz * _glesNormal.x)
   + 
    (v_63.xyz * _glesNormal.y)
  ) + (v_64.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_65;
  highp mat3 tmpvar_66;
  tmpvar_66[0] = _Object2World[0].xyz;
  tmpvar_66[1] = _Object2World[1].xyz;
  tmpvar_66[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((tmpvar_66 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_69;
  tmpvar_69 = (tmpvar_68 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_3.x;
  tmpvar_70.y = worldBinormal_2.x;
  tmpvar_70.z = worldNormal_4.x;
  tmpvar_70.w = tmpvar_61.x;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_3.y;
  tmpvar_71.y = worldBinormal_2.y;
  tmpvar_71.z = worldNormal_4.y;
  tmpvar_71.w = tmpvar_61.y;
  highp vec4 tmpvar_72;
  tmpvar_72.x = worldTangent_3.z;
  tmpvar_72.y = worldBinormal_2.z;
  tmpvar_72.z = worldNormal_4.z;
  tmpvar_72.w = tmpvar_61.z;
  lowp vec4 tmpvar_73;
  tmpvar_73.w = 1.0;
  tmpvar_73.xyz = worldNormal_4;
  mediump vec3 tmpvar_74;
  mediump vec4 normal_75;
  normal_75 = tmpvar_73;
  mediump vec3 x2_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (normal_75.xyzz * normal_75.yzzx);
  x2_76.x = dot (unity_SHBr, tmpvar_77);
  x2_76.y = dot (unity_SHBg, tmpvar_77);
  x2_76.z = dot (unity_SHBb, tmpvar_77);
  tmpvar_74 = (x2_76 + (unity_SHC.xyz * (
    (normal_75.x * normal_75.x)
   - 
    (normal_75.y * normal_75.y)
  )));
  highp vec3 lightColor0_78;
  lightColor0_78 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_79;
  lightColor1_79 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_80;
  lightColor2_80 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_81;
  lightColor3_81 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_82;
  lightAttenSq_82 = unity_4LightAtten0;
  highp vec3 normal_83;
  normal_83 = worldNormal_4;
  highp vec4 tmpvar_84;
  tmpvar_84 = (unity_4LightPosX0 - tmpvar_61.x);
  highp vec4 tmpvar_85;
  tmpvar_85 = (unity_4LightPosY0 - tmpvar_61.y);
  highp vec4 tmpvar_86;
  tmpvar_86 = (unity_4LightPosZ0 - tmpvar_61.z);
  highp vec4 tmpvar_87;
  tmpvar_87 = (((tmpvar_84 * tmpvar_84) + (tmpvar_85 * tmpvar_85)) + (tmpvar_86 * tmpvar_86));
  highp vec4 tmpvar_88;
  tmpvar_88 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_84 * normal_83.x) + (tmpvar_85 * normal_83.y)) + (tmpvar_86 * normal_83.z))
   * 
    inversesqrt(tmpvar_87)
  )) * (1.0/((1.0 + 
    (tmpvar_87 * lightAttenSq_82)
  ))));
  highp vec3 tmpvar_89;
  tmpvar_89 = (tmpvar_74 + ((
    ((lightColor0_78 * tmpvar_88.x) + (lightColor1_79 * tmpvar_88.y))
   + 
    (lightColor2_80 * tmpvar_88.z)
  ) + (lightColor3_81 * tmpvar_88.w)));
  tmpvar_6 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = (unity_World2Shadow[0] * (_Object2World * tmpvar_16));
  tmpvar_7 = tmpvar_90;
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_70;
  xlv_TEXCOORD1 = tmpvar_71;
  xlv_TEXCOORD2 = tmpvar_72;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_19 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_22;
  mediump float dist_23;
  lowp float tmpvar_24;
  tmpvar_24 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x;
  dist_23 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (float((dist_23 > 
    (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w)
  )), _LightShadowData.x);
  tmpvar_22 = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD0.xyz, tmpvar_21);
  worldN_4.x = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD1.xyz, tmpvar_21);
  worldN_4.y = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD2.xyz, tmpvar_21);
  worldN_4.z = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_29;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_22;
  mediump vec3 normalWorld_30;
  normalWorld_30 = worldN_4;
  mediump vec3 tmpvar_31;
  mediump vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = normalWorld_30;
  mediump vec3 x1_33;
  x1_33.x = dot (unity_SHAr, tmpvar_32);
  x1_33.y = dot (unity_SHAg, tmpvar_32);
  x1_33.z = dot (unity_SHAb, tmpvar_32);
  tmpvar_31 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_31;
  lowp vec4 c_34;
  lowp vec4 c_35;
  lowp float diff_36;
  mediump float tmpvar_37;
  tmpvar_37 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_36 = tmpvar_37;
  mediump vec3 tmpvar_38;
  tmpvar_38 = ((tmpvar_9 * tmpvar_31) * diff_36);
  c_35.xyz = tmpvar_38;
  c_35.w = tmpvar_10;
  c_34.w = c_35.w;
  mediump vec3 tmpvar_39;
  tmpvar_39 = (c_35.xyz + (tmpvar_9 * (xlv_TEXCOORD6 + x1_33)));
  c_34.xyz = tmpvar_39;
  c_5.xyz = c_34.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_19;
      highp float fAdherenceScale_25;
      highp vec3 tmpvar_26;
      tmpvar_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_27;
      tmpvar_27 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (tmpvar_27 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_27 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((tmpvar_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        (mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_28.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (_glesVertex.xyz + ((tmpvar_26 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((tmpvar_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((
        ((tmpvar_36.x * tmpvar_36.y) * tmpvar_36.x)
       * tmpvar_36.y) * _ST_WindTurbulences.x));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp vec3 tmpvar_39;
      tmpvar_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_40;
      tmpvar_40 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_41;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (tmpvar_40 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((tmpvar_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      vPos_38 = (vPos_23 + ((tmpvar_39 * 
        (((mix (
          mix (tmpvar_46, fTarget_43, fAmount_42)
        , fTarget_43, fAmount_42) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_18;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_51.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    vPos_47.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_52.x + (tmpvar_52.y * tmpvar_52.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_48)));
    vPos_47 = (normalize(vPos_47) * fLength_49);
    FinalPosition_18 = vPos_47;
  };
  tmpvar_15.xyz = FinalPosition_18;
  highp vec4 tmpvar_54;
  tmpvar_54 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (tmpvar_54 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = tmpvar_54.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  tmpvar_9 = tmpvar_58;
  highp vec2 tmpvar_59;
  tmpvar_59 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_59;
  tmpvar_5 = tmpvar_7;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_64;
  highp mat3 tmpvar_65;
  tmpvar_65[0] = _Object2World[0].xyz;
  tmpvar_65[1] = _Object2World[1].xyz;
  tmpvar_65[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize((tmpvar_65 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_67 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69.x = worldTangent_3.x;
  tmpvar_69.y = worldBinormal_2.x;
  tmpvar_69.z = worldNormal_4.x;
  tmpvar_69.w = tmpvar_60.x;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_3.y;
  tmpvar_70.y = worldBinormal_2.y;
  tmpvar_70.z = worldNormal_4.y;
  tmpvar_70.w = tmpvar_60.y;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_3.z;
  tmpvar_71.y = worldBinormal_2.z;
  tmpvar_71.z = worldNormal_4.z;
  tmpvar_71.w = tmpvar_60.z;
  lowp vec4 tmpvar_72;
  tmpvar_72.w = 1.0;
  tmpvar_72.xyz = worldNormal_4;
  mediump vec4 normal_73;
  normal_73 = tmpvar_72;
  mediump vec3 x2_74;
  mediump vec4 tmpvar_75;
  tmpvar_75 = (normal_73.xyzz * normal_73.yzzx);
  x2_74.x = dot (unity_SHBr, tmpvar_75);
  x2_74.y = dot (unity_SHBg, tmpvar_75);
  x2_74.z = dot (unity_SHBb, tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = (unity_World2Shadow[0] * (_Object2World * tmpvar_15));
  tmpvar_6 = tmpvar_76;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_69;
  xlv_TEXCOORD1 = tmpvar_70;
  xlv_TEXCOORD2 = tmpvar_71;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = (x2_74 + (unity_SHC.xyz * (
    (normal_73.x * normal_73.x)
   - 
    (normal_73.y * normal_73.y)
  )));
  xlv_TEXCOORD7 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_19 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_22;
  lowp float tmpvar_23;
  tmpvar_23 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD7.xyz);
  mediump float tmpvar_24;
  tmpvar_24 = (_LightShadowData.x + (tmpvar_23 * (1.0 - _LightShadowData.x)));
  shadow_22 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD0.xyz, tmpvar_21);
  worldN_4.x = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD1.xyz, tmpvar_21);
  worldN_4.y = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD2.xyz, tmpvar_21);
  worldN_4.z = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_28;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_22;
  mediump vec3 normalWorld_29;
  normalWorld_29 = worldN_4;
  mediump vec3 tmpvar_30;
  mediump vec4 tmpvar_31;
  tmpvar_31.w = 1.0;
  tmpvar_31.xyz = normalWorld_29;
  mediump vec3 x1_32;
  x1_32.x = dot (unity_SHAr, tmpvar_31);
  x1_32.y = dot (unity_SHAg, tmpvar_31);
  x1_32.z = dot (unity_SHAb, tmpvar_31);
  tmpvar_30 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_30;
  lowp vec4 c_33;
  lowp vec4 c_34;
  lowp float diff_35;
  mediump float tmpvar_36;
  tmpvar_36 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_35 = tmpvar_36;
  mediump vec3 tmpvar_37;
  tmpvar_37 = ((tmpvar_9 * tmpvar_30) * diff_35);
  c_34.xyz = tmpvar_37;
  c_34.w = tmpvar_10;
  c_33.w = c_34.w;
  mediump vec3 tmpvar_38;
  tmpvar_38 = (c_34.xyz + (tmpvar_9 * (xlv_TEXCOORD6 + x1_32)));
  c_33.xyz = tmpvar_38;
  c_5.xyz = c_33.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
out mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_19;
      highp float fAdherenceScale_25;
      highp vec3 tmpvar_26;
      tmpvar_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_27;
      tmpvar_27 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (tmpvar_27 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_27 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((tmpvar_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        (mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_28.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (_glesVertex.xyz + ((tmpvar_26 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((tmpvar_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((
        ((tmpvar_36.x * tmpvar_36.y) * tmpvar_36.x)
       * tmpvar_36.y) * _ST_WindTurbulences.x));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp vec3 tmpvar_39;
      tmpvar_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_40;
      tmpvar_40 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_41;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (tmpvar_40 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((tmpvar_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      vPos_38 = (vPos_23 + ((tmpvar_39 * 
        (((mix (
          mix (tmpvar_46, fTarget_43, fAmount_42)
        , fTarget_43, fAmount_42) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_18;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_51.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    vPos_47.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_52.x + (tmpvar_52.y * tmpvar_52.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_48)));
    vPos_47 = (normalize(vPos_47) * fLength_49);
    FinalPosition_18 = vPos_47;
  };
  tmpvar_15.xyz = FinalPosition_18;
  highp vec4 tmpvar_54;
  tmpvar_54 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (tmpvar_54 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = tmpvar_54.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  tmpvar_9 = tmpvar_58;
  highp vec2 tmpvar_59;
  tmpvar_59 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_59;
  tmpvar_5 = tmpvar_7;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_64;
  highp mat3 tmpvar_65;
  tmpvar_65[0] = _Object2World[0].xyz;
  tmpvar_65[1] = _Object2World[1].xyz;
  tmpvar_65[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize((tmpvar_65 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_67 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69.x = worldTangent_3.x;
  tmpvar_69.y = worldBinormal_2.x;
  tmpvar_69.z = worldNormal_4.x;
  tmpvar_69.w = tmpvar_60.x;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_3.y;
  tmpvar_70.y = worldBinormal_2.y;
  tmpvar_70.z = worldNormal_4.y;
  tmpvar_70.w = tmpvar_60.y;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_3.z;
  tmpvar_71.y = worldBinormal_2.z;
  tmpvar_71.z = worldNormal_4.z;
  tmpvar_71.w = tmpvar_60.z;
  lowp vec4 tmpvar_72;
  tmpvar_72.w = 1.0;
  tmpvar_72.xyz = worldNormal_4;
  mediump vec4 normal_73;
  normal_73 = tmpvar_72;
  mediump vec3 x2_74;
  mediump vec4 tmpvar_75;
  tmpvar_75 = (normal_73.xyzz * normal_73.yzzx);
  x2_74.x = dot (unity_SHBr, tmpvar_75);
  x2_74.y = dot (unity_SHBg, tmpvar_75);
  x2_74.z = dot (unity_SHBb, tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = (unity_World2Shadow[0] * (_Object2World * tmpvar_15));
  tmpvar_6 = tmpvar_76;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_69;
  xlv_TEXCOORD1 = tmpvar_70;
  xlv_TEXCOORD2 = tmpvar_71;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = (x2_74 + (unity_SHC.xyz * (
    (normal_73.x * normal_73.x)
   - 
    (normal_73.y * normal_73.y)
  )));
  xlv_TEXCOORD7 = tmpvar_6;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
in mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_19 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_22;
  mediump float tmpvar_23;
  tmpvar_23 = texture (_ShadowMapTexture, xlv_TEXCOORD7.xyz);
  lowp float tmpvar_24;
  tmpvar_24 = tmpvar_23;
  mediump float tmpvar_25;
  tmpvar_25 = (_LightShadowData.x + (tmpvar_24 * (1.0 - _LightShadowData.x)));
  shadow_22 = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD0.xyz, tmpvar_21);
  worldN_4.x = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD1.xyz, tmpvar_21);
  worldN_4.y = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD2.xyz, tmpvar_21);
  worldN_4.z = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_29;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_22;
  mediump vec3 normalWorld_30;
  normalWorld_30 = worldN_4;
  mediump vec3 tmpvar_31;
  mediump vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = normalWorld_30;
  mediump vec3 x1_33;
  x1_33.x = dot (unity_SHAr, tmpvar_32);
  x1_33.y = dot (unity_SHAg, tmpvar_32);
  x1_33.z = dot (unity_SHAb, tmpvar_32);
  tmpvar_31 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_31;
  lowp vec4 c_34;
  lowp vec4 c_35;
  lowp float diff_36;
  mediump float tmpvar_37;
  tmpvar_37 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_36 = tmpvar_37;
  mediump vec3 tmpvar_38;
  tmpvar_38 = ((tmpvar_9 * tmpvar_31) * diff_36);
  c_35.xyz = tmpvar_38;
  c_35.w = tmpvar_10;
  c_34.w = c_35.w;
  mediump vec3 tmpvar_39;
  tmpvar_39 = (c_35.xyz + (tmpvar_9 * (xlv_TEXCOORD6 + x1_33)));
  c_34.xyz = tmpvar_39;
  c_5.xyz = c_34.xyz;
  c_5.w = 1.0;
  _glesFragData[0] = c_5;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_11;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = tmpvar_1.xyz;
  FinalPosition_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = tmpvar_20;
      highp float fAdherenceScale_26;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((tmpvar_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        (mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_29.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (_glesVertex.xyz + ((tmpvar_27 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((tmpvar_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((
        ((tmpvar_37.x * tmpvar_37.y) * tmpvar_37.x)
       * tmpvar_37.y) * _ST_WindTurbulences.x));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_17 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp vec3 tmpvar_40;
      tmpvar_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_41;
      tmpvar_41 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_42;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (tmpvar_41 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((tmpvar_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      vPos_39 = (vPos_24 + ((tmpvar_40 * 
        (((mix (
          mix (tmpvar_47, fTarget_44, fAmount_43)
        , fTarget_44, fAmount_43) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_19 = vPos_24;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_19;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_52.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    vPos_48.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_53.x + (tmpvar_53.y * tmpvar_53.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_49)));
    vPos_48 = (normalize(vPos_48) * fLength_50);
    FinalPosition_19 = vPos_48;
  };
  tmpvar_16.xyz = FinalPosition_19;
  highp vec4 tmpvar_55;
  tmpvar_55 = (glstate_matrix_mvp * tmpvar_16);
  highp vec4 o_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (tmpvar_55 * 0.5);
  highp vec2 tmpvar_58;
  tmpvar_58.x = tmpvar_57.x;
  tmpvar_58.y = (tmpvar_57.y * _ProjectionParams.x);
  o_56.xy = (tmpvar_58 + tmpvar_57.w);
  o_56.zw = tmpvar_55.zw;
  highp vec3 tmpvar_59;
  tmpvar_59 = o_56.xyw;
  tmpvar_10 = tmpvar_59;
  highp vec2 tmpvar_60;
  tmpvar_60 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_60;
  tmpvar_5 = tmpvar_8;
  highp vec3 tmpvar_61;
  tmpvar_61 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_62;
  v_62.x = _World2Object[0].x;
  v_62.y = _World2Object[1].x;
  v_62.z = _World2Object[2].x;
  v_62.w = _World2Object[3].x;
  highp vec4 v_63;
  v_63.x = _World2Object[0].y;
  v_63.y = _World2Object[1].y;
  v_63.z = _World2Object[2].y;
  v_63.w = _World2Object[3].y;
  highp vec4 v_64;
  v_64.x = _World2Object[0].z;
  v_64.y = _World2Object[1].z;
  v_64.z = _World2Object[2].z;
  v_64.w = _World2Object[3].z;
  highp vec3 tmpvar_65;
  tmpvar_65 = normalize(((
    (v_62.xyz * _glesNormal.x)
   + 
    (v_63.xyz * _glesNormal.y)
  ) + (v_64.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_65;
  highp mat3 tmpvar_66;
  tmpvar_66[0] = _Object2World[0].xyz;
  tmpvar_66[1] = _Object2World[1].xyz;
  tmpvar_66[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((tmpvar_66 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_69;
  tmpvar_69 = (tmpvar_68 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_3.x;
  tmpvar_70.y = worldBinormal_2.x;
  tmpvar_70.z = worldNormal_4.x;
  tmpvar_70.w = tmpvar_61.x;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_3.y;
  tmpvar_71.y = worldBinormal_2.y;
  tmpvar_71.z = worldNormal_4.y;
  tmpvar_71.w = tmpvar_61.y;
  highp vec4 tmpvar_72;
  tmpvar_72.x = worldTangent_3.z;
  tmpvar_72.y = worldBinormal_2.z;
  tmpvar_72.z = worldNormal_4.z;
  tmpvar_72.w = tmpvar_61.z;
  lowp vec4 tmpvar_73;
  tmpvar_73.w = 1.0;
  tmpvar_73.xyz = worldNormal_4;
  mediump vec3 tmpvar_74;
  mediump vec4 normal_75;
  normal_75 = tmpvar_73;
  mediump vec3 x2_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (normal_75.xyzz * normal_75.yzzx);
  x2_76.x = dot (unity_SHBr, tmpvar_77);
  x2_76.y = dot (unity_SHBg, tmpvar_77);
  x2_76.z = dot (unity_SHBb, tmpvar_77);
  tmpvar_74 = (x2_76 + (unity_SHC.xyz * (
    (normal_75.x * normal_75.x)
   - 
    (normal_75.y * normal_75.y)
  )));
  highp vec3 lightColor0_78;
  lightColor0_78 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_79;
  lightColor1_79 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_80;
  lightColor2_80 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_81;
  lightColor3_81 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_82;
  lightAttenSq_82 = unity_4LightAtten0;
  highp vec3 normal_83;
  normal_83 = worldNormal_4;
  highp vec4 tmpvar_84;
  tmpvar_84 = (unity_4LightPosX0 - tmpvar_61.x);
  highp vec4 tmpvar_85;
  tmpvar_85 = (unity_4LightPosY0 - tmpvar_61.y);
  highp vec4 tmpvar_86;
  tmpvar_86 = (unity_4LightPosZ0 - tmpvar_61.z);
  highp vec4 tmpvar_87;
  tmpvar_87 = (((tmpvar_84 * tmpvar_84) + (tmpvar_85 * tmpvar_85)) + (tmpvar_86 * tmpvar_86));
  highp vec4 tmpvar_88;
  tmpvar_88 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_84 * normal_83.x) + (tmpvar_85 * normal_83.y)) + (tmpvar_86 * normal_83.z))
   * 
    inversesqrt(tmpvar_87)
  )) * (1.0/((1.0 + 
    (tmpvar_87 * lightAttenSq_82)
  ))));
  highp vec3 tmpvar_89;
  tmpvar_89 = (tmpvar_74 + ((
    ((lightColor0_78 * tmpvar_88.x) + (lightColor1_79 * tmpvar_88.y))
   + 
    (lightColor2_80 * tmpvar_88.z)
  ) + (lightColor3_81 * tmpvar_88.w)));
  tmpvar_6 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = (unity_World2Shadow[0] * (_Object2World * tmpvar_16));
  tmpvar_7 = tmpvar_90;
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_70;
  xlv_TEXCOORD1 = tmpvar_71;
  xlv_TEXCOORD2 = tmpvar_72;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_19 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_22;
  lowp float tmpvar_23;
  tmpvar_23 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD7.xyz);
  mediump float tmpvar_24;
  tmpvar_24 = (_LightShadowData.x + (tmpvar_23 * (1.0 - _LightShadowData.x)));
  shadow_22 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD0.xyz, tmpvar_21);
  worldN_4.x = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD1.xyz, tmpvar_21);
  worldN_4.y = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD2.xyz, tmpvar_21);
  worldN_4.z = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_28;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_22;
  mediump vec3 normalWorld_29;
  normalWorld_29 = worldN_4;
  mediump vec3 tmpvar_30;
  mediump vec4 tmpvar_31;
  tmpvar_31.w = 1.0;
  tmpvar_31.xyz = normalWorld_29;
  mediump vec3 x1_32;
  x1_32.x = dot (unity_SHAr, tmpvar_31);
  x1_32.y = dot (unity_SHAg, tmpvar_31);
  x1_32.z = dot (unity_SHAb, tmpvar_31);
  tmpvar_30 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_30;
  lowp vec4 c_33;
  lowp vec4 c_34;
  lowp float diff_35;
  mediump float tmpvar_36;
  tmpvar_36 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_35 = tmpvar_36;
  mediump vec3 tmpvar_37;
  tmpvar_37 = ((tmpvar_9 * tmpvar_30) * diff_35);
  c_34.xyz = tmpvar_37;
  c_34.w = tmpvar_10;
  c_33.w = c_34.w;
  mediump vec3 tmpvar_38;
  tmpvar_38 = (c_34.xyz + (tmpvar_9 * (xlv_TEXCOORD6 + x1_32)));
  c_33.xyz = tmpvar_38;
  c_5.xyz = c_33.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
out mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_11;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = tmpvar_1.xyz;
  FinalPosition_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = tmpvar_20;
      highp float fAdherenceScale_26;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((tmpvar_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        (mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_29.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (_glesVertex.xyz + ((tmpvar_27 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((tmpvar_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((
        ((tmpvar_37.x * tmpvar_37.y) * tmpvar_37.x)
       * tmpvar_37.y) * _ST_WindTurbulences.x));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_17 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp vec3 tmpvar_40;
      tmpvar_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_41;
      tmpvar_41 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_42;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (tmpvar_41 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((tmpvar_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      vPos_39 = (vPos_24 + ((tmpvar_40 * 
        (((mix (
          mix (tmpvar_47, fTarget_44, fAmount_43)
        , fTarget_44, fAmount_43) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_19 = vPos_24;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_19;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_52.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    vPos_48.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_53.x + (tmpvar_53.y * tmpvar_53.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_49)));
    vPos_48 = (normalize(vPos_48) * fLength_50);
    FinalPosition_19 = vPos_48;
  };
  tmpvar_16.xyz = FinalPosition_19;
  highp vec4 tmpvar_55;
  tmpvar_55 = (glstate_matrix_mvp * tmpvar_16);
  highp vec4 o_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (tmpvar_55 * 0.5);
  highp vec2 tmpvar_58;
  tmpvar_58.x = tmpvar_57.x;
  tmpvar_58.y = (tmpvar_57.y * _ProjectionParams.x);
  o_56.xy = (tmpvar_58 + tmpvar_57.w);
  o_56.zw = tmpvar_55.zw;
  highp vec3 tmpvar_59;
  tmpvar_59 = o_56.xyw;
  tmpvar_10 = tmpvar_59;
  highp vec2 tmpvar_60;
  tmpvar_60 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_60;
  tmpvar_5 = tmpvar_8;
  highp vec3 tmpvar_61;
  tmpvar_61 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_62;
  v_62.x = _World2Object[0].x;
  v_62.y = _World2Object[1].x;
  v_62.z = _World2Object[2].x;
  v_62.w = _World2Object[3].x;
  highp vec4 v_63;
  v_63.x = _World2Object[0].y;
  v_63.y = _World2Object[1].y;
  v_63.z = _World2Object[2].y;
  v_63.w = _World2Object[3].y;
  highp vec4 v_64;
  v_64.x = _World2Object[0].z;
  v_64.y = _World2Object[1].z;
  v_64.z = _World2Object[2].z;
  v_64.w = _World2Object[3].z;
  highp vec3 tmpvar_65;
  tmpvar_65 = normalize(((
    (v_62.xyz * _glesNormal.x)
   + 
    (v_63.xyz * _glesNormal.y)
  ) + (v_64.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_65;
  highp mat3 tmpvar_66;
  tmpvar_66[0] = _Object2World[0].xyz;
  tmpvar_66[1] = _Object2World[1].xyz;
  tmpvar_66[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((tmpvar_66 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_69;
  tmpvar_69 = (tmpvar_68 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_3.x;
  tmpvar_70.y = worldBinormal_2.x;
  tmpvar_70.z = worldNormal_4.x;
  tmpvar_70.w = tmpvar_61.x;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_3.y;
  tmpvar_71.y = worldBinormal_2.y;
  tmpvar_71.z = worldNormal_4.y;
  tmpvar_71.w = tmpvar_61.y;
  highp vec4 tmpvar_72;
  tmpvar_72.x = worldTangent_3.z;
  tmpvar_72.y = worldBinormal_2.z;
  tmpvar_72.z = worldNormal_4.z;
  tmpvar_72.w = tmpvar_61.z;
  lowp vec4 tmpvar_73;
  tmpvar_73.w = 1.0;
  tmpvar_73.xyz = worldNormal_4;
  mediump vec3 tmpvar_74;
  mediump vec4 normal_75;
  normal_75 = tmpvar_73;
  mediump vec3 x2_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (normal_75.xyzz * normal_75.yzzx);
  x2_76.x = dot (unity_SHBr, tmpvar_77);
  x2_76.y = dot (unity_SHBg, tmpvar_77);
  x2_76.z = dot (unity_SHBb, tmpvar_77);
  tmpvar_74 = (x2_76 + (unity_SHC.xyz * (
    (normal_75.x * normal_75.x)
   - 
    (normal_75.y * normal_75.y)
  )));
  highp vec3 lightColor0_78;
  lightColor0_78 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_79;
  lightColor1_79 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_80;
  lightColor2_80 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_81;
  lightColor3_81 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_82;
  lightAttenSq_82 = unity_4LightAtten0;
  highp vec3 normal_83;
  normal_83 = worldNormal_4;
  highp vec4 tmpvar_84;
  tmpvar_84 = (unity_4LightPosX0 - tmpvar_61.x);
  highp vec4 tmpvar_85;
  tmpvar_85 = (unity_4LightPosY0 - tmpvar_61.y);
  highp vec4 tmpvar_86;
  tmpvar_86 = (unity_4LightPosZ0 - tmpvar_61.z);
  highp vec4 tmpvar_87;
  tmpvar_87 = (((tmpvar_84 * tmpvar_84) + (tmpvar_85 * tmpvar_85)) + (tmpvar_86 * tmpvar_86));
  highp vec4 tmpvar_88;
  tmpvar_88 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_84 * normal_83.x) + (tmpvar_85 * normal_83.y)) + (tmpvar_86 * normal_83.z))
   * 
    inversesqrt(tmpvar_87)
  )) * (1.0/((1.0 + 
    (tmpvar_87 * lightAttenSq_82)
  ))));
  highp vec3 tmpvar_89;
  tmpvar_89 = (tmpvar_74 + ((
    ((lightColor0_78 * tmpvar_88.x) + (lightColor1_79 * tmpvar_88.y))
   + 
    (lightColor2_80 * tmpvar_88.z)
  ) + (lightColor3_81 * tmpvar_88.w)));
  tmpvar_6 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = (unity_World2Shadow[0] * (_Object2World * tmpvar_16));
  tmpvar_7 = tmpvar_90;
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_70;
  xlv_TEXCOORD1 = tmpvar_71;
  xlv_TEXCOORD2 = tmpvar_72;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
in mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_19 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_22;
  mediump float tmpvar_23;
  tmpvar_23 = texture (_ShadowMapTexture, xlv_TEXCOORD7.xyz);
  lowp float tmpvar_24;
  tmpvar_24 = tmpvar_23;
  mediump float tmpvar_25;
  tmpvar_25 = (_LightShadowData.x + (tmpvar_24 * (1.0 - _LightShadowData.x)));
  shadow_22 = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD0.xyz, tmpvar_21);
  worldN_4.x = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD1.xyz, tmpvar_21);
  worldN_4.y = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD2.xyz, tmpvar_21);
  worldN_4.z = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_29;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_22;
  mediump vec3 normalWorld_30;
  normalWorld_30 = worldN_4;
  mediump vec3 tmpvar_31;
  mediump vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = normalWorld_30;
  mediump vec3 x1_33;
  x1_33.x = dot (unity_SHAr, tmpvar_32);
  x1_33.y = dot (unity_SHAg, tmpvar_32);
  x1_33.z = dot (unity_SHAb, tmpvar_32);
  tmpvar_31 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_31;
  lowp vec4 c_34;
  lowp vec4 c_35;
  lowp float diff_36;
  mediump float tmpvar_37;
  tmpvar_37 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_36 = tmpvar_37;
  mediump vec3 tmpvar_38;
  tmpvar_38 = ((tmpvar_9 * tmpvar_31) * diff_36);
  c_35.xyz = tmpvar_38;
  c_35.w = tmpvar_10;
  c_34.w = c_35.w;
  mediump vec3 tmpvar_39;
  tmpvar_39 = (c_35.xyz + (tmpvar_9 * (xlv_TEXCOORD6 + x1_33)));
  c_34.xyz = tmpvar_39;
  c_5.xyz = c_34.xyz;
  c_5.w = 1.0;
  _glesFragData[0] = c_5;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_9;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord2.xy;
  tmpvar_7.xy = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_16;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_16;
      highp float fAdherenceScale_23;
      highp vec3 tmpvar_24;
      tmpvar_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_25;
      tmpvar_25 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (tmpvar_25 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((tmpvar_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_25 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((tmpvar_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        (mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_26.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (_glesVertex.xyz + ((tmpvar_24 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((tmpvar_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((
        ((tmpvar_34.x * tmpvar_34.y) * tmpvar_34.x)
       * tmpvar_34.y) * _ST_WindTurbulences.x));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_13 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp vec3 tmpvar_37;
      tmpvar_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_38;
      tmpvar_38 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_39;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (tmpvar_38 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((tmpvar_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      vPos_36 = (vPos_21 + ((tmpvar_37 * 
        (((mix (
          mix (tmpvar_44, fTarget_41, fAmount_40)
        , fTarget_41, fAmount_40) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_15 = vPos_21;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_50.x + (tmpvar_50.y * tmpvar_50.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_46)));
    vPos_45 = (normalize(vPos_45) * fLength_47);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  highp vec4 tmpvar_52;
  tmpvar_52 = (glstate_matrix_mvp * tmpvar_12);
  highp vec4 o_53;
  highp vec4 tmpvar_54;
  tmpvar_54 = (tmpvar_52 * 0.5);
  highp vec2 tmpvar_55;
  tmpvar_55.x = tmpvar_54.x;
  tmpvar_55.y = (tmpvar_54.y * _ProjectionParams.x);
  o_53.xy = (tmpvar_55 + tmpvar_54.w);
  o_53.zw = tmpvar_52.zw;
  highp vec3 tmpvar_56;
  tmpvar_56 = o_53.xyw;
  tmpvar_8 = tmpvar_56;
  highp vec2 tmpvar_57;
  tmpvar_57 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_57;
  tmpvar_4 = tmpvar_5;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * _glesNormal.x)
   + 
    (v_59.xyz * _glesNormal.y)
  ) + (v_60.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_61;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_62;
  tmpvar_62.w = 1.0;
  tmpvar_62.xyz = worldNormal_2;
  mediump vec4 normal_63;
  normal_63 = tmpvar_62;
  mediump vec3 x2_64;
  mediump vec4 tmpvar_65;
  tmpvar_65 = (normal_63.xyzz * normal_63.yzzx);
  x2_64.x = dot (unity_SHBr, tmpvar_65);
  x2_64.y = dot (unity_SHBg, tmpvar_65);
  x2_64.z = dot (unity_SHBb, tmpvar_65);
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = (x2_64 + (unity_SHC.xyz * (
    (normal_63.x * normal_63.x)
   - 
    (normal_63.y * normal_63.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 detailColor_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_DetailTex, xlv_TEXCOORD4.xy);
  detailColor_10 = tmpvar_19;
  diffuseColor_11.xyz = mix (diffuseColor_11.xyz, detailColor_10.xyz, detailColor_10.www);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_21;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_22;
  normalWorld_22 = tmpvar_4;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_22;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_27 = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_8 * tmpvar_1) * diff_27);
  c_26.xyz = tmpvar_29;
  c_26.w = tmpvar_9;
  c_25.w = c_26.w;
  mediump vec3 tmpvar_30;
  tmpvar_30 = (c_26.xyz + (tmpvar_8 * (xlv_TEXCOORD6 + x1_24)));
  c_25.xyz = tmpvar_30;
  c_3.xyz = c_25.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_9;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord2.xy;
  tmpvar_7.xy = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_16;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_16;
      highp float fAdherenceScale_23;
      highp vec3 tmpvar_24;
      tmpvar_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_25;
      tmpvar_25 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (tmpvar_25 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((tmpvar_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_25 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((tmpvar_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        (mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_26.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (_glesVertex.xyz + ((tmpvar_24 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((tmpvar_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((
        ((tmpvar_34.x * tmpvar_34.y) * tmpvar_34.x)
       * tmpvar_34.y) * _ST_WindTurbulences.x));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_13 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp vec3 tmpvar_37;
      tmpvar_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_38;
      tmpvar_38 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_39;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (tmpvar_38 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((tmpvar_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      vPos_36 = (vPos_21 + ((tmpvar_37 * 
        (((mix (
          mix (tmpvar_44, fTarget_41, fAmount_40)
        , fTarget_41, fAmount_40) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_15 = vPos_21;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_50.x + (tmpvar_50.y * tmpvar_50.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_46)));
    vPos_45 = (normalize(vPos_45) * fLength_47);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  highp vec4 tmpvar_52;
  tmpvar_52 = (glstate_matrix_mvp * tmpvar_12);
  highp vec4 o_53;
  highp vec4 tmpvar_54;
  tmpvar_54 = (tmpvar_52 * 0.5);
  highp vec2 tmpvar_55;
  tmpvar_55.x = tmpvar_54.x;
  tmpvar_55.y = (tmpvar_54.y * _ProjectionParams.x);
  o_53.xy = (tmpvar_55 + tmpvar_54.w);
  o_53.zw = tmpvar_52.zw;
  highp vec3 tmpvar_56;
  tmpvar_56 = o_53.xyw;
  tmpvar_8 = tmpvar_56;
  highp vec2 tmpvar_57;
  tmpvar_57 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_57;
  tmpvar_4 = tmpvar_5;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * _glesNormal.x)
   + 
    (v_59.xyz * _glesNormal.y)
  ) + (v_60.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_61;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_62;
  tmpvar_62.w = 1.0;
  tmpvar_62.xyz = worldNormal_2;
  mediump vec4 normal_63;
  normal_63 = tmpvar_62;
  mediump vec3 x2_64;
  mediump vec4 tmpvar_65;
  tmpvar_65 = (normal_63.xyzz * normal_63.yzzx);
  x2_64.x = dot (unity_SHBr, tmpvar_65);
  x2_64.y = dot (unity_SHBg, tmpvar_65);
  x2_64.z = dot (unity_SHBb, tmpvar_65);
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = (x2_64 + (unity_SHC.xyz * (
    (normal_63.x * normal_63.x)
   - 
    (normal_63.y * normal_63.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 detailColor_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture (_DetailTex, xlv_TEXCOORD4.xy);
  detailColor_10 = tmpvar_19;
  diffuseColor_11.xyz = mix (diffuseColor_11.xyz, detailColor_10.xyz, detailColor_10.www);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_21;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_22;
  normalWorld_22 = tmpvar_4;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_22;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_27 = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_8 * tmpvar_1) * diff_27);
  c_26.xyz = tmpvar_29;
  c_26.w = tmpvar_9;
  c_25.w = c_26.w;
  mediump vec3 tmpvar_30;
  tmpvar_30 = (c_26.xyz + (tmpvar_8 * (xlv_TEXCOORD6 + x1_24)));
  c_25.xyz = tmpvar_30;
  c_3.xyz = c_25.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_10;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = _glesMultiTexCoord2.xy;
  tmpvar_8.xy = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_17;
      highp float fAdherenceScale_24;
      highp vec3 tmpvar_25;
      tmpvar_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_26;
      tmpvar_26 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (tmpvar_26 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((tmpvar_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_26 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((tmpvar_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        (mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_27.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((tmpvar_25 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((tmpvar_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((
        ((tmpvar_35.x * tmpvar_35.y) * tmpvar_35.x)
       * tmpvar_35.y) * _ST_WindTurbulences.x));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_14 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp vec3 tmpvar_38;
      tmpvar_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_39;
      tmpvar_39 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_40;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (tmpvar_39 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((tmpvar_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      vPos_37 = (vPos_22 + ((tmpvar_38 * 
        (((mix (
          mix (tmpvar_45, fTarget_42, fAmount_41)
        , fTarget_42, fAmount_41) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_16 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_51.x + (tmpvar_51.y * tmpvar_51.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_47)));
    vPos_46 = (normalize(vPos_46) * fLength_48);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  highp vec4 tmpvar_53;
  tmpvar_53 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (tmpvar_53 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = tmpvar_53.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  tmpvar_9 = tmpvar_57;
  highp vec2 tmpvar_58;
  tmpvar_58 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_58;
  tmpvar_4 = tmpvar_6;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * _glesNormal.x)
   + 
    (v_60.xyz * _glesNormal.y)
  ) + (v_61.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_62;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_2;
  mediump vec4 normal_64;
  normal_64 = tmpvar_63;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  highp vec4 tmpvar_67;
  tmpvar_67 = (unity_World2Shadow[0] * (_Object2World * tmpvar_13));
  tmpvar_5 = tmpvar_67;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = (x2_65 + (unity_SHC.xyz * (
    (normal_64.x * normal_64.x)
   - 
    (normal_64.y * normal_64.y)
  )));
  xlv_TEXCOORD7 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 detailColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_DetailTex, xlv_TEXCOORD4.xy);
  detailColor_11 = tmpvar_20;
  diffuseColor_12.xyz = mix (diffuseColor_12.xyz, detailColor_11.xyz, detailColor_11.www);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  lowp float tmpvar_22;
  mediump float dist_23;
  lowp float tmpvar_24;
  tmpvar_24 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x;
  dist_23 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (float((dist_23 > 
    (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w)
  )), _LightShadowData.x);
  tmpvar_22 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_26;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_22;
  mediump vec3 normalWorld_27;
  normalWorld_27 = tmpvar_5;
  mediump vec3 tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = normalWorld_27;
  mediump vec3 x1_30;
  x1_30.x = dot (unity_SHAr, tmpvar_29);
  x1_30.y = dot (unity_SHAg, tmpvar_29);
  x1_30.z = dot (unity_SHAb, tmpvar_29);
  tmpvar_28 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_28;
  lowp vec4 c_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_33 = tmpvar_34;
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tmpvar_9 * tmpvar_28) * diff_33);
  c_32.xyz = tmpvar_35;
  c_32.w = tmpvar_10;
  c_31.w = c_32.w;
  mediump vec3 tmpvar_36;
  tmpvar_36 = (c_32.xyz + (tmpvar_9 * (xlv_TEXCOORD6 + x1_30)));
  c_31.xyz = tmpvar_36;
  c_4.xyz = c_31.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_10;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = _glesMultiTexCoord2.xy;
  tmpvar_8.xy = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_17;
      highp float fAdherenceScale_24;
      highp vec3 tmpvar_25;
      tmpvar_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_26;
      tmpvar_26 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (tmpvar_26 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((tmpvar_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_26 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((tmpvar_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        (mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_27.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((tmpvar_25 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((tmpvar_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((
        ((tmpvar_35.x * tmpvar_35.y) * tmpvar_35.x)
       * tmpvar_35.y) * _ST_WindTurbulences.x));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_14 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp vec3 tmpvar_38;
      tmpvar_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_39;
      tmpvar_39 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_40;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (tmpvar_39 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((tmpvar_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      vPos_37 = (vPos_22 + ((tmpvar_38 * 
        (((mix (
          mix (tmpvar_45, fTarget_42, fAmount_41)
        , fTarget_42, fAmount_41) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_16 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_51.x + (tmpvar_51.y * tmpvar_51.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_47)));
    vPos_46 = (normalize(vPos_46) * fLength_48);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  highp vec4 tmpvar_53;
  tmpvar_53 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (tmpvar_53 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = tmpvar_53.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  tmpvar_9 = tmpvar_57;
  highp vec2 tmpvar_58;
  tmpvar_58 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_58;
  tmpvar_4 = tmpvar_6;
  highp vec3 tmpvar_59;
  tmpvar_59 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_60;
  v_60.x = _World2Object[0].x;
  v_60.y = _World2Object[1].x;
  v_60.z = _World2Object[2].x;
  v_60.w = _World2Object[3].x;
  highp vec4 v_61;
  v_61.x = _World2Object[0].y;
  v_61.y = _World2Object[1].y;
  v_61.z = _World2Object[2].y;
  v_61.w = _World2Object[3].y;
  highp vec4 v_62;
  v_62.x = _World2Object[0].z;
  v_62.y = _World2Object[1].z;
  v_62.z = _World2Object[2].z;
  v_62.w = _World2Object[3].z;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize(((
    (v_60.xyz * _glesNormal.x)
   + 
    (v_61.xyz * _glesNormal.y)
  ) + (v_62.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_63;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_64;
  tmpvar_64.w = 1.0;
  tmpvar_64.xyz = worldNormal_2;
  mediump vec3 tmpvar_65;
  mediump vec4 normal_66;
  normal_66 = tmpvar_64;
  mediump vec3 x2_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = (normal_66.xyzz * normal_66.yzzx);
  x2_67.x = dot (unity_SHBr, tmpvar_68);
  x2_67.y = dot (unity_SHBg, tmpvar_68);
  x2_67.z = dot (unity_SHBb, tmpvar_68);
  tmpvar_65 = (x2_67 + (unity_SHC.xyz * (
    (normal_66.x * normal_66.x)
   - 
    (normal_66.y * normal_66.y)
  )));
  highp vec3 lightColor0_69;
  lightColor0_69 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_70;
  lightColor1_70 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_71;
  lightColor2_71 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_72;
  lightColor3_72 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_73;
  lightAttenSq_73 = unity_4LightAtten0;
  highp vec3 normal_74;
  normal_74 = worldNormal_2;
  highp vec4 tmpvar_75;
  tmpvar_75 = (unity_4LightPosX0 - tmpvar_59.x);
  highp vec4 tmpvar_76;
  tmpvar_76 = (unity_4LightPosY0 - tmpvar_59.y);
  highp vec4 tmpvar_77;
  tmpvar_77 = (unity_4LightPosZ0 - tmpvar_59.z);
  highp vec4 tmpvar_78;
  tmpvar_78 = (((tmpvar_75 * tmpvar_75) + (tmpvar_76 * tmpvar_76)) + (tmpvar_77 * tmpvar_77));
  highp vec4 tmpvar_79;
  tmpvar_79 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_75 * normal_74.x) + (tmpvar_76 * normal_74.y)) + (tmpvar_77 * normal_74.z))
   * 
    inversesqrt(tmpvar_78)
  )) * (1.0/((1.0 + 
    (tmpvar_78 * lightAttenSq_73)
  ))));
  highp vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_65 + ((
    ((lightColor0_69 * tmpvar_79.x) + (lightColor1_70 * tmpvar_79.y))
   + 
    (lightColor2_71 * tmpvar_79.z)
  ) + (lightColor3_72 * tmpvar_79.w)));
  tmpvar_5 = tmpvar_80;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_59;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 detailColor_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_DetailTex, xlv_TEXCOORD4.xy);
  detailColor_10 = tmpvar_19;
  diffuseColor_11.xyz = mix (diffuseColor_11.xyz, detailColor_10.xyz, detailColor_10.www);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_21;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_22;
  normalWorld_22 = tmpvar_4;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_22;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_27 = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_8 * tmpvar_1) * diff_27);
  c_26.xyz = tmpvar_29;
  c_26.w = tmpvar_9;
  c_25.w = c_26.w;
  mediump vec3 tmpvar_30;
  tmpvar_30 = (c_26.xyz + (tmpvar_8 * (xlv_TEXCOORD6 + x1_24)));
  c_25.xyz = tmpvar_30;
  c_3.xyz = c_25.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_10;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = _glesMultiTexCoord2.xy;
  tmpvar_8.xy = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_17;
      highp float fAdherenceScale_24;
      highp vec3 tmpvar_25;
      tmpvar_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_26;
      tmpvar_26 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (tmpvar_26 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((tmpvar_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_26 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((tmpvar_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        (mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_27.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((tmpvar_25 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((tmpvar_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((
        ((tmpvar_35.x * tmpvar_35.y) * tmpvar_35.x)
       * tmpvar_35.y) * _ST_WindTurbulences.x));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_14 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp vec3 tmpvar_38;
      tmpvar_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_39;
      tmpvar_39 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_40;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (tmpvar_39 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((tmpvar_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      vPos_37 = (vPos_22 + ((tmpvar_38 * 
        (((mix (
          mix (tmpvar_45, fTarget_42, fAmount_41)
        , fTarget_42, fAmount_41) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_16 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_51.x + (tmpvar_51.y * tmpvar_51.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_47)));
    vPos_46 = (normalize(vPos_46) * fLength_48);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  highp vec4 tmpvar_53;
  tmpvar_53 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (tmpvar_53 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = tmpvar_53.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  tmpvar_9 = tmpvar_57;
  highp vec2 tmpvar_58;
  tmpvar_58 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_58;
  tmpvar_4 = tmpvar_6;
  highp vec3 tmpvar_59;
  tmpvar_59 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_60;
  v_60.x = _World2Object[0].x;
  v_60.y = _World2Object[1].x;
  v_60.z = _World2Object[2].x;
  v_60.w = _World2Object[3].x;
  highp vec4 v_61;
  v_61.x = _World2Object[0].y;
  v_61.y = _World2Object[1].y;
  v_61.z = _World2Object[2].y;
  v_61.w = _World2Object[3].y;
  highp vec4 v_62;
  v_62.x = _World2Object[0].z;
  v_62.y = _World2Object[1].z;
  v_62.z = _World2Object[2].z;
  v_62.w = _World2Object[3].z;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize(((
    (v_60.xyz * _glesNormal.x)
   + 
    (v_61.xyz * _glesNormal.y)
  ) + (v_62.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_63;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_64;
  tmpvar_64.w = 1.0;
  tmpvar_64.xyz = worldNormal_2;
  mediump vec3 tmpvar_65;
  mediump vec4 normal_66;
  normal_66 = tmpvar_64;
  mediump vec3 x2_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = (normal_66.xyzz * normal_66.yzzx);
  x2_67.x = dot (unity_SHBr, tmpvar_68);
  x2_67.y = dot (unity_SHBg, tmpvar_68);
  x2_67.z = dot (unity_SHBb, tmpvar_68);
  tmpvar_65 = (x2_67 + (unity_SHC.xyz * (
    (normal_66.x * normal_66.x)
   - 
    (normal_66.y * normal_66.y)
  )));
  highp vec3 lightColor0_69;
  lightColor0_69 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_70;
  lightColor1_70 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_71;
  lightColor2_71 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_72;
  lightColor3_72 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_73;
  lightAttenSq_73 = unity_4LightAtten0;
  highp vec3 normal_74;
  normal_74 = worldNormal_2;
  highp vec4 tmpvar_75;
  tmpvar_75 = (unity_4LightPosX0 - tmpvar_59.x);
  highp vec4 tmpvar_76;
  tmpvar_76 = (unity_4LightPosY0 - tmpvar_59.y);
  highp vec4 tmpvar_77;
  tmpvar_77 = (unity_4LightPosZ0 - tmpvar_59.z);
  highp vec4 tmpvar_78;
  tmpvar_78 = (((tmpvar_75 * tmpvar_75) + (tmpvar_76 * tmpvar_76)) + (tmpvar_77 * tmpvar_77));
  highp vec4 tmpvar_79;
  tmpvar_79 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_75 * normal_74.x) + (tmpvar_76 * normal_74.y)) + (tmpvar_77 * normal_74.z))
   * 
    inversesqrt(tmpvar_78)
  )) * (1.0/((1.0 + 
    (tmpvar_78 * lightAttenSq_73)
  ))));
  highp vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_65 + ((
    ((lightColor0_69 * tmpvar_79.x) + (lightColor1_70 * tmpvar_79.y))
   + 
    (lightColor2_71 * tmpvar_79.z)
  ) + (lightColor3_72 * tmpvar_79.w)));
  tmpvar_5 = tmpvar_80;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_59;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_5;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 detailColor_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture (_DetailTex, xlv_TEXCOORD4.xy);
  detailColor_10 = tmpvar_19;
  diffuseColor_11.xyz = mix (diffuseColor_11.xyz, detailColor_10.xyz, detailColor_10.www);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_21;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_22;
  normalWorld_22 = tmpvar_4;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_22;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_27 = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_8 * tmpvar_1) * diff_27);
  c_26.xyz = tmpvar_29;
  c_26.w = tmpvar_9;
  c_25.w = c_26.w;
  mediump vec3 tmpvar_30;
  tmpvar_30 = (c_26.xyz + (tmpvar_8 * (xlv_TEXCOORD6 + x1_24)));
  c_25.xyz = tmpvar_30;
  c_3.xyz = c_25.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_11;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_12;
  highp vec2 tmpvar_13;
  tmpvar_13 = _glesMultiTexCoord2.xy;
  tmpvar_9.xy = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19.x = _Object2World[3].x;
  tmpvar_19.y = _Object2World[3].y;
  tmpvar_19.z = _Object2World[3].z;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_18;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_18;
      highp float fAdherenceScale_25;
      highp vec3 tmpvar_26;
      tmpvar_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_27;
      tmpvar_27 = (_ST_WindBranch.x + (tmpvar_19.x + tmpvar_19.y));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (tmpvar_27 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_27 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((tmpvar_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        (mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_28.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (_glesVertex.xyz + ((tmpvar_26 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((tmpvar_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((
        ((tmpvar_36.x * tmpvar_36.y) * tmpvar_36.x)
       * tmpvar_36.y) * _ST_WindTurbulences.x));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_15 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp vec3 tmpvar_39;
      tmpvar_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_40;
      tmpvar_40 = (_ST_WindBranch.x + (tmpvar_19.x + tmpvar_19.y));
      highp vec4 vOscillations_41;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (tmpvar_40 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((tmpvar_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      vPos_38 = (vPos_23 + ((tmpvar_39 * 
        (((mix (
          mix (tmpvar_46, fTarget_43, fAmount_42)
        , fTarget_43, fAmount_42) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_17 = vPos_23;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_19.x + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_19.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * (
      ((_ST_WindGlobal.y * (tmpvar_52.x + (tmpvar_52.y * tmpvar_52.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_48)));
    vPos_47 = (normalize(vPos_47) * fLength_49);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  highp vec4 tmpvar_54;
  tmpvar_54 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (tmpvar_54 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = tmpvar_54.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  tmpvar_10 = tmpvar_58;
  highp vec2 tmpvar_59;
  tmpvar_59 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_59;
  tmpvar_4 = tmpvar_7;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_64;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = worldNormal_2;
  mediump vec3 tmpvar_66;
  mediump vec4 normal_67;
  normal_67 = tmpvar_65;
  mediump vec3 x2_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = (normal_67.xyzz * normal_67.yzzx);
  x2_68.x = dot (unity_SHBr, tmpvar_69);
  x2_68.y = dot (unity_SHBg, tmpvar_69);
  x2_68.z = dot (unity_SHBb, tmpvar_69);
  tmpvar_66 = (x2_68 + (unity_SHC.xyz * (
    (normal_67.x * normal_67.x)
   - 
    (normal_67.y * normal_67.y)
  )));
  highp vec3 lightColor0_70;
  lightColor0_70 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_71;
  lightColor1_71 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_72;
  lightColor2_72 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_73;
  lightColor3_73 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_74;
  lightAttenSq_74 = unity_4LightAtten0;
  highp vec3 normal_75;
  normal_75 = worldNormal_2;
  highp vec4 tmpvar_76;
  tmpvar_76 = (unity_4LightPosX0 - tmpvar_60.x);
  highp vec4 tmpvar_77;
  tmpvar_77 = (unity_4LightPosY0 - tmpvar_60.y);
  highp vec4 tmpvar_78;
  tmpvar_78 = (unity_4LightPosZ0 - tmpvar_60.z);
  highp vec4 tmpvar_79;
  tmpvar_79 = (((tmpvar_76 * tmpvar_76) + (tmpvar_77 * tmpvar_77)) + (tmpvar_78 * tmpvar_78));
  highp vec4 tmpvar_80;
  tmpvar_80 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_76 * normal_75.x) + (tmpvar_77 * normal_75.y)) + (tmpvar_78 * normal_75.z))
   * 
    inversesqrt(tmpvar_79)
  )) * (1.0/((1.0 + 
    (tmpvar_79 * lightAttenSq_74)
  ))));
  highp vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_66 + ((
    ((lightColor0_70 * tmpvar_80.x) + (lightColor1_71 * tmpvar_80.y))
   + 
    (lightColor2_72 * tmpvar_80.z)
  ) + (lightColor3_73 * tmpvar_80.w)));
  tmpvar_5 = tmpvar_81;
  highp vec4 tmpvar_82;
  tmpvar_82 = (unity_World2Shadow[0] * (_Object2World * tmpvar_14));
  tmpvar_6 = tmpvar_82;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_60;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 detailColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_DetailTex, xlv_TEXCOORD4.xy);
  detailColor_11 = tmpvar_20;
  diffuseColor_12.xyz = mix (diffuseColor_12.xyz, detailColor_11.xyz, detailColor_11.www);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  lowp float tmpvar_22;
  mediump float dist_23;
  lowp float tmpvar_24;
  tmpvar_24 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x;
  dist_23 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (float((dist_23 > 
    (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w)
  )), _LightShadowData.x);
  tmpvar_22 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_26;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_22;
  mediump vec3 normalWorld_27;
  normalWorld_27 = tmpvar_5;
  mediump vec3 tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = normalWorld_27;
  mediump vec3 x1_30;
  x1_30.x = dot (unity_SHAr, tmpvar_29);
  x1_30.y = dot (unity_SHAg, tmpvar_29);
  x1_30.z = dot (unity_SHAb, tmpvar_29);
  tmpvar_28 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_28;
  lowp vec4 c_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_33 = tmpvar_34;
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tmpvar_9 * tmpvar_28) * diff_33);
  c_32.xyz = tmpvar_35;
  c_32.w = tmpvar_10;
  c_31.w = c_32.w;
  mediump vec3 tmpvar_36;
  tmpvar_36 = (c_32.xyz + (tmpvar_9 * (xlv_TEXCOORD6 + x1_30)));
  c_31.xyz = tmpvar_36;
  c_4.xyz = c_31.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_10;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = _glesMultiTexCoord2.xy;
  tmpvar_8.xy = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_17;
      highp float fAdherenceScale_24;
      highp vec3 tmpvar_25;
      tmpvar_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_26;
      tmpvar_26 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (tmpvar_26 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((tmpvar_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_26 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((tmpvar_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        (mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_27.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((tmpvar_25 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((tmpvar_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((
        ((tmpvar_35.x * tmpvar_35.y) * tmpvar_35.x)
       * tmpvar_35.y) * _ST_WindTurbulences.x));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_14 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp vec3 tmpvar_38;
      tmpvar_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_39;
      tmpvar_39 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_40;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (tmpvar_39 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((tmpvar_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      vPos_37 = (vPos_22 + ((tmpvar_38 * 
        (((mix (
          mix (tmpvar_45, fTarget_42, fAmount_41)
        , fTarget_42, fAmount_41) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_16 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_51.x + (tmpvar_51.y * tmpvar_51.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_47)));
    vPos_46 = (normalize(vPos_46) * fLength_48);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  highp vec4 tmpvar_53;
  tmpvar_53 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (tmpvar_53 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = tmpvar_53.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  tmpvar_9 = tmpvar_57;
  highp vec2 tmpvar_58;
  tmpvar_58 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_58;
  tmpvar_4 = tmpvar_6;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * _glesNormal.x)
   + 
    (v_60.xyz * _glesNormal.y)
  ) + (v_61.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_62;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_2;
  mediump vec4 normal_64;
  normal_64 = tmpvar_63;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  highp vec4 tmpvar_67;
  tmpvar_67 = (unity_World2Shadow[0] * (_Object2World * tmpvar_13));
  tmpvar_5 = tmpvar_67;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = (x2_65 + (unity_SHC.xyz * (
    (normal_64.x * normal_64.x)
   - 
    (normal_64.y * normal_64.y)
  )));
  xlv_TEXCOORD7 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 detailColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_DetailTex, xlv_TEXCOORD4.xy);
  detailColor_11 = tmpvar_20;
  diffuseColor_12.xyz = mix (diffuseColor_12.xyz, detailColor_11.xyz, detailColor_11.www);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  lowp float shadow_22;
  lowp float tmpvar_23;
  tmpvar_23 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD7.xyz);
  mediump float tmpvar_24;
  tmpvar_24 = (_LightShadowData.x + (tmpvar_23 * (1.0 - _LightShadowData.x)));
  shadow_22 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_25;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_22;
  mediump vec3 normalWorld_26;
  normalWorld_26 = tmpvar_5;
  mediump vec3 tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = normalWorld_26;
  mediump vec3 x1_29;
  x1_29.x = dot (unity_SHAr, tmpvar_28);
  x1_29.y = dot (unity_SHAg, tmpvar_28);
  x1_29.z = dot (unity_SHAb, tmpvar_28);
  tmpvar_27 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_27;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_32 = tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_9 * tmpvar_27) * diff_32);
  c_31.xyz = tmpvar_34;
  c_31.w = tmpvar_10;
  c_30.w = c_31.w;
  mediump vec3 tmpvar_35;
  tmpvar_35 = (c_31.xyz + (tmpvar_9 * (xlv_TEXCOORD6 + x1_29)));
  c_30.xyz = tmpvar_35;
  c_4.xyz = c_30.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
out mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_10;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = _glesMultiTexCoord2.xy;
  tmpvar_8.xy = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_17;
      highp float fAdherenceScale_24;
      highp vec3 tmpvar_25;
      tmpvar_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_26;
      tmpvar_26 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (tmpvar_26 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((tmpvar_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_26 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((tmpvar_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        (mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_27.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((tmpvar_25 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((tmpvar_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((
        ((tmpvar_35.x * tmpvar_35.y) * tmpvar_35.x)
       * tmpvar_35.y) * _ST_WindTurbulences.x));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_14 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp vec3 tmpvar_38;
      tmpvar_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_39;
      tmpvar_39 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_40;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (tmpvar_39 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((tmpvar_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      vPos_37 = (vPos_22 + ((tmpvar_38 * 
        (((mix (
          mix (tmpvar_45, fTarget_42, fAmount_41)
        , fTarget_42, fAmount_41) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_16 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_51.x + (tmpvar_51.y * tmpvar_51.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_47)));
    vPos_46 = (normalize(vPos_46) * fLength_48);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  highp vec4 tmpvar_53;
  tmpvar_53 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (tmpvar_53 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = tmpvar_53.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  tmpvar_9 = tmpvar_57;
  highp vec2 tmpvar_58;
  tmpvar_58 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_58;
  tmpvar_4 = tmpvar_6;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * _glesNormal.x)
   + 
    (v_60.xyz * _glesNormal.y)
  ) + (v_61.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_62;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_2;
  mediump vec4 normal_64;
  normal_64 = tmpvar_63;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  highp vec4 tmpvar_67;
  tmpvar_67 = (unity_World2Shadow[0] * (_Object2World * tmpvar_13));
  tmpvar_5 = tmpvar_67;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = (x2_65 + (unity_SHC.xyz * (
    (normal_64.x * normal_64.x)
   - 
    (normal_64.y * normal_64.y)
  )));
  xlv_TEXCOORD7 = tmpvar_5;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
in mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 detailColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture (_DetailTex, xlv_TEXCOORD4.xy);
  detailColor_11 = tmpvar_20;
  diffuseColor_12.xyz = mix (diffuseColor_12.xyz, detailColor_11.xyz, detailColor_11.www);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  lowp float shadow_22;
  mediump float tmpvar_23;
  tmpvar_23 = texture (_ShadowMapTexture, xlv_TEXCOORD7.xyz);
  lowp float tmpvar_24;
  tmpvar_24 = tmpvar_23;
  mediump float tmpvar_25;
  tmpvar_25 = (_LightShadowData.x + (tmpvar_24 * (1.0 - _LightShadowData.x)));
  shadow_22 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_26;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_22;
  mediump vec3 normalWorld_27;
  normalWorld_27 = tmpvar_5;
  mediump vec3 tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = normalWorld_27;
  mediump vec3 x1_30;
  x1_30.x = dot (unity_SHAr, tmpvar_29);
  x1_30.y = dot (unity_SHAg, tmpvar_29);
  x1_30.z = dot (unity_SHAb, tmpvar_29);
  tmpvar_28 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_28;
  lowp vec4 c_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_33 = tmpvar_34;
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tmpvar_9 * tmpvar_28) * diff_33);
  c_32.xyz = tmpvar_35;
  c_32.w = tmpvar_10;
  c_31.w = c_32.w;
  mediump vec3 tmpvar_36;
  tmpvar_36 = (c_32.xyz + (tmpvar_9 * (xlv_TEXCOORD6 + x1_30)));
  c_31.xyz = tmpvar_36;
  c_4.xyz = c_31.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_11;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_12;
  highp vec2 tmpvar_13;
  tmpvar_13 = _glesMultiTexCoord2.xy;
  tmpvar_9.xy = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19.x = _Object2World[3].x;
  tmpvar_19.y = _Object2World[3].y;
  tmpvar_19.z = _Object2World[3].z;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_18;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_18;
      highp float fAdherenceScale_25;
      highp vec3 tmpvar_26;
      tmpvar_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_27;
      tmpvar_27 = (_ST_WindBranch.x + (tmpvar_19.x + tmpvar_19.y));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (tmpvar_27 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_27 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((tmpvar_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        (mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_28.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (_glesVertex.xyz + ((tmpvar_26 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((tmpvar_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((
        ((tmpvar_36.x * tmpvar_36.y) * tmpvar_36.x)
       * tmpvar_36.y) * _ST_WindTurbulences.x));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_15 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp vec3 tmpvar_39;
      tmpvar_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_40;
      tmpvar_40 = (_ST_WindBranch.x + (tmpvar_19.x + tmpvar_19.y));
      highp vec4 vOscillations_41;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (tmpvar_40 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((tmpvar_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      vPos_38 = (vPos_23 + ((tmpvar_39 * 
        (((mix (
          mix (tmpvar_46, fTarget_43, fAmount_42)
        , fTarget_43, fAmount_42) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_17 = vPos_23;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_19.x + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_19.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * (
      ((_ST_WindGlobal.y * (tmpvar_52.x + (tmpvar_52.y * tmpvar_52.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_48)));
    vPos_47 = (normalize(vPos_47) * fLength_49);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  highp vec4 tmpvar_54;
  tmpvar_54 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (tmpvar_54 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = tmpvar_54.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  tmpvar_10 = tmpvar_58;
  highp vec2 tmpvar_59;
  tmpvar_59 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_59;
  tmpvar_4 = tmpvar_7;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_64;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = worldNormal_2;
  mediump vec3 tmpvar_66;
  mediump vec4 normal_67;
  normal_67 = tmpvar_65;
  mediump vec3 x2_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = (normal_67.xyzz * normal_67.yzzx);
  x2_68.x = dot (unity_SHBr, tmpvar_69);
  x2_68.y = dot (unity_SHBg, tmpvar_69);
  x2_68.z = dot (unity_SHBb, tmpvar_69);
  tmpvar_66 = (x2_68 + (unity_SHC.xyz * (
    (normal_67.x * normal_67.x)
   - 
    (normal_67.y * normal_67.y)
  )));
  highp vec3 lightColor0_70;
  lightColor0_70 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_71;
  lightColor1_71 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_72;
  lightColor2_72 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_73;
  lightColor3_73 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_74;
  lightAttenSq_74 = unity_4LightAtten0;
  highp vec3 normal_75;
  normal_75 = worldNormal_2;
  highp vec4 tmpvar_76;
  tmpvar_76 = (unity_4LightPosX0 - tmpvar_60.x);
  highp vec4 tmpvar_77;
  tmpvar_77 = (unity_4LightPosY0 - tmpvar_60.y);
  highp vec4 tmpvar_78;
  tmpvar_78 = (unity_4LightPosZ0 - tmpvar_60.z);
  highp vec4 tmpvar_79;
  tmpvar_79 = (((tmpvar_76 * tmpvar_76) + (tmpvar_77 * tmpvar_77)) + (tmpvar_78 * tmpvar_78));
  highp vec4 tmpvar_80;
  tmpvar_80 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_76 * normal_75.x) + (tmpvar_77 * normal_75.y)) + (tmpvar_78 * normal_75.z))
   * 
    inversesqrt(tmpvar_79)
  )) * (1.0/((1.0 + 
    (tmpvar_79 * lightAttenSq_74)
  ))));
  highp vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_66 + ((
    ((lightColor0_70 * tmpvar_80.x) + (lightColor1_71 * tmpvar_80.y))
   + 
    (lightColor2_72 * tmpvar_80.z)
  ) + (lightColor3_73 * tmpvar_80.w)));
  tmpvar_5 = tmpvar_81;
  highp vec4 tmpvar_82;
  tmpvar_82 = (unity_World2Shadow[0] * (_Object2World * tmpvar_14));
  tmpvar_6 = tmpvar_82;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_60;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 detailColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_DetailTex, xlv_TEXCOORD4.xy);
  detailColor_11 = tmpvar_20;
  diffuseColor_12.xyz = mix (diffuseColor_12.xyz, detailColor_11.xyz, detailColor_11.www);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  lowp float shadow_22;
  lowp float tmpvar_23;
  tmpvar_23 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD7.xyz);
  mediump float tmpvar_24;
  tmpvar_24 = (_LightShadowData.x + (tmpvar_23 * (1.0 - _LightShadowData.x)));
  shadow_22 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_25;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_22;
  mediump vec3 normalWorld_26;
  normalWorld_26 = tmpvar_5;
  mediump vec3 tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = normalWorld_26;
  mediump vec3 x1_29;
  x1_29.x = dot (unity_SHAr, tmpvar_28);
  x1_29.y = dot (unity_SHAg, tmpvar_28);
  x1_29.z = dot (unity_SHAb, tmpvar_28);
  tmpvar_27 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_27;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_32 = tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_9 * tmpvar_27) * diff_32);
  c_31.xyz = tmpvar_34;
  c_31.w = tmpvar_10;
  c_30.w = c_31.w;
  mediump vec3 tmpvar_35;
  tmpvar_35 = (c_31.xyz + (tmpvar_9 * (xlv_TEXCOORD6 + x1_29)));
  c_30.xyz = tmpvar_35;
  c_4.xyz = c_30.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
out mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_11;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_12;
  highp vec2 tmpvar_13;
  tmpvar_13 = _glesMultiTexCoord2.xy;
  tmpvar_9.xy = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19.x = _Object2World[3].x;
  tmpvar_19.y = _Object2World[3].y;
  tmpvar_19.z = _Object2World[3].z;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_18;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_18;
      highp float fAdherenceScale_25;
      highp vec3 tmpvar_26;
      tmpvar_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_27;
      tmpvar_27 = (_ST_WindBranch.x + (tmpvar_19.x + tmpvar_19.y));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (tmpvar_27 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_27 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((tmpvar_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        (mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_28.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (_glesVertex.xyz + ((tmpvar_26 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((tmpvar_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((
        ((tmpvar_36.x * tmpvar_36.y) * tmpvar_36.x)
       * tmpvar_36.y) * _ST_WindTurbulences.x));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_15 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp vec3 tmpvar_39;
      tmpvar_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_40;
      tmpvar_40 = (_ST_WindBranch.x + (tmpvar_19.x + tmpvar_19.y));
      highp vec4 vOscillations_41;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (tmpvar_40 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((tmpvar_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      vPos_38 = (vPos_23 + ((tmpvar_39 * 
        (((mix (
          mix (tmpvar_46, fTarget_43, fAmount_42)
        , fTarget_43, fAmount_42) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_17 = vPos_23;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_19.x + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_19.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * (
      ((_ST_WindGlobal.y * (tmpvar_52.x + (tmpvar_52.y * tmpvar_52.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_48)));
    vPos_47 = (normalize(vPos_47) * fLength_49);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  highp vec4 tmpvar_54;
  tmpvar_54 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (tmpvar_54 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = tmpvar_54.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  tmpvar_10 = tmpvar_58;
  highp vec2 tmpvar_59;
  tmpvar_59 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_59;
  tmpvar_4 = tmpvar_7;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_64;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = worldNormal_2;
  mediump vec3 tmpvar_66;
  mediump vec4 normal_67;
  normal_67 = tmpvar_65;
  mediump vec3 x2_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = (normal_67.xyzz * normal_67.yzzx);
  x2_68.x = dot (unity_SHBr, tmpvar_69);
  x2_68.y = dot (unity_SHBg, tmpvar_69);
  x2_68.z = dot (unity_SHBb, tmpvar_69);
  tmpvar_66 = (x2_68 + (unity_SHC.xyz * (
    (normal_67.x * normal_67.x)
   - 
    (normal_67.y * normal_67.y)
  )));
  highp vec3 lightColor0_70;
  lightColor0_70 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_71;
  lightColor1_71 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_72;
  lightColor2_72 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_73;
  lightColor3_73 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_74;
  lightAttenSq_74 = unity_4LightAtten0;
  highp vec3 normal_75;
  normal_75 = worldNormal_2;
  highp vec4 tmpvar_76;
  tmpvar_76 = (unity_4LightPosX0 - tmpvar_60.x);
  highp vec4 tmpvar_77;
  tmpvar_77 = (unity_4LightPosY0 - tmpvar_60.y);
  highp vec4 tmpvar_78;
  tmpvar_78 = (unity_4LightPosZ0 - tmpvar_60.z);
  highp vec4 tmpvar_79;
  tmpvar_79 = (((tmpvar_76 * tmpvar_76) + (tmpvar_77 * tmpvar_77)) + (tmpvar_78 * tmpvar_78));
  highp vec4 tmpvar_80;
  tmpvar_80 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_76 * normal_75.x) + (tmpvar_77 * normal_75.y)) + (tmpvar_78 * normal_75.z))
   * 
    inversesqrt(tmpvar_79)
  )) * (1.0/((1.0 + 
    (tmpvar_79 * lightAttenSq_74)
  ))));
  highp vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_66 + ((
    ((lightColor0_70 * tmpvar_80.x) + (lightColor1_71 * tmpvar_80.y))
   + 
    (lightColor2_72 * tmpvar_80.z)
  ) + (lightColor3_73 * tmpvar_80.w)));
  tmpvar_5 = tmpvar_81;
  highp vec4 tmpvar_82;
  tmpvar_82 = (unity_World2Shadow[0] * (_Object2World * tmpvar_14));
  tmpvar_6 = tmpvar_82;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_60;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = tmpvar_6;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
in mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 detailColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture (_DetailTex, xlv_TEXCOORD4.xy);
  detailColor_11 = tmpvar_20;
  diffuseColor_12.xyz = mix (diffuseColor_12.xyz, detailColor_11.xyz, detailColor_11.www);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  lowp float shadow_22;
  mediump float tmpvar_23;
  tmpvar_23 = texture (_ShadowMapTexture, xlv_TEXCOORD7.xyz);
  lowp float tmpvar_24;
  tmpvar_24 = tmpvar_23;
  mediump float tmpvar_25;
  tmpvar_25 = (_LightShadowData.x + (tmpvar_24 * (1.0 - _LightShadowData.x)));
  shadow_22 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_26;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_22;
  mediump vec3 normalWorld_27;
  normalWorld_27 = tmpvar_5;
  mediump vec3 tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = normalWorld_27;
  mediump vec3 x1_30;
  x1_30.x = dot (unity_SHAr, tmpvar_29);
  x1_30.y = dot (unity_SHAg, tmpvar_29);
  x1_30.z = dot (unity_SHAb, tmpvar_29);
  tmpvar_28 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_28;
  lowp vec4 c_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_33 = tmpvar_34;
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tmpvar_9 * tmpvar_28) * diff_33);
  c_32.xyz = tmpvar_35;
  c_32.w = tmpvar_10;
  c_31.w = c_32.w;
  mediump vec3 tmpvar_36;
  tmpvar_36 = (c_32.xyz + (tmpvar_9 * (xlv_TEXCOORD6 + x1_30)));
  c_31.xyz = tmpvar_36;
  c_4.xyz = c_31.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_9;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_13;
  highp vec2 tmpvar_14;
  tmpvar_14 = _glesMultiTexCoord2.xy;
  tmpvar_7.xy = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_19;
      highp float fAdherenceScale_25;
      highp vec3 tmpvar_26;
      tmpvar_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_27;
      tmpvar_27 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (tmpvar_27 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_27 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((tmpvar_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        (mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_28.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (_glesVertex.xyz + ((tmpvar_26 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((tmpvar_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((
        ((tmpvar_36.x * tmpvar_36.y) * tmpvar_36.x)
       * tmpvar_36.y) * _ST_WindTurbulences.x));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp vec3 tmpvar_39;
      tmpvar_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_40;
      tmpvar_40 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_41;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (tmpvar_40 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((tmpvar_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      vPos_38 = (vPos_23 + ((tmpvar_39 * 
        (((mix (
          mix (tmpvar_46, fTarget_43, fAmount_42)
        , fTarget_43, fAmount_42) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_18;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_51.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    vPos_47.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_52.x + (tmpvar_52.y * tmpvar_52.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_48)));
    vPos_47 = (normalize(vPos_47) * fLength_49);
    FinalPosition_18 = vPos_47;
  };
  tmpvar_15.xyz = FinalPosition_18;
  highp vec4 tmpvar_54;
  tmpvar_54 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (tmpvar_54 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = tmpvar_54.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  tmpvar_8 = tmpvar_58;
  highp vec2 tmpvar_59;
  tmpvar_59 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_59;
  tmpvar_4 = tmpvar_5;
  highp vec4 v_60;
  v_60.x = _World2Object[0].x;
  v_60.y = _World2Object[1].x;
  v_60.z = _World2Object[2].x;
  v_60.w = _World2Object[3].x;
  highp vec4 v_61;
  v_61.x = _World2Object[0].y;
  v_61.y = _World2Object[1].y;
  v_61.z = _World2Object[2].y;
  v_61.w = _World2Object[3].y;
  highp vec4 v_62;
  v_62.x = _World2Object[0].z;
  v_62.y = _World2Object[1].z;
  v_62.z = _World2Object[2].z;
  v_62.w = _World2Object[3].z;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize(((
    (v_60.xyz * _glesNormal.x)
   + 
    (v_61.xyz * _glesNormal.y)
  ) + (v_62.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_63;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_64;
  tmpvar_64.w = 1.0;
  tmpvar_64.xyz = worldNormal_2;
  mediump vec4 normal_65;
  normal_65 = tmpvar_64;
  mediump vec3 x2_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (normal_65.xyzz * normal_65.yzzx);
  x2_66.x = dot (unity_SHBr, tmpvar_67);
  x2_66.y = dot (unity_SHBg, tmpvar_67);
  x2_66.z = dot (unity_SHBb, tmpvar_67);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = (x2_66 + (unity_SHC.xyz * (
    (normal_65.x * normal_65.x)
   - 
    (normal_65.y * normal_65.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 detailColor_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_DetailTex, xlv_TEXCOORD4.xy);
  detailColor_10 = tmpvar_19;
  diffuseColor_11.xyz = mix (diffuseColor_11.xyz, detailColor_10.xyz, detailColor_10.www);
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_22;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_23;
  normalWorld_23 = tmpvar_4;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_23;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_28 = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tmpvar_8 * tmpvar_1) * diff_28);
  c_27.xyz = tmpvar_30;
  c_27.w = tmpvar_9;
  c_26.w = c_27.w;
  mediump vec3 tmpvar_31;
  tmpvar_31 = (c_27.xyz + (tmpvar_8 * (xlv_TEXCOORD6 + x1_25)));
  c_26.xyz = tmpvar_31;
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_9;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_13;
  highp vec2 tmpvar_14;
  tmpvar_14 = _glesMultiTexCoord2.xy;
  tmpvar_7.xy = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_19;
      highp float fAdherenceScale_25;
      highp vec3 tmpvar_26;
      tmpvar_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_27;
      tmpvar_27 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (tmpvar_27 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_27 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((tmpvar_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        (mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_28.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (_glesVertex.xyz + ((tmpvar_26 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((tmpvar_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((
        ((tmpvar_36.x * tmpvar_36.y) * tmpvar_36.x)
       * tmpvar_36.y) * _ST_WindTurbulences.x));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp vec3 tmpvar_39;
      tmpvar_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_40;
      tmpvar_40 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_41;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (tmpvar_40 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((tmpvar_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      vPos_38 = (vPos_23 + ((tmpvar_39 * 
        (((mix (
          mix (tmpvar_46, fTarget_43, fAmount_42)
        , fTarget_43, fAmount_42) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_18;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_51.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    vPos_47.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_52.x + (tmpvar_52.y * tmpvar_52.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_48)));
    vPos_47 = (normalize(vPos_47) * fLength_49);
    FinalPosition_18 = vPos_47;
  };
  tmpvar_15.xyz = FinalPosition_18;
  highp vec4 tmpvar_54;
  tmpvar_54 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (tmpvar_54 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = tmpvar_54.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  tmpvar_8 = tmpvar_58;
  highp vec2 tmpvar_59;
  tmpvar_59 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_59;
  tmpvar_4 = tmpvar_5;
  highp vec4 v_60;
  v_60.x = _World2Object[0].x;
  v_60.y = _World2Object[1].x;
  v_60.z = _World2Object[2].x;
  v_60.w = _World2Object[3].x;
  highp vec4 v_61;
  v_61.x = _World2Object[0].y;
  v_61.y = _World2Object[1].y;
  v_61.z = _World2Object[2].y;
  v_61.w = _World2Object[3].y;
  highp vec4 v_62;
  v_62.x = _World2Object[0].z;
  v_62.y = _World2Object[1].z;
  v_62.z = _World2Object[2].z;
  v_62.w = _World2Object[3].z;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize(((
    (v_60.xyz * _glesNormal.x)
   + 
    (v_61.xyz * _glesNormal.y)
  ) + (v_62.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_63;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_64;
  tmpvar_64.w = 1.0;
  tmpvar_64.xyz = worldNormal_2;
  mediump vec4 normal_65;
  normal_65 = tmpvar_64;
  mediump vec3 x2_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (normal_65.xyzz * normal_65.yzzx);
  x2_66.x = dot (unity_SHBr, tmpvar_67);
  x2_66.y = dot (unity_SHBg, tmpvar_67);
  x2_66.z = dot (unity_SHBb, tmpvar_67);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = (x2_66 + (unity_SHC.xyz * (
    (normal_65.x * normal_65.x)
   - 
    (normal_65.y * normal_65.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 detailColor_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture (_DetailTex, xlv_TEXCOORD4.xy);
  detailColor_10 = tmpvar_19;
  diffuseColor_11.xyz = mix (diffuseColor_11.xyz, detailColor_10.xyz, detailColor_10.www);
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_22;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_23;
  normalWorld_23 = tmpvar_4;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_23;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_28 = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tmpvar_8 * tmpvar_1) * diff_28);
  c_27.xyz = tmpvar_30;
  c_27.w = tmpvar_9;
  c_26.w = c_27.w;
  mediump vec3 tmpvar_31;
  tmpvar_31 = (c_27.xyz + (tmpvar_8 * (xlv_TEXCOORD6 + x1_25)));
  c_26.xyz = tmpvar_31;
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_10;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_14;
  highp vec2 tmpvar_15;
  tmpvar_15 = _glesMultiTexCoord2.xy;
  tmpvar_8.xy = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = tmpvar_1.xyz;
  FinalPosition_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = tmpvar_20;
      highp float fAdherenceScale_26;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((tmpvar_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        (mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_29.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (_glesVertex.xyz + ((tmpvar_27 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((tmpvar_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((
        ((tmpvar_37.x * tmpvar_37.y) * tmpvar_37.x)
       * tmpvar_37.y) * _ST_WindTurbulences.x));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_17 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp vec3 tmpvar_40;
      tmpvar_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_41;
      tmpvar_41 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_42;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (tmpvar_41 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((tmpvar_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      vPos_39 = (vPos_24 + ((tmpvar_40 * 
        (((mix (
          mix (tmpvar_47, fTarget_44, fAmount_43)
        , fTarget_44, fAmount_43) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_19 = vPos_24;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_19;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_52.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    vPos_48.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_53.x + (tmpvar_53.y * tmpvar_53.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_49)));
    vPos_48 = (normalize(vPos_48) * fLength_50);
    FinalPosition_19 = vPos_48;
  };
  tmpvar_16.xyz = FinalPosition_19;
  highp vec4 tmpvar_55;
  tmpvar_55 = (glstate_matrix_mvp * tmpvar_16);
  highp vec4 o_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (tmpvar_55 * 0.5);
  highp vec2 tmpvar_58;
  tmpvar_58.x = tmpvar_57.x;
  tmpvar_58.y = (tmpvar_57.y * _ProjectionParams.x);
  o_56.xy = (tmpvar_58 + tmpvar_57.w);
  o_56.zw = tmpvar_55.zw;
  highp vec3 tmpvar_59;
  tmpvar_59 = o_56.xyw;
  tmpvar_9 = tmpvar_59;
  highp vec2 tmpvar_60;
  tmpvar_60 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_60;
  tmpvar_4 = tmpvar_6;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_64;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = worldNormal_2;
  mediump vec4 normal_66;
  normal_66 = tmpvar_65;
  mediump vec3 x2_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = (normal_66.xyzz * normal_66.yzzx);
  x2_67.x = dot (unity_SHBr, tmpvar_68);
  x2_67.y = dot (unity_SHBg, tmpvar_68);
  x2_67.z = dot (unity_SHBb, tmpvar_68);
  highp vec4 tmpvar_69;
  tmpvar_69 = (unity_World2Shadow[0] * (_Object2World * tmpvar_16));
  tmpvar_5 = tmpvar_69;
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_16).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = (x2_67 + (unity_SHC.xyz * (
    (normal_66.x * normal_66.x)
   - 
    (normal_66.y * normal_66.y)
  )));
  xlv_TEXCOORD7 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 detailColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_DetailTex, xlv_TEXCOORD4.xy);
  detailColor_11 = tmpvar_20;
  diffuseColor_12.xyz = mix (diffuseColor_12.xyz, detailColor_11.xyz, detailColor_11.www);
  mediump vec3 tmpvar_21;
  tmpvar_21 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_21 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_21.x, max (tmpvar_21.y, tmpvar_21.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_22;
  tmpvar_22 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_22;
  lowp float tmpvar_23;
  mediump float dist_24;
  lowp float tmpvar_25;
  tmpvar_25 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x;
  dist_24 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (float((dist_24 > 
    (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w)
  )), _LightShadowData.x);
  tmpvar_23 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_27;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_23;
  mediump vec3 normalWorld_28;
  normalWorld_28 = tmpvar_5;
  mediump vec3 tmpvar_29;
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = normalWorld_28;
  mediump vec3 x1_31;
  x1_31.x = dot (unity_SHAr, tmpvar_30);
  x1_31.y = dot (unity_SHAg, tmpvar_30);
  x1_31.z = dot (unity_SHAb, tmpvar_30);
  tmpvar_29 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_29;
  lowp vec4 c_32;
  lowp vec4 c_33;
  lowp float diff_34;
  mediump float tmpvar_35;
  tmpvar_35 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_34 = tmpvar_35;
  mediump vec3 tmpvar_36;
  tmpvar_36 = ((tmpvar_9 * tmpvar_29) * diff_34);
  c_33.xyz = tmpvar_36;
  c_33.w = tmpvar_10;
  c_32.w = c_33.w;
  mediump vec3 tmpvar_37;
  tmpvar_37 = (c_33.xyz + (tmpvar_9 * (xlv_TEXCOORD6 + x1_31)));
  c_32.xyz = tmpvar_37;
  c_4.xyz = c_32.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_10;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_14;
  highp vec2 tmpvar_15;
  tmpvar_15 = _glesMultiTexCoord2.xy;
  tmpvar_8.xy = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = tmpvar_1.xyz;
  FinalPosition_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = tmpvar_20;
      highp float fAdherenceScale_26;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((tmpvar_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        (mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_29.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (_glesVertex.xyz + ((tmpvar_27 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((tmpvar_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((
        ((tmpvar_37.x * tmpvar_37.y) * tmpvar_37.x)
       * tmpvar_37.y) * _ST_WindTurbulences.x));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_17 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp vec3 tmpvar_40;
      tmpvar_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_41;
      tmpvar_41 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_42;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (tmpvar_41 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((tmpvar_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      vPos_39 = (vPos_24 + ((tmpvar_40 * 
        (((mix (
          mix (tmpvar_47, fTarget_44, fAmount_43)
        , fTarget_44, fAmount_43) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_19 = vPos_24;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_19;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_52.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    vPos_48.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_53.x + (tmpvar_53.y * tmpvar_53.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_49)));
    vPos_48 = (normalize(vPos_48) * fLength_50);
    FinalPosition_19 = vPos_48;
  };
  tmpvar_16.xyz = FinalPosition_19;
  highp vec4 tmpvar_55;
  tmpvar_55 = (glstate_matrix_mvp * tmpvar_16);
  highp vec4 o_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (tmpvar_55 * 0.5);
  highp vec2 tmpvar_58;
  tmpvar_58.x = tmpvar_57.x;
  tmpvar_58.y = (tmpvar_57.y * _ProjectionParams.x);
  o_56.xy = (tmpvar_58 + tmpvar_57.w);
  o_56.zw = tmpvar_55.zw;
  highp vec3 tmpvar_59;
  tmpvar_59 = o_56.xyw;
  tmpvar_9 = tmpvar_59;
  highp vec2 tmpvar_60;
  tmpvar_60 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_60;
  tmpvar_4 = tmpvar_6;
  highp vec3 tmpvar_61;
  tmpvar_61 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_62;
  v_62.x = _World2Object[0].x;
  v_62.y = _World2Object[1].x;
  v_62.z = _World2Object[2].x;
  v_62.w = _World2Object[3].x;
  highp vec4 v_63;
  v_63.x = _World2Object[0].y;
  v_63.y = _World2Object[1].y;
  v_63.z = _World2Object[2].y;
  v_63.w = _World2Object[3].y;
  highp vec4 v_64;
  v_64.x = _World2Object[0].z;
  v_64.y = _World2Object[1].z;
  v_64.z = _World2Object[2].z;
  v_64.w = _World2Object[3].z;
  highp vec3 tmpvar_65;
  tmpvar_65 = normalize(((
    (v_62.xyz * _glesNormal.x)
   + 
    (v_63.xyz * _glesNormal.y)
  ) + (v_64.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_65;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_66;
  tmpvar_66.w = 1.0;
  tmpvar_66.xyz = worldNormal_2;
  mediump vec3 tmpvar_67;
  mediump vec4 normal_68;
  normal_68 = tmpvar_66;
  mediump vec3 x2_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (normal_68.xyzz * normal_68.yzzx);
  x2_69.x = dot (unity_SHBr, tmpvar_70);
  x2_69.y = dot (unity_SHBg, tmpvar_70);
  x2_69.z = dot (unity_SHBb, tmpvar_70);
  tmpvar_67 = (x2_69 + (unity_SHC.xyz * (
    (normal_68.x * normal_68.x)
   - 
    (normal_68.y * normal_68.y)
  )));
  highp vec3 lightColor0_71;
  lightColor0_71 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_72;
  lightColor1_72 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_73;
  lightColor2_73 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_74;
  lightColor3_74 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_75;
  lightAttenSq_75 = unity_4LightAtten0;
  highp vec3 normal_76;
  normal_76 = worldNormal_2;
  highp vec4 tmpvar_77;
  tmpvar_77 = (unity_4LightPosX0 - tmpvar_61.x);
  highp vec4 tmpvar_78;
  tmpvar_78 = (unity_4LightPosY0 - tmpvar_61.y);
  highp vec4 tmpvar_79;
  tmpvar_79 = (unity_4LightPosZ0 - tmpvar_61.z);
  highp vec4 tmpvar_80;
  tmpvar_80 = (((tmpvar_77 * tmpvar_77) + (tmpvar_78 * tmpvar_78)) + (tmpvar_79 * tmpvar_79));
  highp vec4 tmpvar_81;
  tmpvar_81 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_77 * normal_76.x) + (tmpvar_78 * normal_76.y)) + (tmpvar_79 * normal_76.z))
   * 
    inversesqrt(tmpvar_80)
  )) * (1.0/((1.0 + 
    (tmpvar_80 * lightAttenSq_75)
  ))));
  highp vec3 tmpvar_82;
  tmpvar_82 = (tmpvar_67 + ((
    ((lightColor0_71 * tmpvar_81.x) + (lightColor1_72 * tmpvar_81.y))
   + 
    (lightColor2_73 * tmpvar_81.z)
  ) + (lightColor3_74 * tmpvar_81.w)));
  tmpvar_5 = tmpvar_82;
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_61;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 detailColor_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_DetailTex, xlv_TEXCOORD4.xy);
  detailColor_10 = tmpvar_19;
  diffuseColor_11.xyz = mix (diffuseColor_11.xyz, detailColor_10.xyz, detailColor_10.www);
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_22;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_23;
  normalWorld_23 = tmpvar_4;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_23;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_28 = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tmpvar_8 * tmpvar_1) * diff_28);
  c_27.xyz = tmpvar_30;
  c_27.w = tmpvar_9;
  c_26.w = c_27.w;
  mediump vec3 tmpvar_31;
  tmpvar_31 = (c_27.xyz + (tmpvar_8 * (xlv_TEXCOORD6 + x1_25)));
  c_26.xyz = tmpvar_31;
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_10;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_14;
  highp vec2 tmpvar_15;
  tmpvar_15 = _glesMultiTexCoord2.xy;
  tmpvar_8.xy = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = tmpvar_1.xyz;
  FinalPosition_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = tmpvar_20;
      highp float fAdherenceScale_26;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((tmpvar_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        (mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_29.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (_glesVertex.xyz + ((tmpvar_27 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((tmpvar_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((
        ((tmpvar_37.x * tmpvar_37.y) * tmpvar_37.x)
       * tmpvar_37.y) * _ST_WindTurbulences.x));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_17 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp vec3 tmpvar_40;
      tmpvar_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_41;
      tmpvar_41 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_42;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (tmpvar_41 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((tmpvar_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      vPos_39 = (vPos_24 + ((tmpvar_40 * 
        (((mix (
          mix (tmpvar_47, fTarget_44, fAmount_43)
        , fTarget_44, fAmount_43) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_19 = vPos_24;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_19;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_52.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    vPos_48.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_53.x + (tmpvar_53.y * tmpvar_53.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_49)));
    vPos_48 = (normalize(vPos_48) * fLength_50);
    FinalPosition_19 = vPos_48;
  };
  tmpvar_16.xyz = FinalPosition_19;
  highp vec4 tmpvar_55;
  tmpvar_55 = (glstate_matrix_mvp * tmpvar_16);
  highp vec4 o_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (tmpvar_55 * 0.5);
  highp vec2 tmpvar_58;
  tmpvar_58.x = tmpvar_57.x;
  tmpvar_58.y = (tmpvar_57.y * _ProjectionParams.x);
  o_56.xy = (tmpvar_58 + tmpvar_57.w);
  o_56.zw = tmpvar_55.zw;
  highp vec3 tmpvar_59;
  tmpvar_59 = o_56.xyw;
  tmpvar_9 = tmpvar_59;
  highp vec2 tmpvar_60;
  tmpvar_60 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_60;
  tmpvar_4 = tmpvar_6;
  highp vec3 tmpvar_61;
  tmpvar_61 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_62;
  v_62.x = _World2Object[0].x;
  v_62.y = _World2Object[1].x;
  v_62.z = _World2Object[2].x;
  v_62.w = _World2Object[3].x;
  highp vec4 v_63;
  v_63.x = _World2Object[0].y;
  v_63.y = _World2Object[1].y;
  v_63.z = _World2Object[2].y;
  v_63.w = _World2Object[3].y;
  highp vec4 v_64;
  v_64.x = _World2Object[0].z;
  v_64.y = _World2Object[1].z;
  v_64.z = _World2Object[2].z;
  v_64.w = _World2Object[3].z;
  highp vec3 tmpvar_65;
  tmpvar_65 = normalize(((
    (v_62.xyz * _glesNormal.x)
   + 
    (v_63.xyz * _glesNormal.y)
  ) + (v_64.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_65;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_66;
  tmpvar_66.w = 1.0;
  tmpvar_66.xyz = worldNormal_2;
  mediump vec3 tmpvar_67;
  mediump vec4 normal_68;
  normal_68 = tmpvar_66;
  mediump vec3 x2_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (normal_68.xyzz * normal_68.yzzx);
  x2_69.x = dot (unity_SHBr, tmpvar_70);
  x2_69.y = dot (unity_SHBg, tmpvar_70);
  x2_69.z = dot (unity_SHBb, tmpvar_70);
  tmpvar_67 = (x2_69 + (unity_SHC.xyz * (
    (normal_68.x * normal_68.x)
   - 
    (normal_68.y * normal_68.y)
  )));
  highp vec3 lightColor0_71;
  lightColor0_71 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_72;
  lightColor1_72 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_73;
  lightColor2_73 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_74;
  lightColor3_74 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_75;
  lightAttenSq_75 = unity_4LightAtten0;
  highp vec3 normal_76;
  normal_76 = worldNormal_2;
  highp vec4 tmpvar_77;
  tmpvar_77 = (unity_4LightPosX0 - tmpvar_61.x);
  highp vec4 tmpvar_78;
  tmpvar_78 = (unity_4LightPosY0 - tmpvar_61.y);
  highp vec4 tmpvar_79;
  tmpvar_79 = (unity_4LightPosZ0 - tmpvar_61.z);
  highp vec4 tmpvar_80;
  tmpvar_80 = (((tmpvar_77 * tmpvar_77) + (tmpvar_78 * tmpvar_78)) + (tmpvar_79 * tmpvar_79));
  highp vec4 tmpvar_81;
  tmpvar_81 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_77 * normal_76.x) + (tmpvar_78 * normal_76.y)) + (tmpvar_79 * normal_76.z))
   * 
    inversesqrt(tmpvar_80)
  )) * (1.0/((1.0 + 
    (tmpvar_80 * lightAttenSq_75)
  ))));
  highp vec3 tmpvar_82;
  tmpvar_82 = (tmpvar_67 + ((
    ((lightColor0_71 * tmpvar_81.x) + (lightColor1_72 * tmpvar_81.y))
   + 
    (lightColor2_73 * tmpvar_81.z)
  ) + (lightColor3_74 * tmpvar_81.w)));
  tmpvar_5 = tmpvar_82;
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_61;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_5;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 detailColor_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture (_DetailTex, xlv_TEXCOORD4.xy);
  detailColor_10 = tmpvar_19;
  diffuseColor_11.xyz = mix (diffuseColor_11.xyz, detailColor_10.xyz, detailColor_10.www);
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_22;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_23;
  normalWorld_23 = tmpvar_4;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_23;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_28 = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tmpvar_8 * tmpvar_1) * diff_28);
  c_27.xyz = tmpvar_30;
  c_27.w = tmpvar_9;
  c_26.w = c_27.w;
  mediump vec3 tmpvar_31;
  tmpvar_31 = (c_27.xyz + (tmpvar_8 * (xlv_TEXCOORD6 + x1_25)));
  c_26.xyz = tmpvar_31;
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_11;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_15;
  highp vec2 tmpvar_16;
  tmpvar_16 = _glesMultiTexCoord2.xy;
  tmpvar_9.xy = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = tmpvar_1.xyz;
  FinalPosition_20 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = (_WindQuality * _WindEnabled);
  if ((tmpvar_22 > 0.0)) {
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_23 * _ST_WindVector.xyz));
    highp mat3 tmpvar_24;
    tmpvar_24[0] = _World2Object[0].xyz;
    tmpvar_24[1] = _World2Object[1].xyz;
    tmpvar_24[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_24 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_22 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    if ((tmpvar_22 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = tmpvar_21;
      highp float fAdherenceScale_27;
      highp vec3 tmpvar_28;
      tmpvar_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_29;
      tmpvar_29 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (tmpvar_29 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((tmpvar_29 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_29 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((tmpvar_29 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        (mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_30.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (_glesVertex.xyz + ((tmpvar_28 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((tmpvar_29 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((
        ((tmpvar_38.x * tmpvar_38.y) * tmpvar_38.x)
       * tmpvar_38.y) * _ST_WindTurbulences.x));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_18 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp vec3 tmpvar_41;
      tmpvar_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_42;
      tmpvar_42 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_43;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (tmpvar_42 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((tmpvar_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      vPos_40 = (vPos_25 + ((tmpvar_41 * 
        (((mix (
          mix (tmpvar_48, fTarget_45, fAmount_44)
        , fTarget_45, fAmount_44) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_20 = vPos_25;
  };
  if ((tmpvar_22 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_20;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_53.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    vPos_49.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_54.x + (tmpvar_54.y * tmpvar_54.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_50)));
    vPos_49 = (normalize(vPos_49) * fLength_51);
    FinalPosition_20 = vPos_49;
  };
  tmpvar_17.xyz = FinalPosition_20;
  highp vec4 tmpvar_56;
  tmpvar_56 = (glstate_matrix_mvp * tmpvar_17);
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (tmpvar_56 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = tmpvar_56.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  tmpvar_10 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_61;
  tmpvar_4 = tmpvar_7;
  highp vec3 tmpvar_62;
  tmpvar_62 = (_Object2World * tmpvar_17).xyz;
  highp vec4 v_63;
  v_63.x = _World2Object[0].x;
  v_63.y = _World2Object[1].x;
  v_63.z = _World2Object[2].x;
  v_63.w = _World2Object[3].x;
  highp vec4 v_64;
  v_64.x = _World2Object[0].y;
  v_64.y = _World2Object[1].y;
  v_64.z = _World2Object[2].y;
  v_64.w = _World2Object[3].y;
  highp vec4 v_65;
  v_65.x = _World2Object[0].z;
  v_65.y = _World2Object[1].z;
  v_65.z = _World2Object[2].z;
  v_65.w = _World2Object[3].z;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(((
    (v_63.xyz * _glesNormal.x)
   + 
    (v_64.xyz * _glesNormal.y)
  ) + (v_65.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_66;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_67;
  tmpvar_67.w = 1.0;
  tmpvar_67.xyz = worldNormal_2;
  mediump vec3 tmpvar_68;
  mediump vec4 normal_69;
  normal_69 = tmpvar_67;
  mediump vec3 x2_70;
  mediump vec4 tmpvar_71;
  tmpvar_71 = (normal_69.xyzz * normal_69.yzzx);
  x2_70.x = dot (unity_SHBr, tmpvar_71);
  x2_70.y = dot (unity_SHBg, tmpvar_71);
  x2_70.z = dot (unity_SHBb, tmpvar_71);
  tmpvar_68 = (x2_70 + (unity_SHC.xyz * (
    (normal_69.x * normal_69.x)
   - 
    (normal_69.y * normal_69.y)
  )));
  highp vec3 lightColor0_72;
  lightColor0_72 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_73;
  lightColor1_73 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_74;
  lightColor2_74 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_75;
  lightColor3_75 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_76;
  lightAttenSq_76 = unity_4LightAtten0;
  highp vec3 normal_77;
  normal_77 = worldNormal_2;
  highp vec4 tmpvar_78;
  tmpvar_78 = (unity_4LightPosX0 - tmpvar_62.x);
  highp vec4 tmpvar_79;
  tmpvar_79 = (unity_4LightPosY0 - tmpvar_62.y);
  highp vec4 tmpvar_80;
  tmpvar_80 = (unity_4LightPosZ0 - tmpvar_62.z);
  highp vec4 tmpvar_81;
  tmpvar_81 = (((tmpvar_78 * tmpvar_78) + (tmpvar_79 * tmpvar_79)) + (tmpvar_80 * tmpvar_80));
  highp vec4 tmpvar_82;
  tmpvar_82 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_78 * normal_77.x) + (tmpvar_79 * normal_77.y)) + (tmpvar_80 * normal_77.z))
   * 
    inversesqrt(tmpvar_81)
  )) * (1.0/((1.0 + 
    (tmpvar_81 * lightAttenSq_76)
  ))));
  highp vec3 tmpvar_83;
  tmpvar_83 = (tmpvar_68 + ((
    ((lightColor0_72 * tmpvar_82.x) + (lightColor1_73 * tmpvar_82.y))
   + 
    (lightColor2_74 * tmpvar_82.z)
  ) + (lightColor3_75 * tmpvar_82.w)));
  tmpvar_5 = tmpvar_83;
  highp vec4 tmpvar_84;
  tmpvar_84 = (unity_World2Shadow[0] * (_Object2World * tmpvar_17));
  tmpvar_6 = tmpvar_84;
  gl_Position = (glstate_matrix_mvp * tmpvar_17);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_62;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 detailColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_DetailTex, xlv_TEXCOORD4.xy);
  detailColor_11 = tmpvar_20;
  diffuseColor_12.xyz = mix (diffuseColor_12.xyz, detailColor_11.xyz, detailColor_11.www);
  mediump vec3 tmpvar_21;
  tmpvar_21 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_21 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_21.x, max (tmpvar_21.y, tmpvar_21.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_22;
  tmpvar_22 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_22;
  lowp float tmpvar_23;
  mediump float dist_24;
  lowp float tmpvar_25;
  tmpvar_25 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x;
  dist_24 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (float((dist_24 > 
    (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w)
  )), _LightShadowData.x);
  tmpvar_23 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_27;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_23;
  mediump vec3 normalWorld_28;
  normalWorld_28 = tmpvar_5;
  mediump vec3 tmpvar_29;
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = normalWorld_28;
  mediump vec3 x1_31;
  x1_31.x = dot (unity_SHAr, tmpvar_30);
  x1_31.y = dot (unity_SHAg, tmpvar_30);
  x1_31.z = dot (unity_SHAb, tmpvar_30);
  tmpvar_29 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_29;
  lowp vec4 c_32;
  lowp vec4 c_33;
  lowp float diff_34;
  mediump float tmpvar_35;
  tmpvar_35 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_34 = tmpvar_35;
  mediump vec3 tmpvar_36;
  tmpvar_36 = ((tmpvar_9 * tmpvar_29) * diff_34);
  c_33.xyz = tmpvar_36;
  c_33.w = tmpvar_10;
  c_32.w = c_33.w;
  mediump vec3 tmpvar_37;
  tmpvar_37 = (c_33.xyz + (tmpvar_9 * (xlv_TEXCOORD6 + x1_31)));
  c_32.xyz = tmpvar_37;
  c_4.xyz = c_32.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_10;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_14;
  highp vec2 tmpvar_15;
  tmpvar_15 = _glesMultiTexCoord2.xy;
  tmpvar_8.xy = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = tmpvar_1.xyz;
  FinalPosition_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = tmpvar_20;
      highp float fAdherenceScale_26;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((tmpvar_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        (mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_29.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (_glesVertex.xyz + ((tmpvar_27 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((tmpvar_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((
        ((tmpvar_37.x * tmpvar_37.y) * tmpvar_37.x)
       * tmpvar_37.y) * _ST_WindTurbulences.x));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_17 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp vec3 tmpvar_40;
      tmpvar_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_41;
      tmpvar_41 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_42;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (tmpvar_41 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((tmpvar_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      vPos_39 = (vPos_24 + ((tmpvar_40 * 
        (((mix (
          mix (tmpvar_47, fTarget_44, fAmount_43)
        , fTarget_44, fAmount_43) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_19 = vPos_24;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_19;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_52.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    vPos_48.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_53.x + (tmpvar_53.y * tmpvar_53.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_49)));
    vPos_48 = (normalize(vPos_48) * fLength_50);
    FinalPosition_19 = vPos_48;
  };
  tmpvar_16.xyz = FinalPosition_19;
  highp vec4 tmpvar_55;
  tmpvar_55 = (glstate_matrix_mvp * tmpvar_16);
  highp vec4 o_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (tmpvar_55 * 0.5);
  highp vec2 tmpvar_58;
  tmpvar_58.x = tmpvar_57.x;
  tmpvar_58.y = (tmpvar_57.y * _ProjectionParams.x);
  o_56.xy = (tmpvar_58 + tmpvar_57.w);
  o_56.zw = tmpvar_55.zw;
  highp vec3 tmpvar_59;
  tmpvar_59 = o_56.xyw;
  tmpvar_9 = tmpvar_59;
  highp vec2 tmpvar_60;
  tmpvar_60 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_60;
  tmpvar_4 = tmpvar_6;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_64;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = worldNormal_2;
  mediump vec4 normal_66;
  normal_66 = tmpvar_65;
  mediump vec3 x2_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = (normal_66.xyzz * normal_66.yzzx);
  x2_67.x = dot (unity_SHBr, tmpvar_68);
  x2_67.y = dot (unity_SHBg, tmpvar_68);
  x2_67.z = dot (unity_SHBb, tmpvar_68);
  highp vec4 tmpvar_69;
  tmpvar_69 = (unity_World2Shadow[0] * (_Object2World * tmpvar_16));
  tmpvar_5 = tmpvar_69;
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_16).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = (x2_67 + (unity_SHC.xyz * (
    (normal_66.x * normal_66.x)
   - 
    (normal_66.y * normal_66.y)
  )));
  xlv_TEXCOORD7 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 detailColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_DetailTex, xlv_TEXCOORD4.xy);
  detailColor_11 = tmpvar_20;
  diffuseColor_12.xyz = mix (diffuseColor_12.xyz, detailColor_11.xyz, detailColor_11.www);
  mediump vec3 tmpvar_21;
  tmpvar_21 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_21 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_21.x, max (tmpvar_21.y, tmpvar_21.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_22;
  tmpvar_22 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_22;
  lowp float shadow_23;
  lowp float tmpvar_24;
  tmpvar_24 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD7.xyz);
  mediump float tmpvar_25;
  tmpvar_25 = (_LightShadowData.x + (tmpvar_24 * (1.0 - _LightShadowData.x)));
  shadow_23 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_26;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_23;
  mediump vec3 normalWorld_27;
  normalWorld_27 = tmpvar_5;
  mediump vec3 tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = normalWorld_27;
  mediump vec3 x1_30;
  x1_30.x = dot (unity_SHAr, tmpvar_29);
  x1_30.y = dot (unity_SHAg, tmpvar_29);
  x1_30.z = dot (unity_SHAb, tmpvar_29);
  tmpvar_28 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_28;
  lowp vec4 c_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_33 = tmpvar_34;
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tmpvar_9 * tmpvar_28) * diff_33);
  c_32.xyz = tmpvar_35;
  c_32.w = tmpvar_10;
  c_31.w = c_32.w;
  mediump vec3 tmpvar_36;
  tmpvar_36 = (c_32.xyz + (tmpvar_9 * (xlv_TEXCOORD6 + x1_30)));
  c_31.xyz = tmpvar_36;
  c_4.xyz = c_31.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
out mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_10;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_14;
  highp vec2 tmpvar_15;
  tmpvar_15 = _glesMultiTexCoord2.xy;
  tmpvar_8.xy = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = tmpvar_1.xyz;
  FinalPosition_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = tmpvar_20;
      highp float fAdherenceScale_26;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((tmpvar_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        (mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_29.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (_glesVertex.xyz + ((tmpvar_27 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((tmpvar_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((
        ((tmpvar_37.x * tmpvar_37.y) * tmpvar_37.x)
       * tmpvar_37.y) * _ST_WindTurbulences.x));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_17 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp vec3 tmpvar_40;
      tmpvar_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_41;
      tmpvar_41 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_42;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (tmpvar_41 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((tmpvar_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      vPos_39 = (vPos_24 + ((tmpvar_40 * 
        (((mix (
          mix (tmpvar_47, fTarget_44, fAmount_43)
        , fTarget_44, fAmount_43) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_19 = vPos_24;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_19;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_52.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    vPos_48.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_53.x + (tmpvar_53.y * tmpvar_53.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_49)));
    vPos_48 = (normalize(vPos_48) * fLength_50);
    FinalPosition_19 = vPos_48;
  };
  tmpvar_16.xyz = FinalPosition_19;
  highp vec4 tmpvar_55;
  tmpvar_55 = (glstate_matrix_mvp * tmpvar_16);
  highp vec4 o_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (tmpvar_55 * 0.5);
  highp vec2 tmpvar_58;
  tmpvar_58.x = tmpvar_57.x;
  tmpvar_58.y = (tmpvar_57.y * _ProjectionParams.x);
  o_56.xy = (tmpvar_58 + tmpvar_57.w);
  o_56.zw = tmpvar_55.zw;
  highp vec3 tmpvar_59;
  tmpvar_59 = o_56.xyw;
  tmpvar_9 = tmpvar_59;
  highp vec2 tmpvar_60;
  tmpvar_60 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_60;
  tmpvar_4 = tmpvar_6;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_64;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = worldNormal_2;
  mediump vec4 normal_66;
  normal_66 = tmpvar_65;
  mediump vec3 x2_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = (normal_66.xyzz * normal_66.yzzx);
  x2_67.x = dot (unity_SHBr, tmpvar_68);
  x2_67.y = dot (unity_SHBg, tmpvar_68);
  x2_67.z = dot (unity_SHBb, tmpvar_68);
  highp vec4 tmpvar_69;
  tmpvar_69 = (unity_World2Shadow[0] * (_Object2World * tmpvar_16));
  tmpvar_5 = tmpvar_69;
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_16).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = (x2_67 + (unity_SHC.xyz * (
    (normal_66.x * normal_66.x)
   - 
    (normal_66.y * normal_66.y)
  )));
  xlv_TEXCOORD7 = tmpvar_5;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
in mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 detailColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture (_DetailTex, xlv_TEXCOORD4.xy);
  detailColor_11 = tmpvar_20;
  diffuseColor_12.xyz = mix (diffuseColor_12.xyz, detailColor_11.xyz, detailColor_11.www);
  mediump vec3 tmpvar_21;
  tmpvar_21 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_21 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_21.x, max (tmpvar_21.y, tmpvar_21.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_22;
  tmpvar_22 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_22;
  lowp float shadow_23;
  mediump float tmpvar_24;
  tmpvar_24 = texture (_ShadowMapTexture, xlv_TEXCOORD7.xyz);
  lowp float tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump float tmpvar_26;
  tmpvar_26 = (_LightShadowData.x + (tmpvar_25 * (1.0 - _LightShadowData.x)));
  shadow_23 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_27;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_23;
  mediump vec3 normalWorld_28;
  normalWorld_28 = tmpvar_5;
  mediump vec3 tmpvar_29;
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = normalWorld_28;
  mediump vec3 x1_31;
  x1_31.x = dot (unity_SHAr, tmpvar_30);
  x1_31.y = dot (unity_SHAg, tmpvar_30);
  x1_31.z = dot (unity_SHAb, tmpvar_30);
  tmpvar_29 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_29;
  lowp vec4 c_32;
  lowp vec4 c_33;
  lowp float diff_34;
  mediump float tmpvar_35;
  tmpvar_35 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_34 = tmpvar_35;
  mediump vec3 tmpvar_36;
  tmpvar_36 = ((tmpvar_9 * tmpvar_29) * diff_34);
  c_33.xyz = tmpvar_36;
  c_33.w = tmpvar_10;
  c_32.w = c_33.w;
  mediump vec3 tmpvar_37;
  tmpvar_37 = (c_33.xyz + (tmpvar_9 * (xlv_TEXCOORD6 + x1_31)));
  c_32.xyz = tmpvar_37;
  c_4.xyz = c_32.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_11;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_15;
  highp vec2 tmpvar_16;
  tmpvar_16 = _glesMultiTexCoord2.xy;
  tmpvar_9.xy = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = tmpvar_1.xyz;
  FinalPosition_20 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = (_WindQuality * _WindEnabled);
  if ((tmpvar_22 > 0.0)) {
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_23 * _ST_WindVector.xyz));
    highp mat3 tmpvar_24;
    tmpvar_24[0] = _World2Object[0].xyz;
    tmpvar_24[1] = _World2Object[1].xyz;
    tmpvar_24[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_24 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_22 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    if ((tmpvar_22 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = tmpvar_21;
      highp float fAdherenceScale_27;
      highp vec3 tmpvar_28;
      tmpvar_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_29;
      tmpvar_29 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (tmpvar_29 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((tmpvar_29 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_29 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((tmpvar_29 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        (mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_30.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (_glesVertex.xyz + ((tmpvar_28 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((tmpvar_29 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((
        ((tmpvar_38.x * tmpvar_38.y) * tmpvar_38.x)
       * tmpvar_38.y) * _ST_WindTurbulences.x));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_18 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp vec3 tmpvar_41;
      tmpvar_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_42;
      tmpvar_42 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_43;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (tmpvar_42 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((tmpvar_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      vPos_40 = (vPos_25 + ((tmpvar_41 * 
        (((mix (
          mix (tmpvar_48, fTarget_45, fAmount_44)
        , fTarget_45, fAmount_44) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_20 = vPos_25;
  };
  if ((tmpvar_22 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_20;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_53.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    vPos_49.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_54.x + (tmpvar_54.y * tmpvar_54.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_50)));
    vPos_49 = (normalize(vPos_49) * fLength_51);
    FinalPosition_20 = vPos_49;
  };
  tmpvar_17.xyz = FinalPosition_20;
  highp vec4 tmpvar_56;
  tmpvar_56 = (glstate_matrix_mvp * tmpvar_17);
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (tmpvar_56 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = tmpvar_56.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  tmpvar_10 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_61;
  tmpvar_4 = tmpvar_7;
  highp vec3 tmpvar_62;
  tmpvar_62 = (_Object2World * tmpvar_17).xyz;
  highp vec4 v_63;
  v_63.x = _World2Object[0].x;
  v_63.y = _World2Object[1].x;
  v_63.z = _World2Object[2].x;
  v_63.w = _World2Object[3].x;
  highp vec4 v_64;
  v_64.x = _World2Object[0].y;
  v_64.y = _World2Object[1].y;
  v_64.z = _World2Object[2].y;
  v_64.w = _World2Object[3].y;
  highp vec4 v_65;
  v_65.x = _World2Object[0].z;
  v_65.y = _World2Object[1].z;
  v_65.z = _World2Object[2].z;
  v_65.w = _World2Object[3].z;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(((
    (v_63.xyz * _glesNormal.x)
   + 
    (v_64.xyz * _glesNormal.y)
  ) + (v_65.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_66;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_67;
  tmpvar_67.w = 1.0;
  tmpvar_67.xyz = worldNormal_2;
  mediump vec3 tmpvar_68;
  mediump vec4 normal_69;
  normal_69 = tmpvar_67;
  mediump vec3 x2_70;
  mediump vec4 tmpvar_71;
  tmpvar_71 = (normal_69.xyzz * normal_69.yzzx);
  x2_70.x = dot (unity_SHBr, tmpvar_71);
  x2_70.y = dot (unity_SHBg, tmpvar_71);
  x2_70.z = dot (unity_SHBb, tmpvar_71);
  tmpvar_68 = (x2_70 + (unity_SHC.xyz * (
    (normal_69.x * normal_69.x)
   - 
    (normal_69.y * normal_69.y)
  )));
  highp vec3 lightColor0_72;
  lightColor0_72 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_73;
  lightColor1_73 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_74;
  lightColor2_74 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_75;
  lightColor3_75 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_76;
  lightAttenSq_76 = unity_4LightAtten0;
  highp vec3 normal_77;
  normal_77 = worldNormal_2;
  highp vec4 tmpvar_78;
  tmpvar_78 = (unity_4LightPosX0 - tmpvar_62.x);
  highp vec4 tmpvar_79;
  tmpvar_79 = (unity_4LightPosY0 - tmpvar_62.y);
  highp vec4 tmpvar_80;
  tmpvar_80 = (unity_4LightPosZ0 - tmpvar_62.z);
  highp vec4 tmpvar_81;
  tmpvar_81 = (((tmpvar_78 * tmpvar_78) + (tmpvar_79 * tmpvar_79)) + (tmpvar_80 * tmpvar_80));
  highp vec4 tmpvar_82;
  tmpvar_82 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_78 * normal_77.x) + (tmpvar_79 * normal_77.y)) + (tmpvar_80 * normal_77.z))
   * 
    inversesqrt(tmpvar_81)
  )) * (1.0/((1.0 + 
    (tmpvar_81 * lightAttenSq_76)
  ))));
  highp vec3 tmpvar_83;
  tmpvar_83 = (tmpvar_68 + ((
    ((lightColor0_72 * tmpvar_82.x) + (lightColor1_73 * tmpvar_82.y))
   + 
    (lightColor2_74 * tmpvar_82.z)
  ) + (lightColor3_75 * tmpvar_82.w)));
  tmpvar_5 = tmpvar_83;
  highp vec4 tmpvar_84;
  tmpvar_84 = (unity_World2Shadow[0] * (_Object2World * tmpvar_17));
  tmpvar_6 = tmpvar_84;
  gl_Position = (glstate_matrix_mvp * tmpvar_17);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_62;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 detailColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_DetailTex, xlv_TEXCOORD4.xy);
  detailColor_11 = tmpvar_20;
  diffuseColor_12.xyz = mix (diffuseColor_12.xyz, detailColor_11.xyz, detailColor_11.www);
  mediump vec3 tmpvar_21;
  tmpvar_21 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_21 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_21.x, max (tmpvar_21.y, tmpvar_21.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_22;
  tmpvar_22 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_22;
  lowp float shadow_23;
  lowp float tmpvar_24;
  tmpvar_24 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD7.xyz);
  mediump float tmpvar_25;
  tmpvar_25 = (_LightShadowData.x + (tmpvar_24 * (1.0 - _LightShadowData.x)));
  shadow_23 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_26;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_23;
  mediump vec3 normalWorld_27;
  normalWorld_27 = tmpvar_5;
  mediump vec3 tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = normalWorld_27;
  mediump vec3 x1_30;
  x1_30.x = dot (unity_SHAr, tmpvar_29);
  x1_30.y = dot (unity_SHAg, tmpvar_29);
  x1_30.z = dot (unity_SHAb, tmpvar_29);
  tmpvar_28 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_28;
  lowp vec4 c_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_33 = tmpvar_34;
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tmpvar_9 * tmpvar_28) * diff_33);
  c_32.xyz = tmpvar_35;
  c_32.w = tmpvar_10;
  c_31.w = c_32.w;
  mediump vec3 tmpvar_36;
  tmpvar_36 = (c_32.xyz + (tmpvar_9 * (xlv_TEXCOORD6 + x1_30)));
  c_31.xyz = tmpvar_36;
  c_4.xyz = c_31.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
out mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_11;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_15;
  highp vec2 tmpvar_16;
  tmpvar_16 = _glesMultiTexCoord2.xy;
  tmpvar_9.xy = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = tmpvar_1.xyz;
  FinalPosition_20 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = (_WindQuality * _WindEnabled);
  if ((tmpvar_22 > 0.0)) {
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_23 * _ST_WindVector.xyz));
    highp mat3 tmpvar_24;
    tmpvar_24[0] = _World2Object[0].xyz;
    tmpvar_24[1] = _World2Object[1].xyz;
    tmpvar_24[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_24 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_22 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    if ((tmpvar_22 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = tmpvar_21;
      highp float fAdherenceScale_27;
      highp vec3 tmpvar_28;
      tmpvar_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_29;
      tmpvar_29 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (tmpvar_29 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((tmpvar_29 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_29 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((tmpvar_29 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        (mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_30.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (_glesVertex.xyz + ((tmpvar_28 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((tmpvar_29 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((
        ((tmpvar_38.x * tmpvar_38.y) * tmpvar_38.x)
       * tmpvar_38.y) * _ST_WindTurbulences.x));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_18 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp vec3 tmpvar_41;
      tmpvar_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_42;
      tmpvar_42 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_43;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (tmpvar_42 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((tmpvar_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      vPos_40 = (vPos_25 + ((tmpvar_41 * 
        (((mix (
          mix (tmpvar_48, fTarget_45, fAmount_44)
        , fTarget_45, fAmount_44) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_20 = vPos_25;
  };
  if ((tmpvar_22 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_20;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_53.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    vPos_49.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_54.x + (tmpvar_54.y * tmpvar_54.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_50)));
    vPos_49 = (normalize(vPos_49) * fLength_51);
    FinalPosition_20 = vPos_49;
  };
  tmpvar_17.xyz = FinalPosition_20;
  highp vec4 tmpvar_56;
  tmpvar_56 = (glstate_matrix_mvp * tmpvar_17);
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (tmpvar_56 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = tmpvar_56.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  tmpvar_10 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_61;
  tmpvar_4 = tmpvar_7;
  highp vec3 tmpvar_62;
  tmpvar_62 = (_Object2World * tmpvar_17).xyz;
  highp vec4 v_63;
  v_63.x = _World2Object[0].x;
  v_63.y = _World2Object[1].x;
  v_63.z = _World2Object[2].x;
  v_63.w = _World2Object[3].x;
  highp vec4 v_64;
  v_64.x = _World2Object[0].y;
  v_64.y = _World2Object[1].y;
  v_64.z = _World2Object[2].y;
  v_64.w = _World2Object[3].y;
  highp vec4 v_65;
  v_65.x = _World2Object[0].z;
  v_65.y = _World2Object[1].z;
  v_65.z = _World2Object[2].z;
  v_65.w = _World2Object[3].z;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(((
    (v_63.xyz * _glesNormal.x)
   + 
    (v_64.xyz * _glesNormal.y)
  ) + (v_65.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_66;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_67;
  tmpvar_67.w = 1.0;
  tmpvar_67.xyz = worldNormal_2;
  mediump vec3 tmpvar_68;
  mediump vec4 normal_69;
  normal_69 = tmpvar_67;
  mediump vec3 x2_70;
  mediump vec4 tmpvar_71;
  tmpvar_71 = (normal_69.xyzz * normal_69.yzzx);
  x2_70.x = dot (unity_SHBr, tmpvar_71);
  x2_70.y = dot (unity_SHBg, tmpvar_71);
  x2_70.z = dot (unity_SHBb, tmpvar_71);
  tmpvar_68 = (x2_70 + (unity_SHC.xyz * (
    (normal_69.x * normal_69.x)
   - 
    (normal_69.y * normal_69.y)
  )));
  highp vec3 lightColor0_72;
  lightColor0_72 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_73;
  lightColor1_73 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_74;
  lightColor2_74 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_75;
  lightColor3_75 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_76;
  lightAttenSq_76 = unity_4LightAtten0;
  highp vec3 normal_77;
  normal_77 = worldNormal_2;
  highp vec4 tmpvar_78;
  tmpvar_78 = (unity_4LightPosX0 - tmpvar_62.x);
  highp vec4 tmpvar_79;
  tmpvar_79 = (unity_4LightPosY0 - tmpvar_62.y);
  highp vec4 tmpvar_80;
  tmpvar_80 = (unity_4LightPosZ0 - tmpvar_62.z);
  highp vec4 tmpvar_81;
  tmpvar_81 = (((tmpvar_78 * tmpvar_78) + (tmpvar_79 * tmpvar_79)) + (tmpvar_80 * tmpvar_80));
  highp vec4 tmpvar_82;
  tmpvar_82 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_78 * normal_77.x) + (tmpvar_79 * normal_77.y)) + (tmpvar_80 * normal_77.z))
   * 
    inversesqrt(tmpvar_81)
  )) * (1.0/((1.0 + 
    (tmpvar_81 * lightAttenSq_76)
  ))));
  highp vec3 tmpvar_83;
  tmpvar_83 = (tmpvar_68 + ((
    ((lightColor0_72 * tmpvar_82.x) + (lightColor1_73 * tmpvar_82.y))
   + 
    (lightColor2_74 * tmpvar_82.z)
  ) + (lightColor3_75 * tmpvar_82.w)));
  tmpvar_5 = tmpvar_83;
  highp vec4 tmpvar_84;
  tmpvar_84 = (unity_World2Shadow[0] * (_Object2World * tmpvar_17));
  tmpvar_6 = tmpvar_84;
  gl_Position = (glstate_matrix_mvp * tmpvar_17);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_62;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = tmpvar_6;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
in mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 detailColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture (_DetailTex, xlv_TEXCOORD4.xy);
  detailColor_11 = tmpvar_20;
  diffuseColor_12.xyz = mix (diffuseColor_12.xyz, detailColor_11.xyz, detailColor_11.www);
  mediump vec3 tmpvar_21;
  tmpvar_21 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_21 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_21.x, max (tmpvar_21.y, tmpvar_21.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_22;
  tmpvar_22 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_22;
  lowp float shadow_23;
  mediump float tmpvar_24;
  tmpvar_24 = texture (_ShadowMapTexture, xlv_TEXCOORD7.xyz);
  lowp float tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump float tmpvar_26;
  tmpvar_26 = (_LightShadowData.x + (tmpvar_25 * (1.0 - _LightShadowData.x)));
  shadow_23 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_27;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_23;
  mediump vec3 normalWorld_28;
  normalWorld_28 = tmpvar_5;
  mediump vec3 tmpvar_29;
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = normalWorld_28;
  mediump vec3 x1_31;
  x1_31.x = dot (unity_SHAr, tmpvar_30);
  x1_31.y = dot (unity_SHAg, tmpvar_30);
  x1_31.z = dot (unity_SHAb, tmpvar_30);
  tmpvar_29 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_29;
  lowp vec4 c_32;
  lowp vec4 c_33;
  lowp float diff_34;
  mediump float tmpvar_35;
  tmpvar_35 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_34 = tmpvar_35;
  mediump vec3 tmpvar_36;
  tmpvar_36 = ((tmpvar_9 * tmpvar_29) * diff_34);
  c_33.xyz = tmpvar_36;
  c_33.w = tmpvar_10;
  c_32.w = c_33.w;
  mediump vec3 tmpvar_37;
  tmpvar_37 = (c_33.xyz + (tmpvar_9 * (xlv_TEXCOORD6 + x1_31)));
  c_32.xyz = tmpvar_37;
  c_4.xyz = c_32.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_10;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_14;
  highp vec2 tmpvar_15;
  tmpvar_15 = _glesMultiTexCoord2.xy;
  tmpvar_8.xy = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = tmpvar_1.xyz;
  FinalPosition_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = tmpvar_20;
      highp float fAdherenceScale_26;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((tmpvar_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        (mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_29.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (_glesVertex.xyz + ((tmpvar_27 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((tmpvar_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((
        ((tmpvar_37.x * tmpvar_37.y) * tmpvar_37.x)
       * tmpvar_37.y) * _ST_WindTurbulences.x));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_17 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp vec3 tmpvar_40;
      tmpvar_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_41;
      tmpvar_41 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_42;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (tmpvar_41 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((tmpvar_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      vPos_39 = (vPos_24 + ((tmpvar_40 * 
        (((mix (
          mix (tmpvar_47, fTarget_44, fAmount_43)
        , fTarget_44, fAmount_43) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_19 = vPos_24;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_19;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_52.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    vPos_48.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_53.x + (tmpvar_53.y * tmpvar_53.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_49)));
    vPos_48 = (normalize(vPos_48) * fLength_50);
    FinalPosition_19 = vPos_48;
  };
  tmpvar_16.xyz = FinalPosition_19;
  highp vec4 tmpvar_55;
  tmpvar_55 = (glstate_matrix_mvp * tmpvar_16);
  highp vec4 o_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (tmpvar_55 * 0.5);
  highp vec2 tmpvar_58;
  tmpvar_58.x = tmpvar_57.x;
  tmpvar_58.y = (tmpvar_57.y * _ProjectionParams.x);
  o_56.xy = (tmpvar_58 + tmpvar_57.w);
  o_56.zw = tmpvar_55.zw;
  highp vec3 tmpvar_59;
  tmpvar_59 = o_56.xyw;
  tmpvar_9 = tmpvar_59;
  highp vec2 tmpvar_60;
  tmpvar_60 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_60;
  tmpvar_5 = tmpvar_6;
  highp vec3 tmpvar_61;
  tmpvar_61 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_62;
  v_62.x = _World2Object[0].x;
  v_62.y = _World2Object[1].x;
  v_62.z = _World2Object[2].x;
  v_62.w = _World2Object[3].x;
  highp vec4 v_63;
  v_63.x = _World2Object[0].y;
  v_63.y = _World2Object[1].y;
  v_63.z = _World2Object[2].y;
  v_63.w = _World2Object[3].y;
  highp vec4 v_64;
  v_64.x = _World2Object[0].z;
  v_64.y = _World2Object[1].z;
  v_64.z = _World2Object[2].z;
  v_64.w = _World2Object[3].z;
  highp vec3 tmpvar_65;
  tmpvar_65 = normalize(((
    (v_62.xyz * _glesNormal.x)
   + 
    (v_63.xyz * _glesNormal.y)
  ) + (v_64.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_65;
  highp mat3 tmpvar_66;
  tmpvar_66[0] = _Object2World[0].xyz;
  tmpvar_66[1] = _Object2World[1].xyz;
  tmpvar_66[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((tmpvar_66 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_69;
  tmpvar_69 = (tmpvar_68 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_3.x;
  tmpvar_70.y = worldBinormal_2.x;
  tmpvar_70.z = worldNormal_4.x;
  tmpvar_70.w = tmpvar_61.x;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_3.y;
  tmpvar_71.y = worldBinormal_2.y;
  tmpvar_71.z = worldNormal_4.y;
  tmpvar_71.w = tmpvar_61.y;
  highp vec4 tmpvar_72;
  tmpvar_72.x = worldTangent_3.z;
  tmpvar_72.y = worldBinormal_2.z;
  tmpvar_72.z = worldNormal_4.z;
  tmpvar_72.w = tmpvar_61.z;
  lowp vec4 tmpvar_73;
  tmpvar_73.w = 1.0;
  tmpvar_73.xyz = worldNormal_4;
  mediump vec4 normal_74;
  normal_74 = tmpvar_73;
  mediump vec3 x2_75;
  mediump vec4 tmpvar_76;
  tmpvar_76 = (normal_74.xyzz * normal_74.yzzx);
  x2_75.x = dot (unity_SHBr, tmpvar_76);
  x2_75.y = dot (unity_SHBg, tmpvar_76);
  x2_75.z = dot (unity_SHBb, tmpvar_76);
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_70;
  xlv_TEXCOORD1 = tmpvar_71;
  xlv_TEXCOORD2 = tmpvar_72;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
  xlv_TEXCOORD7 = (x2_75 + (unity_SHC.xyz * (
    (normal_74.x * normal_74.x)
   - 
    (normal_74.y * normal_74.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 detailColor_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_DetailTex, xlv_TEXCOORD5.xy);
  detailColor_10 = tmpvar_19;
  diffuseColor_11.xyz = mix (diffuseColor_11.xyz, detailColor_10.xyz, detailColor_10.www);
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD0.xyz, tmpvar_22);
  worldN_3.x = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD1.xyz, tmpvar_22);
  worldN_3.y = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD2.xyz, tmpvar_22);
  worldN_3.z = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_26;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_27;
  normalWorld_27 = worldN_3;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = normalWorld_27;
  mediump vec3 x1_29;
  x1_29.x = dot (unity_SHAr, tmpvar_28);
  x1_29.y = dot (unity_SHAg, tmpvar_28);
  x1_29.z = dot (unity_SHAb, tmpvar_28);
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_32 = tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_8 * tmpvar_1) * diff_32);
  c_31.xyz = tmpvar_34;
  c_31.w = tmpvar_9;
  c_30.w = c_31.w;
  mediump vec3 tmpvar_35;
  tmpvar_35 = (c_31.xyz + (tmpvar_8 * (xlv_TEXCOORD7 + x1_29)));
  c_30.xyz = tmpvar_35;
  c_4.xyz = c_30.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
in vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
out mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_10;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_14;
  highp vec2 tmpvar_15;
  tmpvar_15 = _glesMultiTexCoord2.xy;
  tmpvar_8.xy = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = tmpvar_1.xyz;
  FinalPosition_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = tmpvar_20;
      highp float fAdherenceScale_26;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((tmpvar_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        (mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_29.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (_glesVertex.xyz + ((tmpvar_27 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((tmpvar_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((
        ((tmpvar_37.x * tmpvar_37.y) * tmpvar_37.x)
       * tmpvar_37.y) * _ST_WindTurbulences.x));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_17 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp vec3 tmpvar_40;
      tmpvar_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_41;
      tmpvar_41 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_42;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (tmpvar_41 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((tmpvar_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      vPos_39 = (vPos_24 + ((tmpvar_40 * 
        (((mix (
          mix (tmpvar_47, fTarget_44, fAmount_43)
        , fTarget_44, fAmount_43) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_19 = vPos_24;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_19;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_52.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    vPos_48.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_53.x + (tmpvar_53.y * tmpvar_53.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_49)));
    vPos_48 = (normalize(vPos_48) * fLength_50);
    FinalPosition_19 = vPos_48;
  };
  tmpvar_16.xyz = FinalPosition_19;
  highp vec4 tmpvar_55;
  tmpvar_55 = (glstate_matrix_mvp * tmpvar_16);
  highp vec4 o_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (tmpvar_55 * 0.5);
  highp vec2 tmpvar_58;
  tmpvar_58.x = tmpvar_57.x;
  tmpvar_58.y = (tmpvar_57.y * _ProjectionParams.x);
  o_56.xy = (tmpvar_58 + tmpvar_57.w);
  o_56.zw = tmpvar_55.zw;
  highp vec3 tmpvar_59;
  tmpvar_59 = o_56.xyw;
  tmpvar_9 = tmpvar_59;
  highp vec2 tmpvar_60;
  tmpvar_60 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_60;
  tmpvar_5 = tmpvar_6;
  highp vec3 tmpvar_61;
  tmpvar_61 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_62;
  v_62.x = _World2Object[0].x;
  v_62.y = _World2Object[1].x;
  v_62.z = _World2Object[2].x;
  v_62.w = _World2Object[3].x;
  highp vec4 v_63;
  v_63.x = _World2Object[0].y;
  v_63.y = _World2Object[1].y;
  v_63.z = _World2Object[2].y;
  v_63.w = _World2Object[3].y;
  highp vec4 v_64;
  v_64.x = _World2Object[0].z;
  v_64.y = _World2Object[1].z;
  v_64.z = _World2Object[2].z;
  v_64.w = _World2Object[3].z;
  highp vec3 tmpvar_65;
  tmpvar_65 = normalize(((
    (v_62.xyz * _glesNormal.x)
   + 
    (v_63.xyz * _glesNormal.y)
  ) + (v_64.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_65;
  highp mat3 tmpvar_66;
  tmpvar_66[0] = _Object2World[0].xyz;
  tmpvar_66[1] = _Object2World[1].xyz;
  tmpvar_66[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((tmpvar_66 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_69;
  tmpvar_69 = (tmpvar_68 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_3.x;
  tmpvar_70.y = worldBinormal_2.x;
  tmpvar_70.z = worldNormal_4.x;
  tmpvar_70.w = tmpvar_61.x;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_3.y;
  tmpvar_71.y = worldBinormal_2.y;
  tmpvar_71.z = worldNormal_4.y;
  tmpvar_71.w = tmpvar_61.y;
  highp vec4 tmpvar_72;
  tmpvar_72.x = worldTangent_3.z;
  tmpvar_72.y = worldBinormal_2.z;
  tmpvar_72.z = worldNormal_4.z;
  tmpvar_72.w = tmpvar_61.z;
  lowp vec4 tmpvar_73;
  tmpvar_73.w = 1.0;
  tmpvar_73.xyz = worldNormal_4;
  mediump vec4 normal_74;
  normal_74 = tmpvar_73;
  mediump vec3 x2_75;
  mediump vec4 tmpvar_76;
  tmpvar_76 = (normal_74.xyzz * normal_74.yzzx);
  x2_75.x = dot (unity_SHBr, tmpvar_76);
  x2_75.y = dot (unity_SHBg, tmpvar_76);
  x2_75.z = dot (unity_SHBb, tmpvar_76);
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_70;
  xlv_TEXCOORD1 = tmpvar_71;
  xlv_TEXCOORD2 = tmpvar_72;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
  xlv_TEXCOORD7 = (x2_75 + (unity_SHC.xyz * (
    (normal_74.x * normal_74.x)
   - 
    (normal_74.y * normal_74.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
in mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 detailColor_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture (_DetailTex, xlv_TEXCOORD5.xy);
  detailColor_10 = tmpvar_19;
  diffuseColor_11.xyz = mix (diffuseColor_11.xyz, detailColor_10.xyz, detailColor_10.www);
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD0.xyz, tmpvar_22);
  worldN_3.x = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD1.xyz, tmpvar_22);
  worldN_3.y = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD2.xyz, tmpvar_22);
  worldN_3.z = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_26;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_27;
  normalWorld_27 = worldN_3;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = normalWorld_27;
  mediump vec3 x1_29;
  x1_29.x = dot (unity_SHAr, tmpvar_28);
  x1_29.y = dot (unity_SHAg, tmpvar_28);
  x1_29.z = dot (unity_SHAb, tmpvar_28);
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_32 = tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_8 * tmpvar_1) * diff_32);
  c_31.xyz = tmpvar_34;
  c_31.w = tmpvar_9;
  c_30.w = c_31.w;
  mediump vec3 tmpvar_35;
  tmpvar_35 = (c_31.xyz + (tmpvar_8 * (xlv_TEXCOORD7 + x1_29)));
  c_30.xyz = tmpvar_35;
  c_4.xyz = c_30.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_11;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_15;
  highp vec2 tmpvar_16;
  tmpvar_16 = _glesMultiTexCoord2.xy;
  tmpvar_9.xy = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = tmpvar_1.xyz;
  FinalPosition_20 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = (_WindQuality * _WindEnabled);
  if ((tmpvar_22 > 0.0)) {
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_23 * _ST_WindVector.xyz));
    highp mat3 tmpvar_24;
    tmpvar_24[0] = _World2Object[0].xyz;
    tmpvar_24[1] = _World2Object[1].xyz;
    tmpvar_24[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_24 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_22 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    if ((tmpvar_22 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = tmpvar_21;
      highp float fAdherenceScale_27;
      highp vec3 tmpvar_28;
      tmpvar_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_29;
      tmpvar_29 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (tmpvar_29 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((tmpvar_29 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_29 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((tmpvar_29 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        (mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_30.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (_glesVertex.xyz + ((tmpvar_28 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((tmpvar_29 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((
        ((tmpvar_38.x * tmpvar_38.y) * tmpvar_38.x)
       * tmpvar_38.y) * _ST_WindTurbulences.x));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_18 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp vec3 tmpvar_41;
      tmpvar_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_42;
      tmpvar_42 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_43;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (tmpvar_42 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((tmpvar_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      vPos_40 = (vPos_25 + ((tmpvar_41 * 
        (((mix (
          mix (tmpvar_48, fTarget_45, fAmount_44)
        , fTarget_45, fAmount_44) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_20 = vPos_25;
  };
  if ((tmpvar_22 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_20;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_53.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    vPos_49.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_54.x + (tmpvar_54.y * tmpvar_54.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_50)));
    vPos_49 = (normalize(vPos_49) * fLength_51);
    FinalPosition_20 = vPos_49;
  };
  tmpvar_17.xyz = FinalPosition_20;
  highp vec4 tmpvar_56;
  tmpvar_56 = (glstate_matrix_mvp * tmpvar_17);
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (tmpvar_56 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = tmpvar_56.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  tmpvar_10 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_61;
  tmpvar_5 = tmpvar_7;
  highp vec3 tmpvar_62;
  tmpvar_62 = (_Object2World * tmpvar_17).xyz;
  highp vec4 v_63;
  v_63.x = _World2Object[0].x;
  v_63.y = _World2Object[1].x;
  v_63.z = _World2Object[2].x;
  v_63.w = _World2Object[3].x;
  highp vec4 v_64;
  v_64.x = _World2Object[0].y;
  v_64.y = _World2Object[1].y;
  v_64.z = _World2Object[2].y;
  v_64.w = _World2Object[3].y;
  highp vec4 v_65;
  v_65.x = _World2Object[0].z;
  v_65.y = _World2Object[1].z;
  v_65.z = _World2Object[2].z;
  v_65.w = _World2Object[3].z;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(((
    (v_63.xyz * _glesNormal.x)
   + 
    (v_64.xyz * _glesNormal.y)
  ) + (v_65.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_66;
  highp mat3 tmpvar_67;
  tmpvar_67[0] = _Object2World[0].xyz;
  tmpvar_67[1] = _Object2World[1].xyz;
  tmpvar_67[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((tmpvar_67 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_68;
  lowp vec3 tmpvar_69;
  tmpvar_69 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_70;
  tmpvar_70 = (tmpvar_69 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_3.x;
  tmpvar_71.y = worldBinormal_2.x;
  tmpvar_71.z = worldNormal_4.x;
  tmpvar_71.w = tmpvar_62.x;
  highp vec4 tmpvar_72;
  tmpvar_72.x = worldTangent_3.y;
  tmpvar_72.y = worldBinormal_2.y;
  tmpvar_72.z = worldNormal_4.y;
  tmpvar_72.w = tmpvar_62.y;
  highp vec4 tmpvar_73;
  tmpvar_73.x = worldTangent_3.z;
  tmpvar_73.y = worldBinormal_2.z;
  tmpvar_73.z = worldNormal_4.z;
  tmpvar_73.w = tmpvar_62.z;
  lowp vec4 tmpvar_74;
  tmpvar_74.w = 1.0;
  tmpvar_74.xyz = worldNormal_4;
  mediump vec4 normal_75;
  normal_75 = tmpvar_74;
  mediump vec3 x2_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (normal_75.xyzz * normal_75.yzzx);
  x2_76.x = dot (unity_SHBr, tmpvar_77);
  x2_76.y = dot (unity_SHBg, tmpvar_77);
  x2_76.z = dot (unity_SHBb, tmpvar_77);
  highp vec4 tmpvar_78;
  tmpvar_78 = (unity_World2Shadow[0] * (_Object2World * tmpvar_17));
  tmpvar_6 = tmpvar_78;
  gl_Position = (glstate_matrix_mvp * tmpvar_17);
  xlv_TEXCOORD0 = tmpvar_71;
  xlv_TEXCOORD1 = tmpvar_72;
  xlv_TEXCOORD2 = tmpvar_73;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_10;
  xlv_TEXCOORD7 = (x2_76 + (unity_SHC.xyz * (
    (normal_75.x * normal_75.x)
   - 
    (normal_75.y * normal_75.y)
  )));
  xlv_TEXCOORD8 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_TEXCOORD8;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 detailColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_DetailTex, xlv_TEXCOORD5.xy);
  detailColor_11 = tmpvar_20;
  diffuseColor_12.xyz = mix (diffuseColor_12.xyz, detailColor_11.xyz, detailColor_11.www);
  mediump vec3 tmpvar_21;
  tmpvar_21 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_21 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_21.x, max (tmpvar_21.y, tmpvar_21.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_22;
  tmpvar_22 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_24;
  mediump float dist_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD8).x;
  dist_25 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (float((dist_25 > 
    (xlv_TEXCOORD8.z / xlv_TEXCOORD8.w)
  )), _LightShadowData.x);
  tmpvar_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD0.xyz, tmpvar_23);
  worldN_4.x = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD1.xyz, tmpvar_23);
  worldN_4.y = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD2.xyz, tmpvar_23);
  worldN_4.z = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_31;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_24;
  mediump vec3 normalWorld_32;
  normalWorld_32 = worldN_4;
  mediump vec3 tmpvar_33;
  mediump vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = normalWorld_32;
  mediump vec3 x1_35;
  x1_35.x = dot (unity_SHAr, tmpvar_34);
  x1_35.y = dot (unity_SHAg, tmpvar_34);
  x1_35.z = dot (unity_SHAb, tmpvar_34);
  tmpvar_33 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_33;
  lowp vec4 c_36;
  lowp vec4 c_37;
  lowp float diff_38;
  mediump float tmpvar_39;
  tmpvar_39 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_38 = tmpvar_39;
  mediump vec3 tmpvar_40;
  tmpvar_40 = ((tmpvar_9 * tmpvar_33) * diff_38);
  c_37.xyz = tmpvar_40;
  c_37.w = tmpvar_10;
  c_36.w = c_37.w;
  mediump vec3 tmpvar_41;
  tmpvar_41 = (c_37.xyz + (tmpvar_9 * (xlv_TEXCOORD7 + x1_35)));
  c_36.xyz = tmpvar_41;
  c_5.xyz = c_36.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_11;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_15;
  highp vec2 tmpvar_16;
  tmpvar_16 = _glesMultiTexCoord2.xy;
  tmpvar_9.xy = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = tmpvar_1.xyz;
  FinalPosition_20 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = (_WindQuality * _WindEnabled);
  if ((tmpvar_22 > 0.0)) {
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_23 * _ST_WindVector.xyz));
    highp mat3 tmpvar_24;
    tmpvar_24[0] = _World2Object[0].xyz;
    tmpvar_24[1] = _World2Object[1].xyz;
    tmpvar_24[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_24 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_22 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    if ((tmpvar_22 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = tmpvar_21;
      highp float fAdherenceScale_27;
      highp vec3 tmpvar_28;
      tmpvar_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_29;
      tmpvar_29 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (tmpvar_29 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((tmpvar_29 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_29 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((tmpvar_29 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        (mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_30.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (_glesVertex.xyz + ((tmpvar_28 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((tmpvar_29 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((
        ((tmpvar_38.x * tmpvar_38.y) * tmpvar_38.x)
       * tmpvar_38.y) * _ST_WindTurbulences.x));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_18 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp vec3 tmpvar_41;
      tmpvar_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_42;
      tmpvar_42 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_43;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (tmpvar_42 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((tmpvar_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      vPos_40 = (vPos_25 + ((tmpvar_41 * 
        (((mix (
          mix (tmpvar_48, fTarget_45, fAmount_44)
        , fTarget_45, fAmount_44) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_20 = vPos_25;
  };
  if ((tmpvar_22 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_20;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_53.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    vPos_49.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_54.x + (tmpvar_54.y * tmpvar_54.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_50)));
    vPos_49 = (normalize(vPos_49) * fLength_51);
    FinalPosition_20 = vPos_49;
  };
  tmpvar_17.xyz = FinalPosition_20;
  highp vec4 tmpvar_56;
  tmpvar_56 = (glstate_matrix_mvp * tmpvar_17);
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (tmpvar_56 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = tmpvar_56.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  tmpvar_10 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_61;
  tmpvar_5 = tmpvar_7;
  highp vec3 tmpvar_62;
  tmpvar_62 = (_Object2World * tmpvar_17).xyz;
  highp vec4 v_63;
  v_63.x = _World2Object[0].x;
  v_63.y = _World2Object[1].x;
  v_63.z = _World2Object[2].x;
  v_63.w = _World2Object[3].x;
  highp vec4 v_64;
  v_64.x = _World2Object[0].y;
  v_64.y = _World2Object[1].y;
  v_64.z = _World2Object[2].y;
  v_64.w = _World2Object[3].y;
  highp vec4 v_65;
  v_65.x = _World2Object[0].z;
  v_65.y = _World2Object[1].z;
  v_65.z = _World2Object[2].z;
  v_65.w = _World2Object[3].z;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(((
    (v_63.xyz * _glesNormal.x)
   + 
    (v_64.xyz * _glesNormal.y)
  ) + (v_65.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_66;
  highp mat3 tmpvar_67;
  tmpvar_67[0] = _Object2World[0].xyz;
  tmpvar_67[1] = _Object2World[1].xyz;
  tmpvar_67[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((tmpvar_67 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_68;
  lowp vec3 tmpvar_69;
  tmpvar_69 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_70;
  tmpvar_70 = (tmpvar_69 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_3.x;
  tmpvar_71.y = worldBinormal_2.x;
  tmpvar_71.z = worldNormal_4.x;
  tmpvar_71.w = tmpvar_62.x;
  highp vec4 tmpvar_72;
  tmpvar_72.x = worldTangent_3.y;
  tmpvar_72.y = worldBinormal_2.y;
  tmpvar_72.z = worldNormal_4.y;
  tmpvar_72.w = tmpvar_62.y;
  highp vec4 tmpvar_73;
  tmpvar_73.x = worldTangent_3.z;
  tmpvar_73.y = worldBinormal_2.z;
  tmpvar_73.z = worldNormal_4.z;
  tmpvar_73.w = tmpvar_62.z;
  lowp vec4 tmpvar_74;
  tmpvar_74.w = 1.0;
  tmpvar_74.xyz = worldNormal_4;
  mediump vec3 tmpvar_75;
  mediump vec4 normal_76;
  normal_76 = tmpvar_74;
  mediump vec3 x2_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (normal_76.xyzz * normal_76.yzzx);
  x2_77.x = dot (unity_SHBr, tmpvar_78);
  x2_77.y = dot (unity_SHBg, tmpvar_78);
  x2_77.z = dot (unity_SHBb, tmpvar_78);
  tmpvar_75 = (x2_77 + (unity_SHC.xyz * (
    (normal_76.x * normal_76.x)
   - 
    (normal_76.y * normal_76.y)
  )));
  highp vec3 lightColor0_79;
  lightColor0_79 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_80;
  lightColor1_80 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_81;
  lightColor2_81 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_82;
  lightColor3_82 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_83;
  lightAttenSq_83 = unity_4LightAtten0;
  highp vec3 normal_84;
  normal_84 = worldNormal_4;
  highp vec4 tmpvar_85;
  tmpvar_85 = (unity_4LightPosX0 - tmpvar_62.x);
  highp vec4 tmpvar_86;
  tmpvar_86 = (unity_4LightPosY0 - tmpvar_62.y);
  highp vec4 tmpvar_87;
  tmpvar_87 = (unity_4LightPosZ0 - tmpvar_62.z);
  highp vec4 tmpvar_88;
  tmpvar_88 = (((tmpvar_85 * tmpvar_85) + (tmpvar_86 * tmpvar_86)) + (tmpvar_87 * tmpvar_87));
  highp vec4 tmpvar_89;
  tmpvar_89 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_85 * normal_84.x) + (tmpvar_86 * normal_84.y)) + (tmpvar_87 * normal_84.z))
   * 
    inversesqrt(tmpvar_88)
  )) * (1.0/((1.0 + 
    (tmpvar_88 * lightAttenSq_83)
  ))));
  highp vec3 tmpvar_90;
  tmpvar_90 = (tmpvar_75 + ((
    ((lightColor0_79 * tmpvar_89.x) + (lightColor1_80 * tmpvar_89.y))
   + 
    (lightColor2_81 * tmpvar_89.z)
  ) + (lightColor3_82 * tmpvar_89.w)));
  tmpvar_6 = tmpvar_90;
  gl_Position = (glstate_matrix_mvp * tmpvar_17);
  xlv_TEXCOORD0 = tmpvar_71;
  xlv_TEXCOORD1 = tmpvar_72;
  xlv_TEXCOORD2 = tmpvar_73;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_10;
  xlv_TEXCOORD7 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 detailColor_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_DetailTex, xlv_TEXCOORD5.xy);
  detailColor_10 = tmpvar_19;
  diffuseColor_11.xyz = mix (diffuseColor_11.xyz, detailColor_10.xyz, detailColor_10.www);
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_11.xyz = clamp (