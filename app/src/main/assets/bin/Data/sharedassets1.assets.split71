r_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_15 = tmpvar_20;
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_17 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (tmpvar_20 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp vec3 tmpvar_40;
      tmpvar_40 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_41;
      tmpvar_41 = ((tmpvar_40.x + tmpvar_40.y) + tmpvar_40.z);
      highp vec4 tmpvar_42;
      tmpvar_42.x = (tmpvar_32 + tmpvar_41);
      tmpvar_42.y = ((tmpvar_32 * 0.75) - tmpvar_41);
      tmpvar_42.z = ((tmpvar_32 * 0.01) + tmpvar_41);
      tmpvar_42.w = (tmpvar_32 + tmpvar_41);
      highp vec4 tmpvar_43;
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      tmpvar_43 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_46;
      fAngle_46 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_43.x + (tmpvar_43.y * tmpvar_43.y)));
      highp vec2 vSinCos_47;
      vSinCos_47.x = sin(fAngle_46);
      vSinCos_47.y = cos(fAngle_46);
      highp float tmpvar_48;
      tmpvar_48 = (1.0 - vSinCos_47.y);
      highp mat3 tmpvar_49;
      tmpvar_49[0].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_47.y);
      tmpvar_49[0].y = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_47.x * tmpvar_31.z));
      tmpvar_49[0].z = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_47.x * tmpvar_31.y));
      tmpvar_49[1].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_47.x * tmpvar_31.z));
      tmpvar_49[1].y = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_47.y);
      tmpvar_49[1].z = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_47.x * tmpvar_31.x));
      tmpvar_49[2].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_47.x * tmpvar_31.y));
      tmpvar_49[2].y = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_47.x * tmpvar_31.x));
      tmpvar_49[2].z = (((tmpvar_48 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_47.y);
      highp vec3 tmpvar_50;
      tmpvar_50 = ((tmpvar_31.yzx * vRotatedWindVector_14.zxy) - (tmpvar_31.zxy * vRotatedWindVector_14.yzx));
      vAxis_39.xz = tmpvar_50.xz;
      highp float tmpvar_51;
      tmpvar_51 = clamp (dot (vRotatedWindVector_14, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_50.y + tmpvar_51);
      highp vec3 tmpvar_52;
      tmpvar_52 = normalize(vAxis_39);
      vAxis_39 = tmpvar_52;
      highp float tmpvar_53;
      tmpvar_53 = (1.570796 - (sign(tmpvar_51) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_51))) * (1.570796 + (abs(tmpvar_51) * (-0.2146018 + 
          (abs(tmpvar_51) * (0.08656672 + (abs(tmpvar_51) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_54;
      tmpvar_54 = (tmpvar_43.y - (tmpvar_43.x * tmpvar_43.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_55;
        fTime_55 = (tmpvar_36.z + tmpvar_41);
        highp vec4 tmpvar_56;
        tmpvar_56.zw = vec2(0.0, 0.0);
        tmpvar_56.x = fTime_55;
        tmpvar_56.y = (0.87 * fTime_55);
        highp vec4 tmpvar_57;
        highp vec4 tmpvar_58;
        tmpvar_58 = abs(((
          fract((tmpvar_56 + 0.5))
         * 2.0) - 1.0));
        tmpvar_57 = (((
          (tmpvar_58 * tmpvar_58)
         * 
          (3.0 - (2.0 * tmpvar_58))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_57.x * tmpvar_57.y) * tmpvar_57.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_59;
      fAngle_59 = (_glesMultiTexCoord2.x * ((
        (tmpvar_53 * tmpvar_35)
       + 
        (tmpvar_54 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_60;
      vSinCos_60.x = sin(fAngle_59);
      vSinCos_60.y = cos(fAngle_59);
      highp float tmpvar_61;
      tmpvar_61 = (1.0 - vSinCos_60.y);
      highp mat3 tmpvar_62;
      tmpvar_62[0].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.x) + vSinCos_60.y);
      tmpvar_62[0].y = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.y) + (vSinCos_60.x * tmpvar_52.z));
      tmpvar_62[0].z = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.z) - (vSinCos_60.x * tmpvar_52.y));
      tmpvar_62[1].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.y) - (vSinCos_60.x * tmpvar_52.z));
      tmpvar_62[1].y = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.y) + vSinCos_60.y);
      tmpvar_62[1].z = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.z) + (vSinCos_60.x * tmpvar_52.x));
      tmpvar_62[2].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.z) + (vSinCos_60.x * tmpvar_52.y));
      tmpvar_62[2].y = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.z) - (vSinCos_60.x * tmpvar_52.x));
      tmpvar_62[2].z = (((tmpvar_61 * tmpvar_52.z) * tmpvar_52.z) + vSinCos_60.y);
      highp mat3 tmpvar_63;
      tmpvar_63 = (tmpvar_49 * tmpvar_62);
      vDirection_25 = (tmpvar_63 * _glesNormal);
      vPos_24 = (normalize((tmpvar_63 * vPos_28)) * tmpvar_45);
    };
    tmpvar_12 = vDirection_25;
    FinalPosition_15 = vPos_24;
  };
  highp vec3 tmpvar_64;
  tmpvar_64 = (FinalPosition_15 + _glesMultiTexCoord1.xyz);
  FinalPosition_15 = tmpvar_64;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = tmpvar_64;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = tmpvar_64;
      highp float fAdherenceScale_67;
      highp vec3 tmpvar_68;
      tmpvar_68 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_69;
      tmpvar_69 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (tmpvar_69 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((tmpvar_69 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_69 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((tmpvar_69 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        (mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_70.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (tmpvar_64 + ((tmpvar_68 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((tmpvar_69 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_67 = (1.0 - ((
        ((tmpvar_78.x * tmpvar_78.y) * tmpvar_78.x)
       * tmpvar_78.y) * _ST_WindTurbulences.x));
      fAdherenceScale_67 = (fAdherenceScale_67 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_13 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_67) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp vec3 tmpvar_81;
      tmpvar_81 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_82;
      tmpvar_82 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_83;
      highp float fAmount_84;
      highp float fTarget_85;
      highp vec4 tmpvar_86;
      tmpvar_86.w = 0.0;
      tmpvar_86.x = (tmpvar_82 + _glesMultiTexCoord0.w);
      tmpvar_86.y = ((tmpvar_82 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_86.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_82 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_87;
      tmpvar_87 = abs(((
        fract((tmpvar_86 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_87 * tmpvar_87)
       * 
        (3.0 - (2.0 * tmpvar_87))
      ) - 0.5) * 2.0);
      highp float tmpvar_88;
      tmpvar_88 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_85 = 1.0;
      fAmount_84 = tmpvar_88;
      if ((tmpvar_88 < 0.0)) {
        fTarget_85 = -1.0;
        fAmount_84 = -(tmpvar_88);
      };
      vPos_80 = (vPos_65 + ((tmpvar_81 * 
        (((mix (
          mix (tmpvar_88, fTarget_85, fAmount_84)
        , fTarget_85, fAmount_84) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_15 = vPos_65;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_89;
    vPos_89 = FinalPosition_15;
    highp float fAdjust_90;
    highp float fLength_91;
    fLength_91 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_92;
    tmpvar_92 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_90 = tmpvar_92;
    if ((tmpvar_92 != 0.0)) {
      fAdjust_90 = pow (tmpvar_92, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_93;
    tmpvar_93.zw = vec2(0.0, 0.0);
    tmpvar_93.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_93.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_94;
    highp vec4 tmpvar_95;
    tmpvar_95 = abs(((
      fract((tmpvar_93 + 0.5))
     * 2.0) - 1.0));
    tmpvar_94 = (((
      (tmpvar_95 * tmpvar_95)
     * 
      (3.0 - (2.0 * tmpvar_95))
    ) - 0.5) * 2.0);
    vPos_89.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_94.x + (tmpvar_94.y * tmpvar_94.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_90)));
    vPos_89 = (normalize(vPos_89) * fLength_91);
    FinalPosition_15 = vPos_89;
  };
  tmpvar_11.xyz = FinalPosition_15;
  highp vec4 tmpvar_96;
  tmpvar_96 = (glstate_matrix_mvp * tmpvar_11);
  highp vec4 o_97;
  highp vec4 tmpvar_98;
  tmpvar_98 = (tmpvar_96 * 0.5);
  highp vec2 tmpvar_99;
  tmpvar_99.x = tmpvar_98.x;
  tmpvar_99.y = (tmpvar_98.y * _ProjectionParams.x);
  o_97.xy = (tmpvar_99 + tmpvar_98.w);
  o_97.zw = tmpvar_96.zw;
  highp vec3 tmpvar_100;
  tmpvar_100 = o_97.xyw;
  tmpvar_8 = tmpvar_100;
  highp vec2 tmpvar_101;
  tmpvar_101 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_101;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_102;
  v_102.x = _World2Object[0].x;
  v_102.y = _World2Object[1].x;
  v_102.z = _World2Object[2].x;
  v_102.w = _World2Object[3].x;
  highp vec4 v_103;
  v_103.x = _World2Object[0].y;
  v_103.y = _World2Object[1].y;
  v_103.z = _World2Object[2].y;
  v_103.w = _World2Object[3].y;
  highp vec4 v_104;
  v_104.x = _World2Object[0].z;
  v_104.y = _World2Object[1].z;
  v_104.z = _World2Object[2].z;
  v_104.w = _World2Object[3].z;
  highp vec3 tmpvar_105;
  tmpvar_105 = normalize(((
    (v_102.xyz * tmpvar_12.x)
   + 
    (v_103.xyz * tmpvar_12.y)
  ) + (v_104.xyz * tmpvar_12.z)));
  worldNormal_3 = tmpvar_105;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  mediump float tmpvar_13;
  tmpvar_13 = fract(tmpvar_12.y);
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_13 * 0.0625) + unity_LODFade.y);
  projUV_11.y = tmpvar_14;
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_17;
  lowp float x_18;
  x_18 = (tmpvar_9 - _Cutoff);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_20;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_23 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tmpvar_8 * tmpvar_1) * diff_23);
  c_22.xyz = tmpvar_25;
  c_22.w = tmpvar_9;
  c_21.w = c_22.w;
  mediump vec3 tmpvar_26;
  tmpvar_26 = c_22.xyz;
  c_21.xyz = tmpvar_26;
  c_3.xyz = c_21.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_15 = tmpvar_20;
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_17 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (tmpvar_20 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp vec3 tmpvar_40;
      tmpvar_40 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_41;
      tmpvar_41 = ((tmpvar_40.x + tmpvar_40.y) + tmpvar_40.z);
      highp vec4 tmpvar_42;
      tmpvar_42.x = (tmpvar_32 + tmpvar_41);
      tmpvar_42.y = ((tmpvar_32 * 0.75) - tmpvar_41);
      tmpvar_42.z = ((tmpvar_32 * 0.01) + tmpvar_41);
      tmpvar_42.w = (tmpvar_32 + tmpvar_41);
      highp vec4 tmpvar_43;
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      tmpvar_43 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_46;
      fAngle_46 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_43.x + (tmpvar_43.y * tmpvar_43.y)));
      highp vec2 vSinCos_47;
      vSinCos_47.x = sin(fAngle_46);
      vSinCos_47.y = cos(fAngle_46);
      highp float tmpvar_48;
      tmpvar_48 = (1.0 - vSinCos_47.y);
      highp mat3 tmpvar_49;
      tmpvar_49[0].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_47.y);
      tmpvar_49[0].y = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_47.x * tmpvar_31.z));
      tmpvar_49[0].z = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_47.x * tmpvar_31.y));
      tmpvar_49[1].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_47.x * tmpvar_31.z));
      tmpvar_49[1].y = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_47.y);
      tmpvar_49[1].z = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_47.x * tmpvar_31.x));
      tmpvar_49[2].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_47.x * tmpvar_31.y));
      tmpvar_49[2].y = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_47.x * tmpvar_31.x));
      tmpvar_49[2].z = (((tmpvar_48 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_47.y);
      highp vec3 tmpvar_50;
      tmpvar_50 = ((tmpvar_31.yzx * vRotatedWindVector_14.zxy) - (tmpvar_31.zxy * vRotatedWindVector_14.yzx));
      vAxis_39.xz = tmpvar_50.xz;
      highp float tmpvar_51;
      tmpvar_51 = clamp (dot (vRotatedWindVector_14, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_50.y + tmpvar_51);
      highp vec3 tmpvar_52;
      tmpvar_52 = normalize(vAxis_39);
      vAxis_39 = tmpvar_52;
      highp float tmpvar_53;
      tmpvar_53 = (1.570796 - (sign(tmpvar_51) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_51))) * (1.570796 + (abs(tmpvar_51) * (-0.2146018 + 
          (abs(tmpvar_51) * (0.08656672 + (abs(tmpvar_51) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_54;
      tmpvar_54 = (tmpvar_43.y - (tmpvar_43.x * tmpvar_43.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_55;
        fTime_55 = (tmpvar_36.z + tmpvar_41);
        highp vec4 tmpvar_56;
        tmpvar_56.zw = vec2(0.0, 0.0);
        tmpvar_56.x = fTime_55;
        tmpvar_56.y = (0.87 * fTime_55);
        highp vec4 tmpvar_57;
        highp vec4 tmpvar_58;
        tmpvar_58 = abs(((
          fract((tmpvar_56 + 0.5))
         * 2.0) - 1.0));
        tmpvar_57 = (((
          (tmpvar_58 * tmpvar_58)
         * 
          (3.0 - (2.0 * tmpvar_58))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_57.x * tmpvar_57.y) * tmpvar_57.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_59;
      fAngle_59 = (_glesMultiTexCoord2.x * ((
        (tmpvar_53 * tmpvar_35)
       + 
        (tmpvar_54 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_60;
      vSinCos_60.x = sin(fAngle_59);
      vSinCos_60.y = cos(fAngle_59);
      highp float tmpvar_61;
      tmpvar_61 = (1.0 - vSinCos_60.y);
      highp mat3 tmpvar_62;
      tmpvar_62[0].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.x) + vSinCos_60.y);
      tmpvar_62[0].y = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.y) + (vSinCos_60.x * tmpvar_52.z));
      tmpvar_62[0].z = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.z) - (vSinCos_60.x * tmpvar_52.y));
      tmpvar_62[1].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.y) - (vSinCos_60.x * tmpvar_52.z));
      tmpvar_62[1].y = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.y) + vSinCos_60.y);
      tmpvar_62[1].z = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.z) + (vSinCos_60.x * tmpvar_52.x));
      tmpvar_62[2].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.z) + (vSinCos_60.x * tmpvar_52.y));
      tmpvar_62[2].y = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.z) - (vSinCos_60.x * tmpvar_52.x));
      tmpvar_62[2].z = (((tmpvar_61 * tmpvar_52.z) * tmpvar_52.z) + vSinCos_60.y);
      highp mat3 tmpvar_63;
      tmpvar_63 = (tmpvar_49 * tmpvar_62);
      vDirection_25 = (tmpvar_63 * _glesNormal);
      vPos_24 = (normalize((tmpvar_63 * vPos_28)) * tmpvar_45);
    };
    tmpvar_12 = vDirection_25;
    FinalPosition_15 = vPos_24;
  };
  highp vec3 tmpvar_64;
  tmpvar_64 = (FinalPosition_15 + _glesMultiTexCoord1.xyz);
  FinalPosition_15 = tmpvar_64;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = tmpvar_64;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = tmpvar_64;
      highp float fAdherenceScale_67;
      highp vec3 tmpvar_68;
      tmpvar_68 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_69;
      tmpvar_69 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (tmpvar_69 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((tmpvar_69 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_69 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((tmpvar_69 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        (mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_70.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (tmpvar_64 + ((tmpvar_68 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((tmpvar_69 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_67 = (1.0 - ((
        ((tmpvar_78.x * tmpvar_78.y) * tmpvar_78.x)
       * tmpvar_78.y) * _ST_WindTurbulences.x));
      fAdherenceScale_67 = (fAdherenceScale_67 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_13 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_67) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp vec3 tmpvar_81;
      tmpvar_81 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_82;
      tmpvar_82 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_83;
      highp float fAmount_84;
      highp float fTarget_85;
      highp vec4 tmpvar_86;
      tmpvar_86.w = 0.0;
      tmpvar_86.x = (tmpvar_82 + _glesMultiTexCoord0.w);
      tmpvar_86.y = ((tmpvar_82 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_86.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_82 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_87;
      tmpvar_87 = abs(((
        fract((tmpvar_86 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_87 * tmpvar_87)
       * 
        (3.0 - (2.0 * tmpvar_87))
      ) - 0.5) * 2.0);
      highp float tmpvar_88;
      tmpvar_88 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_85 = 1.0;
      fAmount_84 = tmpvar_88;
      if ((tmpvar_88 < 0.0)) {
        fTarget_85 = -1.0;
        fAmount_84 = -(tmpvar_88);
      };
      vPos_80 = (vPos_65 + ((tmpvar_81 * 
        (((mix (
          mix (tmpvar_88, fTarget_85, fAmount_84)
        , fTarget_85, fAmount_84) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_15 = vPos_65;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_89;
    vPos_89 = FinalPosition_15;
    highp float fAdjust_90;
    highp float fLength_91;
    fLength_91 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_92;
    tmpvar_92 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_90 = tmpvar_92;
    if ((tmpvar_92 != 0.0)) {
      fAdjust_90 = pow (tmpvar_92, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_93;
    tmpvar_93.zw = vec2(0.0, 0.0);
    tmpvar_93.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_93.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_94;
    highp vec4 tmpvar_95;
    tmpvar_95 = abs(((
      fract((tmpvar_93 + 0.5))
     * 2.0) - 1.0));
    tmpvar_94 = (((
      (tmpvar_95 * tmpvar_95)
     * 
      (3.0 - (2.0 * tmpvar_95))
    ) - 0.5) * 2.0);
    vPos_89.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_94.x + (tmpvar_94.y * tmpvar_94.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_90)));
    vPos_89 = (normalize(vPos_89) * fLength_91);
    FinalPosition_15 = vPos_89;
  };
  tmpvar_11.xyz = FinalPosition_15;
  highp vec4 tmpvar_96;
  tmpvar_96 = (glstate_matrix_mvp * tmpvar_11);
  highp vec4 o_97;
  highp vec4 tmpvar_98;
  tmpvar_98 = (tmpvar_96 * 0.5);
  highp vec2 tmpvar_99;
  tmpvar_99.x = tmpvar_98.x;
  tmpvar_99.y = (tmpvar_98.y * _ProjectionParams.x);
  o_97.xy = (tmpvar_99 + tmpvar_98.w);
  o_97.zw = tmpvar_96.zw;
  highp vec3 tmpvar_100;
  tmpvar_100 = o_97.xyw;
  tmpvar_8 = tmpvar_100;
  highp vec2 tmpvar_101;
  tmpvar_101 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_101;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_102;
  v_102.x = _World2Object[0].x;
  v_102.y = _World2Object[1].x;
  v_102.z = _World2Object[2].x;
  v_102.w = _World2Object[3].x;
  highp vec4 v_103;
  v_103.x = _World2Object[0].y;
  v_103.y = _World2Object[1].y;
  v_103.z = _World2Object[2].y;
  v_103.w = _World2Object[3].y;
  highp vec4 v_104;
  v_104.x = _World2Object[0].z;
  v_104.y = _World2Object[1].z;
  v_104.z = _World2Object[2].z;
  v_104.w = _World2Object[3].z;
  highp vec3 tmpvar_105;
  tmpvar_105 = normalize(((
    (v_102.xyz * tmpvar_12.x)
   + 
    (v_103.xyz * tmpvar_12.y)
  ) + (v_104.xyz * tmpvar_12.z)));
  worldNormal_3 = tmpvar_105;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  mediump float tmpvar_13;
  tmpvar_13 = fract(tmpvar_12.y);
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_13 * 0.0625) + unity_LODFade.y);
  projUV_11.y = tmpvar_14;
  lowp float x_15;
  x_15 = (texture (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_17;
  lowp float x_18;
  x_18 = (tmpvar_9 - _Cutoff);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_20;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_23 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tmpvar_8 * tmpvar_1) * diff_23);
  c_22.xyz = tmpvar_25;
  c_22.w = tmpvar_9;
  c_21.w = c_22.w;
  mediump vec3 tmpvar_26;
  tmpvar_26 = c_22.xyz;
  c_21.xyz = tmpvar_26;
  c_3.xyz = c_21.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_15 = tmpvar_20;
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_17 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (tmpvar_20 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp vec3 tmpvar_40;
      tmpvar_40 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_41;
      tmpvar_41 = ((tmpvar_40.x + tmpvar_40.y) + tmpvar_40.z);
      highp vec4 tmpvar_42;
      tmpvar_42.x = (tmpvar_32 + tmpvar_41);
      tmpvar_42.y = ((tmpvar_32 * 0.75) - tmpvar_41);
      tmpvar_42.z = ((tmpvar_32 * 0.01) + tmpvar_41);
      tmpvar_42.w = (tmpvar_32 + tmpvar_41);
      highp vec4 tmpvar_43;
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      tmpvar_43 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_46;
      fAngle_46 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_43.x + (tmpvar_43.y * tmpvar_43.y)));
      highp vec2 vSinCos_47;
      vSinCos_47.x = sin(fAngle_46);
      vSinCos_47.y = cos(fAngle_46);
      highp float tmpvar_48;
      tmpvar_48 = (1.0 - vSinCos_47.y);
      highp mat3 tmpvar_49;
      tmpvar_49[0].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_47.y);
      tmpvar_49[0].y = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_47.x * tmpvar_31.z));
      tmpvar_49[0].z = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_47.x * tmpvar_31.y));
      tmpvar_49[1].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_47.x * tmpvar_31.z));
      tmpvar_49[1].y = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_47.y);
      tmpvar_49[1].z = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_47.x * tmpvar_31.x));
      tmpvar_49[2].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_47.x * tmpvar_31.y));
      tmpvar_49[2].y = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_47.x * tmpvar_31.x));
      tmpvar_49[2].z = (((tmpvar_48 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_47.y);
      highp vec3 tmpvar_50;
      tmpvar_50 = ((tmpvar_31.yzx * vRotatedWindVector_14.zxy) - (tmpvar_31.zxy * vRotatedWindVector_14.yzx));
      vAxis_39.xz = tmpvar_50.xz;
      highp float tmpvar_51;
      tmpvar_51 = clamp (dot (vRotatedWindVector_14, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_50.y + tmpvar_51);
      highp vec3 tmpvar_52;
      tmpvar_52 = normalize(vAxis_39);
      vAxis_39 = tmpvar_52;
      highp float tmpvar_53;
      tmpvar_53 = (1.570796 - (sign(tmpvar_51) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_51))) * (1.570796 + (abs(tmpvar_51) * (-0.2146018 + 
          (abs(tmpvar_51) * (0.08656672 + (abs(tmpvar_51) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_54;
      tmpvar_54 = (tmpvar_43.y - (tmpvar_43.x * tmpvar_43.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_55;
        fTime_55 = (tmpvar_36.z + tmpvar_41);
        highp vec4 tmpvar_56;
        tmpvar_56.zw = vec2(0.0, 0.0);
        tmpvar_56.x = fTime_55;
        tmpvar_56.y = (0.87 * fTime_55);
        highp vec4 tmpvar_57;
        highp vec4 tmpvar_58;
        tmpvar_58 = abs(((
          fract((tmpvar_56 + 0.5))
         * 2.0) - 1.0));
        tmpvar_57 = (((
          (tmpvar_58 * tmpvar_58)
         * 
          (3.0 - (2.0 * tmpvar_58))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_57.x * tmpvar_57.y) * tmpvar_57.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_59;
      fAngle_59 = (_glesMultiTexCoord2.x * ((
        (tmpvar_53 * tmpvar_35)
       + 
        (tmpvar_54 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_60;
      vSinCos_60.x = sin(fAngle_59);
      vSinCos_60.y = cos(fAngle_59);
      highp float tmpvar_61;
      tmpvar_61 = (1.0 - vSinCos_60.y);
      highp mat3 tmpvar_62;
      tmpvar_62[0].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.x) + vSinCos_60.y);
      tmpvar_62[0].y = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.y) + (vSinCos_60.x * tmpvar_52.z));
      tmpvar_62[0].z = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.z) - (vSinCos_60.x * tmpvar_52.y));
      tmpvar_62[1].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.y) - (vSinCos_60.x * tmpvar_52.z));
      tmpvar_62[1].y = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.y) + vSinCos_60.y);
      tmpvar_62[1].z = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.z) + (vSinCos_60.x * tmpvar_52.x));
      tmpvar_62[2].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.z) + (vSinCos_60.x * tmpvar_52.y));
      tmpvar_62[2].y = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.z) - (vSinCos_60.x * tmpvar_52.x));
      tmpvar_62[2].z = (((tmpvar_61 * tmpvar_52.z) * tmpvar_52.z) + vSinCos_60.y);
      highp mat3 tmpvar_63;
      tmpvar_63 = (tmpvar_49 * tmpvar_62);
      vDirection_25 = (tmpvar_63 * _glesNormal);
      vPos_24 = (normalize((tmpvar_63 * vPos_28)) * tmpvar_45);
    };
    tmpvar_12 = vDirection_25;
    FinalPosition_15 = vPos_24;
  };
  highp vec3 tmpvar_64;
  tmpvar_64 = (FinalPosition_15 + _glesMultiTexCoord1.xyz);
  FinalPosition_15 = tmpvar_64;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = tmpvar_64;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = tmpvar_64;
      highp float fAdherenceScale_67;
      highp vec3 tmpvar_68;
      tmpvar_68 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_69;
      tmpvar_69 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (tmpvar_69 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((tmpvar_69 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_69 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((tmpvar_69 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        (mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_70.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (tmpvar_64 + ((tmpvar_68 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((tmpvar_69 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_67 = (1.0 - ((
        ((tmpvar_78.x * tmpvar_78.y) * tmpvar_78.x)
       * tmpvar_78.y) * _ST_WindTurbulences.x));
      fAdherenceScale_67 = (fAdherenceScale_67 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_13 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_67) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp vec3 tmpvar_81;
      tmpvar_81 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_82;
      tmpvar_82 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_83;
      highp float fAmount_84;
      highp float fTarget_85;
      highp vec4 tmpvar_86;
      tmpvar_86.w = 0.0;
      tmpvar_86.x = (tmpvar_82 + _glesMultiTexCoord0.w);
      tmpvar_86.y = ((tmpvar_82 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_86.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_82 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_87;
      tmpvar_87 = abs(((
        fract((tmpvar_86 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_87 * tmpvar_87)
       * 
        (3.0 - (2.0 * tmpvar_87))
      ) - 0.5) * 2.0);
      highp float tmpvar_88;
      tmpvar_88 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_85 = 1.0;
      fAmount_84 = tmpvar_88;
      if ((tmpvar_88 < 0.0)) {
        fTarget_85 = -1.0;
        fAmount_84 = -(tmpvar_88);
      };
      vPos_80 = (vPos_65 + ((tmpvar_81 * 
        (((mix (
          mix (tmpvar_88, fTarget_85, fAmount_84)
        , fTarget_85, fAmount_84) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_15 = vPos_65;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_89;
    vPos_89 = FinalPosition_15;
    highp float fAdjust_90;
    highp float fLength_91;
    fLength_91 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_92;
    tmpvar_92 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_90 = tmpvar_92;
    if ((tmpvar_92 != 0.0)) {
      fAdjust_90 = pow (tmpvar_92, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_93;
    tmpvar_93.zw = vec2(0.0, 0.0);
    tmpvar_93.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_93.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_94;
    highp vec4 tmpvar_95;
    tmpvar_95 = abs(((
      fract((tmpvar_93 + 0.5))
     * 2.0) - 1.0));
    tmpvar_94 = (((
      (tmpvar_95 * tmpvar_95)
     * 
      (3.0 - (2.0 * tmpvar_95))
    ) - 0.5) * 2.0);
    vPos_89.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_94.x + (tmpvar_94.y * tmpvar_94.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_90)));
    vPos_89 = (normalize(vPos_89) * fLength_91);
    FinalPosition_15 = vPos_89;
  };
  tmpvar_11.xyz = FinalPosition_15;
  highp vec4 tmpvar_96;
  tmpvar_96 = (glstate_matrix_mvp * tmpvar_11);
  highp vec4 o_97;
  highp vec4 tmpvar_98;
  tmpvar_98 = (tmpvar_96 * 0.5);
  highp vec2 tmpvar_99;
  tmpvar_99.x = tmpvar_98.x;
  tmpvar_99.y = (tmpvar_98.y * _ProjectionParams.x);
  o_97.xy = (tmpvar_99 + tmpvar_98.w);
  o_97.zw = tmpvar_96.zw;
  highp vec3 tmpvar_100;
  tmpvar_100 = o_97.xyw;
  tmpvar_8 = tmpvar_100;
  highp vec2 tmpvar_101;
  tmpvar_101 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_101;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_102;
  v_102.x = _World2Object[0].x;
  v_102.y = _World2Object[1].x;
  v_102.z = _World2Object[2].x;
  v_102.w = _World2Object[3].x;
  highp vec4 v_103;
  v_103.x = _World2Object[0].y;
  v_103.y = _World2Object[1].y;
  v_103.z = _World2Object[2].y;
  v_103.w = _World2Object[3].y;
  highp vec4 v_104;
  v_104.x = _World2Object[0].z;
  v_104.y = _World2Object[1].z;
  v_104.z = _World2Object[2].z;
  v_104.w = _World2Object[3].z;
  highp vec3 tmpvar_105;
  tmpvar_105 = normalize(((
    (v_102.xyz * tmpvar_12.x)
   + 
    (v_103.xyz * tmpvar_12.y)
  ) + (v_104.xyz * tmpvar_12.z)));
  worldNormal_3 = tmpvar_105;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_11 = tmpvar_19;
  lowp float x_20;
  x_20 = (tmpvar_11 - _Cutoff);
  if ((x_20 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  tmpvar_10 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_LightMatrix0 * tmpvar_22);
  lightCoord_5 = tmpvar_23;
  lowp vec4 tmpvar_24;
  mediump vec2 P_25;
  P_25 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_24 = texture2D (_LightTexture0, P_25);
  mediump float tmpvar_26;
  tmpvar_26 = dot (lightCoord_5.xyz, lightCoord_5.xyz);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_LightTextureB0, vec2(tmpvar_26));
  mediump float tmpvar_28;
  tmpvar_28 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_24.w) * tmpvar_27.w);
  atten_4 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_29;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_32 = tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_10 * tmpvar_1) * diff_32);
  c_31.xyz = tmpvar_34;
  c_31.w = tmpvar_11;
  c_30.w = c_31.w;
  mediump vec3 tmpvar_35;
  tmpvar_35 = c_31.xyz;
  c_30.xyz = tmpvar_35;
  c_3.xyz = c_30.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_15 = tmpvar_20;
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_17 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (tmpvar_20 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp vec3 tmpvar_40;
      tmpvar_40 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_41;
      tmpvar_41 = ((tmpvar_40.x + tmpvar_40.y) + tmpvar_40.z);
      highp vec4 tmpvar_42;
      tmpvar_42.x = (tmpvar_32 + tmpvar_41);
      tmpvar_42.y = ((tmpvar_32 * 0.75) - tmpvar_41);
      tmpvar_42.z = ((tmpvar_32 * 0.01) + tmpvar_41);
      tmpvar_42.w = (tmpvar_32 + tmpvar_41);
      highp vec4 tmpvar_43;
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      tmpvar_43 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_46;
      fAngle_46 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_43.x + (tmpvar_43.y * tmpvar_43.y)));
      highp vec2 vSinCos_47;
      vSinCos_47.x = sin(fAngle_46);
      vSinCos_47.y = cos(fAngle_46);
      highp float tmpvar_48;
      tmpvar_48 = (1.0 - vSinCos_47.y);
      highp mat3 tmpvar_49;
      tmpvar_49[0].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_47.y);
      tmpvar_49[0].y = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_47.x * tmpvar_31.z));
      tmpvar_49[0].z = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_47.x * tmpvar_31.y));
      tmpvar_49[1].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_47.x * tmpvar_31.z));
      tmpvar_49[1].y = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_47.y);
      tmpvar_49[1].z = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_47.x * tmpvar_31.x));
      tmpvar_49[2].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_47.x * tmpvar_31.y));
      tmpvar_49[2].y = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_47.x * tmpvar_31.x));
      tmpvar_49[2].z = (((tmpvar_48 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_47.y);
      highp vec3 tmpvar_50;
      tmpvar_50 = ((tmpvar_31.yzx * vRotatedWindVector_14.zxy) - (tmpvar_31.zxy * vRotatedWindVector_14.yzx));
      vAxis_39.xz = tmpvar_50.xz;
      highp float tmpvar_51;
      tmpvar_51 = clamp (dot (vRotatedWindVector_14, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_50.y + tmpvar_51);
      highp vec3 tmpvar_52;
      tmpvar_52 = normalize(vAxis_39);
      vAxis_39 = tmpvar_52;
      highp float tmpvar_53;
      tmpvar_53 = (1.570796 - (sign(tmpvar_51) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_51))) * (1.570796 + (abs(tmpvar_51) * (-0.2146018 + 
          (abs(tmpvar_51) * (0.08656672 + (abs(tmpvar_51) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_54;
      tmpvar_54 = (tmpvar_43.y - (tmpvar_43.x * tmpvar_43.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_55;
        fTime_55 = (tmpvar_36.z + tmpvar_41);
        highp vec4 tmpvar_56;
        tmpvar_56.zw = vec2(0.0, 0.0);
        tmpvar_56.x = fTime_55;
        tmpvar_56.y = (0.87 * fTime_55);
        highp vec4 tmpvar_57;
        highp vec4 tmpvar_58;
        tmpvar_58 = abs(((
          fract((tmpvar_56 + 0.5))
         * 2.0) - 1.0));
        tmpvar_57 = (((
          (tmpvar_58 * tmpvar_58)
         * 
          (3.0 - (2.0 * tmpvar_58))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_57.x * tmpvar_57.y) * tmpvar_57.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_59;
      fAngle_59 = (_glesMultiTexCoord2.x * ((
        (tmpvar_53 * tmpvar_35)
       + 
        (tmpvar_54 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_60;
      vSinCos_60.x = sin(fAngle_59);
      vSinCos_60.y = cos(fAngle_59);
      highp float tmpvar_61;
      tmpvar_61 = (1.0 - vSinCos_60.y);
      highp mat3 tmpvar_62;
      tmpvar_62[0].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.x) + vSinCos_60.y);
      tmpvar_62[0].y = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.y) + (vSinCos_60.x * tmpvar_52.z));
      tmpvar_62[0].z = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.z) - (vSinCos_60.x * tmpvar_52.y));
      tmpvar_62[1].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.y) - (vSinCos_60.x * tmpvar_52.z));
      tmpvar_62[1].y = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.y) + vSinCos_60.y);
      tmpvar_62[1].z = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.z) + (vSinCos_60.x * tmpvar_52.x));
      tmpvar_62[2].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.z) + (vSinCos_60.x * tmpvar_52.y));
      tmpvar_62[2].y = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.z) - (vSinCos_60.x * tmpvar_52.x));
      tmpvar_62[2].z = (((tmpvar_61 * tmpvar_52.z) * tmpvar_52.z) + vSinCos_60.y);
      highp mat3 tmpvar_63;
      tmpvar_63 = (tmpvar_49 * tmpvar_62);
      vDirection_25 = (tmpvar_63 * _glesNormal);
      vPos_24 = (normalize((tmpvar_63 * vPos_28)) * tmpvar_45);
    };
    tmpvar_12 = vDirection_25;
    FinalPosition_15 = vPos_24;
  };
  highp vec3 tmpvar_64;
  tmpvar_64 = (FinalPosition_15 + _glesMultiTexCoord1.xyz);
  FinalPosition_15 = tmpvar_64;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = tmpvar_64;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = tmpvar_64;
      highp float fAdherenceScale_67;
      highp vec3 tmpvar_68;
      tmpvar_68 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_69;
      tmpvar_69 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (tmpvar_69 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((tmpvar_69 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_69 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((tmpvar_69 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        (mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_70.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (tmpvar_64 + ((tmpvar_68 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((tmpvar_69 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_67 = (1.0 - ((
        ((tmpvar_78.x * tmpvar_78.y) * tmpvar_78.x)
       * tmpvar_78.y) * _ST_WindTurbulences.x));
      fAdherenceScale_67 = (fAdherenceScale_67 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_13 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_67) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp vec3 tmpvar_81;
      tmpvar_81 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_82;
      tmpvar_82 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_83;
      highp float fAmount_84;
      highp float fTarget_85;
      highp vec4 tmpvar_86;
      tmpvar_86.w = 0.0;
      tmpvar_86.x = (tmpvar_82 + _glesMultiTexCoord0.w);
      tmpvar_86.y = ((tmpvar_82 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_86.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_82 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_87;
      tmpvar_87 = abs(((
        fract((tmpvar_86 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_87 * tmpvar_87)
       * 
        (3.0 - (2.0 * tmpvar_87))
      ) - 0.5) * 2.0);
      highp float tmpvar_88;
      tmpvar_88 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_85 = 1.0;
      fAmount_84 = tmpvar_88;
      if ((tmpvar_88 < 0.0)) {
        fTarget_85 = -1.0;
        fAmount_84 = -(tmpvar_88);
      };
      vPos_80 = (vPos_65 + ((tmpvar_81 * 
        (((mix (
          mix (tmpvar_88, fTarget_85, fAmount_84)
        , fTarget_85, fAmount_84) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_15 = vPos_65;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_89;
    vPos_89 = FinalPosition_15;
    highp float fAdjust_90;
    highp float fLength_91;
    fLength_91 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_92;
    tmpvar_92 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_90 = tmpvar_92;
    if ((tmpvar_92 != 0.0)) {
      fAdjust_90 = pow (tmpvar_92, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_93;
    tmpvar_93.zw = vec2(0.0, 0.0);
    tmpvar_93.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_93.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_94;
    highp vec4 tmpvar_95;
    tmpvar_95 = abs(((
      fract((tmpvar_93 + 0.5))
     * 2.0) - 1.0));
    tmpvar_94 = (((
      (tmpvar_95 * tmpvar_95)
     * 
      (3.0 - (2.0 * tmpvar_95))
    ) - 0.5) * 2.0);
    vPos_89.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_94.x + (tmpvar_94.y * tmpvar_94.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_90)));
    vPos_89 = (normalize(vPos_89) * fLength_91);
    FinalPosition_15 = vPos_89;
  };
  tmpvar_11.xyz = FinalPosition_15;
  highp vec4 tmpvar_96;
  tmpvar_96 = (glstate_matrix_mvp * tmpvar_11);
  highp vec4 o_97;
  highp vec4 tmpvar_98;
  tmpvar_98 = (tmpvar_96 * 0.5);
  highp vec2 tmpvar_99;
  tmpvar_99.x = tmpvar_98.x;
  tmpvar_99.y = (tmpvar_98.y * _ProjectionParams.x);
  o_97.xy = (tmpvar_99 + tmpvar_98.w);
  o_97.zw = tmpvar_96.zw;
  highp vec3 tmpvar_100;
  tmpvar_100 = o_97.xyw;
  tmpvar_8 = tmpvar_100;
  highp vec2 tmpvar_101;
  tmpvar_101 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_101;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_102;
  v_102.x = _World2Object[0].x;
  v_102.y = _World2Object[1].x;
  v_102.z = _World2Object[2].x;
  v_102.w = _World2Object[3].x;
  highp vec4 v_103;
  v_103.x = _World2Object[0].y;
  v_103.y = _World2Object[1].y;
  v_103.z = _World2Object[2].y;
  v_103.w = _World2Object[3].y;
  highp vec4 v_104;
  v_104.x = _World2Object[0].z;
  v_104.y = _World2Object[1].z;
  v_104.z = _World2Object[2].z;
  v_104.w = _World2Object[3].z;
  highp vec3 tmpvar_105;
  tmpvar_105 = normalize(((
    (v_102.xyz * tmpvar_12.x)
   + 
    (v_103.xyz * tmpvar_12.y)
  ) + (v_104.xyz * tmpvar_12.z)));
  worldNormal_3 = tmpvar_105;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_11 = tmpvar_19;
  lowp float x_20;
  x_20 = (tmpvar_11 - _Cutoff);
  if ((x_20 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  tmpvar_10 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_LightMatrix0 * tmpvar_22);
  lightCoord_5 = tmpvar_23;
  lowp vec4 tmpvar_24;
  mediump vec2 P_25;
  P_25 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_24 = texture (_LightTexture0, P_25);
  mediump float tmpvar_26;
  tmpvar_26 = dot (lightCoord_5.xyz, lightCoord_5.xyz);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture (_LightTextureB0, vec2(tmpvar_26));
  mediump float tmpvar_28;
  tmpvar_28 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_24.w) * tmpvar_27.w);
  atten_4 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_29;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_32 = tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_10 * tmpvar_1) * diff_32);
  c_31.xyz = tmpvar_34;
  c_31.w = tmpvar_11;
  c_30.w = c_31.w;
  mediump vec3 tmpvar_35;
  tmpvar_35 = c_31.xyz;
  c_30.xyz = tmpvar_35;
  c_3.xyz = c_30.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_15 = tmpvar_20;
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_17 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (tmpvar_20 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp vec3 tmpvar_40;
      tmpvar_40 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_41;
      tmpvar_41 = ((tmpvar_40.x + tmpvar_40.y) + tmpvar_40.z);
      highp vec4 tmpvar_42;
      tmpvar_42.x = (tmpvar_32 + tmpvar_41);
      tmpvar_42.y = ((tmpvar_32 * 0.75) - tmpvar_41);
      tmpvar_42.z = ((tmpvar_32 * 0.01) + tmpvar_41);
      tmpvar_42.w = (tmpvar_32 + tmpvar_41);
      highp vec4 tmpvar_43;
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      tmpvar_43 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_46;
      fAngle_46 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_43.x + (tmpvar_43.y * tmpvar_43.y)));
      highp vec2 vSinCos_47;
      vSinCos_47.x = sin(fAngle_46);
      vSinCos_47.y = cos(fAngle_46);
      highp float tmpvar_48;
      tmpvar_48 = (1.0 - vSinCos_47.y);
      highp mat3 tmpvar_49;
      tmpvar_49[0].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_47.y);
      tmpvar_49[0].y = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_47.x * tmpvar_31.z));
      tmpvar_49[0].z = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_47.x * tmpvar_31.y));
      tmpvar_49[1].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_47.x * tmpvar_31.z));
      tmpvar_49[1].y = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_47.y);
      tmpvar_49[1].z = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_47.x * tmpvar_31.x));
      tmpvar_49[2].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_47.x * tmpvar_31.y));
      tmpvar_49[2].y = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_47.x * tmpvar_31.x));
      tmpvar_49[2].z = (((tmpvar_48 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_47.y);
      highp vec3 tmpvar_50;
      tmpvar_50 = ((tmpvar_31.yzx * vRotatedWindVector_14.zxy) - (tmpvar_31.zxy * vRotatedWindVector_14.yzx));
      vAxis_39.xz = tmpvar_50.xz;
      highp float tmpvar_51;
      tmpvar_51 = clamp (dot (vRotatedWindVector_14, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_50.y + tmpvar_51);
      highp vec3 tmpvar_52;
      tmpvar_52 = normalize(vAxis_39);
      vAxis_39 = tmpvar_52;
      highp float tmpvar_53;
      tmpvar_53 = (1.570796 - (sign(tmpvar_51) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_51))) * (1.570796 + (abs(tmpvar_51) * (-0.2146018 + 
          (abs(tmpvar_51) * (0.08656672 + (abs(tmpvar_51) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_54;
      tmpvar_54 = (tmpvar_43.y - (tmpvar_43.x * tmpvar_43.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_55;
        fTime_55 = (tmpvar_36.z + tmpvar_41);
        highp vec4 tmpvar_56;
        tmpvar_56.zw = vec2(0.0, 0.0);
        tmpvar_56.x = fTime_55;
        tmpvar_56.y = (0.87 * fTime_55);
        highp vec4 tmpvar_57;
        highp vec4 tmpvar_58;
        tmpvar_58 = abs(((
          fract((tmpvar_56 + 0.5))
         * 2.0) - 1.0));
        tmpvar_57 = (((
          (tmpvar_58 * tmpvar_58)
         * 
          (3.0 - (2.0 * tmpvar_58))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_57.x * tmpvar_57.y) * tmpvar_57.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_59;
      fAngle_59 = (_glesMultiTexCoord2.x * ((
        (tmpvar_53 * tmpvar_35)
       + 
        (tmpvar_54 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_60;
      vSinCos_60.x = sin(fAngle_59);
      vSinCos_60.y = cos(fAngle_59);
      highp float tmpvar_61;
      tmpvar_61 = (1.0 - vSinCos_60.y);
      highp mat3 tmpvar_62;
      tmpvar_62[0].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.x) + vSinCos_60.y);
      tmpvar_62[0].y = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.y) + (vSinCos_60.x * tmpvar_52.z));
      tmpvar_62[0].z = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.z) - (vSinCos_60.x * tmpvar_52.y));
      tmpvar_62[1].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.y) - (vSinCos_60.x * tmpvar_52.z));
      tmpvar_62[1].y = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.y) + vSinCos_60.y);
      tmpvar_62[1].z = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.z) + (vSinCos_60.x * tmpvar_52.x));
      tmpvar_62[2].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.z) + (vSinCos_60.x * tmpvar_52.y));
      tmpvar_62[2].y = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.z) - (vSinCos_60.x * tmpvar_52.x));
      tmpvar_62[2].z = (((tmpvar_61 * tmpvar_52.z) * tmpvar_52.z) + vSinCos_60.y);
      highp mat3 tmpvar_63;
      tmpvar_63 = (tmpvar_49 * tmpvar_62);
      vDirection_25 = (tmpvar_63 * _glesNormal);
      vPos_24 = (normalize((tmpvar_63 * vPos_28)) * tmpvar_45);
    };
    tmpvar_12 = vDirection_25;
    FinalPosition_15 = vPos_24;
  };
  highp vec3 tmpvar_64;
  tmpvar_64 = (FinalPosition_15 + _glesMultiTexCoord1.xyz);
  FinalPosition_15 = tmpvar_64;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = tmpvar_64;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = tmpvar_64;
      highp float fAdherenceScale_67;
      highp vec3 tmpvar_68;
      tmpvar_68 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_69;
      tmpvar_69 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (tmpvar_69 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((tmpvar_69 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_69 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((tmpvar_69 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        (mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_70.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (tmpvar_64 + ((tmpvar_68 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((tmpvar_69 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_67 = (1.0 - ((
        ((tmpvar_78.x * tmpvar_78.y) * tmpvar_78.x)
       * tmpvar_78.y) * _ST_WindTurbulences.x));
      fAdherenceScale_67 = (fAdherenceScale_67 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_13 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_67) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp vec3 tmpvar_81;
      tmpvar_81 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_82;
      tmpvar_82 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_83;
      highp float fAmount_84;
      highp float fTarget_85;
      highp vec4 tmpvar_86;
      tmpvar_86.w = 0.0;
      tmpvar_86.x = (tmpvar_82 + _glesMultiTexCoord0.w);
      tmpvar_86.y = ((tmpvar_82 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_86.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_82 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_87;
      tmpvar_87 = abs(((
        fract((tmpvar_86 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_87 * tmpvar_87)
       * 
        (3.0 - (2.0 * tmpvar_87))
      ) - 0.5) * 2.0);
      highp float tmpvar_88;
      tmpvar_88 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_85 = 1.0;
      fAmount_84 = tmpvar_88;
      if ((tmpvar_88 < 0.0)) {
        fTarget_85 = -1.0;
        fAmount_84 = -(tmpvar_88);
      };
      vPos_80 = (vPos_65 + ((tmpvar_81 * 
        (((mix (
          mix (tmpvar_88, fTarget_85, fAmount_84)
        , fTarget_85, fAmount_84) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_15 = vPos_65;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_89;
    vPos_89 = FinalPosition_15;
    highp float fAdjust_90;
    highp float fLength_91;
    fLength_91 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_92;
    tmpvar_92 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_90 = tmpvar_92;
    if ((tmpvar_92 != 0.0)) {
      fAdjust_90 = pow (tmpvar_92, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_93;
    tmpvar_93.zw = vec2(0.0, 0.0);
    tmpvar_93.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_93.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_94;
    highp vec4 tmpvar_95;
    tmpvar_95 = abs(((
      fract((tmpvar_93 + 0.5))
     * 2.0) - 1.0));
    tmpvar_94 = (((
      (tmpvar_95 * tmpvar_95)
     * 
      (3.0 - (2.0 * tmpvar_95))
    ) - 0.5) * 2.0);
    vPos_89.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_94.x + (tmpvar_94.y * tmpvar_94.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_90)));
    vPos_89 = (normalize(vPos_89) * fLength_91);
    FinalPosition_15 = vPos_89;
  };
  tmpvar_11.xyz = FinalPosition_15;
  highp vec4 tmpvar_96;
  tmpvar_96 = (glstate_matrix_mvp * tmpvar_11);
  highp vec4 o_97;
  highp vec4 tmpvar_98;
  tmpvar_98 = (tmpvar_96 * 0.5);
  highp vec2 tmpvar_99;
  tmpvar_99.x = tmpvar_98.x;
  tmpvar_99.y = (tmpvar_98.y * _ProjectionParams.x);
  o_97.xy = (tmpvar_99 + tmpvar_98.w);
  o_97.zw = tmpvar_96.zw;
  highp vec3 tmpvar_100;
  tmpvar_100 = o_97.xyw;
  tmpvar_8 = tmpvar_100;
  highp vec2 tmpvar_101;
  tmpvar_101 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_101;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_102;
  v_102.x = _World2Object[0].x;
  v_102.y = _World2Object[1].x;
  v_102.z = _World2Object[2].x;
  v_102.w = _World2Object[3].x;
  highp vec4 v_103;
  v_103.x = _World2Object[0].y;
  v_103.y = _World2Object[1].y;
  v_103.z = _World2Object[2].y;
  v_103.w = _World2Object[3].y;
  highp vec4 v_104;
  v_104.x = _World2Object[0].z;
  v_104.y = _World2Object[1].z;
  v_104.z = _World2Object[2].z;
  v_104.w = _World2Object[3].z;
  highp vec3 tmpvar_105;
  tmpvar_105 = normalize(((
    (v_102.xyz * tmpvar_12.x)
   + 
    (v_103.xyz * tmpvar_12.y)
  ) + (v_104.xyz * tmpvar_12.z)));
  worldNormal_3 = tmpvar_105;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_22;
  tmpvar_22 = (_LightMatrix0 * tmpvar_21).xyz;
  lightCoord_4 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_24;
  tmpvar_24 = (texture2D (_LightTextureB0, vec2(tmpvar_23)).w * textureCube (_LightTexture0, lightCoord_4).w);
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_25;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_24);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_28 = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tmpvar_9 * tmpvar_1) * diff_28);
  c_27.xyz = tmpvar_30;
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  mediump vec3 tmpvar_31;
  tmpvar_31 = c_27.xyz;
  c_26.xyz = tmpvar_31;
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_15 = tmpvar_20;
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_17 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (tmpvar_20 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp vec3 tmpvar_40;
      tmpvar_40 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_41;
      tmpvar_41 = ((tmpvar_40.x + tmpvar_40.y) + tmpvar_40.z);
      highp vec4 tmpvar_42;
      tmpvar_42.x = (tmpvar_32 + tmpvar_41);
      tmpvar_42.y = ((tmpvar_32 * 0.75) - tmpvar_41);
      tmpvar_42.z = ((tmpvar_32 * 0.01) + tmpvar_41);
      tmpvar_42.w = (tmpvar_32 + tmpvar_41);
      highp vec4 tmpvar_43;
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      tmpvar_43 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_46;
      fAngle_46 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_43.x + (tmpvar_43.y * tmpvar_43.y)));
      highp vec2 vSinCos_47;
      vSinCos_47.x = sin(fAngle_46);
      vSinCos_47.y = cos(fAngle_46);
      highp float tmpvar_48;
      tmpvar_48 = (1.0 - vSinCos_47.y);
      highp mat3 tmpvar_49;
      tmpvar_49[0].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_47.y);
      tmpvar_49[0].y = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_47.x * tmpvar_31.z));
      tmpvar_49[0].z = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_47.x * tmpvar_31.y));
      tmpvar_49[1].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_47.x * tmpvar_31.z));
      tmpvar_49[1].y = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_47.y);
      tmpvar_49[1].z = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_47.x * tmpvar_31.x));
      tmpvar_49[2].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_47.x * tmpvar_31.y));
      tmpvar_49[2].y = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_47.x * tmpvar_31.x));
      tmpvar_49[2].z = (((tmpvar_48 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_47.y);
      highp vec3 tmpvar_50;
      tmpvar_50 = ((tmpvar_31.yzx * vRotatedWindVector_14.zxy) - (tmpvar_31.zxy * vRotatedWindVector_14.yzx));
      vAxis_39.xz = tmpvar_50.xz;
      highp float tmpvar_51;
      tmpvar_51 = clamp (dot (vRotatedWindVector_14, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_50.y + tmpvar_51);
      highp vec3 tmpvar_52;
      tmpvar_52 = normalize(vAxis_39);
      vAxis_39 = tmpvar_52;
      highp float tmpvar_53;
      tmpvar_53 = (1.570796 - (sign(tmpvar_51) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_51))) * (1.570796 + (abs(tmpvar_51) * (-0.2146018 + 
          (abs(tmpvar_51) * (0.08656672 + (abs(tmpvar_51) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_54;
      tmpvar_54 = (tmpvar_43.y - (tmpvar_43.x * tmpvar_43.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_55;
        fTime_55 = (tmpvar_36.z + tmpvar_41);
        highp vec4 tmpvar_56;
        tmpvar_56.zw = vec2(0.0, 0.0);
        tmpvar_56.x = fTime_55;
        tmpvar_56.y = (0.87 * fTime_55);
        highp vec4 tmpvar_57;
        highp vec4 tmpvar_58;
        tmpvar_58 = abs(((
          fract((tmpvar_56 + 0.5))
         * 2.0) - 1.0));
        tmpvar_57 = (((
          (tmpvar_58 * tmpvar_58)
         * 
          (3.0 - (2.0 * tmpvar_58))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_57.x * tmpvar_57.y) * tmpvar_57.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_59;
      fAngle_59 = (_glesMultiTexCoord2.x * ((
        (tmpvar_53 * tmpvar_35)
       + 
        (tmpvar_54 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_60;
      vSinCos_60.x = sin(fAngle_59);
      vSinCos_60.y = cos(fAngle_59);
      highp float tmpvar_61;
      tmpvar_61 = (1.0 - vSinCos_60.y);
      highp mat3 tmpvar_62;
      tmpvar_62[0].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.x) + vSinCos_60.y);
      tmpvar_62[0].y = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.y) + (vSinCos_60.x * tmpvar_52.z));
      tmpvar_62[0].z = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.z) - (vSinCos_60.x * tmpvar_52.y));
      tmpvar_62[1].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.y) - (vSinCos_60.x * tmpvar_52.z));
      tmpvar_62[1].y = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.y) + vSinCos_60.y);
      tmpvar_62[1].z = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.z) + (vSinCos_60.x * tmpvar_52.x));
      tmpvar_62[2].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.z) + (vSinCos_60.x * tmpvar_52.y));
      tmpvar_62[2].y = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.z) - (vSinCos_60.x * tmpvar_52.x));
      tmpvar_62[2].z = (((tmpvar_61 * tmpvar_52.z) * tmpvar_52.z) + vSinCos_60.y);
      highp mat3 tmpvar_63;
      tmpvar_63 = (tmpvar_49 * tmpvar_62);
      vDirection_25 = (tmpvar_63 * _glesNormal);
      vPos_24 = (normalize((tmpvar_63 * vPos_28)) * tmpvar_45);
    };
    tmpvar_12 = vDirection_25;
    FinalPosition_15 = vPos_24;
  };
  highp vec3 tmpvar_64;
  tmpvar_64 = (FinalPosition_15 + _glesMultiTexCoord1.xyz);
  FinalPosition_15 = tmpvar_64;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = tmpvar_64;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = tmpvar_64;
      highp float fAdherenceScale_67;
      highp vec3 tmpvar_68;
      tmpvar_68 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_69;
      tmpvar_69 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (tmpvar_69 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((tmpvar_69 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_69 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((tmpvar_69 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        (mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_70.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (tmpvar_64 + ((tmpvar_68 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((tmpvar_69 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_67 = (1.0 - ((
        ((tmpvar_78.x * tmpvar_78.y) * tmpvar_78.x)
       * tmpvar_78.y) * _ST_WindTurbulences.x));
      fAdherenceScale_67 = (fAdherenceScale_67 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_13 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_67) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp vec3 tmpvar_81;
      tmpvar_81 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_82;
      tmpvar_82 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_83;
      highp float fAmount_84;
      highp float fTarget_85;
      highp vec4 tmpvar_86;
      tmpvar_86.w = 0.0;
      tmpvar_86.x = (tmpvar_82 + _glesMultiTexCoord0.w);
      tmpvar_86.y = ((tmpvar_82 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_86.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_82 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_87;
      tmpvar_87 = abs(((
        fract((tmpvar_86 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_87 * tmpvar_87)
       * 
        (3.0 - (2.0 * tmpvar_87))
      ) - 0.5) * 2.0);
      highp float tmpvar_88;
      tmpvar_88 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_85 = 1.0;
      fAmount_84 = tmpvar_88;
      if ((tmpvar_88 < 0.0)) {
        fTarget_85 = -1.0;
        fAmount_84 = -(tmpvar_88);
      };
      vPos_80 = (vPos_65 + ((tmpvar_81 * 
        (((mix (
          mix (tmpvar_88, fTarget_85, fAmount_84)
        , fTarget_85, fAmount_84) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_15 = vPos_65;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_89;
    vPos_89 = FinalPosition_15;
    highp float fAdjust_90;
    highp float fLength_91;
    fLength_91 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_92;
    tmpvar_92 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_90 = tmpvar_92;
    if ((tmpvar_92 != 0.0)) {
      fAdjust_90 = pow (tmpvar_92, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_93;
    tmpvar_93.zw = vec2(0.0, 0.0);
    tmpvar_93.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_93.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_94;
    highp vec4 tmpvar_95;
    tmpvar_95 = abs(((
      fract((tmpvar_93 + 0.5))
     * 2.0) - 1.0));
    tmpvar_94 = (((
      (tmpvar_95 * tmpvar_95)
     * 
      (3.0 - (2.0 * tmpvar_95))
    ) - 0.5) * 2.0);
    vPos_89.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_94.x + (tmpvar_94.y * tmpvar_94.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_90)));
    vPos_89 = (normalize(vPos_89) * fLength_91);
    FinalPosition_15 = vPos_89;
  };
  tmpvar_11.xyz = FinalPosition_15;
  highp vec4 tmpvar_96;
  tmpvar_96 = (glstate_matrix_mvp * tmpvar_11);
  highp vec4 o_97;
  highp vec4 tmpvar_98;
  tmpvar_98 = (tmpvar_96 * 0.5);
  highp vec2 tmpvar_99;
  tmpvar_99.x = tmpvar_98.x;
  tmpvar_99.y = (tmpvar_98.y * _ProjectionParams.x);
  o_97.xy = (tmpvar_99 + tmpvar_98.w);
  o_97.zw = tmpvar_96.zw;
  highp vec3 tmpvar_100;
  tmpvar_100 = o_97.xyw;
  tmpvar_8 = tmpvar_100;
  highp vec2 tmpvar_101;
  tmpvar_101 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_101;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_102;
  v_102.x = _World2Object[0].x;
  v_102.y = _World2Object[1].x;
  v_102.z = _World2Object[2].x;
  v_102.w = _World2Object[3].x;
  highp vec4 v_103;
  v_103.x = _World2Object[0].y;
  v_103.y = _World2Object[1].y;
  v_103.z = _World2Object[2].y;
  v_103.w = _World2Object[3].y;
  highp vec4 v_104;
  v_104.x = _World2Object[0].z;
  v_104.y = _World2Object[1].z;
  v_104.z = _World2Object[2].z;
  v_104.w = _World2Object[3].z;
  highp vec3 tmpvar_105;
  tmpvar_105 = normalize(((
    (v_102.xyz * tmpvar_12.x)
   + 
    (v_103.xyz * tmpvar_12.y)
  ) + (v_104.xyz * tmpvar_12.z)));
  worldNormal_3 = tmpvar_105;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_22;
  tmpvar_22 = (_LightMatrix0 * tmpvar_21).xyz;
  lightCoord_4 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_24;
  tmpvar_24 = (texture (_LightTextureB0, vec2(tmpvar_23)).w * texture (_LightTexture0, lightCoord_4).w);
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_25;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_24);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_28 = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tmpvar_9 * tmpvar_1) * diff_28);
  c_27.xyz = tmpvar_30;
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  mediump vec3 tmpvar_31;
  tmpvar_31 = c_27.xyz;
  c_26.xyz = tmpvar_31;
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_15 = tmpvar_20;
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_17 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (tmpvar_20 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp vec3 tmpvar_40;
      tmpvar_40 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_41;
      tmpvar_41 = ((tmpvar_40.x + tmpvar_40.y) + tmpvar_40.z);
      highp vec4 tmpvar_42;
      tmpvar_42.x = (tmpvar_32 + tmpvar_41);
      tmpvar_42.y = ((tmpvar_32 * 0.75) - tmpvar_41);
      tmpvar_42.z = ((tmpvar_32 * 0.01) + tmpvar_41);
      tmpvar_42.w = (tmpvar_32 + tmpvar_41);
      highp vec4 tmpvar_43;
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      tmpvar_43 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_46;
      fAngle_46 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_43.x + (tmpvar_43.y * tmpvar_43.y)));
      highp vec2 vSinCos_47;
      vSinCos_47.x = sin(fAngle_46);
      vSinCos_47.y = cos(fAngle_46);
      highp float tmpvar_48;
      tmpvar_48 = (1.0 - vSinCos_47.y);
      highp mat3 tmpvar_49;
      tmpvar_49[0].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_47.y);
      tmpvar_49[0].y = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_47.x * tmpvar_31.z));
      tmpvar_49[0].z = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_47.x * tmpvar_31.y));
      tmpvar_49[1].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_47.x * tmpvar_31.z));
      tmpvar_49[1].y = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_47.y);
      tmpvar_49[1].z = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_47.x * tmpvar_31.x));
      tmpvar_49[2].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_47.x * tmpvar_31.y));
      tmpvar_49[2].y = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_47.x * tmpvar_31.x));
      tmpvar_49[2].z = (((tmpvar_48 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_47.y);
      highp vec3 tmpvar_50;
      tmpvar_50 = ((tmpvar_31.yzx * vRotatedWindVector_14.zxy) - (tmpvar_31.zxy * vRotatedWindVector_14.yzx));
      vAxis_39.xz = tmpvar_50.xz;
      highp float tmpvar_51;
      tmpvar_51 = clamp (dot (vRotatedWindVector_14, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_50.y + tmpvar_51);
      highp vec3 tmpvar_52;
      tmpvar_52 = normalize(vAxis_39);
      vAxis_39 = tmpvar_52;
      highp float tmpvar_53;
      tmpvar_53 = (1.570796 - (sign(tmpvar_51) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_51))) * (1.570796 + (abs(tmpvar_51) * (-0.2146018 + 
          (abs(tmpvar_51) * (0.08656672 + (abs(tmpvar_51) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_54;
      tmpvar_54 = (tmpvar_43.y - (tmpvar_43.x * tmpvar_43.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_55;
        fTime_55 = (tmpvar_36.z + tmpvar_41);
        highp vec4 tmpvar_56;
        tmpvar_56.zw = vec2(0.0, 0.0);
        tmpvar_56.x = fTime_55;
        tmpvar_56.y = (0.87 * fTime_55);
        highp vec4 tmpvar_57;
        highp vec4 tmpvar_58;
        tmpvar_58 = abs(((
          fract((tmpvar_56 + 0.5))
         * 2.0) - 1.0));
        tmpvar_57 = (((
          (tmpvar_58 * tmpvar_58)
         * 
          (3.0 - (2.0 * tmpvar_58))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_57.x * tmpvar_57.y) * tmpvar_57.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_59;
      fAngle_59 = (_glesMultiTexCoord2.x * ((
        (tmpvar_53 * tmpvar_35)
       + 
        (tmpvar_54 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_60;
      vSinCos_60.x = sin(fAngle_59);
      vSinCos_60.y = cos(fAngle_59);
      highp float tmpvar_61;
      tmpvar_61 = (1.0 - vSinCos_60.y);
      highp mat3 tmpvar_62;
      tmpvar_62[0].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.x) + vSinCos_60.y);
      tmpvar_62[0].y = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.y) + (vSinCos_60.x * tmpvar_52.z));
      tmpvar_62[0].z = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.z) - (vSinCos_60.x * tmpvar_52.y));
      tmpvar_62[1].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.y) - (vSinCos_60.x * tmpvar_52.z));
      tmpvar_62[1].y = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.y) + vSinCos_60.y);
      tmpvar_62[1].z = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.z) + (vSinCos_60.x * tmpvar_52.x));
      tmpvar_62[2].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.z) + (vSinCos_60.x * tmpvar_52.y));
      tmpvar_62[2].y = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.z) - (vSinCos_60.x * tmpvar_52.x));
      tmpvar_62[2].z = (((tmpvar_61 * tmpvar_52.z) * tmpvar_52.z) + vSinCos_60.y);
      highp mat3 tmpvar_63;
      tmpvar_63 = (tmpvar_49 * tmpvar_62);
      vDirection_25 = (tmpvar_63 * _glesNormal);
      vPos_24 = (normalize((tmpvar_63 * vPos_28)) * tmpvar_45);
    };
    tmpvar_12 = vDirection_25;
    FinalPosition_15 = vPos_24;
  };
  highp vec3 tmpvar_64;
  tmpvar_64 = (FinalPosition_15 + _glesMultiTexCoord1.xyz);
  FinalPosition_15 = tmpvar_64;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = tmpvar_64;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = tmpvar_64;
      highp float fAdherenceScale_67;
      highp vec3 tmpvar_68;
      tmpvar_68 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_69;
      tmpvar_69 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (tmpvar_69 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((tmpvar_69 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_69 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((tmpvar_69 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        (mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_70.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (tmpvar_64 + ((tmpvar_68 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((tmpvar_69 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_67 = (1.0 - ((
        ((tmpvar_78.x * tmpvar_78.y) * tmpvar_78.x)
       * tmpvar_78.y) * _ST_WindTurbulences.x));
      fAdherenceScale_67 = (fAdherenceScale_67 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_13 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_67) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp vec3 tmpvar_81;
      tmpvar_81 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_82;
      tmpvar_82 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_83;
      highp float fAmount_84;
      highp float fTarget_85;
      highp vec4 tmpvar_86;
      tmpvar_86.w = 0.0;
      tmpvar_86.x = (tmpvar_82 + _glesMultiTexCoord0.w);
      tmpvar_86.y = ((tmpvar_82 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_86.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_82 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_87;
      tmpvar_87 = abs(((
        fract((tmpvar_86 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_87 * tmpvar_87)
       * 
        (3.0 - (2.0 * tmpvar_87))
      ) - 0.5) * 2.0);
      highp float tmpvar_88;
      tmpvar_88 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_85 = 1.0;
      fAmount_84 = tmpvar_88;
      if ((tmpvar_88 < 0.0)) {
        fTarget_85 = -1.0;
        fAmount_84 = -(tmpvar_88);
      };
      vPos_80 = (vPos_65 + ((tmpvar_81 * 
        (((mix (
          mix (tmpvar_88, fTarget_85, fAmount_84)
        , fTarget_85, fAmount_84) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_15 = vPos_65;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_89;
    vPos_89 = FinalPosition_15;
    highp float fAdjust_90;
    highp float fLength_91;
    fLength_91 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_92;
    tmpvar_92 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_90 = tmpvar_92;
    if ((tmpvar_92 != 0.0)) {
      fAdjust_90 = pow (tmpvar_92, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_93;
    tmpvar_93.zw = vec2(0.0, 0.0);
    tmpvar_93.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_93.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_94;
    highp vec4 tmpvar_95;
    tmpvar_95 = abs(((
      fract((tmpvar_93 + 0.5))
     * 2.0) - 1.0));
    tmpvar_94 = (((
      (tmpvar_95 * tmpvar_95)
     * 
      (3.0 - (2.0 * tmpvar_95))
    ) - 0.5) * 2.0);
    vPos_89.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_94.x + (tmpvar_94.y * tmpvar_94.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_90)));
    vPos_89 = (normalize(vPos_89) * fLength_91);
    FinalPosition_15 = vPos_89;
  };
  tmpvar_11.xyz = FinalPosition_15;
  highp vec4 tmpvar_96;
  tmpvar_96 = (glstate_matrix_mvp * tmpvar_11);
  highp vec4 o_97;
  highp vec4 tmpvar_98;
  tmpvar_98 = (tmpvar_96 * 0.5);
  highp vec2 tmpvar_99;
  tmpvar_99.x = tmpvar_98.x;
  tmpvar_99.y = (tmpvar_98.y * _ProjectionParams.x);
  o_97.xy = (tmpvar_99 + tmpvar_98.w);
  o_97.zw = tmpvar_96.zw;
  highp vec3 tmpvar_100;
  tmpvar_100 = o_97.xyw;
  tmpvar_8 = tmpvar_100;
  highp vec2 tmpvar_101;
  tmpvar_101 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_101;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_102;
  v_102.x = _World2Object[0].x;
  v_102.y = _World2Object[1].x;
  v_102.z = _World2Object[2].x;
  v_102.w = _World2Object[3].x;
  highp vec4 v_103;
  v_103.x = _World2Object[0].y;
  v_103.y = _World2Object[1].y;
  v_103.z = _World2Object[2].y;
  v_103.w = _World2Object[3].y;
  highp vec4 v_104;
  v_104.x = _World2Object[0].z;
  v_104.y = _World2Object[1].z;
  v_104.z = _World2Object[2].z;
  v_104.w = _World2Object[3].z;
  highp vec3 tmpvar_105;
  tmpvar_105 = normalize(((
    (v_102.xyz * tmpvar_12.x)
   + 
    (v_103.xyz * tmpvar_12.y)
  ) + (v_104.xyz * tmpvar_12.z)));
  worldNormal_3 = tmpvar_105;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec2 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_22;
  tmpvar_22 = (_LightMatrix0 * tmpvar_21).xy;
  lightCoord_4 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = texture2D (_LightTexture0, lightCoord_4).w;
  lowp vec3 tmpvar_24;
  tmpvar_24 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_24;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_23);
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_27 = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_9 * tmpvar_1) * diff_27);
  c_26.xyz = tmpvar_29;
  c_26.w = tmpvar_10;
  c_25.w = c_26.w;
  mediump vec3 tmpvar_30;
  tmpvar_30 = c_26.xyz;
  c_25.xyz = tmpvar_30;
  c_3.xyz = c_25.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_15 = tmpvar_20;
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_17 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (tmpvar_20 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp vec3 tmpvar_40;
      tmpvar_40 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_41;
      tmpvar_41 = ((tmpvar_40.x + tmpvar_40.y) + tmpvar_40.z);
      highp vec4 tmpvar_42;
      tmpvar_42.x = (tmpvar_32 + tmpvar_41);
      tmpvar_42.y = ((tmpvar_32 * 0.75) - tmpvar_41);
      tmpvar_42.z = ((tmpvar_32 * 0.01) + tmpvar_41);
      tmpvar_42.w = (tmpvar_32 + tmpvar_41);
      highp vec4 tmpvar_43;
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      tmpvar_43 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_46;
      fAngle_46 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_43.x + (tmpvar_43.y * tmpvar_43.y)));
      highp vec2 vSinCos_47;
      vSinCos_47.x = sin(fAngle_46);
      vSinCos_47.y = cos(fAngle_46);
      highp float tmpvar_48;
      tmpvar_48 = (1.0 - vSinCos_47.y);
      highp mat3 tmpvar_49;
      tmpvar_49[0].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_47.y);
      tmpvar_49[0].y = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_47.x * tmpvar_31.z));
      tmpvar_49[0].z = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_47.x * tmpvar_31.y));
      tmpvar_49[1].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_47.x * tmpvar_31.z));
      tmpvar_49[1].y = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_47.y);
      tmpvar_49[1].z = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_47.x * tmpvar_31.x));
      tmpvar_49[2].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_47.x * tmpvar_31.y));
      tmpvar_49[2].y = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_47.x * tmpvar_31.x));
      tmpvar_49[2].z = (((tmpvar_48 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_47.y);
      highp vec3 tmpvar_50;
      tmpvar_50 = ((tmpvar_31.yzx * vRotatedWindVector_14.zxy) - (tmpvar_31.zxy * vRotatedWindVector_14.yzx));
      vAxis_39.xz = tmpvar_50.xz;
      highp float tmpvar_51;
      tmpvar_51 = clamp (dot (vRotatedWindVector_14, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_50.y + tmpvar_51);
      highp vec3 tmpvar_52;
      tmpvar_52 = normalize(vAxis_39);
      vAxis_39 = tmpvar_52;
      highp float tmpvar_53;
      tmpvar_53 = (1.570796 - (sign(tmpvar_51) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_51))) * (1.570796 + (abs(tmpvar_51) * (-0.2146018 + 
          (abs(tmpvar_51) * (0.08656672 + (abs(tmpvar_51) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_54;
      tmpvar_54 = (tmpvar_43.y - (tmpvar_43.x * tmpvar_43.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_55;
        fTime_55 = (tmpvar_36.z + tmpvar_41);
        highp vec4 tmpvar_56;
        tmpvar_56.zw = vec2(0.0, 0.0);
        tmpvar_56.x = fTime_55;
        tmpvar_56.y = (0.87 * fTime_55);
        highp vec4 tmpvar_57;
        highp vec4 tmpvar_58;
        tmpvar_58 = abs(((
          fract((tmpvar_56 + 0.5))
         * 2.0) - 1.0));
        tmpvar_57 = (((
          (tmpvar_58 * tmpvar_58)
         * 
          (3.0 - (2.0 * tmpvar_58))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_57.x * tmpvar_57.y) * tmpvar_57.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_59;
      fAngle_59 = (_glesMultiTexCoord2.x * ((
        (tmpvar_53 * tmpvar_35)
       + 
        (tmpvar_54 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_60;
      vSinCos_60.x = sin(fAngle_59);
      vSinCos_60.y = cos(fAngle_59);
      highp float tmpvar_61;
      tmpvar_61 = (1.0 - vSinCos_60.y);
      highp mat3 tmpvar_62;
      tmpvar_62[0].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.x) + vSinCos_60.y);
      tmpvar_62[0].y = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.y) + (vSinCos_60.x * tmpvar_52.z));
      tmpvar_62[0].z = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.z) - (vSinCos_60.x * tmpvar_52.y));
      tmpvar_62[1].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.y) - (vSinCos_60.x * tmpvar_52.z));
      tmpvar_62[1].y = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.y) + vSinCos_60.y);
      tmpvar_62[1].z = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.z) + (vSinCos_60.x * tmpvar_52.x));
      tmpvar_62[2].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.z) + (vSinCos_60.x * tmpvar_52.y));
      tmpvar_62[2].y = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.z) - (vSinCos_60.x * tmpvar_52.x));
      tmpvar_62[2].z = (((tmpvar_61 * tmpvar_52.z) * tmpvar_52.z) + vSinCos_60.y);
      highp mat3 tmpvar_63;
      tmpvar_63 = (tmpvar_49 * tmpvar_62);
      vDirection_25 = (tmpvar_63 * _glesNormal);
      vPos_24 = (normalize((tmpvar_63 * vPos_28)) * tmpvar_45);
    };
    tmpvar_12 = vDirection_25;
    FinalPosition_15 = vPos_24;
  };
  highp vec3 tmpvar_64;
  tmpvar_64 = (FinalPosition_15 + _glesMultiTexCoord1.xyz);
  FinalPosition_15 = tmpvar_64;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = tmpvar_64;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = tmpvar_64;
      highp float fAdherenceScale_67;
      highp vec3 tmpvar_68;
      tmpvar_68 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_69;
      tmpvar_69 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (tmpvar_69 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((tmpvar_69 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_69 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((tmpvar_69 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        (mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_70.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (tmpvar_64 + ((tmpvar_68 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((tmpvar_69 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_67 = (1.0 - ((
        ((tmpvar_78.x * tmpvar_78.y) * tmpvar_78.x)
       * tmpvar_78.y) * _ST_WindTurbulences.x));
      fAdherenceScale_67 = (fAdherenceScale_67 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_13 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_67) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp vec3 tmpvar_81;
      tmpvar_81 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_82;
      tmpvar_82 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_83;
      highp float fAmount_84;
      highp float fTarget_85;
      highp vec4 tmpvar_86;
      tmpvar_86.w = 0.0;
      tmpvar_86.x = (tmpvar_82 + _glesMultiTexCoord0.w);
      tmpvar_86.y = ((tmpvar_82 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_86.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_82 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_87;
      tmpvar_87 = abs(((
        fract((tmpvar_86 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_87 * tmpvar_87)
       * 
        (3.0 - (2.0 * tmpvar_87))
      ) - 0.5) * 2.0);
      highp float tmpvar_88;
      tmpvar_88 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_85 = 1.0;
      fAmount_84 = tmpvar_88;
      if ((tmpvar_88 < 0.0)) {
        fTarget_85 = -1.0;
        fAmount_84 = -(tmpvar_88);
      };
      vPos_80 = (vPos_65 + ((tmpvar_81 * 
        (((mix (
          mix (tmpvar_88, fTarget_85, fAmount_84)
        , fTarget_85, fAmount_84) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_15 = vPos_65;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_89;
    vPos_89 = FinalPosition_15;
    highp float fAdjust_90;
    highp float fLength_91;
    fLength_91 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_92;
    tmpvar_92 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_90 = tmpvar_92;
    if ((tmpvar_92 != 0.0)) {
      fAdjust_90 = pow (tmpvar_92, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_93;
    tmpvar_93.zw = vec2(0.0, 0.0);
    tmpvar_93.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_93.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_94;
    highp vec4 tmpvar_95;
    tmpvar_95 = abs(((
      fract((tmpvar_93 + 0.5))
     * 2.0) - 1.0));
    tmpvar_94 = (((
      (tmpvar_95 * tmpvar_95)
     * 
      (3.0 - (2.0 * tmpvar_95))
    ) - 0.5) * 2.0);
    vPos_89.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_94.x + (tmpvar_94.y * tmpvar_94.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_90)));
    vPos_89 = (normalize(vPos_89) * fLength_91);
    FinalPosition_15 = vPos_89;
  };
  tmpvar_11.xyz = FinalPosition_15;
  highp vec4 tmpvar_96;
  tmpvar_96 = (glstate_matrix_mvp * tmpvar_11);
  highp vec4 o_97;
  highp vec4 tmpvar_98;
  tmpvar_98 = (tmpvar_96 * 0.5);
  highp vec2 tmpvar_99;
  tmpvar_99.x = tmpvar_98.x;
  tmpvar_99.y = (tmpvar_98.y * _ProjectionParams.x);
  o_97.xy = (tmpvar_99 + tmpvar_98.w);
  o_97.zw = tmpvar_96.zw;
  highp vec3 tmpvar_100;
  tmpvar_100 = o_97.xyw;
  tmpvar_8 = tmpvar_100;
  highp vec2 tmpvar_101;
  tmpvar_101 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_101;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_102;
  v_102.x = _World2Object[0].x;
  v_102.y = _World2Object[1].x;
  v_102.z = _World2Object[2].x;
  v_102.w = _World2Object[3].x;
  highp vec4 v_103;
  v_103.x = _World2Object[0].y;
  v_103.y = _World2Object[1].y;
  v_103.z = _World2Object[2].y;
  v_103.w = _World2Object[3].y;
  highp vec4 v_104;
  v_104.x = _World2Object[0].z;
  v_104.y = _World2Object[1].z;
  v_104.z = _World2Object[2].z;
  v_104.w = _World2Object[3].z;
  highp vec3 tmpvar_105;
  tmpvar_105 = normalize(((
    (v_102.xyz * tmpvar_12.x)
   + 
    (v_103.xyz * tmpvar_12.y)
  ) + (v_104.xyz * tmpvar_12.z)));
  worldNormal_3 = tmpvar_105;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec2 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_22;
  tmpvar_22 = (_LightMatrix0 * tmpvar_21).xy;
  lightCoord_4 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = texture (_LightTexture0, lightCoord_4).w;
  lowp vec3 tmpvar_24;
  tmpvar_24 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_24;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_23);
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_27 = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_9 * tmpvar_1) * diff_27);
  c_26.xyz = tmpvar_29;
  c_26.w = tmpvar_10;
  c_25.w = c_26.w;
  mediump vec3 tmpvar_30;
  tmpvar_30 = c_26.xyz;
  c_25.xyz = tmpvar_30;
  c_3.xyz = c_25.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_13;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_22;
  tmpvar_22 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_18 = tmpvar_22;
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_23;
    tmpvar_23 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_24;
    isBestWind_24 = (tmpvar_19 == 4.0);
    bool bLeaf2_25;
    bLeaf2_25 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    highp vec3 vDirection_27;
    vDirection_27 = tmpvar_2;
    highp float tmpvar_28;
    if (bLeaf2_25) {
      tmpvar_28 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_29;
    if (bLeaf2_25) {
      tmpvar_29 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_30;
    highp vec4 tmpvar_31;
    tmpvar_31.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_31.x = (tmpvar_28 + tmpvar_23);
    highp vec4 tmpvar_32;
    tmpvar_32 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    vPos_30 = (tmpvar_22 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_29 * (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_27 = tmpvar_2;
    vPos_26 = vPos_30;
    if (isBestWind_24) {
      highp vec3 tmpvar_33;
      tmpvar_33 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_34;
      if (bLeaf2_25) {
        tmpvar_34 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_35;
      if (bLeaf2_25) {
        tmpvar_35 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_36;
      if (bLeaf2_25) {
        tmpvar_36 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_37;
      if (bLeaf2_25) {
        tmpvar_37 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_38;
      if (bLeaf2_25) {
        tmpvar_38 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_38 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_39;
      if (bLeaf2_25) {
        tmpvar_39 = bool(1);
      } else {
        tmpvar_39 = bool(1);
      };
      highp float fTwitch_40;
      highp vec3 vAxis_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_34 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_34 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_34 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_34 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_30, vPos_30));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_36) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) + (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) - (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_33.z) * tmpvar_33.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_33.yzx * vRotatedWindVector_17.zxy) - (tmpvar_33.zxy * vRotatedWindVector_17.yzx));
      vAxis_41.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_17, tmpvar_33), -1.0, 1.0);
      vAxis_41.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_41);
      vAxis_41 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_56;
      tmpvar_56 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_40 = 0.0;
      if (tmpvar_39) {
        highp float fTime_57;
        fTime_57 = (tmpvar_38.z + tmpvar_43);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_40 = (tmpvar_38.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_38.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_37)
       + 
        (tmpvar_56 * tmpvar_35)
      ) + fTwitch_40));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_51 * tmpvar_64);
      vDirection_27 = (tmpvar_65 * _glesNormal);
      vPos_26 = (normalize((tmpvar_65 * vPos_30)) * tmpvar_47);
    };
    tmpvar_15 = vDirection_27;
    FinalPosition_18 = vPos_26;
  };
  highp vec3 tmpvar_66;
  tmpvar_66 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  FinalPosition_18 = tmpvar_66;
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_67;
    vPos_67 = tmpvar_66;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_68;
      vPos_68 = tmpvar_66;
      highp float fAdherenceScale_69;
      highp vec3 tmpvar_70;
      tmpvar_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_71;
      tmpvar_71 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_72;
      highp float fOscillation_73;
      fOscillation_73 = 1.0;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.x = (tmpvar_71 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((tmpvar_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_71 + _glesMultiTexCoord0.w));
      tmpvar_76.w = ((tmpvar_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_72 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_72.y * vOscillations_72.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      fOscillation_73 = (((
        (mix (mix (tmpvar_78, fTarget_75, fAmount_74), fTarget_75, fAmount_74) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_72.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_72.w * _ST_WindBranchWhip.x)));
      vPos_68 = (tmpvar_66 + ((tmpvar_70 * fOscillation_73) * _ST_WindBranch.y));
      highp vec4 tmpvar_79;
      tmpvar_79.zw = vec2(0.0, 0.0);
      tmpvar_79.x = ((tmpvar_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_79.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_80;
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      tmpvar_80 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((
        ((tmpvar_80.x * tmpvar_80.y) * tmpvar_80.x)
       * tmpvar_80.y) * _ST_WindTurbulences.x));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_72.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_68 = (vPos_68 + ((
        ((vRotatedBranchAnchor_16 - vPos_68) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_67 = vPos_68;
    } else {
      highp vec3 vPos_82;
      vPos_82 = vPos_67;
      highp vec3 tmpvar_83;
      tmpvar_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_84;
      tmpvar_84 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_85;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (tmpvar_84 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((tmpvar_84 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_84 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_85 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_85.y * vOscillations_85.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      vPos_82 = (vPos_67 + ((tmpvar_83 * 
        (((mix (
          mix (tmpvar_90, fTarget_87, fAmount_86)
        , fTarget_87, fAmount_86) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_85.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_67 = vPos_82;
    };
    FinalPosition_18 = vPos_67;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_18;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_95.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    vPos_91.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_96.x + (tmpvar_96.y * tmpvar_96.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_92)));
    vPos_91 = (normalize(vPos_91) * fLength_93);
    FinalPosition_18 = vPos_91;
  };
  tmpvar_14.xyz = FinalPosition_18;
  highp vec4 tmpvar_98;
  tmpvar_98 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_99;
  highp vec4 tmpvar_100;
  tmpvar_100 = (tmpvar_98 * 0.5);
  highp vec2 tmpvar_101;
  tmpvar_101.x = tmpvar_100.x;
  tmpvar_101.y = (tmpvar_100.y * _ProjectionParams.x);
  o_99.xy = (tmpvar_101 + tmpvar_100.w);
  o_99.zw = tmpvar_98.zw;
  highp vec3 tmpvar_102;
  tmpvar_102 = o_99.xyw;
  tmpvar_8 = tmpvar_102;
  highp vec2 tmpvar_103;
  tmpvar_103 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_103;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_104;
  v_104.x = _World2Object[0].x;
  v_104.y = _World2Object[1].x;
  v_104.z = _World2Object[2].x;
  v_104.w = _World2Object[3].x;
  highp vec4 v_105;
  v_105.x = _World2Object[0].y;
  v_105.y = _World2Object[1].y;
  v_105.z = _World2Object[2].y;
  v_105.w = _World2Object[3].y;
  highp vec4 v_106;
  v_106.x = _World2Object[0].z;
  v_106.y = _World2Object[1].z;
  v_106.z = _World2Object[2].z;
  v_106.w = _World2Object[3].z;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize(((
    (v_104.xyz * tmpvar_15.x)
   + 
    (v_105.xyz * tmpvar_15.y)
  ) + (v_106.xyz * tmpvar_15.z)));
  worldNormal_3 = tmpvar_107;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_23;
  tmpvar_23 = (_LightMatrix0 * tmpvar_22).xyz;
  lightCoord_4 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_25;
  tmpvar_25 = texture2D (_LightTexture0, vec2(tmpvar_24)).w;
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_26;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_25);
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_29 = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tmpvar_9 * tmpvar_1) * diff_29);
  c_28.xyz = tmpvar_31;
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  mediump vec3 tmpvar_32;
  tmpvar_32 = c_28.xyz;
  c_27.xyz = tmpvar_32;
  c_3.xyz = c_27.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_13;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_22;
  tmpvar_22 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_18 = tmpvar_22;
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_23;
    tmpvar_23 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_24;
    isBestWind_24 = (tmpvar_19 == 4.0);
    bool bLeaf2_25;
    bLeaf2_25 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    highp vec3 vDirection_27;
    vDirection_27 = tmpvar_2;
    highp float tmpvar_28;
    if (bLeaf2_25) {
      tmpvar_28 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_29;
    if (bLeaf2_25) {
      tmpvar_29 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_30;
    highp vec4 tmpvar_31;
    tmpvar_31.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_31.x = (tmpvar_28 + tmpvar_23);
    highp vec4 tmpvar_32;
    tmpvar_32 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    vPos_30 = (tmpvar_22 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_29 * (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_27 = tmpvar_2;
    vPos_26 = vPos_30;
    if (isBestWind_24) {
      highp vec3 tmpvar_33;
      tmpvar_33 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_34;
      if (bLeaf2_25) {
        tmpvar_34 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_35;
      if (bLeaf2_25) {
        tmpvar_35 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_36;
      if (bLeaf2_25) {
        tmpvar_36 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_37;
      if (bLeaf2_25) {
        tmpvar_37 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_38;
      if (bLeaf2_25) {
        tmpvar_38 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_38 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_39;
      if (bLeaf2_25) {
        tmpvar_39 = bool(1);
      } else {
        tmpvar_39 = bool(1);
      };
      highp float fTwitch_40;
      highp vec3 vAxis_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_34 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_34 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_34 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_34 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_30, vPos_30));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_36) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) + (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) - (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_33.z) * tmpvar_33.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_33.yzx * vRotatedWindVector_17.zxy) - (tmpvar_33.zxy * vRotatedWindVector_17.yzx));
      vAxis_41.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_17, tmpvar_33), -1.0, 1.0);
      vAxis_41.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_41);
      vAxis_41 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_56;
      tmpvar_56 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_40 = 0.0;
      if (tmpvar_39) {
        highp float fTime_57;
        fTime_57 = (tmpvar_38.z + tmpvar_43);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_40 = (tmpvar_38.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_38.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_37)
       + 
        (tmpvar_56 * tmpvar_35)
      ) + fTwitch_40));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_51 * tmpvar_64);
      vDirection_27 = (tmpvar_65 * _glesNormal);
      vPos_26 = (normalize((tmpvar_65 * vPos_30)) * tmpvar_47);
    };
    tmpvar_15 = vDirection_27;
    FinalPosition_18 = vPos_26;
  };
  highp vec3 tmpvar_66;
  tmpvar_66 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  FinalPosition_18 = tmpvar_66;
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_67;
    vPos_67 = tmpvar_66;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_68;
      vPos_68 = tmpvar_66;
      highp float fAdherenceScale_69;
      highp vec3 tmpvar_70;
      tmpvar_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_71;
      tmpvar_71 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_72;
      highp float fOscillation_73;
      fOscillation_73 = 1.0;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.x = (tmpvar_71 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((tmpvar_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_71 + _glesMultiTexCoord0.w));
      tmpvar_76.w = ((tmpvar_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_72 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_72.y * vOscillations_72.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      fOscillation_73 = (((
        (mix (mix (tmpvar_78, fTarget_75, fAmount_74), fTarget_75, fAmount_74) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_72.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_72.w * _ST_WindBranchWhip.x)));
      vPos_68 = (tmpvar_66 + ((tmpvar_70 * fOscillation_73) * _ST_WindBranch.y));
      highp vec4 tmpvar_79;
      tmpvar_79.zw = vec2(0.0, 0.0);
      tmpvar_79.x = ((tmpvar_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_79.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_80;
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      tmpvar_80 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((
        ((tmpvar_80.x * tmpvar_80.y) * tmpvar_80.x)
       * tmpvar_80.y) * _ST_WindTurbulences.x));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_72.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_68 = (vPos_68 + ((
        ((vRotatedBranchAnchor_16 - vPos_68) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_67 = vPos_68;
    } else {
      highp vec3 vPos_82;
      vPos_82 = vPos_67;
      highp vec3 tmpvar_83;
      tmpvar_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_84;
      tmpvar_84 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_85;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (tmpvar_84 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((tmpvar_84 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_84 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_85 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_85.y * vOscillations_85.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      vPos_82 = (vPos_67 + ((tmpvar_83 * 
        (((mix (
          mix (tmpvar_90, fTarget_87, fAmount_86)
        , fTarget_87, fAmount_86) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_85.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_67 = vPos_82;
    };
    FinalPosition_18 = vPos_67;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_18;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_95.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    vPos_91.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_96.x + (tmpvar_96.y * tmpvar_96.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_92)));
    vPos_91 = (normalize(vPos_91) * fLength_93);
    FinalPosition_18 = vPos_91;
  };
  tmpvar_14.xyz = FinalPosition_18;
  highp vec4 tmpvar_98;
  tmpvar_98 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_99;
  highp vec4 tmpvar_100;
  tmpvar_100 = (tmpvar_98 * 0.5);
  highp vec2 tmpvar_101;
  tmpvar_101.x = tmpvar_100.x;
  tmpvar_101.y = (tmpvar_100.y * _ProjectionParams.x);
  o_99.xy = (tmpvar_101 + tmpvar_100.w);
  o_99.zw = tmpvar_98.zw;
  highp vec3 tmpvar_102;
  tmpvar_102 = o_99.xyw;
  tmpvar_8 = tmpvar_102;
  highp vec2 tmpvar_103;
  tmpvar_103 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_103;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_104;
  v_104.x = _World2Object[0].x;
  v_104.y = _World2Object[1].x;
  v_104.z = _World2Object[2].x;
  v_104.w = _World2Object[3].x;
  highp vec4 v_105;
  v_105.x = _World2Object[0].y;
  v_105.y = _World2Object[1].y;
  v_105.z = _World2Object[2].y;
  v_105.w = _World2Object[3].y;
  highp vec4 v_106;
  v_106.x = _World2Object[0].z;
  v_106.y = _World2Object[1].z;
  v_106.z = _World2Object[2].z;
  v_106.w = _World2Object[3].z;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize(((
    (v_104.xyz * tmpvar_15.x)
   + 
    (v_105.xyz * tmpvar_15.y)
  ) + (v_106.xyz * tmpvar_15.z)));
  worldNormal_3 = tmpvar_107;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_23;
  tmpvar_23 = (_LightMatrix0 * tmpvar_22).xyz;
  lightCoord_4 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_25;
  tmpvar_25 = texture (_LightTexture0, vec2(tmpvar_24)).w;
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_26;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_25);
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_29 = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tmpvar_9 * tmpvar_1) * diff_29);
  c_28.xyz = tmpvar_31;
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  mediump vec3 tmpvar_32;
  tmpvar_32 = c_28.xyz;
  c_27.xyz = tmpvar_32;
  c_3.xyz = c_27.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_13;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_22;
  tmpvar_22 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_18 = tmpvar_22;
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_23;
    tmpvar_23 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_24;
    isBestWind_24 = (tmpvar_19 == 4.0);
    bool bLeaf2_25;
    bLeaf2_25 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    highp vec3 vDirection_27;
    vDirection_27 = tmpvar_2;
    highp float tmpvar_28;
    if (bLeaf2_25) {
      tmpvar_28 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_29;
    if (bLeaf2_25) {
      tmpvar_29 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_30;
    highp vec4 tmpvar_31;
    tmpvar_31.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_31.x = (tmpvar_28 + tmpvar_23);
    highp vec4 tmpvar_32;
    tmpvar_32 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    vPos_30 = (tmpvar_22 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_29 * (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_27 = tmpvar_2;
    vPos_26 = vPos_30;
    if (isBestWind_24) {
      highp vec3 tmpvar_33;
      tmpvar_33 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_34;
      if (bLeaf2_25) {
        tmpvar_34 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_35;
      if (bLeaf2_25) {
        tmpvar_35 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_36;
      if (bLeaf2_25) {
        tmpvar_36 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_37;
      if (bLeaf2_25) {
        tmpvar_37 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_38;
      if (bLeaf2_25) {
        tmpvar_38 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_38 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_39;
      if (bLeaf2_25) {
        tmpvar_39 = bool(1);
      } else {
        tmpvar_39 = bool(1);
      };
      highp float fTwitch_40;
      highp vec3 vAxis_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_34 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_34 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_34 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_34 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_30, vPos_30));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_36) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) + (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) - (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_33.z) * tmpvar_33.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_33.yzx * vRotatedWindVector_17.zxy) - (tmpvar_33.zxy * vRotatedWindVector_17.yzx));
      vAxis_41.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_17, tmpvar_33), -1.0, 1.0);
      vAxis_41.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_41);
      vAxis_41 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_56;
      tmpvar_56 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_40 = 0.0;
      if (tmpvar_39) {
        highp float fTime_57;
        fTime_57 = (tmpvar_38.z + tmpvar_43);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_40 = (tmpvar_38.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_38.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_37)
       + 
        (tmpvar_56 * tmpvar_35)
      ) + fTwitch_40));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_51 * tmpvar_64);
      vDirection_27 = (tmpvar_65 * _glesNormal);
      vPos_26 = (normalize((tmpvar_65 * vPos_30)) * tmpvar_47);
    };
    tmpvar_15 = vDirection_27;
    FinalPosition_18 = vPos_26;
  };
  highp vec3 tmpvar_66;
  tmpvar_66 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  FinalPosition_18 = tmpvar_66;
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_67;
    vPos_67 = tmpvar_66;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_68;
      vPos_68 = tmpvar_66;
      highp float fAdherenceScale_69;
      highp vec3 tmpvar_70;
      tmpvar_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_71;
      tmpvar_71 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_72;
      highp float fOscillation_73;
      fOscillation_73 = 1.0;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.x = (tmpvar_71 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((tmpvar_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_71 + _glesMultiTexCoord0.w));
      tmpvar_76.w = ((tmpvar_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_72 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_72.y * vOscillations_72.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      fOscillation_73 = (((
        (mix (mix (tmpvar_78, fTarget_75, fAmount_74), fTarget_75, fAmount_74) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_72.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_72.w * _ST_WindBranchWhip.x)));
      vPos_68 = (tmpvar_66 + ((tmpvar_70 * fOscillation_73) * _ST_WindBranch.y));
      highp vec4 tmpvar_79;
      tmpvar_79.zw = vec2(0.0, 0.0);
      tmpvar_79.x = ((tmpvar_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_79.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_80;
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      tmpvar_80 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((
        ((tmpvar_80.x * tmpvar_80.y) * tmpvar_80.x)
       * tmpvar_80.y) * _ST_WindTurbulences.x));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_72.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_68 = (vPos_68 + ((
        ((vRotatedBranchAnchor_16 - vPos_68) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_67 = vPos_68;
    } else {
      highp vec3 vPos_82;
      vPos_82 = vPos_67;
      highp vec3 tmpvar_83;
      tmpvar_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_84;
      tmpvar_84 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_85;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (tmpvar_84 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((tmpvar_84 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_84 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_85 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_85.y * vOscillations_85.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      vPos_82 = (vPos_67 + ((tmpvar_83 * 
        (((mix (
          mix (tmpvar_90, fTarget_87, fAmount_86)
        , fTarget_87, fAmount_86) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_85.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_67 = vPos_82;
    };
    FinalPosition_18 = vPos_67;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_18;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_95.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    vPos_91.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_96.x + (tmpvar_96.y * tmpvar_96.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_92)));
    vPos_91 = (normalize(vPos_91) * fLength_93);
    FinalPosition_18 = vPos_91;
  };
  tmpvar_14.xyz = FinalPosition_18;
  highp vec4 tmpvar_98;
  tmpvar_98 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_99;
  highp vec4 tmpvar_100;
  tmpvar_100 = (tmpvar_98 * 0.5);
  highp vec2 tmpvar_101;
  tmpvar_101.x = tmpvar_100.x;
  tmpvar_101.y = (tmpvar_100.y * _ProjectionParams.x);
  o_99.xy = (tmpvar_101 + tmpvar_100.w);
  o_99.zw = tmpvar_98.zw;
  highp vec3 tmpvar_102;
  tmpvar_102 = o_99.xyw;
  tmpvar_8 = tmpvar_102;
  highp vec2 tmpvar_103;
  tmpvar_103 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_103;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_104;
  v_104.x = _World2Object[0].x;
  v_104.y = _World2Object[1].x;
  v_104.z = _World2Object[2].x;
  v_104.w = _World2Object[3].x;
  highp vec4 v_105;
  v_105.x = _World2Object[0].y;
  v_105.y = _World2Object[1].y;
  v_105.z = _World2Object[2].y;
  v_105.w = _World2Object[3].y;
  highp vec4 v_106;
  v_106.x = _World2Object[0].z;
  v_106.y = _World2Object[1].z;
  v_106.z = _World2Object[2].z;
  v_106.w = _World2Object[3].z;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize(((
    (v_104.xyz * tmpvar_15.x)
   + 
    (v_105.xyz * tmpvar_15.y)
  ) + (v_106.xyz * tmpvar_15.z)));
  worldNormal_3 = tmpvar_107;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  mediump float tmpvar_13;
  tmpvar_13 = fract(tmpvar_12.y);
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_13 * 0.0625) + unity_LODFade.y);
  projUV_11.y = tmpvar_14;
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_17;
  lowp float x_18;
  x_18 = (tmpvar_9 - _Cutoff);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_19 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_21;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_24 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.xyz = tmpvar_26;
  c_23.w = tmpvar_9;
  c_22.w = c_23.w;
  mediump vec3 tmpvar_27;
  tmpvar_27 = c_23.xyz;
  c_22.xyz = tmpvar_27;
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_13;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_22;
  tmpvar_22 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_18 = tmpvar_22;
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_23;
    tmpvar_23 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_24;
    isBestWind_24 = (tmpvar_19 == 4.0);
    bool bLeaf2_25;
    bLeaf2_25 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    highp vec3 vDirection_27;
    vDirection_27 = tmpvar_2;
    highp float tmpvar_28;
    if (bLeaf2_25) {
      tmpvar_28 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_29;
    if (bLeaf2_25) {
      tmpvar_29 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_30;
    highp vec4 tmpvar_31;
    tmpvar_31.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_31.x = (tmpvar_28 + tmpvar_23);
    highp vec4 tmpvar_32;
    tmpvar_32 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    vPos_30 = (tmpvar_22 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_29 * (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_27 = tmpvar_2;
    vPos_26 = vPos_30;
    if (isBestWind_24) {
      highp vec3 tmpvar_33;
      tmpvar_33 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_34;
      if (bLeaf2_25) {
        tmpvar_34 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_35;
      if (bLeaf2_25) {
        tmpvar_35 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_36;
      if (bLeaf2_25) {
        tmpvar_36 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_37;
      if (bLeaf2_25) {
        tmpvar_37 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_38;
      if (bLeaf2_25) {
        tmpvar_38 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_38 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_39;
      if (bLeaf2_25) {
        tmpvar_39 = bool(1);
      } else {
        tmpvar_39 = bool(1);
      };
      highp float fTwitch_40;
      highp vec3 vAxis_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_34 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_34 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_34 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_34 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_30, vPos_30));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_36) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) + (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) - (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_33.z) * tmpvar_33.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_33.yzx * vRotatedWindVector_17.zxy) - (tmpvar_33.zxy * vRotatedWindVector_17.yzx));
      vAxis_41.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_17, tmpvar_33), -1.0, 1.0);
      vAxis_41.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_41);
      vAxis_41 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_56;
      tmpvar_56 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_40 = 0.0;
      if (tmpvar_39) {
        highp float fTime_57;
        fTime_57 = (tmpvar_38.z + tmpvar_43);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_40 = (tmpvar_38.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_38.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_37)
       + 
        (tmpvar_56 * tmpvar_35)
      ) + fTwitch_40));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_51 * tmpvar_64);
      vDirection_27 = (tmpvar_65 * _glesNormal);
      vPos_26 = (normalize((tmpvar_65 * vPos_30)) * tmpvar_47);
    };
    tmpvar_15 = vDirection_27;
    FinalPosition_18 = vPos_26;
  };
  highp vec3 tmpvar_66;
  tmpvar_66 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  FinalPosition_18 = tmpvar_66;
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_67;
    vPos_67 = tmpvar_66;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_68;
      vPos_68 = tmpvar_66;
      highp float fAdherenceScale_69;
      highp vec3 tmpvar_70;
      tmpvar_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_71;
      tmpvar_71 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_72;
      highp float fOscillation_73;
      fOscillation_73 = 1.0;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.x = (tmpvar_71 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((tmpvar_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_71 + _glesMultiTexCoord0.w));
      tmpvar_76.w = ((tmpvar_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_72 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_72.y * vOscillations_72.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      fOscillation_73 = (((
        (mix (mix (tmpvar_78, fTarget_75, fAmount_74), fTarget_75, fAmount_74) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_72.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_72.w * _ST_WindBranchWhip.x)));
      vPos_68 = (tmpvar_66 + ((tmpvar_70 * fOscillation_73) * _ST_WindBranch.y));
      highp vec4 tmpvar_79;
      tmpvar_79.zw = vec2(0.0, 0.0);
      tmpvar_79.x = ((tmpvar_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_79.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_80;
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      tmpvar_80 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((
        ((tmpvar_80.x * tmpvar_80.y) * tmpvar_80.x)
       * tmpvar_80.y) * _ST_WindTurbulences.x));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_72.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_68 = (vPos_68 + ((
        ((vRotatedBranchAnchor_16 - vPos_68) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_67 = vPos_68;
    } else {
      highp vec3 vPos_82;
      vPos_82 = vPos_67;
      highp vec3 tmpvar_83;
      tmpvar_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_84;
      tmpvar_84 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_85;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (tmpvar_84 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((tmpvar_84 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_84 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_85 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_85.y * vOscillations_85.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      vPos_82 = (vPos_67 + ((tmpvar_83 * 
        (((mix (
          mix (tmpvar_90, fTarget_87, fAmount_86)
        , fTarget_87, fAmount_86) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_85.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_67 = vPos_82;
    };
    FinalPosition_18 = vPos_67;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_18;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_95.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    vPos_91.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_96.x + (tmpvar_96.y * tmpvar_96.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_92)));
    vPos_91 = (normalize(vPos_91) * fLength_93);
    FinalPosition_18 = vPos_91;
  };
  tmpvar_14.xyz = FinalPosition_18;
  highp vec4 tmpvar_98;
  tmpvar_98 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_99;
  highp vec4 tmpvar_100;
  tmpvar_100 = (tmpvar_98 * 0.5);
  highp vec2 tmpvar_101;
  tmpvar_101.x = tmpvar_100.x;
  tmpvar_101.y = (tmpvar_100.y * _ProjectionParams.x);
  o_99.xy = (tmpvar_101 + tmpvar_100.w);
  o_99.zw = tmpvar_98.zw;
  highp vec3 tmpvar_102;
  tmpvar_102 = o_99.xyw;
  tmpvar_8 = tmpvar_102;
  highp vec2 tmpvar_103;
  tmpvar_103 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_103;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_104;
  v_104.x = _World2Object[0].x;
  v_104.y = _World2Object[1].x;
  v_104.z = _World2Object[2].x;
  v_104.w = _World2Object[3].x;
  highp vec4 v_105;
  v_105.x = _World2Object[0].y;
  v_105.y = _World2Object[1].y;
  v_105.z = _World2Object[2].y;
  v_105.w = _World2Object[3].y;
  highp vec4 v_106;
  v_106.x = _World2Object[0].z;
  v_106.y = _World2Object[1].z;
  v_106.z = _World2Object[2].z;
  v_106.w = _World2Object[3].z;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize(((
    (v_104.xyz * tmpvar_15.x)
   + 
    (v_105.xyz * tmpvar_15.y)
  ) + (v_106.xyz * tmpvar_15.z)));
  worldNormal_3 = tmpvar_107;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  mediump float tmpvar_13;
  tmpvar_13 = fract(tmpvar_12.y);
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_13 * 0.0625) + unity_LODFade.y);
  projUV_11.y = tmpvar_14;
  lowp float x_15;
  x_15 = (texture (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_17;
  lowp float x_18;
  x_18 = (tmpvar_9 - _Cutoff);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_19 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_21;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_24 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.xyz = tmpvar_26;
  c_23.w = tmpvar_9;
  c_22.w = c_23.w;
  mediump vec3 tmpvar_27;
  tmpvar_27 = c_23.xyz;
  c_22.xyz = tmpvar_27;
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_13;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_22;
  tmpvar_22 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_18 = tmpvar_22;
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_23;
    tmpvar_23 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_24;
    isBestWind_24 = (tmpvar_19 == 4.0);
    bool bLeaf2_25;
    bLeaf2_25 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    highp vec3 vDirection_27;
    vDirection_27 = tmpvar_2;
    highp float tmpvar_28;
    if (bLeaf2_25) {
      tmpvar_28 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_29;
    if (bLeaf2_25) {
      tmpvar_29 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_30;
    highp vec4 tmpvar_31;
    tmpvar_31.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_31.x = (tmpvar_28 + tmpvar_23);
    highp vec4 tmpvar_32;
    tmpvar_32 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    vPos_30 = (tmpvar_22 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_29 * (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_27 = tmpvar_2;
    vPos_26 = vPos_30;
    if (isBestWind_24) {
      highp vec3 tmpvar_33;
      tmpvar_33 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_34;
      if (bLeaf2_25) {
        tmpvar_34 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_35;
      if (bLeaf2_25) {
        tmpvar_35 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_36;
      if (bLeaf2_25) {
        tmpvar_36 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_37;
      if (bLeaf2_25) {
        tmpvar_37 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_38;
      if (bLeaf2_25) {
        tmpvar_38 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_38 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_39;
      if (bLeaf2_25) {
        tmpvar_39 = bool(1);
      } else {
        tmpvar_39 = bool(1);
      };
      highp float fTwitch_40;
      highp vec3 vAxis_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_34 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_34 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_34 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_34 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_30, vPos_30));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_36) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) + (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) - (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_33.z) * tmpvar_33.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_33.yzx * vRotatedWindVector_17.zxy) - (tmpvar_33.zxy * vRotatedWindVector_17.yzx));
      vAxis_41.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_17, tmpvar_33), -1.0, 1.0);
      vAxis_41.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_41);
      vAxis_41 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_56;
      tmpvar_56 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_40 = 0.0;
      if (tmpvar_39) {
        highp float fTime_57;
        fTime_57 = (tmpvar_38.z + tmpvar_43);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_40 = (tmpvar_38.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_38.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_37)
       + 
        (tmpvar_56 * tmpvar_35)
      ) + fTwitch_40));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_51 * tmpvar_64);
      vDirection_27 = (tmpvar_65 * _glesNormal);
      vPos_26 = (normalize((tmpvar_65 * vPos_30)) * tmpvar_47);
    };
    tmpvar_15 = vDirection_27;
    FinalPosition_18 = vPos_26;
  };
  highp vec3 tmpvar_66;
  tmpvar_66 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  FinalPosition_18 = tmpvar_66;
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_67;
    vPos_67 = tmpvar_66;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_68;
      vPos_68 = tmpvar_66;
      highp float fAdherenceScale_69;
      highp vec3 tmpvar_70;
      tmpvar_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_71;
      tmpvar_71 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_72;
      highp float fOscillation_73;
      fOscillation_73 = 1.0;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.x = (tmpvar_71 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((tmpvar_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_71 + _glesMultiTexCoord0.w));
      tmpvar_76.w = ((tmpvar_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_72 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_72.y * vOscillations_72.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      fOscillation_73 = (((
        (mix (mix (tmpvar_78, fTarget_75, fAmount_74), fTarget_75, fAmount_74) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_72.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_72.w * _ST_WindBranchWhip.x)));
      vPos_68 = (tmpvar_66 + ((tmpvar_70 * fOscillation_73) * _ST_WindBranch.y));
      highp vec4 tmpvar_79;
      tmpvar_79.zw = vec2(0.0, 0.0);
      tmpvar_79.x = ((tmpvar_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_79.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_80;
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      tmpvar_80 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((
        ((tmpvar_80.x * tmpvar_80.y) * tmpvar_80.x)
       * tmpvar_80.y) * _ST_WindTurbulences.x));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_72.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_68 = (vPos_68 + ((
        ((vRotatedBranchAnchor_16 - vPos_68) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_67 = vPos_68;
    } else {
      highp vec3 vPos_82;
      vPos_82 = vPos_67;
      highp vec3 tmpvar_83;
      tmpvar_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_84;
      tmpvar_84 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_85;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (tmpvar_84 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((tmpvar_84 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_84 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_85 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_85.y * vOscillations_85.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      vPos_82 = (vPos_67 + ((tmpvar_83 * 
        (((mix (
          mix (tmpvar_90, fTarget_87, fAmount_86)
        , fTarget_87, fAmount_86) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_85.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_67 = vPos_82;
    };
    FinalPosition_18 = vPos_67;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_18;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_95.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    vPos_91.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_96.x + (tmpvar_96.y * tmpvar_96.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_92)));
    vPos_91 = (normalize(vPos_91) * fLength_93);
    FinalPosition_18 = vPos_91;
  };
  tmpvar_14.xyz = FinalPosition_18;
  highp vec4 tmpvar_98;
  tmpvar_98 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_99;
  highp vec4 tmpvar_100;
  tmpvar_100 = (tmpvar_98 * 0.5);
  highp vec2 tmpvar_101;
  tmpvar_101.x = tmpvar_100.x;
  tmpvar_101.y = (tmpvar_100.y * _ProjectionParams.x);
  o_99.xy = (tmpvar_101 + tmpvar_100.w);
  o_99.zw = tmpvar_98.zw;
  highp vec3 tmpvar_102;
  tmpvar_102 = o_99.xyw;
  tmpvar_8 = tmpvar_102;
  highp vec2 tmpvar_103;
  tmpvar_103 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_103;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_104;
  v_104.x = _World2Object[0].x;
  v_104.y = _World2Object[1].x;
  v_104.z = _World2Object[2].x;
  v_104.w = _World2Object[3].x;
  highp vec4 v_105;
  v_105.x = _World2Object[0].y;
  v_105.y = _World2Object[1].y;
  v_105.z = _World2Object[2].y;
  v_105.w = _World2Object[3].y;
  highp vec4 v_106;
  v_106.x = _World2Object[0].z;
  v_106.y = _World2Object[1].z;
  v_106.z = _World2Object[2].z;
  v_106.w = _World2Object[3].z;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize(((
    (v_104.xyz * tmpvar_15.x)
   + 
    (v_105.xyz * tmpvar_15.y)
  ) + (v_106.xyz * tmpvar_15.z)));
  worldNormal_3 = tmpvar_107;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_11 = tmpvar_19;
  lowp float x_20;
  x_20 = (tmpvar_11 - _Cutoff);
  if ((x_20 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_21 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_21.x, max (tmpvar_21.y, tmpvar_21.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_22;
  tmpvar_22 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  tmpvar_10 = tmpvar_22;
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_24;
  tmpvar_24 = (_LightMatrix0 * tmpvar_23);
  lightCoord_5 = tmpvar_24;
  lowp vec4 tmpvar_25;
  mediump vec2 P_26;
  P_26 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_25 = texture2D (_LightTexture0, P_26);
  mediump float tmpvar_27;
  tmpvar_27 = dot (lightCoord_5.xyz, lightCoord_5.xyz);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_LightTextureB0, vec2(tmpvar_27));
  mediump float tmpvar_29;
  tmpvar_29 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_25.w) * tmpvar_28.w);
  atten_4 = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_30;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_33 = tmpvar_34;
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tmpvar_10 * tmpvar_1) * diff_33);
  c_32.xyz = tmpvar_35;
  c_32.w = tmpvar_11;
  c_31.w = c_32.w;
  mediump vec3 tmpvar_36;
  tmpvar_36 = c_32.xyz;
  c_31.xyz = tmpvar_36;
  c_3.xyz = c_31.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_13;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_22;
  tmpvar_22 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_18 = tmpvar_22;
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_23;
    tmpvar_23 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_24;
    isBestWind_24 = (tmpvar_19 == 4.0);
    bool bLeaf2_25;
    bLeaf2_25 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    highp vec3 vDirection_27;
    vDirection_27 = tmpvar_2;
    highp float tmpvar_28;
    if (bLeaf2_25) {
      tmpvar_28 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_29;
    if (bLeaf2_25) {
      tmpvar_29 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_30;
    highp vec4 tmpvar_31;
    tmpvar_31.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_31.x = (tmpvar_28 + tmpvar_23);
    highp vec4 tmpvar_32;
    tmpvar_32 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    vPos_30 = (tmpvar_22 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_29 * (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_27 = tmpvar_2;
    vPos_26 = vPos_30;
    if (isBestWind_24) {
      highp vec3 tmpvar_33;
      tmpvar_33 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_34;
      if (bLeaf2_25) {
        tmpvar_34 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_35;
      if (bLeaf2_25) {
        tmpvar_35 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_36;
      if (bLeaf2_25) {
        tmpvar_36 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_37;
      if (bLeaf2_25) {
        tmpvar_37 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_38;
      if (bLeaf2_25) {
        tmpvar_38 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_38 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_39;
      if (bLeaf2_25) {
        tmpvar_39 = bool(1);
      } else {
        tmpvar_39 = bool(1);
      };
      highp float fTwitch_40;
      highp vec3 vAxis_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_34 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_34 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_34 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_34 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_30, vPos_30));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_36) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) + (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) - (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_33.z) * tmpvar_33.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_33.yzx * vRotatedWindVector_17.zxy) - (tmpvar_33.zxy * vRotatedWindVector_17.yzx));
      vAxis_41.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_17, tmpvar_33), -1.0, 1.0);
      vAxis_41.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_41);
      vAxis_41 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_56;
      tmpvar_56 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_40 = 0.0;
      if (tmpvar_39) {
        highp float fTime_57;
        fTime_57 = (tmpvar_38.z + tmpvar_43);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_40 = (tmpvar_38.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_38.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_37)
       + 
        (tmpvar_56 * tmpvar_35)
      ) + fTwitch_40));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_51 * tmpvar_64);
      vDirection_27 = (tmpvar_65 * _glesNormal);
      vPos_26 = (normalize((tmpvar_65 * vPos_30)) * tmpvar_47);
    };
    tmpvar_15 = vDirection_27;
    FinalPosition_18 = vPos_26;
  };
  highp vec3 tmpvar_66;
  tmpvar_66 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  FinalPosition_18 = tmpvar_66;
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_67;
    vPos_67 = tmpvar_66;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_68;
      vPos_68 = tmpvar_66;
      highp float fAdherenceScale_69;
      highp vec3 tmpvar_70;
      tmpvar_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_71;
      tmpvar_71 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_72;
      highp float fOscillation_73;
      fOscillation_73 = 1.0;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.x = (tmpvar_71 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((tmpvar_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_71 + _glesMultiTexCoord0.w));
      tmpvar_76.w = ((tmpvar_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_72 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_72.y * vOscillations_72.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      fOscillation_73 = (((
        (mix (mix (tmpvar_78, fTarget_75, fAmount_74), fTarget_75, fAmount_74) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_72.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_72.w * _ST_WindBranchWhip.x)));
      vPos_68 = (tmpvar_66 + ((tmpvar_70 * fOscillation_73) * _ST_WindBranch.y));
      highp vec4 tmpvar_79;
      tmpvar_79.zw = vec2(0.0, 0.0);
      tmpvar_79.x = ((tmpvar_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_79.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_80;
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      tmpvar_80 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((
        ((tmpvar_80.x * tmpvar_80.y) * tmpvar_80.x)
       * tmpvar_80.y) * _ST_WindTurbulences.x));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_72.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_68 = (vPos_68 + ((
        ((vRotatedBranchAnchor_16 - vPos_68) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_67 = vPos_68;
    } else {
      highp vec3 vPos_82;
      vPos_82 = vPos_67;
      highp vec3 tmpvar_83;
      tmpvar_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_84;
      tmpvar_84 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_85;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (tmpvar_84 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((tmpvar_84 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_84 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_85 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_85.y * vOscillations_85.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      vPos_82 = (vPos_67 + ((tmpvar_83 * 
        (((mix (
          mix (tmpvar_90, fTarget_87, fAmount_86)
        , fTarget_87, fAmount_86) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_85.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_67 = vPos_82;
    };
    FinalPosition_18 = vPos_67;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_18;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_95.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    vPos_91.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_96.x + (tmpvar_96.y * tmpvar_96.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_92)));
    vPos_91 = (normalize(vPos_91) * fLength_93);
    FinalPosition_18 = vPos_91;
  };
  tmpvar_14.xyz = FinalPosition_18;
  highp vec4 tmpvar_98;
  tmpvar_98 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_99;
  highp vec4 tmpvar_100;
  tmpvar_100 = (tmpvar_98 * 0.5);
  highp vec2 tmpvar_101;
  tmpvar_101.x = tmpvar_100.x;
  tmpvar_101.y = (tmpvar_100.y * _ProjectionParams.x);
  o_99.xy = (tmpvar_101 + tmpvar_100.w);
  o_99.zw = tmpvar_98.zw;
  highp vec3 tmpvar_102;
  tmpvar_102 = o_99.xyw;
  tmpvar_8 = tmpvar_102;
  highp vec2 tmpvar_103;
  tmpvar_103 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_103;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_104;
  v_104.x = _World2Object[0].x;
  v_104.y = _World2Object[1].x;
  v_104.z = _World2Object[2].x;
  v_104.w = _World2Object[3].x;
  highp vec4 v_105;
  v_105.x = _World2Object[0].y;
  v_105.y = _World2Object[1].y;
  v_105.z = _World2Object[2].y;
  v_105.w = _World2Object[3].y;
  highp vec4 v_106;
  v_106.x = _World2Object[0].z;
  v_106.y = _World2Object[1].z;
  v_106.z = _World2Object[2].z;
  v_106.w = _World2Object[3].z;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize(((
    (v_104.xyz * tmpvar_15.x)
   + 
    (v_105.xyz * tmpvar_15.y)
  ) + (v_106.xyz * tmpvar_15.z)));
  worldNormal_3 = tmpvar_107;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_11 = tmpvar_19;
  lowp float x_20;
  x_20 = (tmpvar_11 - _Cutoff);
  if ((x_20 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_21 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_21.x, max (tmpvar_21.y, tmpvar_21.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_22;
  tmpvar_22 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  tmpvar_10 = tmpvar_22;
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_24;
  tmpvar_24 = (_LightMatrix0 * tmpvar_23);
  lightCoord_5 = tmpvar_24;
  lowp vec4 tmpvar_25;
  mediump vec2 P_26;
  P_26 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_25 = texture (_LightTexture0, P_26);
  mediump float tmpvar_27;
  tmpvar_27 = dot (lightCoord_5.xyz, lightCoord_5.xyz);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture (_LightTextureB0, vec2(tmpvar_27));
  mediump float tmpvar_29;
  tmpvar_29 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_25.w) * tmpvar_28.w);
  atten_4 = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_30;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_33 = tmpvar_34;
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tmpvar_10 * tmpvar_1) * diff_33);
  c_32.xyz = tmpvar_35;
  c_32.w = tmpvar_11;
  c_31.w = c_32.w;
  mediump vec3 tmpvar_36;
  tmpvar_36 = c_32.xyz;
  c_31.xyz = tmpvar_36;
  c_3.xyz = c_31.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_13;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_22;
  tmpvar_22 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_18 = tmpvar_22;
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_23;
    tmpvar_23 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_24;
    isBestWind_24 = (tmpvar_19 == 4.0);
    bool bLeaf2_25;
    bLeaf2_25 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    highp vec3 vDirection_27;
    vDirection_27 = tmpvar_2;
    highp float tmpvar_28;
    if (bLeaf2_25) {
      tmpvar_28 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_29;
    if (bLeaf2_25) {
      tmpvar_29 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_30;
    highp vec4 tmpvar_31;
    tmpvar_31.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_31.x = (tmpvar_28 + tmpvar_23);
    highp vec4 tmpvar_32;
    tmpvar_32 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    vPos_30 = (tmpvar_22 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_29 * (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_27 = tmpvar_2;
    vPos_26 = vPos_30;
    if (isBestWind_24) {
      highp vec3 tmpvar_33;
      tmpvar_33 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_34;
      if (bLeaf2_25) {
        tmpvar_34 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_35;
      if (bLeaf2_25) {
        tmpvar_35 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_36;
      if (bLeaf2_25) {
        tmpvar_36 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_37;
      if (bLeaf2_25) {
        tmpvar_37 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_38;
      if (bLeaf2_25) {
        tmpvar_38 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_38 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_39;
      if (bLeaf2_25) {
        tmpvar_39 = bool(1);
      } else {
        tmpvar_39 = bool(1);
      };
      highp float fTwitch_40;
      highp vec3 vAxis_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_34 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_34 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_34 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_34 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_30, vPos_30));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_36) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) + (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) - (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_33.z) * tmpvar_33.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_33.yzx * vRotatedWindVector_17.zxy) - (tmpvar_33.zxy * vRotatedWindVector_17.yzx));
      vAxis_41.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_17, tmpvar_33), -1.0, 1.0);
      vAxis_41.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_41);
      vAxis_41 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_56;
      tmpvar_56 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_40 = 0.0;
      if (tmpvar_39) {
        highp float fTime_57;
        fTime_57 = (tmpvar_38.z + tmpvar_43);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_40 = (tmpvar_38.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_38.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_37)
       + 
        (tmpvar_56 * tmpvar_35)
      ) + fTwitch_40));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_51 * tmpvar_64);
      vDirection_27 = (tmpvar_65 * _glesNormal);
      vPos_26 = (normalize((tmpvar_65 * vPos_30)) * tmpvar_47);
    };
    tmpvar_15 = vDirection_27;
    FinalPosition_18 = vPos_26;
  };
  highp vec3 tmpvar_66;
  tmpvar_66 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  FinalPosition_18 = tmpvar_66;
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_67;
    vPos_67 = tmpvar_66;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_68;
      vPos_68 = tmpvar_66;
      highp float fAdherenceScale_69;
      highp vec3 tmpvar_70;
      tmpvar_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_71;
      tmpvar_71 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_72;
      highp float fOscillation_73;
      fOscillation_73 = 1.0;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.x = (tmpvar_71 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((tmpvar_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_71 + _glesMultiTexCoord0.w));
      tmpvar_76.w = ((tmpvar_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_72 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_72.y * vOscillations_72.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      fOscillation_73 = (((
        (mix (mix (tmpvar_78, fTarget_75, fAmount_74), fTarget_75, fAmount_74) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_72.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_72.w * _ST_WindBranchWhip.x)));
      vPos_68 = (tmpvar_66 + ((tmpvar_70 * fOscillation_73) * _ST_WindBranch.y));
      highp vec4 tmpvar_79;
      tmpvar_79.zw = vec2(0.0, 0.0);
      tmpvar_79.x = ((tmpvar_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_79.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_80;
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      tmpvar_80 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((
        ((tmpvar_80.x * tmpvar_80.y) * tmpvar_80.x)
       * tmpvar_80.y) * _ST_WindTurbulences.x));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_72.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_68 = (vPos_68 + ((
        ((vRotatedBranchAnchor_16 - vPos_68) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_67 = vPos_68;
    } else {
      highp vec3 vPos_82;
      vPos_82 = vPos_67;
      highp vec3 tmpvar_83;
      tmpvar_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_84;
      tmpvar_84 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_85;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (tmpvar_84 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((tmpvar_84 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_84 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_85 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_85.y * vOscillations_85.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      vPos_82 = (vPos_67 + ((tmpvar_83 * 
        (((mix (
          mix (tmpvar_90, fTarget_87, fAmount_86)
        , fTarget_87, fAmount_86) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_85.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_67 = vPos_82;
    };
    FinalPosition_18 = vPos_67;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_18;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_95.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    vPos_91.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_96.x + (tmpvar_96.y * tmpvar_96.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_92)));
    vPos_91 = (normalize(vPos_91) * fLength_93);
    FinalPosition_18 = vPos_91;
  };
  tmpvar_14.xyz = FinalPosition_18;
  highp vec4 tmpvar_98;
  tmpvar_98 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_99;
  highp vec4 tmpvar_100;
  tmpvar_100 = (tmpvar_98 * 0.5);
  highp vec2 tmpvar_101;
  tmpvar_101.x = tmpvar_100.x;
  tmpvar_101.y = (tmpvar_100.y * _ProjectionParams.x);
  o_99.xy = (tmpvar_101 + tmpvar_100.w);
  o_99.zw = tmpvar_98.zw;
  highp vec3 tmpvar_102;
  tmpvar_102 = o_99.xyw;
  tmpvar_8 = tmpvar_102;
  highp vec2 tmpvar_103;
  tmpvar_103 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_103;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_104;
  v_104.x = _World2Object[0].x;
  v_104.y = _World2Object[1].x;
  v_104.z = _World2Object[2].x;
  v_104.w = _World2Object[3].x;
  highp vec4 v_105;
  v_105.x = _World2Object[0].y;
  v_105.y = _World2Object[1].y;
  v_105.z = _World2Object[2].y;
  v_105.w = _World2Object[3].y;
  highp vec4 v_106;
  v_106.x = _World2Object[0].z;
  v_106.y = _World2Object[1].z;
  v_106.z = _World2Object[2].z;
  v_106.w = _World2Object[3].z;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize(((
    (v_104.xyz * tmpvar_15.x)
   + 
    (v_105.xyz * tmpvar_15.y)
  ) + (v_106.xyz * tmpvar_15.z)));
  worldNormal_3 = tmpvar_107;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_23;
  tmpvar_23 = (_LightMatrix0 * tmpvar_22).xyz;
  lightCoord_4 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_25;
  tmpvar_25 = (texture2D (_LightTextureB0, vec2(tmpvar_24)).w * textureCube (_LightTexture0, lightCoord_4).w);
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_26;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_25);
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_29 = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tmpvar_9 * tmpvar_1) * diff_29);
  c_28.xyz = tmpvar_31;
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  mediump vec3 tmpvar_32;
  tmpvar_32 = c_28.xyz;
  c_27.xyz = tmpvar_32;
  c_3.xyz = c_27.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_13;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_22;
  tmpvar_22 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_18 = tmpvar_22;
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_23;
    tmpvar_23 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_24;
    isBestWind_24 = (tmpvar_19 == 4.0);
    bool bLeaf2_25;
    bLeaf2_25 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    highp vec3 vDirection_27;
    vDirection_27 = tmpvar_2;
    highp float tmpvar_28;
    if (bLeaf2_25) {
      tmpvar_28 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_29;
    if (bLeaf2_25) {
      tmpvar_29 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_30;
    highp vec4 tmpvar_31;
    tmpvar_31.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_31.x = (tmpvar_28 + tmpvar_23);
    highp vec4 tmpvar_32;
    tmpvar_32 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    vPos_30 = (tmpvar_22 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_29 * (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_27 = tmpvar_2;
    vPos_26 = vPos_30;
    if (isBestWind_24) {
      highp vec3 tmpvar_33;
      tmpvar_33 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_34;
      if (bLeaf2_25) {
        tmpvar_34 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_35;
      if (bLeaf2_25) {
        tmpvar_35 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_36;
      if (bLeaf2_25) {
        tmpvar_36 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_37;
      if (bLeaf2_25) {
        tmpvar_37 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_38;
      if (bLeaf2_25) {
        tmpvar_38 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_38 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_39;
      if (bLeaf2_25) {
        tmpvar_39 = bool(1);
      } else {
        tmpvar_39 = bool(1);
      };
      highp float fTwitch_40;
      highp vec3 vAxis_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_34 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_34 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_34 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_34 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_30, vPos_30));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_36) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) + (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) - (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_33.z) * tmpvar_33.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_33.yzx * vRotatedWindVector_17.zxy) - (tmpvar_33.zxy * vRotatedWindVector_17.yzx));
      vAxis_41.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_17, tmpvar_33), -1.0, 1.0);
      vAxis_41.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_41);
      vAxis_41 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_56;
      tmpvar_56 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_40 = 0.0;
      if (tmpvar_39) {
        highp float fTime_57;
        fTime_57 = (tmpvar_38.z + tmpvar_43);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_40 = (tmpvar_38.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_38.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_37)
       + 
        (tmpvar_56 * tmpvar_35)
      ) + fTwitch_40));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_51 * tmpvar_64);
      vDirection_27 = (tmpvar_65 * _glesNormal);
      vPos_26 = (normalize((tmpvar_65 * vPos_30)) * tmpvar_47);
    };
    tmpvar_15 = vDirection_27;
    FinalPosition_18 = vPos_26;
  };
  highp vec3 tmpvar_66;
  tmpvar_66 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  FinalPosition_18 = tmpvar_66;
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_67;
    vPos_67 = tmpvar_66;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_68;
      vPos_68 = tmpvar_66;
      highp float fAdherenceScale_69;
      highp vec3 tmpvar_70;
      tmpvar_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_71;
      tmpvar_71 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_72;
      highp float fOscillation_73;
      fOscillation_73 = 1.0;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.x = (tmpvar_71 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((tmpvar_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_71 + _glesMultiTexCoord0.w));
      tmpvar_76.w = ((tmpvar_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_72 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_72.y * vOscillations_72.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      fOscillation_73 = (((
        (mix (mix (tmpvar_78, fTarget_75, fAmount_74), fTarget_75, fAmount_74) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_72.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_72.w * _ST_WindBranchWhip.x)));
      vPos_68 = (tmpvar_66 + ((tmpvar_70 * fOscillation_73) * _ST_WindBranch.y));
      highp vec4 tmpvar_79;
      tmpvar_79.zw = vec2(0.0, 0.0);
      tmpvar_79.x = ((tmpvar_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_79.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_80;
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      tmpvar_80 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((
        ((tmpvar_80.x * tmpvar_80.y) * tmpvar_80.x)
       * tmpvar_80.y) * _ST_WindTurbulences.x));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_72.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_68 = (vPos_68 + ((
        ((vRotatedBranchAnchor_16 - vPos_68) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_67 = vPos_68;
    } else {
      highp vec3 vPos_82;
      vPos_82 = vPos_67;
      highp vec3 tmpvar_83;
      tmpvar_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_84;
      tmpvar_84 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_85;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (tmpvar_84 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((tmpvar_84 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_84 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_85 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_85.y * vOscillations_85.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      vPos_82 = (vPos_67 + ((tmpvar_83 * 
        (((mix (
          mix (tmpvar_90, fTarget_87, fAmount_86)
        , fTarget_87, fAmount_86) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_85.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_67 = vPos_82;
    };
    FinalPosition_18 = vPos_67;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_18;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_95.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    vPos_91.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_96.x + (tmpvar_96.y * tmpvar_96.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_92)));
    vPos_91 = (normalize(vPos_91) * fLength_93);
    FinalPosition_18 = vPos_91;
  };
  tmpvar_14.xyz = FinalPosition_18;
  highp vec4 tmpvar_98;
  tmpvar_98 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_99;
  highp vec4 tmpvar_100;
  tmpvar_100 = (tmpvar_98 * 0.5);
  highp vec2 tmpvar_101;
  tmpvar_101.x = tmpvar_100.x;
  tmpvar_101.y = (tmpvar_100.y * _ProjectionParams.x);
  o_99.xy = (tmpvar_101 + tmpvar_100.w);
  o_99.zw = tmpvar_98.zw;
  highp vec3 tmpvar_102;
  tmpvar_102 = o_99.xyw;
  tmpvar_8 = tmpvar_102;
  highp vec2 tmpvar_103;
  tmpvar_103 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_103;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_104;
  v_104.x = _World2Object[0].x;
  v_104.y = _World2Object[1].x;
  v_104.z = _World2Object[2].x;
  v_104.w = _World2Object[3].x;
  highp vec4 v_105;
  v_105.x = _World2Object[0].y;
  v_105.y = _World2Object[1].y;
  v_105.z = _World2Object[2].y;
  v_105.w = _World2Object[3].y;
  highp vec4 v_106;
  v_106.x = _World2Object[0].z;
  v_106.y = _World2Object[1].z;
  v_106.z = _World2Object[2].z;
  v_106.w = _World2Object[3].z;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize(((
    (v_104.xyz * tmpvar_15.x)
   + 
    (v_105.xyz * tmpvar_15.y)
  ) + (v_106.xyz * tmpvar_15.z)));
  worldNormal_3 = tmpvar_107;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_23;
  tmpvar_23 = (_LightMatrix0 * tmpvar_22).xyz;
  lightCoord_4 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_25;
  tmpvar_25 = (texture (_LightTextureB0, vec2(tmpvar_24)).w * texture (_LightTexture0, lightCoord_4).w);
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_26;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_25);
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_29 = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tmpvar_9 * tmpvar_1) * diff_29);
  c_28.xyz = tmpvar_31;
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  mediump vec3 tmpvar_32;
  tmpvar_32 = c_28.xyz;
  c_27.xyz = tmpvar_32;
  c_3.xyz = c_27.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_13;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_22;
  tmpvar_22 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_18 = tmpvar_22;
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_23;
    tmpvar_23 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_24;
    isBestWind_24 = (tmpvar_19 == 4.0);
    bool bLeaf2_25;
    bLeaf2_25 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    highp vec3 vDirection_27;
    vDirection_27 = tmpvar_2;
    highp float tmpvar_28;
    if (bLeaf2_25) {
      tmpvar_28 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_29;
    if (bLeaf2_25) {
      tmpvar_29 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_30;
    highp vec4 tmpvar_31;
    tmpvar_31.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_31.x = (tmpvar_28 + tmpvar_23);
    highp vec4 tmpvar_32;
    tmpvar_32 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    vPos_30 = (tmpvar_22 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_29 * (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_27 = tmpvar_2;
    vPos_26 = vPos_30;
    if (isBestWind_24) {
      highp vec3 tmpvar_33;
      tmpvar_33 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_34;
      if (bLeaf2_25) {
        tmpvar_34 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_35;
      if (bLeaf2_25) {
        tmpvar_35 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_36;
      if (bLeaf2_25) {
        tmpvar_36 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_37;
      if (bLeaf2_25) {
        tmpvar_37 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_38;
      if (bLeaf2_25) {
        tmpvar_38 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_38 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_39;
      if (bLeaf2_25) {
        tmpvar_39 = bool(1);
      } else {
        tmpvar_39 = bool(1);
      };
      highp float fTwitch_40;
      highp vec3 vAxis_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_34 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_34 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_34 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_34 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_30, vPos_30));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_36) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) + (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) - (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_33.z) * tmpvar_33.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_33.yzx * vRotatedWindVector_17.zxy) - (tmpvar_33.zxy * vRotatedWindVector_17.yzx));
      vAxis_41.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_17, tmpvar_33), -1.0, 1.0);
      vAxis_41.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_41);
      vAxis_41 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_56;
      tmpvar_56 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_40 = 0.0;
      if (tmpvar_39) {
        highp float fTime_57;
        fTime_57 = (tmpvar_38.z + tmpvar_43);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_40 = (tmpvar_38.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_38.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_37)
       + 
        (tmpvar_56 * tmpvar_35)
      ) + fTwitch_40));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_51 * tmpvar_64);
      vDirection_27 = (tmpvar_65 * _glesNormal);
      vPos_26 = (normalize((tmpvar_65 * vPos_30)) * tmpvar_47);
    };
    tmpvar_15 = vDirection_27;
    FinalPosition_18 = vPos_26;
  };
  highp vec3 tmpvar_66;
  tmpvar_66 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  FinalPosition_18 = tmpvar_66;
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_67;
    vPos_67 = tmpvar_66;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_68;
      vPos_68 = tmpvar_66;
      highp float fAdherenceScale_69;
      highp vec3 tmpvar_70;
      tmpvar_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_71;
      tmpvar_71 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_72;
      highp float fOscillation_73;
      fOscillation_73 = 1.0;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.x = (tmpvar_71 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((tmpvar_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_71 + _glesMultiTexCoord0.w));
      tmpvar_76.w = ((tmpvar_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_72 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_72.y * vOscillations_72.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      fOscillation_73 = (((
        (mix (mix (tmpvar_78, fTarget_75, fAmount_74), fTarget_75, fAmount_74) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_72.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_72.w * _ST_WindBranchWhip.x)));
      vPos_68 = (tmpvar_66 + ((tmpvar_70 * fOscillation_73) * _ST_WindBranch.y));
      highp vec4 tmpvar_79;
      tmpvar_79.zw = vec2(0.0, 0.0);
      tmpvar_79.x = ((tmpvar_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_79.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_80;
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      tmpvar_80 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((
        ((tmpvar_80.x * tmpvar_80.y) * tmpvar_80.x)
       * tmpvar_80.y) * _ST_WindTurbulences.x));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_72.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_68 = (vPos_68 + ((
        ((vRotatedBranchAnchor_16 - vPos_68) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_67 = vPos_68;
    } else {
      highp vec3 vPos_82;
      vPos_82 = vPos_67;
      highp vec3 tmpvar_83;
      tmpvar_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_84;
      tmpvar_84 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_85;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (tmpvar_84 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((tmpvar_84 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_84 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_85 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_85.y * vOscillations_85.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      vPos_82 = (vPos_67 + ((tmpvar_83 * 
        (((mix (
          mix (tmpvar_90, fTarget_87, fAmount_86)
        , fTarget_87, fAmount_86) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_85.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_67 = vPos_82;
    };
    FinalPosition_18 = vPos_67;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_18;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_95.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    vPos_91.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_96.x + (tmpvar_96.y * tmpvar_96.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_92)));
    vPos_91 = (normalize(vPos_91) * fLength_93);
    FinalPosition_18 = vPos_91;
  };
  tmpvar_14.xyz = FinalPosition_18;
  highp vec4 tmpvar_98;
  tmpvar_98 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_99;
  highp vec4 tmpvar_100;
  tmpvar_100 = (tmpvar_98 * 0.5);
  highp vec2 tmpvar_101;
  tmpvar_101.x = tmpvar_100.x;
  tmpvar_101.y = (tmpvar_100.y * _ProjectionParams.x);
  o_99.xy = (tmpvar_101 + tmpvar_100.w);
  o_99.zw = tmpvar_98.zw;
  highp vec3 tmpvar_102;
  tmpvar_102 = o_99.xyw;
  tmpvar_8 = tmpvar_102;
  highp vec2 tmpvar_103;
  tmpvar_103 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_103;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_104;
  v_104.x = _World2Object[0].x;
  v_104.y = _World2Object[1].x;
  v_104.z = _World2Object[2].x;
  v_104.w = _World2Object[3].x;
  highp vec4 v_105;
  v_105.x = _World2Object[0].y;
  v_105.y = _World2Object[1].y;
  v_105.z = _World2Object[2].y;
  v_105.w = _World2Object[3].y;
  highp vec4 v_106;
  v_106.x = _World2Object[0].z;
  v_106.y = _World2Object[1].z;
  v_106.z = _World2Object[2].z;
  v_106.w = _World2Object[3].z;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize(((
    (v_104.xyz * tmpvar_15.x)
   + 
    (v_105.xyz * tmpvar_15.y)
  ) + (v_106.xyz * tmpvar_15.z)));
  worldNormal_3 = tmpvar_107;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec2 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_23;
  tmpvar_23 = (_LightMatrix0 * tmpvar_22).xy;
  lightCoord_4 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = texture2D (_LightTexture0, lightCoord_4).w;
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_25;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_24);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_28 = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tmpvar_9 * tmpvar_1) * diff_28);
  c_27.xyz = tmpvar_30;
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  mediump vec3 tmpvar_31;
  tmpvar_31 = c_27.xyz;
  c_26.xyz = tmpvar_31;
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_13;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_22;
  tmpvar_22 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_18 = tmpvar_22;
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_23;
    tmpvar_23 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_24;
    isBestWind_24 = (tmpvar_19 == 4.0);
    bool bLeaf2_25;
    bLeaf2_25 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    highp vec3 vDirection_27;
    vDirection_27 = tmpvar_2;
    highp float tmpvar_28;
    if (bLeaf2_25) {
      tmpvar_28 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_29;
    if (bLeaf2_25) {
      tmpvar_29 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_30;
    highp vec4 tmpvar_31;
    tmpvar_31.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_31.x = (tmpvar_28 + tmpvar_23);
    highp vec4 tmpvar_32;
    tmpvar_32 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    vPos_30 = (tmpvar_22 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_29 * (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_27 = tmpvar_2;
    vPos_26 = vPos_30;
    if (isBestWind_24) {
      highp vec3 tmpvar_33;
      tmpvar_33 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_34;
      if (bLeaf2_25) {
        tmpvar_34 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_35;
      if (bLeaf2_25) {
        tmpvar_35 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_36;
      if (bLeaf2_25) {
        tmpvar_36 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_37;
      if (bLeaf2_25) {
        tmpvar_37 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_38;
      if (bLeaf2_25) {
        tmpvar_38 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_38 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_39;
      if (bLeaf2_25) {
        tmpvar_39 = bool(1);
      } else {
        tmpvar_39 = bool(1);
      };
      highp float fTwitch_40;
      highp vec3 vAxis_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_34 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_34 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_34 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_34 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_30, vPos_30));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_36) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) + (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) - (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_33.z) * tmpvar_33.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_33.yzx * vRotatedWindVector_17.zxy) - (tmpvar_33.zxy * vRotatedWindVector_17.yzx));
      vAxis_41.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_17, tmpvar_33), -1.0, 1.0);
      vAxis_41.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_41);
      vAxis_41 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_56;
      tmpvar_56 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_40 = 0.0;
      if (tmpvar_39) {
        highp float fTime_57;
        fTime_57 = (tmpvar_38.z + tmpvar_43);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_40 = (tmpvar_38.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_38.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_37)
       + 
        (tmpvar_56 * tmpvar_35)
      ) + fTwitch_40));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_51 * tmpvar_64);
      vDirection_27 = (tmpvar_65 * _glesNormal);
      vPos_26 = (normalize((tmpvar_65 * vPos_30)) * tmpvar_47);
    };
    tmpvar_15 = vDirection_27;
    FinalPosition_18 = vPos_26;
  };
  highp vec3 tmpvar_66;
  tmpvar_66 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  FinalPosition_18 = tmpvar_66;
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_67;
    vPos_67 = tmpvar_66;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_68;
      vPos_68 = tmpvar_66;
      highp float fAdherenceScale_69;
      highp vec3 tmpvar_70;
      tmpvar_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_71;
      tmpvar_71 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_72;
      highp float fOscillation_73;
      fOscillation_73 = 1.0;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.x = (tmpvar_71 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((tmpvar_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_71 + _glesMultiTexCoord0.w));
      tmpvar_76.w = ((tmpvar_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_72 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_72.y * vOscillations_72.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      fOscillation_73 = (((
        (mix (mix (tmpvar_78, fTarget_75, fAmount_74), fTarget_75, fAmount_74) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_72.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_72.w * _ST_WindBranchWhip.x)));
      vPos_68 = (tmpvar_66 + ((tmpvar_70 * fOscillation_73) * _ST_WindBranch.y));
      highp vec4 tmpvar_79;
      tmpvar_79.zw = vec2(0.0, 0.0);
      tmpvar_79.x = ((tmpvar_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_79.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_80;
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      tmpvar_80 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((
        ((tmpvar_80.x * tmpvar_80.y) * tmpvar_80.x)
       * tmpvar_80.y) * _ST_WindTurbulences.x));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_72.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_68 = (vPos_68 + ((
        ((vRotatedBranchAnchor_16 - vPos_68) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_67 = vPos_68;
    } else {
      highp vec3 vPos_82;
      vPos_82 = vPos_67;
      highp vec3 tmpvar_83;
      tmpvar_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_84;
      tmpvar_84 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_85;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (tmpvar_84 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((tmpvar_84 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_84 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_85 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_85.y * vOscillations_85.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      vPos_82 = (vPos_67 + ((tmpvar_83 * 
        (((mix (
          mix (tmpvar_90, fTarget_87, fAmount_86)
        , fTarget_87, fAmount_86) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_85.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_67 = vPos_82;
    };
    FinalPosition_18 = vPos_67;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_18;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_95.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    vPos_91.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_96.x + (tmpvar_96.y * tmpvar_96.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_92)));
    vPos_91 = (normalize(vPos_91) * fLength_93);
    FinalPosition_18 = vPos_91;
  };
  tmpvar_14.xyz = FinalPosition_18;
  highp vec4 tmpvar_98;
  tmpvar_98 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_99;
  highp vec4 tmpvar_100;
  tmpvar_100 = (tmpvar_98 * 0.5);
  highp vec2 tmpvar_101;
  tmpvar_101.x = tmpvar_100.x;
  tmpvar_101.y = (tmpvar_100.y * _ProjectionParams.x);
  o_99.xy = (tmpvar_101 + tmpvar_100.w);
  o_99.zw = tmpvar_98.zw;
  highp vec3 tmpvar_102;
  tmpvar_102 = o_99.xyw;
  tmpvar_8 = tmpvar_102;
  highp vec2 tmpvar_103;
  tmpvar_103 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_103;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_104;
  v_104.x = _World2Object[0].x;
  v_104.y = _World2Object[1].x;
  v_104.z = _World2Object[2].x;
  v_104.w = _World2Object[3].x;
  highp vec4 v_105;
  v_105.x = _World2Object[0].y;
  v_105.y = _World2Object[1].y;
  v_105.z = _World2Object[2].y;
  v_105.w = _World2Object[3].y;
  highp vec4 v_106;
  v_106.x = _World2Object[0].z;
  v_106.y = _World2Object[1].z;
  v_106.z = _World2Object[2].z;
  v_106.w = _World2Object[3].z;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize(((
    (v_104.xyz * tmpvar_15.x)
   + 
    (v_105.xyz * tmpvar_15.y)
  ) + (v_106.xyz * tmpvar_15.z)));
  worldNormal_3 = tmpvar_107;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec2 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_23;
  tmpvar_23 = (_LightMatrix0 * tmpvar_22).xy;
  lightCoord_4 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = texture (_LightTexture0, lightCoord_4).w;
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_25;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_24);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_28 = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tmpvar_9 * tmpvar_1) * diff_28);
  c_27.xyz = tmpvar_30;
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  mediump vec3 tmpvar_31;
  tmpvar_31 = c_27.xyz;
  c_26.xyz = tmpvar_31;
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_14;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_23;
  tmpvar_23 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_23;
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_24;
    tmpvar_24 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_25;
    isBestWind_25 = (tmpvar_20 == 4.0);
    bool bLeaf2_26;
    bLeaf2_26 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_27;
    vPos_27 = tmpvar_23;
    highp vec3 vDirection_28;
    vDirection_28 = tmpvar_2;
    highp float tmpvar_29;
    if (bLeaf2_26) {
      tmpvar_29 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_30;
    if (bLeaf2_26) {
      tmpvar_30 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_31;
    highp vec4 tmpvar_32;
    tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_32.x = (tmpvar_29 + tmpvar_24);
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    vPos_31 = (tmpvar_23 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_30 * (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_28 = tmpvar_2;
    vPos_27 = vPos_31;
    if (isBestWind_25) {
      highp vec3 tmpvar_34;
      tmpvar_34 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_35;
      if (bLeaf2_26) {
        tmpvar_35 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_36;
      if (bLeaf2_26) {
        tmpvar_36 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_37;
      if (bLeaf2_26) {
        tmpvar_37 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_38;
      if (bLeaf2_26) {
        tmpvar_38 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_39;
      if (bLeaf2_26) {
        tmpvar_39 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_39 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_40;
      if (bLeaf2_26) {
        tmpvar_40 = bool(1);
      } else {
        tmpvar_40 = bool(1);
      };
      highp float fTwitch_41;
      highp vec3 vAxis_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_35 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_35 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_35 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_35 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_31, vPos_31));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_37) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) + (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) - (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_34.z) * tmpvar_34.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_34.yzx * vRotatedWindVector_18.zxy) - (tmpvar_34.zxy * vRotatedWindVector_18.yzx));
      vAxis_42.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_18, tmpvar_34), -1.0, 1.0);
      vAxis_42.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_42);
      vAxis_42 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_57;
      tmpvar_57 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_41 = 0.0;
      if (tmpvar_40) {
        highp float fTime_58;
        fTime_58 = (tmpvar_39.z + tmpvar_44);
        highp vec4 tmpvar_59;
        tmpvar_59.zw = vec2(0.0, 0.0);
        tmpvar_59.x = fTime_58;
        tmpvar_59.y = (0.87 * fTime_58);
        highp vec4 tmpvar_60;
        highp vec4 tmpvar_61;
        tmpvar_61 = abs(((
          fract((tmpvar_59 + 0.5))
         * 2.0) - 1.0));
        tmpvar_60 = (((
          (tmpvar_61 * tmpvar_61)
         * 
          (3.0 - (2.0 * tmpvar_61))
        ) - 0.5) * 2.0);
        fTwitch_41 = (tmpvar_39.x * pow (clamp (
          ((((tmpvar_60.x * tmpvar_60.y) * tmpvar_60.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_39.y));
      };
      highp float fAngle_62;
      fAngle_62 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_38)
       + 
        (tmpvar_57 * tmpvar_36)
      ) + fTwitch_41));
      highp vec2 vSinCos_63;
      vSinCos_63.x = sin(fAngle_62);
      vSinCos_63.y = cos(fAngle_62);
      highp float tmpvar_64;
      tmpvar_64 = (1.0 - vSinCos_63.y);
      highp mat3 tmpvar_65;
      tmpvar_65[0].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_63.y);
      tmpvar_65[0].y = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[0].z = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[1].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[1].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_63.y);
      tmpvar_65[1].z = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[2].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].z = (((tmpvar_64 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_63.y);
      highp mat3 tmpvar_66;
      tmpvar_66 = (tmpvar_52 * tmpvar_65);
      vDirection_28 = (tmpvar_66 * _glesNormal);
      vPos_27 = (normalize((tmpvar_66 * vPos_31)) * tmpvar_48);
    };
    tmpvar_16 = vDirection_28;
    FinalPosition_19 = vPos_27;
  };
  highp vec3 tmpvar_67;
  tmpvar_67 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_67;
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_68;
    vPos_68 = tmpvar_67;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_69;
      vPos_69 = tmpvar_67;
      highp float fAdherenceScale_70;
      highp vec3 tmpvar_71;
      tmpvar_71 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_72;
      tmpvar_72 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_73;
      highp float fOscillation_74;
      fOscillation_74 = 1.0;
      highp float fAmount_75;
      highp float fTarget_76;
      highp vec4 tmpvar_77;
      tmpvar_77.x = (tmpvar_72 + _glesMultiTexCoord0.w);
      tmpvar_77.y = ((tmpvar_72 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_77.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_72 + _glesMultiTexCoord0.w));
      tmpvar_77.w = ((tmpvar_72 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      vOscillations_73 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      highp float tmpvar_79;
      tmpvar_79 = (vOscillations_73.y * vOscillations_73.z);
      fTarget_76 = 1.0;
      fAmount_75 = tmpvar_79;
      if ((tmpvar_79 < 0.0)) {
        fTarget_76 = -1.0;
        fAmount_75 = -(tmpvar_79);
      };
      fOscillation_74 = (((
        (mix (mix (tmpvar_79, fTarget_76, fAmount_75), fTarget_76, fAmount_75) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_73.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_73.w * _ST_WindBranchWhip.x)));
      vPos_69 = (tmpvar_67 + ((tmpvar_71 * fOscillation_74) * _ST_WindBranch.y));
      highp vec4 tmpvar_80;
      tmpvar_80.zw = vec2(0.0, 0.0);
      tmpvar_80.x = ((tmpvar_72 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_80.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_81;
      highp vec4 tmpvar_82;
      tmpvar_82 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      tmpvar_81 = (((
        (tmpvar_82 * tmpvar_82)
       * 
        (3.0 - (2.0 * tmpvar_82))
      ) - 0.5) * 2.0);
      fAdherenceScale_70 = (1.0 - ((
        ((tmpvar_81.x * tmpvar_81.y) * tmpvar_81.x)
       * tmpvar_81.y) * _ST_WindTurbulences.x));
      fAdherenceScale_70 = (fAdherenceScale_70 + ((vOscillations_73.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_69 = (vPos_69 + ((
        ((vRotatedBranchAnchor_17 - vPos_69) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_70) * _glesMultiTexCoord0.z));
      vPos_68 = vPos_69;
    } else {
      highp vec3 vPos_83;
      vPos_83 = vPos_68;
      highp vec3 tmpvar_84;
      tmpvar_84 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_85;
      tmpvar_85 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_86;
      highp float fAmount_87;
      highp float fTarget_88;
      highp vec4 tmpvar_89;
      tmpvar_89.w = 0.0;
      tmpvar_89.x = (tmpvar_85 + _glesMultiTexCoord0.w);
      tmpvar_89.y = ((tmpvar_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_89.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_90;
      tmpvar_90 = abs(((
        fract((tmpvar_89 + 0.5))
       * 2.0) - 1.0));
      vOscillations_86 = (((
        (tmpvar_90 * tmpvar_90)
       * 
        (3.0 - (2.0 * tmpvar_90))
      ) - 0.5) * 2.0);
      highp float tmpvar_91;
      tmpvar_91 = (vOscillations_86.y * vOscillations_86.z);
      fTarget_88 = 1.0;
      fAmount_87 = tmpvar_91;
      if ((tmpvar_91 < 0.0)) {
        fTarget_88 = -1.0;
        fAmount_87 = -(tmpvar_91);
      };
      vPos_83 = (vPos_68 + ((tmpvar_84 * 
        (((mix (
          mix (tmpvar_91, fTarget_88, fAmount_87)
        , fTarget_88, fAmount_87) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_86.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_68 = vPos_83;
    };
    FinalPosition_19 = vPos_68;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_92;
    vPos_92 = FinalPosition_19;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_96.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    vPos_92.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_97.x + (tmpvar_97.y * tmpvar_97.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_93)));
    vPos_92 = (normalize(vPos_92) * fLength_94);
    FinalPosition_19 = vPos_92;
  };
  tmpvar_15.xyz = FinalPosition_19;
  highp vec4 tmpvar_99;
  tmpvar_99 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = (tmpvar_99 * 0.5);
  highp vec2 tmpvar_102;
  tmpvar_102.x = tmpvar_101.x;
  tmpvar_102.y = (tmpvar_101.y * _ProjectionParams.x);
  o_100.xy = (tmpvar_102 + tmpvar_101.w);
  o_100.zw = tmpvar_99.zw;
  highp vec3 tmpvar_103;
  tmpvar_103 = o_100.xyw;
  tmpvar_9 = tmpvar_103;
  highp vec2 tmpvar_104;
  tmpvar_104 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_104;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_105;
  v_105.x = _World2Object[0].x;
  v_105.y = _World2Object[1].x;
  v_105.z = _World2Object[2].x;
  v_105.w = _World2Object[3].x;
  highp vec4 v_106;
  v_106.x = _World2Object[0].y;
  v_106.y = _World2Object[1].y;
  v_106.z = _World2Object[2].y;
  v_106.w = _World2Object[3].y;
  highp vec4 v_107;
  v_107.x = _World2Object[0].z;
  v_107.y = _World2Object[1].z;
  v_107.z = _World2Object[2].z;
  v_107.w = _World2Object[3].z;
  highp vec3 tmpvar_108;
  tmpvar_108 = normalize(((
    (v_105.xyz * tmpvar_16.x)
   + 
    (v_106.xyz * tmpvar_16.y)
  ) + (v_107.xyz * tmpvar_16.z)));
  worldNormal_5 = tmpvar_108;
  highp mat3 tmpvar_109;
  tmpvar_109[0] = _Object2World[0].xyz;
  tmpvar_109[1] = _Object2World[1].xyz;
  tmpvar_109[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_110;
  tmpvar_110 = normalize((tmpvar_109 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_110;
  lowp vec3 tmpvar_111;
  tmpvar_111 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_112;
  tmpvar_112 = (tmpvar_111 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_112;
  lowp vec3 tmpvar_113;
  tmpvar_113.x = worldTangent_4.x;
  tmpvar_113.y = worldBinormal_3.x;
  tmpvar_113.z = worldNormal_5.x;
  lowp vec3 tmpvar_114;
  tmpvar_114.x = worldTangent_4.y;
  tmpvar_114.y = worldBinormal_3.y;
  tmpvar_114.z = worldNormal_5.y;
  lowp vec3 tmpvar_115;
  tmpvar_115.x = worldTangent_4.z;
  tmpvar_115.y = worldBinormal_3.z;
  tmpvar_115.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_113;
  xlv_TEXCOORD1 = tmpvar_114;
  xlv_TEXCOORD2 = tmpvar_115;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec3 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_24;
  tmpvar_24 = (_LightMatrix0 * tmpvar_23).xyz;
  lightCoord_5 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (lightCoord_5, lightCoord_5);
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_LightTexture0, vec2(tmpvar_25)).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_22);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_22);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_22);
  lowp vec3 tmpvar_27;
  tmpvar_27 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_27;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_26);
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_30 = tmpvar_31;
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tmpvar_9 * tmpvar_1) * diff_30);
  c_29.xyz = tmpvar_32;
  c_29.w = tmpvar_10;
  c_28.w = c_29.w;
  mediump vec3 tmpvar_33;
  tmpvar_33 = c_29.xyz;
  c_28.xyz = tmpvar_33;
  c_4.xyz = c_28.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
in vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out lowp vec3 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out mediump vec4 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_14;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_23;
  tmpvar_23 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_23;
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_24;
    tmpvar_24 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_25;
    isBestWind_25 = (tmpvar_20 == 4.0);
    bool bLeaf2_26;
    bLeaf2_26 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_27;
    vPos_27 = tmpvar_23;
    highp vec3 vDirection_28;
    vDirection_28 = tmpvar_2;
    highp float tmpvar_29;
    if (bLeaf2_26) {
      tmpvar_29 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_30;
    if (bLeaf2_26) {
      tmpvar_30 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_31;
    highp vec4 tmpvar_32;
    tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_32.x = (tmpvar_29 + tmpvar_24);
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    vPos_31 = (tmpvar_23 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_30 * (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_28 = tmpvar_2;
    vPos_27 = vPos_31;
    if (isBestWind_25) {
      highp vec3 tmpvar_34;
      tmpvar_34 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_35;
      if (bLeaf2_26) {
        tmpvar_35 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_36;
      if (bLeaf2_26) {
        tmpvar_36 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_37;
      if (bLeaf2_26) {
        tmpvar_37 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_38;
      if (bLeaf2_26) {
        tmpvar_38 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_39;
      if (bLeaf2_26) {
        tmpvar_39 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_39 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_40;
      if (bLeaf2_26) {
        tmpvar_40 = bool(1);
      } else {
        tmpvar_40 = bool(1);
      };
      highp float fTwitch_41;
      highp vec3 vAxis_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_35 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_35 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_35 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_35 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_31, vPos_31));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_37) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) + (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) - (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_34.z) * tmpvar_34.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_34.yzx * vRotatedWindVector_18.zxy) - (tmpvar_34.zxy * vRotatedWindVector_18.yzx));
      vAxis_42.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_18, tmpvar_34), -1.0, 1.0);
      vAxis_42.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_42);
      vAxis_42 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_57;
      tmpvar_57 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_41 = 0.0;
      if (tmpvar_40) {
        highp float fTime_58;
        fTime_58 = (tmpvar_39.z + tmpvar_44);
        highp vec4 tmpvar_59;
        tmpvar_59.zw = vec2(0.0, 0.0);
        tmpvar_59.x = fTime_58;
        tmpvar_59.y = (0.87 * fTime_58);
        highp vec4 tmpvar_60;
        highp vec4 tmpvar_61;
        tmpvar_61 = abs(((
          fract((tmpvar_59 + 0.5))
         * 2.0) - 1.0));
        tmpvar_60 = (((
          (tmpvar_61 * tmpvar_61)
         * 
          (3.0 - (2.0 * tmpvar_61))
        ) - 0.5) * 2.0);
        fTwitch_41 = (tmpvar_39.x * pow (clamp (
          ((((tmpvar_60.x * tmpvar_60.y) * tmpvar_60.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_39.y));
      };
      highp float fAngle_62;
      fAngle_62 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_38)
       + 
        (tmpvar_57 * tmpvar_36)
      ) + fTwitch_41));
      highp vec2 vSinCos_63;
      vSinCos_63.x = sin(fAngle_62);
      vSinCos_63.y = cos(fAngle_62);
      highp float tmpvar_64;
      tmpvar_64 = (1.0 - vSinCos_63.y);
      highp mat3 tmpvar_65;
      tmpvar_65[0].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_63.y);
      tmpvar_65[0].y = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[0].z = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[1].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[1].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_63.y);
      tmpvar_65[1].z = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[2].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].z = (((tmpvar_64 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_63.y);
      highp mat3 tmpvar_66;
      tmpvar_66 = (tmpvar_52 * tmpvar_65);
      vDirection_28 = (tmpvar_66 * _glesNormal);
      vPos_27 = (normalize((tmpvar_66 * vPos_31)) * tmpvar_48);
    };
    tmpvar_16 = vDirection_28;
    FinalPosition_19 = vPos_27;
  };
  highp vec3 tmpvar_67;
  tmpvar_67 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_67;
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_68;
    vPos_68 = tmpvar_67;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_69;
      vPos_69 = tmpvar_67;
      highp float fAdherenceScale_70;
      highp vec3 tmpvar_71;
      tmpvar_71 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_72;
      tmpvar_72 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_73;
      highp float fOscillation_74;
      fOscillation_74 = 1.0;
      highp float fAmount_75;
      highp float fTarget_76;
      highp vec4 tmpvar_77;
      tmpvar_77.x = (tmpvar_72 + _glesMultiTexCoord0.w);
      tmpvar_77.y = ((tmpvar_72 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_77.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_72 + _glesMultiTexCoord0.w));
      tmpvar_77.w = ((tmpvar_72 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      vOscillations_73 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      highp float tmpvar_79;
      tmpvar_79 = (vOscillations_73.y * vOscillations_73.z);
      fTarget_76 = 1.0;
      fAmount_75 = tmpvar_79;
      if ((tmpvar_79 < 0.0)) {
        fTarget_76 = -1.0;
        fAmount_75 = -(tmpvar_79);
      };
      fOscillation_74 = (((
        (mix (mix (tmpvar_79, fTarget_76, fAmount_75), fTarget_76, fAmount_75) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_73.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_73.w * _ST_WindBranchWhip.x)));
      vPos_69 = (tmpvar_67 + ((tmpvar_71 * fOscillation_74) * _ST_WindBranch.y));
      highp vec4 tmpvar_80;
      tmpvar_80.zw = vec2(0.0, 0.0);
      tmpvar_80.x = ((tmpvar_72 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_80.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_81;
      highp vec4 tmpvar_82;
      tmpvar_82 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      tmpvar_81 = (((
        (tmpvar_82 * tmpvar_82)
       * 
        (3.0 - (2.0 * tmpvar_82))
      ) - 0.5) * 2.0);
      fAdherenceScale_70 = (1.0 - ((
        ((tmpvar_81.x * tmpvar_81.y) * tmpvar_81.x)
       * tmpvar_81.y) * _ST_WindTurbulences.x));
      fAdherenceScale_70 = (fAdherenceScale_70 + ((vOscillations_73.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_69 = (vPos_69 + ((
        ((vRotatedBranchAnchor_17 - vPos_69) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_70) * _glesMultiTexCoord0.z));
      vPos_68 = vPos_69;
    } else {
      highp vec3 vPos_83;
      vPos_83 = vPos_68;
      highp vec3 tmpvar_84;
      tmpvar_84 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_85;
      tmpvar_85 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_86;
      highp float fAmount_87;
      highp float fTarget_88;
      highp vec4 tmpvar_89;
      tmpvar_89.w = 0.0;
      tmpvar_89.x = (tmpvar_85 + _glesMultiTexCoord0.w);
      tmpvar_89.y = ((tmpvar_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_89.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_90;
      tmpvar_90 = abs(((
        fract((tmpvar_89 + 0.5))
       * 2.0) - 1.0));
      vOscillations_86 = (((
        (tmpvar_90 * tmpvar_90)
       * 
        (3.0 - (2.0 * tmpvar_90))
      ) - 0.5) * 2.0);
      highp float tmpvar_91;
      tmpvar_91 = (vOscillations_86.y * vOscillations_86.z);
      fTarget_88 = 1.0;
      fAmount_87 = tmpvar_91;
      if ((tmpvar_91 < 0.0)) {
        fTarget_88 = -1.0;
        fAmount_87 = -(tmpvar_91);
      };
      vPos_83 = (vPos_68 + ((tmpvar_84 * 
        (((mix (
          mix (tmpvar_91, fTarget_88, fAmount_87)
        , fTarget_88, fAmount_87) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_86.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_68 = vPos_83;
    };
    FinalPosition_19 = vPos_68;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_92;
    vPos_92 = FinalPosition_19;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_96.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    vPos_92.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_97.x + (tmpvar_97.y * tmpvar_97.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_93)));
    vPos_92 = (normalize(vPos_92) * fLength_94);
    FinalPosition_19 = vPos_92;
  };
  tmpvar_15.xyz = FinalPosition_19;
  highp vec4 tmpvar_99;
  tmpvar_99 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = (tmpvar_99 * 0.5);
  highp vec2 tmpvar_102;
  tmpvar_102.x = tmpvar_101.x;
  tmpvar_102.y = (tmpvar_101.y * _ProjectionParams.x);
  o_100.xy = (tmpvar_102 + tmpvar_101.w);
  o_100.zw = tmpvar_99.zw;
  highp vec3 tmpvar_103;
  tmpvar_103 = o_100.xyw;
  tmpvar_9 = tmpvar_103;
  highp vec2 tmpvar_104;
  tmpvar_104 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_104;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_105;
  v_105.x = _World2Object[0].x;
  v_105.y = _World2Object[1].x;
  v_105.z = _World2Object[2].x;
  v_105.w = _World2Object[3].x;
  highp vec4 v_106;
  v_106.x = _World2Object[0].y;
  v_106.y = _World2Object[1].y;
  v_106.z = _World2Object[2].y;
  v_106.w = _World2Object[3].y;
  highp vec4 v_107;
  v_107.x = _World2Object[0].z;
  v_107.y = _World2Object[1].z;
  v_107.z = _World2Object[2].z;
  v_107.w = _World2Object[3].z;
  highp vec3 tmpvar_108;
  tmpvar_108 = normalize(((
    (v_105.xyz * tmpvar_16.x)
   + 
    (v_106.xyz * tmpvar_16.y)
  ) + (v_107.xyz * tmpvar_16.z)));
  worldNormal_5 = tmpvar_108;
  highp mat3 tmpvar_109;
  tmpvar_109[0] = _Object2World[0].xyz;
  tmpvar_109[1] = _Object2World[1].xyz;
  tmpvar_109[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_110;
  tmpvar_110 = normalize((tmpvar_109 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_110;
  lowp vec3 tmpvar_111;
  tmpvar_111 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_112;
  tmpvar_112 = (tmpvar_111 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_112;
  lowp vec3 tmpvar_113;
  tmpvar_113.x = worldTangent_4.x;
  tmpvar_113.y = worldBinormal_3.x;
  tmpvar_113.z = worldNormal_5.x;
  lowp vec3 tmpvar_114;
  tmpvar_114.x = worldTangent_4.y;
  tmpvar_114.y = worldBinormal_3.y;
  tmpvar_114.z = worldNormal_5.y;
  lowp vec3 tmpvar_115;
  tmpvar_115.x = worldTangent_4.z;
  tmpvar_115.y = worldBinormal_3.z;
  tmpvar_115.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_113;
  xlv_TEXCOORD1 = tmpvar_114;
  xlv_TEXCOORD2 = tmpvar_115;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in lowp vec3 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in mediump vec4 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec3 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_24;
  tmpvar_24 = (_LightMatrix0 * tmpvar_23).xyz;
  lightCoord_5 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (lightCoord_5, lightCoord_5);
  lowp float tmpvar_26;
  tmpvar_26 = texture (_LightTexture0, vec2(tmpvar_25)).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_22);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_22);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_22);
  lowp vec3 tmpvar_27;
  tmpvar_27 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_27;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_26);
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_30 = tmpvar_31;
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tmpvar_9 * tmpvar_1) * diff_30);
  c_29.xyz = tmpvar_32;
  c_29.w = tmpvar_10;
  c_28.w = c_29.w;
  mediump vec3 tmpvar_33;
  tmpvar_33 = c_29.xyz;
  c_28.xyz = tmpvar_33;
  c_4.xyz = c_28.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_14;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_23;
  tmpvar_23 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_23;
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_24;
    tmpvar_24 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_25;
    isBestWind_25 = (tmpvar_20 == 4.0);
    bool bLeaf2_26;
    bLeaf2_26 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_27;
    vPos_27 = tmpvar_23;
    highp vec3 vDirection_28;
    vDirection_28 = tmpvar_2;
    highp float tmpvar_29;
    if (bLeaf2_26) {
      tmpvar_29 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_30;
    if (bLeaf2_26) {
      tmpvar_30 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_31;
    highp vec4 tmpvar_32;
    tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_32.x = (tmpvar_29 + tmpvar_24);
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    vPos_31 = (tmpvar_23 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_30 * (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_28 = tmpvar_2;
    vPos_27 = vPos_31;
    if (isBestWind_25) {
      highp vec3 tmpvar_34;
      tmpvar_34 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_35;
      if (bLeaf2_26) {
        tmpvar_35 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_36;
      if (bLeaf2_26) {
        tmpvar_36 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_37;
      if (bLeaf2_26) {
        tmpvar_37 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_38;
      if (bLeaf2_26) {
        tmpvar_38 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_39;
      if (bLeaf2_26) {
        tmpvar_39 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_39 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_40;
      if (bLeaf2_26) {
        tmpvar_40 = bool(1);
      } else {
        tmpvar_40 = bool(1);
      };
      highp float fTwitch_41;
      highp vec3 vAxis_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_35 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_35 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_35 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_35 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_31, vPos_31));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_37) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) + (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) - (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_34.z) * tmpvar_34.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_34.yzx * vRotatedWindVector_18.zxy) - (tmpvar_34.zxy * vRotatedWindVector_18.yzx));
      vAxis_42.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_18, tmpvar_34), -1.0, 1.0);
      vAxis_42.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_42);
      vAxis_42 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_57;
      tmpvar_57 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_41 = 0.0;
      if (tmpvar_40) {
        highp float fTime_58;
        fTime_58 = (tmpvar_39.z + tmpvar_44);
        highp vec4 tmpvar_59;
        tmpvar_59.zw = vec2(0.0, 0.0);
        tmpvar_59.x = fTime_58;
        tmpvar_59.y = (0.87 * fTime_58);
        highp vec4 tmpvar_60;
        highp vec4 tmpvar_61;
        tmpvar_61 = abs(((
          fract((tmpvar_59 + 0.5))
         * 2.0) - 1.0));
        tmpvar_60 = (((
          (tmpvar_61 * tmpvar_61)
         * 
          (3.0 - (2.0 * tmpvar_61))
        ) - 0.5) * 2.0);
        fTwitch_41 = (tmpvar_39.x * pow (clamp (
          ((((tmpvar_60.x * tmpvar_60.y) * tmpvar_60.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_39.y));
      };
      highp float fAngle_62;
      fAngle_62 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_38)
       + 
        (tmpvar_57 * tmpvar_36)
      ) + fTwitch_41));
      highp vec2 vSinCos_63;
      vSinCos_63.x = sin(fAngle_62);
      vSinCos_63.y = cos(fAngle_62);
      highp float tmpvar_64;
      tmpvar_64 = (1.0 - vSinCos_63.y);
      highp mat3 tmpvar_65;
      tmpvar_65[0].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_63.y);
      tmpvar_65[0].y = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[0].z = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[1].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[1].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_63.y);
      tmpvar_65[1].z = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[2].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].z = (((tmpvar_64 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_63.y);
      highp mat3 tmpvar_66;
      tmpvar_66 = (tmpvar_52 * tmpvar_65);
      vDirection_28 = (tmpvar_66 * _glesNormal);
      vPos_27 = (normalize((tmpvar_66 * vPos_31)) * tmpvar_48);
    };
    tmpvar_16 = vDirection_28;
    FinalPosition_19 = vPos_27;
  };
  highp vec3 tmpvar_67;
  tmpvar_67 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_67;
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_68;
    vPos_68 = tmpvar_67;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_69;
      vPos_69 = tmpvar_67;
      highp float fAdherenceScale_70;
      highp vec3 tmpvar_71;
      tmpvar_71 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_72;
      tmpvar_72 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_73;
      highp float fOscillation_74;
      fOscillation_74 = 1.0;
      highp float fAmount_75;
      highp float fTarget_76;
      highp vec4 tmpvar_77;
      tmpvar_77.x = (tmpvar_72 + _glesMultiTexCoord0.w);
      tmpvar_77.y = ((tmpvar_72 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_77.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_72 + _glesMultiTexCoord0.w));
      tmpvar_77.w = ((tmpvar_72 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      vOscillations_73 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      highp float tmpvar_79;
      tmpvar_79 = (vOscillations_73.y * vOscillations_73.z);
      fTarget_76 = 1.0;
      fAmount_75 = tmpvar_79;
      if ((tmpvar_79 < 0.0)) {
        fTarget_76 = -1.0;
        fAmount_75 = -(tmpvar_79);
      };
      fOscillation_74 = (((
        (mix (mix (tmpvar_79, fTarget_76, fAmount_75), fTarget_76, fAmount_75) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_73.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_73.w * _ST_WindBranchWhip.x)));
      vPos_69 = (tmpvar_67 + ((tmpvar_71 * fOscillation_74) * _ST_WindBranch.y));
      highp vec4 tmpvar_80;
      tmpvar_80.zw = vec2(0.0, 0.0);
      tmpvar_80.x = ((tmpvar_72 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_80.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_81;
      highp vec4 tmpvar_82;
      tmpvar_82 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      tmpvar_81 = (((
        (tmpvar_82 * tmpvar_82)
       * 
        (3.0 - (2.0 * tmpvar_82))
      ) - 0.5) * 2.0);
      fAdherenceScale_70 = (1.0 - ((
        ((tmpvar_81.x * tmpvar_81.y) * tmpvar_81.x)
       * tmpvar_81.y) * _ST_WindTurbulences.x));
      fAdherenceScale_70 = (fAdherenceScale_70 + ((vOscillations_73.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_69 = (vPos_69 + ((
        ((vRotatedBranchAnchor_17 - vPos_69) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_70) * _glesMultiTexCoord0.z));
      vPos_68 = vPos_69;
    } else {
      highp vec3 vPos_83;
      vPos_83 = vPos_68;
      highp vec3 tmpvar_84;
      tmpvar_84 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_85;
      tmpvar_85 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_86;
      highp float fAmount_87;
      highp float fTarget_88;
      highp vec4 tmpvar_89;
      tmpvar_89.w = 0.0;
      tmpvar_89.x = (tmpvar_85 + _glesMultiTexCoord0.w);
      tmpvar_89.y = ((tmpvar_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_89.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_90;
      tmpvar_90 = abs(((
        fract((tmpvar_89 + 0.5))
       * 2.0) - 1.0));
      vOscillations_86 = (((
        (tmpvar_90 * tmpvar_90)
       * 
        (3.0 - (2.0 * tmpvar_90))
      ) - 0.5) * 2.0);
      highp float tmpvar_91;
      tmpvar_91 = (vOscillations_86.y * vOscillations_86.z);
      fTarget_88 = 1.0;
      fAmount_87 = tmpvar_91;
      if ((tmpvar_91 < 0.0)) {
        fTarget_88 = -1.0;
        fAmount_87 = -(tmpvar_91);
      };
      vPos_83 = (vPos_68 + ((tmpvar_84 * 
        (((mix (
          mix (tmpvar_91, fTarget_88, fAmount_87)
        , fTarget_88, fAmount_87) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_86.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_68 = vPos_83;
    };
    FinalPosition_19 = vPos_68;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_92;
    vPos_92 = FinalPosition_19;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_96.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    vPos_92.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_97.x + (tmpvar_97.y * tmpvar_97.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_93)));
    vPos_92 = (normalize(vPos_92) * fLength_94);
    FinalPosition_19 = vPos_92;
  };
  tmpvar_15.xyz = FinalPosition_19;
  highp vec4 tmpvar_99;
  tmpvar_99 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = (tmpvar_99 * 0.5);
  highp vec2 tmpvar_102;
  tmpvar_102.x = tmpvar_101.x;
  tmpvar_102.y = (tmpvar_101.y * _ProjectionParams.x);
  o_100.xy = (tmpvar_102 + tmpvar_101.w);
  o_100.zw = tmpvar_99.zw;
  highp vec3 tmpvar_103;
  tmpvar_103 = o_100.xyw;
  tmpvar_9 = tmpvar_103;
  highp vec2 tmpvar_104;
  tmpvar_104 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_104;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_105;
  v_105.x = _World2Object[0].x;
  v_105.y = _World2Object[1].x;
  v_105.z = _World2Object[2].x;
  v_105.w = _World2Object[3].x;
  highp vec4 v_106;
  v_106.x = _World2Object[0].y;
  v_106.y = _World2Object[1].y;
  v_106.z = _World2Object[2].y;
  v_106.w = _World2Object[3].y;
  highp vec4 v_107;
  v_107.x = _World2Object[0].z;
  v_107.y = _World2Object[1].z;
  v_107.z = _World2Object[2].z;
  v_107.w = _World2Object[3].z;
  highp vec3 tmpvar_108;
  tmpvar_108 = normalize(((
    (v_105.xyz * tmpvar_16.x)
   + 
    (v_106.xyz * tmpvar_16.y)
  ) + (v_107.xyz * tmpvar_16.z)));
  worldNormal_5 = tmpvar_108;
  highp mat3 tmpvar_109;
  tmpvar_109[0] = _Object2World[0].xyz;
  tmpvar_109[1] = _Object2World[1].xyz;
  tmpvar_109[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_110;
  tmpvar_110 = normalize((tmpvar_109 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_110;
  lowp vec3 tmpvar_111;
  tmpvar_111 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_112;
  tmpvar_112 = (tmpvar_111 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_112;
  lowp vec3 tmpvar_113;
  tmpvar_113.x = worldTangent_4.x;
  tmpvar_113.y = worldBinormal_3.x;
  tmpvar_113.z = worldNormal_5.x;
  lowp vec3 tmpvar_114;
  tmpvar_114.x = worldTangent_4.y;
  tmpvar_114.y = worldBinormal_3.y;
  tmpvar_114.z = worldNormal_5.y;
  lowp vec3 tmpvar_115;
  tmpvar_115.x = worldTangent_4.z;
  tmpvar_115.y = worldBinormal_3.z;
  tmpvar_115.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_113;
  xlv_TEXCOORD1 = tmpvar_114;
  xlv_TEXCOORD2 = tmpvar_115;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_11.x = tmpvar_12.x;
  mediump float tmpvar_13;
  tmpvar_13 = fract(tmpvar_12.y);
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_13 * 0.0625) + unity_LODFade.y);
  projUV_11.y = tmpvar_14;
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_17;
  lowp float x_18;
  x_18 = (tmpvar_9 - _Cutoff);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_19 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_21);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_21);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_21);
  lowp vec3 tmpvar_22;
  tmpvar_22 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_22;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_25 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.xyz = tmpvar_27;
  c_24.w = tmpvar_9;
  c_23.w = c_24.w;
  mediump vec3 tmpvar_28;
  tmpvar_28 = c_24.xyz;
  c_23.xyz = tmpvar_28;
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
in vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out lowp vec3 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out mediump vec4 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_14;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_23;
  tmpvar_23 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_23;
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_24;
    tmpvar_24 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_25;
    isBestWind_25 = (tmpvar_20 == 4.0);
    bool bLeaf2_26;
    bLeaf2_26 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_27;
    vPos_27 = tmpvar_23;
    highp vec3 vDirection_28;
    vDirection_28 = tmpvar_2;
    highp float tmpvar_29;
    if (bLeaf2_26) {
      tmpvar_29 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_30;
    if (bLeaf2_26) {
      tmpvar_30 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_31;
    highp vec4 tmpvar_32;
    tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_32.x = (tmpvar_29 + tmpvar_24);
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    vPos_31 = (tmpvar_23 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_30 * (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_28 = tmpvar_2;
    vPos_27 = vPos_31;
    if (isBestWind_25) {
      highp vec3 tmpvar_34;
      tmpvar_34 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_35;
      if (bLeaf2_26) {
        tmpvar_35 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_36;
      if (bLeaf2_26) {
        tmpvar_36 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_37;
      if (bLeaf2_26) {
        tmpvar_37 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_38;
      if (bLeaf2_26) {
        tmpvar_38 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_39;
      if (bLeaf2_26) {
        tmpvar_39 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_39 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_40;
      if (bLeaf2_26) {
        tmpvar_40 = bool(1);
      } else {
        tmpvar_40 = bool(1);
      };
      highp float fTwitch_41;
      highp vec3 vAxis_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_35 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_35 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_35 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_35 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_31, vPos_31));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_37) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) + (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) - (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_34.z) * tmpvar_34.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_34.yzx * vRotatedWindVector_18.zxy) - (tmpvar_34.zxy * vRotatedWindVector_18.yzx));
      vAxis_42.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_18, tmpvar_34), -1.0, 1.0);
      vAxis_42.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_42);
      vAxis_42 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_57;
      tmpvar_57 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_41 = 0.0;
      if (tmpvar_40) {
        highp float fTime_58;
        fTime_58 = (tmpvar_39.z + tmpvar_44);
        highp vec4 tmpvar_59;
        tmpvar_59.zw = vec2(0.0, 0.0);
        tmpvar_59.x = fTime_58;
        tmpvar_59.y = (0.87 * fTime_58);
        highp vec4 tmpvar_60;
        highp vec4 tmpvar_61;
        tmpvar_61 = abs(((
          fract((tmpvar_59 + 0.5))
         * 2.0) - 1.0));
        tmpvar_60 = (((
          (tmpvar_61 * tmpvar_61)
         * 
          (3.0 - (2.0 * tmpvar_61))
        ) - 0.5) * 2.0);
        fTwitch_41 = (tmpvar_39.x * pow (clamp (
          ((((tmpvar_60.x * tmpvar_60.y) * tmpvar_60.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_39.y));
      };
      highp float fAngle_62;
      fAngle_62 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_38)
       + 
        (tmpvar_57 * tmpvar_36)
      ) + fTwitch_41));
      highp vec2 vSinCos_63;
      vSinCos_63.x = sin(fAngle_62);
      vSinCos_63.y = cos(fAngle_62);
      highp float tmpvar_64;
      tmpvar_64 = (1.0 - vSinCos_63.y);
      highp mat3 tmpvar_65;
      tmpvar_65[0].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_63.y);
      tmpvar_65[0].y = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[0].z = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[1].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[1].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_63.y);
      tmpvar_65[1].z = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[2].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].z = (((tmpvar_64 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_63.y);
      highp mat3 tmpvar_66;
      tmpvar_66 = (tmpvar_52 * tmpvar_65);
      vDirection_28 = (tmpvar_66 * _glesNormal);
      vPos_27 = (normalize((tmpvar_66 * vPos_31)) * tmpvar_48);
    };
    tmpvar_16 = vDirection_28;
    FinalPosition_19 = vPos_27;
  };
  highp vec3 tmpvar_67;
  tmpvar_67 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_67;
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_68;
    vPos_68 = tmpvar_67;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_69;
      vPos_69 = tmpvar_67;
      highp float fAdherenceScale_70;
      highp vec3 tmpvar_71;
      tmpvar_71 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_72;
      tmpvar_72 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_73;
      highp float fOscillation_74;
      fOscillation_74 = 1.0;
      highp float fAmount_75;
      highp float fTarget_76;
      highp vec4 tmpvar_77;
      tmpvar_77.x = (tmpvar_72 + _glesMultiTexCoord0.w);
      tmpvar_77.y = ((tmpvar_72 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_77.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_72 + _glesMultiTexCoord0.w));
      tmpvar_77.w = ((tmpvar_72 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      vOscillations_73 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      highp float tmpvar_79;
      tmpvar_79 = (vOscillations_73.y * vOscillations_73.z);
      fTarget_76 = 1.0;
      fAmount_75 = tmpvar_79;
      if ((tmpvar_79 < 0.0)) {
        fTarget_76 = -1.0;
        fAmount_75 = -(tmpvar_79);
      };
      fOscillation_74 = (((
        (mix (mix (tmpvar_79, fTarget_76, fAmount_75), fTarget_76, fAmount_75) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_73.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_73.w * _ST_WindBranchWhip.x)));
      vPos_69 = (tmpvar_67 + ((tmpvar_71 * fOscillation_74) * _ST_WindBranch.y));
      highp vec4 tmpvar_80;
      tmpvar_80.zw = vec2(0.0, 0.0);
      tmpvar_80.x = ((tmpvar_72 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_80.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_81;
      highp vec4 tmpvar_82;
      tmpvar_82 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      tmpvar_81 = (((
        (tmpvar_82 * tmpvar_82)
       * 
        (3.0 - (2.0 * tmpvar_82))
      ) - 0.5) * 2.0);
      fAdherenceScale_70 = (1.0 - ((
        ((tmpvar_81.x * tmpvar_81.y) * tmpvar_81.x)
       * tmpvar_81.y) * _ST_WindTurbulences.x));
      fAdherenceScale_70 = (fAdherenceScale_70 + ((vOscillations_73.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_69 = (vPos_69 + ((
        ((vRotatedBranchAnchor_17 - vPos_69) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_70) * _glesMultiTexCoord0.z));
      vPos_68 = vPos_69;
    } else {
      highp vec3 vPos_83;
      vPos_83 = vPos_68;
      highp vec3 tmpvar_84;
      tmpvar_84 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_85;
      tmpvar_85 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_86;
      highp float fAmount_87;
      highp float fTarget_88;
      highp vec4 tmpvar_89;
      tmpvar_89.w = 0.0;
      tmpvar_89.x = (tmpvar_85 + _glesMultiTexCoord0.w);
      tmpvar_89.y = ((tmpvar_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_89.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_90;
      tmpvar_90 = abs(((
        fract((tmpvar_89 + 0.5))
       * 2.0) - 1.0));
      vOscillations_86 = (((
        (tmpvar_90 * tmpvar_90)
       * 
        (3.0 - (2.0 * tmpvar_90))
      ) - 0.5) * 2.0);
      highp float tmpvar_91;
      tmpvar_91 = (vOscillations_86.y * vOscillations_86.z);
      fTarget_88 = 1.0;
      fAmount_87 = tmpvar_91;
      if ((tmpvar_91 < 0.0)) {
        fTarget_88 = -1.0;
        fAmount_87 = -(tmpvar_91);
      };
      vPos_83 = (vPos_68 + ((tmpvar_84 * 
        (((mix (
          mix (tmpvar_91, fTarget_88, fAmount_87)
        , fTarget_88, fAmount_87) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_86.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_68 = vPos_83;
    };
    FinalPosition_19 = vPos_68;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_92;
    vPos_92 = FinalPosition_19;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_96.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    vPos_92.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_97.x + (tmpvar_97.y * tmpvar_97.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_93)));
    vPos_92 = (normalize(vPos_92) * fLength_94);
    FinalPosition_19 = vPos_92;
  };
  tmpvar_15.xyz = FinalPosition_19;
  highp vec4 tmpvar_99;
  tmpvar_99 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = (tmpvar_99 * 0.5);
  highp vec2 tmpvar_102;
  tmpvar_102.x = tmpvar_101.x;
  tmpvar_102.y = (tmpvar_101.y * _ProjectionParams.x);
  o_100.xy = (tmpvar_102 + tmpvar_101.w);
  o_100.zw = tmpvar_99.zw;
  highp vec3 tmpvar_103;
  tmpvar_103 = o_100.xyw;
  tmpvar_9 = tmpvar_103;
  highp vec2 tmpvar_104;
  tmpvar_104 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_104;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_105;
  v_105.x = _World2Object[0].x;
  v_105.y = _World2Object[1].x;
  v_105.z = _World2Object[2].x;
  v_105.w = _World2Object[3].x;
  highp vec4 v_106;
  v_106.x = _World2Object[0].y;
  v_106.y = _World2Object[1].y;
  v_106.z = _World2Object[2].y;
  v_106.w = _World2Object[3].y;
  highp vec4 v_107;
  v_107.x = _World2Object[0].z;
  v_107.y = _World2Object[1].z;
  v_107.z = _World2Object[2].z;
  v_107.w = _World2Object[3].z;
  highp vec3 tmpvar_108;
  tmpvar_108 = normalize(((
    (v_105.xyz * tmpvar_16.x)
   + 
    (v_106.xyz * tmpvar_16.y)
  ) + (v_107.xyz * tmpvar_16.z)));
  worldNormal_5 = tmpvar_108;
  highp mat3 tmpvar_109;
  tmpvar_109[0] = _Object2World[0].xyz;
  tmpvar_109[1] = _Object2World[1].xyz;
  tmpvar_109[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_110;
  tmpvar_110 = normalize((tmpvar_109 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_110;
  lowp vec3 tmpvar_111;
  tmpvar_111 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_112;
  tmpvar_112 = (tmpvar_111 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_112;
  lowp vec3 tmpvar_113;
  tmpvar_113.x = worldTangent_4.x;
  tmpvar_113.y = worldBinormal_3.x;
  tmpvar_113.z = worldNormal_5.x;
  lowp vec3 tmpvar_114;
  tmpvar_114.x = worldTangent_4.y;
  tmpvar_114.y = worldBinormal_3.y;
  tmpvar_114.z = worldNormal_5.y;
  lowp vec3 tmpvar_115;
  tmpvar_115.x = worldTangent_4.z;
  tmpvar_115.y = worldBinormal_3.z;
  tmpvar_115.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_113;
  xlv_TEXCOORD1 = tmpvar_114;
  xlv_TEXCOORD2 = tmpvar_115;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in lowp vec3 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_11.x = tmpvar_12.x;
  mediump float tmpvar_13;
  tmpvar_13 = fract(tmpvar_12.y);
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_13 * 0.0625) + unity_LODFade.y);
  projUV_11.y = tmpvar_14;
  lowp float x_15;
  x_15 = (texture (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_17;
  lowp float x_18;
  x_18 = (tmpvar_9 - _Cutoff);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_19 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((texture (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_21);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_21);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_21);
  lowp vec3 tmpvar_22;
  tmpvar_22 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_22;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_25 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.xyz = tmpvar_27;
  c_24.w = tmpvar_9;
  c_23.w = c_24.w;
  mediump vec3 tmpvar_28;
  tmpvar_28 = c_24.xyz;
  c_23.xyz = tmpvar_28;
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_14;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_23;
  tmpvar_23 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_23;
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_24;
    tmpvar_24 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_25;
    isBestWind_25 = (tmpvar_20 == 4.0);
    bool bLeaf2_26;
    bLeaf2_26 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_27;
    vPos_27 = tmpvar_23;
    highp vec3 vDirection_28;
    vDirection_28 = tmpvar_2;
    highp float tmpvar_29;
    if (bLeaf2_26) {
      tmpvar_29 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_30;
    if (bLeaf2_26) {
      tmpvar_30 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_31;
    highp vec4 tmpvar_32;
    tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_32.x = (tmpvar_29 + tmpvar_24);
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    vPos_31 = (tmpvar_23 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_30 * (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_28 = tmpvar_2;
    vPos_27 = vPos_31;
    if (isBestWind_25) {
      highp vec3 tmpvar_34;
      tmpvar_34 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_35;
      if (bLeaf2_26) {
        tmpvar_35 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_36;
      if (bLeaf2_26) {
        tmpvar_36 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_37;
      if (bLeaf2_26) {
        tmpvar_37 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_38;
      if (bLeaf2_26) {
        tmpvar_38 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_39;
      if (bLeaf2_26) {
        tmpvar_39 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_39 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_40;
      if (bLeaf2_26) {
        tmpvar_40 = bool(1);
      } else {
        tmpvar_40 = bool(1);
      };
      highp float fTwitch_41;
      highp vec3 vAxis_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_35 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_35 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_35 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_35 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_31, vPos_31));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_37) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) + (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) - (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_34.z) * tmpvar_34.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_34.yzx * vRotatedWindVector_18.zxy) - (tmpvar_34.zxy * vRotatedWindVector_18.yzx));
      vAxis_42.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_18, tmpvar_34), -1.0, 1.0);
      vAxis_42.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_42);
      vAxis_42 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_57;
      tmpvar_57 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_41 = 0.0;
      if (tmpvar_40) {
        highp float fTime_58;
        fTime_58 = (tmpvar_39.z + tmpvar_44);
        highp vec4 tmpvar_59;
        tmpvar_59.zw = vec2(0.0, 0.0);
        tmpvar_59.x = fTime_58;
        tmpvar_59.y = (0.87 * fTime_58);
        highp vec4 tmpvar_60;
        highp vec4 tmpvar_61;
        tmpvar_61 = abs(((
          fract((tmpvar_59 + 0.5))
         * 2.0) - 1.0));
        tmpvar_60 = (((
          (tmpvar_61 * tmpvar_61)
         * 
          (3.0 - (2.0 * tmpvar_61))
        ) - 0.5) * 2.0);
        fTwitch_41 = (tmpvar_39.x * pow (clamp (
          ((((tmpvar_60.x * tmpvar_60.y) * tmpvar_60.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_39.y));
      };
      highp float fAngle_62;
      fAngle_62 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_38)
       + 
        (tmpvar_57 * tmpvar_36)
      ) + fTwitch_41));
      highp vec2 vSinCos_63;
      vSinCos_63.x = sin(fAngle_62);
      vSinCos_63.y = cos(fAngle_62);
      highp float tmpvar_64;
      tmpvar_64 = (1.0 - vSinCos_63.y);
      highp mat3 tmpvar_65;
      tmpvar_65[0].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_63.y);
      tmpvar_65[0].y = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[0].z = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[1].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[1].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_63.y);
      tmpvar_65[1].z = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[2].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].z = (((tmpvar_64 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_63.y);
      highp mat3 tmpvar_66;
      tmpvar_66 = (tmpvar_52 * tmpvar_65);
      vDirection_28 = (tmpvar_66 * _glesNormal);
      vPos_27 = (normalize((tmpvar_66 * vPos_31)) * tmpvar_48);
    };
    tmpvar_16 = vDirection_28;
    FinalPosition_19 = vPos_27;
  };
  highp vec3 tmpvar_67;
  tmpvar_67 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_67;
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_68;
    vPos_68 = tmpvar_67;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_69;
      vPos_69 = tmpvar_67;
      highp float fAdherenceScale_70;
      highp vec3 tmpvar_71;
      tmpvar_71 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_72;
      tmpvar_72 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_73;
      highp float fOscillation_74;
      fOscillation_74 = 1.0;
      highp float fAmount_75;
      highp float fTarget_76;
      highp vec4 tmpvar_77;
      tmpvar_77.x = (tmpvar_72 + _glesMultiTexCoord0.w);
      tmpvar_77.y = ((tmpvar_72 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_77.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_72 + _glesMultiTexCoord0.w));
      tmpvar_77.w = ((tmpvar_72 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      vOscillations_73 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      highp float tmpvar_79;
      tmpvar_79 = (vOscillations_73.y * vOscillations_73.z);
      fTarget_76 = 1.0;
      fAmount_75 = tmpvar_79;
      if ((tmpvar_79 < 0.0)) {
        fTarget_76 = -1.0;
        fAmount_75 = -(tmpvar_79);
      };
      fOscillation_74 = (((
        (mix (mix (tmpvar_79, fTarget_76, fAmount_75), fTarget_76, fAmount_75) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_73.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_73.w * _ST_WindBranchWhip.x)));
      vPos_69 = (tmpvar_67 + ((tmpvar_71 * fOscillation_74) * _ST_WindBranch.y));
      highp vec4 tmpvar_80;
      tmpvar_80.zw = vec2(0.0, 0.0);
      tmpvar_80.x = ((tmpvar_72 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_80.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_81;
      highp vec4 tmpvar_82;
      tmpvar_82 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      tmpvar_81 = (((
        (tmpvar_82 * tmpvar_82)
       * 
        (3.0 - (2.0 * tmpvar_82))
      ) - 0.5) * 2.0);
      fAdherenceScale_70 = (1.0 - ((
        ((tmpvar_81.x * tmpvar_81.y) * tmpvar_81.x)
       * tmpvar_81.y) * _ST_WindTurbulences.x));
      fAdherenceScale_70 = (fAdherenceScale_70 + ((vOscillations_73.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_69 = (vPos_69 + ((
        ((vRotatedBranchAnchor_17 - vPos_69) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_70) * _glesMultiTexCoord0.z));
      vPos_68 = vPos_69;
    } else {
      highp vec3 vPos_83;
      vPos_83 = vPos_68;
      highp vec3 tmpvar_84;
      tmpvar_84 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_85;
      tmpvar_85 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_86;
      highp float fAmount_87;
      highp float fTarget_88;
      highp vec4 tmpvar_89;
      tmpvar_89.w = 0.0;
      tmpvar_89.x = (tmpvar_85 + _glesMultiTexCoord0.w);
      tmpvar_89.y = ((tmpvar_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_89.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_90;
      tmpvar_90 = abs(((
        fract((tmpvar_89 + 0.5))
       * 2.0) - 1.0));
      vOscillations_86 = (((
        (tmpvar_90 * tmpvar_90)
       * 
        (3.0 - (2.0 * tmpvar_90))
      ) - 0.5) * 2.0);
      highp float tmpvar_91;
      tmpvar_91 = (vOscillations_86.y * vOscillations_86.z);
      fTarget_88 = 1.0;
      fAmount_87 = tmpvar_91;
      if ((tmpvar_91 < 0.0)) {
        fTarget_88 = -1.0;
        fAmount_87 = -(tmpvar_91);
      };
      vPos_83 = (vPos_68 + ((tmpvar_84 * 
        (((mix (
          mix (tmpvar_91, fTarget_88, fAmount_87)
        , fTarget_88, fAmount_87) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_86.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_68 = vPos_83;
    };
    FinalPosition_19 = vPos_68;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_92;
    vPos_92 = FinalPosition_19;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_96.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    vPos_92.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_97.x + (tmpvar_97.y * tmpvar_97.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_93)));
    vPos_92 = (normalize(vPos_92) * fLength_94);
    FinalPosition_19 = vPos_92;
  };
  tmpvar_15.xyz = FinalPosition_19;
  highp vec4 tmpvar_99;
  tmpvar_99 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = (tmpvar_99 * 0.5);
  highp vec2 tmpvar_102;
  tmpvar_102.x = tmpvar_101.x;
  tmpvar_102.y = (tmpvar_101.y * _ProjectionParams.x);
  o_100.xy = (tmpvar_102 + tmpvar_101.w);
  o_100.zw = tmpvar_99.zw;
  highp vec3 tmpvar_103;
  tmpvar_103 = o_100.xyw;
  tmpvar_9 = tmpvar_103;
  highp vec2 tmpvar_104;
  tmpvar_104 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_104;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_105;
  v_105.x = _World2Object[0].x;
  v_105.y = _World2Object[1].x;
  v_105.z = _World2Object[2].x;
  v_105.w = _World2Object[3].x;
  highp vec4 v_106;
  v_106.x = _World2Object[0].y;
  v_106.y = _World2Object[1].y;
  v_106.z = _World2Object[2].y;
  v_106.w = _World2Object[3].y;
  highp vec4 v_107;
  v_107.x = _World2Object[0].z;
  v_107.y = _World2Object[1].z;
  v_107.z = _World2Object[2].z;
  v_107.w = _World2Object[3].z;
  highp vec3 tmpvar_108;
  tmpvar_108 = normalize(((
    (v_105.xyz * tmpvar_16.x)
   + 
    (v_106.xyz * tmpvar_16.y)
  ) + (v_107.xyz * tmpvar_16.z)));
  worldNormal_5 = tmpvar_108;
  highp mat3 tmpvar_109;
  tmpvar_109[0] = _Object2World[0].xyz;
  tmpvar_109[1] = _Object2World[1].xyz;
  tmpvar_109[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_110;
  tmpvar_110 = normalize((tmpvar_109 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_110;
  lowp vec3 tmpvar_111;
  tmpvar_111 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_112;
  tmpvar_112 = (tmpvar_111 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_112;
  lowp vec3 tmpvar_113;
  tmpvar_113.x = worldTangent_4.x;
  tmpvar_113.y = worldBinormal_3.x;
  tmpvar_113.z = worldNormal_5.x;
  lowp vec3 tmpvar_114;
  tmpvar_114.x = worldTangent_4.y;
  tmpvar_114.y = worldBinormal_3.y;
  tmpvar_114.z = worldNormal_5.y;
  lowp vec3 tmpvar_115;
  tmpvar_115.x = worldTangent_4.z;
  tmpvar_115.y = worldBinormal_3.z;
  tmpvar_115.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_113;
  xlv_TEXCOORD1 = tmpvar_114;
  xlv_TEXCOORD2 = tmpvar_115;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp float atten_5;
  mediump vec4 lightCoord_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD4;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_7 = tmpvar_9;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_11 = tmpvar_19;
  lowp float x_20;
  x_20 = (tmpvar_11 - _Cutoff);
  if ((x_20 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_21 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_21.x, max (tmpvar_21.y, tmpvar_21.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_22;
  tmpvar_22 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  tmpvar_10 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD3;
  highp vec4 tmpvar_25;
  tmpvar_25 = (_LightMatrix0 * tmpvar_24);
  lightCoord_6 = tmpvar_25;
  lowp vec4 tmpvar_26;
  mediump vec2 P_27;
  P_27 = ((lightCoord_6.xy / lightCoord_6.w) + 0.5);
  tmpvar_26 = texture2D (_LightTexture0, P_27);
  mediump float tmpvar_28;
  tmpvar_28 = dot (lightCoord_6.xyz, lightCoord_6.xyz);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_LightTextureB0, vec2(tmpvar_28));
  mediump float tmpvar_30;
  tmpvar_30 = ((float(
    (lightCoord_6.z > 0.0)
  ) * tmpvar_26.w) * tmpvar_29.w);
  atten_5 = tmpvar_30;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_23);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_23);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_23);
  lowp vec3 tmpvar_31;
  tmpvar_31 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_31;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_5);
  lowp vec4 c_32;
  lowp vec4 c_33;
  lowp float diff_34;
  mediump float tmpvar_35;
  tmpvar_35 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_34 = tmpvar_35;
  mediump vec3 tmpvar_36;
  tmpvar_36 = ((tmpvar_10 * tmpvar_1) * diff_34);
  c_33.xyz = tmpvar_36;
  c_33.w = tmpvar_11;
  c_32.w = c_33.w;
  mediump vec3 tmpvar_37;
  tmpvar_37 = c_33.xyz;
  c_32.xyz = tmpvar_37;
  c_4.xyz = c_32.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
in vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out lowp vec3 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out mediump vec4 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_14;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_23;
  tmpvar_23 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_23;
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_24;
    tmpvar_24 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_25;
    isBestWind_25 = (tmpvar_20 == 4.0);
    bool bLeaf2_26;
    bLeaf2_26 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_27;
    vPos_27 = tmpvar_23;
    highp vec3 vDirection_28;
    vDirection_28 = tmpvar_2;
    highp float tmpvar_29;
    if (bLeaf2_26) {
      tmpvar_29 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_30;
    if (bLeaf2_26) {
      tmpvar_30 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_31;
    highp vec4 tmpvar_32;
    tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_32.x = (tmpvar_29 + tmpvar_24);
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    vPos_31 = (tmpvar_23 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_30 * (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_28 = tmpvar_2;
    vPos_27 = vPos_31;
    if (isBestWind_25) {
      highp vec3 tmpvar_34;
      tmpvar_34 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_35;
      if (bLeaf2_26) {
        tmpvar_35 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_36;
      if (bLeaf2_26) {
        tmpvar_36 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_37;
      if (bLeaf2_26) {
        tmpvar_37 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_38;
      if (bLeaf2_26) {
        tmpvar_38 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_39;
      if (bLeaf2_26) {
        tmpvar_39 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_39 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_40;
      if (bLeaf2_26) {
        tmpvar_40 = bool(1);
      } else {
        tmpvar_40 = bool(1);
      };
      highp float fTwitch_41;
      highp vec3 vAxis_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_35 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_35 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_35 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_35 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_31, vPos_31));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_37) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) + (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) - (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_34.z) * tmpvar_34.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_34.yzx * vRotatedWindVector_18.zxy) - (tmpvar_34.zxy * vRotatedWindVector_18.yzx));
      vAxis_42.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_18, tmpvar_34), -1.0, 1.0);
      vAxis_42.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_42);
      vAxis_42 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_57;
      tmpvar_57 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_41 = 0.0;
      if (tmpvar_40) {
        highp float fTime_58;
        fTime_58 = (tmpvar_39.z + tmpvar_44);
        highp vec4 tmpvar_59;
        tmpvar_59.zw = vec2(0.0, 0.0);
        tmpvar_59.x = fTime_58;
        tmpvar_59.y = (0.87 * fTime_58);
        highp vec4 tmpvar_60;
        highp vec4 tmpvar_61;
        tmpvar_61 = abs(((
          fract((tmpvar_59 + 0.5))
         * 2.0) - 1.0));
        tmpvar_60 = (((
          (tmpvar_61 * tmpvar_61)
         * 
          (3.0 - (2.0 * tmpvar_61))
        ) - 0.5) * 2.0);
        fTwitch_41 = (tmpvar_39.x * pow (clamp (
          ((((tmpvar_60.x * tmpvar_60.y) * tmpvar_60.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_39.y));
      };
      highp float fAngle_62;
      fAngle_62 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_38)
       + 
        (tmpvar_57 * tmpvar_36)
      ) + fTwitch_41));
      highp vec2 vSinCos_63;
      vSinCos_63.x = sin(fAngle_62);
      vSinCos_63.y = cos(fAngle_62);
      highp float tmpvar_64;
      tmpvar_64 = (1.0 - vSinCos_63.y);
      highp mat3 tmpvar_65;
      tmpvar_65[0].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_63.y);
      tmpvar_65[0].y = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[0].z = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[1].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[1].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_63.y);
      tmpvar_65[1].z = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[2].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].z = (((tmpvar_64 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_63.y);
      highp mat3 tmpvar_66;
      tmpvar_66 = (tmpvar_52 * tmpvar_65);
      vDirection_28 = (tmpvar_66 * _glesNormal);
      vPos_27 = (normalize((tmpvar_66 * vPos_31)) * tmpvar_48);
    };
    tmpvar_16 = vDirection_28;
    FinalPosition_19 = vPos_27;
  };
  highp vec3 tmpvar_67;
  tmpvar_67 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_67;
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_68;
    vPos_68 = tmpvar_67;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_69;
      vPos_69 = tmpvar_67;
      highp float fAdherenceScale_70;
      highp vec3 tmpvar_71;
      tmpvar_71 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_72;
      tmpvar_72 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_73;
      highp float fOscillation_74;
      fOscillation_74 = 1.0;
      highp float fAmount_75;
      highp float fTarget_76;
      highp vec4 tmpvar_77;
      tmpvar_77.x = (tmpvar_72 + _glesMultiTexCoord0.w);
      tmpvar_77.y = ((tmpvar_72 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_77.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_72 + _glesMultiTexCoord0.w));
      tmpvar_77.w = ((tmpvar_72 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      vOscillations_73 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      highp float tmpvar_79;
      tmpvar_79 = (vOscillations_73.y * vOscillations_73.z);
      fTarget_76 = 1.0;
      fAmount_75 = tmpvar_79;
      if ((tmpvar_79 < 0.0)) {
        fTarget_76 = -1.0;
        fAmount_75 = -(tmpvar_79);
      };
      fOscillation_74 = (((
        (mix (mix (tmpvar_79, fTarget_76, fAmount_75), fTarget_76, fAmount_75) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_73.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_73.w * _ST_WindBranchWhip.x)));
      vPos_69 = (tmpvar_67 + ((tmpvar_71 * fOscillation_74) * _ST_WindBranch.y));
      highp vec4 tmpvar_80;
      tmpvar_80.zw = vec2(0.0, 0.0);
      tmpvar_80.x = ((tmpvar_72 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_80.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_81;
      highp vec4 tmpvar_82;
      tmpvar_82 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      tmpvar_81 = (((
        (tmpvar_82 * tmpvar_82)
       * 
        (3.0 - (2.0 * tmpvar_82))
      ) - 0.5) * 2.0);
      fAdherenceScale_70 = (1.0 - ((
        ((tmpvar_81.x * tmpvar_81.y) * tmpvar_81.x)
       * tmpvar_81.y) * _ST_WindTurbulences.x));
      fAdherenceScale_70 = (fAdherenceScale_70 + ((vOscillations_73.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_69 = (vPos_69 + ((
        ((vRotatedBranchAnchor_17 - vPos_69) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_70) * _glesMultiTexCoord0.z));
      vPos_68 = vPos_69;
    } else {
      highp vec3 vPos_83;
      vPos_83 = vPos_68;
      highp vec3 tmpvar_84;
      tmpvar_84 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_85;
      tmpvar_85 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_86;
      highp float fAmount_87;
      highp float fTarget_88;
      highp vec4 tmpvar_89;
      tmpvar_89.w = 0.0;
      tmpvar_89.x = (tmpvar_85 + _glesMultiTexCoord0.w);
      tmpvar_89.y = ((tmpvar_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_89.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_90;
      tmpvar_90 = abs(((
        fract((tmpvar_89 + 0.5))
       * 2.0) - 1.0));
      vOscillations_86 = (((
        (tmpvar_90 * tmpvar_90)
       * 
        (3.0 - (2.0 * tmpvar_90))
      ) - 0.5) * 2.0);
      highp float tmpvar_91;
      tmpvar_91 = (vOscillations_86.y * vOscillations_86.z);
      fTarget_88 = 1.0;
      fAmount_87 = tmpvar_91;
      if ((tmpvar_91 < 0.0)) {
        fTarget_88 = -1.0;
        fAmount_87 = -(tmpvar_91);
      };
      vPos_83 = (vPos_68 + ((tmpvar_84 * 
        (((mix (
          mix (tmpvar_91, fTarget_88, fAmount_87)
        , fTarget_88, fAmount_87) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_86.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_68 = vPos_83;
    };
    FinalPosition_19 = vPos_68;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_92;
    vPos_92 = FinalPosition_19;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_96.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    vPos_92.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_97.x + (tmpvar_97.y * tmpvar_97.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_93)));
    vPos_92 = (normalize(vPos_92) * fLength_94);
    FinalPosition_19 = vPos_92;
  };
  tmpvar_15.xyz = FinalPosition_19;
  highp vec4 tmpvar_99;
  tmpvar_99 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = (tmpvar_99 * 0.5);
  highp vec2 tmpvar_102;
  tmpvar_102.x = tmpvar_101.x;
  tmpvar_102.y = (tmpvar_101.y * _ProjectionParams.x);
  o_100.xy = (tmpvar_102 + tmpvar_101.w);
  o_100.zw = tmpvar_99.zw;
  highp vec3 tmpvar_103;
  tmpvar_103 = o_100.xyw;
  tmpvar_9 = tmpvar_103;
  highp vec2 tmpvar_104;
  tmpvar_104 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_104;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_105;
  v_105.x = _World2Object[0].x;
  v_105.y = _World2Object[1].x;
  v_105.z = _World2Object[2].x;
  v_105.w = _World2Object[3].x;
  highp vec4 v_106;
  v_106.x = _World2Object[0].y;
  v_106.y = _World2Object[1].y;
  v_106.z = _World2Object[2].y;
  v_106.w = _World2Object[3].y;
  highp vec4 v_107;
  v_107.x = _World2Object[0].z;
  v_107.y = _World2Object[1].z;
  v_107.z = _World2Object[2].z;
  v_107.w = _World2Object[3].z;
  highp vec3 tmpvar_108;
  tmpvar_108 = normalize(((
    (v_105.xyz * tmpvar_16.x)
   + 
    (v_106.xyz * tmpvar_16.y)
  ) + (v_107.xyz * tmpvar_16.z)));
  worldNormal_5 = tmpvar_108;
  highp mat3 tmpvar_109;
  tmpvar_109[0] = _Object2World[0].xyz;
  tmpvar_109[1] = _Object2World[1].xyz;
  tmpvar_109[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_110;
  tmpvar_110 = normalize((tmpvar_109 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_110;
  lowp vec3 tmpvar_111;
  tmpvar_111 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_112;
  tmpvar_112 = (tmpvar_111 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_112;
  lowp vec3 tmpvar_113;
  tmpvar_113.x = worldTangent_4.x;
  tmpvar_113.y = worldBinormal_3.x;
  tmpvar_113.z = worldNormal_5.x;
  lowp vec3 tmpvar_114;
  tmpvar_114.x = worldTangent_4.y;
  tmpvar_114.y = worldBinormal_3.y;
  tmpvar_114.z = worldNormal_5.y;
  lowp vec3 tmpvar_115;
  tmpvar_115.x = worldTangent_4.z;
  tmpvar_115.y = worldBinormal_3.z;
  tmpvar_115.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_113;
  xlv_TEXCOORD1 = tmpvar_114;
  xlv_TEXCOORD2 = tmpvar_115;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in lowp vec3 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in mediump vec4 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp float atten_5;
  mediump vec4 lightCoord_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD4;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_7 = tmpvar_9;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_11 = tmpvar_19;
  lowp float x_20;
  x_20 = (tmpvar_11 - _Cutoff);
  if ((x_20 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_21 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_21.x, max (tmpvar_21.y, tmpvar_21.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_22;
  tmpvar_22 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  tmpvar_10 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = ((texture (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD3;
  highp vec4 tmpvar_25;
  tmpvar_25 = (_LightMatrix0 * tmpvar_24);
  lightCoord_6 = tmpvar_25;
  lowp vec4 tmpvar_26;
  mediump vec2 P_27;
  P_27 = ((lightCoord_6.xy / lightCoord_6.w) + 0.5);
  tmpvar_26 = texture (_LightTexture0, P_27);
  mediump float tmpvar_28;
  tmpvar_28 = dot (lightCoord_6.xyz, lightCoord_6.xyz);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture (_LightTextureB0, vec2(tmpvar_28));
  mediump float tmpvar_30;
  tmpvar_30 = ((float(
    (lightCoord_6.z > 0.0)
  ) * tmpvar_26.w) * tmpvar_29.w);
  atten_5 = tmpvar_30;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_23);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_23);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_23);
  lowp vec3 tmpvar_31;
  tmpvar_31 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_31;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_5);
  lowp vec4 c_32;
  lowp vec4 c_33;
  lowp float diff_34;
  mediump float tmpvar_35;
  tmpvar_35 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_34 = tmpvar_35;
  mediump vec3 tmpvar_36;
  tmpvar_36 = ((tmpvar_10 * tmpvar_1) * diff_34);
  c_33.xyz = tmpvar_36;
  c_33.w = tmpvar_11;
  c_32.w = c_33.w;
  mediump vec3 tmpvar_37;
  tmpvar_37 = c_33.xyz;
  c_32.xyz = tmpvar_37;
  c_4.xyz = c_32.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_14;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_23;
  tmpvar_23 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_23;
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_24;
    tmpvar_24 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_25;
    isBestWind_25 = (tmpvar_20 == 4.0);
    bool bLeaf2_26;
    bLeaf2_26 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_27;
    vPos_27 = tmpvar_23;
    highp vec3 vDirection_28;
    vDirection_28 = tmpvar_2;
    highp float tmpvar_29;
    if (bLeaf2_26) {
      tmpvar_29 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_30;
    if (bLeaf2_26) {
      tmpvar_30 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_31;
    highp vec4 tmpvar_32;
    tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_32.x = (tmpvar_29 + tmpvar_24);
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    vPos_31 = (tmpvar_23 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_30 * (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_28 = tmpvar_2;
    vPos_27 = vPos_31;
    if (isBestWind_25) {
      highp vec3 tmpvar_34;
      tmpvar_34 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_35;
      if (bLeaf2_26) {
        tmpvar_35 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_36;
      if (bLeaf2_26) {
        tmpvar_36 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_37;
      if (bLeaf2_26) {
        tmpvar_37 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_38;
      if (bLeaf2_26) {
        tmpvar_38 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_39;
      if (bLeaf2_26) {
        tmpvar_39 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_39 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_40;
      if (bLeaf2_26) {
        tmpvar_40 = bool(1);
      } else {
        tmpvar_40 = bool(1);
      };
      highp float fTwitch_41;
      highp vec3 vAxis_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_35 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_35 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_35 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_35 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_31, vPos_31));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_37) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) + (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) - (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_34.z) * tmpvar_34.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_34.yzx * vRotatedWindVector_18.zxy) - (tmpvar_34.zxy * vRotatedWindVector_18.yzx));
      vAxis_42.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_18, tmpvar_34), -1.0, 1.0);
      vAxis_42.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_42);
      vAxis_42 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_57;
      tmpvar_57 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_41 = 0.0;
      if (tmpvar_40) {
        highp float fTime_58;
        fTime_58 = (tmpvar_39.z + tmpvar_44);
        highp vec4 tmpvar_59;
        tmpvar_59.zw = vec2(0.0, 0.0);
        tmpvar_59.x = fTime_58;
        tmpvar_59.y = (0.87 * fTime_58);
        highp vec4 tmpvar_60;
        highp vec4 tmpvar_61;
        tmpvar_61 = abs(((
          fract((tmpvar_59 + 0.5))
         * 2.0) - 1.0));
        tmpvar_60 = (((
          (tmpvar_61 * tmpvar_61)
         * 
          (3.0 - (2.0 * tmpvar_61))
        ) - 0.5) * 2.0);
        fTwitch_41 = (tmpvar_39.x * pow (clamp (
          ((((tmpvar_60.x * tmpvar_60.y) * tmpvar_60.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_39.y));
      };
      highp float fAngle_62;
      fAngle_62 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_38)
       + 
        (tmpvar_57 * tmpvar_36)
      ) + fTwitch_41));
      highp vec2 vSinCos_63;
      vSinCos_63.x = sin(fAngle_62);
      vSinCos_63.y = cos(fAngle_62);
      highp float tmpvar_64;
      tmpvar_64 = (1.0 - vSinCos_63.y);
      highp mat3 tmpvar_65;
      tmpvar_65[0].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_63.y);
      tmpvar_65[0].y = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[0].z = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[1].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[1].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_63.y);
      tmpvar_65[1].z = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[2].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].z = (((tmpvar_64 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_63.y);
      highp mat3 tmpvar_66;
      tmpvar_66 = (tmpvar_52 * tmpvar_65);
      vDirection_28 = (tmpvar_66 * _glesNormal);
      vPos_27 = (normalize((tmpvar_66 * vPos_31)) * tmpvar_48);
    };
    tmpvar_16 = vDirection_28;
    FinalPosition_19 = vPos_27;
  };
  highp vec3 tmpvar_67;
  tmpvar_67 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_67;
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_68;
    vPos_68 = tmpvar_67;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_69;
      vPos_69 = tmpvar_67;
      highp float fAdherenceScale_70;
      highp vec3 tmpvar_71;
      tmpvar_71 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_72;
      tmpvar_72 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_73;
      highp float fOscillation_74;
      fOscillation_74 = 1.0;
      highp float fAmount_75;
      highp float fTarget_76;
      highp vec4 tmpvar_77;
      tmpvar_77.x = (tmpvar_72 + _glesMultiTexCoord0.w);
      tmpvar_77.y = ((tmpvar_72 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_77.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_72 + _glesMultiTexCoord0.w));
      tmpvar_77.w = ((tmpvar_72 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      vOscillations_73 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      highp float tmpvar_79;
      tmpvar_79 = (vOscillations_73.y * vOscillations_73.z);
      fTarget_76 = 1.0;
      fAmount_75 = tmpvar_79;
      if ((tmpvar_79 < 0.0)) {
        fTarget_76 = -1.0;
        fAmount_75 = -(tmpvar_79);
      };
      fOscillation_74 = (((
        (mix (mix (tmpvar_79, fTarget_76, fAmount_75), fTarget_76, fAmount_75) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_73.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_73.w * _ST_WindBranchWhip.x)));
      vPos_69 = (tmpvar_67 + ((tmpvar_71 * fOscillation_74) * _ST_WindBranch.y));
      highp vec4 tmpvar_80;
      tmpvar_80.zw = vec2(0.0, 0.0);
      tmpvar_80.x = ((tmpvar_72 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_80.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_81;
      highp vec4 tmpvar_82;
      tmpvar_82 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      tmpvar_81 = (((
        (tmpvar_82 * tmpvar_82)
       * 
        (3.0 - (2.0 * tmpvar_82))
      ) - 0.5) * 2.0);
      fAdherenceScale_70 = (1.0 - ((
        ((tmpvar_81.x * tmpvar_81.y) * tmpvar_81.x)
       * tmpvar_81.y) * _ST_WindTurbulences.x));
      fAdherenceScale_70 = (fAdherenceScale_70 + ((vOscillations_73.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_69 = (vPos_69 + ((
        ((vRotatedBranchAnchor_17 - vPos_69) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_70) * _glesMultiTexCoord0.z));
      vPos_68 = vPos_69;
    } else {
      highp vec3 vPos_83;
      vPos_83 = vPos_68;
      highp vec3 tmpvar_84;
      tmpvar_84 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_85;
      tmpvar_85 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_86;
      highp float fAmount_87;
      highp float fTarget_88;
      highp vec4 tmpvar_89;
      tmpvar_89.w = 0.0;
      tmpvar_89.x = (tmpvar_85 + _glesMultiTexCoord0.w);
      tmpvar_89.y = ((tmpvar_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_89.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_90;
      tmpvar_90 = abs(((
        fract((tmpvar_89 + 0.5))
       * 2.0) - 1.0));
      vOscillations_86 = (((
        (tmpvar_90 * tmpvar_90)
       * 
        (3.0 - (2.0 * tmpvar_90))
      ) - 0.5) * 2.0);
      highp float tmpvar_91;
      tmpvar_91 = (vOscillations_86.y * vOscillations_86.z);
      fTarget_88 = 1.0;
      fAmount_87 = tmpvar_91;
      if ((tmpvar_91 < 0.0)) {
        fTarget_88 = -1.0;
        fAmount_87 = -(tmpvar_91);
      };
      vPos_83 = (vPos_68 + ((tmpvar_84 * 
        (((mix (
          mix (tmpvar_91, fTarget_88, fAmount_87)
        , fTarget_88, fAmount_87) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_86.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_68 = vPos_83;
    };
    FinalPosition_19 = vPos_68;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_92;
    vPos_92 = FinalPosition_19;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_96.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    vPos_92.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_97.x + (tmpvar_97.y * tmpvar_97.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_93)));
    vPos_92 = (normalize(vPos_92) * fLength_94);
    FinalPosition_19 = vPos_92;
  };
  tmpvar_15.xyz = FinalPosition_19;
  highp vec4 tmpvar_99;
  tmpvar_99 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = (tmpvar_99 * 0.5);
  highp vec2 tmpvar_102;
  tmpvar_102.x = tmpvar_101.x;
  tmpvar_102.y = (tmpvar_101.y * _ProjectionParams.x);
  o_100.xy = (tmpvar_102 + tmpvar_101.w);
  o_100.zw = tmpvar_99.zw;
  highp vec3 tmpvar_103;
  tmpvar_103 = o_100.xyw;
  tmpvar_9 = tmpvar_103;
  highp vec2 tmpvar_104;
  tmpvar_104 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_104;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_105;
  v_105.x = _World2Object[0].x;
  v_105.y = _World2Object[1].x;
  v_105.z = _World2Object[2].x;
  v_105.w = _World2Object[3].x;
  highp vec4 v_106;
  v_106.x = _World2Object[0].y;
  v_106.y = _World2Object[1].y;
  v_106.z = _World2Object[2].y;
  v_106.w = _World2Object[3].y;
  highp vec4 v_107;
  v_107.x = _World2Object[0].z;
  v_107.y = _World2Object[1].z;
  v_107.z = _World2Object[2].z;
  v_107.w = _World2Object[3].z;
  highp vec3 tmpvar_108;
  tmpvar_108 = normalize(((
    (v_105.xyz * tmpvar_16.x)
   + 
    (v_106.xyz * tmpvar_16.y)
  ) + (v_107.xyz * tmpvar_16.z)));
  worldNormal_5 = tmpvar_108;
  highp mat3 tmpvar_109;
  tmpvar_109[0] = _Object2World[0].xyz;
  tmpvar_109[1] = _Object2World[1].xyz;
  tmpvar_109[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_110;
  tmpvar_110 = normalize((tmpvar_109 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_110;
  lowp vec3 tmpvar_111;
  tmpvar_111 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_112;
  tmpvar_112 = (tmpvar_111 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_112;
  lowp vec3 tmpvar_113;
  tmpvar_113.x = worldTangent_4.x;
  tmpvar_113.y = worldBinormal_3.x;
  tmpvar_113.z = worldNormal_5.x;
  lowp vec3 tmpvar_114;
  tmpvar_114.x = worldTangent_4.y;
  tmpvar_114.y = worldBinormal_3.y;
  tmpvar_114.z = worldNormal_5.y;
  lowp vec3 tmpvar_115;
  tmpvar_115.x = worldTangent_4.z;
  tmpvar_115.y = worldBinormal_3.z;
  tmpvar_115.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_113;
  xlv_TEXCOORD1 = tmpvar_114;
  xlv_TEXCOORD2 = tmpvar_115;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec3 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_24;
  tmpvar_24 = (_LightMatrix0 * tmpvar_23).xyz;
  lightCoord_5 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (lightCoord_5, lightCoord_5);
  lowp float tmpvar_26;
  tmpvar_26 = (texture2D (_LightTextureB0, vec2(tmpvar_25)).w * textureCube (_LightTexture0, lightCoord_5).w);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_22);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_22);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_22);
  lowp vec3 tmpvar_27;
  tmpvar_27 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_27;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_26);
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_30 = tmpvar_31;
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tmpvar_9 * tmpvar_1) * diff_30);
  c_29.xyz = tmpvar_32;
  c_29.w = tmpvar_10;
  c_28.w = c_29.w;
  mediump vec3 tmpvar_33;
  tmpvar_33 = c_29.xyz;
  c_28.xyz = tmpvar_33;
  c_4.xyz = c_28.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
in vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out lowp vec3 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out mediump vec4 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_14;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_23;
  tmpvar_23 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_23;
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_24;
    tmpvar_24 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_25;
    isBestWind_25 = (tmpvar_20 == 4.0);
    bool bLeaf2_26;
    bLeaf2_26 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_27;
    vPos_27 = tmpvar_23;
    highp vec3 vDirection_28;
    vDirection_28 = tmpvar_2;
    highp float tmpvar_29;
    if (bLeaf2_26) {
      tmpvar_29 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_30;
    if (bLeaf2_26) {
      tmpvar_30 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_31;
    highp vec4 tmpvar_32;
    tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_32.x = (tmpvar_29 + tmpvar_24);
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    vPos_31 = (tmpvar_23 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_30 * (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_28 = tmpvar_2;
    vPos_27 = vPos_31;
    if (isBestWind_25) {
      highp vec3 tmpvar_34;
      tmpvar_34 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_35;
      if (bLeaf2_26) {
        tmpvar_35 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_36;
      if (bLeaf2_26) {
        tmpvar_36 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_37;
      if (bLeaf2_26) {
        tmpvar_37 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_38;
      if (bLeaf2_26) {
        tmpvar_38 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_39;
      if (bLeaf2_26) {
        tmpvar_39 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_39 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_40;
      if (bLeaf2_26) {
        tmpvar_40 = bool(1);
      } else {
        tmpvar_40 = bool(1);
      };
      highp float fTwitch_41;
      highp vec3 vAxis_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_35 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_35 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_35 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_35 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_31, vPos_31));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_37) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) + (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) - (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_34.z) * tmpvar_34.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_34.yzx * vRotatedWindVector_18.zxy) - (tmpvar_34.zxy * vRotatedWindVector_18.yzx));
      vAxis_42.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_18, tmpvar_34), -1.0, 1.0);
      vAxis_42.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_42);
      vAxis_42 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_57;
      tmpvar_57 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_41 = 0.0;
      if (tmpvar_40) {
        highp float fTime_58;
        fTime_58 = (tmpvar_39.z + tmpvar_44);
        highp vec4 tmpvar_59;
        tmpvar_59.zw = vec2(0.0, 0.0);
        tmpvar_59.x = fTime_58;
        tmpvar_59.y = (0.87 * fTime_58);
        highp vec4 tmpvar_60;
        highp vec4 tmpvar_61;
        tmpvar_61 = abs(((
          fract((tmpvar_59 + 0.5))
         * 2.0) - 1.0));
        tmpvar_60 = (((
          (tmpvar_61 * tmpvar_61)
         * 
          (3.0 - (2.0 * tmpvar_61))
        ) - 0.5) * 2.0);
        fTwitch_41 = (tmpvar_39.x * pow (clamp (
          ((((tmpvar_60.x * tmpvar_60.y) * tmpvar_60.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_39.y));
      };
      highp float fAngle_62;
      fAngle_62 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_38)
       + 
        (tmpvar_57 * tmpvar_36)
      ) + fTwitch_41));
      highp vec2 vSinCos_63;
      vSinCos_63.x = sin(fAngle_62);
      vSinCos_63.y = cos(fAngle_62);
      highp float tmpvar_64;
      tmpvar_64 = (1.0 - vSinCos_63.y);
      highp mat3 tmpvar_65;
      tmpvar_65[0].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_63.y);
      tmpvar_65[0].y = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[0].z = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[1].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[1].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_63.y);
      tmpvar_65[1].z = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[2].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].z = (((tmpvar_64 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_63.y);
      highp mat3 tmpvar_66;
      tmpvar_66 = (tmpvar_52 * tmpvar_65);
      vDirection_28 = (tmpvar_66 * _glesNormal);
      vPos_27 = (normalize((tmpvar_66 * vPos_31)) * tmpvar_48);
    };
    tmpvar_16 = vDirection_28;
    FinalPosition_19 = vPos_27;
  };
  highp vec3 tmpvar_67;
  tmpvar_67 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_67;
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_68;
    vPos_68 = tmpvar_67;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_69;
      vPos_69 = tmpvar_67;
      highp float fAdherenceScale_70;
      highp vec3 tmpvar_71;
      tmpvar_71 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_72;
      tmpvar_72 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_73;
      highp float fOscillation_74;
      fOscillation_74 = 1.0;
      highp float fAmount_75;
      highp float fTarget_76;
      highp vec4 tmpvar_77;
      tmpvar_77.x = (tmpvar_72 + _glesMultiTexCoord0.w);
      tmpvar_77.y = ((tmpvar_72 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_77.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_72 + _glesMultiTexCoord0.w));
      tmpvar_77.w = ((tmpvar_72 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      vOscillations_73 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      highp float tmpvar_79;
      tmpvar_79 = (vOscillations_73.y * vOscillations_73.z);
      fTarget_76 = 1.0;
      fAmount_75 = tmpvar_79;
      if ((tmpvar_79 < 0.0)) {
        fTarget_76 = -1.0;
        fAmount_75 = -(tmpvar_79);
      };
      fOscillation_74 = (((
        (mix (mix (tmpvar_79, fTarget_76, fAmount_75), fTarget_76, fAmount_75) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_73.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_73.w * _ST_WindBranchWhip.x)));
      vPos_69 = (tmpvar_67 + ((tmpvar_71 * fOscillation_74) * _ST_WindBranch.y));
      highp vec4 tmpvar_80;
      tmpvar_80.zw = vec2(0.0, 0.0);
      tmpvar_80.x = ((tmpvar_72 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_80.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_81;
      highp vec4 tmpvar_82;
      tmpvar_82 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      tmpvar_81 = (((
        (tmpvar_82 * tmpvar_82)
       * 
        (3.0 - (2.0 * tmpvar_82))
      ) - 0.5) * 2.0);
      fAdherenceScale_70 = (1.0 - ((
        ((tmpvar_81.x * tmpvar_81.y) * tmpvar_81.x)
       * tmpvar_81.y) * _ST_WindTurbulences.x));
      fAdherenceScale_70 = (fAdherenceScale_70 + ((vOscillations_73.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_69 = (vPos_69 + ((
        ((vRotatedBranchAnchor_17 - vPos_69) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_70) * _glesMultiTexCoord0.z));
      vPos_68 = vPos_69;
    } else {
      highp vec3 vPos_83;
      vPos_83 = vPos_68;
      highp vec3 tmpvar_84;
      tmpvar_84 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_85;
      tmpvar_85 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_86;
      highp float fAmount_87;
      highp float fTarget_88;
      highp vec4 tmpvar_89;
      tmpvar_89.w = 0.0;
      tmpvar_89.x = (tmpvar_85 + _glesMultiTexCoord0.w);
      tmpvar_89.y = ((tmpvar_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_89.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_90;
      tmpvar_90 = abs(((
        fract((tmpvar_89 + 0.5))
       * 2.0) - 1.0));
      vOscillations_86 = (((
        (tmpvar_90 * tmpvar_90)
       * 
        (3.0 - (2.0 * tmpvar_90))
      ) - 0.5) * 2.0);
      highp float tmpvar_91;
      tmpvar_91 = (vOscillations_86.y * vOscillations_86.z);
      fTarget_88 = 1.0;
      fAmount_87 = tmpvar_91;
      if ((tmpvar_91 < 0.0)) {
        fTarget_88 = -1.0;
        fAmount_87 = -(tmpvar_91);
      };
      vPos_83 = (vPos_68 + ((tmpvar_84 * 
        (((mix (
          mix (tmpvar_91, fTarget_88, fAmount_87)
        , fTarget_88, fAmount_87) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_86.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_68 = vPos_83;
    };
    FinalPosition_19 = vPos_68;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_92;
    vPos_92 = FinalPosition_19;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_96.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    vPos_92.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_97.x + (tmpvar_97.y * tmpvar_97.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_93)));
    vPos_92 = (normalize(vPos_92) * fLength_94);
    FinalPosition_19 = vPos_92;
  };
  tmpvar_15.xyz = FinalPosition_19;
  highp vec4 tmpvar_99;
  tmpvar_99 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = (tmpvar_99 * 0.5);
  highp vec2 tmpvar_102;
  tmpvar_102.x = tmpvar_101.x;
  tmpvar_102.y = (tmpvar_101.y * _ProjectionParams.x);
  o_100.xy = (tmpvar_102 + tmpvar_101.w);
  o_100.zw = tmpvar_99.zw;
  highp vec3 tmpvar_103;
  tmpvar_103 = o_100.xyw;
  tmpvar_9 = tmpvar_103;
  highp vec2 tmpvar_104;
  tmpvar_104 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_104;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_105;
  v_105.x = _World2Object[0].x;
  v_105.y = _World2Object[1].x;
  v_105.z = _World2Object[2].x;
  v_105.w = _World2Object[3].x;
  highp vec4 v_106;
  v_106.x = _World2Object[0].y;
  v_106.y = _World2Object[1].y;
  v_106.z = _World2Object[2].y;
  v_106.w = _World2Object[3].y;
  highp vec4 v_107;
  v_107.x = _World2Object[0].z;
  v_107.y = _World2Object[1].z;
  v_107.z = _World2Object[2].z;
  v_107.w = _World2Object[3].z;
  highp vec3 tmpvar_108;
  tmpvar_108 = normalize(((
    (v_105.xyz * tmpvar_16.x)
   + 
    (v_106.xyz * tmpvar_16.y)
  ) + (v_107.xyz * tmpvar_16.z)));
  worldNormal_5 = tmpvar_108;
  highp mat3 tmpvar_109;
  tmpvar_109[0] = _Object2World[0].xyz;
  tmpvar_109[1] = _Object2World[1].xyz;
  tmpvar_109[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_110;
  tmpvar_110 = normalize((tmpvar_109 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_110;
  lowp vec3 tmpvar_111;
  tmpvar_111 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_112;
  tmpvar_112 = (tmpvar_111 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_112;
  lowp vec3 tmpvar_113;
  tmpvar_113.x = worldTangent_4.x;
  tmpvar_113.y = worldBinormal_3.x;
  tmpvar_113.z = worldNormal_5.x;
  lowp vec3 tmpvar_114;
  tmpvar_114.x = worldTangent_4.y;
  tmpvar_114.y = worldBinormal_3.y;
  tmpvar_114.z = worldNormal_5.y;
  lowp vec3 tmpvar_115;
  tmpvar_115.x = worldTangent_4.z;
  tmpvar_115.y = worldBinormal_3.z;
  tmpvar_115.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_113;
  xlv_TEXCOORD1 = tmpvar_114;
  xlv_TEXCOORD2 = tmpvar_115;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in lowp vec3 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in mediump vec4 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec3 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_24;
  tmpvar_24 = (_LightMatrix0 * tmpvar_23).xyz;
  lightCoord_5 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (lightCoord_5, lightCoord_5);
  lowp float tmpvar_26;
  tmpvar_26 = (texture (_LightTextureB0, vec2(tmpvar_25)).w * texture (_LightTexture0, lightCoord_5).w);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_22);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_22);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_22);
  lowp vec3 tmpvar_27;
  tmpvar_27 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_27;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_26);
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_30 = tmpvar_31;
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tmpvar_9 * tmpvar_1) * diff_30);
  c_29.xyz = tmpvar_32;
  c_29.w = tmpvar_10;
  c_28.w = c_29.w;
  mediump vec3 tmpvar_33;
  tmpvar_33 = c_29.xyz;
  c_28.xyz = tmpvar_33;
  c_4.xyz = c_28.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_14;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_23;
  tmpvar_23 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_23;
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_24;
    tmpvar_24 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_25;
    isBestWind_25 = (tmpvar_20 == 4.0);
    bool bLeaf2_26;
    bLeaf2_26 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_27;
    vPos_27 = tmpvar_23;
    highp vec3 vDirection_28;
    vDirection_28 = tmpvar_2;
    highp float tmpvar_29;
    if (bLeaf2_26) {
      tmpvar_29 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_30;
    if (bLeaf2_26) {
      tmpvar_30 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_31;
    highp vec4 tmpvar_32;
    tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_32.x = (tmpvar_29 + tmpvar_24);
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    vPos_31 = (tmpvar_23 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_30 * (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_28 = tmpvar_2;
    vPos_27 = vPos_31;
    if (isBestWind_25) {
      highp vec3 tmpvar_34;
      tmpvar_34 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_35;
      if (bLeaf2_26) {
        tmpvar_35 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_36;
      if (bLeaf2_26) {
        tmpvar_36 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_37;
      if (bLeaf2_26) {
        tmpvar_37 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_38;
      if (bLeaf2_26) {
        tmpvar_38 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_39;
      if (bLeaf2_26) {
        tmpvar_39 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_39 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_40;
      if (bLeaf2_26) {
        tmpvar_40 = bool(1);
      } else {
        tmpvar_40 = bool(1);
      };
      highp float fTwitch_41;
      highp vec3 vAxis_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_35 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_35 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_35 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_35 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_31, vPos_31));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_37) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) + (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) - (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_34.z) * tmpvar_34.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_34.yzx * vRotatedWindVector_18.zxy) - (tmpvar_34.zxy * vRotatedWindVector_18.yzx));
      vAxis_42.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_18, tmpvar_34), -1.0, 1.0);
      vAxis_42.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_42);
      vAxis_42 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_57;
      tmpvar_57 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_41 = 0.0;
      if (tmpvar_40) {
        highp float fTime_58;
        fTime_58 = (tmpvar_39.z + tmpvar_44);
        highp vec4 tmpvar_59;
        tmpvar_59.zw = vec2(0.0, 0.0);
        tmpvar_59.x = fTime_58;
        tmpvar_59.y = (0.87 * fTime_58);
        highp vec4 tmpvar_60;
        highp vec4 tmpvar_61;
        tmpvar_61 = abs(((
          fract((tmpvar_59 + 0.5))
         * 2.0) - 1.0));
        tmpvar_60 = (((
          (tmpvar_61 * tmpvar_61)
         * 
          (3.0 - (2.0 * tmpvar_61))
        ) - 0.5) * 2.0);
        fTwitch_41 = (tmpvar_39.x * pow (clamp (
          ((((tmpvar_60.x * tmpvar_60.y) * tmpvar_60.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_39.y));
      };
      highp float fAngle_62;
      fAngle_62 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_38)
       + 
        (tmpvar_57 * tmpvar_36)
      ) + fTwitch_41));
      highp vec2 vSinCos_63;
      vSinCos_63.x = sin(fAngle_62);
      vSinCos_63.y = cos(fAngle_62);
      highp float tmpvar_64;
      tmpvar_64 = (1.0 - vSinCos_63.y);
      highp mat3 tmpvar_65;
      tmpvar_65[0].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_63.y);
      tmpvar_65[0].y = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[0].z = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[1].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[1].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_63.y);
      tmpvar_65[1].z = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[2].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].z = (((tmpvar_64 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_63.y);
      highp mat3 tmpvar_66;
      tmpvar_66 = (tmpvar_52 * tmpvar_65);
      vDirection_28 = (tmpvar_66 * _glesNormal);
      vPos_27 = (normalize((tmpvar_66 * vPos_31)) * tmpvar_48);
    };
    tmpvar_16 = vDirection_28;
    FinalPosition_19 = vPos_27;
  };
  highp vec3 tmpvar_67;
  tmpvar_67 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_67;
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_68;
    vPos_68 = tmpvar_67;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_69;
      vPos_69 = tmpvar_67;
      highp float fAdherenceScale_70;
      highp vec3 tmpvar_71;
      tmpvar_71 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_72;
      tmpvar_72 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_73;
      highp float fOscillation_74;
      fOscillation_74 = 1.0;
      highp float fAmount_75;
      highp float fTarget_76;
      highp vec4 tmpvar_77;
      tmpvar_77.x = (tmpvar_72 + _glesMultiTexCoord0.w);
      tmpvar_77.y = ((tmpvar_72 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_77.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_72 + _glesMultiTexCoord0.w));
      tmpvar_77.w = ((tmpvar_72 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      vOscillations_73 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      highp float tmpvar_79;
      tmpvar_79 = (vOscillations_73.y * vOscillations_73.z);
      fTarget_76 = 1.0;
      fAmount_75 = tmpvar_79;
      if ((tmpvar_79 < 0.0)) {
        fTarget_76 = -1.0;
        fAmount_75 = -(tmpvar_79);
      };
      fOscillation_74 = (((
        (mix (mix (tmpvar_79, fTarget_76, fAmount_75), fTarget_76, fAmount_75) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_73.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_73.w * _ST_WindBranchWhip.x)));
      vPos_69 = (tmpvar_67 + ((tmpvar_71 * fOscillation_74) * _ST_WindBranch.y));
      highp vec4 tmpvar_80;
      tmpvar_80.zw = vec2(0.0, 0.0);
      tmpvar_80.x = ((tmpvar_72 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_80.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_81;
      highp vec4 tmpvar_82;
      tmpvar_82 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      tmpvar_81 = (((
        (tmpvar_82 * tmpvar_82)
       * 
        (3.0 - (2.0 * tmpvar_82))
      ) - 0.5) * 2.0);
      fAdherenceScale_70 = (1.0 - ((
        ((tmpvar_81.x * tmpvar_81.y) * tmpvar_81.x)
       * tmpvar_81.y) * _ST_WindTurbulences.x));
      fAdherenceScale_70 = (fAdherenceScale_70 + ((vOscillations_73.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_69 = (vPos_69 + ((
        ((vRotatedBranchAnchor_17 - vPos_69) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_70) * _glesMultiTexCoord0.z));
      vPos_68 = vPos_69;
    } else {
      highp vec3 vPos_83;
      vPos_83 = vPos_68;
      highp vec3 tmpvar_84;
      tmpvar_84 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_85;
      tmpvar_85 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_86;
      highp float fAmount_87;
      highp float fTarget_88;
      highp vec4 tmpvar_89;
      tmpvar_89.w = 0.0;
      tmpvar_89.x = (tmpvar_85 + _glesMultiTexCoord0.w);
      tmpvar_89.y = ((tmpvar_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_89.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_90;
      tmpvar_90 = abs(((
        fract((tmpvar_89 + 0.5))
       * 2.0) - 1.0));
      vOscillations_86 = (((
        (tmpvar_90 * tmpvar_90)
       * 
        (3.0 - (2.0 * tmpvar_90))
      ) - 0.5) * 2.0);
      highp float tmpvar_91;
      tmpvar_91 = (vOscillations_86.y * vOscillations_86.z);
      fTarget_88 = 1.0;
      fAmount_87 = tmpvar_91;
      if ((tmpvar_91 < 0.0)) {
        fTarget_88 = -1.0;
        fAmount_87 = -(tmpvar_91);
      };
      vPos_83 = (vPos_68 + ((tmpvar_84 * 
        (((mix (
          mix (tmpvar_91, fTarget_88, fAmount_87)
        , fTarget_88, fAmount_87) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_86.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_68 = vPos_83;
    };
    FinalPosition_19 = vPos_68;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_92;
    vPos_92 = FinalPosition_19;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_96.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    vPos_92.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_97.x + (tmpvar_97.y * tmpvar_97.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_93)));
    vPos_92 = (normalize(vPos_92) * fLength_94);
    FinalPosition_19 = vPos_92;
  };
  tmpvar_15.xyz = FinalPosition_19;
  highp vec4 tmpvar_99;
  tmpvar_99 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = (tmpvar_99 * 0.5);
  highp vec2 tmpvar_102;
  tmpvar_102.x = tmpvar_101.x;
  tmpvar_102.y = (tmpvar_101.y * _ProjectionParams.x);
  o_100.xy = (tmpvar_102 + tmpvar_101.w);
  o_100.zw = tmpvar_99.zw;
  highp vec3 tmpvar_103;
  tmpvar_103 = o_100.xyw;
  tmpvar_9 = tmpvar_103;
  highp vec2 tmpvar_104;
  tmpvar_104 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_104;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_105;
  v_105.x = _World2Object[0].x;
  v_105.y = _World2Object[1].x;
  v_105.z = _World2Object[2].x;
  v_105.w = _World2Object[3].x;
  highp vec4 v_106;
  v_106.x = _World2Object[0].y;
  v_106.y = _World2Object[1].y;
  v_106.z = _World2Object[2].y;
  v_106.w = _World2Object[3].y;
  highp vec4 v_107;
  v_107.x = _World2Object[0].z;
  v_107.y = _World2Object[1].z;
  v_107.z = _World2Object[2].z;
  v_107.w = _World2Object[3].z;
  highp vec3 tmpvar_108;
  tmpvar_108 = normalize(((
    (v_105.xyz * tmpvar_16.x)
   + 
    (v_106.xyz * tmpvar_16.y)
  ) + (v_107.xyz * tmpvar_16.z)));
  worldNormal_5 = tmpvar_108;
  highp mat3 tmpvar_109;
  tmpvar_109[0] = _Object2World[0].xyz;
  tmpvar_109[1] = _Object2World[1].xyz;
  tmpvar_109[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_110;
  tmpvar_110 = normalize((tmpvar_109 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_110;
  lowp vec3 tmpvar_111;
  tmpvar_111 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_112;
  tmpvar_112 = (tmpvar_111 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_112;
  lowp vec3 tmpvar_113;
  tmpvar_113.x = worldTangent_4.x;
  tmpvar_113.y = worldBinormal_3.x;
  tmpvar_113.z = worldNormal_5.x;
  lowp vec3 tmpvar_114;
  tmpvar_114.x = worldTangent_4.y;
  tmpvar_114.y = worldBinormal_3.y;
  tmpvar_114.z = worldNormal_5.y;
  lowp vec3 tmpvar_115;
  tmpvar_115.x = worldTangent_4.z;
  tmpvar_115.y = worldBinormal_3.z;
  tmpvar_115.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_113;
  xlv_TEXCOORD1 = tmpvar_114;
  xlv_TEXCOORD2 = tmpvar_115;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec2 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = xlv_TEXCOORD3;
  highp vec2 tmpvar_24;
  tmpvar_24 = (_LightMatrix0 * tmpvar_23).xy;
  lightCoord_5 = tmpvar_24;
  lowp float tmpvar_25;
  tmpvar_25 = texture2D (_LightTexture0, lightCoord_5).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_22);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_22);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_22);
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_26;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_25);
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_29 = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tmpvar_9 * tmpvar_1) * diff_29);
  c_28.xyz = tmpvar_31;
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  mediump vec3 tmpvar_32;
  tmpvar_32 = c_28.xyz;
  c_27.xyz = tmpvar_32;
  c_4.xyz = c_27.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
in vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out lowp vec3 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out mediump vec4 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_14;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_23;
  tmpvar_23 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_23;
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_24;
    tmpvar_24 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_25;
    isBestWind_25 = (tmpvar_20 == 4.0);
    bool bLeaf2_26;
    bLeaf2_26 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_27;
    vPos_27 = tmpvar_23;
    highp vec3 vDirection_28;
    vDirection_28 = tmpvar_2;
    highp float tmpvar_29;
    if (bLeaf2_26) {
      tmpvar_29 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_30;
    if (bLeaf2_26) {
      tmpvar_30 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_31;
    highp vec4 tmpvar_32;
    tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_32.x = (tmpvar_29 + tmpvar_24);
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    vPos_31 = (tmpvar_23 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_30 * (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_28 = tmpvar_2;
    vPos_27 = vPos_31;
    if (isBestWind_25) {
      highp vec3 tmpvar_34;
      tmpvar_34 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_35;
      if (bLeaf2_26) {
        tmpvar_35 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_36;
      if (bLeaf2_26) {
        tmpvar_36 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_37;
      if (bLeaf2_26) {
        tmpvar_37 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_38;
      if (bLeaf2_26) {
        tmpvar_38 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_39;
      if (bLeaf2_26) {
        tmpvar_39 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_39 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_40;
      if (bLeaf2_26) {
        tmpvar_40 = bool(1);
      } else {
        tmpvar_40 = bool(1);
      };
      highp float fTwitch_41;
      highp vec3 vAxis_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_35 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_35 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_35 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_35 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_31, vPos_31));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_37) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) + (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) - (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_34.z) * tmpvar_34.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_34.yzx * vRotatedWindVector_18.zxy) - (tmpvar_34.zxy * vRotatedWindVector_18.yzx));
      vAxis_42.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_18, tmpvar_34), -1.0, 1.0);
      vAxis_42.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_42);
      vAxis_42 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_57;
      tmpvar_57 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_41 = 0.0;
      if (tmpvar_40) {
        highp float fTime_58;
        fTime_58 = (tmpvar_39.z + tmpvar_44);
        highp vec4 tmpvar_59;
        tmpvar_59.zw = vec2(0.0, 0.0);
        tmpvar_59.x = fTime_58;
        tmpvar_59.y = (0.87 * fTime_58);
        highp vec4 tmpvar_60;
        highp vec4 tmpvar_61;
        tmpvar_61 = abs(((
          fract((tmpvar_59 + 0.5))
         * 2.0) - 1.0));
        tmpvar_60 = (((
          (tmpvar_61 * tmpvar_61)
         * 
          (3.0 - (2.0 * tmpvar_61))
        ) - 0.5) * 2.0);
        fTwitch_41 = (tmpvar_39.x * pow (clamp (
          ((((tmpvar_60.x * tmpvar_60.y) * tmpvar_60.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_39.y));
      };
      highp float fAngle_62;
      fAngle_62 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_38)
       + 
        (tmpvar_57 * tmpvar_36)
      ) + fTwitch_41));
      highp vec2 vSinCos_63;
      vSinCos_63.x = sin(fAngle_62);
      vSinCos_63.y = cos(fAngle_62);
      highp float tmpvar_64;
      tmpvar_64 = (1.0 - vSinCos_63.y);
      highp mat3 tmpvar_65;
      tmpvar_65[0].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_63.y);
      tmpvar_65[0].y = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[0].z = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[1].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[1].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_63.y);
      tmpvar_65[1].z = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[2].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].z = (((tmpvar_64 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_63.y);
      highp mat3 tmpvar_66;
      tmpvar_66 = (tmpvar_52 * tmpvar_65);
      vDirection_28 = (tmpvar_66 * _glesNormal);
      vPos_27 = (normalize((tmpvar_66 * vPos_31)) * tmpvar_48);
    };
    tmpvar_16 = vDirection_28;
    FinalPosition_19 = vPos_27;
  };
  highp vec3 tmpvar_67;
  tmpvar_67 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_67;
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_68;
    vPos_68 = tmpvar_67;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_69;
      vPos_69 = tmpvar_67;
      highp float fAdherenceScale_70;
      highp vec3 tmpvar_71;
      tmpvar_71 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_72;
      tmpvar_72 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_73;
      highp float fOscillation_74;
      fOscillation_74 = 1.0;
      highp float fAmount_75;
      highp float fTarget_76;
      highp vec4 tmpvar_77;
      tmpvar_77.x = (tmpvar_72 + _glesMultiTexCoord0.w);
      tmpvar_77.y = ((tmpvar_72 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_77.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_72 + _glesMultiTexCoord0.w));
      tmpvar_77.w = ((tmpvar_72 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      vOscillations_73 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      highp float tmpvar_79;
      tmpvar_79 = (vOscillations_73.y * vOscillations_73.z);
      fTarget_76 = 1.0;
      fAmount_75 = tmpvar_79;
      if ((tmpvar_79 < 0.0)) {
        fTarget_76 = -1.0;
        fAmount_75 = -(tmpvar_79);
      };
      fOscillation_74 = (((
        (mix (mix (tmpvar_79, fTarget_76, fAmount_75), fTarget_76, fAmount_75) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_73.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_73.w * _ST_WindBranchWhip.x)));
      vPos_69 = (tmpvar_67 + ((tmpvar_71 * fOscillation_74) * _ST_WindBranch.y));
      highp vec4 tmpvar_80;
      tmpvar_80.zw = vec2(0.0, 0.0);
      tmpvar_80.x = ((tmpvar_72 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_80.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_81;
      highp vec4 tmpvar_82;
      tmpvar_82 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      tmpvar_81 = (((
        (tmpvar_82 * tmpvar_82)
       * 
        (3.0 - (2.0 * tmpvar_82))
      ) - 0.5) * 2.0);
      fAdherenceScale_70 = (1.0 - ((
        ((tmpvar_81.x * tmpvar_81.y) * tmpvar_81.x)
       * tmpvar_81.y) * _ST_WindTurbulences.x));
      fAdherenceScale_70 = (fAdherenceScale_70 + ((vOscillations_73.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_69 = (vPos_69 + ((
        ((vRotatedBranchAnchor_17 - vPos_69) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_70) * _glesMultiTexCoord0.z));
      vPos_68 = vPos_69;
    } else {
      highp vec3 vPos_83;
      vPos_83 = vPos_68;
      highp vec3 tmpvar_84;
      tmpvar_84 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_85;
      tmpvar_85 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_86;
      highp float fAmount_87;
      highp float fTarget_88;
      highp vec4 tmpvar_89;
      tmpvar_89.w = 0.0;
      tmpvar_89.x = (tmpvar_85 + _glesMultiTexCoord0.w);
      tmpvar_89.y = ((tmpvar_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_89.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_90;
      tmpvar_90 = abs(((
        fract((tmpvar_89 + 0.5))
       * 2.0) - 1.0));
      vOscillations_86 = (((
        (tmpvar_90 * tmpvar_90)
       * 
        (3.0 - (2.0 * tmpvar_90))
      ) - 0.5) * 2.0);
      highp float tmpvar_91;
      tmpvar_91 = (vOscillations_86.y * vOscillations_86.z);
      fTarget_88 = 1.0;
      fAmount_87 = tmpvar_91;
      if ((tmpvar_91 < 0.0)) {
        fTarget_88 = -1.0;
        fAmount_87 = -(tmpvar_91);
      };
      vPos_83 = (vPos_68 + ((tmpvar_84 * 
        (((mix (
          mix (tmpvar_91, fTarget_88, fAmount_87)
        , fTarget_88, fAmount_87) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_86.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_68 = vPos_83;
    };
    FinalPosition_19 = vPos_68;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_92;
    vPos_92 = FinalPosition_19;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_96.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    vPos_92.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_97.x + (tmpvar_97.y * tmpvar_97.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_93)));
    vPos_92 = (normalize(vPos_92) * fLength_94);
    FinalPosition_19 = vPos_92;
  };
  tmpvar_15.xyz = FinalPosition_19;
  highp vec4 tmpvar_99;
  tmpvar_99 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = (tmpvar_99 * 0.5);
  highp vec2 tmpvar_102;
  tmpvar_102.x = tmpvar_101.x;
  tmpvar_102.y = (tmpvar_101.y * _ProjectionParams.x);
  o_100.xy = (tmpvar_102 + tmpvar_101.w);
  o_100.zw = tmpvar_99.zw;
  highp vec3 tmpvar_103;
  tmpvar_103 = o_100.xyw;
  tmpvar_9 = tmpvar_103;
  highp vec2 tmpvar_104;
  tmpvar_104 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_104;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_105;
  v_105.x = _World2Object[0].x;
  v_105.y = _World2Object[1].x;
  v_105.z = _World2Object[2].x;
  v_105.w = _World2Object[3].x;
  highp vec4 v_106;
  v_106.x = _World2Object[0].y;
  v_106.y = _World2Object[1].y;
  v_106.z = _World2Object[2].y;
  v_106.w = _World2Object[3].y;
  highp vec4 v_107;
  v_107.x = _World2Object[0].z;
  v_107.y = _World2Object[1].z;
  v_107.z = _World2Object[2].z;
  v_107.w = _World2Object[3].z;
  highp vec3 tmpvar_108;
  tmpvar_108 = normalize(((
    (v_105.xyz * tmpvar_16.x)
   + 
    (v_106.xyz * tmpvar_16.y)
  ) + (v_107.xyz * tmpvar_16.z)));
  worldNormal_5 = tmpvar_108;
  highp mat3 tmpvar_109;
  tmpvar_109[0] = _Object2World[0].xyz;
  tmpvar_109[1] = _Object2World[1].xyz;
  tmpvar_109[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_110;
  tmpvar_110 = normalize((tmpvar_109 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_110;
  lowp vec3 tmpvar_111;
  tmpvar_111 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_112;
  tmpvar_112 = (tmpvar_111 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_112;
  lowp vec3 tmpvar_113;
  tmpvar_113.x = worldTangent_4.x;
  tmpvar_113.y = worldBinormal_3.x;
  tmpvar_113.z = worldNormal_5.x;
  lowp vec3 tmpvar_114;
  tmpvar_114.x = worldTangent_4.y;
  tmpvar_114.y = worldBinormal_3.y;
  tmpvar_114.z = worldNormal_5.y;
  lowp vec3 tmpvar_115;
  tmpvar_115.x = worldTangent_4.z;
  tmpvar_115.y = worldBinormal_3.z;
  tmpvar_115.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_113;
  xlv_TEXCOORD1 = tmpvar_114;
  xlv_TEXCOORD2 = tmpvar_115;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in lowp vec3 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in mediump vec4 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec2 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = xlv_TEXCOORD3;
  highp vec2 tmpvar_24;
  tmpvar_24 = (_LightMatrix0 * tmpvar_23).xy;
  lightCoord_5 = tmpvar_24;
  lowp float tmpvar_25;
  tmpvar_25 = texture (_LightTexture0, lightCoord_5).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_22);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_22);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_22);
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_26;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_25);
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_29 = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tmpvar_9 * tmpvar_1) * diff_29);
  c_28.xyz = tmpvar_31;
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  mediump vec3 tmpvar_32;
  tmpvar_32 = c_28.xyz;
  c_27.xyz = tmpvar_32;
  c_4.xyz = c_27.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FACING_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_21;
  tmpvar_21[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_21[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_21[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_22;
  tmpvar_22 = (normalize((tmpvar_20 * tmpvar_21)) * sqrt(dot (tmpvar_20, tmpvar_20)));
  FinalPosition_15 = tmpvar_22;
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_23;
    tmpvar_23 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_24;
    isBestWind_24 = (tmpvar_17 == 4.0);
    bool bLeaf2_25;
    bLeaf2_25 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    highp vec3 vDirection_27;
    vDirection_27 = tmpvar_2;
    highp float tmpvar_28;
    if (bLeaf2_25) {
      tmpvar_28 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_29;
    if (bLeaf2_25) {
      tmpvar_29 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_30;
    highp vec4 tmpvar_31;
    tmpvar_31.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_31.x = (tmpvar_28 + tmpvar_23);
    highp vec4 tmpvar_32;
    tmpvar_32 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    vPos_30 = (tmpvar_22 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_29 * (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_27 = tmpvar_2;
    vPos_26 = vPos_30;
    if (isBestWind_24) {
      highp vec3 tmpvar_33;
      tmpvar_33 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_34;
      if (bLeaf2_25) {
        tmpvar_34 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_35;
      if (bLeaf2_25) {
        tmpvar_35 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_36;
      if (bLeaf2_25) {
        tmpvar_36 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_37;
      if (bLeaf2_25) {
        tmpvar_37 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_38;
      if (bLeaf2_25) {
        tmpvar_38 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_38 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_39;
      if (bLeaf2_25) {
        tmpvar_39 = bool(1);
      } else {
        tmpvar_39 = bool(1);
      };
      highp float fTwitch_40;
      highp vec3 vAxis_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_34 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_34 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_34 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_34 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_30, vPos_30));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_36) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) + (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) - (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_33.z) * tmpvar_33.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_33.yzx * vRotatedWindVector_14.zxy) - (tmpvar_33.zxy * vRotatedWindVector_14.yzx));
      vAxis_41.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_14, tmpvar_33), -1.0, 1.0);
      vAxis_41.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_41);
      vAxis_41 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_56;
      tmpvar_56 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_40 = 0.0;
      if (tmpvar_39) {
        highp float fTime_57;
        fTime_57 = (tmpvar_38.z + tmpvar_43);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_40 = (tmpvar_38.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_38.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_37)
       + 
        (tmpvar_56 * tmpvar_35)
      ) + fTwitch_40));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_51 * tmpvar_64);
      vDirection_27 = (tmpvar_65 * _glesNormal);
      vPos_26 = (normalize((tmpvar_65 * vPos_30)) * tmpvar_47);
    };
    tmpvar_12 = vDirection_27;
    FinalPosition_15 = vPos_26;
  };
  highp vec3 tmpvar_66;
  tmpvar_66 = (FinalPosition_15 + _glesMultiTexCoord1.xyz);
  FinalPosition_15 = tmpvar_66;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_67;
    vPos_67 = tmpvar_66;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_68;
      vPos_68 = tmpvar_66;
      highp float fAdherenceScale_69;
      highp vec3 tmpvar_70;
      tmpvar_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_71;
      tmpvar_71 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_72;
      highp float fOscillation_73;
      fOscillation_73 = 1.0;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.x = (tmpvar_71 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((tmpvar_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_71 + _glesMultiTexCoord0.w));
      tmpvar_76.w = ((tmpvar_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_72 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_72.y * vOscillations_72.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      fOscillation_73 = (((
        (mix (mix (tmpvar_78, fTarget_75, fAmount_74), fTarget_75, fAmount_74) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_72.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_72.w * _ST_WindBranchWhip.x)));
      vPos_68 = (tmpvar_66 + ((tmpvar_70 * fOscillation_73) * _ST_WindBranch.y));
      highp vec4 tmpvar_79;
      tmpvar_79.zw = vec2(0.0, 0.0);
      tmpvar_79.x = ((tmpvar_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_79.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_80;
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      tmpvar_80 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((
        ((tmpvar_80.x * tmpvar_80.y) * tmpvar_80.x)
       * tmpvar_80.y) * _ST_WindTurbulences.x));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_72.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_68 = (vPos_68 + ((
        ((vRotatedBranchAnchor_13 - vPos_68) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_67 = vPos_68;
    } else {
      highp vec3 vPos_82;
      vPos_82 = vPos_67;
      highp vec3 tmpvar_83;
      tmpvar_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_84;
      tmpvar_84 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_85;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (tmpvar_84 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((tmpvar_84 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_84 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_85 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_85.y * vOscillations_85.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      vPos_82 = (vPos_67 + ((tmpvar_83 * 
        (((mix (
          mix (tmpvar_90, fTarget_87, fAmount_86)
        , fTarget_87, fAmount_86) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_85.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_67 = vPos_82;
    };
    FinalPosition_15 = vPos_67;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_15;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_95.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    vPos_91.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_96.x + (tmpvar_96.y * tmpvar_96.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_92)));
    vPos_91 = (normalize(vPos_91) * fLength_93);
    FinalPosition_15 = vPos_91;
  };
  tmpvar_11.xyz = FinalPosition_15;
  highp vec4 tmpvar_98;
  tmpvar_98 = (glstate_matrix_mvp * tmpvar_11);
  highp vec4 o_99;
  highp vec4 tmpvar_100;
  tmpvar_100 = (tmpvar_98 * 0.5);
  highp vec2 tmpvar_101;
  tmpvar_101.x = tmpvar_100.x;
  tmpvar_101.y = (tmpvar_100.y * _ProjectionParams.x);
  o_99.xy = (tmpvar_101 + tmpvar_100.w);
  o_99.zw = tmpvar_98.zw;
  highp vec3 tmpvar_102;
  tmpvar_102 = o_99.xyw;
  tmpvar_8 = tmpvar_102;
  highp vec2 tmpvar_103;
  tmpvar_103 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_103;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_104;
  v_104.x = _World2Object[0].x;
  v_104.y = _World2Object[1].x;
  v_104.z = _World2Object[2].x;
  v_104.w = _World2Object[3].x;
  highp vec4 v_105;
  v_105.x = _World2Object[0].y;
  v_105.y = _World2Object[1].y;
  v_105.z = _World2Object[2].y;
  v_105.w = _World2Object[3].y;
  highp vec4 v_106;
  v_106.x = _World2Object[0].z;
  v_106.y = _World2Object[1].z;
  v_106.z = _World2Object[2].z;
  v_106.w = _World2Object[3].z;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize(((
    (v_104.xyz * tmpvar_12.x)
   + 
    (v_105.xyz * tmpvar_12.y)
  ) + (v_106.xyz * tmpvar_12.z)));
  worldNormal_3 = tmpvar_107;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_22;
  tmpvar_22 = (_LightMatrix0 * tmpvar_21).xyz;
  lightCoord_4 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_24;
  tmpvar_24 = texture2D (_LightTexture0, vec2(tmpvar_23)).w;
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_25;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_24);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_28 = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tmpvar_9 * tmpvar_1) * diff_28);
  c_27.xyz = tmpvar_30;
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  mediump vec3 tmpvar_31;
  tmpvar_31 = c_27.xyz;
  c_26.xyz = tmpvar_31;
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_21;
  tmpvar_21[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_21[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_21[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_22;
  tmpvar_22 = (normalize((tmpvar_20 * tmpvar_21)) * sqrt(dot (tmpvar_20, tmpvar_20)));
  FinalPosition_15 = tmpvar_22;
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_23;
    tmpvar_23 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_24;
    isBestWind_24 = (tmpvar_17 == 4.0);
    bool bLeaf2_25;
    bLeaf2_25 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    highp vec3 vDirection_27;
    vDirection_27 = tmpvar_2;
    highp float tmpvar_28;
    if (bLeaf2_25) {
      tmpvar_28 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_29;
    if (bLeaf2_25) {
      tmpvar_29 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_30;
    highp vec4 tmpvar_31;
    tmpvar_31.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_31.x = (tmpvar_28 + tmpvar_23);
    highp vec4 tmpvar_32;
    tmpvar_32 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    vPos_30 = (tmpvar_22 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_29 * (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_27 = tmpvar_2;
    vPos_26 = vPos_30;
    if (isBestWind_24) {
      highp vec3 tmpvar_33;
      tmpvar_33 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_34;
      if (bLeaf2_25) {
        tmpvar_34 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_35;
      if (bLeaf2_25) {
        tmpvar_35 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_36;
      if (bLeaf2_25) {
        tmpvar_36 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_37;
      if (bLeaf2_25) {
        tmpvar_37 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_38;
      if (bLeaf2_25) {
        tmpvar_38 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_38 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_39;
      if (bLeaf2_25) {
        tmpvar_39 = bool(1);
      } else {
        tmpvar_39 = bool(1);
      };
      highp float fTwitch_40;
      highp vec3 vAxis_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_34 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_34 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_34 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_34 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_30, vPos_30));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_36) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) + (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) - (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_33.z) * tmpvar_33.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_33.yzx * vRotatedWindVector_14.zxy) - (tmpvar_33.zxy * vRotatedWindVector_14.yzx));
      vAxis_41.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_14, tmpvar_33), -1.0, 1.0);
      vAxis_41.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_41);
      vAxis_41 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_56;
      tmpvar_56 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_40 = 0.0;
      if (tmpvar_39) {
        highp float fTime_57;
        fTime_57 = (tmpvar_38.z + tmpvar_43);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_40 = (tmpvar_38.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_38.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_37)
       + 
        (tmpvar_56 * tmpvar_35)
      ) + fTwitch_40));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_51 * tmpvar_64);
      vDirection_27 = (tmpvar_65 * _glesNormal);
      vPos_26 = (normalize((tmpvar_65 * vPos_30)) * tmpvar_47);
    };
    tmpvar_12 = vDirection_27;
    FinalPosition_15 = vPos_26;
  };
  highp vec3 tmpvar_66;
  tmpvar_66 = (FinalPosition_15 + _glesMultiTexCoord1.xyz);
  FinalPosition_15 = tmpvar_66;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_67;
    vPos_67 = tmpvar_66;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_68;
      vPos_68 = tmpvar_66;
      highp float fAdherenceScale_69;
      highp vec3 tmpvar_70;
      tmpvar_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_71;
      tmpvar_71 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_72;
      highp float fOscillation_73;
      fOscillation_73 = 1.0;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.x = (tmpvar_71 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((tmpvar_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_71 + _glesMultiTexCoord0.w));
      tmpvar_76.w = ((tmpvar_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_72 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_72.y * vOscillations_72.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      fOscillation_73 = (((
        (mix (mix (tmpvar_78, fTarget_75, fAmount_74), fTarget_75, fAmount_74) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_72.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_72.w * _ST_WindBranchWhip.x)));
      vPos_68 = (tmpvar_66 + ((tmpvar_70 * fOscillation_73) * _ST_WindBranch.y));
      highp vec4 tmpvar_79;
      tmpvar_79.zw = vec2(0.0, 0.0);
      tmpvar_79.x = ((tmpvar_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_79.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_80;
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      tmpvar_80 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((
        ((tmpvar_80.x * tmpvar_80.y) * tmpvar_80.x)
       * tmpvar_80.y) * _ST_WindTurbulences.x));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_72.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_68 = (vPos_68 + ((
        ((vRotatedBranchAnchor_13 - vPos_68) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_67 = vPos_68;
    } else {
      highp vec3 vPos_82;
      vPos_82 = vPos_67;
      highp vec3 tmpvar_83;
      tmpvar_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_84;
      tmpvar_84 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_85;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (tmpvar_84 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((tmpvar_84 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_84 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_85 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_85.y * vOscillations_85.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      vPos_82 = (vPos_67 + ((tmpvar_83 * 
        (((mix (
          mix (tmpvar_90, fTarget_87, fAmount_86)
        , fTarget_87, fAmount_86) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_85.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_67 = vPos_82;
    };
    FinalPosition_15 = vPos_67;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_15;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_95.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    vPos_91.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_96.x + (tmpvar_96.y * tmpvar_96.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_92)));
    vPos_91 = (normalize(vPos_91) * fLength_93);
    FinalPosition_15 = vPos_91;
  };
  tmpvar_11.xyz = FinalPosition_15;
  highp vec4 tmpvar_98;
  tmpvar_98 = (glstate_matrix_mvp * tmpvar_11);
  highp vec4 o_99;
  highp vec4 tmpvar_100;
  tmpvar_100 = (tmpvar_98 * 0.5);
  highp vec2 tmpvar_101;
  tmpvar_101.x = tmpvar_100.x;
  tmpvar_101.y = (tmpvar_100.y * _ProjectionParams.x);
  o_99.xy = (tmpvar_101 + tmpvar_100.w);
  o_99.zw = tmpvar_98.zw;
  highp vec3 tmpvar_102;
  tmpvar_102 = o_99.xyw;
  tmpvar_8 = tmpvar_102;
  highp vec2 tmpvar_103;
  tmpvar_103 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_103;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_104;
  v_104.x = _World2Object[0].x;
  v_104.y = _World2Object[1].x;
  v_104.z = _World2Object[2].x;
  v_104.w = _World2Object[3].x;
  highp vec4 v_105;
  v_105.x = _World2Object[0].y;
  v_105.y = _World2Object[1].y;
  v_105.z = _World2Object[2].y;
  v_105.w = _World2Object[3].y;
  highp vec4 v_106;
  v_106.x = _World2Object[0].z;
  v_106.y = _World2Object[1].z;
  v_106.z = _World2Object[2].z;
  v_106.w = _World2Object[3].z;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize(((
    (v_104.xyz * tmpvar_12.x)
   + 
    (v_105.xyz * tmpvar_12.y)
  ) + (v_106.xyz * tmpvar_12.z)));
  worldNormal_3 = tmpvar_107;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_22;
  tmpvar_22 = (_LightMatrix0 * tmpvar_21).xyz;
  lightCoord_4 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_24;
  tmpvar_24 = texture (_LightTexture0, vec2(tmpvar_23)).w;
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_25;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_24);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_28 = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tmpvar_9 * tmpvar_1) * diff_28);
  c_27.xyz = tmpvar_30;
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  mediump vec3 tmpvar_31;
  tmpvar_31 = c_27.xyz;
  c_26.xyz = tmpvar_31;
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FACING_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_21;
  tmpvar_21[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_21[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_21[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_22;
  tmpvar_22 = (normalize((tmpvar_20 * tmpvar_21)) * sqrt(dot (tmpvar_20, tmpvar_20)));
  FinalPosition_15 = tmpvar_22;
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_23;
    tmpvar_23 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_24;
    isBestWind_24 = (tmpvar_17 == 4.0);
    bool bLeaf2_25;
    bLeaf2_25 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    highp vec3 vDirection_27;
    vDirection_27 = tmpvar_2;
    highp float tmpvar_28;
    if (bLeaf2_25) {
      tmpvar_28 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_29;
    if (bLeaf2_25) {
      tmpvar_29 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_30;
    highp vec4 tmpvar_31;
    tmpvar_31.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_31.x = (tmpvar_28 + tmpvar_23);
    highp vec4 tmpvar_32;
    tmpvar_32 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    vPos_30 = (tmpvar_22 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_29 * (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_27 = tmpvar_2;
    vPos_26 = vPos_30;
    if (isBestWind_24) {
      highp vec3 tmpvar_33;
      tmpvar_33 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_34;
      if (bLeaf2_25) {
        tmpvar_34 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_35;
      if (bLeaf2_25) {
        tmpvar_35 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_36;
      if (bLeaf2_25) {
        tmpvar_36 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_37;
      if (bLeaf2_25) {
        tmpvar_37 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_38;
      if (bLeaf2_25) {
        tmpvar_38 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_38 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_39;
      if (bLeaf2_25) {
        tmpvar_39 = bool(1);
      } else {
        tmpvar_39 = bool(1);
      };
      highp float fTwitch_40;
      highp vec3 vAxis_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_34 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_34 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_34 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_34 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_30, vPos_30));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_36) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) + (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) - (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_33.z) * tmpvar_33.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_33.yzx * vRotatedWindVector_14.zxy) - (tmpvar_33.zxy * vRotatedWindVector_14.yzx));
      vAxis_41.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_14, tmpvar_33), -1.0, 1.0);
      vAxis_41.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_41);
      vAxis_41 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_56;
      tmpvar_56 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_40 = 0.0;
      if (tmpvar_39) {
        highp float fTime_57;
        fTime_57 = (tmpvar_38.z + tmpvar_43);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_40 = (tmpvar_38.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_38.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_37)
       + 
        (tmpvar_56 * tmpvar_35)
      ) + fTwitch_40));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_51 * tmpvar_64);
      vDirection_27 = (tmpvar_65 * _glesNormal);
      vPos_26 = (normalize((tmpvar_65 * vPos_30)) * tmpvar_47);
    };
    tmpvar_12 = vDirection_27;
    FinalPosition_15 = vPos_26;
  };
  highp vec3 tmpvar_66;
  tmpvar_66 = (FinalPosition_15 + _glesMultiTexCoord1.xyz);
  FinalPosition_15 = tmpvar_66;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_67;
    vPos_67 = tmpvar_66;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_68;
      vPos_68 = tmpvar_66;
      highp float fAdherenceScale_69;
      highp vec3 tmpvar_70;
      tmpvar_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_71;
      tmpvar_71 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_72;
      highp float fOscillation_73;
      fOscillation_73 = 1.0;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.x = (tmpvar_71 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((tmpvar_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_71 + _glesMultiTexCoord0.w));
      tmpvar_76.w = ((tmpvar_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_72 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_72.y * vOscillations_72.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      fOscillation_73 = (((
        (mix (mix (tmpvar_78, fTarget_75, fAmount_74), fTarget_75, fAmount_74) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_72.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_72.w * _ST_WindBranchWhip.x)));
      vPos_68 = (tmpvar_66 + ((tmpvar_70 * fOscillation_73) * _ST_WindBranch.y));
      highp vec4 tmpvar_79;
      tmpvar_79.zw = vec2(0.0, 0.0);
      tmpvar_79.x = ((tmpvar_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_79.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_80;
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      tmpvar_80 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((
        ((tmpvar_80.x * tmpvar_80.y) * tmpvar_80.x)
       * tmpvar_80.y) * _ST_WindTurbulences.x));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_72.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_68 = (vPos_68 + ((
        ((vRotatedBranchAnchor_13 - vPos_68) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_67 = vPos_68;
    } else {
      highp vec3 vPos_82;
      vPos_82 = vPos_67;
      highp vec3 tmpvar_83;
      tmpvar_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_84;
      tmpvar_84 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_85;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (tmpvar_84 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((tmpvar_84 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_84 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_85 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_85.y * vOscillations_85.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      vPos_82 = (vPos_67 + ((tmpvar_83 * 
        (((mix (
          mix (tmpvar_90, fTarget_87, fAmount_86)
        , fTarget_87, fAmount_86) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_85.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_67 = vPos_82;
    };
    FinalPosition_15 = vPos_67;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_15;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_95.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    vPos_91.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_96.x + (tmpvar_96.y * tmpvar_96.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_92)));
    vPos_91 = (normalize(vPos_91) * fLength_93);
    FinalPosition_15 = vPos_91;
  };
  tmpvar_11.xyz = FinalPosition_15;
  highp vec4 tmpvar_98;
  tmpvar_98 = (glstate_matrix_mvp * tmpvar_11);
  highp vec4 o_99;
  highp vec4 tmpvar_100;
  tmpvar_100 = (tmpvar_98 * 0.5);
  highp vec2 tmpvar_101;
  tmpvar_101.x = tmpvar_100.x;
  tmpvar_101.y = (tmpvar_100.y * _ProjectionParams.x);
  o_99.xy = (tmpvar_101 + tmpvar_100.w);
  o_99.zw = tmpvar_98.zw;
  highp vec3 tmpvar_102;
  tmpvar_102 = o_99.xyw;
  tmpvar_8 = tmpvar_102;
  highp vec2 tmpvar_103;
  tmpvar_103 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_103;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_104;
  v_104.x = _World2Object[0].x;
  v_104.y = _World2Object[1].x;
  v_104.z = _World2Object[2].x;
  v_104.w = _World2Object[3].x;
  highp vec4 v_105;
  v_105.x = _World2Object[0].y;
  v_105.y = _World2Object[1].y;
  v_105.z = _World2Object[2].y;
  v_105.w = _World2Object[3].y;
  highp vec4 v_106;
  v_106.x = _World2Object[0].z;
  v_106.y = _World2Object[1].z;
  v_106.z = _World2Object[2].z;
  v_106.w = _World2Object[3].z;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize(((
    (v_104.xyz * tmpvar_12.x)
   + 
    (v_105.xyz * tmpvar_12.y)
  ) + (v_106.xyz * tmpvar_12.z)));
  worldNormal_3 = tmpvar_107;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  mediump float tmpvar_13;
  tmpvar_13 = fract(tmpvar_12.y);
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_13 * 0.0625) + unity_LODFade.y);
  projUV_11.y = tmpvar_14;
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_17;
  lowp float x_18;
  x_18 = (tmpvar_9 - _Cutoff);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_20;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_23 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tmpvar_8 * tmpvar_1) * diff_23);
  c_22.xyz = tmpvar_25;
  c_22.w = tmpvar_9;
  c_21.w = c_22.w;
  mediump vec3 tmpvar_26;
  tmpvar_26 = c_22.xyz;
  c_21.xyz = tmpvar_26;
  c_3.xyz = c_21.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_21;
  tmpvar_21[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_21[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_21[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_22;
  tmpvar_22 = (normalize((tmpvar_20 * tmpvar_21)) * sqrt(dot (tmpvar_20, tmpvar_20)));
  FinalPosition_15 = tmpvar_22;
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_23;
    tmpvar_23 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_24;
    isBestWind_24 = (tmpvar_17 == 4.0);
    bool bLeaf2_25;
    bLeaf2_25 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    highp vec3 vDirection_27;
    vDirection_27 = tmpvar_2;
    highp float tmpvar_28;
    if (bLeaf2_25) {
      tmpvar_28 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_29;
    if (bLeaf2_25) {
      tmpvar_29 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_30;
    highp vec4 tmpvar_31;
    tmpvar_31.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_31.x = (tmpvar_28 + tmpvar_23);
    highp vec4 tmpvar_32;
    tmpvar_32 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    vPos_30 = (tmpvar_22 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_29 * (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_27 = tmpvar_2;
    vPos_26 = vPos_30;
    if (isBestWind_24) {
      highp vec3 tmpvar_33;
      tmpvar_33 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_34;
      if (bLeaf2_25) {
        tmpvar_34 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_35;
      if (bLeaf2_25) {
        tmpvar_35 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_36;
      if (bLeaf2_25) {
        tmpvar_36 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_37;
      if (bLeaf2_25) {
        tmpvar_37 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_38;
      if (bLeaf2_25) {
        tmpvar_38 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_38 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_39;
      if (bLeaf2_25) {
        tmpvar_39 = bool(1);
      } else {
        tmpvar_39 = bool(1);
      };
      highp float fTwitch_40;
      highp vec3 vAxis_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_34 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_34 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_34 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_34 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_30, vPos_30));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_36) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) + (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) - (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_33.z) * tmpvar_33.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_33.yzx * vRotatedWindVector_14.zxy) - (tmpvar_33.zxy * vRotatedWindVector_14.yzx));
      vAxis_41.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_14, tmpvar_33), -1.0, 1.0);
      vAxis_41.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_41);
      vAxis_41 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_56;
      tmpvar_56 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_40 = 0.0;
      if (tmpvar_39) {
        highp float fTime_57;
        fTime_57 = (tmpvar_38.z + tmpvar_43);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_40 = (tmpvar_38.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_38.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_37)
       + 
        (tmpvar_56 * tmpvar_35)
      ) + fTwitch_40));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_51 * tmpvar_64);
      vDirection_27 = (tmpvar_65 * _glesNormal);
      vPos_26 = (normalize((tmpvar_65 * vPos_30)) * tmpvar_47);
    };
    tmpvar_12 = vDirection_27;
    FinalPosition_15 = vPos_26;
  };
  highp vec3 tmpvar_66;
  tmpvar_66 = (FinalPosition_15 + _glesMultiTexCoord1.xyz);
  FinalPosition_15 = tmpvar_66;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_67;
    vPos_67 = tmpvar_66;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_68;
      vPos_68 = tmpvar_66;
      highp float fAdherenceScale_69;
      highp vec3 tmpvar_70;
      tmpvar_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_71;
      tmpvar_71 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_72;
      highp float fOscillation_73;
      fOscillation_73 = 1.0;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.x = (tmpvar_71 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((tmpvar_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_71 + _glesMultiTexCoord0.w));
      tmpvar_76.w = ((tmpvar_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_72 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_72.y * vOscillations_72.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      fOscillation_73 = (((
        (mix (mix (tmpvar_78, fTarget_75, fAmount_74), fTarget_75, fAmount_74) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_72.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_72.w * _ST_WindBranchWhip.x)));
      vPos_68 = (tmpvar_66 + ((tmpvar_70 * fOscillation_73) * _ST_WindBranch.y));
      highp vec4 tmpvar_79;
      tmpvar_79.zw = vec2(0.0, 0.0);
      tmpvar_79.x = ((tmpvar_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_79.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_80;
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      tmpvar_80 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((
        ((tmpvar_80.x * tmpvar_80.y) * tmpvar_80.x)
       * tmpvar_80.y) * _ST_WindTurbulences.x));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_72.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_68 = (vPos_68 + ((
        ((vRotatedBranchAnchor_13 - vPos_68) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_67 = vPos_68;
    } else {
      highp vec3 vPos_82;
      vPos_82 = vPos_67;
      highp vec3 tmpvar_83;
      tmpvar_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_84;
      tmpvar_84 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_85;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (tmpvar_84 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((tmpvar_84 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_84 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_85 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_85.y * vOscillations_85.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      vPos_82 = (vPos_67 + ((tmpvar_83 * 
        (((mix (
          mix (tmpvar_90, fTarget_87, fAmount_86)
        , fTarget_87, fAmount_86) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_85.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_67 = vPos_82;
    };
    FinalPosition_15 = vPos_67;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_15;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_95.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    vPos_91.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_96.x + (tmpvar_96.y * tmpvar_96.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_92)));
    vPos_91 = (normalize(vPos_91) * fLength_93);
    FinalPosition_15 = vPos_91;
  };
  tmpvar_11.xyz = FinalPosition_15;
  highp vec4 tmpvar_98;
  tmpvar_98 = (glstate_matrix_mvp * tmpvar_11);
  highp vec4 o_99;
  highp vec4 tmpvar_100;
  tmpvar_100 = (tmpvar_98 * 0.5);
  highp vec2 tmpvar_101;
  tmpvar_101.x = tmpvar_100.x;
  tmpvar_101.y = (tmpvar_100.y * _ProjectionParams.x);
  o_99.xy = (tmpvar_101 + tmpvar_100.w);
  o_99.zw = tmpvar_98.zw;
  highp vec3 tmpvar_102;
  tmpvar_102 = o_99.xyw;
  tmpvar_8 = tmpvar_102;
  highp vec2 tmpvar_103;
  tmpvar_103 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_103;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_104;
  v_104.x = _World2Object[0].x;
  v_104.y = _World2Object[1].x;
  v_104.z = _World2Object[2].x;
  v_104.w = _World2Object[3].x;
  highp vec4 v_105;
  v_105.x = _World2Object[0].y;
  v_105.y = _World2Object[1].y;
  v_105.z = _World2Object[2].y;
  v_105.w = _World2Object[3].y;
  highp vec4 v_106;
  v_106.x = _World2Object[0].z;
  v_106.y = _World2Object[1].z;
  v_106.z = _World2Object[2].z;
  v_106.w = _World2Object[3].z;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize(((
    (v_104.xyz * tmpvar_12.x)
   + 
    (v_105.xyz * tmpvar_12.y)
  ) + (v_106.xyz * tmpvar_12.z)));
  worldNormal_3 = tmpvar_107;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  mediump float tmpvar_13;
  tmpvar_13 = fract(tmpvar_12.y);
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_13 * 0.0625) + unity_LODFade.y);
  projUV_11.y = tmpvar_14;
  lowp float x_15;
  x_15 = (texture (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_17;
  lowp float x_18;
  x_18 = (tmpvar_9 - _Cutoff);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_20;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_23 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tmpvar_8 * tmpvar_1) * diff_23);
  c_22.xyz = tmpvar_25;
  c_22.w = tmpvar_9;
  c_21.w = c_22.w;
  mediump vec3 tmpvar_26;
  tmpvar_26 = c_22.xyz;
  c_21.xyz = tmpvar_26;
  c_3.xyz = c_21.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FACING_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_21;
  tmpvar_21[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_21[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_21[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_22;
  tmpvar_22 = (normalize((tmpvar_20 * tmpvar_21)) * sqrt(dot (tmpvar_20, tmpvar_20)));
  FinalPosition_15 = tmpvar_22;
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_23;
    tmpvar_23 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_24;
    isBestWind_24 = (tmpvar_17 == 4.0);
    bool bLeaf2_25;
    bLeaf2_25 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    highp vec3 vDirection_27;
    vDirection_27 = tmpvar_2;
    highp float tmpvar_28;
    if (bLeaf2_25) {
      tmpvar_28 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_29;
    if (bLeaf2_25) {
      tmpvar_29 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_30;
    highp vec4 tmpvar_31;
    tmpvar_31.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_31.x = (tmpvar_28 + tmpvar_23);
    highp vec4 tmpvar_32;
    tmpvar_32 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    vPos_30 = (tmpvar_22 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_29 * (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_27 = tmpvar_2;
    vPos_26 = vPos_30;
    if (isBestWind_24) {
      highp vec3 tmpvar_33;
      tmpvar_33 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_34;
      if (bLeaf2_25) {
        tmpvar_34 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_35;
      if (bLeaf2_25) {
        tmpvar_35 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_36;
      if (bLeaf2_25) {
        tmpvar_36 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_37;
      if (bLeaf2_25) {
        tmpvar_37 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_38;
      if (bLeaf2_25) {
        tmpvar_38 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_38 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_39;
      if (bLeaf2_25) {
        tmpvar_39 = bool(1);
      } else {
        tmpvar_39 = bool(1);
      };
      highp float fTwitch_40;
      highp vec3 vAxis_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_34 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_34 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_34 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_34 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_30, vPos_30));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_36) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) + (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) - (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_33.z) * tmpvar_33.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_33.yzx * vRotatedWindVector_14.zxy) - (tmpvar_33.zxy * vRotatedWindVector_14.yzx));
      vAxis_41.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_14, tmpvar_33), -1.0, 1.0);
      vAxis_41.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_41);
      vAxis_41 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_56;
      tmpvar_56 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_40 = 0.0;
      if (tmpvar_39) {
        highp float fTime_57;
        fTime_57 = (tmpvar_38.z + tmpvar_43);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_40 = (tmpvar_38.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_38.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_37)
       + 
        (tmpvar_56 * tmpvar_35)
      ) + fTwitch_40));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_51 * tmpvar_64);
      vDirection_27 = (tmpvar_65 * _glesNormal);
      vPos_26 = (normalize((tmpvar_65 * vPos_30)) * tmpvar_47);
    };
    tmpvar_12 = vDirection_27;
    FinalPosition_15 = vPos_26;
  };
  highp vec3 tmpvar_66;
  tmpvar_66 = (FinalPosition_15 + _glesMultiTexCoord1.xyz);
  FinalPosition_15 = tmpvar_66;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_67;
    vPos_67 = tmpvar_66;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_68;
      vPos_68 = tmpvar_66;
      highp float fAdherenceScale_69;
      highp vec3 tmpvar_70;
      tmpvar_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_71;
      tmpvar_71 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_72;
      highp float fOscillation_73;
      fOscillation_73 = 1.0;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.x = (tmpvar_71 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((tmpvar_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_71 + _glesMultiTexCoord0.w));
      tmpvar_76.w = ((tmpvar_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_72 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_72.y * vOscillations_72.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      fOscillation_73 = (((
        (mix (mix (tmpvar_78, fTarget_75, fAmount_74), fTarget_75, fAmount_74) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_72.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_72.w * _ST_WindBranchWhip.x)));
      vPos_68 = (tmpvar_66 + ((tmpvar_70 * fOscillation_73) * _ST_WindBranch.y));
      highp vec4 tmpvar_79;
      tmpvar_79.zw = vec2(0.0, 0.0);
      tmpvar_79.x = ((tmpvar_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_79.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_80;
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      tmpvar_80 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((
        ((tmpvar_80.x * tmpvar_80.y) * tmpvar_80.x)
       * tmpvar_80.y) * _ST_WindTurbulences.x));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_72.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_68 = (vPos_68 + ((
        ((vRotatedBranchAnchor_13 - vPos_68) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_67 = vPos_68;
    } else {
      highp vec3 vPos_82;
      vPos_82 = vPos_67;
      highp vec3 tmpvar_83;
      tmpvar_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_84;
      tmpvar_84 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_85;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (tmpvar_84 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((tmpvar_84 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_84 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_85 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_85.y * vOscillations_85.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      vPos_82 = (vPos_67 + ((tmpvar_83 * 
        (((mix (
          mix (tmpvar_90, fTarget_87, fAmount_86)
        , fTarget_87, fAmount_86) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_85.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_67 = vPos_82;
    };
    FinalPosition_15 = vPos_67;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_15;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_95.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    vPos_91.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_96.x + (tmpvar_96.y * tmpvar_96.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_92)));
    vPos_91 = (normalize(vPos_91) * fLength_93);
    FinalPosition_15 = vPos_91;
  };
  tmpvar_11.xyz = FinalPosition_15;
  highp vec4 tmpvar_98;
  tmpvar_98 = (glstate_matrix_mvp * tmpvar_11);
  highp vec4 o_99;
  highp vec4 tmpvar_100;
  tmpvar_100 = (tmpvar_98 * 0.5);
  highp vec2 tmpvar_101;
  tmpvar_101.x = tmpvar_100.x;
  tmpvar_101.y = (tmpvar_100.y * _ProjectionParams.x);
  o_99.xy = (tmpvar_101 + tmpvar_100.w);
  o_99.zw = tmpvar_98.zw;
  highp vec3 tmpvar_102;
  tmpvar_102 = o_99.xyw;
  tmpvar_8 = tmpvar_102;
  highp vec2 tmpvar_103;
  tmpvar_103 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_103;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_104;
  v_104.x = _World2Object[0].x;
  v_104.y = _World2Object[1].x;
  v_104.z = _World2Object[2].x;
  v_104.w = _World2Object[3].x;
  highp vec4 v_105;
  v_105.x = _World2Object[0].y;
  v_105.y = _World2Object[1].y;
  v_105.z = _World2Object[2].y;
  v_105.w = _World2Object[3].y;
  highp vec4 v_106;
  v_106.x = _World2Object[0].z;
  v_106.y = _World2Object[1].z;
  v_106.z = _World2Object[2].z;
  v_106.w = _World2Object[3].z;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize(((
    (v_104.xyz * tmpvar_12.x)
   + 
    (v_105.xyz * tmpvar_12.y)
  ) + (v_106.xyz * tmpvar_12.z)));
  worldNormal_3 = tmpvar_107;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_11 = tmpvar_19;
  lowp float x_20;
  x_20 = (tmpvar_11 - _Cutoff);
  if ((x_20 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  tmpvar_10 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_LightMatrix0 * tmpvar_22);
  lightCoord_5 = tmpvar_23;
  lowp vec4 tmpvar_24;
  mediump vec2 P_25;
  P_25 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_24 = texture2D (_LightTexture0, P_25);
  mediump float tmpvar_26;
  tmpvar_26 = dot (lightCoord_5.xyz, lightCoord_5.xyz);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_LightTextureB0, vec2(tmpvar_26));
  mediump float tmpvar_28;
  tmpvar_28 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_24.w) * tmpvar_27.w);
  atten_4 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_29;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_32 = tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_10 * tmpvar_1) * diff_32);
  c_31.xyz = tmpvar_34;
  c_31.w = tmpvar_11;
  c_30.w = c_31.w;
  mediump vec3 tmpvar_35;
  tmpvar_35 = c_31.xyz;
  c_30.xyz = tmpvar_35;
  c_3.xyz = c_30.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_21;
  tmpvar_21[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_21[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_21[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_22;
  tmpvar_22 = (normalize((tmpvar_20 * tmpvar_21)) * sqrt(dot (tmpvar_20, tmpvar_20)));
  FinalPosition_15 = tmpvar_22;
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_23;
    tmpvar_23 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_24;
    isBestWind_24 = (tmpvar_17 == 4.0);
    bool bLeaf2_25;
    bLeaf2_25 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    highp vec3 vDirection_27;
    vDirection_27 = tmpvar_2;
    highp float tmpvar_28;
    if (bLeaf2_25) {
      tmpvar_28 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_29;
    if (bLeaf2_25) {
      tmpvar_29 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_30;
    highp vec4 tmpvar_31;
    tmpvar_31.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_31.x = (tmpvar_28 + tmpvar_23);
    highp vec4 tmpvar_32;
    tmpvar_32 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    vPos_30 = (tmpvar_22 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_29 * (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_27 = tmpvar_2;
    vPos_26 = vPos_30;
    if (isBestWind_24) {
      highp vec3 tmpvar_33;
      tmpvar_33 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_34;
      if (bLeaf2_25) {
        tmpvar_34 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_35;
      if (bLeaf2_25) {
        tmpvar_35 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_36;
      if (bLeaf2_25) {
        tmpvar_36 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_37;
      if (bLeaf2_25) {
        tmpvar_37 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_38;
      if (bLeaf2_25) {
        tmpvar_38 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_38 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_39;
      if (bLeaf2_25) {
        tmpvar_39 = bool(1);
      } else {
        tmpvar_39 = bool(1);
      };
      highp float fTwitch_40;
      highp vec3 vAxis_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_34 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_34 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_34 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_34 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_30, vPos_30));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_36) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) + (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) - (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_33.z) * tmpvar_33.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_33.yzx * vRotatedWindVector_14.zxy) - (tmpvar_33.zxy * vRotatedWindVector_14.yzx));
      vAxis_41.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_14, tmpvar_33), -1.0, 1.0);
      vAxis_41.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_41);
      vAxis_41 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_56;
      tmpvar_56 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_40 = 0.0;
      if (tmpvar_39) {
        highp float fTime_57;
        fTime_57 = (tmpvar_38.z + tmpvar_43);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_40 = (tmpvar_38.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_38.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_37)
       + 
        (tmpvar_56 * tmpvar_35)
      ) + fTwitch_40));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_51 * tmpvar_64);
      vDirection_27 = (tmpvar_65 * _glesNormal);
      vPos_26 = (normalize((tmpvar_65 * vPos_30)) * tmpvar_47);
    };
    tmpvar_12 = vDirection_27;
    FinalPosition_15 = vPos_26;
  };
  highp vec3 tmpvar_66;
  tmpvar_66 = (FinalPosition_15 + _glesMultiTexCoord1.xyz);
  FinalPosition_15 = tmpvar_66;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_67;
    vPos_67 = tmpvar_66;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_68;
      vPos_68 = tmpvar_66;
      highp float fAdherenceScale_69;
      highp vec3 tmpvar_70;
      tmpvar_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_71;
      tmpvar_71 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_72;
      highp float fOscillation_73;
      fOscillation_73 = 1.0;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.x = (tmpvar_71 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((tmpvar_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_71 + _glesMultiTexCoord0.w));
      tmpvar_76.w = ((tmpvar_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_72 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_72.y * vOscillations_72.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      fOscillation_73 = (((
        (mix (mix (tmpvar_78, fTarget_75, fAmount_74), fTarget_75, fAmount_74) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_72.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_72.w * _ST_WindBranchWhip.x)));
      vPos_68 = (tmpvar_66 + ((tmpvar_70 * fOscillation_73) * _ST_WindBranch.y));
      highp vec4 tmpvar_79;
      tmpvar_79.zw = vec2(0.0, 0.0);
      tmpvar_79.x = ((tmpvar_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_79.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_80;
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      tmpvar_80 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((
        ((tmpvar_80.x * tmpvar_80.y) * tmpvar_80.x)
       * tmpvar_80.y) * _ST_WindTurbulences.x));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_72.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_68 = (vPos_68 + ((
        ((vRotatedBranchAnchor_13 - vPos_68) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_67 = vPos_68;
    } else {
      highp vec3 vPos_82;
      vPos_82 = vPos_67;
      highp vec3 tmpvar_83;
      tmpvar_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_84;
      tmpvar_84 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_85;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (tmpvar_84 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((tmpvar_84 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_84 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_85 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_85.y * vOscillations_85.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      vPos_82 = (vPos_67 + ((tmpvar_83 * 
        (((mix (
          mix (tmpvar_90, fTarget_87, fAmount_86)
        , fTarget_87, fAmount_86) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_85.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_67 = vPos_82;
    };
    FinalPosition_15 = vPos_67;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_15;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_95.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    vPos_91.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_96.x + (tmpvar_96.y * tmpvar_96.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_92)));
    vPos_91 = (normalize(vPos_91) * fLength_93);
    FinalPosition_15 = vPos_91;
  };
  tmpvar_11.xyz = FinalPosition_15;
  highp vec4 tmpvar_98;
  tmpvar_98 = (glstate_matrix_mvp * tmpvar_11);
  highp vec4 o_99;
  highp vec4 tmpvar_100;
  tmpvar_100 = (tmpvar_98 * 0.5);
  highp vec2 tmpvar_101;
  tmpvar_101.x = tmpvar_100.x;
  tmpvar_101.y = (tmpvar_100.y * _ProjectionParams.x);
  o_99.xy = (tmpvar_101 + tmpvar_100.w);
  o_99.zw = tmpvar_98.zw;
  highp vec3 tmpvar_102;
  tmpvar_102 = o_99.xyw;
  tmpvar_8 = tmpvar_102;
  highp vec2 tmpvar_103;
  tmpvar_103 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_103;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_104;
  v_104.x = _World2Object[0].x;
  v_104.y = _World2Object[1].x;
  v_104.z = _World2Object[2].x;
  v_104.w = _World2Object[3].x;
  highp vec4 v_105;
  v_105.x = _World2Object[0].y;
  v_105.y = _World2Object[1].y;
  v_105.z = _World2Object[2].y;
  v_105.w = _World2Object[3].y;
  highp vec4 v_106;
  v_106.x = _World2Object[0].z;
  v_106.y = _World2Object[1].z;
  v_106.z = _World2Object[2].z;
  v_106.w = _World2Object[3].z;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize(((
    (v_104.xyz * tmpvar_12.x)
   + 
    (v_105.xyz * tmpvar_12.y)
  ) + (v_106.xyz * tmpvar_12.z)));
  worldNormal_3 = tmpvar_107;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_11 = tmpvar_19;
  lowp float x_20;
  x_20 = (tmpvar_11 - _Cutoff);
  if ((x_20 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  tmpvar_10 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_LightMatrix0 * tmpvar_22);
  lightCoord_5 = tmpvar_23;
  lowp vec4 tmpvar_24;
  mediump vec2 P_25;
  P_25 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_24 = texture (_LightTexture0, P_25);
  mediump float tmpvar_26;
  tmpvar_26 = dot (lightCoord_5.xyz, lightCoord_5.xyz);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture (_LightTextureB0, vec2(tmpvar_26));
  mediump float tmpvar_28;
  tmpvar_28 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_24.w) * tmpvar_27.w);
  atten_4 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_29;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_32 = tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_10 * tmpvar_1) * diff_32);
  c_31.xyz = tmpvar_34;
  c_31.w = tmpvar_11;
  c_30.w = c_31.w;
  mediump vec3 tmpvar_35;
  tmpvar_35 = c_31.xyz;
  c_30.xyz = tmpvar_35;
  c_3.xyz = c_30.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FACING_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_21;
  tmpvar_21[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_21[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_21[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_22;
  tmpvar_22 = (normalize((tmpvar_20 * tmpvar_21)) * sqrt(dot (tmpvar_20, tmpvar_20)));
  FinalPosition_15 = tmpvar_22;
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_23;
    tmpvar_23 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_24;
    isBestWind_24 = (tmpvar_17 == 4.0);
    bool bLeaf2_25;
    bLeaf2_25 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    highp vec3 vDirection_27;
    vDirection_27 = tmpvar_2;
    highp float tmpvar_28;
    if (bLeaf2_25) {
      tmpvar_28 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_29;
    if (bLeaf2_25) {
      tmpvar_29 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_30;
    highp vec4 tmpvar_31;
    tmpvar_31.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_31.x = (tmpvar_28 + tmpvar_23);
    highp vec4 tmpvar_32;
    tmpvar_32 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    vPos_30 = (tmpvar_22 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_29 * (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_27 = tmpvar_2;
    vPos_26 = vPos_30;
    if (isBestWind_24) {
      highp vec3 tmpvar_33;
      tmpvar_33 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_34;
      if (bLeaf2_25) {
        tmpvar_34 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_35;
      if (bLeaf2_25) {
        tmpvar_35 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_36;
      if (bLeaf2_25) {
        tmpvar_36 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_37;
      if (bLeaf2_25) {
        tmpvar_37 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_38;
      if (bLeaf2_25) {
        tmpvar_38 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_38 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_39;
      if (bLeaf2_25) {
        tmpvar_39 = bool(1);
      } else {
        tmpvar_39 = bool(1);
      };
      highp float fTwitch_40;
      highp vec3 vAxis_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_34 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_34 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_34 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_34 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_30, vPos_30));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_36) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) + (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) - (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_33.z) * tmpvar_33.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_33.yzx * vRotatedWindVector_14.zxy) - (tmpvar_33.zxy * vRotatedWindVector_14.yzx));
      vAxis_41.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_14, tmpvar_33), -1.0, 1.0);
      vAxis_41.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_41);
      vAxis_41 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_56;
      tmpvar_56 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_40 = 0.0;
      if (tmpvar_39) {
        highp float fTime_57;
        fTime_57 = (tmpvar_38.z + tmpvar_43);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_40 = (tmpvar_38.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_38.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_37)
       + 
        (tmpvar_56 * tmpvar_35)
      ) + fTwitch_40));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_51 * tmpvar_64);
      vDirection_27 = (tmpvar_65 * _glesNormal);
      vPos_26 = (normalize((tmpvar_65 * vPos_30)) * tmpvar_47);
    };
    tmpvar_12 = vDirection_27;
    FinalPosition_15 = vPos_26;
  };
  highp vec3 tmpvar_66;
  tmpvar_66 = (FinalPosition_15 + _glesMultiTexCoord1.xyz);
  FinalPosition_15 = tmpvar_66;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_67;
    vPos_67 = tmpvar_66;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_68;
      vPos_68 = tmpvar_66;
      highp float fAdherenceScale_69;
      highp vec3 tmpvar_70;
      tmpvar_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_71;
      tmpvar_71 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_72;
      highp float fOscillation_73;
      fOscillation_73 = 1.0;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.x = (tmpvar_71 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((tmpvar_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_71 + _glesMultiTexCoord0.w));
      tmpvar_76.w = ((tmpvar_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_72 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_72.y * vOscillations_72.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      fOscillation_73 = (((
        (mix (mix (tmpvar_78, fTarget_75, fAmount_74), fTarget_75, fAmount_74) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_72.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_72.w * _ST_WindBranchWhip.x)));
      vPos_68 = (tmpvar_66 + ((tmpvar_70 * fOscillation_73) * _ST_WindBranch.y));
      highp vec4 tmpvar_79;
      tmpvar_79.zw = vec2(0.0, 0.0);
      tmpvar_79.x = ((tmpvar_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_79.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_80;
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      tmpvar_80 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((
        ((tmpvar_80.x * tmpvar_80.y) * tmpvar_80.x)
       * tmpvar_80.y) * _ST_WindTurbulences.x));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_72.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_68 = (vPos_68 + ((
        ((vRotatedBranchAnchor_13 - vPos_68) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_67 = vPos_68;
    } else {
      highp vec3 vPos_82;
      vPos_82 = vPos_67;
      highp vec3 tmpvar_83;
      tmpvar_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_84;
      tmpvar_84 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_85;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (tmpvar_84 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((tmpvar_84 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_84 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_85 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_85.y * vOscillations_85.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      vPos_82 = (vPos_67 + ((tmpvar_83 * 
        (((mix (
          mix (tmpvar_90, fTarget_87, fAmount_86)
        , fTarget_87, fAmount_86) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_85.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_67 = vPos_82;
    };
    FinalPosition_15 = vPos_67;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_15;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_95.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    vPos_91.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_96.x + (tmpvar_96.y * tmpvar_96.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_92)));
    vPos_91 = (normalize(vPos_91) * fLength_93);
    FinalPosition_15 = vPos_91;
  };
  tmpvar_11.xyz = FinalPosition_15;
  highp vec4 tmpvar_98;
  tmpvar_98 = (glstate_matrix_mvp * tmpvar_11);
  highp vec4 o_99;
  highp vec4 tmpvar_100;
  tmpvar_100 = (tmpvar_98 * 0.5);
  highp vec2 tmpvar_101;
  tmpvar_101.x = tmpvar_100.x;
  tmpvar_101.y = (tmpvar_100.y * _ProjectionParams.x);
  o_99.xy = (tmpvar_101 + tmpvar_100.w);
  o_99.zw = tmpvar_98.zw;
  highp vec3 tmpvar_102;
  tmpvar_102 = o_99.xyw;
  tmpvar_8 = tmpvar_102;
  highp vec2 tmpvar_103;
  tmpvar_103 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_103;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_104;
  v_104.x = _World2Object[0].x;
  v_104.y = _World2Object[1].x;
  v_104.z = _World2Object[2].x;
  v_104.w = _World2Object[3].x;
  highp vec4 v_105;
  v_105.x = _World2Object[0].y;
  v_105.y = _World2Object[1].y;
  v_105.z = _World2Object[2].y;
  v_105.w = _World2Object[3].y;
  highp vec4 v_106;
  v_106.x = _World2Object[0].z;
  v_106.y = _World2Object[1].z;
  v_106.z = _World2Object[2].z;
  v_106.w = _World2Object[3].z;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize(((
    (v_104.xyz * tmpvar_12.x)
   + 
    (v_105.xyz * tmpvar_12.y)
  ) + (v_106.xyz * tmpvar_12.z)));
  worldNormal_3 = tmpvar_107;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_22;
  tmpvar_22 = (_LightMatrix0 * tmpvar_21).xyz;
  lightCoord_4 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_24;
  tmpvar_24 = (texture2D (_LightTextureB0, vec2(tmpvar_23)).w * textureCube (_LightTexture0, lightCoord_4).w);
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_25;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_24);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_28 = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tmpvar_9 * tmpvar_1) * diff_28);
  c_27.xyz = tmpvar_30;
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  mediump vec3 tmpvar_31;
  tmpvar_31 = c_27.xyz;
  c_26.xyz = tmpvar_31;
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_21;
  tmpvar_21[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_21[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_21[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_22;
  tmpvar_22 = (normalize((tmpvar_20 * tmpvar_21)) * sqrt(dot (tmpvar_20, tmpvar_20)));
  FinalPosition_15 = tmpvar_22;
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_23;
    tmpvar_23 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_24;
    isBestWind_24 = (tmpvar_17 == 4.0);
    bool bLeaf2_25;
    bLeaf2_25 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    highp vec3 vDirection_27;
    vDirection_27 = tmpvar_2;
    highp float tmpvar_28;
    if (bLeaf2_25) {
      tmpvar_28 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_29;
    if (bLeaf2_25) {
      tmpvar_29 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_30;
    highp vec4 tmpvar_31;
    tmpvar_31.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_31.x = (tmpvar_28 + tmpvar_23);
    highp vec4 tmpvar_32;
    tmpvar_32 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    vPos_30 = (tmpvar_22 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_29 * (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_27 = tmpvar_2;
    vPos_26 = vPos_30;
    if (isBestWind_24) {
      highp vec3 tmpvar_33;
      tmpvar_33 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_34;
      if (bLeaf2_25) {
        tmpvar_34 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_35;
      if (bLeaf2_25) {
        tmpvar_35 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_36;
      if (bLeaf2_25) {
        tmpvar_36 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_37;
      if (bLeaf2_25) {
        tmpvar_37 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_38;
      if (bLeaf2_25) {
        tmpvar_38 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_38 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_39;
      if (bLeaf2_25) {
        tmpvar_39 = bool(1);
      } else {
        tmpvar_39 = bool(1);
      };
      highp float fTwitch_40;
      highp vec3 vAxis_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_34 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_34 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_34 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_34 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_30, vPos_30));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_36) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) + (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) - (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_33.z) * tmpvar_33.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_33.yzx * vRotatedWindVector_14.zxy) - (tmpvar_33.zxy * vRotatedWindVector_14.yzx));
      vAxis_41.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_14, tmpvar_33), -1.0, 1.0);
      vAxis_41.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_41);
      vAxis_41 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_56;
      tmpvar_56 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_40 = 0.0;
      if (tmpvar_39) {
        highp float fTime_57;
        fTime_57 = (tmpvar_38.z + tmpvar_43);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_40 = (tmpvar_38.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_38.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_37)
       + 
        (tmpvar_56 * tmpvar_35)
      ) + fTwitch_40));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_51 * tmpvar_64);
      vDirection_27 = (tmpvar_65 * _glesNormal);
      vPos_26 = (normalize((tmpvar_65 * vPos_30)) * tmpvar_47);
    };
    tmpvar_12 = vDirection_27;
    FinalPosition_15 = vPos_26;
  };
  highp vec3 tmpvar_66;
  tmpvar_66 = (FinalPosition_15 + _glesMultiTexCoord1.xyz);
  FinalPosition_15 = tmpvar_66;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_67;
    vPos_67 = tmpvar_66;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_68;
      vPos_68 = tmpvar_66;
      highp float fAdherenceScale_69;
      highp vec3 tmpvar_70;
      tmpvar_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_71;
      tmpvar_71 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_72;
      highp float fOscillation_73;
      fOscillation_73 = 1.0;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.x = (tmpvar_71 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((tmpvar_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_71 + _glesMultiTexCoord0.w));
      tmpvar_76.w = ((tmpvar_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_72 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_72.y * vOscillations_72.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      fOscillation_73 = (((
        (mix (mix (tmpvar_78, fTarget_75, fAmount_74), fTarget_75, fAmount_74) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_72.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_72.w * _ST_WindBranchWhip.x)));
      vPos_68 = (tmpvar_66 + ((tmpvar_70 * fOscillation_73) * _ST_WindBranch.y));
      highp vec4 tmpvar_79;
      tmpvar_79.zw = vec2(0.0, 0.0);
      tmpvar_79.x = ((tmpvar_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_79.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_80;
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      tmpvar_80 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((
        ((tmpvar_80.x * tmpvar_80.y) * tmpvar_80.x)
       * tmpvar_80.y) * _ST_WindTurbulences.x));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_72.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_68 = (vPos_68 + ((
        ((vRotatedBranchAnchor_13 - vPos_68) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_67 = vPos_68;
    } else {
      highp vec3 vPos_82;
      vPos_82 = vPos_67;
      highp vec3 tmpvar_83;
      tmpvar_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_84;
      tmpvar_84 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_85;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (tmpvar_84 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((tmpvar_84 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_84 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_85 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_85.y * vOscillations_85.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      vPos_82 = (vPos_67 + ((tmpvar_83 * 
        (((mix (
          mix (tmpvar_90, fTarget_87, fAmount_86)
        , fTarget_87, fAmount_86) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_85.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_67 = vPos_82;
    };
    FinalPosition_15 = vPos_67;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_15;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_95.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    vPos_91.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_96.x + (tmpvar_96.y * tmpvar_96.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_92)));
    vPos_91 = (normalize(vPos_91) * fLength_93);
    FinalPosition_15 = vPos_91;
  };
  tmpvar_11.xyz = FinalPosition_15;
  highp vec4 tmpvar_98;
  tmpvar_98 = (glstate_matrix_mvp * tmpvar_11);
  highp vec4 o_99;
  highp vec4 tmpvar_100;
  tmpvar_100 = (tmpvar_98 * 0.5);
  highp vec2 tmpvar_101;
  tmpvar_101.x = tmpvar_100.x;
  tmpvar_101.y = (tmpvar_100.y * _ProjectionParams.x);
  o_99.xy = (tmpvar_101 + tmpvar_100.w);
  o_99.zw = tmpvar_98.zw;
  highp vec3 tmpvar_102;
  tmpvar_102 = o_99.xyw;
  tmpvar_8 = tmpvar_102;
  highp vec2 tmpvar_103;
  tmpvar_103 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_103;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_104;
  v_104.x = _World2Object[0].x;
  v_104.y = _World2Object[1].x;
  v_104.z = _World2Object[2].x;
  v_104.w = _World2Object[3].x;
  highp vec4 v_105;
  v_105.x = _World2Object[0].y;
  v_105.y = _World2Object[1].y;
  v_105.z = _World2Object[2].y;
  v_105.w = _World2Object[3].y;
  highp vec4 v_106;
  v_106.x = _World2Object[0].z;
  v_106.y = _World2Object[1].z;
  v_106.z = _World2Object[2].z;
  v_106.w = _World2Object[3].z;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize(((
    (v_104.xyz * tmpvar_12.x)
   + 
    (v_105.xyz * tmpvar_12.y)
  ) + (v_106.xyz * tmpvar_12.z)));
  worldNormal_3 = tmpvar_107;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_22;
  tmpvar_22 = (_LightMatrix0 * tmpvar_21).xyz;
  lightCoord_4 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_24;
  tmpvar_24 = (texture (_LightTextureB0, vec2(tmpvar_23)).w * texture (_LightTexture0, lightCoord_4).w);
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_25;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_24);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_28 = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tmpvar_9 * tmpvar_1) * diff_28);
  c_27.xyz = tmpvar_30;
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  mediump vec3 tmpvar_31;
  tmpvar_31 = c_27.xyz;
  c_26.xyz = tmpvar_31;
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FACING_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_21;
  tmpvar_21[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_21[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_21[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_22;
  tmpvar_22 = (normalize((tmpvar_20 * tmpvar_21)) * sqrt(dot (tmpvar_20, tmpvar_20)));
  FinalPosition_15 = tmpvar_22;
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_23;
    tmpvar_23 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_24;
    isBestWind_24 = (tmpvar_17 == 4.0);
    bool bLeaf2_25;
    bLeaf2_25 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    highp vec3 vDirection_27;
    vDirection_27 = tmpvar_2;
    highp float tmpvar_28;
    if (bLeaf2_25) {
      tmpvar_28 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_29;
    if (bLeaf2_25) {
      tmpvar_29 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_30;
    highp vec4 tmpvar_31;
    tmpvar_31.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_31.x = (tmpvar_28 + tmpvar_23);
    highp vec4 tmpvar_32;
    tmpvar_32 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    vPos_30 = (tmpvar_22 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_29 * (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_27 = tmpvar_2;
    vPos_26 = vPos_30;
    if (isBestWind_24) {
      highp vec3 tmpvar_33;
      tmpvar_33 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_34;
      if (bLeaf2_25) {
        tmpvar_34 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_35;
      if (bLeaf2_25) {
        tmpvar_35 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_36;
      if (bLeaf2_25) {
        tmpvar_36 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_37;
      if (bLeaf2_25) {
        tmpvar_37 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_38;
      if (bLeaf2_25) {
        tmpvar_38 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_38 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_39;
      if (bLeaf2_25) {
        tmpvar_39 = bool(1);
      } else {
        tmpvar_39 = bool(1);
      };
      highp float fTwitch_40;
      highp vec3 vAxis_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_34 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_34 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_34 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_34 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_30, vPos_30));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_36) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) + (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) - (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_33.z) * tmpvar_33.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_33.yzx * vRotatedWindVector_14.zxy) - (tmpvar_33.zxy * vRotatedWindVector_14.yzx));
      vAxis_41.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_14, tmpvar_33), -1.0, 1.0);
      vAxis_41.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_41);
      vAxis_41 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_56;
      tmpvar_56 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_40 = 0.0;
      if (tmpvar_39) {
        highp float fTime_57;
        fTime_57 = (tmpvar_38.z + tmpvar_43);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_40 = (tmpvar_38.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_38.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_37)
       + 
        (tmpvar_56 * tmpvar_35)
      ) + fTwitch_40));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_51 * tmpvar_64);
      vDirection_27 = (tmpvar_65 * _glesNormal);
      vPos_26 = (normalize((tmpvar_65 * vPos_30)) * tmpvar_47);
    };
    tmpvar_12 = vDirection_27;
    FinalPosition_15 = vPos_26;
  };
  highp vec3 tmpvar_66;
  tmpvar_66 = (FinalPosition_15 + _glesMultiTexCoord1.xyz);
  FinalPosition_15 = tmpvar_66;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_67;
    vPos_67 = tmpvar_66;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_68;
      vPos_68 = tmpvar_66;
      highp float fAdherenceScale_69;
      highp vec3 tmpvar_70;
      tmpvar_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_71;
      tmpvar_71 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_72;
      highp float fOscillation_73;
      fOscillation_73 = 1.0;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.x = (tmpvar_71 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((tmpvar_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_71 + _glesMultiTexCoord0.w));
      tmpvar_76.w = ((tmpvar_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_72 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_72.y * vOscillations_72.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      fOscillation_73 = (((
        (mix (mix (tmpvar_78, fTarget_75, fAmount_74), fTarget_75, fAmount_74) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_72.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_72.w * _ST_WindBranchWhip.x)));
      vPos_68 = (tmpvar_66 + ((tmpvar_70 * fOscillation_73) * _ST_WindBranch.y));
      highp vec4 tmpvar_79;
      tmpvar_79.zw = vec2(0.0, 0.0);
      tmpvar_79.x = ((tmpvar_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_79.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_80;
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      tmpvar_80 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((
        ((tmpvar_80.x * tmpvar_80.y) * tmpvar_80.x)
       * tmpvar_80.y) * _ST_WindTurbulences.x));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_72.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_68 = (vPos_68 + ((
        ((vRotatedBranchAnchor_13 - vPos_68) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_67 = vPos_68;
    } else {
      highp vec3 vPos_82;
      vPos_82 = vPos_67;
      highp vec3 tmpvar_83;
      tmpvar_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_84;
      tmpvar_84 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_85;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (tmpvar_84 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((tmpvar_84 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_84 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_85 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_85.y * vOscillations_85.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      vPos_82 = (vPos_67 + ((tmpvar_83 * 
        (((mix (
          mix (tmpvar_90, fTarget_87, fAmount_86)
        , fTarget_87, fAmount_86) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_85.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_67 = vPos_82;
    };
    FinalPosition_15 = vPos_67;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_15;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_95.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    vPos_91.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_96.x + (tmpvar_96.y * tmpvar_96.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_92)));
    vPos_91 = (normalize(vPos_91) * fLength_93);
    FinalPosition_15 = vPos_91;
  };
  tmpvar_11.xyz = FinalPosition_15;
  highp vec4 tmpvar_98;
  tmpvar_98 = (glstate_matrix_mvp * tmpvar_11);
  highp vec4 o_99;
  highp vec4 tmpvar_100;
  tmpvar_100 = (tmpvar_98 * 0.5);
  highp vec2 tmpvar_101;
  tmpvar_101.x = tmpvar_100.x;
  tmpvar_101.y = (tmpvar_100.y * _ProjectionParams.x);
  o_99.xy = (tmpvar_101 + tmpvar_100.w);
  o_99.zw = tmpvar_98.zw;
  highp vec3 tmpvar_102;
  tmpvar_102 = o_99.xyw;
  tmpvar_8 = tmpvar_102;
  highp vec2 tmpvar_103;
  tmpvar_103 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_103;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_104;
  v_104.x = _World2Object[0].x;
  v_104.y = _World2Object[1].x;
  v_104.z = _World2Object[2].x;
  v_104.w = _World2Object[3].x;
  highp vec4 v_105;
  v_105.x = _World2Object[0].y;
  v_105.y = _World2Object[1].y;
  v_105.z = _World2Object[2].y;
  v_105.w = _World2Object[3].y;
  highp vec4 v_106;
  v_106.x = _World2Object[0].z;
  v_106.y = _World2Object[1].z;
  v_106.z = _World2Object[2].z;
  v_106.w = _World2Object[3].z;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize(((
    (v_104.xyz * tmpvar_12.x)
   + 
    (v_105.xyz * tmpvar_12.y)
  ) + (v_106.xyz * tmpvar_12.z)));
  worldNormal_3 = tmpvar_107;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec2 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_22;
  tmpvar_22 = (_LightMatrix0 * tmpvar_21).xy;
  lightCoord_4 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = texture2D (_LightTexture0, lightCoord_4).w;
  lowp vec3 tmpvar_24;
  tmpvar_24 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_24;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_23);
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_27 = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_9 * tmpvar_1) * diff_27);
  c_26.xyz = tmpvar_29;
  c_26.w = tmpvar_10;
  c_25.w = c_26.w;
  mediump vec3 tmpvar_30;
  tmpvar_30 = c_26.xyz;
  c_25.xyz = tmpvar_30;
  c_3.xyz = c_25.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_21;
  tmpvar_21[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_21[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_21[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_22;
  tmpvar_22 = (normalize((tmpvar_20 * tmpvar_21)) * sqrt(dot (tmpvar_20, tmpvar_20)));
  FinalPosition_15 = tmpvar_22;
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_23;
    tmpvar_23 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_24;
    isBestWind_24 = (tmpvar_17 == 4.0);
    bool bLeaf2_25;
    bLeaf2_25 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    highp vec3 vDirection_27;
    vDirection_27 = tmpvar_2;
    highp float tmpvar_28;
    if (bLeaf2_25) {
      tmpvar_28 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_29;
    if (bLeaf2_25) {
      tmpvar_29 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_30;
    highp vec4 tmpvar_31;
    tmpvar_31.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_31.x = (tmpvar_28 + tmpvar_23);
    highp vec4 tmpvar_32;
    tmpvar_32 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    vPos_30 = (tmpvar_22 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_29 * (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_27 = tmpvar_2;
    vPos_26 = vPos_30;
    if (isBestWind_24) {
      highp vec3 tmpvar_33;
      tmpvar_33 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_34;
      if (bLeaf2_25) {
        tmpvar_34 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_35;
      if (bLeaf2_25) {
        tmpvar_35 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_36;
      if (bLeaf2_25) {
        tmpvar_36 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_37;
      if (bLeaf2_25) {
        tmpvar_37 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_38;
      if (bLeaf2_25) {
        tmpvar_38 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_38 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_39;
      if (bLeaf2_25) {
        tmpvar_39 = bool(1);
      } else {
        tmpvar_39 = bool(1);
      };
      highp float fTwitch_40;
      highp vec3 vAxis_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_34 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_34 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_34 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_34 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_30, vPos_30));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_36) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) + (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) - (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_33.z) * tmpvar_33.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_33.yzx * vRotatedWindVector_14.zxy) - (tmpvar_33.zxy * vRotatedWindVector_14.yzx));
      vAxis_41.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_14, tmpvar_33), -1.0, 1.0);
      vAxis_41.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_41);
      vAxis_41 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_56;
      tmpvar_56 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_40 = 0.0;
      if (tmpvar_39) {
        highp float fTime_57;
        fTime_57 = (tmpvar_38.z + tmpvar_43);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_40 = (tmpvar_38.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_38.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_37)
       + 
        (tmpvar_56 * tmpvar_35)
      ) + fTwitch_40));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_51 * tmpvar_64);
      vDirection_27 = (tmpvar_65 * _glesNormal);
      vPos_26 = (normalize((tmpvar_65 * vPos_30)) * tmpvar_47);
    };
    tmpvar_12 = vDirection_27;
    FinalPosition_15 = vPos_26;
  };
  highp vec3 tmpvar_66;
  tmpvar_66 = (FinalPosition_15 + _glesMultiTexCoord1.xyz);
  FinalPosition_15 = tmpvar_66;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_67;
    vPos_67 = tmpvar_66;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_68;
      vPos_68 = tmpvar_66;
      highp float fAdherenceScale_69;
      highp vec3 tmpvar_70;
      tmpvar_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_71;
      tmpvar_71 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_72;
      highp float fOscillation_73;
      fOscillation_73 = 1.0;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.x = (tmpvar_71 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((tmpvar_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_71 + _glesMultiTexCoord0.w));
      tmpvar_76.w = ((tmpvar_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_72 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_72.y * vOscillations_72.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      fOscillation_73 = (((
        (mix (mix (tmpvar_78, fTarget_75, fAmount_74), fTarget_75, fAmount_74) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_72.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_72.w * _ST_WindBranchWhip.x)));
      vPos_68 = (tmpvar_66 + ((tmpvar_70 * fOscillation_73) * _ST_WindBranch.y));
      highp vec4 tmpvar_79;
      tmpvar_79.zw = vec2(0.0, 0.0);
      tmpvar_79.x = ((tmpvar_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_79.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_80;
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      tmpvar_80 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((
        ((tmpvar_80.x * tmpvar_80.y) * tmpvar_80.x)
       * tmpvar_80.y) * _ST_WindTurbulences.x));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_72.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_68 = (vPos_68 + ((
        ((vRotatedBranchAnchor_13 - vPos_68) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_67 = vPos_68;
    } else {
      highp vec3 vPos_82;
      vPos_82 = vPos_67;
      highp vec3 tmpvar_83;
      tmpvar_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_84;
      tmpvar_84 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_85;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (tmpvar_84 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((tmpvar_84 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_84 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_85 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_85.y * vOscillations_85.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      vPos_82 = (vPos_67 + ((tmpvar_83 * 
        (((mix (
          mix (tmpvar_90, fTarget_87, fAmount_86)
        , fTarget_87, fAmount_86) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_85.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_67 = vPos_82;
    };
    FinalPosition_15 = vPos_67;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_15;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_95.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    vPos_91.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_96.x + (tmpvar_96.y * tmpvar_96.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_92)));
    vPos_91 = (normalize(vPos_91) * fLength_93);
    FinalPosition_15 = vPos_91;
  };
  tmpvar_11.xyz = FinalPosition_15;
  highp vec4 tmpvar_98;
  tmpvar_98 = (glstate_matrix_mvp * tmpvar_11);
  highp vec4 o_99;
  highp vec4 tmpvar_100;
  tmpvar_100 = (tmpvar_98 * 0.5);
  highp vec2 tmpvar_101;
  tmpvar_101.x = tmpvar_100.x;
  tmpvar_101.y = (tmpvar_100.y * _ProjectionParams.x);
  o_99.xy = (tmpvar_101 + tmpvar_100.w);
  o_99.zw = tmpvar_98.zw;
  highp vec3 tmpvar_102;
  tmpvar_102 = o_99.xyw;
  tmpvar_8 = tmpvar_102;
  highp vec2 tmpvar_103;
  tmpvar_103 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_103;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_104;
  v_104.x = _World2Object[0].x;
  v_104.y = _World2Object[1].x;
  v_104.z = _World2Object[2].x;
  v_104.w = _World2Object[3].x;
  highp vec4 v_105;
  v_105.x = _World2Object[0].y;
  v_105.y = _World2Object[1].y;
  v_105.z = _World2Object[2].y;
  v_105.w = _World2Object[3].y;
  highp vec4 v_106;
  v_106.x = _World2Object[0].z;
  v_106.y = _World2Object[1].z;
  v_106.z = _World2Object[2].z;
  v_106.w = _World2Object[3].z;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize(((
    (v_104.xyz * tmpvar_12.x)
   + 
    (v_105.xyz * tmpvar_12.y)
  ) + (v_106.xyz * tmpvar_12.z)));
  worldNormal_3 = tmpvar_107;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec2 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_22;
  tmpvar_22 = (_LightMatrix0 * tmpvar_21).xy;
  lightCoord_4 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = texture (_LightTexture0, lightCoord_4).w;
  lowp vec3 tmpvar_24;
  tmpvar_24 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_24;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_23);
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_27 = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_9 * tmpvar_1) * diff_27);
  c_26.xyz = tmpvar_29;
  c_26.w = tmpvar_10;
  c_25.w = c_26.w;
  mediump vec3 tmpvar_30;
  tmpvar_30 = c_26.xyz;
  c_25.xyz = tmpvar_30;
  c_3.xyz = c_25.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_13;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_22;
  tmpvar_22 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_23;
  tmpvar_23[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_23[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_23[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_24;
  tmpvar_24 = (normalize((tmpvar_22 * tmpvar_23)) * sqrt(dot (tmpvar_22, tmpvar_22)));
  FinalPosition_18 = tmpvar_24;
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_25;
    tmpvar_25 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_26;
    isBestWind_26 = (tmpvar_19 == 4.0);
    bool bLeaf2_27;
    bLeaf2_27 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_28;
    vPos_28 = tmpvar_24;
    highp vec3 vDirection_29;
    vDirection_29 = tmpvar_2;
    highp float tmpvar_30;
    if (bLeaf2_27) {
      tmpvar_30 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_31;
    if (bLeaf2_27) {
      tmpvar_31 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_32;
    highp vec4 tmpvar_33;
    tmpvar_33.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_33.x = (tmpvar_30 + tmpvar_25);
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    vPos_32 = (tmpvar_24 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_31 * (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_29 = tmpvar_2;
    vPos_28 = vPos_32;
    if (isBestWind_26) {
      highp vec3 tmpvar_35;
      tmpvar_35 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_36;
      if (bLeaf2_27) {
        tmpvar_36 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_37;
      if (bLeaf2_27) {
        tmpvar_37 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_38;
      if (bLeaf2_27) {
        tmpvar_38 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_39;
      if (bLeaf2_27) {
        tmpvar_39 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_40;
      if (bLeaf2_27) {
        tmpvar_40 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_40 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_41;
      if (bLeaf2_27) {
        tmpvar_41 = bool(1);
      } else {
        tmpvar_41 = bool(1);
      };
      highp float fTwitch_42;
      highp vec3 vAxis_43;
      highp vec3 tmpvar_44;
      tmpvar_44 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_45;
      tmpvar_45 = ((tmpvar_44.x + tmpvar_44.y) + tmpvar_44.z);
      highp vec4 tmpvar_46;
      tmpvar_46.x = (tmpvar_36 + tmpvar_45);
      tmpvar_46.y = ((tmpvar_36 * 0.75) - tmpvar_45);
      tmpvar_46.z = ((tmpvar_36 * 0.01) + tmpvar_45);
      tmpvar_46.w = (tmpvar_36 + tmpvar_45);
      highp vec4 tmpvar_47;
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      tmpvar_47 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = sqrt(dot (vPos_32, vPos_32));
      highp float fAngle_50;
      fAngle_50 = ((_glesMultiTexCoord2.x * tmpvar_38) * (tmpvar_47.x + (tmpvar_47.y * tmpvar_47.y)));
      highp vec2 vSinCos_51;
      vSinCos_51.x = sin(fAngle_50);
      vSinCos_51.y = cos(fAngle_50);
      highp float tmpvar_52;
      tmpvar_52 = (1.0 - vSinCos_51.y);
      highp mat3 tmpvar_53;
      tmpvar_53[0].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.x) + vSinCos_51.y);
      tmpvar_53[0].y = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.y) + (vSinCos_51.x * tmpvar_35.z));
      tmpvar_53[0].z = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.z) - (vSinCos_51.x * tmpvar_35.y));
      tmpvar_53[1].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.y) - (vSinCos_51.x * tmpvar_35.z));
      tmpvar_53[1].y = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.y) + vSinCos_51.y);
      tmpvar_53[1].z = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.z) + (vSinCos_51.x * tmpvar_35.x));
      tmpvar_53[2].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.z) + (vSinCos_51.x * tmpvar_35.y));
      tmpvar_53[2].y = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.z) - (vSinCos_51.x * tmpvar_35.x));
      tmpvar_53[2].z = (((tmpvar_52 * tmpvar_35.z) * tmpvar_35.z) + vSinCos_51.y);
      highp vec3 tmpvar_54;
      tmpvar_54 = ((tmpvar_35.yzx * vRotatedWindVector_17.zxy) - (tmpvar_35.zxy * vRotatedWindVector_17.yzx));
      vAxis_43.xz = tmpvar_54.xz;
      highp float tmpvar_55;
      tmpvar_55 = clamp (dot (vRotatedWindVector_17, tmpvar_35), -1.0, 1.0);
      vAxis_43.y = (tmpvar_54.y + tmpvar_55);
      highp vec3 tmpvar_56;
      tmpvar_56 = normalize(vAxis_43);
      vAxis_43 = tmpvar_56;
      highp float tmpvar_57;
      tmpvar_57 = (1.570796 - (sign(tmpvar_55) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_55))) * (1.570796 + (abs(tmpvar_55) * (-0.2146018 + 
          (abs(tmpvar_55) * (0.08656672 + (abs(tmpvar_55) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_58;
      tmpvar_58 = (tmpvar_47.y - (tmpvar_47.x * tmpvar_47.x));
      fTwitch_42 = 0.0;
      if (tmpvar_41) {
        highp float fTime_59;
        fTime_59 = (tmpvar_40.z + tmpvar_45);
        highp vec4 tmpvar_60;
        tmpvar_60.zw = vec2(0.0, 0.0);
        tmpvar_60.x = fTime_59;
        tmpvar_60.y = (0.87 * fTime_59);
        highp vec4 tmpvar_61;
        highp vec4 tmpvar_62;
        tmpvar_62 = abs(((
          fract((tmpvar_60 + 0.5))
         * 2.0) - 1.0));
        tmpvar_61 = (((
          (tmpvar_62 * tmpvar_62)
         * 
          (3.0 - (2.0 * tmpvar_62))
        ) - 0.5) * 2.0);
        fTwitch_42 = (tmpvar_40.x * pow (clamp (
          ((((tmpvar_61.x * tmpvar_61.y) * tmpvar_61.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_40.y));
      };
      highp float fAngle_63;
      fAngle_63 = (_glesMultiTexCoord2.x * ((
        (tmpvar_57 * tmpvar_39)
       + 
        (tmpvar_58 * tmpvar_37)
      ) + fTwitch_42));
      highp vec2 vSinCos_64;
      vSinCos_64.x = sin(fAngle_63);
      vSinCos_64.y = cos(fAngle_63);
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - vSinCos_64.y);
      highp mat3 tmpvar_66;
      tmpvar_66[0].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.x) + vSinCos_64.y);
      tmpvar_66[0].y = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.y) + (vSinCos_64.x * tmpvar_56.z));
      tmpvar_66[0].z = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.z) - (vSinCos_64.x * tmpvar_56.y));
      tmpvar_66[1].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.y) - (vSinCos_64.x * tmpvar_56.z));
      tmpvar_66[1].y = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.y) + vSinCos_64.y);
      tmpvar_66[1].z = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.z) + (vSinCos_64.x * tmpvar_56.x));
      tmpvar_66[2].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.z) + (vSinCos_64.x * tmpvar_56.y));
      tmpvar_66[2].y = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.z) - (vSinCos_64.x * tmpvar_56.x));
      tmpvar_66[2].z = (((tmpvar_65 * tmpvar_56.z) * tmpvar_56.z) + vSinCos_64.y);
      highp mat3 tmpvar_67;
      tmpvar_67 = (tmpvar_53 * tmpvar_66);
      vDirection_29 = (tmpvar_67 * _glesNormal);
      vPos_28 = (normalize((tmpvar_67 * vPos_32)) * tmpvar_49);
    };
    tmpvar_15 = vDirection_29;
    FinalPosition_18 = vPos_28;
  };
  highp vec3 tmpvar_68;
  tmpvar_68 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  FinalPosition_18 = tmpvar_68;
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_69;
    vPos_69 = tmpvar_68;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_70;
      vPos_70 = tmpvar_68;
      highp float fAdherenceScale_71;
      highp vec3 tmpvar_72;
      tmpvar_72 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_73;
      tmpvar_73 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_74;
      highp float fOscillation_75;
      fOscillation_75 = 1.0;
      highp float fAmount_76;
      highp float fTarget_77;
      highp vec4 tmpvar_78;
      tmpvar_78.x = (tmpvar_73 + _glesMultiTexCoord0.w);
      tmpvar_78.y = ((tmpvar_73 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_78.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_73 + _glesMultiTexCoord0.w));
      tmpvar_78.w = ((tmpvar_73 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      vOscillations_74 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      highp float tmpvar_80;
      tmpvar_80 = (vOscillations_74.y * vOscillations_74.z);
      fTarget_77 = 1.0;
      fAmount_76 = tmpvar_80;
      if ((tmpvar_80 < 0.0)) {
        fTarget_77 = -1.0;
        fAmount_76 = -(tmpvar_80);
      };
      fOscillation_75 = (((
        (mix (mix (tmpvar_80, fTarget_77, fAmount_76), fTarget_77, fAmount_76) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_74.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_74.w * _ST_WindBranchWhip.x)));
      vPos_70 = (tmpvar_68 + ((tmpvar_72 * fOscillation_75) * _ST_WindBranch.y));
      highp vec4 tmpvar_81;
      tmpvar_81.zw = vec2(0.0, 0.0);
      tmpvar_81.x = ((tmpvar_73 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_81.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_82;
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_81 + 0.5))
       * 2.0) - 1.0));
      tmpvar_82 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      fAdherenceScale_71 = (1.0 - ((
        ((tmpvar_82.x * tmpvar_82.y) * tmpvar_82.x)
       * tmpvar_82.y) * _ST_WindTurbulences.x));
      fAdherenceScale_71 = (fAdherenceScale_71 + ((vOscillations_74.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_70 = (vPos_70 + ((
        ((vRotatedBranchAnchor_16 - vPos_70) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_71) * _glesMultiTexCoord0.z));
      vPos_69 = vPos_70;
    } else {
      highp vec3 vPos_84;
      vPos_84 = vPos_69;
      highp vec3 tmpvar_85;
      tmpvar_85 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_86;
      tmpvar_86 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_87;
      highp float fAmount_88;
      highp float fTarget_89;
      highp vec4 tmpvar_90;
      tmpvar_90.w = 0.0;
      tmpvar_90.x = (tmpvar_86 + _glesMultiTexCoord0.w);
      tmpvar_90.y = ((tmpvar_86 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_90.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_86 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_91;
      tmpvar_91 = abs(((
        fract((tmpvar_90 + 0.5))
       * 2.0) - 1.0));
      vOscillations_87 = (((
        (tmpvar_91 * tmpvar_91)
       * 
        (3.0 - (2.0 * tmpvar_91))
      ) - 0.5) * 2.0);
      highp float tmpvar_92;
      tmpvar_92 = (vOscillations_87.y * vOscillations_87.z);
      fTarget_89 = 1.0;
      fAmount_88 = tmpvar_92;
      if ((tmpvar_92 < 0.0)) {
        fTarget_89 = -1.0;
        fAmount_88 = -(tmpvar_92);
      };
      vPos_84 = (vPos_69 + ((tmpvar_85 * 
        (((mix (
          mix (tmpvar_92, fTarget_89, fAmount_88)
        , fTarget_89, fAmount_88) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_87.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_69 = vPos_84;
    };
    FinalPosition_18 = vPos_69;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_93;
    vPos_93 = FinalPosition_18;
    highp float fAdjust_94;
    highp float fLength_95;
    fLength_95 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_96;
    tmpvar_96 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_94 = tmpvar_96;
    if ((tmpvar_96 != 0.0)) {
      fAdjust_94 = pow (tmpvar_96, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_97;
    tmpvar_97.zw = vec2(0.0, 0.0);
    tmpvar_97.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_97.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_98;
    highp vec4 tmpvar_99;
    tmpvar_99 = abs(((
      fract((tmpvar_97 + 0.5))
     * 2.0) - 1.0));
    tmpvar_98 = (((
      (tmpvar_99 * tmpvar_99)
     * 
      (3.0 - (2.0 * tmpvar_99))
    ) - 0.5) * 2.0);
    vPos_93.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_98.x + (tmpvar_98.y * tmpvar_98.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_94)));
    vPos_93 = (normalize(vPos_93) * fLength_95);
    FinalPosition_18 = vPos_93;
  };
  tmpvar_14.xyz = FinalPosition_18;
  highp vec4 tmpvar_100;
  tmpvar_100 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_101;
  highp vec4 tmpvar_102;
  tmpvar_102 = (tmpvar_100 * 0.5);
  highp vec2 tmpvar_103;
  tmpvar_103.x = tmpvar_102.x;
  tmpvar_103.y = (tmpvar_102.y * _ProjectionParams.x);
  o_101.xy = (tmpvar_103 + tmpvar_102.w);
  o_101.zw = tmpvar_100.zw;
  highp vec3 tmpvar_104;
  tmpvar_104 = o_101.xyw;
  tmpvar_8 = tmpvar_104;
  highp vec2 tmpvar_105;
  tmpvar_105 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_105;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_106;
  v_106.x = _World2Object[0].x;
  v_106.y = _World2Object[1].x;
  v_106.z = _World2Object[2].x;
  v_106.w = _World2Object[3].x;
  highp vec4 v_107;
  v_107.x = _World2Object[0].y;
  v_107.y = _World2Object[1].y;
  v_107.z = _World2Object[2].y;
  v_107.w = _World2Object[3].y;
  highp vec4 v_108;
  v_108.x = _World2Object[0].z;
  v_108.y = _World2Object[1].z;
  v_108.z = _World2Object[2].z;
  v_108.w = _World2Object[3].z;
  highp vec3 tmpvar_109;
  tmpvar_109 = normalize(((
    (v_106.xyz * tmpvar_15.x)
   + 
    (v_107.xyz * tmpvar_15.y)
  ) + (v_108.xyz * tmpvar_15.z)));
  worldNormal_3 = tmpvar_109;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_23;
  tmpvar_23 = (_LightMatrix0 * tmpvar_22).xyz;
  lightCoord_4 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_25;
  tmpvar_25 = texture2D (_LightTexture0, vec2(tmpvar_24)).w;
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_26;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_25);
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_29 = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tmpvar_9 * tmpvar_1) * diff_29);
  c_28.xyz = tmpvar_31;
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  mediump vec3 tmpvar_32;
  tmpvar_32 = c_28.xyz;
  c_27.xyz = tmpvar_32;
  c_3.xyz = c_27.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_13;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_22;
  tmpvar_22 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_23;
  tmpvar_23[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_23[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_23[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_24;
  tmpvar_24 = (normalize((tmpvar_22 * tmpvar_23)) * sqrt(dot (tmpvar_22, tmpvar_22)));
  FinalPosition_18 = tmpvar_24;
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_25;
    tmpvar_25 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_26;
    isBestWind_26 = (tmpvar_19 == 4.0);
    bool bLeaf2_27;
    bLeaf2_27 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_28;
    vPos_28 = tmpvar_24;
    highp vec3 vDirection_29;
    vDirection_29 = tmpvar_2;
    highp float tmpvar_30;
    if (bLeaf2_27) {
      tmpvar_30 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_31;
    if (bLeaf2_27) {
      tmpvar_31 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_32;
    highp vec4 tmpvar_33;
    tmpvar_33.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_33.x = (tmpvar_30 + tmpvar_25);
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    vPos_32 = (tmpvar_24 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_31 * (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_29 = tmpvar_2;
    vPos_28 = vPos_32;
    if (isBestWind_26) {
      highp vec3 tmpvar_35;
      tmpvar_35 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_36;
      if (bLeaf2_27) {
        tmpvar_36 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_37;
      if (bLeaf2_27) {
        tmpvar_37 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_38;
      if (bLeaf2_27) {
        tmpvar_38 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_39;
      if (bLeaf2_27) {
        tmpvar_39 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_40;
      if (bLeaf2_27) {
        tmpvar_40 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_40 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_41;
      if (bLeaf2_27) {
        tmpvar_41 = bool(1);
      } else {
        tmpvar_41 = bool(1);
      };
      highp float fTwitch_42;
      highp vec3 vAxis_43;
      highp vec3 tmpvar_44;
      tmpvar_44 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_45;
      tmpvar_45 = ((tmpvar_44.x + tmpvar_44.y) + tmpvar_44.z);
      highp vec4 tmpvar_46;
      tmpvar_46.x = (tmpvar_36 + tmpvar_45);
      tmpvar_46.y = ((tmpvar_36 * 0.75) - tmpvar_45);
      tmpvar_46.z = ((tmpvar_36 * 0.01) + tmpvar_45);
      tmpvar_46.w = (tmpvar_36 + tmpvar_45);
      highp vec4 tmpvar_47;
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      tmpvar_47 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = sqrt(dot (vPos_32, vPos_32));
      highp float fAngle_50;
      fAngle_50 = ((_glesMultiTexCoord2.x * tmpvar_38) * (tmpvar_47.x + (tmpvar_47.y * tmpvar_47.y)));
      highp vec2 vSinCos_51;
      vSinCos_51.x = sin(fAngle_50);
      vSinCos_51.y = cos(fAngle_50);
      highp float tmpvar_52;
      tmpvar_52 = (1.0 - vSinCos_51.y);
      highp mat3 tmpvar_53;
      tmpvar_53[0].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.x) + vSinCos_51.y);
      tmpvar_53[0].y = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.y) + (vSinCos_51.x * tmpvar_35.z));
      tmpvar_53[0].z = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.z) - (vSinCos_51.x * tmpvar_35.y));
      tmpvar_53[1].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.y) - (vSinCos_51.x * tmpvar_35.z));
      tmpvar_53[1].y = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.y) + vSinCos_51.y);
      tmpvar_53[1].z = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.z) + (vSinCos_51.x * tmpvar_35.x));
      tmpvar_53[2].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.z) + (vSinCos_51.x * tmpvar_35.y));
      tmpvar_53[2].y = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.z) - (vSinCos_51.x * tmpvar_35.x));
      tmpvar_53[2].z = (((tmpvar_52 * tmpvar_35.z) * tmpvar_35.z) + vSinCos_51.y);
      highp vec3 tmpvar_54;
      tmpvar_54 = ((tmpvar_35.yzx * vRotatedWindVector_17.zxy) - (tmpvar_35.zxy * vRotatedWindVector_17.yzx));
      vAxis_43.xz = tmpvar_54.xz;
      highp float tmpvar_55;
      tmpvar_55 = clamp (dot (vRotatedWindVector_17, tmpvar_35), -1.0, 1.0);
      vAxis_43.y = (tmpvar_54.y + tmpvar_55);
      highp vec3 tmpvar_56;
      tmpvar_56 = normalize(vAxis_43);
      vAxis_43 = tmpvar_56;
      highp float tmpvar_57;
      tmpvar_57 = (1.570796 - (sign(tmpvar_55) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_55))) * (1.570796 + (abs(tmpvar_55) * (-0.2146018 + 
          (abs(tmpvar_55) * (0.08656672 + (abs(tmpvar_55) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_58;
      tmpvar_58 = (tmpvar_47.y - (tmpvar_47.x * tmpvar_47.x));
      fTwitch_42 = 0.0;
      if (tmpvar_41) {
        highp float fTime_59;
        fTime_59 = (tmpvar_40.z + tmpvar_45);
        highp vec4 tmpvar_60;
        tmpvar_60.zw = vec2(0.0, 0.0);
        tmpvar_60.x = fTime_59;
        tmpvar_60.y = (0.87 * fTime_59);
        highp vec4 tmpvar_61;
        highp vec4 tmpvar_62;
        tmpvar_62 = abs(((
          fract((tmpvar_60 + 0.5))
         * 2.0) - 1.0));
        tmpvar_61 = (((
          (tmpvar_62 * tmpvar_62)
         * 
          (3.0 - (2.0 * tmpvar_62))
        ) - 0.5) * 2.0);
        fTwitch_42 = (tmpvar_40.x * pow (clamp (
          ((((tmpvar_61.x * tmpvar_61.y) * tmpvar_61.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_40.y));
      };
      highp float fAngle_63;
      fAngle_63 = (_glesMultiTexCoord2.x * ((
        (tmpvar_57 * tmpvar_39)
       + 
        (tmpvar_58 * tmpvar_37)
      ) + fTwitch_42));
      highp vec2 vSinCos_64;
      vSinCos_64.x = sin(fAngle_63);
      vSinCos_64.y = cos(fAngle_63);
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - vSinCos_64.y);
      highp mat3 tmpvar_66;
      tmpvar_66[0].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.x) + vSinCos_64.y);
      tmpvar_66[0].y = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.y) + (vSinCos_64.x * tmpvar_56.z));
      tmpvar_66[0].z = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.z) - (vSinCos_64.x * tmpvar_56.y));
      tmpvar_66[1].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.y) - (vSinCos_64.x * tmpvar_56.z));
      tmpvar_66[1].y = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.y) + vSinCos_64.y);
      tmpvar_66[1].z = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.z) + (vSinCos_64.x * tmpvar_56.x));
      tmpvar_66[2].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.z) + (vSinCos_64.x * tmpvar_56.y));
      tmpvar_66[2].y = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.z) - (vSinCos_64.x * tmpvar_56.x));
      tmpvar_66[2].z = (((tmpvar_65 * tmpvar_56.z) * tmpvar_56.z) + vSinCos_64.y);
      highp mat3 tmpvar_67;
      tmpvar_67 = (tmpvar_53 * tmpvar_66);
      vDirection_29 = (tmpvar_67 * _glesNormal);
      vPos_28 = (normalize((tmpvar_67 * vPos_32)) * tmpvar_49);
    };
    tmpvar_15 = vDirection_29;
    FinalPosition_18 = vPos_28;
  };
  highp vec3 tmpvar_68;
  tmpvar_68 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  FinalPosition_18 = tmpvar_68;
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_69;
    vPos_69 = tmpvar_68;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_70;
      vPos_70 = tmpvar_68;
      highp float fAdherenceScale_71;
      highp vec3 tmpvar_72;
      tmpvar_72 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_73;
      tmpvar_73 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_74;
      highp float fOscillation_75;
      fOscillation_75 = 1.0;
      highp float fAmount_76;
      highp float fTarget_77;
      highp vec4 tmpvar_78;
      tmpvar_78.x = (tmpvar_73 + _glesMultiTexCoord0.w);
      tmpvar_78.y = ((tmpvar_73 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_78.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_73 + _glesMultiTexCoord0.w));
      tmpvar_78.w = ((tmpvar_73 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      vOscillations_74 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      highp float tmpvar_80;
      tmpvar_80 = (vOscillations_74.y * vOscillations_74.z);
      fTarget_77 = 1.0;
      fAmount_76 = tmpvar_80;
      if ((tmpvar_80 < 0.0)) {
        fTarget_77 = -1.0;
        fAmount_76 = -(tmpvar_80);
      };
      fOscillation_75 = (((
        (mix (mix (tmpvar_80, fTarget_77, fAmount_76), fTarget_77, fAmount_76) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_74.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_74.w * _ST_WindBranchWhip.x)));
      vPos_70 = (tmpvar_68 + ((tmpvar_72 * fOscillation_75) * _ST_WindBranch.y));
      highp vec4 tmpvar_81;
      tmpvar_81.zw = vec2(0.0, 0.0);
      tmpvar_81.x = ((tmpvar_73 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_81.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_82;
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_81 + 0.5))
       * 2.0) - 1.0));
      tmpvar_82 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      fAdherenceScale_71 = (1.0 - ((
        ((tmpvar_82.x * tmpvar_82.y) * tmpvar_82.x)
       * tmpvar_82.y) * _ST_WindTurbulences.x));
      fAdherenceScale_71 = (fAdherenceScale_71 + ((vOscillations_74.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_70 = (vPos_70 + ((
        ((vRotatedBranchAnchor_16 - vPos_70) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_71) * _glesMultiTexCoord0.z));
      vPos_69 = vPos_70;
    } else {
      highp vec3 vPos_84;
      vPos_84 = vPos_69;
      highp vec3 tmpvar_85;
      tmpvar_85 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_86;
      tmpvar_86 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_87;
      highp float fAmount_88;
      highp float fTarget_89;
      highp vec4 tmpvar_90;
      tmpvar_90.w = 0.0;
      tmpvar_90.x = (tmpvar_86 + _glesMultiTexCoord0.w);
      tmpvar_90.y = ((tmpvar_86 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_90.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_86 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_91;
      tmpvar_91 = abs(((
        fract((tmpvar_90 + 0.5))
       * 2.0) - 1.0));
      vOscillations_87 = (((
        (tmpvar_91 * tmpvar_91)
       * 
        (3.0 - (2.0 * tmpvar_91))
      ) - 0.5) * 2.0);
      highp float tmpvar_92;
      tmpvar_92 = (vOscillations_87.y * vOscillations_87.z);
      fTarget_89 = 1.0;
      fAmount_88 = tmpvar_92;
      if ((tmpvar_92 < 0.0)) {
        fTarget_89 = -1.0;
        fAmount_88 = -(tmpvar_92);
      };
      vPos_84 = (vPos_69 + ((tmpvar_85 * 
        (((mix (
          mix (tmpvar_92, fTarget_89, fAmount_88)
        , fTarget_89, fAmount_88) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_87.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_69 = vPos_84;
    };
    FinalPosition_18 = vPos_69;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_93;
    vPos_93 = FinalPosition_18;
    highp float fAdjust_94;
    highp float fLength_95;
    fLength_95 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_96;
    tmpvar_96 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_94 = tmpvar_96;
    if ((tmpvar_96 != 0.0)) {
      fAdjust_94 = pow (tmpvar_96, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_97;
    tmpvar_97.zw = vec2(0.0, 0.0);
    tmpvar_97.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_97.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_98;
    highp vec4 tmpvar_99;
    tmpvar_99 = abs(((
      fract((tmpvar_97 + 0.5))
     * 2.0) - 1.0));
    tmpvar_98 = (((
      (tmpvar_99 * tmpvar_99)
     * 
      (3.0 - (2.0 * tmpvar_99))
    ) - 0.5) * 2.0);
    vPos_93.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_98.x + (tmpvar_98.y * tmpvar_98.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_94)));
    vPos_93 = (normalize(vPos_93) * fLength_95);
    FinalPosition_18 = vPos_93;
  };
  tmpvar_14.xyz = FinalPosition_18;
  highp vec4 tmpvar_100;
  tmpvar_100 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_101;
  highp vec4 tmpvar_102;
  tmpvar_102 = (tmpvar_100 * 0.5);
  highp vec2 tmpvar_103;
  tmpvar_103.x = tmpvar_102.x;
  tmpvar_103.y = (tmpvar_102.y * _ProjectionParams.x);
  o_101.xy = (tmpvar_103 + tmpvar_102.w);
  o_101.zw = tmpvar_100.zw;
  highp vec3 tmpvar_104;
  tmpvar_104 = o_101.xyw;
  tmpvar_8 = tmpvar_104;
  highp vec2 tmpvar_105;
  tmpvar_105 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_105;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_106;
  v_106.x = _World2Object[0].x;
  v_106.y = _World2Object[1].x;
  v_106.z = _World2Object[2].x;
  v_106.w = _World2Object[3].x;
  highp vec4 v_107;
  v_107.x = _World2Object[0].y;
  v_107.y = _World2Object[1].y;
  v_107.z = _World2Object[2].y;
  v_107.w = _World2Object[3].y;
  highp vec4 v_108;
  v_108.x = _World2Object[0].z;
  v_108.y = _World2Object[1].z;
  v_108.z = _World2Object[2].z;
  v_108.w = _World2Object[3].z;
  highp vec3 tmpvar_109;
  tmpvar_109 = normalize(((
    (v_106.xyz * tmpvar_15.x)
   + 
    (v_107.xyz * tmpvar_15.y)
  ) + (v_108.xyz * tmpvar_15.z)));
  worldNormal_3 = tmpvar_109;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_23;
  tmpvar_23 = (_LightMatrix0 * tmpvar_22).xyz;
  lightCoord_4 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_25;
  tmpvar_25 = texture (_LightTexture0, vec2(tmpvar_24)).w;
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_26;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_25);
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_29 = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tmpvar_9 * tmpvar_1) * diff_29);
  c_28.xyz = tmpvar_31;
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  mediump vec3 tmpvar_32;
  tmpvar_32 = c_28.xyz;
  c_27.xyz = tmpvar_32;
  c_3.xyz = c_27.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_13;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_22;
  tmpvar_22 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_23;
  tmpvar_23[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_23[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_23[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_24;
  tmpvar_24 = (normalize((tmpvar_22 * tmpvar_23)) * sqrt(dot (tmpvar_22, tmpvar_22)));
  FinalPosition_18 = tmpvar_24;
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_25;
    tmpvar_25 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_26;
    isBestWind_26 = (tmpvar_19 == 4.0);
    bool bLeaf2_27;
    bLeaf2_27 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_28;
    vPos_28 = tmpvar_24;
    highp vec3 vDirection_29;
    vDirection_29 = tmpvar_2;
    highp float tmpvar_30;
    if (bLeaf2_27) {
      tmpvar_30 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_31;
    if (bLeaf2_27) {
      tmpvar_31 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_32;
    highp vec4 tmpvar_33;
    tmpvar_33.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_33.x = (tmpvar_30 + tmpvar_25);
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    vPos_32 = (tmpvar_24 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_31 * (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_29 = tmpvar_2;
    vPos_28 = vPos_32;
    if (isBestWind_26) {
      highp vec3 tmpvar_35;
      tmpvar_35 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_36;
      if (bLeaf2_27) {
        tmpvar_36 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_37;
      if (bLeaf2_27) {
        tmpvar_37 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_38;
      if (bLeaf2_27) {
        tmpvar_38 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_39;
      if (bLeaf2_27) {
        tmpvar_39 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_40;
      if (bLeaf2_27) {
        tmpvar_40 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_40 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_41;
      if (bLeaf2_27) {
        tmpvar_41 = bool(1);
      } else {
        tmpvar_41 = bool(1);
      };
      highp float fTwitch_42;
      highp vec3 vAxis_43;
      highp vec3 tmpvar_44;
      tmpvar_44 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_45;
      tmpvar_45 = ((tmpvar_44.x + tmpvar_44.y) + tmpvar_44.z);
      highp vec4 tmpvar_46;
      tmpvar_46.x = (tmpvar_36 + tmpvar_45);
      tmpvar_46.y = ((tmpvar_36 * 0.75) - tmpvar_45);
      tmpvar_46.z = ((tmpvar_36 * 0.01) + tmpvar_45);
      tmpvar_46.w = (tmpvar_36 + tmpvar_45);
      highp vec4 tmpvar_47;
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      tmpvar_47 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = sqrt(dot (vPos_32, vPos_32));
      highp float fAngle_50;
      fAngle_50 = ((_glesMultiTexCoord2.x * tmpvar_38) * (tmpvar_47.x + (tmpvar_47.y * tmpvar_47.y)));
      highp vec2 vSinCos_51;
      vSinCos_51.x = sin(fAngle_50);
      vSinCos_51.y = cos(fAngle_50);
      highp float tmpvar_52;
      tmpvar_52 = (1.0 - vSinCos_51.y);
      highp mat3 tmpvar_53;
      tmpvar_53[0].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.x) + vSinCos_51.y);
      tmpvar_53[0].y = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.y) + (vSinCos_51.x * tmpvar_35.z));
      tmpvar_53[0].z = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.z) - (vSinCos_51.x * tmpvar_35.y));
      tmpvar_53[1].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.y) - (vSinCos_51.x * tmpvar_35.z));
      tmpvar_53[1].y = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.y) + vSinCos_51.y);
      tmpvar_53[1].z = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.z) + (vSinCos_51.x * tmpvar_35.x));
      tmpvar_53[2].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.z) + (vSinCos_51.x * tmpvar_35.y));
      tmpvar_53[2].y = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.z) - (vSinCos_51.x * tmpvar_35.x));
      tmpvar_53[2].z = (((tmpvar_52 * tmpvar_35.z) * tmpvar_35.z) + vSinCos_51.y);
      highp vec3 tmpvar_54;
      tmpvar_54 = ((tmpvar_35.yzx * vRotatedWindVector_17.zxy) - (tmpvar_35.zxy * vRotatedWindVector_17.yzx));
      vAxis_43.xz = tmpvar_54.xz;
      highp float tmpvar_55;
      tmpvar_55 = clamp (dot (vRotatedWindVector_17, tmpvar_35), -1.0, 1.0);
      vAxis_43.y = (tmpvar_54.y + tmpvar_55);
      highp vec3 tmpvar_56;
      tmpvar_56 = normalize(vAxis_43);
      vAxis_43 = tmpvar_56;
      highp float tmpvar_57;
      tmpvar_57 = (1.570796 - (sign(tmpvar_55) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_55))) * (1.570796 + (abs(tmpvar_55) * (-0.2146018 + 
          (abs(tmpvar_55) * (0.08656672 + (abs(tmpvar_55) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_58;
      tmpvar_58 = (tmpvar_47.y - (tmpvar_47.x * tmpvar_47.x));
      fTwitch_42 = 0.0;
      if (tmpvar_41) {
        highp float fTime_59;
        fTime_59 = (tmpvar_40.z + tmpvar_45);
        highp vec4 tmpvar_60;
        tmpvar_60.zw = vec2(0.0, 0.0);
        tmpvar_60.x = fTime_59;
        tmpvar_60.y = (0.87 * fTime_59);
        highp vec4 tmpvar_61;
        highp vec4 tmpvar_62;
        tmpvar_62 = abs(((
          fract((tmpvar_60 + 0.5))
         * 2.0) - 1.0));
        tmpvar_61 = (((
          (tmpvar_62 * tmpvar_62)
         * 
          (3.0 - (2.0 * tmpvar_62))
        ) - 0.5) * 2.0);
        fTwitch_42 = (tmpvar_40.x * pow (clamp (
          ((((tmpvar_61.x * tmpvar_61.y) * tmpvar_61.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_40.y));
      };
      highp float fAngle_63;
      fAngle_63 = (_glesMultiTexCoord2.x * ((
        (tmpvar_57 * tmpvar_39)
       + 
        (tmpvar_58 * tmpvar_37)
      ) + fTwitch_42));
      highp vec2 vSinCos_64;
      vSinCos_64.x = sin(fAngle_63);
      vSinCos_64.y = cos(fAngle_63);
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - vSinCos_64.y);
      highp mat3 tmpvar_66;
      tmpvar_66[0].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.x) + vSinCos_64.y);
      tmpvar_66[0].y = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.y) + (vSinCos_64.x * tmpvar_56.z));
      tmpvar_66[0].z = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.z) - (vSinCos_64.x * tmpvar_56.y));
      tmpvar_66[1].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.y) - (vSinCos_64.x * tmpvar_56.z));
      tmpvar_66[1].y = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.y) + vSinCos_64.y);
      tmpvar_66[1].z = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.z) + (vSinCos_64.x * tmpvar_56.x));
      tmpvar_66[2].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.z) + (vSinCos_64.x * tmpvar_56.y));
      tmpvar_66[2].y = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.z) - (vSinCos_64.x * tmpvar_56.x));
      tmpvar_66[2].z = (((tmpvar_65 * tmpvar_56.z) * tmpvar_56.z) + vSinCos_64.y);
      highp mat3 tmpvar_67;
      tmpvar_67 = (tmpvar_53 * tmpvar_66);
      vDirection_29 = (tmpvar_67 * _glesNormal);
      vPos_28 = (normalize((tmpvar_67 * vPos_32)) * tmpvar_49);
    };
    tmpvar_15 = vDirection_29;
    FinalPosition_18 = vPos_28;
  };
  highp vec3 tmpvar_68;
  tmpvar_68 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  FinalPosition_18 = tmpvar_68;
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_69;
    vPos_69 = tmpvar_68;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_70;
      vPos_70 = tmpvar_68;
      highp float fAdherenceScale_71;
      highp vec3 tmpvar_72;
      tmpvar_72 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_73;
      tmpvar_73 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_74;
      highp float fOscillation_75;
      fOscillation_75 = 1.0;
      highp float fAmount_76;
      highp float fTarget_77;
      highp vec4 tmpvar_78;
      tmpvar_78.x = (tmpvar_73 + _glesMultiTexCoord0.w);
      tmpvar_78.y = ((tmpvar_73 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_78.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_73 + _glesMultiTexCoord0.w));
      tmpvar_78.w = ((tmpvar_73 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      vOscillations_74 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      highp float tmpvar_80;
      tmpvar_80 = (vOscillations_74.y * vOscillations_74.z);
      fTarget_77 = 1.0;
      fAmount_76 = tmpvar_80;
      if ((tmpvar_80 < 0.0)) {
        fTarget_77 = -1.0;
        fAmount_76 = -(tmpvar_80);
      };
      fOscillation_75 = (((
        (mix (mix (tmpvar_80, fTarget_77, fAmount_76), fTarget_77, fAmount_76) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_74.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_74.w * _ST_WindBranchWhip.x)));
      vPos_70 = (tmpvar_68 + ((tmpvar_72 * fOscillation_75) * _ST_WindBranch.y));
      highp vec4 tmpvar_81;
      tmpvar_81.zw = vec2(0.0, 0.0);
      tmpvar_81.x = ((tmpvar_73 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_81.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_82;
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_81 + 0.5))
       * 2.0) - 1.0));
      tmpvar_82 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      fAdherenceScale_71 = (1.0 - ((
        ((tmpvar_82.x * tmpvar_82.y) * tmpvar_82.x)
       * tmpvar_82.y) * _ST_WindTurbulences.x));
      fAdherenceScale_71 = (fAdherenceScale_71 + ((vOscillations_74.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_70 = (vPos_70 + ((
        ((vRotatedBranchAnchor_16 - vPos_70) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_71) * _glesMultiTexCoord0.z));
      vPos_69 = vPos_70;
    } else {
      highp vec3 vPos_84;
      vPos_84 = vPos_69;
      highp vec3 tmpvar_85;
      tmpvar_85 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_86;
      tmpvar_86 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_87;
      highp float fAmount_88;
      highp float fTarget_89;
      highp vec4 tmpvar_90;
      tmpvar_90.w = 0.0;
      tmpvar_90.x = (tmpvar_86 + _glesMultiTexCoord0.w);
      tmpvar_90.y = ((tmpvar_86 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_90.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_86 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_91;
      tmpvar_91 = abs(((
        fract((tmpvar_90 + 0.5))
       * 2.0) - 1.0));
      vOscillations_87 = (((
        (tmpvar_91 * tmpvar_91)
       * 
        (3.0 - (2.0 * tmpvar_91))
      ) - 0.5) * 2.0);
      highp float tmpvar_92;
      tmpvar_92 = (vOscillations_87.y * vOscillations_87.z);
      fTarget_89 = 1.0;
      fAmount_88 = tmpvar_92;
      if ((tmpvar_92 < 0.0)) {
        fTarget_89 = -1.0;
        fAmount_88 = -(tmpvar_92);
      };
      vPos_84 = (vPos_69 + ((tmpvar_85 * 
        (((mix (
          mix (tmpvar_92, fTarget_89, fAmount_88)
        , fTarget_89, fAmount_88) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_87.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_69 = vPos_84;
    };
    FinalPosition_18 = vPos_69;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_93;
    vPos_93 = FinalPosition_18;
    highp float fAdjust_94;
    highp float fLength_95;
    fLength_95 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_96;
    tmpvar_96 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_94 = tmpvar_96;
    if ((tmpvar_96 != 0.0)) {
      fAdjust_94 = pow (tmpvar_96, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_97;
    tmpvar_97.zw = vec2(0.0, 0.0);
    tmpvar_97.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_97.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_98;
    highp vec4 tmpvar_99;
    tmpvar_99 = abs(((
      fract((tmpvar_97 + 0.5))
     * 2.0) - 1.0));
    tmpvar_98 = (((
      (tmpvar_99 * tmpvar_99)
     * 
      (3.0 - (2.0 * tmpvar_99))
    ) - 0.5) * 2.0);
    vPos_93.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_98.x + (tmpvar_98.y * tmpvar_98.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_94)));
    vPos_93 = (normalize(vPos_93) * fLength_95);
    FinalPosition_18 = vPos_93;
  };
  tmpvar_14.xyz = FinalPosition_18;
  highp vec4 tmpvar_100;
  tmpvar_100 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_101;
  highp vec4 tmpvar_102;
  tmpvar_102 = (tmpvar_100 * 0.5);
  highp vec2 tmpvar_103;
  tmpvar_103.x = tmpvar_102.x;
  tmpvar_103.y = (tmpvar_102.y * _ProjectionParams.x);
  o_101.xy = (tmpvar_103 + tmpvar_102.w);
  o_101.zw = tmpvar_100.zw;
  highp vec3 tmpvar_104;
  tmpvar_104 = o_101.xyw;
  tmpvar_8 = tmpvar_104;
  highp vec2 tmpvar_105;
  tmpvar_105 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_105;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_106;
  v_106.x = _World2Object[0].x;
  v_106.y = _World2Object[1].x;
  v_106.z = _World2Object[2].x;
  v_106.w = _World2Object[3].x;
  highp vec4 v_107;
  v_107.x = _World2Object[0].y;
  v_107.y = _World2Object[1].y;
  v_107.z = _World2Object[2].y;
  v_107.w = _World2Object[3].y;
  highp vec4 v_108;
  v_108.x = _World2Object[0].z;
  v_108.y = _World2Object[1].z;
  v_108.z = _World2Object[2].z;
  v_108.w = _World2Object[3].z;
  highp vec3 tmpvar_109;
  tmpvar_109 = normalize(((
    (v_106.xyz * tmpvar_15.x)
   + 
    (v_107.xyz * tmpvar_15.y)
  ) + (v_108.xyz * tmpvar_15.z)));
  worldNormal_3 = tmpvar_109;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  mediump float tmpvar_13;
  tmpvar_13 = fract(tmpvar_12.y);
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_13 * 0.0625) + unity_LODFade.y);
  projUV_11.y = tmpvar_14;
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_17;
  lowp float x_18;
  x_18 = (tmpvar_9 - _Cutoff);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_19 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_21;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_24 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.xyz = tmpvar_26;
  c_23.w = tmpvar_9;
  c_22.w = c_23.w;
  mediump vec3 tmpvar_27;
  tmpvar_27 = c_23.xyz;
  c_22.xyz = tmpvar_27;
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_13;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_22;
  tmpvar_22 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_23;
  tmpvar_23[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_23[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_23[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_24;
  tmpvar_24 = (normalize((tmpvar_22 * tmpvar_23)) * sqrt(dot (tmpvar_22, tmpvar_22)));
  FinalPosition_18 = tmpvar_24;
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_25;
    tmpvar_25 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_26;
    isBestWind_26 = (tmpvar_19 == 4.0);
    bool bLeaf2_27;
    bLeaf2_27 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_28;
    vPos_28 = tmpvar_24;
    highp vec3 vDirection_29;
    vDirection_29 = tmpvar_2;
    highp float tmpvar_30;
    if (bLeaf2_27) {
      tmpvar_30 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_31;
    if (bLeaf2_27) {
      tmpvar_31 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_32;
    highp vec4 tmpvar_33;
    tmpvar_33.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_33.x = (tmpvar_30 + tmpvar_25);
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    vPos_32 = (tmpvar_24 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_31 * (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_29 = tmpvar_2;
    vPos_28 = vPos_32;
    if (isBestWind_26) {
      highp vec3 tmpvar_35;
      tmpvar_35 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_36;
      if (bLeaf2_27) {
        tmpvar_36 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_37;
      if (bLeaf2_27) {
        tmpvar_37 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_38;
      if (bLeaf2_27) {
        tmpvar_38 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_39;
      if (bLeaf2_27) {
        tmpvar_39 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_40;
      if (bLeaf2_27) {
        tmpvar_40 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_40 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_41;
      if (bLeaf2_27) {
        tmpvar_41 = bool(1);
      } else {
        tmpvar_41 = bool(1);
      };
      highp float fTwitch_42;
      highp vec3 vAxis_43;
      highp vec3 tmpvar_44;
      tmpvar_44 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_45;
      tmpvar_45 = ((tmpvar_44.x + tmpvar_44.y) + tmpvar_44.z);
      highp vec4 tmpvar_46;
      tmpvar_46.x = (tmpvar_36 + tmpvar_45);
      tmpvar_46.y = ((tmpvar_36 * 0.75) - tmpvar_45);
      tmpvar_46.z = ((tmpvar_36 * 0.01) + tmpvar_45);
      tmpvar_46.w = (tmpvar_36 + tmpvar_45);
      highp vec4 tmpvar_47;
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      tmpvar_47 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = sqrt(dot (vPos_32, vPos_32));
      highp float fAngle_50;
      fAngle_50 = ((_glesMultiTexCoord2.x * tmpvar_38) * (tmpvar_47.x + (tmpvar_47.y * tmpvar_47.y)));
      highp vec2 vSinCos_51;
      vSinCos_51.x = sin(fAngle_50);
      vSinCos_51.y = cos(fAngle_50);
      highp float tmpvar_52;
      tmpvar_52 = (1.0 - vSinCos_51.y);
      highp mat3 tmpvar_53;
      tmpvar_53[0].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.x) + vSinCos_51.y);
      tmpvar_53[0].y = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.y) + (vSinCos_51.x * tmpvar_35.z));
      tmpvar_53[0].z = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.z) - (vSinCos_51.x * tmpvar_35.y));
      tmpvar_53[1].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.y) - (vSinCos_51.x * tmpvar_35.z));
      tmpvar_53[1].y = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.y) + vSinCos_51.y);
      tmpvar_53[1].z = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.z) + (vSinCos_51.x * tmpvar_35.x));
      tmpvar_53[2].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.z) + (vSinCos_51.x * tmpvar_35.y));
      tmpvar_53[2].y = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.z) - (vSinCos_51.x * tmpvar_35.x));
      tmpvar_53[2].z = (((tmpvar_52 * tmpvar_35.z) * tmpvar_35.z) + vSinCos_51.y);
      highp vec3 tmpvar_54;
      tmpvar_54 = ((tmpvar_35.yzx * vRotatedWindVector_17.zxy) - (tmpvar_35.zxy * vRotatedWindVector_17.yzx));
      vAxis_43.xz = tmpvar_54.xz;
      highp float tmpvar_55;
      tmpvar_55 = clamp (dot (vRotatedWindVector_17, tmpvar_35), -1.0, 1.0);
      vAxis_43.y = (tmpvar_54.y + tmpvar_55);
      highp vec3 tmpvar_56;
      tmpvar_56 = normalize(vAxis_43);
      vAxis_43 = tmpvar_56;
      highp float tmpvar_57;
      tmpvar_57 = (1.570796 - (sign(tmpvar_55) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_55))) * (1.570796 + (abs(tmpvar_55) * (-0.2146018 + 
          (abs(tmpvar_55) * (0.08656672 + (abs(tmpvar_55) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_58;
      tmpvar_58 = (tmpvar_47.y - (tmpvar_47.x * tmpvar_47.x));
      fTwitch_42 = 0.0;
      if (tmpvar_41) {
        highp float fTime_59;
        fTime_59 = (tmpvar_40.z + tmpvar_45);
        highp vec4 tmpvar_60;
        tmpvar_60.zw = vec2(0.0, 0.0);
        tmpvar_60.x = fTime_59;
        tmpvar_60.y = (0.87 * fTime_59);
        highp vec4 tmpvar_61;
        highp vec4 tmpvar_62;
        tmpvar_62 = abs(((
          fract((tmpvar_60 + 0.5))
         * 2.0) - 1.0));
        tmpvar_61 = (((
          (tmpvar_62 * tmpvar_62)
         * 
          (3.0 - (2.0 * tmpvar_62))
        ) - 0.5) * 2.0);
        fTwitch_42 = (tmpvar_40.x * pow (clamp (
          ((((tmpvar_61.x * tmpvar_61.y) * tmpvar_61.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_40.y));
      };
      highp float fAngle_63;
      fAngle_63 = (_glesMultiTexCoord2.x * ((
        (tmpvar_57 * tmpvar_39)
       + 
        (tmpvar_58 * tmpvar_37)
      ) + fTwitch_42));
      highp vec2 vSinCos_64;
      vSinCos_64.x = sin(fAngle_63);
      vSinCos_64.y = cos(fAngle_63);
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - vSinCos_64.y);
      highp mat3 tmpvar_66;
      tmpvar_66[0].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.x) + vSinCos_64.y);
      tmpvar_66[0].y = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.y) + (vSinCos_64.x * tmpvar_56.z));
      tmpvar_66[0].z = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.z) - (vSinCos_64.x * tmpvar_56.y));
      tmpvar_66[1].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.y) - (vSinCos_64.x * tmpvar_56.z));
      tmpvar_66[1].y = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.y) + vSinCos_64.y);
      tmpvar_66[1].z = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.z) + (vSinCos_64.x * tmpvar_56.x));
      tmpvar_66[2].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.z) + (vSinCos_64.x * tmpvar_56.y));
      tmpvar_66[2].y = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.z) - (vSinCos_64.x * tmpvar_56.x));
      tmpvar_66[2].z = (((tmpvar_65 * tmpvar_56.z) * tmpvar_56.z) + vSinCos_64.y);
      highp mat3 tmpvar_67;
      tmpvar_67 = (tmpvar_53 * tmpvar_66);
      vDirection_29 = (tmpvar_67 * _glesNormal);
      vPos_28 = (normalize((tmpvar_67 * vPos_32)) * tmpvar_49);
    };
    tmpvar_15 = vDirection_29;
    FinalPosition_18 = vPos_28;
  };
  highp vec3 tmpvar_68;
  tmpvar_68 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  FinalPosition_18 = tmpvar_68;
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_69;
    vPos_69 = tmpvar_68;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_70;
      vPos_70 = tmpvar_68;
      highp float fAdherenceScale_71;
      highp vec3 tmpvar_72;
      tmpvar_72 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_73;
      tmpvar_73 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_74;
      highp float fOscillation_75;
      fOscillation_75 = 1.0;
      highp float fAmount_76;
      highp float fTarget_77;
      highp vec4 tmpvar_78;
      tmpvar_78.x = (tmpvar_73 + _glesMultiTexCoord0.w);
      tmpvar_78.y = ((tmpvar_73 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_78.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_73 + _glesMultiTexCoord0.w));
      tmpvar_78.w = ((tmpvar_73 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      vOscillations_74 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      highp float tmpvar_80;
      tmpvar_80 = (vOscillations_74.y * vOscillations_74.z);
      fTarget_77 = 1.0;
      fAmount_76 = tmpvar_80;
      if ((tmpvar_80 < 0.0)) {
        fTarget_77 = -1.0;
        fAmount_76 = -(tmpvar_80);
      };
      fOscillation_75 = (((
        (mix (mix (tmpvar_80, fTarget_77, fAmount_76), fTarget_77, fAmount_76) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_74.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_74.w * _ST_WindBranchWhip.x)));
      vPos_70 = (tmpvar_68 + ((tmpvar_72 * fOscillation_75) * _ST_WindBranch.y));
      highp vec4 tmpvar_81;
      tmpvar_81.zw = vec2(0.0, 0.0);
      tmpvar_81.x = ((tmpvar_73 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_81.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_82;
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_81 + 0.5))
       * 2.0) - 1.0));
      tmpvar_82 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      fAdherenceScale_71 = (1.0 - ((
        ((tmpvar_82.x * tmpvar_82.y) * tmpvar_82.x)
       * tmpvar_82.y) * _ST_WindTurbulences.x));
      fAdherenceScale_71 = (fAdherenceScale_71 + ((vOscillations_74.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_70 = (vPos_70 + ((
        ((vRotatedBranchAnchor_16 - vPos_70) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_71) * _glesMultiTexCoord0.z));
      vPos_69 = vPos_70;
    } else {
      highp vec3 vPos_84;
      vPos_84 = vPos_69;
      highp vec3 tmpvar_85;
      tmpvar_85 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_86;
      tmpvar_86 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_87;
      highp float fAmount_88;
      highp float fTarget_89;
      highp vec4 tmpvar_90;
      tmpvar_90.w = 0.0;
      tmpvar_90.x = (tmpvar_86 + _glesMultiTexCoord0.w);
      tmpvar_90.y = ((tmpvar_86 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_90.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_86 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_91;
      tmpvar_91 = abs(((
        fract((tmpvar_90 + 0.5))
       * 2.0) - 1.0));
      vOscillations_87 = (((
        (tmpvar_91 * tmpvar_91)
       * 
        (3.0 - (2.0 * tmpvar_91))
      ) - 0.5) * 2.0);
      highp float tmpvar_92;
      tmpvar_92 = (vOscillations_87.y * vOscillations_87.z);
      fTarget_89 = 1.0;
      fAmount_88 = tmpvar_92;
      if ((tmpvar_92 < 0.0)) {
        fTarget_89 = -1.0;
        fAmount_88 = -(tmpvar_92);
      };
      vPos_84 = (vPos_69 + ((tmpvar_85 * 
        (((mix (
          mix (tmpvar_92, fTarget_89, fAmount_88)
        , fTarget_89, fAmount_88) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_87.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_69 = vPos_84;
    };
    FinalPosition_18 = vPos_69;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_93;
    vPos_93 = FinalPosition_18;
    highp float fAdjust_94;
    highp float fLength_95;
    fLength_95 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_96;
    tmpvar_96 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_94 = tmpvar_96;
    if ((tmpvar_96 != 0.0)) {
      fAdjust_94 = pow (tmpvar_96, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_97;
    tmpvar_97.zw = vec2(0.0, 0.0);
    tmpvar_97.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_97.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_98;
    highp vec4 tmpvar_99;
    tmpvar_99 = abs(((
      fract((tmpvar_97 + 0.5))
     * 2.0) - 1.0));
    tmpvar_98 = (((
      (tmpvar_99 * tmpvar_99)
     * 
      (3.0 - (2.0 * tmpvar_99))
    ) - 0.5) * 2.0);
    vPos_93.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_98.x + (tmpvar_98.y * tmpvar_98.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_94)));
    vPos_93 = (normalize(vPos_93) * fLength_95);
    FinalPosition_18 = vPos_93;
  };
  tmpvar_14.xyz = FinalPosition_18;
  highp vec4 tmpvar_100;
  tmpvar_100 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_101;
  highp vec4 tmpvar_102;
  tmpvar_102 = (tmpvar_100 * 0.5);
  highp vec2 tmpvar_103;
  tmpvar_103.x = tmpvar_102.x;
  tmpvar_103.y = (tmpvar_102.y * _ProjectionParams.x);
  o_101.xy = (tmpvar_103 + tmpvar_102.w);
  o_101.zw = tmpvar_100.zw;
  highp vec3 tmpvar_104;
  tmpvar_104 = o_101.xyw;
  tmpvar_8 = tmpvar_104;
  highp vec2 tmpvar_105;
  tmpvar_105 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_105;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_106;
  v_106.x = _World2Object[0].x;
  v_106.y = _World2Object[1].x;
  v_106.z = _World2Object[2].x;
  v_106.w = _World2Object[3].x;
  highp vec4 v_107;
  v_107.x = _World2Object[0].y;
  v_107.y = _World2Object[1].y;
  v_107.z = _World2Object[2].y;
  v_107.w = _World2Object[3].y;
  highp vec4 v_108;
  v_108.x = _World2Object[0].z;
  v_108.y = _World2Object[1].z;
  v_108.z = _World2Object[2].z;
  v_108.w = _World2Object[3].z;
  highp vec3 tmpvar_109;
  tmpvar_109 = normalize(((
    (v_106.xyz * tmpvar_15.x)
   + 
    (v_107.xyz * tmpvar_15.y)
  ) + (v_108.xyz * tmpvar_15.z)));
  worldNormal_3 = tmpvar_109;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  mediump float tmpvar_13;
  tmpvar_13 = fract(tmpvar_12.y);
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_13 * 0.0625) + unity_LODFade.y);
  projUV_11.y = tmpvar_14;
  lowp float x_15;
  x_15 = (texture (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_17;
  lowp float x_18;
  x_18 = (tmpvar_9 - _Cutoff);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_19 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_21;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_24 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.xyz = tmpvar_26;
  c_23.w = tmpvar_9;
  c_22.w = c_23.w;
  mediump vec3 tmpvar_27;
  tmpvar_27 = c_23.xyz;
  c_22.xyz = tmpvar_27;
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_13;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_22;
  tmpvar_22 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_23;
  tmpvar_23[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_23[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_23[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_24;
  tmpvar_24 = (normalize((tmpvar_22 * tmpvar_23)) * sqrt(dot (tmpvar_22, tmpvar_22)));
  FinalPosition_18 = tmpvar_24;
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_25;
    tmpvar_25 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_26;
    isBestWind_26 = (tmpvar_19 == 4.0);
    bool bLeaf2_27;
    bLeaf2_27 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_28;
    vPos_28 = tmpvar_24;
    highp vec3 vDirection_29;
    vDirection_29 = tmpvar_2;
    highp float tmpvar_30;
    if (bLeaf2_27) {
      tmpvar_30 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_31;
    if (bLeaf2_27) {
      tmpvar_31 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_32;
    highp vec4 tmpvar_33;
    tmpvar_33.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_33.x = (tmpvar_30 + tmpvar_25);
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    vPos_32 = (tmpvar_24 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_31 * (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_29 = tmpvar_2;
    vPos_28 = vPos_32;
    if (isBestWind_26) {
      highp vec3 tmpvar_35;
      tmpvar_35 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_36;
      if (bLeaf2_27) {
        tmpvar_36 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_37;
      if (bLeaf2_27) {
        tmpvar_37 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_38;
      if (bLeaf2_27) {
        tmpvar_38 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_39;
      if (bLeaf2_27) {
        tmpvar_39 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_40;
      if (bLeaf2_27) {
        tmpvar_40 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_40 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_41;
      if (bLeaf2_27) {
        tmpvar_41 = bool(1);
      } else {
        tmpvar_41 = bool(1);
      };
      highp float fTwitch_42;
      highp vec3 vAxis_43;
      highp vec3 tmpvar_44;
      tmpvar_44 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_45;
      tmpvar_45 = ((tmpvar_44.x + tmpvar_44.y) + tmpvar_44.z);
      highp vec4 tmpvar_46;
      tmpvar_46.x = (tmpvar_36 + tmpvar_45);
      tmpvar_46.y = ((tmpvar_36 * 0.75) - tmpvar_45);
      tmpvar_46.z = ((tmpvar_36 * 0.01) + tmpvar_45);
      tmpvar_46.w = (tmpvar_36 + tmpvar_45);
      highp vec4 tmpvar_47;
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      tmpvar_47 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = sqrt(dot (vPos_32, vPos_32));
      highp float fAngle_50;
      fAngle_50 = ((_glesMultiTexCoord2.x * tmpvar_38) * (tmpvar_47.x + (tmpvar_47.y * tmpvar_47.y)));
      highp vec2 vSinCos_51;
      vSinCos_51.x = sin(fAngle_50);
      vSinCos_51.y = cos(fAngle_50);
      highp float tmpvar_52;
      tmpvar_52 = (1.0 - vSinCos_51.y);
      highp mat3 tmpvar_53;
      tmpvar_53[0].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.x) + vSinCos_51.y);
      tmpvar_53[0].y = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.y) + (vSinCos_51.x * tmpvar_35.z));
      tmpvar_53[0].z = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.z) - (vSinCos_51.x * tmpvar_35.y));
      tmpvar_53[1].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.y) - (vSinCos_51.x * tmpvar_35.z));
      tmpvar_53[1].y = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.y) + vSinCos_51.y);
      tmpvar_53[1].z = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.z) + (vSinCos_51.x * tmpvar_35.x));
      tmpvar_53[2].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.z) + (vSinCos_51.x * tmpvar_35.y));
      tmpvar_53[2].y = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.z) - (vSinCos_51.x * tmpvar_35.x));
      tmpvar_53[2].z = (((tmpvar_52 * tmpvar_35.z) * tmpvar_35.z) + vSinCos_51.y);
      highp vec3 tmpvar_54;
      tmpvar_54 = ((tmpvar_35.yzx * vRotatedWindVector_17.zxy) - (tmpvar_35.zxy * vRotatedWindVector_17.yzx));
      vAxis_43.xz = tmpvar_54.xz;
      highp float tmpvar_55;
      tmpvar_55 = clamp (dot (vRotatedWindVector_17, tmpvar_35), -1.0, 1.0);
      vAxis_43.y = (tmpvar_54.y + tmpvar_55);
      highp vec3 tmpvar_56;
      tmpvar_56 = normalize(vAxis_43);
      vAxis_43 = tmpvar_56;
      highp float tmpvar_57;
      tmpvar_57 = (1.570796 - (sign(tmpvar_55) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_55))) * (1.570796 + (abs(tmpvar_55) * (-0.2146018 + 
          (abs(tmpvar_55) * (0.08656672 + (abs(tmpvar_55) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_58;
      tmpvar_58 = (tmpvar_47.y - (tmpvar_47.x * tmpvar_47.x));
      fTwitch_42 = 0.0;
      if (tmpvar_41) {
        highp float fTime_59;
        fTime_59 = (tmpvar_40.z + tmpvar_45);
        highp vec4 tmpvar_60;
        tmpvar_60.zw = vec2(0.0, 0.0);
        tmpvar_60.x = fTime_59;
        tmpvar_60.y = (0.87 * fTime_59);
        highp vec4 tmpvar_61;
        highp vec4 tmpvar_62;
        tmpvar_62 = abs(((
          fract((tmpvar_60 + 0.5))
         * 2.0) - 1.0));
        tmpvar_61 = (((
          (tmpvar_62 * tmpvar_62)
         * 
          (3.0 - (2.0 * tmpvar_62))
        ) - 0.5) * 2.0);
        fTwitch_42 = (tmpvar_40.x * pow (clamp (
          ((((tmpvar_61.x * tmpvar_61.y) * tmpvar_61.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_40.y));
      };
      highp float fAngle_63;
      fAngle_63 = (_glesMultiTexCoord2.x * ((
        (tmpvar_57 * tmpvar_39)
       + 
        (tmpvar_58 * tmpvar_37)
      ) + fTwitch_42));
      highp vec2 vSinCos_64;
      vSinCos_64.x = sin(fAngle_63);
      vSinCos_64.y = cos(fAngle_63);
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - vSinCos_64.y);
      highp mat3 tmpvar_66;
      tmpvar_66[0].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.x) + vSinCos_64.y);
      tmpvar_66[0].y = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.y) + (vSinCos_64.x * tmpvar_56.z));
      tmpvar_66[0].z = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.z) - (vSinCos_64.x * tmpvar_56.y));
      tmpvar_66[1].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.y) - (vSinCos_64.x * tmpvar_56.z));
      tmpvar_66[1].y = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.y) + vSinCos_64.y);
      tmpvar_66[1].z = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.z) + (vSinCos_64.x * tmpvar_56.x));
      tmpvar_66[2].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.z) + (vSinCos_64.x * tmpvar_56.y));
      tmpvar_66[2].y = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.z) - (vSinCos_64.x * tmpvar_56.x));
      tmpvar_66[2].z = (((tmpvar_65 * tmpvar_56.z) * tmpvar_56.z) + vSinCos_64.y);
      highp mat3 tmpvar_67;
      tmpvar_67 = (tmpvar_53 * tmpvar_66);
      vDirection_29 = (tmpvar_67 * _glesNormal);
      vPos_28 = (normalize((tmpvar_67 * vPos_32)) * tmpvar_49);
    };
    tmpvar_15 = vDirection_29;
    FinalPosition_18 = vPos_28;
  };
  highp vec3 tmpvar_68;
  tmpvar_68 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  FinalPosition_18 = tmpvar_68;
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_69;
    vPos_69 = tmpvar_68;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_70;
      vPos_70 = tmpvar_68;
      highp float fAdherenceScale_71;
      highp vec3 tmpvar_72;
      tmpvar_72 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_73;
      tmpvar_73 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_74;
      highp float fOscillation_75;
      fOscillation_75 = 1.0;
      highp float fAmount_76;
      highp float fTarget_77;
      highp vec4 tmpvar_78;
      tmpvar_78.x = (tmpvar_73 + _glesMultiTexCoord0.w);
      tmpvar_78.y = ((tmpvar_73 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_78.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_73 + _glesMultiTexCoord0.w));
      tmpvar_78.w = ((tmpvar_73 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      vOscillations_74 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      highp float tmpvar_80;
      tmpvar_80 = (vOscillations_74.y * vOscillations_74.z);
      fTarget_77 = 1.0;
      fAmount_76 = tmpvar_80;
      if ((tmpvar_80 < 0.0)) {
        fTarget_77 = -1.0;
        fAmount_76 = -(tmpvar_80);
      };
      fOscillation_75 = (((
        (mix (mix (tmpvar_80, fTarget_77, fAmount_76), fTarget_77, fAmount_76) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_74.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_74.w * _ST_WindBranchWhip.x)));
      vPos_70 = (tmpvar_68 + ((tmpvar_72 * fOscillation_75) * _ST_WindBranch.y));
      highp vec4 tmpvar_81;
      tmpvar_81.zw = vec2(0.0, 0.0);
      tmpvar_81.x = ((tmpvar_73 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_81.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_82;
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_81 + 0.5))
       * 2.0) - 1.0));
      tmpvar_82 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      fAdherenceScale_71 = (1.0 - ((
        ((tmpvar_82.x * tmpvar_82.y) * tmpvar_82.x)
       * tmpvar_82.y) * _ST_WindTurbulences.x));
      fAdherenceScale_71 = (fAdherenceScale_71 + ((vOscillations_74.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_70 = (vPos_70 + ((
        ((vRotatedBranchAnchor_16 - vPos_70) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_71) * _glesMultiTexCoord0.z));
      vPos_69 = vPos_70;
    } else {
      highp vec3 vPos_84;
      vPos_84 = vPos_69;
      highp vec3 tmpvar_85;
      tmpvar_85 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_86;
      tmpvar_86 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_87;
      highp float fAmount_88;
      highp float fTarget_89;
      highp vec4 tmpvar_90;
      tmpvar_90.w = 0.0;
      tmpvar_90.x = (tmpvar_86 + _glesMultiTexCoord0.w);
      tmpvar_90.y = ((tmpvar_86 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_90.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_86 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_91;
      tmpvar_91 = abs(((
        fract((tmpvar_90 + 0.5))
       * 2.0) - 1.0));
      vOscillations_87 = (((
        (tmpvar_91 * tmpvar_91)
       * 
        (3.0 - (2.0 * tmpvar_91))
      ) - 0.5) * 2.0);
      highp float tmpvar_92;
      tmpvar_92 = (vOscillations_87.y * vOscillations_87.z);
      fTarget_89 = 1.0;
      fAmount_88 = tmpvar_92;
      if ((tmpvar_92 < 0.0)) {
        fTarget_89 = -1.0;
        fAmount_88 = -(tmpvar_92);
      };
      vPos_84 = (vPos_69 + ((tmpvar_85 * 
        (((mix (
          mix (tmpvar_92, fTarget_89, fAmount_88)
        , fTarget_89, fAmount_88) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_87.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_69 = vPos_84;
    };
    FinalPosition_18 = vPos_69;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_93;
    vPos_93 = FinalPosition_18;
    highp float fAdjust_94;
    highp float fLength_95;
    fLength_95 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_96;
    tmpvar_96 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_94 = tmpvar_96;
    if ((tmpvar_96 != 0.0)) {
      fAdjust_94 = pow (tmpvar_96, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_97;
    tmpvar_97.zw = vec2(0.0, 0.0);
    tmpvar_97.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_97.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_98;
    highp vec4 tmpvar_99;
    tmpvar_99 = abs(((
      fract((tmpvar_97 + 0.5))
     * 2.0) - 1.0));
    tmpvar_98 = (((
      (tmpvar_99 * tmpvar_99)
     * 
      (3.0 - (2.0 * tmpvar_99))
    ) - 0.5) * 2.0);
    vPos_93.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_98.x + (tmpvar_98.y * tmpvar_98.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_94)));
    vPos_93 = (normalize(vPos_93) * fLength_95);
    FinalPosition_18 = vPos_93;
  };
  tmpvar_14.xyz = FinalPosition_18;
  highp vec4 tmpvar_100;
  tmpvar_100 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_101;
  highp vec4 tmpvar_102;
  tmpvar_102 = (tmpvar_100 * 0.5);
  highp vec2 tmpvar_103;
  tmpvar_103.x = tmpvar_102.x;
  tmpvar_103.y = (tmpvar_102.y * _ProjectionParams.x);
  o_101.xy = (tmpvar_103 + tmpvar_102.w);
  o_101.zw = tmpvar_100.zw;
  highp vec3 tmpvar_104;
  tmpvar_104 = o_101.xyw;
  tmpvar_8 = tmpvar_104;
  highp vec2 tmpvar_105;
  tmpvar_105 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_105;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_106;
  v_106.x = _World2Object[0].x;
  v_106.y = _World2Object[1].x;
  v_106.z = _World2Object[2].x;
  v_106.w = _World2Object[3].x;
  highp vec4 v_107;
  v_107.x = _World2Object[0].y;
  v_107.y = _World2Object[1].y;
  v_107.z = _World2Object[2].y;
  v_107.w = _World2Object[3].y;
  highp vec4 v_108;
  v_108.x = _World2Object[0].z;
  v_108.y = _World2Object[1].z;
  v_108.z = _World2Object[2].z;
  v_108.w = _World2Object[3].z;
  highp vec3 tmpvar_109;
  tmpvar_109 = normalize(((
    (v_106.xyz * tmpvar_15.x)
   + 
    (v_107.xyz * tmpvar_15.y)
  ) + (v_108.xyz * tmpvar_15.z)));
  worldNormal_3 = tmpvar_109;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_11 = tmpvar_19;
  lowp float x_20;
  x_20 = (tmpvar_11 - _Cutoff);
  if ((x_20 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_21 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_21.x, max (tmpvar_21.y, tmpvar_21.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_22;
  tmpvar_22 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  tmpvar_10 = tmpvar_22;
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_24;
  tmpvar_24 = (_LightMatrix0 * tmpvar_23);
  lightCoord_5 = tmpvar_24;
  lowp vec4 tmpvar_25;
  mediump vec2 P_26;
  P_26 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_25 = texture2D (_LightTexture0, P_26);
  mediump float tmpvar_27;
  tmpvar_27 = dot (lightCoord_5.xyz, lightCoord_5.xyz);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_LightTextureB0, vec2(tmpvar_27));
  mediump float tmpvar_29;
  tmpvar_29 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_25.w) * tmpvar_28.w);
  atten_4 = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_30;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_33 = tmpvar_34;
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tmpvar_10 * tmpvar_1) * diff_33);
  c_32.xyz = tmpvar_35;
  c_32.w = tmpvar_11;
  c_31.w = c_32.w;
  mediump vec3 tmpvar_36;
  tmpvar_36 = c_32.xyz;
  c_31.xyz = tmpvar_36;
  c_3.xyz = c_31.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_13;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_22;
  tmpvar_22 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_23;
  tmpvar_23[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_23[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_23[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_24;
  tmpvar_24 = (normalize((tmpvar_22 * tmpvar_23)) * sqrt(dot (tmpvar_22, tmpvar_22)));
  FinalPosition_18 = tmpvar_24;
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_25;
    tmpvar_25 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_26;
    isBestWind_26 = (tmpvar_19 == 4.0);
    bool bLeaf2_27;
    bLeaf2_27 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_28;
    vPos_28 = tmpvar_24;
    highp vec3 vDirection_29;
    vDirection_29 = tmpvar_2;
    highp float tmpvar_30;
    if (bLeaf2_27) {
      tmpvar_30 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_31;
    if (bLeaf2_27) {
      tmpvar_31 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_32;
    highp vec4 tmpvar_33;
    tmpvar_33.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_33.x = (tmpvar_30 + tmpvar_25);
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    vPos_32 = (tmpvar_24 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_31 * (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_29 = tmpvar_2;
    vPos_28 = vPos_32;
    if (isBestWind_26) {
      highp vec3 tmpvar_35;
      tmpvar_35 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_36;
      if (bLeaf2_27) {
        tmpvar_36 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_37;
      if (bLeaf2_27) {
        tmpvar_37 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_38;
      if (bLeaf2_27) {
        tmpvar_38 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_39;
      if (bLeaf2_27) {
        tmpvar_39 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_40;
      if (bLeaf2_27) {
        tmpvar_40 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_40 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_41;
      if (bLeaf2_27) {
        tmpvar_41 = bool(1);
      } else {
        tmpvar_41 = bool(1);
      };
      highp float fTwitch_42;
      highp vec3 vAxis_43;
      highp vec3 tmpvar_44;
      tmpvar_44 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_45;
      tmpvar_45 = ((tmpvar_44.x + tmpvar_44.y) + tmpvar_44.z);
      highp vec4 tmpvar_46;
      tmpvar_46.x = (tmpvar_36 + tmpvar_45);
      tmpvar_46.y = ((tmpvar_36 * 0.75) - tmpvar_45);
      tmpvar_46.z = ((tmpvar_36 * 0.01) + tmpvar_45);
      tmpvar_46.w = (tmpvar_36 + tmpvar_45);
      highp vec4 tmpvar_47;
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      tmpvar_47 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = sqrt(dot (vPos_32, vPos_32));
      highp float fAngle_50;
      fAngle_50 = ((_glesMultiTexCoord2.x * tmpvar_38) * (tmpvar_47.x + (tmpvar_47.y * tmpvar_47.y)));
      highp vec2 vSinCos_51;
      vSinCos_51.x = sin(fAngle_50);
      vSinCos_51.y = cos(fAngle_50);
      highp float tmpvar_52;
      tmpvar_52 = (1.0 - vSinCos_51.y);
      highp mat3 tmpvar_53;
      tmpvar_53[0].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.x) + vSinCos_51.y);
      tmpvar_53[0].y = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.y) + (vSinCos_51.x * tmpvar_35.z));
      tmpvar_53[0].z = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.z) - (vSinCos_51.x * tmpvar_35.y));
      tmpvar_53[1].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.y) - (vSinCos_51.x * tmpvar_35.z));
      tmpvar_53[1].y = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.y) + vSinCos_51.y);
      tmpvar_53[1].z = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.z) + (vSinCos_51.x * tmpvar_35.x));
      tmpvar_53[2].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.z) + (vSinCos_51.x * tmpvar_35.y));
      tmpvar_53[2].y = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.z) - (vSinCos_51.x * tmpvar_35.x));
      tmpvar_53[2].z = (((tmpvar_52 * tmpvar_35.z) * tmpvar_35.z) + vSinCos_51.y);
      highp vec3 tmpvar_54;
      tmpvar_54 = ((tmpvar_35.yzx * vRotatedWindVector_17.zxy) - (tmpvar_35.zxy * vRotatedWindVector_17.yzx));
      vAxis_43.xz = tmpvar_54.xz;
      highp float tmpvar_55;
      tmpvar_55 = clamp (dot (vRotatedWindVector_17, tmpvar_35), -1.0, 1.0);
      vAxis_43.y = (tmpvar_54.y + tmpvar_55);
      highp vec3 tmpvar_56;
      tmpvar_56 = normalize(vAxis_43);
      vAxis_43 = tmpvar_56;
      highp float tmpvar_57;
      tmpvar_57 = (1.570796 - (sign(tmpvar_55) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_55))) * (1.570796 + (abs(tmpvar_55) * (-0.2146018 + 
          (abs(tmpvar_55) * (0.08656672 + (abs(tmpvar_55) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_58;
      tmpvar_58 = (tmpvar_47.y - (tmpvar_47.x * tmpvar_47.x));
      fTwitch_42 = 0.0;
      if (tmpvar_41) {
        highp float fTime_59;
        fTime_59 = (tmpvar_40.z + tmpvar_45);
        highp vec4 tmpvar_60;
        tmpvar_60.zw = vec2(0.0, 0.0);
        tmpvar_60.x = fTime_59;
        tmpvar_60.y = (0.87 * fTime_59);
        highp vec4 tmpvar_61;
        highp vec4 tmpvar_62;
        tmpvar_62 = abs(((
          fract((tmpvar_60 + 0.5))
         * 2.0) - 1.0));
        tmpvar_61 = (((
          (tmpvar_62 * tmpvar_62)
         * 
          (3.0 - (2.0 * tmpvar_62))
        ) - 0.5) * 2.0);
        fTwitch_42 = (tmpvar_40.x * pow (clamp (
          ((((tmpvar_61.x * tmpvar_61.y) * tmpvar_61.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_40.y));
      };
      highp float fAngle_63;
      fAngle_63 = (_glesMultiTexCoord2.x * ((
        (tmpvar_57 * tmpvar_39)
       + 
        (tmpvar_58 * tmpvar_37)
      ) + fTwitch_42));
      highp vec2 vSinCos_64;
      vSinCos_64.x = sin(fAngle_63);
      vSinCos_64.y = cos(fAngle_63);
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - vSinCos_64.y);
      highp mat3 tmpvar_66;
      tmpvar_66[0].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.x) + vSinCos_64.y);
      tmpvar_66[0].y = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.y) + (vSinCos_64.x * tmpvar_56.z));
      tmpvar_66[0].z = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.z) - (vSinCos_64.x * tmpvar_56.y));
      tmpvar_66[1].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.y) - (vSinCos_64.x * tmpvar_56.z));
      tmpvar_66[1].y = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.y) + vSinCos_64.y);
      tmpvar_66[1].z = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.z) + (vSinCos_64.x * tmpvar_56.x));
      tmpvar_66[2].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.z) + (vSinCos_64.x * tmpvar_56.y));
      tmpvar_66[2].y = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.z) - (vSinCos_64.x * tmpvar_56.x));
      tmpvar_66[2].z = (((tmpvar_65 * tmpvar_56.z) * tmpvar_56.z) + vSinCos_64.y);
      highp mat3 tmpvar_67;
      tmpvar_67 = (tmpvar_53 * tmpvar_66);
      vDirection_29 = (tmpvar_67 * _glesNormal);
      vPos_28 = (normalize((tmpvar_67 * vPos_32)) * tmpvar_49);
    };
    tmpvar_15 = vDirection_29;
    FinalPosition_18 = vPos_28;
  };
  highp vec3 tmpvar_68;
  tmpvar_68 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  FinalPosition_18 = tmpvar_68;
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_69;
    vPos_69 = tmpvar_68;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_70;
      vPos_70 = tmpvar_68;
      highp float fAdherenceScale_71;
      highp vec3 tmpvar_72;
      tmpvar_72 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_73;
      tmpvar_73 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_74;
      highp float fOscillation_75;
      fOscillation_75 = 1.0;
      highp float fAmount_76;
      highp float fTarget_77;
      highp vec4 tmpvar_78;
      tmpvar_78.x = (tmpvar_73 + _glesMultiTexCoord0.w);
      tmpvar_78.y = ((tmpvar_73 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_78.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_73 + _glesMultiTexCoord0.w));
      tmpvar_78.w = ((tmpvar_73 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      vOscillations_74 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      highp float tmpvar_80;
      tmpvar_80 = (vOscillations_74.y * vOscillations_74.z);
      fTarget_77 = 1.0;
      fAmount_76 = tmpvar_80;
      if ((tmpvar_80 < 0.0)) {
        fTarget_77 = -1.0;
        fAmount_76 = -(tmpvar_80);
      };
      fOscillation_75 = (((
        (mix (mix (tmpvar_80, fTarget_77, fAmount_76), fTarget_77, fAmount_76) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_74.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_74.w * _ST_WindBranchWhip.x)));
      vPos_70 = (tmpvar_68 + ((tmpvar_72 * fOscillation_75) * _ST_WindBranch.y));
      highp vec4 tmpvar_81;
      tmpvar_81.zw = vec2(0.0, 0.0);
      tmpvar_81.x = ((tmpvar_73 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_81.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_82;
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_81 + 0.5))
       * 2.0) - 1.0));
      tmpvar_82 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      fAdherenceScale_71 = (1.0 - ((
        ((tmpvar_82.x * tmpvar_82.y) * tmpvar_82.x)
       * tmpvar_82.y) * _ST_WindTurbulences.x));
      fAdherenceScale_71 = (fAdherenceScale_71 + ((vOscillations_74.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_70 = (vPos_70 + ((
        ((vRotatedBranchAnchor_16 - vPos_70) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_71) * _glesMultiTexCoord0.z));
      vPos_69 = vPos_70;
    } else {
      highp vec3 vPos_84;
      vPos_84 = vPos_69;
      highp vec3 tmpvar_85;
      tmpvar_85 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_86;
      tmpvar_86 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_87;
      highp float fAmount_88;
      highp float fTarget_89;
      highp vec4 tmpvar_90;
      tmpvar_90.w = 0.0;
      tmpvar_90.x = (tmpvar_86 + _glesMultiTexCoord0.w);
      tmpvar_90.y = ((tmpvar_86 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_90.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_86 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_91;
      tmpvar_91 = abs(((
        fract((tmpvar_90 + 0.5))
       * 2.0) - 1.0));
      vOscillations_87 = (((
        (tmpvar_91 * tmpvar_91)
       * 
        (3.0 - (2.0 * tmpvar_91))
      ) - 0.5) * 2.0);
      highp float tmpvar_92;
      tmpvar_92 = (vOscillations_87.y * vOscillations_87.z);
      fTarget_89 = 1.0;
      fAmount_88 = tmpvar_92;
      if ((tmpvar_92 < 0.0)) {
        fTarget_89 = -1.0;
        fAmount_88 = -(tmpvar_92);
      };
      vPos_84 = (vPos_69 + ((tmpvar_85 * 
        (((mix (
          mix (tmpvar_92, fTarget_89, fAmount_88)
        , fTarget_89, fAmount_88) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_87.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_69 = vPos_84;
    };
    FinalPosition_18 = vPos_69;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_93;
    vPos_93 = FinalPosition_18;
    highp float fAdjust_94;
    highp float fLength_95;
    fLength_95 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_96;
    tmpvar_96 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_94 = tmpvar_96;
    if ((tmpvar_96 != 0.0)) {
      fAdjust_94 = pow (tmpvar_96, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_97;
    tmpvar_97.zw = vec2(0.0, 0.0);
    tmpvar_97.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_97.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_98;
    highp vec4 tmpvar_99;
    tmpvar_99 = abs(((
      fract((tmpvar_97 + 0.5))
     * 2.0) - 1.0));
    tmpvar_98 = (((
      (tmpvar_99 * tmpvar_99)
     * 
      (3.0 - (2.0 * tmpvar_99))
    ) - 0.5) * 2.0);
    vPos_93.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_98.x + (tmpvar_98.y * tmpvar_98.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_94)));
    vPos_93 = (normalize(vPos_93) * fLength_95);
    FinalPosition_18 = vPos_93;
  };
  tmpvar_14.xyz = FinalPosition_18;
  highp vec4 tmpvar_100;
  tmpvar_100 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_101;
  highp vec4 tmpvar_102;
  tmpvar_102 = (tmpvar_100 * 0.5);
  highp vec2 tmpvar_103;
  tmpvar_103.x = tmpvar_102.x;
  tmpvar_103.y = (tmpvar_102.y * _ProjectionParams.x);
  o_101.xy = (tmpvar_103 + tmpvar_102.w);
  o_101.zw = tmpvar_100.zw;
  highp vec3 tmpvar_104;
  tmpvar_104 = o_101.xyw;
  tmpvar_8 = tmpvar_104;
  highp vec2 tmpvar_105;
  tmpvar_105 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_105;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_106;
  v_106.x = _World2Object[0].x;
  v_106.y = _World2Object[1].x;
  v_106.z = _World2Object[2].x;
  v_106.w = _World2Object[3].x;
  highp vec4 v_107;
  v_107.x = _World2Object[0].y;
  v_107.y = _World2Object[1].y;
  v_107.z = _World2Object[2].y;
  v_107.w = _World2Object[3].y;
  highp vec4 v_108;
  v_108.x = _World2Object[0].z;
  v_108.y = _World2Object[1].z;
  v_108.z = _World2Object[2].z;
  v_108.w = _World2Object[3].z;
  highp vec3 tmpvar_109;
  tmpvar_109 = normalize(((
    (v_106.xyz * tmpvar_15.x)
   + 
    (v_107.xyz * tmpvar_15.y)
  ) + (v_108.xyz * tmpvar_15.z)));
  worldNormal_3 = tmpvar_109;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_11 = tmpvar_19;
  lowp float x_20;
  x_20 = (tmpvar_11 - _Cutoff);
  if ((x_20 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_21 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_21.x, max (tmpvar_21.y, tmpvar_21.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_22;
  tmpvar_22 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  tmpvar_10 = tmpvar_22;
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_24;
  tmpvar_24 = (_LightMatrix0 * tmpvar_23);
  lightCoord_5 = tmpvar_24;
  lowp vec4 tmpvar_25;
  mediump vec2 P_26;
  P_26 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_25 = texture (_LightTexture0, P_26);
  mediump float tmpvar_27;
  tmpvar_27 = dot (lightCoord_5.xyz, lightCoord_5.xyz);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture (_LightTextureB0, vec2(tmpvar_27));
  mediump float tmpvar_29;
  tmpvar_29 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_25.w) * tmpvar_28.w);
  atten_4 = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_30;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_33 = tmpvar_34;
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tmpvar_10 * tmpvar_1) * diff_33);
  c_32.xyz = tmpvar_35;
  c_32.w = tmpvar_11;
  c_31.w = c_32.w;
  mediump vec3 tmpvar_36;
  tmpvar_36 = c_32.xyz;
  c_31.xyz = tmpvar_36;
  c_3.xyz = c_31.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_13;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_22;
  tmpvar_22 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_23;
  tmpvar_23[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_23[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_23[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_24;
  tmpvar_24 = (normalize((tmpvar_22 * tmpvar_23)) * sqrt(dot (tmpvar_22, tmpvar_22)));
  FinalPosition_18 = tmpvar_24;
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_25;
    tmpvar_25 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_26;
    isBestWind_26 = (tmpvar_19 == 4.0);
    bool bLeaf2_27;
    bLeaf2_27 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_28;
    vPos_28 = tmpvar_24;
    highp vec3 vDirection_29;
    vDirection_29 = tmpvar_2;
    highp float tmpvar_30;
    if (bLeaf2_27) {
      tmpvar_30 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_31;
    if (bLeaf2_27) {
      tmpvar_31 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_32;
    highp vec4 tmpvar_33;
    tmpvar_33.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_33.x = (tmpvar_30 + tmpvar_25);
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    vPos_32 = (tmpvar_24 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_31 * (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_29 = tmpvar_2;
    vPos_28 = vPos_32;
    if (isBestWind_26) {
      highp vec3 tmpvar_35;
      tmpvar_35 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_36;
      if (bLeaf2_27) {
        tmpvar_36 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_37;
      if (bLeaf2_27) {
        tmpvar_37 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_38;
      if (bLeaf2_27) {
        tmpvar_38 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_39;
      if (bLeaf2_27) {
        tmpvar_39 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_40;
      if (bLeaf2_27) {
        tmpvar_40 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_40 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_41;
      if (bLeaf2_27) {
        tmpvar_41 = bool(1);
      } else {
        tmpvar_41 = bool(1);
      };
      highp float fTwitch_42;
      highp vec3 vAxis_43;
      highp vec3 tmpvar_44;
      tmpvar_44 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_45;
      tmpvar_45 = ((tmpvar_44.x + tmpvar_44.y) + tmpvar_44.z);
      highp vec4 tmpvar_46;
      tmpvar_46.x = (tmpvar_36 + tmpvar_45);
      tmpvar_46.y = ((tmpvar_36 * 0.75) - tmpvar_45);
      tmpvar_46.z = ((tmpvar_36 * 0.01) + tmpvar_45);
      tmpvar_46.w = (tmpvar_36 + tmpvar_45);
      highp vec4 tmpvar_47;
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      tmpvar_47 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = sqrt(dot (vPos_32, vPos_32));
      highp float fAngle_50;
      fAngle_50 = ((_glesMultiTexCoord2.x * tmpvar_38) * (tmpvar_47.x + (tmpvar_47.y * tmpvar_47.y)));
      highp vec2 vSinCos_51;
      vSinCos_51.x = sin(fAngle_50);
      vSinCos_51.y = cos(fAngle_50);
      highp float tmpvar_52;
      tmpvar_52 = (1.0 - vSinCos_51.y);
      highp mat3 tmpvar_53;
      tmpvar_53[0].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.x) + vSinCos_51.y);
      tmpvar_53[0].y = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.y) + (vSinCos_51.x * tmpvar_35.z));
      tmpvar_53[0].z = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.z) - (vSinCos_51.x * tmpvar_35.y));
      tmpvar_53[1].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.y) - (vSinCos_51.x * tmpvar_35.z));
      tmpvar_53[1].y = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.y) + vSinCos_51.y);
      tmpvar_53[1].z = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.z) + (vSinCos_51.x * tmpvar_35.x));
      tmpvar_53[2].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.z) + (vSinCos_51.x * tmpvar_35.y));
      tmpvar_53[2].y = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.z) - (vSinCos_51.x * tmpvar_35.x));
      tmpvar_53[2].z = (((tmpvar_52 * tmpvar_35.z) * tmpvar_35.z) + vSinCos_51.y);
      highp vec3 tmpvar_54;
      tmpvar_54 = ((tmpvar_35.yzx * vRotatedWindVector_17.zxy) - (tmpvar_35.zxy * vRotatedWindVector_17.yzx));
      vAxis_43.xz = tmpvar_54.xz;
      highp float tmpvar_55;
      tmpvar_55 = clamp (dot (vRotatedWindVector_17, tmpvar_35), -1.0, 1.0);
      vAxis_43.y = (tmpvar_54.y + tmpvar_55);
      highp vec3 tmpvar_56;
      tmpvar_56 = normalize(vAxis_43);
      vAxis_43 = tmpvar_56;
      highp float tmpvar_57;
      tmpvar_57 = (1.570796 - (sign(tmpvar_55) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_55))) * (1.570796 + (abs(tmpvar_55) * (-0.2146018 + 
          (abs(tmpvar_55) * (0.08656672 + (abs(tmpvar_55) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_58;
      tmpvar_58 = (tmpvar_47.y - (tmpvar_47.x * tmpvar_47.x));
      fTwitch_42 = 0.0;
      if (tmpvar_41) {
        highp float fTime_59;
        fTime_59 = (tmpvar_40.z + tmpvar_45);
        highp vec4 tmpvar_60;
        tmpvar_60.zw = vec2(0.0, 0.0);
        tmpvar_60.x = fTime_59;
        tmpvar_60.y = (0.87 * fTime_59);
        highp vec4 tmpvar_61;
        highp vec4 tmpvar_62;
        tmpvar_62 = abs(((
          fract((tmpvar_60 + 0.5))
         * 2.0) - 1.0));
        tmpvar_61 = (((
          (tmpvar_62 * tmpvar_62)
         * 
          (3.0 - (2.0 * tmpvar_62))
        ) - 0.5) * 2.0);
        fTwitch_42 = (tmpvar_40.x * pow (clamp (
          ((((tmpvar_61.x * tmpvar_61.y) * tmpvar_61.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_40.y));
      };
      highp float fAngle_63;
      fAngle_63 = (_glesMultiTexCoord2.x * ((
        (tmpvar_57 * tmpvar_39)
       + 
        (tmpvar_58 * tmpvar_37)
      ) + fTwitch_42));
      highp vec2 vSinCos_64;
      vSinCos_64.x = sin(fAngle_63);
      vSinCos_64.y = cos(fAngle_63);
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - vSinCos_64.y);
      highp mat3 tmpvar_66;
      tmpvar_66[0].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.x) + vSinCos_64.y);
      tmpvar_66[0].y = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.y) + (vSinCos_64.x * tmpvar_56.z));
      tmpvar_66[0].z = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.z) - (vSinCos_64.x * tmpvar_56.y));
      tmpvar_66[1].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.y) - (vSinCos_64.x * tmpvar_56.z));
      tmpvar_66[1].y = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.y) + vSinCos_64.y);
      tmpvar_66[1].z = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.z) + (vSinCos_64.x * tmpvar_56.x));
      tmpvar_66[2].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.z) + (vSinCos_64.x * tmpvar_56.y));
      tmpvar_66[2].y = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.z) - (vSinCos_64.x * tmpvar_56.x));
      tmpvar_66[2].z = (((tmpvar_65 * tmpvar_56.z) * tmpvar_56.z) + vSinCos_64.y);
      highp mat3 tmpvar_67;
      tmpvar_67 = (tmpvar_53 * tmpvar_66);
      vDirection_29 = (tmpvar_67 * _glesNormal);
      vPos_28 = (normalize((tmpvar_67 * vPos_32)) * tmpvar_49);
    };
    tmpvar_15 = vDirection_29;
    FinalPosition_18 = vPos_28;
  };
  highp vec3 tmpvar_68;
  tmpvar_68 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  FinalPosition_18 = tmpvar_68;
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_69;
    vPos_69 = tmpvar_68;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_70;
      vPos_70 = tmpvar_68;
      highp float fAdherenceScale_71;
      highp vec3 tmpvar_72;
      tmpvar_72 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_73;
      tmpvar_73 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_74;
      highp float fOscillation_75;
      fOscillation_75 = 1.0;
      highp float fAmount_76;
      highp float fTarget_77;
      highp vec4 tmpvar_78;
      tmpvar_78.x = (tmpvar_73 + _glesMultiTexCoord0.w);
      tmpvar_78.y = ((tmpvar_73 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_78.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_73 + _glesMultiTexCoord0.w));
      tmpvar_78.w = ((tmpvar_73 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      vOscillations_74 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      highp float tmpvar_80;
      tmpvar_80 = (vOscillations_74.y * vOscillations_74.z);
      fTarget_77 = 1.0;
      fAmount_76 = tmpvar_80;
      if ((tmpvar_80 < 0.0)) {
        fTarget_77 = -1.0;
        fAmount_76 = -(tmpvar_80);
      };
      fOscillation_75 = (((
        (mix (mix (tmpvar_80, fTarget_77, fAmount_76), fTarget_77, fAmount_76) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_74.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_74.w * _ST_WindBranchWhip.x)));
      vPos_70 = (tmpvar_68 + ((tmpvar_72 * fOscillation_75) * _ST_WindBranch.y));
      highp vec4 tmpvar_81;
      tmpvar_81.zw = vec2(0.0, 0.0);
      tmpvar_81.x = ((tmpvar_73 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_81.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_82;
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_81 + 0.5))
       * 2.0) - 1.0));
      tmpvar_82 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      fAdherenceScale_71 = (1.0 - ((
        ((tmpvar_82.x * tmpvar_82.y) * tmpvar_82.x)
       * tmpvar_82.y) * _ST_WindTurbulences.x));
      fAdherenceScale_71 = (fAdherenceScale_71 + ((vOscillations_74.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_70 = (vPos_70 + ((
        ((vRotatedBranchAnchor_16 - vPos_70) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_71) * _glesMultiTexCoord0.z));
      vPos_69 = vPos_70;
    } else {
      highp vec3 vPos_84;
      vPos_84 = vPos_69;
      highp vec3 tmpvar_85;
      tmpvar_85 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_86;
      tmpvar_86 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_87;
      highp float fAmount_88;
      highp float fTarget_89;
      highp vec4 tmpvar_90;
      tmpvar_90.w = 0.0;
      tmpvar_90.x = (tmpvar_86 + _glesMultiTexCoord0.w);
      tmpvar_90.y = ((tmpvar_86 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_90.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_86 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_91;
      tmpvar_91 = abs(((
        fract((tmpvar_90 + 0.5))
       * 2.0) - 1.0));
      vOscillations_87 = (((
        (tmpvar_91 * tmpvar_91)
       * 
        (3.0 - (2.0 * tmpvar_91))
      ) - 0.5) * 2.0);
      highp float tmpvar_92;
      tmpvar_92 = (vOscillations_87.y * vOscillations_87.z);
      fTarget_89 = 1.0;
      fAmount_88 = tmpvar_92;
      if ((tmpvar_92 < 0.0)) {
        fTarget_89 = -1.0;
        fAmount_88 = -(tmpvar_92);
      };
      vPos_84 = (vPos_69 + ((tmpvar_85 * 
        (((mix (
          mix (tmpvar_92, fTarget_89, fAmount_88)
        , fTarget_89, fAmount_88) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_87.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_69 = vPos_84;
    };
    FinalPosition_18 = vPos_69;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_93;
    vPos_93 = FinalPosition_18;
    highp float fAdjust_94;
    highp float fLength_95;
    fLength_95 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_96;
    tmpvar_96 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_94 = tmpvar_96;
    if ((tmpvar_96 != 0.0)) {
      fAdjust_94 = pow (tmpvar_96, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_97;
    tmpvar_97.zw = vec2(0.0, 0.0);
    tmpvar_97.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_97.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_98;
    highp vec4 tmpvar_99;
    tmpvar_99 = abs(((
      fract((tmpvar_97 + 0.5))
     * 2.0) - 1.0));
    tmpvar_98 = (((
      (tmpvar_99 * tmpvar_99)
     * 
      (3.0 - (2.0 * tmpvar_99))
    ) - 0.5) * 2.0);
    vPos_93.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_98.x + (tmpvar_98.y * tmpvar_98.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_94)));
    vPos_93 = (normalize(vPos_93) * fLength_95);
    FinalPosition_18 = vPos_93;
  };
  tmpvar_14.xyz = FinalPosition_18;
  highp vec4 tmpvar_100;
  tmpvar_100 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_101;
  highp vec4 tmpvar_102;
  tmpvar_102 = (tmpvar_100 * 0.5);
  highp vec2 tmpvar_103;
  tmpvar_103.x = tmpvar_102.x;
  tmpvar_103.y = (tmpvar_102.y * _ProjectionParams.x);
  o_101.xy = (tmpvar_103 + tmpvar_102.w);
  o_101.zw = tmpvar_100.zw;
  highp vec3 tmpvar_104;
  tmpvar_104 = o_101.xyw;
  tmpvar_8 = tmpvar_104;
  highp vec2 tmpvar_105;
  tmpvar_105 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_105;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_106;
  v_106.x = _World2Object[0].x;
  v_106.y = _World2Object[1].x;
  v_106.z = _World2Object[2].x;
  v_106.w = _World2Object[3].x;
  highp vec4 v_107;
  v_107.x = _World2Object[0].y;
  v_107.y = _World2Object[1].y;
  v_107.z = _World2Object[2].y;
  v_107.w = _World2Object[3].y;
  highp vec4 v_108;
  v_108.x = _World2Object[0].z;
  v_108.y = _World2Object[1].z;
  v_108.z = _World2Object[2].z;
  v_108.w = _World2Object[3].z;
  highp vec3 tmpvar_109;
  tmpvar_109 = normalize(((
    (v_106.xyz * tmpvar_15.x)
   + 
    (v_107.xyz * tmpvar_15.y)
  ) + (v_108.xyz * tmpvar_15.z)));
  worldNormal_3 = tmpvar_109;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_23;
  tmpvar_23 = (_LightMatrix0 * tmpvar_22).xyz;
  lightCoord_4 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_25;
  tmpvar_25 = (texture2D (_LightTextureB0, vec2(tmpvar_24)).w * textureCube (_LightTexture0, lightCoord_4).w);
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_26;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_25);
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_29 = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tmpvar_9 * tmpvar_1) * diff_29);
  c_28.xyz = tmpvar_31;
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  mediump vec3 tmpvar_32;
  tmpvar_32 = c_28.xyz;
  c_27.xyz = tmpvar_32;
  c_3.xyz = c_27.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_13;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_22;
  tmpvar_22 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_23;
  tmpvar_23[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_23[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_23[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_24;
  tmpvar_24 = (normalize((tmpvar_22 * tmpvar_23)) * sqrt(dot (tmpvar_22, tmpvar_22)));
  FinalPosition_18 = tmpvar_24;
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_25;
    tmpvar_25 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_26;
    isBestWind_26 = (tmpvar_19 == 4.0);
    bool bLeaf2_27;
    bLeaf2_27 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_28;
    vPos_28 = tmpvar_24;
    highp vec3 vDirection_29;
    vDirection_29 = tmpvar_2;
    highp float tmpvar_30;
    if (bLeaf2_27) {
      tmpvar_30 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_31;
    if (bLeaf2_27) {
      tmpvar_31 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_32;
    highp vec4 tmpvar_33;
    tmpvar_33.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_33.x = (tmpvar_30 + tmpvar_25);
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    vPos_32 = (tmpvar_24 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_31 * (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_29 = tmpvar_2;
    vPos_28 = vPos_32;
    if (isBestWind_26) {
      highp vec3 tmpvar_35;
      tmpvar_35 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_36;
      if (bLeaf2_27) {
        tmpvar_36 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_37;
      if (bLeaf2_27) {
        tmpvar_37 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_38;
      if (bLeaf2_27) {
        tmpvar_38 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_39;
      if (bLeaf2_27) {
        tmpvar_39 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_40;
      if (bLeaf2_27) {
        tmpvar_40 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_40 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_41;
      if (bLeaf2_27) {
        tmpvar_41 = bool(1);
      } else {
        tmpvar_41 = bool(1);
      };
      highp float fTwitch_42;
      highp vec3 vAxis_43;
      highp vec3 tmpvar_44;
      tmpvar_44 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_45;
      tmpvar_45 = ((tmpvar_44.x + tmpvar_44.y) + tmpvar_44.z);
      highp vec4 tmpvar_46;
      tmpvar_46.x = (tmpvar_36 + tmpvar_45);
      tmpvar_46.y = ((tmpvar_36 * 0.75) - tmpvar_45);
      tmpvar_46.z = ((tmpvar_36 * 0.01) + tmpvar_45);
      tmpvar_46.w = (tmpvar_36 + tmpvar_45);
      highp vec4 tmpvar_47;
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      tmpvar_47 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = sqrt(dot (vPos_32, vPos_32));
      highp float fAngle_50;
      fAngle_50 = ((_glesMultiTexCoord2.x * tmpvar_38) * (tmpvar_47.x + (tmpvar_47.y * tmpvar_47.y)));
      highp vec2 vSinCos_51;
      vSinCos_51.x = sin(fAngle_50);
      vSinCos_51.y = cos(fAngle_50);
      highp float tmpvar_52;
      tmpvar_52 = (1.0 - vSinCos_51.y);
      highp mat3 tmpvar_53;
      tmpvar_53[0].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.x) + vSinCos_51.y);
      tmpvar_53[0].y = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.y) + (vSinCos_51.x * tmpvar_35.z));
      tmpvar_53[0].z = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.z) - (vSinCos_51.x * tmpvar_35.y));
      tmpvar_53[1].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.y) - (vSinCos_51.x * tmpvar_35.z));
      tmpvar_53[1].y = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.y) + vSinCos_51.y);
      tmpvar_53[1].z = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.z) + (vSinCos_51.x * tmpvar_35.x));
      tmpvar_53[2].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.z) + (vSinCos_51.x * tmpvar_35.y));
      tmpvar_53[2].y = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.z) - (vSinCos_51.x * tmpvar_35.x));
      tmpvar_53[2].z = (((tmpvar_52 * tmpvar_35.z) * tmpvar_35.z) + vSinCos_51.y);
      highp vec3 tmpvar_54;
      tmpvar_54 = ((tmpvar_35.yzx * vRotatedWindVector_17.zxy) - (tmpvar_35.zxy * vRotatedWindVector_17.yzx));
      vAxis_43.xz = tmpvar_54.xz;
      highp float tmpvar_55;
      tmpvar_55 = clamp (dot (vRotatedWindVector_17, tmpvar_35), -1.0, 1.0);
      vAxis_43.y = (tmpvar_54.y + tmpvar_55);
      highp vec3 tmpvar_56;
      tmpvar_56 = normalize(vAxis_43);
      vAxis_43 = tmpvar_56;
      highp float tmpvar_57;
      tmpvar_57 = (1.570796 - (sign(tmpvar_55) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_55))) * (1.570796 + (abs(tmpvar_55) * (-0.2146018 + 
          (abs(tmpvar_55) * (0.08656672 + (abs(tmpvar_55) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_58;
      tmpvar_58 = (tmpvar_47.y - (tmpvar_47.x * tmpvar_47.x));
      fTwitch_42 = 0.0;
      if (tmpvar_41) {
        highp float fTime_59;
        fTime_59 = (tmpvar_40.z + tmpvar_45);
        highp vec4 tmpvar_60;
        tmpvar_60.zw = vec2(0.0, 0.0);
        tmpvar_60.x = fTime_59;
        tmpvar_60.y = (0.87 * fTime_59);
        highp vec4 tmpvar_61;
        highp vec4 tmpvar_62;
        tmpvar_62 = abs(((
          fract((tmpvar_60 + 0.5))
         * 2.0) - 1.0));
        tmpvar_61 = (((
          (tmpvar_62 * tmpvar_62)
         * 
          (3.0 - (2.0 * tmpvar_62))
        ) - 0.5) * 2.0);
        fTwitch_42 = (tmpvar_40.x * pow (clamp (
          ((((tmpvar_61.x * tmpvar_61.y) * tmpvar_61.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_40.y));
      };
      highp float fAngle_63;
      fAngle_63 = (_glesMultiTexCoord2.x * ((
        (tmpvar_57 * tmpvar_39)
       + 
        (tmpvar_58 * tmpvar_37)
      ) + fTwitch_42));
      highp vec2 vSinCos_64;
      vSinCos_64.x = sin(fAngle_63);
      vSinCos_64.y = cos(fAngle_63);
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - vSinCos_64.y);
      highp mat3 tmpvar_66;
      tmpvar_66[0].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.x) + vSinCos_64.y);
      tmpvar_66[0].y = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.y) + (vSinCos_64.x * tmpvar_56.z));
      tmpvar_66[0].z = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.z) - (vSinCos_64.x * tmpvar_56.y));
      tmpvar_66[1].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.y) - (vSinCos_64.x * tmpvar_56.z));
      tmpvar_66[1].y = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.y) + vSinCos_64.y);
      tmpvar_66[1].z = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.z) + (vSinCos_64.x * tmpvar_56.x));
      tmpvar_66[2].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.z) + (vSinCos_64.x * tmpvar_56.y));
      tmpvar_66[2].y = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.z) - (vSinCos_64.x * tmpvar_56.x));
      tmpvar_66[2].z = (((tmpvar_65 * tmpvar_56.z) * tmpvar_56.z) + vSinCos_64.y);
      highp mat3 tmpvar_67;
      tmpvar_67 = (tmpvar_53 * tmpvar_66);
      vDirection_29 = (tmpvar_67 * _glesNormal);
      vPos_28 = (normalize((tmpvar_67 * vPos_32)) * tmpvar_49);
    };
    tmpvar_15 = vDirection_29;
    FinalPosition_18 = vPos_28;
  };
  highp vec3 tmpvar_68;
  tmpvar_68 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  FinalPosition_18 = tmpvar_68;
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_69;
    vPos_69 = tmpvar_68;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_70;
      vPos_70 = tmpvar_68;
      highp float fAdherenceScale_71;
      highp vec3 tmpvar_72;
      tmpvar_72 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_73;
      tmpvar_73 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_74;
      highp float fOscillation_75;
      fOscillation_75 = 1.0;
      highp float fAmount_76;
      highp float fTarget_77;
      highp vec4 tmpvar_78;
      tmpvar_78.x = (tmpvar_73 + _glesMultiTexCoord0.w);
      tmpvar_78.y = ((tmpvar_73 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_78.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_73 + _glesMultiTexCoord0.w));
      tmpvar_78.w = ((tmpvar_73 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      vOscillations_74 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      highp float tmpvar_80;
      tmpvar_80 = (vOscillations_74.y * vOscillations_74.z);
      fTarget_77 = 1.0;
      fAmount_76 = tmpvar_80;
      if ((tmpvar_80 < 0.0)) {
        fTarget_77 = -1.0;
        fAmount_76 = -(tmpvar_80);
      };
      fOscillation_75 = (((
        (mix (mix (tmpvar_80, fTarget_77, fAmount_76), fTarget_77, fAmount_76) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_74.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_74.w * _ST_WindBranchWhip.x)));
      vPos_70 = (tmpvar_68 + ((tmpvar_72 * fOscillation_75) * _ST_WindBranch.y));
      highp vec4 tmpvar_81;
      tmpvar_81.zw = vec2(0.0, 0.0);
      tmpvar_81.x = ((tmpvar_73 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_81.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_82;
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_81 + 0.5))
       * 2.0) - 1.0));
      tmpvar_82 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      fAdherenceScale_71 = (1.0 - ((
        ((tmpvar_82.x * tmpvar_82.y) * tmpvar_82.x)
       * tmpvar_82.y) * _ST_WindTurbulences.x));
      fAdherenceScale_71 = (fAdherenceScale_71 + ((vOscillations_74.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_70 = (vPos_70 + ((
        ((vRotatedBranchAnchor_16 - vPos_70) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_71) * _glesMultiTexCoord0.z));
      vPos_69 = vPos_70;
    } else {
      highp vec3 vPos_84;
      vPos_84 = vPos_69;
      highp vec3 tmpvar_85;
      tmpvar_85 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_86;
      tmpvar_86 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_87;
      highp float fAmount_88;
      highp float fTarget_89;
      highp vec4 tmpvar_90;
      tmpvar_90.w = 0.0;
      tmpvar_90.x = (tmpvar_86 + _glesMultiTexCoord0.w);
      tmpvar_90.y = ((tmpvar_86 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_90.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_86 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_91;
      tmpvar_91 = abs(((
        fract((tmpvar_90 + 0.5))
       * 2.0) - 1.0));
      vOscillations_87 = (((
        (tmpvar_91 * tmpvar_91)
       * 
        (3.0 - (2.0 * tmpvar_91))
      ) - 0.5) * 2.0);
      highp float tmpvar_92;
      tmpvar_92 = (vOscillations_87.y * vOscillations_87.z);
      fTarget_89 = 1.0;
      fAmount_88 = tmpvar_92;
      if ((tmpvar_92 < 0.0)) {
        fTarget_89 = -1.0;
        fAmount_88 = -(tmpvar_92);
      };
      vPos_84 = (vPos_69 + ((tmpvar_85 * 
        (((mix (
          mix (tmpvar_92, fTarget_89, fAmount_88)
        , fTarget_89, fAmount_88) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_87.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_69 = vPos_84;
    };
    FinalPosition_18 = vPos_69;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_93;
    vPos_93 = FinalPosition_18;
    highp float fAdjust_94;
    highp float fLength_95;
    fLength_95 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_96;
    tmpvar_96 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_94 = tmpvar_96;
    if ((tmpvar_96 != 0.0)) {
      fAdjust_94 = pow (tmpvar_96, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_97;
    tmpvar_97.zw = vec2(0.0, 0.0);
    tmpvar_97.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_97.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_98;
    highp vec4 tmpvar_99;
    tmpvar_99 = abs(((
      fract((tmpvar_97 + 0.5))
     * 2.0) - 1.0));
    tmpvar_98 = (((
      (tmpvar_99 * tmpvar_99)
     * 
      (3.0 - (2.0 * tmpvar_99))
    ) - 0.5) * 2.0);
    vPos_93.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_98.x + (tmpvar_98.y * tmpvar_98.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_94)));
    vPos_93 = (normalize(vPos_93) * fLength_95);
    FinalPosition_18 = vPos_93;
  };
  tmpvar_14.xyz = FinalPosition_18;
  highp vec4 tmpvar_100;
  tmpvar_100 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_101;
  highp vec4 tmpvar_102;
  tmpvar_102 = (tmpvar_100 * 0.5);
  highp vec2 tmpvar_103;
  tmpvar_103.x = tmpvar_102.x;
  tmpvar_103.y = (tmpvar_102.y * _ProjectionParams.x);
  o_101.xy = (tmpvar_103 + tmpvar_102.w);
  o_101.zw = tmpvar_100.zw;
  highp vec3 tmpvar_104;
  tmpvar_104 = o_101.xyw;
  tmpvar_8 = tmpvar_104;
  highp vec2 tmpvar_105;
  tmpvar_105 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_105;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_106;
  v_106.x = _World2Object[0].x;
  v_106.y = _World2Object[1].x;
  v_106.z = _World2Object[2].x;
  v_106.w = _World2Object[3].x;
  highp vec4 v_107;
  v_107.x = _World2Object[0].y;
  v_107.y = _World2Object[1].y;
  v_107.z = _World2Object[2].y;
  v_107.w = _World2Object[3].y;
  highp vec4 v_108;
  v_108.x = _World2Object[0].z;
  v_108.y = _World2Object[1].z;
  v_108.z = _World2Object[2].z;
  v_108.w = _World2Object[3].z;
  highp vec3 tmpvar_109;
  tmpvar_109 = normalize(((
    (v_106.xyz * tmpvar_15.x)
   + 
    (v_107.xyz * tmpvar_15.y)
  ) + (v_108.xyz * tmpvar_15.z)));
  worldNormal_3 = tmpvar_109;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_23;
  tmpvar_23 = (_LightMatrix0 * tmpvar_22).xyz;
  lightCoord_4 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_25;
  tmpvar_25 = (texture (_LightTextureB0, vec2(tmpvar_24)).w * texture (_LightTexture0, lightCoord_4).w);
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_26;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_25);
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_29 = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tmpvar_9 * tmpvar_1) * diff_29);
  c_28.xyz = tmpvar_31;
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  mediump vec3 tmpvar_32;
  tmpvar_32 = c_28.xyz;
  c_27.xyz = tmpvar_32;
  c_3.xyz = c_27.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_13;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_22;
  tmpvar_22 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_23;
  tmpvar_23[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_23[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_23[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_24;
  tmpvar_24 = (normalize((tmpvar_22 * tmpvar_23)) * sqrt(dot (tmpvar_22, tmpvar_22)));
  FinalPosition_18 = tmpvar_24;
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_25;
    tmpvar_25 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_26;
    isBestWind_26 = (tmpvar_19 == 4.0);
    bool bLeaf2_27;
    bLeaf2_27 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_28;
    vPos_28 = tmpvar_24;
    highp vec3 vDirection_29;
    vDirection_29 = tmpvar_2;
    highp float tmpvar_30;
    if (bLeaf2_27) {
      tmpvar_30 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_31;
    if (bLeaf2_27) {
      tmpvar_31 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_32;
    highp vec4 tmpvar_33;
    tmpvar_33.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_33.x = (tmpvar_30 + tmpvar_25);
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    vPos_32 = (tmpvar_24 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_31 * (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_29 = tmpvar_2;
    vPos_28 = vPos_32;
    if (isBestWind_26) {
      highp vec3 tmpvar_35;
      tmpvar_35 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_36;
      if (bLeaf2_27) {
        tmpvar_36 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_37;
      if (bLeaf2_27) {
        tmpvar_37 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_38;
      if (bLeaf2_27) {
        tmpvar_38 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_39;
      if (bLeaf2_27) {
        tmpvar_39 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_40;
      if (bLeaf2_27) {
        tmpvar_40 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_40 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_41;
      if (bLeaf2_27) {
        tmpvar_41 = bool(1);
      } else {
        tmpvar_41 = bool(1);
      };
      highp float fTwitch_42;
      highp vec3 vAxis_43;
      highp vec3 tmpvar_44;
      tmpvar_44 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_45;
      tmpvar_45 = ((tmpvar_44.x + tmpvar_44.y) + tmpvar_44.z);
      highp vec4 tmpvar_46;
      tmpvar_46.x = (tmpvar_36 + tmpvar_45);
      tmpvar_46.y = ((tmpvar_36 * 0.75) - tmpvar_45);
      tmpvar_46.z = ((tmpvar_36 * 0.01) + tmpvar_45);
      tmpvar_46.w = (tmpvar_36 + tmpvar_45);
      highp vec4 tmpvar_47;
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      tmpvar_47 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = sqrt(dot (vPos_32, vPos_32));
      highp float fAngle_50;
      fAngle_50 = ((_glesMultiTexCoord2.x * tmpvar_38) * (tmpvar_47.x + (tmpvar_47.y * tmpvar_47.y)));
      highp vec2 vSinCos_51;
      vSinCos_51.x = sin(fAngle_50);
      vSinCos_51.y = cos(fAngle_50);
      highp float tmpvar_52;
      tmpvar_52 = (1.0 - vSinCos_51.y);
      highp mat3 tmpvar_53;
      tmpvar_53[0].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.x) + vSinCos_51.y);
      tmpvar_53[0].y = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.y) + (vSinCos_51.x * tmpvar_35.z));
      tmpvar_53[0].z = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.z) - (vSinCos_51.x * tmpvar_35.y));
      tmpvar_53[1].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.y) - (vSinCos_51.x * tmpvar_35.z));
      tmpvar_53[1].y = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.y) + vSinCos_51.y);
      tmpvar_53[1].z = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.z) + (vSinCos_51.x * tmpvar_35.x));
      tmpvar_53[2].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.z) + (vSinCos_51.x * tmpvar_35.y));
      tmpvar_53[2].y = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.z) - (vSinCos_51.x * tmpvar_35.x));
      tmpvar_53[2].z = (((tmpvar_52 * tmpvar_35.z) * tmpvar_35.z) + vSinCos_51.y);
      highp vec3 tmpvar_54;
      tmpvar_54 = ((tmpvar_35.yzx * vRotatedWindVector_17.zxy) - (tmpvar_35.zxy * vRotatedWindVector_17.yzx));
      vAxis_43.xz = tmpvar_54.xz;
      highp float tmpvar_55;
      tmpvar_55 = clamp (dot (vRotatedWindVector_17, tmpvar_35), -1.0, 1.0);
      vAxis_43.y = (tmpvar_54.y + tmpvar_55);
      highp vec3 tmpvar_56;
      tmpvar_56 = normalize(vAxis_43);
      vAxis_43 = tmpvar_56;
      highp float tmpvar_57;
      tmpvar_57 = (1.570796 - (sign(tmpvar_55) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_55))) * (1.570796 + (abs(tmpvar_55) * (-0.2146018 + 
          (abs(tmpvar_55) * (0.08656672 + (abs(tmpvar_55) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_58;
      tmpvar_58 = (tmpvar_47.y - (tmpvar_47.x * tmpvar_47.x));
      fTwitch_42 = 0.0;
      if (tmpvar_41) {
        highp float fTime_59;
        fTime_59 = (tmpvar_40.z + tmpvar_45);
        highp vec4 tmpvar_60;
        tmpvar_60.zw = vec2(0.0, 0.0);
        tmpvar_60.x = fTime_59;
        tmpvar_60.y = (0.87 * fTime_59);
        highp vec4 tmpvar_61;
        highp vec4 tmpvar_62;
        tmpvar_62 = abs(((
          fract((tmpvar_60 + 0.5))
         * 2.0) - 1.0));
        tmpvar_61 = (((
          (tmpvar_62 * tmpvar_62)
         * 
          (3.0 - (2.0 * tmpvar_62))
        ) - 0.5) * 2.0);
        fTwitch_42 = (tmpvar_40.x * pow (clamp (
          ((((tmpvar_61.x * tmpvar_61.y) * tmpvar_61.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_40.y));
      };
      highp float fAngle_63;
      fAngle_63 = (_glesMultiTexCoord2.x * ((
        (tmpvar_57 * tmpvar_39)
       + 
        (tmpvar_58 * tmpvar_37)
      ) + fTwitch_42));
      highp vec2 vSinCos_64;
      vSinCos_64.x = sin(fAngle_63);
      vSinCos_64.y = cos(fAngle_63);
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - vSinCos_64.y);
      highp mat3 tmpvar_66;
      tmpvar_66[0].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.x) + vSinCos_64.y);
      tmpvar_66[0].y = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.y) + (vSinCos_64.x * tmpvar_56.z));
      tmpvar_66[0].z = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.z) - (vSinCos_64.x * tmpvar_56.y));
      tmpvar_66[1].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.y) - (vSinCos_64.x * tmpvar_56.z));
      tmpvar_66[1].y = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.y) + vSinCos_64.y);
      tmpvar_66[1].z = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.z) + (vSinCos_64.x * tmpvar_56.x));
      tmpvar_66[2].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.z) + (vSinCos_64.x * tmpvar_56.y));
      tmpvar_66[2].y = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.z) - (vSinCos_64.x * tmpvar_56.x));
      tmpvar_66[2].z = (((tmpvar_65 * tmpvar_56.z) * tmpvar_56.z) + vSinCos_64.y);
      highp mat3 tmpvar_67;
      tmpvar_67 = (tmpvar_53 * tmpvar_66);
      vDirection_29 = (tmpvar_67 * _glesNormal);
      vPos_28 = (normalize((tmpvar_67 * vPos_32)) * tmpvar_49);
    };
    tmpvar_15 = vDirection_29;
    FinalPosition_18 = vPos_28;
  };
  highp vec3 tmpvar_68;
  tmpvar_68 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  FinalPosition_18 = tmpvar_68;
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_69;
    vPos_69 = tmpvar_68;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_70;
      vPos_70 = tmpvar_68;
      highp float fAdherenceScale_71;
      highp vec3 tmpvar_72;
      tmpvar_72 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_73;
      tmpvar_73 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_74;
      highp float fOscillation_75;
      fOscillation_75 = 1.0;
      highp float fAmount_76;
      highp float fTarget_77;
      highp vec4 tmpvar_78;
      tmpvar_78.x = (tmpvar_73 + _glesMultiTexCoord0.w);
      tmpvar_78.y = ((tmpvar_73 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_78.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_73 + _glesMultiTexCoord0.w));
      tmpvar_78.w = ((tmpvar_73 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      vOscillations_74 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      highp float tmpvar_80;
      tmpvar_80 = (vOscillations_74.y * vOscillations_74.z);
      fTarget_77 = 1.0;
      fAmount_76 = tmpvar_80;
      if ((tmpvar_80 < 0.0)) {
        fTarget_77 = -1.0;
        fAmount_76 = -(tmpvar_80);
      };
      fOscillation_75 = (((
        (mix (mix (tmpvar_80, fTarget_77, fAmount_76), fTarget_77, fAmount_76) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_74.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_74.w * _ST_WindBranchWhip.x)));
      vPos_70 = (tmpvar_68 + ((tmpvar_72 * fOscillation_75) * _ST_WindBranch.y));
      highp vec4 tmpvar_81;
      tmpvar_81.zw = vec2(0.0, 0.0);
      tmpvar_81.x = ((tmpvar_73 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_81.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_82;
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_81 + 0.5))
       * 2.0) - 1.0));
      tmpvar_82 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      fAdherenceScale_71 = (1.0 - ((
        ((tmpvar_82.x * tmpvar_82.y) * tmpvar_82.x)
       * tmpvar_82.y) * _ST_WindTurbulences.x));
      fAdherenceScale_71 = (fAdherenceScale_71 + ((vOscillations_74.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_70 = (vPos_70 + ((
        ((vRotatedBranchAnchor_16 - vPos_70) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_71) * _glesMultiTexCoord0.z));
      vPos_69 = vPos_70;
    } else {
      highp vec3 vPos_84;
      vPos_84 = vPos_69;
      highp vec3 tmpvar_85;
      tmpvar_85 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_86;
      tmpvar_86 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_87;
      highp float fAmount_88;
      highp float fTarget_89;
      highp vec4 tmpvar_90;
      tmpvar_90.w = 0.0;
      tmpvar_90.x = (tmpvar_86 + _glesMultiTexCoord0.w);
      tmpvar_90.y = ((tmpvar_86 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_90.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_86 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_91;
      tmpvar_91 = abs(((
        fract((tmpvar_90 + 0.5))
       * 2.0) - 1.0));
      vOscillations_87 = (((
        (tmpvar_91 * tmpvar_91)
       * 
        (3.0 - (2.0 * tmpvar_91))
      ) - 0.5) * 2.0);
      highp float tmpvar_92;
      tmpvar_92 = (vOscillations_87.y * vOscillations_87.z);
      fTarget_89 = 1.0;
      fAmount_88 = tmpvar_92;
      if ((tmpvar_92 < 0.0)) {
        fTarget_89 = -1.0;
        fAmount_88 = -(tmpvar_92);
      };
      vPos_84 = (vPos_69 + ((tmpvar_85 * 
        (((mix (
          mix (tmpvar_92, fTarget_89, fAmount_88)
        , fTarget_89, fAmount_88) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_87.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_69 = vPos_84;
    };
    FinalPosition_18 = vPos_69;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_93;
    vPos_93 = FinalPosition_18;
    highp float fAdjust_94;
    highp float fLength_95;
    fLength_95 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_96;
    tmpvar_96 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_94 = tmpvar_96;
    if ((tmpvar_96 != 0.0)) {
      fAdjust_94 = pow (tmpvar_96, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_97;
    tmpvar_97.zw = vec2(0.0, 0.0);
    tmpvar_97.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_97.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_98;
    highp vec4 tmpvar_99;
    tmpvar_99 = abs(((
      fract((tmpvar_97 + 0.5))
     * 2.0) - 1.0));
    tmpvar_98 = (((
      (tmpvar_99 * tmpvar_99)
     * 
      (3.0 - (2.0 * tmpvar_99))
    ) - 0.5) * 2.0);
    vPos_93.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_98.x + (tmpvar_98.y * tmpvar_98.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_94)));
    vPos_93 = (normalize(vPos_93) * fLength_95);
    FinalPosition_18 = vPos_93;
  };
  tmpvar_14.xyz = FinalPosition_18;
  highp vec4 tmpvar_100;
  tmpvar_100 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_101;
  highp vec4 tmpvar_102;
  tmpvar_102 = (tmpvar_100 * 0.5);
  highp vec2 tmpvar_103;
  tmpvar_103.x = tmpvar_102.x;
  tmpvar_103.y = (tmpvar_102.y * _ProjectionParams.x);
  o_101.xy = (tmpvar_103 + tmpvar_102.w);
  o_101.zw = tmpvar_100.zw;
  highp vec3 tmpvar_104;
  tmpvar_104 = o_101.xyw;
  tmpvar_8 = tmpvar_104;
  highp vec2 tmpvar_105;
  tmpvar_105 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_105;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_106;
  v_106.x = _World2Object[0].x;
  v_106.y = _World2Object[1].x;
  v_106.z = _World2Object[2].x;
  v_106.w = _World2Object[3].x;
  highp vec4 v_107;
  v_107.x = _World2Object[0].y;
  v_107.y = _World2Object[1].y;
  v_107.z = _World2Object[2].y;
  v_107.w = _World2Object[3].y;
  highp vec4 v_108;
  v_108.x = _World2Object[0].z;
  v_108.y = _World2Object[1].z;
  v_108.z = _World2Object[2].z;
  v_108.w = _World2Object[3].z;
  highp vec3 tmpvar_109;
  tmpvar_109 = normalize(((
    (v_106.xyz * tmpvar_15.x)
   + 
    (v_107.xyz * tmpvar_15.y)
  ) + (v_108.xyz * tmpvar_15.z)));
  worldNormal_3 = tmpvar_109;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec2 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_23;
  tmpvar_23 = (_LightMatrix0 * tmpvar_22).xy;
  lightCoord_4 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = texture2D (_LightTexture0, lightCoord_4).w;
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_25;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_24);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_28 = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tmpvar_9 * tmpvar_1) * diff_28);
  c_27.xyz = tmpvar_30;
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  mediump vec3 tmpvar_31;
  tmpvar_31 = c_27.xyz;
  c_26.xyz = tmpvar_31;
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_13;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_22;
  tmpvar_22 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_23;
  tmpvar_23[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_23[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_23[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_24;
  tmpvar_24 = (normalize((tmpvar_22 * tmpvar_23)) * sqrt(dot (tmpvar_22, tmpvar_22)));
  FinalPosition_18 = tmpvar_24;
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_25;
    tmpvar_25 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_26;
    isBestWind_26 = (tmpvar_19 == 4.0);
    bool bLeaf2_27;
    bLeaf2_27 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_28;
    vPos_28 = tmpvar_24;
    highp vec3 vDirection_29;
    vDirection_29 = tmpvar_2;
    highp float tmpvar_30;
    if (bLeaf2_27) {
      tmpvar_30 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_31;
    if (bLeaf2_27) {
      tmpvar_31 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_32;
    highp vec4 tmpvar_33;
    tmpvar_33.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_33.x = (tmpvar_30 + tmpvar_25);
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    vPos_32 = (tmpvar_24 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_31 * (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_29 = tmpvar_2;
    vPos_28 = vPos_32;
    if (isBestWind_26) {
      highp vec3 tmpvar_35;
      tmpvar_35 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_36;
      if (bLeaf2_27) {
        tmpvar_36 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_37;
      if (bLeaf2_27) {
        tmpvar_37 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_38;
      if (bLeaf2_27) {
        tmpvar_38 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_39;
      if (bLeaf2_27) {
        tmpvar_39 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_40;
      if (bLeaf2_27) {
        tmpvar_40 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_40 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_41;
      if (bLeaf2_27) {
        tmpvar_41 = bool(1);
      } else {
        tmpvar_41 = bool(1);
      };
      highp float fTwitch_42;
      highp vec3 vAxis_43;
      highp vec3 tmpvar_44;
      tmpvar_44 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_45;
      tmpvar_45 = ((tmpvar_44.x + tmpvar_44.y) + tmpvar_44.z);
      highp vec4 tmpvar_46;
      tmpvar_46.x = (tmpvar_36 + tmpvar_45);
      tmpvar_46.y = ((tmpvar_36 * 0.75) - tmpvar_45);
      tmpvar_46.z = ((tmpvar_36 * 0.01) + tmpvar_45);
      tmpvar_46.w = (tmpvar_36 + tmpvar_45);
      highp vec4 tmpvar_47;
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      tmpvar_47 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = sqrt(dot (vPos_32, vPos_32));
      highp float fAngle_50;
      fAngle_50 = ((_glesMultiTexCoord2.x * tmpvar_38) * (tmpvar_47.x + (tmpvar_47.y * tmpvar_47.y)));
      highp vec2 vSinCos_51;
      vSinCos_51.x = sin(fAngle_50);
      vSinCos_51.y = cos(fAngle_50);
      highp float tmpvar_52;
      tmpvar_52 = (1.0 - vSinCos_51.y);
      highp mat3 tmpvar_53;
      tmpvar_53[0].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.x) + vSinCos_51.y);
      tmpvar_53[0].y = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.y) + (vSinCos_51.x * tmpvar_35.z));
      tmpvar_53[0].z = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.z) - (vSinCos_51.x * tmpvar_35.y));
      tmpvar_53[1].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.y) - (vSinCos_51.x * tmpvar_35.z));
      tmpvar_53[1].y = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.y) + vSinCos_51.y);
      tmpvar_53[1].z = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.z) + (vSinCos_51.x * tmpvar_35.x));
      tmpvar_53[2].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.z) + (vSinCos_51.x * tmpvar_35.y));
      tmpvar_53[2].y = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.z) - (vSinCos_51.x * tmpvar_35.x));
      tmpvar_53[2].z = (((tmpvar_52 * tmpvar_35.z) * tmpvar_35.z) + vSinCos_51.y);
      highp vec3 tmpvar_54;
      tmpvar_54 = ((tmpvar_35.yzx * vRotatedWindVector_17.zxy) - (tmpvar_35.zxy * vRotatedWindVector_17.yzx));
      vAxis_43.xz = tmpvar_54.xz;
      highp float tmpvar_55;
      tmpvar_55 = clamp (dot (vRotatedWindVector_17, tmpvar_35), -1.0, 1.0);
      vAxis_43.y = (tmpvar_54.y + tmpvar_55);
      highp vec3 tmpvar_56;
      tmpvar_56 = normalize(vAxis_43);
      vAxis_43 = tmpvar_56;
      highp float tmpvar_57;
      tmpvar_57 = (1.570796 - (sign(tmpvar_55) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_55))) * (1.570796 + (abs(tmpvar_55) * (-0.2146018 + 
          (abs(tmpvar_55) * (0.08656672 + (abs(tmpvar_55) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_58;
      tmpvar_58 = (tmpvar_47.y - (tmpvar_47.x * tmpvar_47.x));
      fTwitch_42 = 0.0;
      if (tmpvar_41) {
        highp float fTime_59;
        fTime_59 = (tmpvar_40.z + tmpvar_45);
        highp vec4 tmpvar_60;
        tmpvar_60.zw = vec2(0.0, 0.0);
        tmpvar_60.x = fTime_59;
        tmpvar_60.y = (0.87 * fTime_59);
        highp vec4 tmpvar_61;
        highp vec4 tmpvar_62;
        tmpvar_62 = abs(((
          fract((tmpvar_60 + 0.5))
         * 2.0) - 1.0));
        tmpvar_61 = (((
          (tmpvar_62 * tmpvar_62)
         * 
          (3.0 - (2.0 * tmpvar_62))
        ) - 0.5) * 2.0);
        fTwitch_42 = (tmpvar_40.x * pow (clamp (
          ((((tmpvar_61.x * tmpvar_61.y) * tmpvar_61.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_40.y));
      };
      highp float fAngle_63;
      fAngle_63 = (_glesMultiTexCoord2.x * ((
        (tmpvar_57 * tmpvar_39)
       + 
        (tmpvar_58 * tmpvar_37)
      ) + fTwitch_42));
      highp vec2 vSinCos_64;
      vSinCos_64.x = sin(fAngle_63);
      vSinCos_64.y = cos(fAngle_63);
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - vSinCos_64.y);
      highp mat3 tmpvar_66;
      tmpvar_66[0].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.x) + vSinCos_64.y);
      tmpvar_66[0].y = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.y) + (vSinCos_64.x * tmpvar_56.z));
      tmpvar_66[0].z = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.z) - (vSinCos_64.x * tmpvar_56.y));
      tmpvar_66[1].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.y) - (vSinCos_64.x * tmpvar_56.z));
      tmpvar_66[1].y = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.y) + vSinCos_64.y);
      tmpvar_66[1].z = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.z) + (vSinCos_64.x * tmpvar_56.x));
      tmpvar_66[2].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.z) + (vSinCos_64.x * tmpvar_56.y));
      tmpvar_66[2].y = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.z) - (vSinCos_64.x * tmpvar_56.x));
      tmpvar_66[2].z = (((tmpvar_65 * tmpvar_56.z) * tmpvar_56.z) + vSinCos_64.y);
      highp mat3 tmpvar_67;
      tmpvar_67 = (tmpvar_53 * tmpvar_66);
      vDirection_29 = (tmpvar_67 * _glesNormal);
      vPos_28 = (normalize((tmpvar_67 * vPos_32)) * tmpvar_49);
    };
    tmpvar_15 = vDirection_29;
    FinalPosition_18 = vPos_28;
  };
  highp vec3 tmpvar_68;
  tmpvar_68 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  FinalPosition_18 = tmpvar_68;
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_69;
    vPos_69 = tmpvar_68;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_70;
      vPos_70 = tmpvar_68;
      highp float fAdherenceScale_71;
      highp vec3 tmpvar_72;
      tmpvar_72 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_73;
      tmpvar_73 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_74;
      highp float fOscillation_75;
      fOscillation_75 = 1.0;
      highp float fAmount_76;
      highp float fTarget_77;
      highp vec4 tmpvar_78;
      tmpvar_78.x = (tmpvar_73 + _glesMultiTexCoord0.w);
      tmpvar_78.y = ((tmpvar_73 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_78.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_73 + _glesMultiTexCoord0.w));
      tmpvar_78.w = ((tmpvar_73 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      vOscillations_74 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      highp float tmpvar_80;
      tmpvar_80 = (vOscillations_74.y * vOscillations_74.z);
      fTarget_77 = 1.0;
      fAmount_76 = tmpvar_80;
      if ((tmpvar_80 < 0.0)) {
        fTarget_77 = -1.0;
        fAmount_76 = -(tmpvar_80);
      };
      fOscillation_75 = (((
        (mix (mix (tmpvar_80, fTarget_77, fAmount_76), fTarget_77, fAmount_76) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_74.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_74.w * _ST_WindBranchWhip.x)));
      vPos_70 = (tmpvar_68 + ((tmpvar_72 * fOscillation_75) * _ST_WindBranch.y));
      highp vec4 tmpvar_81;
      tmpvar_81.zw = vec2(0.0, 0.0);
      tmpvar_81.x = ((tmpvar_73 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_81.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_82;
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_81 + 0.5))
       * 2.0) - 1.0));
      tmpvar_82 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      fAdherenceScale_71 = (1.0 - ((
        ((tmpvar_82.x * tmpvar_82.y) * tmpvar_82.x)
       * tmpvar_82.y) * _ST_WindTurbulences.x));
      fAdherenceScale_71 = (fAdherenceScale_71 + ((vOscillations_74.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_70 = (vPos_70 + ((
        ((vRotatedBranchAnchor_16 - vPos_70) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_71) * _glesMultiTexCoord0.z));
      vPos_69 = vPos_70;
    } else {
      highp vec3 vPos_84;
      vPos_84 = vPos_69;
      highp vec3 tmpvar_85;
      tmpvar_85 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_86;
      tmpvar_86 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_87;
      highp float fAmount_88;
      highp float fTarget_89;
      highp vec4 tmpvar_90;
      tmpvar_90.w = 0.0;
      tmpvar_90.x = (tmpvar_86 + _glesMultiTexCoord0.w);
      tmpvar_90.y = ((tmpvar_86 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_90.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_86 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_91;
      tmpvar_91 = abs(((
        fract((tmpvar_90 + 0.5))
       * 2.0) - 1.0));
      vOscillations_87 = (((
        (tmpvar_91 * tmpvar_91)
       * 
        (3.0 - (2.0 * tmpvar_91))
      ) - 0.5) * 2.0);
      highp float tmpvar_92;
      tmpvar_92 = (vOscillations_87.y * vOscillations_87.z);
      fTarget_89 = 1.0;
      fAmount_88 = tmpvar_92;
      if ((tmpvar_92 < 0.0)) {
        fTarget_89 = -1.0;
        fAmount_88 = -(tmpvar_92);
      };
      vPos_84 = (vPos_69 + ((tmpvar_85 * 
        (((mix (
          mix (tmpvar_92, fTarget_89, fAmount_88)
        , fTarget_89, fAmount_88) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_87.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_69 = vPos_84;
    };
    FinalPosition_18 = vPos_69;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_93;
    vPos_93 = FinalPosition_18;
    highp float fAdjust_94;
    highp float fLength_95;
    fLength_95 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_96;
    tmpvar_96 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_94 = tmpvar_96;
    if ((tmpvar_96 != 0.0)) {
      fAdjust_94 = pow (tmpvar_96, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_97;
    tmpvar_97.zw = vec2(0.0, 0.0);
    tmpvar_97.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_97.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_98;
    highp vec4 tmpvar_99;
    tmpvar_99 = abs(((
      fract((tmpvar_97 + 0.5))
     * 2.0) - 1.0));
    tmpvar_98 = (((
      (tmpvar_99 * tmpvar_99)
     * 
      (3.0 - (2.0 * tmpvar_99))
    ) - 0.5) * 2.0);
    vPos_93.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_98.x + (tmpvar_98.y * tmpvar_98.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_94)));
    vPos_93 = (normalize(vPos_93) * fLength_95);
    FinalPosition_18 = vPos_93;
  };
  tmpvar_14.xyz = FinalPosition_18;
  highp vec4 tmpvar_100;
  tmpvar_100 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_101;
  highp vec4 tmpvar_102;
  tmpvar_102 = (tmpvar_100 * 0.5);
  highp vec2 tmpvar_103;
  tmpvar_103.x = tmpvar_102.x;
  tmpvar_103.y = (tmpvar_102.y * _ProjectionParams.x);
  o_101.xy = (tmpvar_103 + tmpvar_102.w);
  o_101.zw = tmpvar_100.zw;
  highp vec3 tmpvar_104;
  tmpvar_104 = o_101.xyw;
  tmpvar_8 = tmpvar_104;
  highp vec2 tmpvar_105;
  tmpvar_105 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_105;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_106;
  v_106.x = _World2Object[0].x;
  v_106.y = _World2Object[1].x;
  v_106.z = _World2Object[2].x;
  v_106.w = _World2Object[3].x;
  highp vec4 v_107;
  v_107.x = _World2Object[0].y;
  v_107.y = _World2Object[1].y;
  v_107.z = _World2Object[2].y;
  v_107.w = _World2Object[3].y;
  highp vec4 v_108;
  v_108.x = _World2Object[0].z;
  v_108.y = _World2Object[1].z;
  v_108.z = _World2Object[2].z;
  v_108.w = _World2Object[3].z;
  highp vec3 tmpvar_109;
  tmpvar_109 = normalize(((
    (v_106.xyz * tmpvar_15.x)
   + 
    (v_107.xyz * tmpvar_15.y)
  ) + (v_108.xyz * tmpvar_15.z)));
  worldNormal_3 = tmpvar_109;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec2 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_23;
  tmpvar_23 = (_LightMatrix0 * tmpvar_22).xy;
  lightCoord_4 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = texture (_LightTexture0, lightCoord_4).w;
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_25;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_24);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_28 = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tmpvar_9 * tmpvar_1) * diff_28);
  c_27.xyz = tmpvar_30;
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  mediump vec3 tmpvar_31;
  tmpvar_31 = c_27.xyz;
  c_26.xyz = tmpvar_31;
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_14;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_23;
  tmpvar_23 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_24;
  tmpvar_24[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_24[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_24[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_25;
  tmpvar_25 = (normalize((tmpvar_23 * tmpvar_24)) * sqrt(dot (tmpvar_23, tmpvar_23)));
  FinalPosition_19 = tmpvar_25;
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_26;
    tmpvar_26 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_27;
    isBestWind_27 = (tmpvar_20 == 4.0);
    bool bLeaf2_28;
    bLeaf2_28 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_29;
    vPos_29 = tmpvar_25;
    highp vec3 vDirection_30;
    vDirection_30 = tmpvar_2;
    highp float tmpvar_31;
    if (bLeaf2_28) {
      tmpvar_31 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_32;
    if (bLeaf2_28) {
      tmpvar_32 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_32 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_33;
    highp vec4 tmpvar_34;
    tmpvar_34.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_34.x = (tmpvar_31 + tmpvar_26);
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    vPos_33 = (tmpvar_25 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_32 * (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_30 = tmpvar_2;
    vPos_29 = vPos_33;
    if (isBestWind_27) {
      highp vec3 tmpvar_36;
      tmpvar_36 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_37;
      if (bLeaf2_28) {
        tmpvar_37 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_38;
      if (bLeaf2_28) {
        tmpvar_38 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_39;
      if (bLeaf2_28) {
        tmpvar_39 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_40;
      if (bLeaf2_28) {
        tmpvar_40 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_40 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_41;
      if (bLeaf2_28) {
        tmpvar_41 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_41 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_42;
      if (bLeaf2_28) {
        tmpvar_42 = bool(1);
      } else {
        tmpvar_42 = bool(1);
      };
      highp float fTwitch_43;
      highp vec3 vAxis_44;
      highp vec3 tmpvar_45;
      tmpvar_45 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_46;
      tmpvar_46 = ((tmpvar_45.x + tmpvar_45.y) + tmpvar_45.z);
      highp vec4 tmpvar_47;
      tmpvar_47.x = (tmpvar_37 + tmpvar_46);
      tmpvar_47.y = ((tmpvar_37 * 0.75) - tmpvar_46);
      tmpvar_47.z = ((tmpvar_37 * 0.01) + tmpvar_46);
      tmpvar_47.w = (tmpvar_37 + tmpvar_46);
      highp vec4 tmpvar_48;
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      tmpvar_48 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = sqrt(dot (vPos_33, vPos_33));
      highp float fAngle_51;
      fAngle_51 = ((_glesMultiTexCoord2.x * tmpvar_39) * (tmpvar_48.x + (tmpvar_48.y * tmpvar_48.y)));
      highp vec2 vSinCos_52;
      vSinCos_52.x = sin(fAngle_51);
      vSinCos_52.y = cos(fAngle_51);
      highp float tmpvar_53;
      tmpvar_53 = (1.0 - vSinCos_52.y);
      highp mat3 tmpvar_54;
      tmpvar_54[0].x = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.x) + vSinCos_52.y);
      tmpvar_54[0].y = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.y) + (vSinCos_52.x * tmpvar_36.z));
      tmpvar_54[0].z = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.z) - (vSinCos_52.x * tmpvar_36.y));
      tmpvar_54[1].x = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.y) - (vSinCos_52.x * tmpvar_36.z));
      tmpvar_54[1].y = (((tmpvar_53 * tmpvar_36.y) * tmpvar_36.y) + vSinCos_52.y);
      tmpvar_54[1].z = (((tmpvar_53 * tmpvar_36.y) * tmpvar_36.z) + (vSinCos_52.x * tmpvar_36.x));
      tmpvar_54[2].x = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.z) + (vSinCos_52.x * tmpvar_36.y));
      tmpvar_54[2].y = (((tmpvar_53 * tmpvar_36.y) * tmpvar_36.z) - (vSinCos_52.x * tmpvar_36.x));
      tmpvar_54[2].z = (((tmpvar_53 * tmpvar_36.z) * tmpvar_36.z) + vSinCos_52.y);
      highp vec3 tmpvar_55;
      tmpvar_55 = ((tmpvar_36.yzx * vRotatedWindVector_18.zxy) - (tmpvar_36.zxy * vRotatedWindVector_18.yzx));
      vAxis_44.xz = tmpvar_55.xz;
      highp float tmpvar_56;
      tmpvar_56 = clamp (dot (vRotatedWindVector_18, tmpvar_36), -1.0, 1.0);
      vAxis_44.y = (tmpvar_55.y + tmpvar_56);
      highp vec3 tmpvar_57;
      tmpvar_57 = normalize(vAxis_44);
      vAxis_44 = tmpvar_57;
      highp float tmpvar_58;
      tmpvar_58 = (1.570796 - (sign(tmpvar_56) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_56))) * (1.570796 + (abs(tmpvar_56) * (-0.2146018 + 
          (abs(tmpvar_56) * (0.08656672 + (abs(tmpvar_56) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_59;
      tmpvar_59 = (tmpvar_48.y - (tmpvar_48.x * tmpvar_48.x));
      fTwitch_43 = 0.0;
      if (tmpvar_42) {
        highp float fTime_60;
        fTime_60 = (tmpvar_41.z + tmpvar_46);
        highp vec4 tmpvar_61;
        tmpvar_61.zw = vec2(0.0, 0.0);
        tmpvar_61.x = fTime_60;
        tmpvar_61.y = (0.87 * fTime_60);
        highp vec4 tmpvar_62;
        highp vec4 tmpvar_63;
        tmpvar_63 = abs(((
          fract((tmpvar_61 + 0.5))
         * 2.0) - 1.0));
        tmpvar_62 = (((
          (tmpvar_63 * tmpvar_63)
         * 
          (3.0 - (2.0 * tmpvar_63))
        ) - 0.5) * 2.0);
        fTwitch_43 = (tmpvar_41.x * pow (clamp (
          ((((tmpvar_62.x * tmpvar_62.y) * tmpvar_62.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_41.y));
      };
      highp float fAngle_64;
      fAngle_64 = (_glesMultiTexCoord2.x * ((
        (tmpvar_58 * tmpvar_40)
       + 
        (tmpvar_59 * tmpvar_38)
      ) + fTwitch_43));
      highp vec2 vSinCos_65;
      vSinCos_65.x = sin(fAngle_64);
      vSinCos_65.y = cos(fAngle_64);
      highp float tmpvar_66;
      tmpvar_66 = (1.0 - vSinCos_65.y);
      highp mat3 tmpvar_67;
      tmpvar_67[0].x = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.x) + vSinCos_65.y);
      tmpvar_67[0].y = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.y) + (vSinCos_65.x * tmpvar_57.z));
      tmpvar_67[0].z = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.z) - (vSinCos_65.x * tmpvar_57.y));
      tmpvar_67[1].x = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.y) - (vSinCos_65.x * tmpvar_57.z));
      tmpvar_67[1].y = (((tmpvar_66 * tmpvar_57.y) * tmpvar_57.y) + vSinCos_65.y);
      tmpvar_67[1].z = (((tmpvar_66 * tmpvar_57.y) * tmpvar_57.z) + (vSinCos_65.x * tmpvar_57.x));
      tmpvar_67[2].x = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.z) + (vSinCos_65.x * tmpvar_57.y));
      tmpvar_67[2].y = (((tmpvar_66 * tmpvar_57.y) * tmpvar_57.z) - (vSinCos_65.x * tmpvar_57.x));
      tmpvar_67[2].z = (((tmpvar_66 * tmpvar_57.z) * tmpvar_57.z) + vSinCos_65.y);
      highp mat3 tmpvar_68;
      tmpvar_68 = (tmpvar_54 * tmpvar_67);
      vDirection_30 = (tmpvar_68 * _glesNormal);
      vPos_29 = (normalize((tmpvar_68 * vPos_33)) * tmpvar_50);
    };
    tmpvar_16 = vDirection_30;
    FinalPosition_19 = vPos_29;
  };
  highp vec3 tmpvar_69;
  tmpvar_69 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_69;
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_70;
    vPos_70 = tmpvar_69;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_71;
      vPos_71 = tmpvar_69;
      highp float fAdherenceScale_72;
      highp vec3 tmpvar_73;
      tmpvar_73 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_74;
      tmpvar_74 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_75;
      highp float fOscillation_76;
      fOscillation_76 = 1.0;
      highp float fAmount_77;
      highp float fTarget_78;
      highp vec4 tmpvar_79;
      tmpvar_79.x = (tmpvar_74 + _glesMultiTexCoord0.w);
      tmpvar_79.y = ((tmpvar_74 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_79.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_74 + _glesMultiTexCoord0.w));
      tmpvar_79.w = ((tmpvar_74 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      vOscillations_75 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      highp float tmpvar_81;
      tmpvar_81 = (vOscillations_75.y * vOscillations_75.z);
      fTarget_78 = 1.0;
      fAmount_77 = tmpvar_81;
      if ((tmpvar_81 < 0.0)) {
        fTarget_78 = -1.0;
        fAmount_77 = -(tmpvar_81);
      };
      fOscillation_76 = (((
        (mix (mix (tmpvar_81, fTarget_78, fAmount_77), fTarget_78, fAmount_77) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_75.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_75.w * _ST_WindBranchWhip.x)));
      vPos_71 = (tmpvar_69 + ((tmpvar_73 * fOscillation_76) * _ST_WindBranch.y));
      highp vec4 tmpvar_82;
      tmpvar_82.zw = vec2(0.0, 0.0);
      tmpvar_82.x = ((tmpvar_74 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_82.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_83;
      highp vec4 tmpvar_84;
      tmpvar_84 = abs(((
        fract((tmpvar_82 + 0.5))
       * 2.0) - 1.0));
      tmpvar_83 = (((
        (tmpvar_84 * tmpvar_84)
       * 
        (3.0 - (2.0 * tmpvar_84))
      ) - 0.5) * 2.0);
      fAdherenceScale_72 = (1.0 - ((
        ((tmpvar_83.x * tmpvar_83.y) * tmpvar_83.x)
       * tmpvar_83.y) * _ST_WindTurbulences.x));
      fAdherenceScale_72 = (fAdherenceScale_72 + ((vOscillations_75.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_71 = (vPos_71 + ((
        ((vRotatedBranchAnchor_17 - vPos_71) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_72) * _glesMultiTexCoord0.z));
      vPos_70 = vPos_71;
    } else {
      highp vec3 vPos_85;
      vPos_85 = vPos_70;
      highp vec3 tmpvar_86;
      tmpvar_86 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_87;
      tmpvar_87 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_88;
      highp float fAmount_89;
      highp float fTarget_90;
      highp vec4 tmpvar_91;
      tmpvar_91.w = 0.0;
      tmpvar_91.x = (tmpvar_87 + _glesMultiTexCoord0.w);
      tmpvar_91.y = ((tmpvar_87 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_91.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_87 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_92;
      tmpvar_92 = abs(((
        fract((tmpvar_91 + 0.5))
       * 2.0) - 1.0));
      vOscillations_88 = (((
        (tmpvar_92 * tmpvar_92)
       * 
        (3.0 - (2.0 * tmpvar_92))
      ) - 0.5) * 2.0);
      highp float tmpvar_93;
      tmpvar_93 = (vOscillations_88.y * vOscillations_88.z);
      fTarget_90 = 1.0;
      fAmount_89 = tmpvar_93;
      if ((tmpvar_93 < 0.0)) {
        fTarget_90 = -1.0;
        fAmount_89 = -(tmpvar_93);
      };
      vPos_85 = (vPos_70 + ((tmpvar_86 * 
        (((mix (
          mix (tmpvar_93, fTarget_90, fAmount_89)
        , fTarget_90, fAmount_89) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_88.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_70 = vPos_85;
    };
    FinalPosition_19 = vPos_70;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_94;
    vPos_94 = FinalPosition_19;
    highp float fAdjust_95;
    highp float fLength_96;
    fLength_96 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_97;
    tmpvar_97 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_95 = tmpvar_97;
    if ((tmpvar_97 != 0.0)) {
      fAdjust_95 = pow (tmpvar_97, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_98;
    tmpvar_98.zw = vec2(0.0, 0.0);
    tmpvar_98.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_98.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_99;
    highp vec4 tmpvar_100;
    tmpvar_100 = abs(((
      fract((tmpvar_98 + 0.5))
     * 2.0) - 1.0));
    tmpvar_99 = (((
      (tmpvar_100 * tmpvar_100)
     * 
      (3.0 - (2.0 * tmpvar_100))
    ) - 0.5) * 2.0);
    vPos_94.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_99.x + (tmpvar_99.y * tmpvar_99.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_95)));
    vPos_94 = (normalize(vPos_94) * fLength_96);
    FinalPosition_19 = vPos_94;
  };
  tmpvar_15.xyz = FinalPosition_19;
  highp vec4 tmpvar_101;
  tmpvar_101 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_102;
  highp vec4 tmpvar_103;
  tmpvar_103 = (tmpvar_101 * 0.5);
  highp vec2 tmpvar_104;
  tmpvar_104.x = tmpvar_103.x;
  tmpvar_104.y = (tmpvar_103.y * _ProjectionParams.x);
  o_102.xy = (tmpvar_104 + tmpvar_103.w);
  o_102.zw = tmpvar_101.zw;
  highp vec3 tmpvar_105;
  tmpvar_105 = o_102.xyw;
  tmpvar_9 = tmpvar_105;
  highp vec2 tmpvar_106;
  tmpvar_106 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_106;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_107;
  v_107.x = _World2Object[0].x;
  v_107.y = _World2Object[1].x;
  v_107.z = _World2Object[2].x;
  v_107.w = _World2Object[3].x;
  highp vec4 v_108;
  v_108.x = _World2Object[0].y;
  v_108.y = _World2Object[1].y;
  v_108.z = _World2Object[2].y;
  v_108.w = _World2Object[3].y;
  highp vec4 v_109;
  v_109.x = _World2Object[0].z;
  v_109.y = _World2Object[1].z;
  v_109.z = _World2Object[2].z;
  v_109.w = _World2Object[3].z;
  highp vec3 tmpvar_110;
  tmpvar_110 = normalize(((
    (v_107.xyz * tmpvar_16.x)
   + 
    (v_108.xyz * tmpvar_16.y)
  ) + (v_109.xyz * tmpvar_16.z)));
  worldNormal_5 = tmpvar_110;
  highp mat3 tmpvar_111;
  tmpvar_111[0] = _Object2World[0].xyz;
  tmpvar_111[1] = _Object2World[1].xyz;
  tmpvar_111[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_112;
  tmpvar_112 = normalize((tmpvar_111 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_112;
  lowp vec3 tmpvar_113;
  tmpvar_113 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_114;
  tmpvar_114 = (tmpvar_113 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_114;
  lowp vec3 tmpvar_115;
  tmpvar_115.x = worldTangent_4.x;
  tmpvar_115.y = worldBinormal_3.x;
  tmpvar_115.z = worldNormal_5.x;
  lowp vec3 tmpvar_116;
  tmpvar_116.x = worldTangent_4.y;
  tmpvar_116.y = worldBinormal_3.y;
  tmpvar_116.z = worldNormal_5.y;
  lowp vec3 tmpvar_117;
  tmpvar_117.x = worldTangent_4.z;
  tmpvar_117.y = worldBinormal_3.z;
  tmpvar_117.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_115;
  xlv_TEXCOORD1 = tmpvar_116;
  xlv_TEXCOORD2 = tmpvar_117;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec3 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_24;
  tmpvar_24 = (_LightMatrix0 * tmpvar_23).xyz;
  lightCoord_5 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (lightCoord_5, lightCoord_5);
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_LightTexture0, vec2(tmpvar_25)).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_22);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_22);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_22);
  lowp vec3 tmpvar_27;
  tmpvar_27 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_27;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_26);
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_30 = tmpvar_31;
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tmpvar_9 * tmpvar_1) * diff_30);
  c_29.xyz = tmpvar_32;
  c_29.w = tmpvar_10;
  c_28.w = c_29.w;
  mediump vec3 tmpvar_33;
  tmpvar_33 = c_29.xyz;
  c_28.xyz = tmpvar_33;
  c_4.xyz = c_28.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
in vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out lowp vec3 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out mediump vec4 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_14;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_23;
  tmpvar_23 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_24;
  tmpvar_24[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_24[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_24[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_25;
  tmpvar_25 = (normalize((tmpvar_23 * tmpvar_24)) * sqrt(dot (tmpvar_23, tmpvar_23)));
  FinalPosition_19 = tmpvar_25;
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_26;
    tmpvar_26 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_27;
    isBestWind_27 = (tmpvar_20 == 4.0);
    bool bLeaf2_28;
    bLeaf2_28 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_29;
    vPos_29 = tmpvar_25;
    highp vec3 vDirection_30;
    vDirection_30 = tmpvar_2;
    highp float tmpvar_31;
    if (bLeaf2_28) {
      tmpvar_31 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_32;
    if (bLeaf2_28) {
      tmpvar_32 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_32 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_33;
    highp vec4 tmpvar_34;
    tmpvar_34.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_34.x = (tmpvar_31 + tmpvar_26);
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    vPos_33 = (tmpvar_25 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_32 * (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_30 = tmpvar_2;
    vPos_29 = vPos_33;
    if (isBestWind_27) {
      highp vec3 tmpvar_36;
      tmpvar_36 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_37;
      if (bLeaf2_28) {
        tmpvar_37 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_38;
      if (bLeaf2_28) {
        tmpvar_38 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_39;
      if (bLeaf2_28) {
        tmpvar_39 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_40;
      if (bLeaf2_28) {
        tmpvar_40 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_40 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_41;
      if (bLeaf2_28) {
        tmpvar_41 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_41 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_42;
      if (bLeaf2_28) {
        tmpvar_42 = bool(1);
      } else {
        tmpvar_42 = bool(1);
      };
      highp float fTwitch_43;
      highp vec3 vAxis_44;
      highp vec3 tmpvar_45;
      tmpvar_45 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_46;
      tmpvar_46 = ((tmpvar_45.x + tmpvar_45.y) + tmpvar_45.z);
      highp vec4 tmpvar_47;
      tmpvar_47.x = (tmpvar_37 + tmpvar_46);
      tmpvar_47.y = ((tmpvar_37 * 0.75) - tmpvar_46);
      tmpvar_47.z = ((tmpvar_37 * 0.01) + tmpvar_46);
      tmpvar_47.w = (tmpvar_37 + tmpvar_46);
      highp vec4 tmpvar_48;
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      tmpvar_48 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = sqrt(dot (vPos_33, vPos_33));
      highp float fAngle_51;
      fAngle_51 = ((_glesMultiTexCoord2.x * tmpvar_39) * (tmpvar_48.x + (tmpvar_48.y * tmpvar_48.y)));
      highp vec2 vSinCos_52;
      vSinCos_52.x = sin(fAngle_51);
      vSinCos_52.y = cos(fAngle_51);
      highp float tmpvar_53;
      tmpvar_53 = (1.0 - vSinCos_52.y);
      highp mat3 tmpvar_54;
      tmpvar_54[0].x = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.x) + vSinCos_52.y);
      tmpvar_54[0].y = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.y) + (vSinCos_52.x * tmpvar_36.z));
      tmpvar_54[0].z = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.z) - (vSinCos_52.x * tmpvar_36.y));
      tmpvar_54[1].x = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.y) - (vSinCos_52.x * tmpvar_36.z));
      tmpvar_54[1].y = (((tmpvar_53 * tmpvar_36.y) * tmpvar_36.y) + vSinCos_52.y);
      tmpvar_54[1].z = (((tmpvar_53 * tmpvar_36.y) * tmpvar_36.z) + (vSinCos_52.x * tmpvar_36.x));
      tmpvar_54[2].x = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.z) + (vSinCos_52.x * tmpvar_36.y));
      tmpvar_54[2].y = (((tmpvar_53 * tmpvar_36.y) * tmpvar_36.z) - (vSinCos_52.x * tmpvar_36.x));
      tmpvar_54[2].z = (((tmpvar_53 * tmpvar_36.z) * tmpvar_36.z) + vSinCos_52.y);
      highp vec3 tmpvar_55;
      tmpvar_55 = ((tmpvar_36.yzx * vRotatedWindVector_18.zxy) - (tmpvar_36.zxy * vRotatedWindVector_18.yzx));
      vAxis_44.xz = tmpvar_55.xz;
      highp float tmpvar_56;
      tmpvar_56 = clamp (dot (vRotatedWindVector_18, tmpvar_36), -1.0, 1.0);
      vAxis_44.y = (tmpvar_55.y + tmpvar_56);
      highp vec3 tmpvar_57;
      tmpvar_57 = normalize(vAxis_44);
      vAxis_44 = tmpvar_57;
      highp float tmpvar_58;
      tmpvar_58 = (1.570796 - (sign(tmpvar_56) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_56))) * (1.570796 + (abs(tmpvar_56) * (-0.2146018 + 
          (abs(tmpvar_56) * (0.08656672 + (abs(tmpvar_56) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_59;
      tmpvar_59 = (tmpvar_48.y - (tmpvar_48.x * tmpvar_48.x));
      fTwitch_43 = 0.0;
      if (tmpvar_42) {
        highp float fTime_60;
        fTime_60 = (tmpvar_41.z + tmpvar_46);
        highp vec4 tmpvar_61;
        tmpvar_61.zw = vec2(0.0, 0.0);
        tmpvar_61.x = fTime_60;
        tmpvar_61.y = (0.87 * fTime_60);
        highp vec4 tmpvar_62;
        highp vec4 tmpvar_63;
        tmpvar_63 = abs(((
          fract((tmpvar_61 + 0.5))
         * 2.0) - 1.0));
        tmpvar_62 = (((
          (tmpvar_63 * tmpvar_63)
         * 
          (3.0 - (2.0 * tmpvar_63))
        ) - 0.5) * 2.0);
        fTwitch_43 = (tmpvar_41.x * pow (clamp (
          ((((tmpvar_62.x * tmpvar_62.y) * tmpvar_62.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_41.y));
      };
      highp float fAngle_64;
      fAngle_64 = (_glesMultiTexCoord2.x * ((
        (tmpvar_58 * tmpvar_40)
       + 
        (tmpvar_59 * tmpvar_38)
      ) + fTwitch_43));
      highp vec2 vSinCos_65;
      vSinCos_65.x = sin(fAngle_64);
      vSinCos_65.y = cos(fAngle_64);
      highp float tmpvar_66;
      tmpvar_66 = (1.0 - vSinCos_65.y);
      highp mat3 tmpvar_67;
      tmpvar_67[0].x = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.x) + vSinCos_65.y);
      tmpvar_67[0].y = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.y) + (vSinCos_65.x * tmpvar_57.z));
      tmpvar_67[0].z = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.z) - (vSinCos_65.x * tmpvar_57.y));
      tmpvar_67[1].x = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.y) - (vSinCos_65.x * tmpvar_57.z));
      tmpvar_67[1].y = (((tmpvar_66 * tmpvar_57.y) * tmpvar_57.y) + vSinCos_65.y);
      tmpvar_67[1].z = (((tmpvar_66 * tmpvar_57.y) * tmpvar_57.z) + (vSinCos_65.x * tmpvar_57.x));
      tmpvar_67[2].x = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.z) + (vSinCos_65.x * tmpvar_57.y));
      tmpvar_67[2].y = (((tmpvar_66 * tmpvar_57.y) * tmpvar_57.z) - (vSinCos_65.x * tmpvar_57.x));
      tmpvar_67[2].z = (((tmpvar_66 * tmpvar_57.z) * tmpvar_57.z) + vSinCos_65.y);
      highp mat3 tmpvar_68;
      tmpvar_68 = (tmpvar_54 * tmpvar_67);
      vDirection_30 = (tmpvar_68 * _glesNormal);
      vPos_29 = (normalize((tmpvar_68 * vPos_33)) * tmpvar_50);
    };
    tmpvar_16 = vDirection_30;
    FinalPosition_19 = vPos_29;
  };
  highp vec3 tmpvar_69;
  tmpvar_69 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_69;
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_70;
    vPos_70 = tmpvar_69;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_71;
      vPos_71 = tmpvar_69;
      highp float fAdherenceScale_72;
      highp vec3 tmpvar_73;
      tmpvar_73 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_74;
      tmpvar_74 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_75;
      highp float fOscillation_76;
      fOscillation_76 = 1.0;
      highp float fAmount_77;
      highp float fTarget_78;
      highp vec4 tmpvar_79;
      tmpvar_79.x = (tmpvar_74 + _glesMultiTexCoord0.w);
      tmpvar_79.y = ((tmpvar_74 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_79.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_74 + _glesMultiTexCoord0.w));
      tmpvar_79.w = ((tmpvar_74 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      vOscillations_75 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      highp float tmpvar_81;
      tmpvar_81 = (vOscillations_75.y * vOscillations_75.z);
      fTarget_78 = 1.0;
      fAmount_77 = tmpvar_81;
      if ((tmpvar_81 < 0.0)) {
        fTarget_78 = -1.0;
        fAmount_77 = -(tmpvar_81);
      };
      fOscillation_76 = (((
        (mix (mix (tmpvar_81, fTarget_78, fAmount_77), fTarget_78, fAmount_77) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_75.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_75.w * _ST_WindBranchWhip.x)));
      vPos_71 = (tmpvar_69 + ((tmpvar_73 * fOscillation_76) * _ST_WindBranch.y));
      highp vec4 tmpvar_82;
      tmpvar_82.zw = vec2(0.0, 0.0);
      tmpvar_82.x = ((tmpvar_74 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_82.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_83;
      highp vec4 tmpvar_84;
      tmpvar_84 = abs(((
        fract((tmpvar_82 + 0.5))
       * 2.0) - 1.0));
      tmpvar_83 = (((
        (tmpvar_84 * tmpvar_84)
       * 
        (3.0 - (2.0 * tmpvar_84))
      ) - 0.5) * 2.0);
      fAdherenceScale_72 = (1.0 - ((
        ((tmpvar_83.x * tmpvar_83.y) * tmpvar_83.x)
       * tmpvar_83.y) * _ST_WindTurbulences.x));
      fAdherenceScale_72 = (fAdherenceScale_72 + ((vOscillations_75.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_71 = (vPos_71 + ((
        ((vRotatedBranchAnchor_17 - vPos_71) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_72) * _glesMultiTexCoord0.z));
      vPos_70 = vPos_71;
    } else {
      highp vec3 vPos_85;
      vPos_85 = vPos_70;
      highp vec3 tmpvar_86;
      tmpvar_86 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_87;
      tmpvar_87 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_88;
      highp float fAmount_89;
      highp float fTarget_90;
      highp vec4 tmpvar_91;
      tmpvar_91.w = 0.0;
      tmpvar_91.x = (tmpvar_87 + _glesMultiTexCoord0.w);
      tmpvar_91.y = ((tmpvar_87 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_91.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_87 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_92;
      tmpvar_92 = abs(((
        fract((tmpvar_91 + 0.5))
       * 2.0) - 1.0));
      vOscillations_88 = (((
        (tmpvar_92 * tmpvar_92)
       * 
        (3.0 - (2.0 * tmpvar_92))
      ) - 0.5) * 2.0);
      highp float tmpvar_93;
      tmpvar_93 = (vOscillations_88.y * vOscillations_88.z);
      fTarget_90 = 1.0;
      fAmount_89 = tmpvar_93;
      if ((tmpvar_93 < 0.0)) {
        fTarget_90 = -1.0;
        fAmount_89 = -(tmpvar_93);
      };
      vPos_85 = (vPos_70 + ((tmpvar_86 * 
        (((mix (
          mix (tmpvar_93, fTarget_90, fAmount_89)
        , fTarget_90, fAmount_89) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_88.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_70 = vPos_85;
    };
    FinalPosition_19 = vPos_70;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_94;
    vPos_94 = FinalPosition_19;
    highp float fAdjust_95;
    highp float fLength_96;
    fLength_96 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_97;
    tmpvar_97 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_95 = tmpvar_97;
    if ((tmpvar_97 != 0.0)) {
      fAdjust_95 = pow (tmpvar_97, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_98;
    tmpvar_98.zw = vec2(0.0, 0.0);
    tmpvar_98.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_98.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_99;
    highp vec4 tmpvar_100;
    tmpvar_100 = abs(((
      fract((tmpvar_98 + 0.5))
     * 2.0) - 1.0));
    tmpvar_99 = (((
      (tmpvar_100 * tmpvar_100)
     * 
      (3.0 - (2.0 * tmpvar_100))
    ) - 0.5) * 2.0);
    vPos_94.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_99.x + (tmpvar_99.y * tmpvar_99.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_95)));
    vPos_94 = (normalize(vPos_94) * fLength_96);
    FinalPosition_19 = vPos_94;
  };
  tmpvar_15.xyz = FinalPosition_19;
  highp vec4 tmpvar_101;
  tmpvar_101 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_102;
  highp vec4 tmpvar_103;
  tmpvar_103 = (tmpvar_101 * 0.5);
  highp vec2 tmpvar_104;
  tmpvar_104.x = tmpvar_103.x;
  tmpvar_104.y = (tmpvar_103.y * _ProjectionParams.x);
  o_102.xy = (tmpvar_104 + tmpvar_103.w);
  o_102.zw = tmpvar_101.zw;
  highp vec3 tmpvar_105;
  tmpvar_105 = o_102.xyw;
  tmpvar_9 = tmpvar_105;
  highp vec2 tmpvar_106;
  tmpvar_106 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_106;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_107;
  v_107.x = _World2Object[0].x;
  v_107.y = _World2Object[1].x;
  v_107.z = _World2Object[2].x;
  v_107.w = _World2Object[3].x;
  highp vec4 v_108;
  v_108.x = _World2Object[0].y;
  v_108.y = _World2Object[1].y;
  v_108.z = _World2Object[2].y;
  v_108.w = _World2Object[3].y;
  highp vec4 v_109;
  v_109.x = _World2Object[0].z;
  v_109.y = _World2Object[1].z;
  v_109.z = _World2Object[2].z;
  v_109.w = _World2Object[3].z;
  highp vec3 tmpvar_110;
  tmpvar_110 = normalize(((
    (v_107.xyz * tmpvar_16.x)
   + 
    (v_108.xyz * tmpvar_16.y)
  ) + (v_109.xyz * tmpvar_16.z)));
  worldNormal_5 = tmpvar_110;
  highp mat3 tmpvar_111;
  tmpvar_111[0] = _Object2World[0].xyz;
  tmpvar_111[1] = _Object2World[1].xyz;
  tmpvar_111[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_112;
  tmpvar_112 = normalize((tmpvar_111 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_112;
  lowp vec3 tmpvar_113;
  tmpvar_113 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_114;
  tmpvar_114 = (tmpvar_113 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_114;
  lowp vec3 tmpvar_115;
  tmpvar_115.x = worldTangent_4.x;
  tmpvar_115.y = worldBinormal_3.x;
  tmpvar_115.z = worldNormal_5.x;
  lowp vec3 tmpvar_116;
  tmpvar_116.x = worldTangent_4.y;
  tmpvar_116.y = worldBinormal_3.y;
  tmpvar_116.z = worldNormal_5.y;
  lowp vec3 tmpvar_117;
  tmpvar_117.x = worldTangent_4.z;
  tmpvar_117.y = worldBinormal_3.z;
  tmpvar_117.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_115;
  xlv_TEXCOORD1 = tmpvar_116;
  xlv_TEXCOORD2 = tmpvar_117;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in lowp vec3 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in mediump vec4 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec3 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_24;
  tmpvar_24 = (_LightMatrix0 * tmpvar_23).xyz;
  lightCoord_5 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (lightCoord_5, lightCoord_5);
  lowp float tmpvar_26;
  tmpvar_26 = texture (_LightTexture0, vec2(tmpvar_25)).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_22);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_22);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_22);
  lowp vec3 tmpvar_27;
  tmpvar_27 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_27;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_26);
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_30 = tmpvar_31;
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tmpvar_9 * tmpvar_1) * diff_30);
  c_29.xyz = tmpvar_32;
  c_29.w = tmpvar_10;
  c_28.w = c_29.w;
  mediump vec3 tmpvar_33;
  tmpvar_33 = c_29.xyz;
  c_28.xyz = tmpvar_33;
  c_4.xyz = c_28.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_14;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_23;
  tmpvar_23 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_24;
  tmpvar_24[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_24[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_24[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_25;
  tmpvar_25 = (normalize((tmpvar_23 * tmpvar_24)) * sqrt(dot (tmpvar_23, tmpvar_23)));
  FinalPosition_19 = tmpvar_25;
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_26;
    tmpvar_26 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_27;
    isBestWind_27 = (tmpvar_20 == 4.0);
    bool bLeaf2_28;
    bLeaf2_28 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_29;
    vPos_29 = tmpvar_25;
    highp vec3 vDirection_30;
    vDirection_30 = tmpvar_2;
    highp float tmpvar_31;
    if (bLeaf2_28) {
      tmpvar_31 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_32;
    if (bLeaf2_28) {
      tmpvar_32 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_32 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_33;
    highp vec4 tmpvar_34;
    tmpvar_34.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_34.x = (tmpvar_31 + tmpvar_26);
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    vPos_33 = (tmpvar_25 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_32 * (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_30 = tmpvar_2;
    vPos_29 = vPos_33;
    if (isBestWind_27) {
      highp vec3 tmpvar_36;
      tmpvar_36 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_37;
      if (bLeaf2_28) {
        tmpvar_37 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_38;
      if (bLeaf2_28) {
        tmpvar_38 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_39;
      if (bLeaf2_28) {
        tmpvar_39 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_40;
      if (bLeaf2_28) {
        tmpvar_40 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_40 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_41;
      if (bLeaf2_28) {
        tmpvar_41 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_41 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_42;
      if (bLeaf2_28) {
        tmpvar_42 = bool(1);
      } else {
        tmpvar_42 = bool(1);
      };
      highp float fTwitch_43;
      highp vec3 vAxis_44;
      highp vec3 tmpvar_45;
      tmpvar_45 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_46;
      tmpvar_46 = ((tmpvar_45.x + tmpvar_45.y) + tmpvar_45.z);
      highp vec4 tmpvar_47;
      tmpvar_47.x = (tmpvar_37 + tmpvar_46);
      tmpvar_47.y = ((tmpvar_37 * 0.75) - tmpvar_46);
      tmpvar_47.z = ((tmpvar_37 * 0.01) + tmpvar_46);
      tmpvar_47.w = (tmpvar_37 + tmpvar_46);
      highp vec4 tmpvar_48;
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      tmpvar_48 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = sqrt(dot (vPos_33, vPos_33));
      highp float fAngle_51;
      fAngle_51 = ((_glesMultiTexCoord2.x * tmpvar_39) * (tmpvar_48.x + (tmpvar_48.y * tmpvar_48.y)));
      highp vec2 vSinCos_52;
      vSinCos_52.x = sin(fAngle_51);
      vSinCos_52.y = cos(fAngle_51);
      highp float tmpvar_53;
      tmpvar_53 = (1.0 - vSinCos_52.y);
      highp mat3 tmpvar_54;
      tmpvar_54[0].x = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.x) + vSinCos_52.y);
      tmpvar_54[0].y = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.y) + (vSinCos_52.x * tmpvar_36.z));
      tmpvar_54[0].z = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.z) - (vSinCos_52.x * tmpvar_36.y));
      tmpvar_54[1].x = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.y) - (vSinCos_52.x * tmpvar_36.z));
      tmpvar_54[1].y = (((tmpvar_53 * tmpvar_36.y) * tmpvar_36.y) + vSinCos_52.y);
      tmpvar_54[1].z = (((tmpvar_53 * tmpvar_36.y) * tmpvar_36.z) + (vSinCos_52.x * tmpvar_36.x));
      tmpvar_54[2].x = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.z) + (vSinCos_52.x * tmpvar_36.y));
      tmpvar_54[2].y = (((tmpvar_53 * tmpvar_36.y) * tmpvar_36.z) - (vSinCos_52.x * tmpvar_36.x));
      tmpvar_54[2].z = (((tmpvar_53 * tmpvar_36.z) * tmpvar_36.z) + vSinCos_52.y);
      highp vec3 tmpvar_55;
      tmpvar_55 = ((tmpvar_36.yzx * vRotatedWindVector_18.zxy) - (tmpvar_36.zxy * vRotatedWindVector_18.yzx));
      vAxis_44.xz = tmpvar_55.xz;
      highp float tmpvar_56;
      tmpvar_56 = clamp (dot (vRotatedWindVector_18, tmpvar_36), -1.0, 1.0);
      vAxis_44.y = (tmpvar_55.y + tmpvar_56);
      highp vec3 tmpvar_57;
      tmpvar_57 = normalize(vAxis_44);
      vAxis_44 = tmpvar_57;
      highp float tmpvar_58;
      tmpvar_58 = (1.570796 - (sign(tmpvar_56) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_56))) * (1.570796 + (abs(tmpvar_56) * (-0.2146018 + 
          (abs(tmpvar_56) * (0.08656672 + (abs(tmpvar_56) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_59;
      tmpvar_59 = (tmpvar_48.y - (tmpvar_48.x * tmpvar_48.x));
      fTwitch_43 = 0.0;
      if (tmpvar_42) {
        highp float fTime_60;
        fTime_60 = (tmpvar_41.z + tmpvar_46);
        highp vec4 tmpvar_61;
        tmpvar_61.zw = vec2(0.0, 0.0);
        tmpvar_61.x = fTime_60;
        tmpvar_61.y = (0.87 * fTime_60);
        highp vec4 tmpvar_62;
        highp vec4 tmpvar_63;
        tmpvar_63 = ab