var_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_111;
  tmpvar_111.w = 1.0;
  tmpvar_111.xyz = worldNormal_3;
  mediump vec4 normal_112;
  normal_112 = tmpvar_111;
  mediump vec3 x2_113;
  mediump vec4 tmpvar_114;
  tmpvar_114 = (normal_112.xyzz * normal_112.yzzx);
  x2_113.x = dot (unity_SHBr, tmpvar_114);
  x2_113.y = dot (unity_SHBg, tmpvar_114);
  x2_113.z = dot (unity_SHBb, tmpvar_114);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_113 + (unity_SHC.xyz * (
    (normal_112.x * normal_112.x)
   - 
    (normal_112.y * normal_112.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_16 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_17;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_3;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_18;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_19);
  x1_20.y = dot (unity_SHAg, tmpvar_19);
  x1_20.z = dot (unity_SHAb, tmpvar_19);
  mediump vec4 outDiffuseOcclusion_21;
  mediump vec4 outNormal_22;
  mediump vec4 emission_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = tmpvar_5;
  outDiffuseOcclusion_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_22 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = vec3(0.0, 0.0, 0.0);
  emission_23 = tmpvar_26;
  emission_23.xyz = (emission_23.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_20)));
  outDiffuse_1.xyz = outDiffuseOcclusion_21.xyz;
  outEmission_2.w = emission_23.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_23.xyz));
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_22;
  _glesFragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_14;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_23;
  tmpvar_23 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_24;
  tmpvar_24[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_24[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_24[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_25;
  tmpvar_25 = (normalize((tmpvar_23 * tmpvar_24)) * sqrt(dot (tmpvar_23, tmpvar_23)));
  FinalPosition_19 = tmpvar_25;
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_26;
    tmpvar_26 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_27;
    isBestWind_27 = (tmpvar_20 == 4.0);
    bool bLeaf2_28;
    bLeaf2_28 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_29;
    vPos_29 = tmpvar_25;
    highp vec3 vDirection_30;
    vDirection_30 = tmpvar_2;
    highp float tmpvar_31;
    if (bLeaf2_28) {
      tmpvar_31 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_32;
    if (bLeaf2_28) {
      tmpvar_32 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_32 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_33;
    highp vec4 tmpvar_34;
    tmpvar_34.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_34.x = (tmpvar_31 + tmpvar_26);
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    vPos_33 = (tmpvar_25 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_32 * (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_30 = tmpvar_2;
    vPos_29 = vPos_33;
    if (isBestWind_27) {
      highp vec3 tmpvar_36;
      tmpvar_36 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_37;
      if (bLeaf2_28) {
        tmpvar_37 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_38;
      if (bLeaf2_28) {
        tmpvar_38 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_39;
      if (bLeaf2_28) {
        tmpvar_39 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_40;
      if (bLeaf2_28) {
        tmpvar_40 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_40 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_41;
      if (bLeaf2_28) {
        tmpvar_41 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_41 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_42;
      if (bLeaf2_28) {
        tmpvar_42 = bool(1);
      } else {
        tmpvar_42 = bool(1);
      };
      highp float fTwitch_43;
      highp vec3 vAxis_44;
      highp vec3 tmpvar_45;
      tmpvar_45 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_46;
      tmpvar_46 = ((tmpvar_45.x + tmpvar_45.y) + tmpvar_45.z);
      highp vec4 tmpvar_47;
      tmpvar_47.x = (tmpvar_37 + tmpvar_46);
      tmpvar_47.y = ((tmpvar_37 * 0.75) - tmpvar_46);
      tmpvar_47.z = ((tmpvar_37 * 0.01) + tmpvar_46);
      tmpvar_47.w = (tmpvar_37 + tmpvar_46);
      highp vec4 tmpvar_48;
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      tmpvar_48 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = sqrt(dot (vPos_33, vPos_33));
      highp float fAngle_51;
      fAngle_51 = ((_glesMultiTexCoord2.x * tmpvar_39) * (tmpvar_48.x + (tmpvar_48.y * tmpvar_48.y)));
      highp vec2 vSinCos_52;
      vSinCos_52.x = sin(fAngle_51);
      vSinCos_52.y = cos(fAngle_51);
      highp float tmpvar_53;
      tmpvar_53 = (1.0 - vSinCos_52.y);
      highp mat3 tmpvar_54;
      tmpvar_54[0].x = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.x) + vSinCos_52.y);
      tmpvar_54[0].y = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.y) + (vSinCos_52.x * tmpvar_36.z));
      tmpvar_54[0].z = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.z) - (vSinCos_52.x * tmpvar_36.y));
      tmpvar_54[1].x = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.y) - (vSinCos_52.x * tmpvar_36.z));
      tmpvar_54[1].y = (((tmpvar_53 * tmpvar_36.y) * tmpvar_36.y) + vSinCos_52.y);
      tmpvar_54[1].z = (((tmpvar_53 * tmpvar_36.y) * tmpvar_36.z) + (vSinCos_52.x * tmpvar_36.x));
      tmpvar_54[2].x = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.z) + (vSinCos_52.x * tmpvar_36.y));
      tmpvar_54[2].y = (((tmpvar_53 * tmpvar_36.y) * tmpvar_36.z) - (vSinCos_52.x * tmpvar_36.x));
      tmpvar_54[2].z = (((tmpvar_53 * tmpvar_36.z) * tmpvar_36.z) + vSinCos_52.y);
      highp vec3 tmpvar_55;
      tmpvar_55 = ((tmpvar_36.yzx * vRotatedWindVector_18.zxy) - (tmpvar_36.zxy * vRotatedWindVector_18.yzx));
      vAxis_44.xz = tmpvar_55.xz;
      highp float tmpvar_56;
      tmpvar_56 = clamp (dot (vRotatedWindVector_18, tmpvar_36), -1.0, 1.0);
      vAxis_44.y = (tmpvar_55.y + tmpvar_56);
      highp vec3 tmpvar_57;
      tmpvar_57 = normalize(vAxis_44);
      vAxis_44 = tmpvar_57;
      highp float tmpvar_58;
      tmpvar_58 = (1.570796 - (sign(tmpvar_56) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_56))) * (1.570796 + (abs(tmpvar_56) * (-0.2146018 + 
          (abs(tmpvar_56) * (0.08656672 + (abs(tmpvar_56) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_59;
      tmpvar_59 = (tmpvar_48.y - (tmpvar_48.x * tmpvar_48.x));
      fTwitch_43 = 0.0;
      if (tmpvar_42) {
        highp float fTime_60;
        fTime_60 = (tmpvar_41.z + tmpvar_46);
        highp vec4 tmpvar_61;
        tmpvar_61.zw = vec2(0.0, 0.0);
        tmpvar_61.x = fTime_60;
        tmpvar_61.y = (0.87 * fTime_60);
        highp vec4 tmpvar_62;
        highp vec4 tmpvar_63;
        tmpvar_63 = abs(((
          fract((tmpvar_61 + 0.5))
         * 2.0) - 1.0));
        tmpvar_62 = (((
          (tmpvar_63 * tmpvar_63)
         * 
          (3.0 - (2.0 * tmpvar_63))
        ) - 0.5) * 2.0);
        fTwitch_43 = (tmpvar_41.x * pow (clamp (
          ((((tmpvar_62.x * tmpvar_62.y) * tmpvar_62.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_41.y));
      };
      highp float fAngle_64;
      fAngle_64 = (_glesMultiTexCoord2.x * ((
        (tmpvar_58 * tmpvar_40)
       + 
        (tmpvar_59 * tmpvar_38)
      ) + fTwitch_43));
      highp vec2 vSinCos_65;
      vSinCos_65.x = sin(fAngle_64);
      vSinCos_65.y = cos(fAngle_64);
      highp float tmpvar_66;
      tmpvar_66 = (1.0 - vSinCos_65.y);
      highp mat3 tmpvar_67;
      tmpvar_67[0].x = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.x) + vSinCos_65.y);
      tmpvar_67[0].y = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.y) + (vSinCos_65.x * tmpvar_57.z));
      tmpvar_67[0].z = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.z) - (vSinCos_65.x * tmpvar_57.y));
      tmpvar_67[1].x = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.y) - (vSinCos_65.x * tmpvar_57.z));
      tmpvar_67[1].y = (((tmpvar_66 * tmpvar_57.y) * tmpvar_57.y) + vSinCos_65.y);
      tmpvar_67[1].z = (((tmpvar_66 * tmpvar_57.y) * tmpvar_57.z) + (vSinCos_65.x * tmpvar_57.x));
      tmpvar_67[2].x = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.z) + (vSinCos_65.x * tmpvar_57.y));
      tmpvar_67[2].y = (((tmpvar_66 * tmpvar_57.y) * tmpvar_57.z) - (vSinCos_65.x * tmpvar_57.x));
      tmpvar_67[2].z = (((tmpvar_66 * tmpvar_57.z) * tmpvar_57.z) + vSinCos_65.y);
      highp mat3 tmpvar_68;
      tmpvar_68 = (tmpvar_54 * tmpvar_67);
      vDirection_30 = (tmpvar_68 * _glesNormal);
      vPos_29 = (normalize((tmpvar_68 * vPos_33)) * tmpvar_50);
    };
    tmpvar_16 = vDirection_30;
    FinalPosition_19 = vPos_29;
  };
  highp vec3 tmpvar_69;
  tmpvar_69 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_69;
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_70;
    vPos_70 = tmpvar_69;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_71;
      vPos_71 = tmpvar_69;
      highp float fAdherenceScale_72;
      highp vec3 tmpvar_73;
      tmpvar_73 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_74;
      tmpvar_74 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_75;
      highp float fOscillation_76;
      fOscillation_76 = 1.0;
      highp float fAmount_77;
      highp float fTarget_78;
      highp vec4 tmpvar_79;
      tmpvar_79.x = (tmpvar_74 + _glesMultiTexCoord0.w);
      tmpvar_79.y = ((tmpvar_74 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_79.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_74 + _glesMultiTexCoord0.w));
      tmpvar_79.w = ((tmpvar_74 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      vOscillations_75 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      highp float tmpvar_81;
      tmpvar_81 = (vOscillations_75.y * vOscillations_75.z);
      fTarget_78 = 1.0;
      fAmount_77 = tmpvar_81;
      if ((tmpvar_81 < 0.0)) {
        fTarget_78 = -1.0;
        fAmount_77 = -(tmpvar_81);
      };
      fOscillation_76 = (((
        (mix (mix (tmpvar_81, fTarget_78, fAmount_77), fTarget_78, fAmount_77) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_75.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_75.w * _ST_WindBranchWhip.x)));
      vPos_71 = (tmpvar_69 + ((tmpvar_73 * fOscillation_76) * _ST_WindBranch.y));
      highp vec4 tmpvar_82;
      tmpvar_82.zw = vec2(0.0, 0.0);
      tmpvar_82.x = ((tmpvar_74 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_82.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_83;
      highp vec4 tmpvar_84;
      tmpvar_84 = abs(((
        fract((tmpvar_82 + 0.5))
       * 2.0) - 1.0));
      tmpvar_83 = (((
        (tmpvar_84 * tmpvar_84)
       * 
        (3.0 - (2.0 * tmpvar_84))
      ) - 0.5) * 2.0);
      fAdherenceScale_72 = (1.0 - ((
        ((tmpvar_83.x * tmpvar_83.y) * tmpvar_83.x)
       * tmpvar_83.y) * _ST_WindTurbulences.x));
      fAdherenceScale_72 = (fAdherenceScale_72 + ((vOscillations_75.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_71 = (vPos_71 + ((
        ((vRotatedBranchAnchor_17 - vPos_71) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_72) * _glesMultiTexCoord0.z));
      vPos_70 = vPos_71;
    } else {
      highp vec3 vPos_85;
      vPos_85 = vPos_70;
      highp vec3 tmpvar_86;
      tmpvar_86 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_87;
      tmpvar_87 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_88;
      highp float fAmount_89;
      highp float fTarget_90;
      highp vec4 tmpvar_91;
      tmpvar_91.w = 0.0;
      tmpvar_91.x = (tmpvar_87 + _glesMultiTexCoord0.w);
      tmpvar_91.y = ((tmpvar_87 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_91.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_87 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_92;
      tmpvar_92 = abs(((
        fract((tmpvar_91 + 0.5))
       * 2.0) - 1.0));
      vOscillations_88 = (((
        (tmpvar_92 * tmpvar_92)
       * 
        (3.0 - (2.0 * tmpvar_92))
      ) - 0.5) * 2.0);
      highp float tmpvar_93;
      tmpvar_93 = (vOscillations_88.y * vOscillations_88.z);
      fTarget_90 = 1.0;
      fAmount_89 = tmpvar_93;
      if ((tmpvar_93 < 0.0)) {
        fTarget_90 = -1.0;
        fAmount_89 = -(tmpvar_93);
      };
      vPos_85 = (vPos_70 + ((tmpvar_86 * 
        (((mix (
          mix (tmpvar_93, fTarget_90, fAmount_89)
        , fTarget_90, fAmount_89) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_88.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_70 = vPos_85;
    };
    FinalPosition_19 = vPos_70;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_94;
    vPos_94 = FinalPosition_19;
    highp float fAdjust_95;
    highp float fLength_96;
    fLength_96 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_97;
    tmpvar_97 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_95 = tmpvar_97;
    if ((tmpvar_97 != 0.0)) {
      fAdjust_95 = pow (tmpvar_97, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_98;
    tmpvar_98.zw = vec2(0.0, 0.0);
    tmpvar_98.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_98.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_99;
    highp vec4 tmpvar_100;
    tmpvar_100 = abs(((
      fract((tmpvar_98 + 0.5))
     * 2.0) - 1.0));
    tmpvar_99 = (((
      (tmpvar_100 * tmpvar_100)
     * 
      (3.0 - (2.0 * tmpvar_100))
    ) - 0.5) * 2.0);
    vPos_94.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_99.x + (tmpvar_99.y * tmpvar_99.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_95)));
    vPos_94 = (normalize(vPos_94) * fLength_96);
    FinalPosition_19 = vPos_94;
  };
  tmpvar_15.xyz = FinalPosition_19;
  highp vec4 tmpvar_101;
  tmpvar_101 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_102;
  highp vec4 tmpvar_103;
  tmpvar_103 = (tmpvar_101 * 0.5);
  highp vec2 tmpvar_104;
  tmpvar_104.x = tmpvar_103.x;
  tmpvar_104.y = (tmpvar_103.y * _ProjectionParams.x);
  o_102.xy = (tmpvar_104 + tmpvar_103.w);
  o_102.zw = tmpvar_101.zw;
  highp vec3 tmpvar_105;
  tmpvar_105 = o_102.xyw;
  tmpvar_9 = tmpvar_105;
  highp vec2 tmpvar_106;
  tmpvar_106 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_106;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_107;
  v_107.x = _World2Object[0].x;
  v_107.y = _World2Object[1].x;
  v_107.z = _World2Object[2].x;
  v_107.w = _World2Object[3].x;
  highp vec4 v_108;
  v_108.x = _World2Object[0].y;
  v_108.y = _World2Object[1].y;
  v_108.z = _World2Object[2].y;
  v_108.w = _World2Object[3].y;
  highp vec4 v_109;
  v_109.x = _World2Object[0].z;
  v_109.y = _World2Object[1].z;
  v_109.z = _World2Object[2].z;
  v_109.w = _World2Object[3].z;
  highp vec3 tmpvar_110;
  tmpvar_110 = normalize(((
    (v_107.xyz * tmpvar_16.x)
   + 
    (v_108.xyz * tmpvar_16.y)
  ) + (v_109.xyz * tmpvar_16.z)));
  worldNormal_3 = tmpvar_110;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_111;
  tmpvar_111.w = 1.0;
  tmpvar_111.xyz = worldNormal_3;
  mediump vec4 normal_112;
  normal_112 = tmpvar_111;
  mediump vec3 x2_113;
  mediump vec4 tmpvar_114;
  tmpvar_114 = (normal_112.xyzz * normal_112.yzzx);
  x2_113.x = dot (unity_SHBr, tmpvar_114);
  x2_113.y = dot (unity_SHBg, tmpvar_114);
  x2_113.z = dot (unity_SHBb, tmpvar_114);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_113 + (unity_SHC.xyz * (
    (normal_112.x * normal_112.x)
   - 
    (normal_112.y * normal_112.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_7.x = tmpvar_8.x;
  mediump float tmpvar_9;
  tmpvar_9 = fract(tmpvar_8.y);
  highp float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * 0.0625) + unity_LODFade.y);
  projUV_7.y = tmpvar_10;
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_6.w * _Color.w);
  tmpvar_5 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_5 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_6.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_6.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_6.x, max (diffuseColor_6.y, diffuseColor_6.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_16;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_2;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_17;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  mediump vec4 outDiffuseOcclusion_20;
  mediump vec4 outNormal_21;
  mediump vec4 emission_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = tmpvar_4;
  outDiffuseOcclusion_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  emission_22 = tmpvar_25;
  emission_22.xyz = (emission_22.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_19)));
  outDiffuse_1.xyz = outDiffuseOcclusion_20.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_21;
  gl_FragData[3] = emission_22;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD6;
out mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_14;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_23;
  tmpvar_23 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_24;
  tmpvar_24[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_24[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_24[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_25;
  tmpvar_25 = (normalize((tmpvar_23 * tmpvar_24)) * sqrt(dot (tmpvar_23, tmpvar_23)));
  FinalPosition_19 = tmpvar_25;
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_26;
    tmpvar_26 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_27;
    isBestWind_27 = (tmpvar_20 == 4.0);
    bool bLeaf2_28;
    bLeaf2_28 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_29;
    vPos_29 = tmpvar_25;
    highp vec3 vDirection_30;
    vDirection_30 = tmpvar_2;
    highp float tmpvar_31;
    if (bLeaf2_28) {
      tmpvar_31 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_32;
    if (bLeaf2_28) {
      tmpvar_32 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_32 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_33;
    highp vec4 tmpvar_34;
    tmpvar_34.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_34.x = (tmpvar_31 + tmpvar_26);
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    vPos_33 = (tmpvar_25 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_32 * (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_30 = tmpvar_2;
    vPos_29 = vPos_33;
    if (isBestWind_27) {
      highp vec3 tmpvar_36;
      tmpvar_36 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_37;
      if (bLeaf2_28) {
        tmpvar_37 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_38;
      if (bLeaf2_28) {
        tmpvar_38 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_39;
      if (bLeaf2_28) {
        tmpvar_39 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_40;
      if (bLeaf2_28) {
        tmpvar_40 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_40 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_41;
      if (bLeaf2_28) {
        tmpvar_41 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_41 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_42;
      if (bLeaf2_28) {
        tmpvar_42 = bool(1);
      } else {
        tmpvar_42 = bool(1);
      };
      highp float fTwitch_43;
      highp vec3 vAxis_44;
      highp vec3 tmpvar_45;
      tmpvar_45 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_46;
      tmpvar_46 = ((tmpvar_45.x + tmpvar_45.y) + tmpvar_45.z);
      highp vec4 tmpvar_47;
      tmpvar_47.x = (tmpvar_37 + tmpvar_46);
      tmpvar_47.y = ((tmpvar_37 * 0.75) - tmpvar_46);
      tmpvar_47.z = ((tmpvar_37 * 0.01) + tmpvar_46);
      tmpvar_47.w = (tmpvar_37 + tmpvar_46);
      highp vec4 tmpvar_48;
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      tmpvar_48 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = sqrt(dot (vPos_33, vPos_33));
      highp float fAngle_51;
      fAngle_51 = ((_glesMultiTexCoord2.x * tmpvar_39) * (tmpvar_48.x + (tmpvar_48.y * tmpvar_48.y)));
      highp vec2 vSinCos_52;
      vSinCos_52.x = sin(fAngle_51);
      vSinCos_52.y = cos(fAngle_51);
      highp float tmpvar_53;
      tmpvar_53 = (1.0 - vSinCos_52.y);
      highp mat3 tmpvar_54;
      tmpvar_54[0].x = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.x) + vSinCos_52.y);
      tmpvar_54[0].y = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.y) + (vSinCos_52.x * tmpvar_36.z));
      tmpvar_54[0].z = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.z) - (vSinCos_52.x * tmpvar_36.y));
      tmpvar_54[1].x = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.y) - (vSinCos_52.x * tmpvar_36.z));
      tmpvar_54[1].y = (((tmpvar_53 * tmpvar_36.y) * tmpvar_36.y) + vSinCos_52.y);
      tmpvar_54[1].z = (((tmpvar_53 * tmpvar_36.y) * tmpvar_36.z) + (vSinCos_52.x * tmpvar_36.x));
      tmpvar_54[2].x = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.z) + (vSinCos_52.x * tmpvar_36.y));
      tmpvar_54[2].y = (((tmpvar_53 * tmpvar_36.y) * tmpvar_36.z) - (vSinCos_52.x * tmpvar_36.x));
      tmpvar_54[2].z = (((tmpvar_53 * tmpvar_36.z) * tmpvar_36.z) + vSinCos_52.y);
      highp vec3 tmpvar_55;
      tmpvar_55 = ((tmpvar_36.yzx * vRotatedWindVector_18.zxy) - (tmpvar_36.zxy * vRotatedWindVector_18.yzx));
      vAxis_44.xz = tmpvar_55.xz;
      highp float tmpvar_56;
      tmpvar_56 = clamp (dot (vRotatedWindVector_18, tmpvar_36), -1.0, 1.0);
      vAxis_44.y = (tmpvar_55.y + tmpvar_56);
      highp vec3 tmpvar_57;
      tmpvar_57 = normalize(vAxis_44);
      vAxis_44 = tmpvar_57;
      highp float tmpvar_58;
      tmpvar_58 = (1.570796 - (sign(tmpvar_56) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_56))) * (1.570796 + (abs(tmpvar_56) * (-0.2146018 + 
          (abs(tmpvar_56) * (0.08656672 + (abs(tmpvar_56) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_59;
      tmpvar_59 = (tmpvar_48.y - (tmpvar_48.x * tmpvar_48.x));
      fTwitch_43 = 0.0;
      if (tmpvar_42) {
        highp float fTime_60;
        fTime_60 = (tmpvar_41.z + tmpvar_46);
        highp vec4 tmpvar_61;
        tmpvar_61.zw = vec2(0.0, 0.0);
        tmpvar_61.x = fTime_60;
        tmpvar_61.y = (0.87 * fTime_60);
        highp vec4 tmpvar_62;
        highp vec4 tmpvar_63;
        tmpvar_63 = abs(((
          fract((tmpvar_61 + 0.5))
         * 2.0) - 1.0));
        tmpvar_62 = (((
          (tmpvar_63 * tmpvar_63)
         * 
          (3.0 - (2.0 * tmpvar_63))
        ) - 0.5) * 2.0);
        fTwitch_43 = (tmpvar_41.x * pow (clamp (
          ((((tmpvar_62.x * tmpvar_62.y) * tmpvar_62.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_41.y));
      };
      highp float fAngle_64;
      fAngle_64 = (_glesMultiTexCoord2.x * ((
        (tmpvar_58 * tmpvar_40)
       + 
        (tmpvar_59 * tmpvar_38)
      ) + fTwitch_43));
      highp vec2 vSinCos_65;
      vSinCos_65.x = sin(fAngle_64);
      vSinCos_65.y = cos(fAngle_64);
      highp float tmpvar_66;
      tmpvar_66 = (1.0 - vSinCos_65.y);
      highp mat3 tmpvar_67;
      tmpvar_67[0].x = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.x) + vSinCos_65.y);
      tmpvar_67[0].y = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.y) + (vSinCos_65.x * tmpvar_57.z));
      tmpvar_67[0].z = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.z) - (vSinCos_65.x * tmpvar_57.y));
      tmpvar_67[1].x = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.y) - (vSinCos_65.x * tmpvar_57.z));
      tmpvar_67[1].y = (((tmpvar_66 * tmpvar_57.y) * tmpvar_57.y) + vSinCos_65.y);
      tmpvar_67[1].z = (((tmpvar_66 * tmpvar_57.y) * tmpvar_57.z) + (vSinCos_65.x * tmpvar_57.x));
      tmpvar_67[2].x = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.z) + (vSinCos_65.x * tmpvar_57.y));
      tmpvar_67[2].y = (((tmpvar_66 * tmpvar_57.y) * tmpvar_57.z) - (vSinCos_65.x * tmpvar_57.x));
      tmpvar_67[2].z = (((tmpvar_66 * tmpvar_57.z) * tmpvar_57.z) + vSinCos_65.y);
      highp mat3 tmpvar_68;
      tmpvar_68 = (tmpvar_54 * tmpvar_67);
      vDirection_30 = (tmpvar_68 * _glesNormal);
      vPos_29 = (normalize((tmpvar_68 * vPos_33)) * tmpvar_50);
    };
    tmpvar_16 = vDirection_30;
    FinalPosition_19 = vPos_29;
  };
  highp vec3 tmpvar_69;
  tmpvar_69 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_69;
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_70;
    vPos_70 = tmpvar_69;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_71;
      vPos_71 = tmpvar_69;
      highp float fAdherenceScale_72;
      highp vec3 tmpvar_73;
      tmpvar_73 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_74;
      tmpvar_74 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_75;
      highp float fOscillation_76;
      fOscillation_76 = 1.0;
      highp float fAmount_77;
      highp float fTarget_78;
      highp vec4 tmpvar_79;
      tmpvar_79.x = (tmpvar_74 + _glesMultiTexCoord0.w);
      tmpvar_79.y = ((tmpvar_74 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_79.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_74 + _glesMultiTexCoord0.w));
      tmpvar_79.w = ((tmpvar_74 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      vOscillations_75 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      highp float tmpvar_81;
      tmpvar_81 = (vOscillations_75.y * vOscillations_75.z);
      fTarget_78 = 1.0;
      fAmount_77 = tmpvar_81;
      if ((tmpvar_81 < 0.0)) {
        fTarget_78 = -1.0;
        fAmount_77 = -(tmpvar_81);
      };
      fOscillation_76 = (((
        (mix (mix (tmpvar_81, fTarget_78, fAmount_77), fTarget_78, fAmount_77) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_75.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_75.w * _ST_WindBranchWhip.x)));
      vPos_71 = (tmpvar_69 + ((tmpvar_73 * fOscillation_76) * _ST_WindBranch.y));
      highp vec4 tmpvar_82;
      tmpvar_82.zw = vec2(0.0, 0.0);
      tmpvar_82.x = ((tmpvar_74 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_82.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_83;
      highp vec4 tmpvar_84;
      tmpvar_84 = abs(((
        fract((tmpvar_82 + 0.5))
       * 2.0) - 1.0));
      tmpvar_83 = (((
        (tmpvar_84 * tmpvar_84)
       * 
        (3.0 - (2.0 * tmpvar_84))
      ) - 0.5) * 2.0);
      fAdherenceScale_72 = (1.0 - ((
        ((tmpvar_83.x * tmpvar_83.y) * tmpvar_83.x)
       * tmpvar_83.y) * _ST_WindTurbulences.x));
      fAdherenceScale_72 = (fAdherenceScale_72 + ((vOscillations_75.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_71 = (vPos_71 + ((
        ((vRotatedBranchAnchor_17 - vPos_71) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_72) * _glesMultiTexCoord0.z));
      vPos_70 = vPos_71;
    } else {
      highp vec3 vPos_85;
      vPos_85 = vPos_70;
      highp vec3 tmpvar_86;
      tmpvar_86 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_87;
      tmpvar_87 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_88;
      highp float fAmount_89;
      highp float fTarget_90;
      highp vec4 tmpvar_91;
      tmpvar_91.w = 0.0;
      tmpvar_91.x = (tmpvar_87 + _glesMultiTexCoord0.w);
      tmpvar_91.y = ((tmpvar_87 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_91.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_87 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_92;
      tmpvar_92 = abs(((
        fract((tmpvar_91 + 0.5))
       * 2.0) - 1.0));
      vOscillations_88 = (((
        (tmpvar_92 * tmpvar_92)
       * 
        (3.0 - (2.0 * tmpvar_92))
      ) - 0.5) * 2.0);
      highp float tmpvar_93;
      tmpvar_93 = (vOscillations_88.y * vOscillations_88.z);
      fTarget_90 = 1.0;
      fAmount_89 = tmpvar_93;
      if ((tmpvar_93 < 0.0)) {
        fTarget_90 = -1.0;
        fAmount_89 = -(tmpvar_93);
      };
      vPos_85 = (vPos_70 + ((tmpvar_86 * 
        (((mix (
          mix (tmpvar_93, fTarget_90, fAmount_89)
        , fTarget_90, fAmount_89) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_88.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_70 = vPos_85;
    };
    FinalPosition_19 = vPos_70;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_94;
    vPos_94 = FinalPosition_19;
    highp float fAdjust_95;
    highp float fLength_96;
    fLength_96 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_97;
    tmpvar_97 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_95 = tmpvar_97;
    if ((tmpvar_97 != 0.0)) {
      fAdjust_95 = pow (tmpvar_97, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_98;
    tmpvar_98.zw = vec2(0.0, 0.0);
    tmpvar_98.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_98.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_99;
    highp vec4 tmpvar_100;
    tmpvar_100 = abs(((
      fract((tmpvar_98 + 0.5))
     * 2.0) - 1.0));
    tmpvar_99 = (((
      (tmpvar_100 * tmpvar_100)
     * 
      (3.0 - (2.0 * tmpvar_100))
    ) - 0.5) * 2.0);
    vPos_94.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_99.x + (tmpvar_99.y * tmpvar_99.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_95)));
    vPos_94 = (normalize(vPos_94) * fLength_96);
    FinalPosition_19 = vPos_94;
  };
  tmpvar_15.xyz = FinalPosition_19;
  highp vec4 tmpvar_101;
  tmpvar_101 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_102;
  highp vec4 tmpvar_103;
  tmpvar_103 = (tmpvar_101 * 0.5);
  highp vec2 tmpvar_104;
  tmpvar_104.x = tmpvar_103.x;
  tmpvar_104.y = (tmpvar_103.y * _ProjectionParams.x);
  o_102.xy = (tmpvar_104 + tmpvar_103.w);
  o_102.zw = tmpvar_101.zw;
  highp vec3 tmpvar_105;
  tmpvar_105 = o_102.xyw;
  tmpvar_9 = tmpvar_105;
  highp vec2 tmpvar_106;
  tmpvar_106 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_106;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_107;
  v_107.x = _World2Object[0].x;
  v_107.y = _World2Object[1].x;
  v_107.z = _World2Object[2].x;
  v_107.w = _World2Object[3].x;
  highp vec4 v_108;
  v_108.x = _World2Object[0].y;
  v_108.y = _World2Object[1].y;
  v_108.z = _World2Object[2].y;
  v_108.w = _World2Object[3].y;
  highp vec4 v_109;
  v_109.x = _World2Object[0].z;
  v_109.y = _World2Object[1].z;
  v_109.z = _World2Object[2].z;
  v_109.w = _World2Object[3].z;
  highp vec3 tmpvar_110;
  tmpvar_110 = normalize(((
    (v_107.xyz * tmpvar_16.x)
   + 
    (v_108.xyz * tmpvar_16.y)
  ) + (v_109.xyz * tmpvar_16.z)));
  worldNormal_3 = tmpvar_110;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_111;
  tmpvar_111.w = 1.0;
  tmpvar_111.xyz = worldNormal_3;
  mediump vec4 normal_112;
  normal_112 = tmpvar_111;
  mediump vec3 x2_113;
  mediump vec4 tmpvar_114;
  tmpvar_114 = (normal_112.xyzz * normal_112.yzzx);
  x2_113.x = dot (unity_SHBr, tmpvar_114);
  x2_113.y = dot (unity_SHBg, tmpvar_114);
  x2_113.z = dot (unity_SHBb, tmpvar_114);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_113 + (unity_SHC.xyz * (
    (normal_112.x * normal_112.x)
   - 
    (normal_112.y * normal_112.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_7.x = tmpvar_8.x;
  mediump float tmpvar_9;
  tmpvar_9 = fract(tmpvar_8.y);
  highp float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * 0.0625) + unity_LODFade.y);
  projUV_7.y = tmpvar_10;
  lowp float x_11;
  x_11 = (texture (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_6.w * _Color.w);
  tmpvar_5 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_5 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_6.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_6.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_6.x, max (diffuseColor_6.y, diffuseColor_6.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_16;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_2;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_17;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  mediump vec4 outDiffuseOcclusion_20;
  mediump vec4 outNormal_21;
  mediump vec4 emission_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = tmpvar_4;
  outDiffuseOcclusion_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  emission_22 = tmpvar_25;
  emission_22.xyz = (emission_22.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_19)));
  outDiffuse_1.xyz = outDiffuseOcclusion_20.xyz;
  outDiffuse_1.w = 1.0;
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_21;
  _glesFragData[3] = emission_22;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_11;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_15;
  highp vec4 tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_16 = tmpvar_1;
  tmpvar_17 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  FinalPosition_20 = tmpvar_1.xyz;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_24;
  tmpvar_24 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_25;
  tmpvar_25[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_25[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_25[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_26;
  tmpvar_26 = (normalize((tmpvar_24 * tmpvar_25)) * sqrt(dot (tmpvar_24, tmpvar_24)));
  FinalPosition_20 = tmpvar_26;
  if (((tmpvar_21 > 1.0) && (tmpvar_21 < 5.0))) {
    highp float tmpvar_27;
    tmpvar_27 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_28;
    isBestWind_28 = (tmpvar_21 == 4.0);
    bool bLeaf2_29;
    bLeaf2_29 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_30;
    vPos_30 = tmpvar_26;
    highp vec3 vDirection_31;
    vDirection_31 = tmpvar_2;
    highp float tmpvar_32;
    if (bLeaf2_29) {
      tmpvar_32 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_32 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_33;
    if (bLeaf2_29) {
      tmpvar_33 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_33 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_34;
    highp vec4 tmpvar_35;
    tmpvar_35.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_35.x = (tmpvar_32 + tmpvar_27);
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_35 + 0.5))
     * 2.0) - 1.0));
    vPos_34 = (tmpvar_26 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_33 * (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_31 = tmpvar_2;
    vPos_30 = vPos_34;
    if (isBestWind_28) {
      highp vec3 tmpvar_37;
      tmpvar_37 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_38;
      if (bLeaf2_29) {
        tmpvar_38 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_39;
      if (bLeaf2_29) {
        tmpvar_39 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_40;
      if (bLeaf2_29) {
        tmpvar_40 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_40 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_41;
      if (bLeaf2_29) {
        tmpvar_41 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_41 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_42;
      if (bLeaf2_29) {
        tmpvar_42 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_42 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_43;
      if (bLeaf2_29) {
        tmpvar_43 = bool(1);
      } else {
        tmpvar_43 = bool(1);
      };
      highp float fTwitch_44;
      highp vec3 vAxis_45;
      highp vec3 tmpvar_46;
      tmpvar_46 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_47;
      tmpvar_47 = ((tmpvar_46.x + tmpvar_46.y) + tmpvar_46.z);
      highp vec4 tmpvar_48;
      tmpvar_48.x = (tmpvar_38 + tmpvar_47);
      tmpvar_48.y = ((tmpvar_38 * 0.75) - tmpvar_47);
      tmpvar_48.z = ((tmpvar_38 * 0.01) + tmpvar_47);
      tmpvar_48.w = (tmpvar_38 + tmpvar_47);
      highp vec4 tmpvar_49;
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      tmpvar_49 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      highp float tmpvar_51;
      tmpvar_51 = sqrt(dot (vPos_34, vPos_34));
      highp float fAngle_52;
      fAngle_52 = ((_glesMultiTexCoord2.x * tmpvar_40) * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y)));
      highp vec2 vSinCos_53;
      vSinCos_53.x = sin(fAngle_52);
      vSinCos_53.y = cos(fAngle_52);
      highp float tmpvar_54;
      tmpvar_54 = (1.0 - vSinCos_53.y);
      highp mat3 tmpvar_55;
      tmpvar_55[0].x = (((tmpvar_54 * tmpvar_37.x) * tmpvar_37.x) + vSinCos_53.y);
      tmpvar_55[0].y = (((tmpvar_54 * tmpvar_37.x) * tmpvar_37.y) + (vSinCos_53.x * tmpvar_37.z));
      tmpvar_55[0].z = (((tmpvar_54 * tmpvar_37.x) * tmpvar_37.z) - (vSinCos_53.x * tmpvar_37.y));
      tmpvar_55[1].x = (((tmpvar_54 * tmpvar_37.x) * tmpvar_37.y) - (vSinCos_53.x * tmpvar_37.z));
      tmpvar_55[1].y = (((tmpvar_54 * tmpvar_37.y) * tmpvar_37.y) + vSinCos_53.y);
      tmpvar_55[1].z = (((tmpvar_54 * tmpvar_37.y) * tmpvar_37.z) + (vSinCos_53.x * tmpvar_37.x));
      tmpvar_55[2].x = (((tmpvar_54 * tmpvar_37.x) * tmpvar_37.z) + (vSinCos_53.x * tmpvar_37.y));
      tmpvar_55[2].y = (((tmpvar_54 * tmpvar_37.y) * tmpvar_37.z) - (vSinCos_53.x * tmpvar_37.x));
      tmpvar_55[2].z = (((tmpvar_54 * tmpvar_37.z) * tmpvar_37.z) + vSinCos_53.y);
      highp vec3 tmpvar_56;
      tmpvar_56 = ((tmpvar_37.yzx * vRotatedWindVector_19.zxy) - (tmpvar_37.zxy * vRotatedWindVector_19.yzx));
      vAxis_45.xz = tmpvar_56.xz;
      highp float tmpvar_57;
      tmpvar_57 = clamp (dot (vRotatedWindVector_19, tmpvar_37), -1.0, 1.0);
      vAxis_45.y = (tmpvar_56.y + tmpvar_57);
      highp vec3 tmpvar_58;
      tmpvar_58 = normalize(vAxis_45);
      vAxis_45 = tmpvar_58;
      highp float tmpvar_59;
      tmpvar_59 = (1.570796 - (sign(tmpvar_57) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_57))) * (1.570796 + (abs(tmpvar_57) * (-0.2146018 + 
          (abs(tmpvar_57) * (0.08656672 + (abs(tmpvar_57) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_60;
      tmpvar_60 = (tmpvar_49.y - (tmpvar_49.x * tmpvar_49.x));
      fTwitch_44 = 0.0;
      if (tmpvar_43) {
        highp float fTime_61;
        fTime_61 = (tmpvar_42.z + tmpvar_47);
        highp vec4 tmpvar_62;
        tmpvar_62.zw = vec2(0.0, 0.0);
        tmpvar_62.x = fTime_61;
        tmpvar_62.y = (0.87 * fTime_61);
        highp vec4 tmpvar_63;
        highp vec4 tmpvar_64;
        tmpvar_64 = abs(((
          fract((tmpvar_62 + 0.5))
         * 2.0) - 1.0));
        tmpvar_63 = (((
          (tmpvar_64 * tmpvar_64)
         * 
          (3.0 - (2.0 * tmpvar_64))
        ) - 0.5) * 2.0);
        fTwitch_44 = (tmpvar_42.x * pow (clamp (
          ((((tmpvar_63.x * tmpvar_63.y) * tmpvar_63.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_42.y));
      };
      highp float fAngle_65;
      fAngle_65 = (_glesMultiTexCoord2.x * ((
        (tmpvar_59 * tmpvar_41)
       + 
        (tmpvar_60 * tmpvar_39)
      ) + fTwitch_44));
      highp vec2 vSinCos_66;
      vSinCos_66.x = sin(fAngle_65);
      vSinCos_66.y = cos(fAngle_65);
      highp float tmpvar_67;
      tmpvar_67 = (1.0 - vSinCos_66.y);
      highp mat3 tmpvar_68;
      tmpvar_68[0].x = (((tmpvar_67 * tmpvar_58.x) * tmpvar_58.x) + vSinCos_66.y);
      tmpvar_68[0].y = (((tmpvar_67 * tmpvar_58.x) * tmpvar_58.y) + (vSinCos_66.x * tmpvar_58.z));
      tmpvar_68[0].z = (((tmpvar_67 * tmpvar_58.x) * tmpvar_58.z) - (vSinCos_66.x * tmpvar_58.y));
      tmpvar_68[1].x = (((tmpvar_67 * tmpvar_58.x) * tmpvar_58.y) - (vSinCos_66.x * tmpvar_58.z));
      tmpvar_68[1].y = (((tmpvar_67 * tmpvar_58.y) * tmpvar_58.y) + vSinCos_66.y);
      tmpvar_68[1].z = (((tmpvar_67 * tmpvar_58.y) * tmpvar_58.z) + (vSinCos_66.x * tmpvar_58.x));
      tmpvar_68[2].x = (((tmpvar_67 * tmpvar_58.x) * tmpvar_58.z) + (vSinCos_66.x * tmpvar_58.y));
      tmpvar_68[2].y = (((tmpvar_67 * tmpvar_58.y) * tmpvar_58.z) - (vSinCos_66.x * tmpvar_58.x));
      tmpvar_68[2].z = (((tmpvar_67 * tmpvar_58.z) * tmpvar_58.z) + vSinCos_66.y);
      highp mat3 tmpvar_69;
      tmpvar_69 = (tmpvar_55 * tmpvar_68);
      vDirection_31 = (tmpvar_69 * _glesNormal);
      vPos_30 = (normalize((tmpvar_69 * vPos_34)) * tmpvar_51);
    };
    tmpvar_17 = vDirection_31;
    FinalPosition_20 = vPos_30;
  };
  highp vec3 tmpvar_70;
  tmpvar_70 = (FinalPosition_20 + _glesMultiTexCoord1.xyz);
  FinalPosition_20 = tmpvar_70;
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_71;
    vPos_71 = tmpvar_70;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_72;
      vPos_72 = tmpvar_70;
      highp float fAdherenceScale_73;
      highp vec3 tmpvar_74;
      tmpvar_74 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_75;
      tmpvar_75 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_76;
      highp float fOscillation_77;
      fOscillation_77 = 1.0;
      highp float fAmount_78;
      highp float fTarget_79;
      highp vec4 tmpvar_80;
      tmpvar_80.x = (tmpvar_75 + _glesMultiTexCoord0.w);
      tmpvar_80.y = ((tmpvar_75 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_80.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_75 + _glesMultiTexCoord0.w));
      tmpvar_80.w = ((tmpvar_75 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      vOscillations_76 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      highp float tmpvar_82;
      tmpvar_82 = (vOscillations_76.y * vOscillations_76.z);
      fTarget_79 = 1.0;
      fAmount_78 = tmpvar_82;
      if ((tmpvar_82 < 0.0)) {
        fTarget_79 = -1.0;
        fAmount_78 = -(tmpvar_82);
      };
      fOscillation_77 = (((
        (mix (mix (tmpvar_82, fTarget_79, fAmount_78), fTarget_79, fAmount_78) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_76.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_76.w * _ST_WindBranchWhip.x)));
      vPos_72 = (tmpvar_70 + ((tmpvar_74 * fOscillation_77) * _ST_WindBranch.y));
      highp vec4 tmpvar_83;
      tmpvar_83.zw = vec2(0.0, 0.0);
      tmpvar_83.x = ((tmpvar_75 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_83.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_84;
      highp vec4 tmpvar_85;
      tmpvar_85 = abs(((
        fract((tmpvar_83 + 0.5))
       * 2.0) - 1.0));
      tmpvar_84 = (((
        (tmpvar_85 * tmpvar_85)
       * 
        (3.0 - (2.0 * tmpvar_85))
      ) - 0.5) * 2.0);
      fAdherenceScale_73 = (1.0 - ((
        ((tmpvar_84.x * tmpvar_84.y) * tmpvar_84.x)
       * tmpvar_84.y) * _ST_WindTurbulences.x));
      fAdherenceScale_73 = (fAdherenceScale_73 + ((vOscillations_76.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_72 = (vPos_72 + ((
        ((vRotatedBranchAnchor_18 - vPos_72) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_73) * _glesMultiTexCoord0.z));
      vPos_71 = vPos_72;
    } else {
      highp vec3 vPos_86;
      vPos_86 = vPos_71;
      highp vec3 tmpvar_87;
      tmpvar_87 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_88;
      tmpvar_88 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_89;
      highp float fAmount_90;
      highp float fTarget_91;
      highp vec4 tmpvar_92;
      tmpvar_92.w = 0.0;
      tmpvar_92.x = (tmpvar_88 + _glesMultiTexCoord0.w);
      tmpvar_92.y = ((tmpvar_88 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_92.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_88 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_93;
      tmpvar_93 = abs(((
        fract((tmpvar_92 + 0.5))
       * 2.0) - 1.0));
      vOscillations_89 = (((
        (tmpvar_93 * tmpvar_93)
       * 
        (3.0 - (2.0 * tmpvar_93))
      ) - 0.5) * 2.0);
      highp float tmpvar_94;
      tmpvar_94 = (vOscillations_89.y * vOscillations_89.z);
      fTarget_91 = 1.0;
      fAmount_90 = tmpvar_94;
      if ((tmpvar_94 < 0.0)) {
        fTarget_91 = -1.0;
        fAmount_90 = -(tmpvar_94);
      };
      vPos_86 = (vPos_71 + ((tmpvar_87 * 
        (((mix (
          mix (tmpvar_94, fTarget_91, fAmount_90)
        , fTarget_91, fAmount_90) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_89.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_71 = vPos_86;
    };
    FinalPosition_20 = vPos_71;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_95;
    vPos_95 = FinalPosition_20;
    highp float fAdjust_96;
    highp float fLength_97;
    fLength_97 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_98;
    tmpvar_98 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_96 = tmpvar_98;
    if ((tmpvar_98 != 0.0)) {
      fAdjust_96 = pow (tmpvar_98, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_99;
    tmpvar_99.zw = vec2(0.0, 0.0);
    tmpvar_99.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_99.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_100;
    highp vec4 tmpvar_101;
    tmpvar_101 = abs(((
      fract((tmpvar_99 + 0.5))
     * 2.0) - 1.0));
    tmpvar_100 = (((
      (tmpvar_101 * tmpvar_101)
     * 
      (3.0 - (2.0 * tmpvar_101))
    ) - 0.5) * 2.0);
    vPos_95.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_100.x + (tmpvar_100.y * tmpvar_100.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_96)));
    vPos_95 = (normalize(vPos_95) * fLength_97);
    FinalPosition_20 = vPos_95;
  };
  tmpvar_16.xyz = FinalPosition_20;
  highp vec4 tmpvar_102;
  tmpvar_102 = (glstate_matrix_mvp * tmpvar_16);
  highp vec4 o_103;
  highp vec4 tmpvar_104;
  tmpvar_104 = (tmpvar_102 * 0.5);
  highp vec2 tmpvar_105;
  tmpvar_105.x = tmpvar_104.x;
  tmpvar_105.y = (tmpvar_104.y * _ProjectionParams.x);
  o_103.xy = (tmpvar_105 + tmpvar_104.w);
  o_103.zw = tmpvar_102.zw;
  highp vec3 tmpvar_106;
  tmpvar_106 = o_103.xyw;
  tmpvar_10 = tmpvar_106;
  highp vec2 tmpvar_107;
  tmpvar_107 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_107;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_108;
  tmpvar_108 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_109;
  v_109.x = _World2Object[0].x;
  v_109.y = _World2Object[1].x;
  v_109.z = _World2Object[2].x;
  v_109.w = _World2Object[3].x;
  highp vec4 v_110;
  v_110.x = _World2Object[0].y;
  v_110.y = _World2Object[1].y;
  v_110.z = _World2Object[2].y;
  v_110.w = _World2Object[3].y;
  highp vec4 v_111;
  v_111.x = _World2Object[0].z;
  v_111.y = _World2Object[1].z;
  v_111.z = _World2Object[2].z;
  v_111.w = _World2Object[3].z;
  highp vec3 tmpvar_112;
  tmpvar_112 = normalize(((
    (v_109.xyz * tmpvar_17.x)
   + 
    (v_110.xyz * tmpvar_17.y)
  ) + (v_111.xyz * tmpvar_17.z)));
  worldNormal_5 = tmpvar_112;
  highp mat3 tmpvar_113;
  tmpvar_113[0] = _Object2World[0].xyz;
  tmpvar_113[1] = _Object2World[1].xyz;
  tmpvar_113[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_114;
  tmpvar_114 = normalize((tmpvar_113 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_114;
  lowp vec3 tmpvar_115;
  tmpvar_115 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_116;
  tmpvar_116 = (tmpvar_115 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_116;
  highp vec4 tmpvar_117;
  tmpvar_117.x = worldTangent_4.x;
  tmpvar_117.y = worldBinormal_3.x;
  tmpvar_117.z = worldNormal_5.x;
  tmpvar_117.w = tmpvar_108.x;
  highp vec4 tmpvar_118;
  tmpvar_118.x = worldTangent_4.y;
  tmpvar_118.y = worldBinormal_3.y;
  tmpvar_118.z = worldNormal_5.y;
  tmpvar_118.w = tmpvar_108.y;
  highp vec4 tmpvar_119;
  tmpvar_119.x = worldTangent_4.z;
  tmpvar_119.y = worldBinormal_3.z;
  tmpvar_119.z = worldNormal_5.z;
  tmpvar_119.w = tmpvar_108.z;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_120;
  tmpvar_120.w = 1.0;
  tmpvar_120.xyz = worldNormal_5;
  mediump vec4 normal_121;
  normal_121 = tmpvar_120;
  mediump vec3 x2_122;
  mediump vec4 tmpvar_123;
  tmpvar_123 = (normal_121.xyzz * normal_121.yzzx);
  x2_122.x = dot (unity_SHBr, tmpvar_123);
  x2_122.y = dot (unity_SHBg, tmpvar_123);
  x2_122.z = dot (unity_SHBb, tmpvar_123);
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_117;
  xlv_TEXCOORD1 = tmpvar_118;
  xlv_TEXCOORD2 = tmpvar_119;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD7 = tmpvar_7;
  xlv_TEXCOORD8 = (x2_122 + (unity_SHC.xyz * (
    (normal_121.x * normal_121.x)
   - 
    (normal_121.y * normal_121.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 worldN_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_16 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_17;
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD0.xyz, tmpvar_18);
  worldN_3.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD1.xyz, tmpvar_18);
  worldN_3.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD2.xyz, tmpvar_18);
  worldN_3.z = tmpvar_21;
  mediump vec3 normalWorld_22;
  normalWorld_22 = worldN_3;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_22;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  mediump vec4 outDiffuseOcclusion_25;
  mediump vec4 outNormal_26;
  mediump vec4 emission_27;
  lowp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = tmpvar_5;
  outDiffuseOcclusion_25 = tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = ((worldN_3 * 0.5) + 0.5);
  outNormal_26 = tmpvar_29;
  lowp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = vec3(0.0, 0.0, 0.0);
  emission_27 = tmpvar_30;
  emission_27.xyz = (emission_27.xyz + (tmpvar_5 * (xlv_TEXCOORD8 + x1_24)));
  outDiffuse_1.xyz = outDiffuseOcclusion_25.xyz;
  outEmission_2.w = emission_27.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_27.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_26;
  gl_FragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
in vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD7;
out mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_11;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_15;
  highp vec4 tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_16 = tmpvar_1;
  tmpvar_17 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  FinalPosition_20 = tmpvar_1.xyz;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_24;
  tmpvar_24 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_25;
  tmpvar_25[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_25[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_25[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_26;
  tmpvar_26 = (normalize((tmpvar_24 * tmpvar_25)) * sqrt(dot (tmpvar_24, tmpvar_24)));
  FinalPosition_20 = tmpvar_26;
  if (((tmpvar_21 > 1.0) && (tmpvar_21 < 5.0))) {
    highp float tmpvar_27;
    tmpvar_27 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_28;
    isBestWind_28 = (tmpvar_21 == 4.0);
    bool bLeaf2_29;
    bLeaf2_29 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_30;
    vPos_30 = tmpvar_26;
    highp vec3 vDirection_31;
    vDirection_31 = tmpvar_2;
    highp float tmpvar_32;
    if (bLeaf2_29) {
      tmpvar_32 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_32 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_33;
    if (bLeaf2_29) {
      tmpvar_33 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_33 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_34;
    highp vec4 tmpvar_35;
    tmpvar_35.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_35.x = (tmpvar_32 + tmpvar_27);
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_35 + 0.5))
     * 2.0) - 1.0));
    vPos_34 = (tmpvar_26 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_33 * (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_31 = tmpvar_2;
    vPos_30 = vPos_34;
    if (isBestWind_28) {
      highp vec3 tmpvar_37;
      tmpvar_37 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_38;
      if (bLeaf2_29) {
        tmpvar_38 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_39;
      if (bLeaf2_29) {
        tmpvar_39 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_40;
      if (bLeaf2_29) {
        tmpvar_40 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_40 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_41;
      if (bLeaf2_29) {
        tmpvar_41 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_41 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_42;
      if (bLeaf2_29) {
        tmpvar_42 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_42 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_43;
      if (bLeaf2_29) {
        tmpvar_43 = bool(1);
      } else {
        tmpvar_43 = bool(1);
      };
      highp float fTwitch_44;
      highp vec3 vAxis_45;
      highp vec3 tmpvar_46;
      tmpvar_46 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_47;
      tmpvar_47 = ((tmpvar_46.x + tmpvar_46.y) + tmpvar_46.z);
      highp vec4 tmpvar_48;
      tmpvar_48.x = (tmpvar_38 + tmpvar_47);
      tmpvar_48.y = ((tmpvar_38 * 0.75) - tmpvar_47);
      tmpvar_48.z = ((tmpvar_38 * 0.01) + tmpvar_47);
      tmpvar_48.w = (tmpvar_38 + tmpvar_47);
      highp vec4 tmpvar_49;
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      tmpvar_49 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      highp float tmpvar_51;
      tmpvar_51 = sqrt(dot (vPos_34, vPos_34));
      highp float fAngle_52;
      fAngle_52 = ((_glesMultiTexCoord2.x * tmpvar_40) * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y)));
      highp vec2 vSinCos_53;
      vSinCos_53.x = sin(fAngle_52);
      vSinCos_53.y = cos(fAngle_52);
      highp float tmpvar_54;
      tmpvar_54 = (1.0 - vSinCos_53.y);
      highp mat3 tmpvar_55;
      tmpvar_55[0].x = (((tmpvar_54 * tmpvar_37.x) * tmpvar_37.x) + vSinCos_53.y);
      tmpvar_55[0].y = (((tmpvar_54 * tmpvar_37.x) * tmpvar_37.y) + (vSinCos_53.x * tmpvar_37.z));
      tmpvar_55[0].z = (((tmpvar_54 * tmpvar_37.x) * tmpvar_37.z) - (vSinCos_53.x * tmpvar_37.y));
      tmpvar_55[1].x = (((tmpvar_54 * tmpvar_37.x) * tmpvar_37.y) - (vSinCos_53.x * tmpvar_37.z));
      tmpvar_55[1].y = (((tmpvar_54 * tmpvar_37.y) * tmpvar_37.y) + vSinCos_53.y);
      tmpvar_55[1].z = (((tmpvar_54 * tmpvar_37.y) * tmpvar_37.z) + (vSinCos_53.x * tmpvar_37.x));
      tmpvar_55[2].x = (((tmpvar_54 * tmpvar_37.x) * tmpvar_37.z) + (vSinCos_53.x * tmpvar_37.y));
      tmpvar_55[2].y = (((tmpvar_54 * tmpvar_37.y) * tmpvar_37.z) - (vSinCos_53.x * tmpvar_37.x));
      tmpvar_55[2].z = (((tmpvar_54 * tmpvar_37.z) * tmpvar_37.z) + vSinCos_53.y);
      highp vec3 tmpvar_56;
      tmpvar_56 = ((tmpvar_37.yzx * vRotatedWindVector_19.zxy) - (tmpvar_37.zxy * vRotatedWindVector_19.yzx));
      vAxis_45.xz = tmpvar_56.xz;
      highp float tmpvar_57;
      tmpvar_57 = clamp (dot (vRotatedWindVector_19, tmpvar_37), -1.0, 1.0);
      vAxis_45.y = (tmpvar_56.y + tmpvar_57);
      highp vec3 tmpvar_58;
      tmpvar_58 = normalize(vAxis_45);
      vAxis_45 = tmpvar_58;
      highp float tmpvar_59;
      tmpvar_59 = (1.570796 - (sign(tmpvar_57) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_57))) * (1.570796 + (abs(tmpvar_57) * (-0.2146018 + 
          (abs(tmpvar_57) * (0.08656672 + (abs(tmpvar_57) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_60;
      tmpvar_60 = (tmpvar_49.y - (tmpvar_49.x * tmpvar_49.x));
      fTwitch_44 = 0.0;
      if (tmpvar_43) {
        highp float fTime_61;
        fTime_61 = (tmpvar_42.z + tmpvar_47);
        highp vec4 tmpvar_62;
        tmpvar_62.zw = vec2(0.0, 0.0);
        tmpvar_62.x = fTime_61;
        tmpvar_62.y = (0.87 * fTime_61);
        highp vec4 tmpvar_63;
        highp vec4 tmpvar_64;
        tmpvar_64 = abs(((
          fract((tmpvar_62 + 0.5))
         * 2.0) - 1.0));
        tmpvar_63 = (((
          (tmpvar_64 * tmpvar_64)
         * 
          (3.0 - (2.0 * tmpvar_64))
        ) - 0.5) * 2.0);
        fTwitch_44 = (tmpvar_42.x * pow (clamp (
          ((((tmpvar_63.x * tmpvar_63.y) * tmpvar_63.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_42.y));
      };
      highp float fAngle_65;
      fAngle_65 = (_glesMultiTexCoord2.x * ((
        (tmpvar_59 * tmpvar_41)
       + 
        (tmpvar_60 * tmpvar_39)
      ) + fTwitch_44));
      highp vec2 vSinCos_66;
      vSinCos_66.x = sin(fAngle_65);
      vSinCos_66.y = cos(fAngle_65);
      highp float tmpvar_67;
      tmpvar_67 = (1.0 - vSinCos_66.y);
      highp mat3 tmpvar_68;
      tmpvar_68[0].x = (((tmpvar_67 * tmpvar_58.x) * tmpvar_58.x) + vSinCos_66.y);
      tmpvar_68[0].y = (((tmpvar_67 * tmpvar_58.x) * tmpvar_58.y) + (vSinCos_66.x * tmpvar_58.z));
      tmpvar_68[0].z = (((tmpvar_67 * tmpvar_58.x) * tmpvar_58.z) - (vSinCos_66.x * tmpvar_58.y));
      tmpvar_68[1].x = (((tmpvar_67 * tmpvar_58.x) * tmpvar_58.y) - (vSinCos_66.x * tmpvar_58.z));
      tmpvar_68[1].y = (((tmpvar_67 * tmpvar_58.y) * tmpvar_58.y) + vSinCos_66.y);
      tmpvar_68[1].z = (((tmpvar_67 * tmpvar_58.y) * tmpvar_58.z) + (vSinCos_66.x * tmpvar_58.x));
      tmpvar_68[2].x = (((tmpvar_67 * tmpvar_58.x) * tmpvar_58.z) + (vSinCos_66.x * tmpvar_58.y));
      tmpvar_68[2].y = (((tmpvar_67 * tmpvar_58.y) * tmpvar_58.z) - (vSinCos_66.x * tmpvar_58.x));
      tmpvar_68[2].z = (((tmpvar_67 * tmpvar_58.z) * tmpvar_58.z) + vSinCos_66.y);
      highp mat3 tmpvar_69;
      tmpvar_69 = (tmpvar_55 * tmpvar_68);
      vDirection_31 = (tmpvar_69 * _glesNormal);
      vPos_30 = (normalize((tmpvar_69 * vPos_34)) * tmpvar_51);
    };
    tmpvar_17 = vDirection_31;
    FinalPosition_20 = vPos_30;
  };
  highp vec3 tmpvar_70;
  tmpvar_70 = (FinalPosition_20 + _glesMultiTexCoord1.xyz);
  FinalPosition_20 = tmpvar_70;
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_71;
    vPos_71 = tmpvar_70;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_72;
      vPos_72 = tmpvar_70;
      highp float fAdherenceScale_73;
      highp vec3 tmpvar_74;
      tmpvar_74 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_75;
      tmpvar_75 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_76;
      highp float fOscillation_77;
      fOscillation_77 = 1.0;
      highp float fAmount_78;
      highp float fTarget_79;
      highp vec4 tmpvar_80;
      tmpvar_80.x = (tmpvar_75 + _glesMultiTexCoord0.w);
      tmpvar_80.y = ((tmpvar_75 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_80.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_75 + _glesMultiTexCoord0.w));
      tmpvar_80.w = ((tmpvar_75 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      vOscillations_76 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      highp float tmpvar_82;
      tmpvar_82 = (vOscillations_76.y * vOscillations_76.z);
      fTarget_79 = 1.0;
      fAmount_78 = tmpvar_82;
      if ((tmpvar_82 < 0.0)) {
        fTarget_79 = -1.0;
        fAmount_78 = -(tmpvar_82);
      };
      fOscillation_77 = (((
        (mix (mix (tmpvar_82, fTarget_79, fAmount_78), fTarget_79, fAmount_78) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_76.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_76.w * _ST_WindBranchWhip.x)));
      vPos_72 = (tmpvar_70 + ((tmpvar_74 * fOscillation_77) * _ST_WindBranch.y));
      highp vec4 tmpvar_83;
      tmpvar_83.zw = vec2(0.0, 0.0);
      tmpvar_83.x = ((tmpvar_75 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_83.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_84;
      highp vec4 tmpvar_85;
      tmpvar_85 = abs(((
        fract((tmpvar_83 + 0.5))
       * 2.0) - 1.0));
      tmpvar_84 = (((
        (tmpvar_85 * tmpvar_85)
       * 
        (3.0 - (2.0 * tmpvar_85))
      ) - 0.5) * 2.0);
      fAdherenceScale_73 = (1.0 - ((
        ((tmpvar_84.x * tmpvar_84.y) * tmpvar_84.x)
       * tmpvar_84.y) * _ST_WindTurbulences.x));
      fAdherenceScale_73 = (fAdherenceScale_73 + ((vOscillations_76.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_72 = (vPos_72 + ((
        ((vRotatedBranchAnchor_18 - vPos_72) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_73) * _glesMultiTexCoord0.z));
      vPos_71 = vPos_72;
    } else {
      highp vec3 vPos_86;
      vPos_86 = vPos_71;
      highp vec3 tmpvar_87;
      tmpvar_87 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_88;
      tmpvar_88 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_89;
      highp float fAmount_90;
      highp float fTarget_91;
      highp vec4 tmpvar_92;
      tmpvar_92.w = 0.0;
      tmpvar_92.x = (tmpvar_88 + _glesMultiTexCoord0.w);
      tmpvar_92.y = ((tmpvar_88 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_92.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_88 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_93;
      tmpvar_93 = abs(((
        fract((tmpvar_92 + 0.5))
       * 2.0) - 1.0));
      vOscillations_89 = (((
        (tmpvar_93 * tmpvar_93)
       * 
        (3.0 - (2.0 * tmpvar_93))
      ) - 0.5) * 2.0);
      highp float tmpvar_94;
      tmpvar_94 = (vOscillations_89.y * vOscillations_89.z);
      fTarget_91 = 1.0;
      fAmount_90 = tmpvar_94;
      if ((tmpvar_94 < 0.0)) {
        fTarget_91 = -1.0;
        fAmount_90 = -(tmpvar_94);
      };
      vPos_86 = (vPos_71 + ((tmpvar_87 * 
        (((mix (
          mix (tmpvar_94, fTarget_91, fAmount_90)
        , fTarget_91, fAmount_90) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_89.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_71 = vPos_86;
    };
    FinalPosition_20 = vPos_71;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_95;
    vPos_95 = FinalPosition_20;
    highp float fAdjust_96;
    highp float fLength_97;
    fLength_97 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_98;
    tmpvar_98 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_96 = tmpvar_98;
    if ((tmpvar_98 != 0.0)) {
      fAdjust_96 = pow (tmpvar_98, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_99;
    tmpvar_99.zw = vec2(0.0, 0.0);
    tmpvar_99.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_99.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_100;
    highp vec4 tmpvar_101;
    tmpvar_101 = abs(((
      fract((tmpvar_99 + 0.5))
     * 2.0) - 1.0));
    tmpvar_100 = (((
      (tmpvar_101 * tmpvar_101)
     * 
      (3.0 - (2.0 * tmpvar_101))
    ) - 0.5) * 2.0);
    vPos_95.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_100.x + (tmpvar_100.y * tmpvar_100.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_96)));
    vPos_95 = (normalize(vPos_95) * fLength_97);
    FinalPosition_20 = vPos_95;
  };
  tmpvar_16.xyz = FinalPosition_20;
  highp vec4 tmpvar_102;
  tmpvar_102 = (glstate_matrix_mvp * tmpvar_16);
  highp vec4 o_103;
  highp vec4 tmpvar_104;
  tmpvar_104 = (tmpvar_102 * 0.5);
  highp vec2 tmpvar_105;
  tmpvar_105.x = tmpvar_104.x;
  tmpvar_105.y = (tmpvar_104.y * _ProjectionParams.x);
  o_103.xy = (tmpvar_105 + tmpvar_104.w);
  o_103.zw = tmpvar_102.zw;
  highp vec3 tmpvar_106;
  tmpvar_106 = o_103.xyw;
  tmpvar_10 = tmpvar_106;
  highp vec2 tmpvar_107;
  tmpvar_107 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_107;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_108;
  tmpvar_108 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_109;
  v_109.x = _World2Object[0].x;
  v_109.y = _World2Object[1].x;
  v_109.z = _World2Object[2].x;
  v_109.w = _World2Object[3].x;
  highp vec4 v_110;
  v_110.x = _World2Object[0].y;
  v_110.y = _World2Object[1].y;
  v_110.z = _World2Object[2].y;
  v_110.w = _World2Object[3].y;
  highp vec4 v_111;
  v_111.x = _World2Object[0].z;
  v_111.y = _World2Object[1].z;
  v_111.z = _World2Object[2].z;
  v_111.w = _World2Object[3].z;
  highp vec3 tmpvar_112;
  tmpvar_112 = normalize(((
    (v_109.xyz * tmpvar_17.x)
   + 
    (v_110.xyz * tmpvar_17.y)
  ) + (v_111.xyz * tmpvar_17.z)));
  worldNormal_5 = tmpvar_112;
  highp mat3 tmpvar_113;
  tmpvar_113[0] = _Object2World[0].xyz;
  tmpvar_113[1] = _Object2World[1].xyz;
  tmpvar_113[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_114;
  tmpvar_114 = normalize((tmpvar_113 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_114;
  lowp vec3 tmpvar_115;
  tmpvar_115 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_116;
  tmpvar_116 = (tmpvar_115 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_116;
  highp vec4 tmpvar_117;
  tmpvar_117.x = worldTangent_4.x;
  tmpvar_117.y = worldBinormal_3.x;
  tmpvar_117.z = worldNormal_5.x;
  tmpvar_117.w = tmpvar_108.x;
  highp vec4 tmpvar_118;
  tmpvar_118.x = worldTangent_4.y;
  tmpvar_118.y = worldBinormal_3.y;
  tmpvar_118.z = worldNormal_5.y;
  tmpvar_118.w = tmpvar_108.y;
  highp vec4 tmpvar_119;
  tmpvar_119.x = worldTangent_4.z;
  tmpvar_119.y = worldBinormal_3.z;
  tmpvar_119.z = worldNormal_5.z;
  tmpvar_119.w = tmpvar_108.z;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_120;
  tmpvar_120.w = 1.0;
  tmpvar_120.xyz = worldNormal_5;
  mediump vec4 normal_121;
  normal_121 = tmpvar_120;
  mediump vec3 x2_122;
  mediump vec4 tmpvar_123;
  tmpvar_123 = (normal_121.xyzz * normal_121.yzzx);
  x2_122.x = dot (unity_SHBr, tmpvar_123);
  x2_122.y = dot (unity_SHBg, tmpvar_123);
  x2_122.z = dot (unity_SHBb, tmpvar_123);
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_117;
  xlv_TEXCOORD1 = tmpvar_118;
  xlv_TEXCOORD2 = tmpvar_119;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD7 = tmpvar_7;
  xlv_TEXCOORD8 = (x2_122 + (unity_SHC.xyz * (
    (normal_121.x * normal_121.x)
   - 
    (normal_121.y * normal_121.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 worldN_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_16 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_17;
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD0.xyz, tmpvar_18);
  worldN_3.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD1.xyz, tmpvar_18);
  worldN_3.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD2.xyz, tmpvar_18);
  worldN_3.z = tmpvar_21;
  mediump vec3 normalWorld_22;
  normalWorld_22 = worldN_3;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_22;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  mediump vec4 outDiffuseOcclusion_25;
  mediump vec4 outNormal_26;
  mediump vec4 emission_27;
  lowp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = tmpvar_5;
  outDiffuseOcclusion_25 = tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = ((worldN_3 * 0.5) + 0.5);
  outNormal_26 = tmpvar_29;
  lowp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = vec3(0.0, 0.0, 0.0);
  emission_27 = tmpvar_30;
  emission_27.xyz = (emission_27.xyz + (tmpvar_5 * (xlv_TEXCOORD8 + x1_24)));
  outDiffuse_1.xyz = outDiffuseOcclusion_25.xyz;
  outEmission_2.w = emission_27.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_27.xyz));
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_26;
  _glesFragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_11;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_15;
  highp vec4 tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_16 = tmpvar_1;
  tmpvar_17 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  FinalPosition_20 = tmpvar_1.xyz;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_24;
  tmpvar_24 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_25;
  tmpvar_25[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_25[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_25[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_26;
  tmpvar_26 = (normalize((tmpvar_24 * tmpvar_25)) * sqrt(dot (tmpvar_24, tmpvar_24)));
  FinalPosition_20 = tmpvar_26;
  if (((tmpvar_21 > 1.0) && (tmpvar_21 < 5.0))) {
    highp float tmpvar_27;
    tmpvar_27 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_28;
    isBestWind_28 = (tmpvar_21 == 4.0);
    bool bLeaf2_29;
    bLeaf2_29 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_30;
    vPos_30 = tmpvar_26;
    highp vec3 vDirection_31;
    vDirection_31 = tmpvar_2;
    highp float tmpvar_32;
    if (bLeaf2_29) {
      tmpvar_32 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_32 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_33;
    if (bLeaf2_29) {
      tmpvar_33 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_33 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_34;
    highp vec4 tmpvar_35;
    tmpvar_35.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_35.x = (tmpvar_32 + tmpvar_27);
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_35 + 0.5))
     * 2.0) - 1.0));
    vPos_34 = (tmpvar_26 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_33 * (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_31 = tmpvar_2;
    vPos_30 = vPos_34;
    if (isBestWind_28) {
      highp vec3 tmpvar_37;
      tmpvar_37 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_38;
      if (bLeaf2_29) {
        tmpvar_38 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_39;
      if (bLeaf2_29) {
        tmpvar_39 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_40;
      if (bLeaf2_29) {
        tmpvar_40 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_40 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_41;
      if (bLeaf2_29) {
        tmpvar_41 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_41 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_42;
      if (bLeaf2_29) {
        tmpvar_42 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_42 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_43;
      if (bLeaf2_29) {
        tmpvar_43 = bool(1);
      } else {
        tmpvar_43 = bool(1);
      };
      highp float fTwitch_44;
      highp vec3 vAxis_45;
      highp vec3 tmpvar_46;
      tmpvar_46 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_47;
      tmpvar_47 = ((tmpvar_46.x + tmpvar_46.y) + tmpvar_46.z);
      highp vec4 tmpvar_48;
      tmpvar_48.x = (tmpvar_38 + tmpvar_47);
      tmpvar_48.y = ((tmpvar_38 * 0.75) - tmpvar_47);
      tmpvar_48.z = ((tmpvar_38 * 0.01) + tmpvar_47);
      tmpvar_48.w = (tmpvar_38 + tmpvar_47);
      highp vec4 tmpvar_49;
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      tmpvar_49 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      highp float tmpvar_51;
      tmpvar_51 = sqrt(dot (vPos_34, vPos_34));
      highp float fAngle_52;
      fAngle_52 = ((_glesMultiTexCoord2.x * tmpvar_40) * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y)));
      highp vec2 vSinCos_53;
      vSinCos_53.x = sin(fAngle_52);
      vSinCos_53.y = cos(fAngle_52);
      highp float tmpvar_54;
      tmpvar_54 = (1.0 - vSinCos_53.y);
      highp mat3 tmpvar_55;
      tmpvar_55[0].x = (((tmpvar_54 * tmpvar_37.x) * tmpvar_37.x) + vSinCos_53.y);
      tmpvar_55[0].y = (((tmpvar_54 * tmpvar_37.x) * tmpvar_37.y) + (vSinCos_53.x * tmpvar_37.z));
      tmpvar_55[0].z = (((tmpvar_54 * tmpvar_37.x) * tmpvar_37.z) - (vSinCos_53.x * tmpvar_37.y));
      tmpvar_55[1].x = (((tmpvar_54 * tmpvar_37.x) * tmpvar_37.y) - (vSinCos_53.x * tmpvar_37.z));
      tmpvar_55[1].y = (((tmpvar_54 * tmpvar_37.y) * tmpvar_37.y) + vSinCos_53.y);
      tmpvar_55[1].z = (((tmpvar_54 * tmpvar_37.y) * tmpvar_37.z) + (vSinCos_53.x * tmpvar_37.x));
      tmpvar_55[2].x = (((tmpvar_54 * tmpvar_37.x) * tmpvar_37.z) + (vSinCos_53.x * tmpvar_37.y));
      tmpvar_55[2].y = (((tmpvar_54 * tmpvar_37.y) * tmpvar_37.z) - (vSinCos_53.x * tmpvar_37.x));
      tmpvar_55[2].z = (((tmpvar_54 * tmpvar_37.z) * tmpvar_37.z) + vSinCos_53.y);
      highp vec3 tmpvar_56;
      tmpvar_56 = ((tmpvar_37.yzx * vRotatedWindVector_19.zxy) - (tmpvar_37.zxy * vRotatedWindVector_19.yzx));
      vAxis_45.xz = tmpvar_56.xz;
      highp float tmpvar_57;
      tmpvar_57 = clamp (dot (vRotatedWindVector_19, tmpvar_37), -1.0, 1.0);
      vAxis_45.y = (tmpvar_56.y + tmpvar_57);
      highp vec3 tmpvar_58;
      tmpvar_58 = normalize(vAxis_45);
      vAxis_45 = tmpvar_58;
      highp float tmpvar_59;
      tmpvar_59 = (1.570796 - (sign(tmpvar_57) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_57))) * (1.570796 + (abs(tmpvar_57) * (-0.2146018 + 
          (abs(tmpvar_57) * (0.08656672 + (abs(tmpvar_57) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_60;
      tmpvar_60 = (tmpvar_49.y - (tmpvar_49.x * tmpvar_49.x));
      fTwitch_44 = 0.0;
      if (tmpvar_43) {
        highp float fTime_61;
        fTime_61 = (tmpvar_42.z + tmpvar_47);
        highp vec4 tmpvar_62;
        tmpvar_62.zw = vec2(0.0, 0.0);
        tmpvar_62.x = fTime_61;
        tmpvar_62.y = (0.87 * fTime_61);
        highp vec4 tmpvar_63;
        highp vec4 tmpvar_64;
        tmpvar_64 = abs(((
          fract((tmpvar_62 + 0.5))
         * 2.0) - 1.0));
        tmpvar_63 = (((
          (tmpvar_64 * tmpvar_64)
         * 
          (3.0 - (2.0 * tmpvar_64))
        ) - 0.5) * 2.0);
        fTwitch_44 = (tmpvar_42.x * pow (clamp (
          ((((tmpvar_63.x * tmpvar_63.y) * tmpvar_63.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_42.y));
      };
      highp float fAngle_65;
      fAngle_65 = (_glesMultiTexCoord2.x * ((
        (tmpvar_59 * tmpvar_41)
       + 
        (tmpvar_60 * tmpvar_39)
      ) + fTwitch_44));
      highp vec2 vSinCos_66;
      vSinCos_66.x = sin(fAngle_65);
      vSinCos_66.y = cos(fAngle_65);
      highp float tmpvar_67;
      tmpvar_67 = (1.0 - vSinCos_66.y);
      highp mat3 tmpvar_68;
      tmpvar_68[0].x = (((tmpvar_67 * tmpvar_58.x) * tmpvar_58.x) + vSinCos_66.y);
      tmpvar_68[0].y = (((tmpvar_67 * tmpvar_58.x) * tmpvar_58.y) + (vSinCos_66.x * tmpvar_58.z));
      tmpvar_68[0].z = (((tmpvar_67 * tmpvar_58.x) * tmpvar_58.z) - (vSinCos_66.x * tmpvar_58.y));
      tmpvar_68[1].x = (((tmpvar_67 * tmpvar_58.x) * tmpvar_58.y) - (vSinCos_66.x * tmpvar_58.z));
      tmpvar_68[1].y = (((tmpvar_67 * tmpvar_58.y) * tmpvar_58.y) + vSinCos_66.y);
      tmpvar_68[1].z = (((tmpvar_67 * tmpvar_58.y) * tmpvar_58.z) + (vSinCos_66.x * tmpvar_58.x));
      tmpvar_68[2].x = (((tmpvar_67 * tmpvar_58.x) * tmpvar_58.z) + (vSinCos_66.x * tmpvar_58.y));
      tmpvar_68[2].y = (((tmpvar_67 * tmpvar_58.y) * tmpvar_58.z) - (vSinCos_66.x * tmpvar_58.x));
      tmpvar_68[2].z = (((tmpvar_67 * tmpvar_58.z) * tmpvar_58.z) + vSinCos_66.y);
      highp mat3 tmpvar_69;
      tmpvar_69 = (tmpvar_55 * tmpvar_68);
      vDirection_31 = (tmpvar_69 * _glesNormal);
      vPos_30 = (normalize((tmpvar_69 * vPos_34)) * tmpvar_51);
    };
    tmpvar_17 = vDirection_31;
    FinalPosition_20 = vPos_30;
  };
  highp vec3 tmpvar_70;
  tmpvar_70 = (FinalPosition_20 + _glesMultiTexCoord1.xyz);
  FinalPosition_20 = tmpvar_70;
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_71;
    vPos_71 = tmpvar_70;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_72;
      vPos_72 = tmpvar_70;
      highp float fAdherenceScale_73;
      highp vec3 tmpvar_74;
      tmpvar_74 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_75;
      tmpvar_75 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_76;
      highp float fOscillation_77;
      fOscillation_77 = 1.0;
      highp float fAmount_78;
      highp float fTarget_79;
      highp vec4 tmpvar_80;
      tmpvar_80.x = (tmpvar_75 + _glesMultiTexCoord0.w);
      tmpvar_80.y = ((tmpvar_75 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_80.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_75 + _glesMultiTexCoord0.w));
      tmpvar_80.w = ((tmpvar_75 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      vOscillations_76 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      highp float tmpvar_82;
      tmpvar_82 = (vOscillations_76.y * vOscillations_76.z);
      fTarget_79 = 1.0;
      fAmount_78 = tmpvar_82;
      if ((tmpvar_82 < 0.0)) {
        fTarget_79 = -1.0;
        fAmount_78 = -(tmpvar_82);
      };
      fOscillation_77 = (((
        (mix (mix (tmpvar_82, fTarget_79, fAmount_78), fTarget_79, fAmount_78) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_76.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_76.w * _ST_WindBranchWhip.x)));
      vPos_72 = (tmpvar_70 + ((tmpvar_74 * fOscillation_77) * _ST_WindBranch.y));
      highp vec4 tmpvar_83;
      tmpvar_83.zw = vec2(0.0, 0.0);
      tmpvar_83.x = ((tmpvar_75 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_83.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_84;
      highp vec4 tmpvar_85;
      tmpvar_85 = abs(((
        fract((tmpvar_83 + 0.5))
       * 2.0) - 1.0));
      tmpvar_84 = (((
        (tmpvar_85 * tmpvar_85)
       * 
        (3.0 - (2.0 * tmpvar_85))
      ) - 0.5) * 2.0);
      fAdherenceScale_73 = (1.0 - ((
        ((tmpvar_84.x * tmpvar_84.y) * tmpvar_84.x)
       * tmpvar_84.y) * _ST_WindTurbulences.x));
      fAdherenceScale_73 = (fAdherenceScale_73 + ((vOscillations_76.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_72 = (vPos_72 + ((
        ((vRotatedBranchAnchor_18 - vPos_72) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_73) * _glesMultiTexCoord0.z));
      vPos_71 = vPos_72;
    } else {
      highp vec3 vPos_86;
      vPos_86 = vPos_71;
      highp vec3 tmpvar_87;
      tmpvar_87 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_88;
      tmpvar_88 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_89;
      highp float fAmount_90;
      highp float fTarget_91;
      highp vec4 tmpvar_92;
      tmpvar_92.w = 0.0;
      tmpvar_92.x = (tmpvar_88 + _glesMultiTexCoord0.w);
      tmpvar_92.y = ((tmpvar_88 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_92.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_88 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_93;
      tmpvar_93 = abs(((
        fract((tmpvar_92 + 0.5))
       * 2.0) - 1.0));
      vOscillations_89 = (((
        (tmpvar_93 * tmpvar_93)
       * 
        (3.0 - (2.0 * tmpvar_93))
      ) - 0.5) * 2.0);
      highp float tmpvar_94;
      tmpvar_94 = (vOscillations_89.y * vOscillations_89.z);
      fTarget_91 = 1.0;
      fAmount_90 = tmpvar_94;
      if ((tmpvar_94 < 0.0)) {
        fTarget_91 = -1.0;
        fAmount_90 = -(tmpvar_94);
      };
      vPos_86 = (vPos_71 + ((tmpvar_87 * 
        (((mix (
          mix (tmpvar_94, fTarget_91, fAmount_90)
        , fTarget_91, fAmount_90) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_89.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_71 = vPos_86;
    };
    FinalPosition_20 = vPos_71;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_95;
    vPos_95 = FinalPosition_20;
    highp float fAdjust_96;
    highp float fLength_97;
    fLength_97 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_98;
    tmpvar_98 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_96 = tmpvar_98;
    if ((tmpvar_98 != 0.0)) {
      fAdjust_96 = pow (tmpvar_98, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_99;
    tmpvar_99.zw = vec2(0.0, 0.0);
    tmpvar_99.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_99.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_100;
    highp vec4 tmpvar_101;
    tmpvar_101 = abs(((
      fract((tmpvar_99 + 0.5))
     * 2.0) - 1.0));
    tmpvar_100 = (((
      (tmpvar_101 * tmpvar_101)
     * 
      (3.0 - (2.0 * tmpvar_101))
    ) - 0.5) * 2.0);
    vPos_95.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_100.x + (tmpvar_100.y * tmpvar_100.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_96)));
    vPos_95 = (normalize(vPos_95) * fLength_97);
    FinalPosition_20 = vPos_95;
  };
  tmpvar_16.xyz = FinalPosition_20;
  highp vec4 tmpvar_102;
  tmpvar_102 = (glstate_matrix_mvp * tmpvar_16);
  highp vec4 o_103;
  highp vec4 tmpvar_104;
  tmpvar_104 = (tmpvar_102 * 0.5);
  highp vec2 tmpvar_105;
  tmpvar_105.x = tmpvar_104.x;
  tmpvar_105.y = (tmpvar_104.y * _ProjectionParams.x);
  o_103.xy = (tmpvar_105 + tmpvar_104.w);
  o_103.zw = tmpvar_102.zw;
  highp vec3 tmpvar_106;
  tmpvar_106 = o_103.xyw;
  tmpvar_10 = tmpvar_106;
  highp vec2 tmpvar_107;
  tmpvar_107 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_107;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_108;
  tmpvar_108 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_109;
  v_109.x = _World2Object[0].x;
  v_109.y = _World2Object[1].x;
  v_109.z = _World2Object[2].x;
  v_109.w = _World2Object[3].x;
  highp vec4 v_110;
  v_110.x = _World2Object[0].y;
  v_110.y = _World2Object[1].y;
  v_110.z = _World2Object[2].y;
  v_110.w = _World2Object[3].y;
  highp vec4 v_111;
  v_111.x = _World2Object[0].z;
  v_111.y = _World2Object[1].z;
  v_111.z = _World2Object[2].z;
  v_111.w = _World2Object[3].z;
  highp vec3 tmpvar_112;
  tmpvar_112 = normalize(((
    (v_109.xyz * tmpvar_17.x)
   + 
    (v_110.xyz * tmpvar_17.y)
  ) + (v_111.xyz * tmpvar_17.z)));
  worldNormal_5 = tmpvar_112;
  highp mat3 tmpvar_113;
  tmpvar_113[0] = _Object2World[0].xyz;
  tmpvar_113[1] = _Object2World[1].xyz;
  tmpvar_113[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_114;
  tmpvar_114 = normalize((tmpvar_113 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_114;
  lowp vec3 tmpvar_115;
  tmpvar_115 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_116;
  tmpvar_116 = (tmpvar_115 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_116;
  highp vec4 tmpvar_117;
  tmpvar_117.x = worldTangent_4.x;
  tmpvar_117.y = worldBinormal_3.x;
  tmpvar_117.z = worldNormal_5.x;
  tmpvar_117.w = tmpvar_108.x;
  highp vec4 tmpvar_118;
  tmpvar_118.x = worldTangent_4.y;
  tmpvar_118.y = worldBinormal_3.y;
  tmpvar_118.z = worldNormal_5.y;
  tmpvar_118.w = tmpvar_108.y;
  highp vec4 tmpvar_119;
  tmpvar_119.x = worldTangent_4.z;
  tmpvar_119.y = worldBinormal_3.z;
  tmpvar_119.z = worldNormal_5.z;
  tmpvar_119.w = tmpvar_108.z;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_120;
  tmpvar_120.w = 1.0;
  tmpvar_120.xyz = worldNormal_5;
  mediump vec4 normal_121;
  normal_121 = tmpvar_120;
  mediump vec3 x2_122;
  mediump vec4 tmpvar_123;
  tmpvar_123 = (normal_121.xyzz * normal_121.yzzx);
  x2_122.x = dot (unity_SHBr, tmpvar_123);
  x2_122.y = dot (unity_SHBg, tmpvar_123);
  x2_122.z = dot (unity_SHBb, tmpvar_123);
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_117;
  xlv_TEXCOORD1 = tmpvar_118;
  xlv_TEXCOORD2 = tmpvar_119;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD7 = tmpvar_7;
  xlv_TEXCOORD8 = (x2_122 + (unity_SHC.xyz * (
    (normal_121.x * normal_121.x)
   - 
    (normal_121.y * normal_121.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 worldN_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_7.x = tmpvar_8.x;
  mediump float tmpvar_9;
  tmpvar_9 = fract(tmpvar_8.y);
  highp float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * 0.0625) + unity_LODFade.y);
  projUV_7.y = tmpvar_10;
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_6 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_6.w * _Color.w);
  tmpvar_5 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_5 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_6.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_6.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_6.x, max (diffuseColor_6.y, diffuseColor_6.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_2.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_2.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_2.z = tmpvar_20;
  mediump vec3 normalWorld_21;
  normalWorld_21 = worldN_2;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_21;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  mediump vec4 outDiffuseOcclusion_24;
  mediump vec4 outNormal_25;
  mediump vec4 emission_26;
  lowp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = tmpvar_4;
  outDiffuseOcclusion_24 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = ((worldN_2 * 0.5) + 0.5);
  outNormal_25 = tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = vec3(0.0, 0.0, 0.0);
  emission_26 = tmpvar_29;
  emission_26.xyz = (emission_26.xyz + (tmpvar_4 * (xlv_TEXCOORD8 + x1_23)));
  outDiffuse_1.xyz = outDiffuseOcclusion_24.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_25;
  gl_FragData[3] = emission_26;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
in vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD7;
out mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_11;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_15;
  highp vec4 tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_16 = tmpvar_1;
  tmpvar_17 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  FinalPosition_20 = tmpvar_1.xyz;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_24;
  tmpvar_24 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_25;
  tmpvar_25[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_25[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_25[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_26;
  tmpvar_26 = (normalize((tmpvar_24 * tmpvar_25)) * sqrt(dot (tmpvar_24, tmpvar_24)));
  FinalPosition_20 = tmpvar_26;
  if (((tmpvar_21 > 1.0) && (tmpvar_21 < 5.0))) {
    highp float tmpvar_27;
    tmpvar_27 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_28;
    isBestWind_28 = (tmpvar_21 == 4.0);
    bool bLeaf2_29;
    bLeaf2_29 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_30;
    vPos_30 = tmpvar_26;
    highp vec3 vDirection_31;
    vDirection_31 = tmpvar_2;
    highp float tmpvar_32;
    if (bLeaf2_29) {
      tmpvar_32 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_32 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_33;
    if (bLeaf2_29) {
      tmpvar_33 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_33 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_34;
    highp vec4 tmpvar_35;
    tmpvar_35.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_35.x = (tmpvar_32 + tmpvar_27);
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_35 + 0.5))
     * 2.0) - 1.0));
    vPos_34 = (tmpvar_26 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_33 * (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_31 = tmpvar_2;
    vPos_30 = vPos_34;
    if (isBestWind_28) {
      highp vec3 tmpvar_37;
      tmpvar_37 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_38;
      if (bLeaf2_29) {
        tmpvar_38 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_39;
      if (bLeaf2_29) {
        tmpvar_39 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_40;
      if (bLeaf2_29) {
        tmpvar_40 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_40 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_41;
      if (bLeaf2_29) {
        tmpvar_41 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_41 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_42;
      if (bLeaf2_29) {
        tmpvar_42 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_42 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_43;
      if (bLeaf2_29) {
        tmpvar_43 = bool(1);
      } else {
        tmpvar_43 = bool(1);
      };
      highp float fTwitch_44;
      highp vec3 vAxis_45;
      highp vec3 tmpvar_46;
      tmpvar_46 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_47;
      tmpvar_47 = ((tmpvar_46.x + tmpvar_46.y) + tmpvar_46.z);
      highp vec4 tmpvar_48;
      tmpvar_48.x = (tmpvar_38 + tmpvar_47);
      tmpvar_48.y = ((tmpvar_38 * 0.75) - tmpvar_47);
      tmpvar_48.z = ((tmpvar_38 * 0.01) + tmpvar_47);
      tmpvar_48.w = (tmpvar_38 + tmpvar_47);
      highp vec4 tmpvar_49;
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      tmpvar_49 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      highp float tmpvar_51;
      tmpvar_51 = sqrt(dot (vPos_34, vPos_34));
      highp float fAngle_52;
      fAngle_52 = ((_glesMultiTexCoord2.x * tmpvar_40) * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y)));
      highp vec2 vSinCos_53;
      vSinCos_53.x = sin(fAngle_52);
      vSinCos_53.y = cos(fAngle_52);
      highp float tmpvar_54;
      tmpvar_54 = (1.0 - vSinCos_53.y);
      highp mat3 tmpvar_55;
      tmpvar_55[0].x = (((tmpvar_54 * tmpvar_37.x) * tmpvar_37.x) + vSinCos_53.y);
      tmpvar_55[0].y = (((tmpvar_54 * tmpvar_37.x) * tmpvar_37.y) + (vSinCos_53.x * tmpvar_37.z));
      tmpvar_55[0].z = (((tmpvar_54 * tmpvar_37.x) * tmpvar_37.z) - (vSinCos_53.x * tmpvar_37.y));
      tmpvar_55[1].x = (((tmpvar_54 * tmpvar_37.x) * tmpvar_37.y) - (vSinCos_53.x * tmpvar_37.z));
      tmpvar_55[1].y = (((tmpvar_54 * tmpvar_37.y) * tmpvar_37.y) + vSinCos_53.y);
      tmpvar_55[1].z = (((tmpvar_54 * tmpvar_37.y) * tmpvar_37.z) + (vSinCos_53.x * tmpvar_37.x));
      tmpvar_55[2].x = (((tmpvar_54 * tmpvar_37.x) * tmpvar_37.z) + (vSinCos_53.x * tmpvar_37.y));
      tmpvar_55[2].y = (((tmpvar_54 * tmpvar_37.y) * tmpvar_37.z) - (vSinCos_53.x * tmpvar_37.x));
      tmpvar_55[2].z = (((tmpvar_54 * tmpvar_37.z) * tmpvar_37.z) + vSinCos_53.y);
      highp vec3 tmpvar_56;
      tmpvar_56 = ((tmpvar_37.yzx * vRotatedWindVector_19.zxy) - (tmpvar_37.zxy * vRotatedWindVector_19.yzx));
      vAxis_45.xz = tmpvar_56.xz;
      highp float tmpvar_57;
      tmpvar_57 = clamp (dot (vRotatedWindVector_19, tmpvar_37), -1.0, 1.0);
      vAxis_45.y = (tmpvar_56.y + tmpvar_57);
      highp vec3 tmpvar_58;
      tmpvar_58 = normalize(vAxis_45);
      vAxis_45 = tmpvar_58;
      highp float tmpvar_59;
      tmpvar_59 = (1.570796 - (sign(tmpvar_57) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_57))) * (1.570796 + (abs(tmpvar_57) * (-0.2146018 + 
          (abs(tmpvar_57) * (0.08656672 + (abs(tmpvar_57) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_60;
      tmpvar_60 = (tmpvar_49.y - (tmpvar_49.x * tmpvar_49.x));
      fTwitch_44 = 0.0;
      if (tmpvar_43) {
        highp float fTime_61;
        fTime_61 = (tmpvar_42.z + tmpvar_47);
        highp vec4 tmpvar_62;
        tmpvar_62.zw = vec2(0.0, 0.0);
        tmpvar_62.x = fTime_61;
        tmpvar_62.y = (0.87 * fTime_61);
        highp vec4 tmpvar_63;
        highp vec4 tmpvar_64;
        tmpvar_64 = abs(((
          fract((tmpvar_62 + 0.5))
         * 2.0) - 1.0));
        tmpvar_63 = (((
          (tmpvar_64 * tmpvar_64)
         * 
          (3.0 - (2.0 * tmpvar_64))
        ) - 0.5) * 2.0);
        fTwitch_44 = (tmpvar_42.x * pow (clamp (
          ((((tmpvar_63.x * tmpvar_63.y) * tmpvar_63.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_42.y));
      };
      highp float fAngle_65;
      fAngle_65 = (_glesMultiTexCoord2.x * ((
        (tmpvar_59 * tmpvar_41)
       + 
        (tmpvar_60 * tmpvar_39)
      ) + fTwitch_44));
      highp vec2 vSinCos_66;
      vSinCos_66.x = sin(fAngle_65);
      vSinCos_66.y = cos(fAngle_65);
      highp float tmpvar_67;
      tmpvar_67 = (1.0 - vSinCos_66.y);
      highp mat3 tmpvar_68;
      tmpvar_68[0].x = (((tmpvar_67 * tmpvar_58.x) * tmpvar_58.x) + vSinCos_66.y);
      tmpvar_68[0].y = (((tmpvar_67 * tmpvar_58.x) * tmpvar_58.y) + (vSinCos_66.x * tmpvar_58.z));
      tmpvar_68[0].z = (((tmpvar_67 * tmpvar_58.x) * tmpvar_58.z) - (vSinCos_66.x * tmpvar_58.y));
      tmpvar_68[1].x = (((tmpvar_67 * tmpvar_58.x) * tmpvar_58.y) - (vSinCos_66.x * tmpvar_58.z));
      tmpvar_68[1].y = (((tmpvar_67 * tmpvar_58.y) * tmpvar_58.y) + vSinCos_66.y);
      tmpvar_68[1].z = (((tmpvar_67 * tmpvar_58.y) * tmpvar_58.z) + (vSinCos_66.x * tmpvar_58.x));
      tmpvar_68[2].x = (((tmpvar_67 * tmpvar_58.x) * tmpvar_58.z) + (vSinCos_66.x * tmpvar_58.y));
      tmpvar_68[2].y = (((tmpvar_67 * tmpvar_58.y) * tmpvar_58.z) - (vSinCos_66.x * tmpvar_58.x));
      tmpvar_68[2].z = (((tmpvar_67 * tmpvar_58.z) * tmpvar_58.z) + vSinCos_66.y);
      highp mat3 tmpvar_69;
      tmpvar_69 = (tmpvar_55 * tmpvar_68);
      vDirection_31 = (tmpvar_69 * _glesNormal);
      vPos_30 = (normalize((tmpvar_69 * vPos_34)) * tmpvar_51);
    };
    tmpvar_17 = vDirection_31;
    FinalPosition_20 = vPos_30;
  };
  highp vec3 tmpvar_70;
  tmpvar_70 = (FinalPosition_20 + _glesMultiTexCoord1.xyz);
  FinalPosition_20 = tmpvar_70;
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_71;
    vPos_71 = tmpvar_70;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_72;
      vPos_72 = tmpvar_70;
      highp float fAdherenceScale_73;
      highp vec3 tmpvar_74;
      tmpvar_74 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_75;
      tmpvar_75 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_76;
      highp float fOscillation_77;
      fOscillation_77 = 1.0;
      highp float fAmount_78;
      highp float fTarget_79;
      highp vec4 tmpvar_80;
      tmpvar_80.x = (tmpvar_75 + _glesMultiTexCoord0.w);
      tmpvar_80.y = ((tmpvar_75 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_80.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_75 + _glesMultiTexCoord0.w));
      tmpvar_80.w = ((tmpvar_75 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      vOscillations_76 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      highp float tmpvar_82;
      tmpvar_82 = (vOscillations_76.y * vOscillations_76.z);
      fTarget_79 = 1.0;
      fAmount_78 = tmpvar_82;
      if ((tmpvar_82 < 0.0)) {
        fTarget_79 = -1.0;
        fAmount_78 = -(tmpvar_82);
      };
      fOscillation_77 = (((
        (mix (mix (tmpvar_82, fTarget_79, fAmount_78), fTarget_79, fAmount_78) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_76.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_76.w * _ST_WindBranchWhip.x)));
      vPos_72 = (tmpvar_70 + ((tmpvar_74 * fOscillation_77) * _ST_WindBranch.y));
      highp vec4 tmpvar_83;
      tmpvar_83.zw = vec2(0.0, 0.0);
      tmpvar_83.x = ((tmpvar_75 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_83.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_84;
      highp vec4 tmpvar_85;
      tmpvar_85 = abs(((
        fract((tmpvar_83 + 0.5))
       * 2.0) - 1.0));
      tmpvar_84 = (((
        (tmpvar_85 * tmpvar_85)
       * 
        (3.0 - (2.0 * tmpvar_85))
      ) - 0.5) * 2.0);
      fAdherenceScale_73 = (1.0 - ((
        ((tmpvar_84.x * tmpvar_84.y) * tmpvar_84.x)
       * tmpvar_84.y) * _ST_WindTurbulences.x));
      fAdherenceScale_73 = (fAdherenceScale_73 + ((vOscillations_76.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_72 = (vPos_72 + ((
        ((vRotatedBranchAnchor_18 - vPos_72) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_73) * _glesMultiTexCoord0.z));
      vPos_71 = vPos_72;
    } else {
      highp vec3 vPos_86;
      vPos_86 = vPos_71;
      highp vec3 tmpvar_87;
      tmpvar_87 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_88;
      tmpvar_88 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_89;
      highp float fAmount_90;
      highp float fTarget_91;
      highp vec4 tmpvar_92;
      tmpvar_92.w = 0.0;
      tmpvar_92.x = (tmpvar_88 + _glesMultiTexCoord0.w);
      tmpvar_92.y = ((tmpvar_88 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_92.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_88 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_93;
      tmpvar_93 = abs(((
        fract((tmpvar_92 + 0.5))
       * 2.0) - 1.0));
      vOscillations_89 = (((
        (tmpvar_93 * tmpvar_93)
       * 
        (3.0 - (2.0 * tmpvar_93))
      ) - 0.5) * 2.0);
      highp float tmpvar_94;
      tmpvar_94 = (vOscillations_89.y * vOscillations_89.z);
      fTarget_91 = 1.0;
      fAmount_90 = tmpvar_94;
      if ((tmpvar_94 < 0.0)) {
        fTarget_91 = -1.0;
        fAmount_90 = -(tmpvar_94);
      };
      vPos_86 = (vPos_71 + ((tmpvar_87 * 
        (((mix (
          mix (tmpvar_94, fTarget_91, fAmount_90)
        , fTarget_91, fAmount_90) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_89.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_71 = vPos_86;
    };
    FinalPosition_20 = vPos_71;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_95;
    vPos_95 = FinalPosition_20;
    highp float fAdjust_96;
    highp float fLength_97;
    fLength_97 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_98;
    tmpvar_98 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_96 = tmpvar_98;
    if ((tmpvar_98 != 0.0)) {
      fAdjust_96 = pow (tmpvar_98, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_99;
    tmpvar_99.zw = vec2(0.0, 0.0);
    tmpvar_99.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_99.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_100;
    highp vec4 tmpvar_101;
    tmpvar_101 = abs(((
      fract((tmpvar_99 + 0.5))
     * 2.0) - 1.0));
    tmpvar_100 = (((
      (tmpvar_101 * tmpvar_101)
     * 
      (3.0 - (2.0 * tmpvar_101))
    ) - 0.5) * 2.0);
    vPos_95.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_100.x + (tmpvar_100.y * tmpvar_100.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_96)));
    vPos_95 = (normalize(vPos_95) * fLength_97);
    FinalPosition_20 = vPos_95;
  };
  tmpvar_16.xyz = FinalPosition_20;
  highp vec4 tmpvar_102;
  tmpvar_102 = (glstate_matrix_mvp * tmpvar_16);
  highp vec4 o_103;
  highp vec4 tmpvar_104;
  tmpvar_104 = (tmpvar_102 * 0.5);
  highp vec2 tmpvar_105;
  tmpvar_105.x = tmpvar_104.x;
  tmpvar_105.y = (tmpvar_104.y * _ProjectionParams.x);
  o_103.xy = (tmpvar_105 + tmpvar_104.w);
  o_103.zw = tmpvar_102.zw;
  highp vec3 tmpvar_106;
  tmpvar_106 = o_103.xyw;
  tmpvar_10 = tmpvar_106;
  highp vec2 tmpvar_107;
  tmpvar_107 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_107;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_108;
  tmpvar_108 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_109;
  v_109.x = _World2Object[0].x;
  v_109.y = _World2Object[1].x;
  v_109.z = _World2Object[2].x;
  v_109.w = _World2Object[3].x;
  highp vec4 v_110;
  v_110.x = _World2Object[0].y;
  v_110.y = _World2Object[1].y;
  v_110.z = _World2Object[2].y;
  v_110.w = _World2Object[3].y;
  highp vec4 v_111;
  v_111.x = _World2Object[0].z;
  v_111.y = _World2Object[1].z;
  v_111.z = _World2Object[2].z;
  v_111.w = _World2Object[3].z;
  highp vec3 tmpvar_112;
  tmpvar_112 = normalize(((
    (v_109.xyz * tmpvar_17.x)
   + 
    (v_110.xyz * tmpvar_17.y)
  ) + (v_111.xyz * tmpvar_17.z)));
  worldNormal_5 = tmpvar_112;
  highp mat3 tmpvar_113;
  tmpvar_113[0] = _Object2World[0].xyz;
  tmpvar_113[1] = _Object2World[1].xyz;
  tmpvar_113[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_114;
  tmpvar_114 = normalize((tmpvar_113 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_114;
  lowp vec3 tmpvar_115;
  tmpvar_115 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_116;
  tmpvar_116 = (tmpvar_115 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_116;
  highp vec4 tmpvar_117;
  tmpvar_117.x = worldTangent_4.x;
  tmpvar_117.y = worldBinormal_3.x;
  tmpvar_117.z = worldNormal_5.x;
  tmpvar_117.w = tmpvar_108.x;
  highp vec4 tmpvar_118;
  tmpvar_118.x = worldTangent_4.y;
  tmpvar_118.y = worldBinormal_3.y;
  tmpvar_118.z = worldNormal_5.y;
  tmpvar_118.w = tmpvar_108.y;
  highp vec4 tmpvar_119;
  tmpvar_119.x = worldTangent_4.z;
  tmpvar_119.y = worldBinormal_3.z;
  tmpvar_119.z = worldNormal_5.z;
  tmpvar_119.w = tmpvar_108.z;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_120;
  tmpvar_120.w = 1.0;
  tmpvar_120.xyz = worldNormal_5;
  mediump vec4 normal_121;
  normal_121 = tmpvar_120;
  mediump vec3 x2_122;
  mediump vec4 tmpvar_123;
  tmpvar_123 = (normal_121.xyzz * normal_121.yzzx);
  x2_122.x = dot (unity_SHBr, tmpvar_123);
  x2_122.y = dot (unity_SHBg, tmpvar_123);
  x2_122.z = dot (unity_SHBb, tmpvar_123);
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_117;
  xlv_TEXCOORD1 = tmpvar_118;
  xlv_TEXCOORD2 = tmpvar_119;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD7 = tmpvar_7;
  xlv_TEXCOORD8 = (x2_122 + (unity_SHC.xyz * (
    (normal_121.x * normal_121.x)
   - 
    (normal_121.y * normal_121.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 worldN_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_7.x = tmpvar_8.x;
  mediump float tmpvar_9;
  tmpvar_9 = fract(tmpvar_8.y);
  highp float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * 0.0625) + unity_LODFade.y);
  projUV_7.y = tmpvar_10;
  lowp float x_11;
  x_11 = (texture (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_6 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_6.w * _Color.w);
  tmpvar_5 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_5 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_6.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_6.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_6.x, max (diffuseColor_6.y, diffuseColor_6.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_2.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_2.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_2.z = tmpvar_20;
  mediump vec3 normalWorld_21;
  normalWorld_21 = worldN_2;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_21;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  mediump vec4 outDiffuseOcclusion_24;
  mediump vec4 outNormal_25;
  mediump vec4 emission_26;
  lowp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = tmpvar_4;
  outDiffuseOcclusion_24 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = ((worldN_2 * 0.5) + 0.5);
  outNormal_25 = tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = vec3(0.0, 0.0, 0.0);
  emission_26 = tmpvar_29;
  emission_26.xyz = (emission_26.xyz + (tmpvar_4 * (xlv_TEXCOORD8 + x1_23)));
  outDiffuse_1.xyz = outDiffuseOcclusion_24.xyz;
  outDiffuse_1.w = 1.0;
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_25;
  _glesFragData[3] = emission_26;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH_DETAIL" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH_DETAIL" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_FACING_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_FACING_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_FACING_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_DETAIL" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_DETAIL" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FACING_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FACING_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FACING_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_DETAIL" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_DETAIL" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FACING_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FACING_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FACING_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3"
}
}
 }
 Pass {
  Tags { "LIGHTMODE"="SHADOWCASTER" "SHADOWSUPPORT"="true" "QUEUE"="Geometry" "IGNOREPROJECTOR"="true" "DisableBatching"="LodFading" "RenderType"="Opaque" }
  Cull [_Cull]
  GpuProgramID 387707
Program "vp" {
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_BRANCH" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_3;
  highp vec3 vRotatedWindVector_4;
  highp vec3 FinalPosition_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = tmpvar_1.xyz;
  FinalPosition_5 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7.x = _Object2World[3].x;
  tmpvar_7.y = _Object2World[3].y;
  tmpvar_7.z = _Object2World[3].z;
  mediump float tmpvar_8;
  tmpvar_8 = (_WindQuality * _WindEnabled);
  if ((tmpvar_8 > 0.0)) {
    highp mat3 tmpvar_9;
    tmpvar_9[0] = _World2Object[0].xyz;
    tmpvar_9[1] = _World2Object[1].xyz;
    tmpvar_9[2] = _World2Object[2].xyz;
    vRotatedWindVector_4 = normalize((tmpvar_9 * _ST_WindVector.xyz));
    highp mat3 tmpvar_10;
    tmpvar_10[0] = _World2Object[0].xyz;
    tmpvar_10[1] = _World2Object[1].xyz;
    tmpvar_10[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_3 = (normalize((tmpvar_10 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_4 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_3 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_8 >= 3.0)) {
    highp vec3 vPos_11;
    vPos_11 = tmpvar_6;
    if ((tmpvar_8 == 5.0)) {
      highp vec3 vPos_12;
      vPos_12 = tmpvar_6;
      highp float fAdherenceScale_13;
      highp vec3 tmpvar_14;
      tmpvar_14 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_15;
      tmpvar_15 = (_ST_WindBranch.x + (tmpvar_7.x + tmpvar_7.y));
      highp vec4 vOscillations_16;
      highp float fOscillation_17;
      fOscillation_17 = 1.0;
      highp float fAmount_18;
      highp float fTarget_19;
      highp vec4 tmpvar_20;
      tmpvar_20.x = (tmpvar_15 + _glesMultiTexCoord0.w);
      tmpvar_20.y = ((tmpvar_15 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_20.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_15 + _glesMultiTexCoord0.w));
      tmpvar_20.w = ((tmpvar_15 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_21;
      tmpvar_21 = abs(((
        fract((tmpvar_20 + 0.5))
       * 2.0) - 1.0));
      vOscillations_16 = (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0);
      highp float tmpvar_22;
      tmpvar_22 = (vOscillations_16.y * vOscillations_16.z);
      fTarget_19 = 1.0;
      fAmount_18 = tmpvar_22;
      if ((tmpvar_22 < 0.0)) {
        fTarget_19 = -1.0;
        fAmount_18 = -(tmpvar_22);
      };
      fOscillation_17 = (((
        (mix (mix (tmpvar_22, fTarget_19, fAmount_18), fTarget_19, fAmount_18) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_16.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_16.w * _ST_WindBranchWhip.x)));
      vPos_12 = (_glesVertex.xyz + ((tmpvar_14 * fOscillation_17) * _ST_WindBranch.y));
      highp vec4 tmpvar_23;
      tmpvar_23.zw = vec2(0.0, 0.0);
      tmpvar_23.x = ((tmpvar_15 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_23.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_24;
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_23 + 0.5))
       * 2.0) - 1.0));
      tmpvar_24 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      fAdherenceScale_13 = (1.0 - ((
        ((tmpvar_24.x * tmpvar_24.y) * tmpvar_24.x)
       * tmpvar_24.y) * _ST_WindTurbulences.x));
      fAdherenceScale_13 = (fAdherenceScale_13 + ((vOscillations_16.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_12 = (vPos_12 + ((
        ((vRotatedBranchAnchor_3 - vPos_12) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_13) * _glesMultiTexCoord0.z));
      vPos_11 = vPos_12;
    } else {
      highp vec3 vPos_26;
      vPos_26 = vPos_11;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (tmpvar_7.x + tmpvar_7.y));
      highp vec4 vOscillations_29;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.w = 0.0;
      tmpvar_32.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      vPos_26 = (vPos_11 + ((tmpvar_27 * 
        (((mix (
          mix (tmpvar_34, fTarget_31, fAmount_30)
        , fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_11 = vPos_26;
    };
    FinalPosition_5 = vPos_11;
  };
  if ((tmpvar_8 > 0.0)) {
    highp vec3 vPos_35;
    vPos_35 = FinalPosition_5;
    highp float fAdjust_36;
    highp float fLength_37;
    fLength_37 = sqrt(dot (FinalPosition_5, FinalPosition_5));
    highp float tmpvar_38;
    tmpvar_38 = (max ((FinalPosition_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_36 = tmpvar_38;
    if ((tmpvar_38 != 0.0)) {
      fAdjust_36 = pow (tmpvar_38, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_39;
    tmpvar_39.zw = vec2(0.0, 0.0);
    tmpvar_39.x = (tmpvar_7.x + _ST_WindGlobal.x);
    tmpvar_39.y = (tmpvar_7.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_40;
    highp vec4 tmpvar_41;
    tmpvar_41 = abs(((
      fract((tmpvar_39 + 0.5))
     * 2.0) - 1.0));
    tmpvar_40 = (((
      (tmpvar_41 * tmpvar_41)
     * 
      (3.0 - (2.0 * tmpvar_41))
    ) - 0.5) * 2.0);
    vPos_35.xz = (FinalPosition_5.xz + (vRotatedWindVector_4.xz * (
      ((_ST_WindGlobal.y * (tmpvar_40.x + (tmpvar_40.y * tmpvar_40.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_36)));
    vPos_35 = (normalize(vPos_35) * fLength_37);
    FinalPosition_5 = vPos_35;
  };
  tmpvar_2.xyz = FinalPosition_5;
  highp vec3 vertex_42;
  vertex_42 = tmpvar_2.xyz;
  highp vec4 clipPos_43;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp vec4 tmpvar_44;
    tmpvar_44.w = 1.0;
    tmpvar_44.xyz = vertex_42;
    highp vec3 tmpvar_45;
    tmpvar_45 = (_Object2World * tmpvar_44).xyz;
    highp vec4 v_46;
    v_46.x = _World2Object[0].x;
    v_46.y = _World2Object[1].x;
    v_46.z = _World2Object[2].x;
    v_46.w = _World2Object[3].x;
    highp vec4 v_47;
    v_47.x = _World2Object[0].y;
    v_47.y = _World2Object[1].y;
    v_47.z = _World2Object[2].y;
    v_47.w = _World2Object[3].y;
    highp vec4 v_48;
    v_48.x = _World2Object[0].z;
    v_48.y = _World2Object[1].z;
    v_48.z = _World2Object[2].z;
    v_48.w = _World2Object[3].z;
    highp vec3 tmpvar_49;
    tmpvar_49 = normalize(((
      (v_46.xyz * _glesNormal.x)
     + 
      (v_47.xyz * _glesNormal.y)
    ) + (v_48.xyz * _glesNormal.z)));
    highp float tmpvar_50;
    tmpvar_50 = dot (tmpvar_49, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_45 * _WorldSpaceLightPos0.w)
    )));
    highp vec4 tmpvar_51;
    tmpvar_51.w = 1.0;
    tmpvar_51.xyz = (tmpvar_45 - (tmpvar_49 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_50 * tmpvar_50)))
    )));
    clipPos_43 = (unity_MatrixVP * tmpvar_51);
  } else {
    highp vec4 tmpvar_52;
    tmpvar_52.w = 1.0;
    tmpvar_52.xyz = vertex_42;
    clipPos_43 = (glstate_matrix_mvp * tmpvar_52);
  };
  highp vec4 clipPos_53;
  clipPos_53.xyw = clipPos_43.xyw;
  clipPos_53.z = (clipPos_43.z + clamp ((unity_LightShadowBias.x / clipPos_43.w), 0.0, 1.0));
  clipPos_53.z = mix (clipPos_53.z, max (clipPos_53.z, -(clipPos_43.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_53;
}



#endif
#ifdef FRAGMENT

void main ()
{
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_BRANCH" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_3;
  highp vec3 vRotatedWindVector_4;
  highp vec3 FinalPosition_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = tmpvar_1.xyz;
  FinalPosition_5 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7.x = _Object2World[3].x;
  tmpvar_7.y = _Object2World[3].y;
  tmpvar_7.z = _Object2World[3].z;
  mediump float tmpvar_8;
  tmpvar_8 = (_WindQuality * _WindEnabled);
  if ((tmpvar_8 > 0.0)) {
    highp mat3 tmpvar_9;
    tmpvar_9[0] = _World2Object[0].xyz;
    tmpvar_9[1] = _World2Object[1].xyz;
    tmpvar_9[2] = _World2Object[2].xyz;
    vRotatedWindVector_4 = normalize((tmpvar_9 * _ST_WindVector.xyz));
    highp mat3 tmpvar_10;
    tmpvar_10[0] = _World2Object[0].xyz;
    tmpvar_10[1] = _World2Object[1].xyz;
    tmpvar_10[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_3 = (normalize((tmpvar_10 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_4 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_3 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_8 >= 3.0)) {
    highp vec3 vPos_11;
    vPos_11 = tmpvar_6;
    if ((tmpvar_8 == 5.0)) {
      highp vec3 vPos_12;
      vPos_12 = tmpvar_6;
      highp float fAdherenceScale_13;
      highp vec3 tmpvar_14;
      tmpvar_14 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_15;
      tmpvar_15 = (_ST_WindBranch.x + (tmpvar_7.x + tmpvar_7.y));
      highp vec4 vOscillations_16;
      highp float fOscillation_17;
      fOscillation_17 = 1.0;
      highp float fAmount_18;
      highp float fTarget_19;
      highp vec4 tmpvar_20;
      tmpvar_20.x = (tmpvar_15 + _glesMultiTexCoord0.w);
      tmpvar_20.y = ((tmpvar_15 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_20.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_15 + _glesMultiTexCoord0.w));
      tmpvar_20.w = ((tmpvar_15 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_21;
      tmpvar_21 = abs(((
        fract((tmpvar_20 + 0.5))
       * 2.0) - 1.0));
      vOscillations_16 = (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0);
      highp float tmpvar_22;
      tmpvar_22 = (vOscillations_16.y * vOscillations_16.z);
      fTarget_19 = 1.0;
      fAmount_18 = tmpvar_22;
      if ((tmpvar_22 < 0.0)) {
        fTarget_19 = -1.0;
        fAmount_18 = -(tmpvar_22);
      };
      fOscillation_17 = (((
        (mix (mix (tmpvar_22, fTarget_19, fAmount_18), fTarget_19, fAmount_18) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_16.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_16.w * _ST_WindBranchWhip.x)));
      vPos_12 = (_glesVertex.xyz + ((tmpvar_14 * fOscillation_17) * _ST_WindBranch.y));
      highp vec4 tmpvar_23;
      tmpvar_23.zw = vec2(0.0, 0.0);
      tmpvar_23.x = ((tmpvar_15 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_23.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_24;
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_23 + 0.5))
       * 2.0) - 1.0));
      tmpvar_24 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      fAdherenceScale_13 = (1.0 - ((
        ((tmpvar_24.x * tmpvar_24.y) * tmpvar_24.x)
       * tmpvar_24.y) * _ST_WindTurbulences.x));
      fAdherenceScale_13 = (fAdherenceScale_13 + ((vOscillations_16.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_12 = (vPos_12 + ((
        ((vRotatedBranchAnchor_3 - vPos_12) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_13) * _glesMultiTexCoord0.z));
      vPos_11 = vPos_12;
    } else {
      highp vec3 vPos_26;
      vPos_26 = vPos_11;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (tmpvar_7.x + tmpvar_7.y));
      highp vec4 vOscillations_29;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.w = 0.0;
      tmpvar_32.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      vPos_26 = (vPos_11 + ((tmpvar_27 * 
        (((mix (
          mix (tmpvar_34, fTarget_31, fAmount_30)
        , fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_11 = vPos_26;
    };
    FinalPosition_5 = vPos_11;
  };
  if ((tmpvar_8 > 0.0)) {
    highp vec3 vPos_35;
    vPos_35 = FinalPosition_5;
    highp float fAdjust_36;
    highp float fLength_37;
    fLength_37 = sqrt(dot (FinalPosition_5, FinalPosition_5));
    highp float tmpvar_38;
    tmpvar_38 = (max ((FinalPosition_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_36 = tmpvar_38;
    if ((tmpvar_38 != 0.0)) {
      fAdjust_36 = pow (tmpvar_38, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_39;
    tmpvar_39.zw = vec2(0.0, 0.0);
    tmpvar_39.x = (tmpvar_7.x + _ST_WindGlobal.x);
    tmpvar_39.y = (tmpvar_7.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_40;
    highp vec4 tmpvar_41;
    tmpvar_41 = abs(((
      fract((tmpvar_39 + 0.5))
     * 2.0) - 1.0));
    tmpvar_40 = (((
      (tmpvar_41 * tmpvar_41)
     * 
      (3.0 - (2.0 * tmpvar_41))
    ) - 0.5) * 2.0);
    vPos_35.xz = (FinalPosition_5.xz + (vRotatedWindVector_4.xz * (
      ((_ST_WindGlobal.y * (tmpvar_40.x + (tmpvar_40.y * tmpvar_40.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_36)));
    vPos_35 = (normalize(vPos_35) * fLength_37);
    FinalPosition_5 = vPos_35;
  };
  tmpvar_2.xyz = FinalPosition_5;
  highp vec3 vertex_42;
  vertex_42 = tmpvar_2.xyz;
  highp vec4 clipPos_43;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp vec4 tmpvar_44;
    tmpvar_44.w = 1.0;
    tmpvar_44.xyz = vertex_42;
    highp vec3 tmpvar_45;
    tmpvar_45 = (_Object2World * tmpvar_44).xyz;
    highp vec4 v_46;
    v_46.x = _World2Object[0].x;
    v_46.y = _World2Object[1].x;
    v_46.z = _World2Object[2].x;
    v_46.w = _World2Object[3].x;
    highp vec4 v_47;
    v_47.x = _World2Object[0].y;
    v_47.y = _World2Object[1].y;
    v_47.z = _World2Object[2].y;
    v_47.w = _World2Object[3].y;
    highp vec4 v_48;
    v_48.x = _World2Object[0].z;
    v_48.y = _World2Object[1].z;
    v_48.z = _World2Object[2].z;
    v_48.w = _World2Object[3].z;
    highp vec3 tmpvar_49;
    tmpvar_49 = normalize(((
      (v_46.xyz * _glesNormal.x)
     + 
      (v_47.xyz * _glesNormal.y)
    ) + (v_48.xyz * _glesNormal.z)));
    highp float tmpvar_50;
    tmpvar_50 = dot (tmpvar_49, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_45 * _WorldSpaceLightPos0.w)
    )));
    highp vec4 tmpvar_51;
    tmpvar_51.w = 1.0;
    tmpvar_51.xyz = (tmpvar_45 - (tmpvar_49 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_50 * tmpvar_50)))
    )));
    clipPos_43 = (unity_MatrixVP * tmpvar_51);
  } else {
    highp vec4 tmpvar_52;
    tmpvar_52.w = 1.0;
    tmpvar_52.xyz = vertex_42;
    clipPos_43 = (glstate_matrix_mvp * tmpvar_52);
  };
  highp vec4 clipPos_53;
  clipPos_53.xyw = clipPos_43.xyw;
  clipPos_53.z = (clipPos_43.z + clamp ((unity_LightShadowBias.x / clipPos_43.w), 0.0, 1.0));
  clipPos_53.z = mix (clipPos_53.z, max (clipPos_53.z, -(clipPos_43.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_53;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
void main ()
{
  _glesFragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}



#endif"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_BRANCH" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
varying highp vec3 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_3;
  highp vec3 vRotatedWindVector_4;
  highp vec3 FinalPosition_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = tmpvar_1.xyz;
  FinalPosition_5 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7.x = _Object2World[3].x;
  tmpvar_7.y = _Object2World[3].y;
  tmpvar_7.z = _Object2World[3].z;
  mediump float tmpvar_8;
  tmpvar_8 = (_WindQuality * _WindEnabled);
  if ((tmpvar_8 > 0.0)) {
    highp mat3 tmpvar_9;
    tmpvar_9[0] = _World2Object[0].xyz;
    tmpvar_9[1] = _World2Object[1].xyz;
    tmpvar_9[2] = _World2Object[2].xyz;
    vRotatedWindVector_4 = normalize((tmpvar_9 * _ST_WindVector.xyz));
    highp mat3 tmpvar_10;
    tmpvar_10[0] = _World2Object[0].xyz;
    tmpvar_10[1] = _World2Object[1].xyz;
    tmpvar_10[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_3 = (normalize((tmpvar_10 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_4 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_3 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_8 >= 3.0)) {
    highp vec3 vPos_11;
    vPos_11 = tmpvar_6;
    if ((tmpvar_8 == 5.0)) {
      highp vec3 vPos_12;
      vPos_12 = tmpvar_6;
      highp float fAdherenceScale_13;
      highp vec3 tmpvar_14;
      tmpvar_14 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_15;
      tmpvar_15 = (_ST_WindBranch.x + (tmpvar_7.x + tmpvar_7.y));
      highp vec4 vOscillations_16;
      highp float fOscillation_17;
      fOscillation_17 = 1.0;
      highp float fAmount_18;
      highp float fTarget_19;
      highp vec4 tmpvar_20;
      tmpvar_20.x = (tmpvar_15 + _glesMultiTexCoord0.w);
      tmpvar_20.y = ((tmpvar_15 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_20.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_15 + _glesMultiTexCoord0.w));
      tmpvar_20.w = ((tmpvar_15 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_21;
      tmpvar_21 = abs(((
        fract((tmpvar_20 + 0.5))
       * 2.0) - 1.0));
      vOscillations_16 = (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0);
      highp float tmpvar_22;
      tmpvar_22 = (vOscillations_16.y * vOscillations_16.z);
      fTarget_19 = 1.0;
      fAmount_18 = tmpvar_22;
      if ((tmpvar_22 < 0.0)) {
        fTarget_19 = -1.0;
        fAmount_18 = -(tmpvar_22);
      };
      fOscillation_17 = (((
        (mix (mix (tmpvar_22, fTarget_19, fAmount_18), fTarget_19, fAmount_18) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_16.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_16.w * _ST_WindBranchWhip.x)));
      vPos_12 = (_glesVertex.xyz + ((tmpvar_14 * fOscillation_17) * _ST_WindBranch.y));
      highp vec4 tmpvar_23;
      tmpvar_23.zw = vec2(0.0, 0.0);
      tmpvar_23.x = ((tmpvar_15 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_23.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_24;
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_23 + 0.5))
       * 2.0) - 1.0));
      tmpvar_24 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      fAdherenceScale_13 = (1.0 - ((
        ((tmpvar_24.x * tmpvar_24.y) * tmpvar_24.x)
       * tmpvar_24.y) * _ST_WindTurbulences.x));
      fAdherenceScale_13 = (fAdherenceScale_13 + ((vOscillations_16.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_12 = (vPos_12 + ((
        ((vRotatedBranchAnchor_3 - vPos_12) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_13) * _glesMultiTexCoord0.z));
      vPos_11 = vPos_12;
    } else {
      highp vec3 vPos_26;
      vPos_26 = vPos_11;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (tmpvar_7.x + tmpvar_7.y));
      highp vec4 vOscillations_29;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.w = 0.0;
      tmpvar_32.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      vPos_26 = (vPos_11 + ((tmpvar_27 * 
        (((mix (
          mix (tmpvar_34, fTarget_31, fAmount_30)
        , fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_11 = vPos_26;
    };
    FinalPosition_5 = vPos_11;
  };
  if ((tmpvar_8 > 0.0)) {
    highp vec3 vPos_35;
    vPos_35 = FinalPosition_5;
    highp float fAdjust_36;
    highp float fLength_37;
    fLength_37 = sqrt(dot (FinalPosition_5, FinalPosition_5));
    highp float tmpvar_38;
    tmpvar_38 = (max ((FinalPosition_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_36 = tmpvar_38;
    if ((tmpvar_38 != 0.0)) {
      fAdjust_36 = pow (tmpvar_38, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_39;
    tmpvar_39.zw = vec2(0.0, 0.0);
    tmpvar_39.x = (tmpvar_7.x + _ST_WindGlobal.x);
    tmpvar_39.y = (tmpvar_7.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_40;
    highp vec4 tmpvar_41;
    tmpvar_41 = abs(((
      fract((tmpvar_39 + 0.5))
     * 2.0) - 1.0));
    tmpvar_40 = (((
      (tmpvar_41 * tmpvar_41)
     * 
      (3.0 - (2.0 * tmpvar_41))
    ) - 0.5) * 2.0);
    vPos_35.xz = (FinalPosition_5.xz + (vRotatedWindVector_4.xz * (
      ((_ST_WindGlobal.y * (tmpvar_40.x + (tmpvar_40.y * tmpvar_40.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_36)));
    vPos_35 = (normalize(vPos_35) * fLength_37);
    FinalPosition_5 = vPos_35;
  };
  tmpvar_2.xyz = FinalPosition_5;
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_2).xyz - _LightPositionRange.xyz);
  gl_Position = (glstate_matrix_mvp * tmpvar_2);
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _LightPositionRange;
varying highp vec3 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = fract((vec4(1.0, 255.0, 65025.0, 1.658138e+07) * min (
    (sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w)
  , 0.999)));
  highp vec4 tmpvar_2;
  tmpvar_2 = (tmpvar_1 - (tmpvar_1.yzww * 0.003921569));
  gl_FragData[0] = tmpvar_2;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_BRANCH" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
out highp vec3 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_3;
  highp vec3 vRotatedWindVector_4;
  highp vec3 FinalPosition_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = tmpvar_1.xyz;
  FinalPosition_5 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7.x = _Object2World[3].x;
  tmpvar_7.y = _Object2World[3].y;
  tmpvar_7.z = _Object2World[3].z;
  mediump float tmpvar_8;
  tmpvar_8 = (_WindQuality * _WindEnabled);
  if ((tmpvar_8 > 0.0)) {
    highp mat3 tmpvar_9;
    tmpvar_9[0] = _World2Object[0].xyz;
    tmpvar_9[1] = _World2Object[1].xyz;
    tmpvar_9[2] = _World2Object[2].xyz;
    vRotatedWindVector_4 = normalize((tmpvar_9 * _ST_WindVector.xyz));
    highp mat3 tmpvar_10;
    tmpvar_10[0] = _World2Object[0].xyz;
    tmpvar_10[1] = _World2Object[1].xyz;
    tmpvar_10[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_3 = (normalize((tmpvar_10 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_4 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_3 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_8 >= 3.0)) {
    highp vec3 vPos_11;
    vPos_11 = tmpvar_6;
    if ((tmpvar_8 == 5.0)) {
      highp vec3 vPos_12;
      vPos_12 = tmpvar_6;
      highp float fAdherenceScale_13;
      highp vec3 tmpvar_14;
      tmpvar_14 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_15;
      tmpvar_15 = (_ST_WindBranch.x + (tmpvar_7.x + tmpvar_7.y));
      highp vec4 vOscillations_16;
      highp float fOscillation_17;
      fOscillation_17 = 1.0;
      highp float fAmount_18;
      highp float fTarget_19;
      highp vec4 tmpvar_20;
      tmpvar_20.x = (tmpvar_15 + _glesMultiTexCoord0.w);
      tmpvar_20.y = ((tmpvar_15 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_20.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_15 + _glesMultiTexCoord0.w));
      tmpvar_20.w = ((tmpvar_15 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_21;
      tmpvar_21 = abs(((
        fract((tmpvar_20 + 0.5))
       * 2.0) - 1.0));
      vOscillations_16 = (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0);
      highp float tmpvar_22;
      tmpvar_22 = (vOscillations_16.y * vOscillations_16.z);
      fTarget_19 = 1.0;
      fAmount_18 = tmpvar_22;
      if ((tmpvar_22 < 0.0)) {
        fTarget_19 = -1.0;
        fAmount_18 = -(tmpvar_22);
      };
      fOscillation_17 = (((
        (mix (mix (tmpvar_22, fTarget_19, fAmount_18), fTarget_19, fAmount_18) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_16.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_16.w * _ST_WindBranchWhip.x)));
      vPos_12 = (_glesVertex.xyz + ((tmpvar_14 * fOscillation_17) * _ST_WindBranch.y));
      highp vec4 tmpvar_23;
      tmpvar_23.zw = vec2(0.0, 0.0);
      tmpvar_23.x = ((tmpvar_15 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_23.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_24;
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_23 + 0.5))
       * 2.0) - 1.0));
      tmpvar_24 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      fAdherenceScale_13 = (1.0 - ((
        ((tmpvar_24.x * tmpvar_24.y) * tmpvar_24.x)
       * tmpvar_24.y) * _ST_WindTurbulences.x));
      fAdherenceScale_13 = (fAdherenceScale_13 + ((vOscillations_16.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_12 = (vPos_12 + ((
        ((vRotatedBranchAnchor_3 - vPos_12) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_13) * _glesMultiTexCoord0.z));
      vPos_11 = vPos_12;
    } else {
      highp vec3 vPos_26;
      vPos_26 = vPos_11;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (tmpvar_7.x + tmpvar_7.y));
      highp vec4 vOscillations_29;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.w = 0.0;
      tmpvar_32.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      vPos_26 = (vPos_11 + ((tmpvar_27 * 
        (((mix (
          mix (tmpvar_34, fTarget_31, fAmount_30)
        , fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_11 = vPos_26;
    };
    FinalPosition_5 = vPos_11;
  };
  if ((tmpvar_8 > 0.0)) {
    highp vec3 vPos_35;
    vPos_35 = FinalPosition_5;
    highp float fAdjust_36;
    highp float fLength_37;
    fLength_37 = sqrt(dot (FinalPosition_5, FinalPosition_5));
    highp float tmpvar_38;
    tmpvar_38 = (max ((FinalPosition_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_36 = tmpvar_38;
    if ((tmpvar_38 != 0.0)) {
      fAdjust_36 = pow (tmpvar_38, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_39;
    tmpvar_39.zw = vec2(0.0, 0.0);
    tmpvar_39.x = (tmpvar_7.x + _ST_WindGlobal.x);
    tmpvar_39.y = (tmpvar_7.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_40;
    highp vec4 tmpvar_41;
    tmpvar_41 = abs(((
      fract((tmpvar_39 + 0.5))
     * 2.0) - 1.0));
    tmpvar_40 = (((
      (tmpvar_41 * tmpvar_41)
     * 
      (3.0 - (2.0 * tmpvar_41))
    ) - 0.5) * 2.0);
    vPos_35.xz = (FinalPosition_5.xz + (vRotatedWindVector_4.xz * (
      ((_ST_WindGlobal.y * (tmpvar_40.x + (tmpvar_40.y * tmpvar_40.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_36)));
    vPos_35 = (normalize(vPos_35) * fLength_37);
    FinalPosition_5 = vPos_35;
  };
  tmpvar_2.xyz = FinalPosition_5;
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_2).xyz - _LightPositionRange.xyz);
  gl_Position = (glstate_matrix_mvp * tmpvar_2);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _LightPositionRange;
in highp vec3 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = vec4((sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w));
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_3;
  highp vec3 vRotatedWindVector_4;
  highp vec3 FinalPosition_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = tmpvar_1.xyz;
  FinalPosition_5 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7.x = _Object2World[3].x;
  tmpvar_7.y = _Object2World[3].y;
  tmpvar_7.z = _Object2World[3].z;
  mediump float tmpvar_8;
  tmpvar_8 = (_WindQuality * _WindEnabled);
  if ((tmpvar_8 > 0.0)) {
    highp mat3 tmpvar_9;
    tmpvar_9[0] = _World2Object[0].xyz;
    tmpvar_9[1] = _World2Object[1].xyz;
    tmpvar_9[2] = _World2Object[2].xyz;
    vRotatedWindVector_4 = normalize((tmpvar_9 * _ST_WindVector.xyz));
    highp mat3 tmpvar_10;
    tmpvar_10[0] = _World2Object[0].xyz;
    tmpvar_10[1] = _World2Object[1].xyz;
    tmpvar_10[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_3 = (normalize((tmpvar_10 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_4 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_3 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_8 >= 3.0)) {
    highp vec3 vPos_11;
    vPos_11 = tmpvar_6;
    if ((tmpvar_8 == 5.0)) {
      highp vec3 vPos_12;
      vPos_12 = tmpvar_6;
      highp float fAdherenceScale_13;
      highp vec3 tmpvar_14;
      tmpvar_14 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_15;
      tmpvar_15 = (_ST_WindBranch.x + (tmpvar_7.x + tmpvar_7.y));
      highp vec4 vOscillations_16;
      highp float fOscillation_17;
      fOscillation_17 = 1.0;
      highp float fAmount_18;
      highp float fTarget_19;
      highp vec4 tmpvar_20;
      tmpvar_20.x = (tmpvar_15 + _glesMultiTexCoord0.w);
      tmpvar_20.y = ((tmpvar_15 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_20.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_15 + _glesMultiTexCoord0.w));
      tmpvar_20.w = ((tmpvar_15 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_21;
      tmpvar_21 = abs(((
        fract((tmpvar_20 + 0.5))
       * 2.0) - 1.0));
      vOscillations_16 = (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0);
      highp float tmpvar_22;
      tmpvar_22 = (vOscillations_16.y * vOscillations_16.z);
      fTarget_19 = 1.0;
      fAmount_18 = tmpvar_22;
      if ((tmpvar_22 < 0.0)) {
        fTarget_19 = -1.0;
        fAmount_18 = -(tmpvar_22);
      };
      fOscillation_17 = (((
        (mix (mix (tmpvar_22, fTarget_19, fAmount_18), fTarget_19, fAmount_18) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_16.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_16.w * _ST_WindBranchWhip.x)));
      vPos_12 = (_glesVertex.xyz + ((tmpvar_14 * fOscillation_17) * _ST_WindBranch.y));
      highp vec4 tmpvar_23;
      tmpvar_23.zw = vec2(0.0, 0.0);
      tmpvar_23.x = ((tmpvar_15 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_23.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_24;
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_23 + 0.5))
       * 2.0) - 1.0));
      tmpvar_24 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      fAdherenceScale_13 = (1.0 - ((
        ((tmpvar_24.x * tmpvar_24.y) * tmpvar_24.x)
       * tmpvar_24.y) * _ST_WindTurbulences.x));
      fAdherenceScale_13 = (fAdherenceScale_13 + ((vOscillations_16.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_12 = (vPos_12 + ((
        ((vRotatedBranchAnchor_3 - vPos_12) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_13) * _glesMultiTexCoord0.z));
      vPos_11 = vPos_12;
    } else {
      highp vec3 vPos_26;
      vPos_26 = vPos_11;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (tmpvar_7.x + tmpvar_7.y));
      highp vec4 vOscillations_29;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.w = 0.0;
      tmpvar_32.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      vPos_26 = (vPos_11 + ((tmpvar_27 * 
        (((mix (
          mix (tmpvar_34, fTarget_31, fAmount_30)
        , fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_11 = vPos_26;
    };
    FinalPosition_5 = vPos_11;
  };
  if ((tmpvar_8 > 0.0)) {
    highp vec3 vPos_35;
    vPos_35 = FinalPosition_5;
    highp float fAdjust_36;
    highp float fLength_37;
    fLength_37 = sqrt(dot (FinalPosition_5, FinalPosition_5));
    highp float tmpvar_38;
    tmpvar_38 = (max ((FinalPosition_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_36 = tmpvar_38;
    if ((tmpvar_38 != 0.0)) {
      fAdjust_36 = pow (tmpvar_38, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_39;
    tmpvar_39.zw = vec2(0.0, 0.0);
    tmpvar_39.x = (tmpvar_7.x + _ST_WindGlobal.x);
    tmpvar_39.y = (tmpvar_7.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_40;
    highp vec4 tmpvar_41;
    tmpvar_41 = abs(((
      fract((tmpvar_39 + 0.5))
     * 2.0) - 1.0));
    tmpvar_40 = (((
      (tmpvar_41 * tmpvar_41)
     * 
      (3.0 - (2.0 * tmpvar_41))
    ) - 0.5) * 2.0);
    vPos_35.xz = (FinalPosition_5.xz + (vRotatedWindVector_4.xz * (
      ((_ST_WindGlobal.y * (tmpvar_40.x + (tmpvar_40.y * tmpvar_40.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_36)));
    vPos_35 = (normalize(vPos_35) * fLength_37);
    FinalPosition_5 = vPos_35;
  };
  tmpvar_2.xyz = FinalPosition_5;
  highp vec3 vertex_42;
  vertex_42 = tmpvar_2.xyz;
  highp vec4 clipPos_43;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp vec4 tmpvar_44;
    tmpvar_44.w = 1.0;
    tmpvar_44.xyz = vertex_42;
    highp vec3 tmpvar_45;
    tmpvar_45 = (_Object2World * tmpvar_44).xyz;
    highp vec4 v_46;
    v_46.x = _World2Object[0].x;
    v_46.y = _World2Object[1].x;
    v_46.z = _World2Object[2].x;
    v_46.w = _World2Object[3].x;
    highp vec4 v_47;
    v_47.x = _World2Object[0].y;
    v_47.y = _World2Object[1].y;
    v_47.z = _World2Object[2].y;
    v_47.w = _World2Object[3].y;
    highp vec4 v_48;
    v_48.x = _World2Object[0].z;
    v_48.y = _World2Object[1].z;
    v_48.z = _World2Object[2].z;
    v_48.w = _World2Object[3].z;
    highp vec3 tmpvar_49;
    tmpvar_49 = normalize(((
      (v_46.xyz * _glesNormal.x)
     + 
      (v_47.xyz * _glesNormal.y)
    ) + (v_48.xyz * _glesNormal.z)));
    highp float tmpvar_50;
    tmpvar_50 = dot (tmpvar_49, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_45 * _WorldSpaceLightPos0.w)
    )));
    highp vec4 tmpvar_51;
    tmpvar_51.w = 1.0;
    tmpvar_51.xyz = (tmpvar_45 - (tmpvar_49 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_50 * tmpvar_50)))
    )));
    clipPos_43 = (unity_MatrixVP * tmpvar_51);
  } else {
    highp vec4 tmpvar_52;
    tmpvar_52.w = 1.0;
    tmpvar_52.xyz = vertex_42;
    clipPos_43 = (glstate_matrix_mvp * tmpvar_52);
  };
  highp vec4 clipPos_53;
  clipPos_53.xyw = clipPos_43.xyw;
  clipPos_53.z = (clipPos_43.z + clamp ((unity_LightShadowBias.x / clipPos_43.w), 0.0, 1.0));
  clipPos_53.z = mix (clipPos_53.z, max (clipPos_53.z, -(clipPos_43.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_53;
}



#endif
#ifdef FRAGMENT

void main ()
{
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_3;
  highp vec3 vRotatedWindVector_4;
  highp vec3 FinalPosition_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = tmpvar_1.xyz;
  FinalPosition_5 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7.x = _Object2World[3].x;
  tmpvar_7.y = _Object2World[3].y;
  tmpvar_7.z = _Object2World[3].z;
  mediump float tmpvar_8;
  tmpvar_8 = (_WindQuality * _WindEnabled);
  if ((tmpvar_8 > 0.0)) {
    highp mat3 tmpvar_9;
    tmpvar_9[0] = _World2Object[0].xyz;
    tmpvar_9[1] = _World2Object[1].xyz;
    tmpvar_9[2] = _World2Object[2].xyz;
    vRotatedWindVector_4 = normalize((tmpvar_9 * _ST_WindVector.xyz));
    highp mat3 tmpvar_10;
    tmpvar_10[0] = _World2Object[0].xyz;
    tmpvar_10[1] = _World2Object[1].xyz;
    tmpvar_10[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_3 = (normalize((tmpvar_10 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_4 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_3 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_8 >= 3.0)) {
    highp vec3 vPos_11;
    vPos_11 = tmpvar_6;
    if ((tmpvar_8 == 5.0)) {
      highp vec3 vPos_12;
      vPos_12 = tmpvar_6;
      highp float fAdherenceScale_13;
      highp vec3 tmpvar_14;
      tmpvar_14 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_15;
      tmpvar_15 = (_ST_WindBranch.x + (tmpvar_7.x + tmpvar_7.y));
      highp vec4 vOscillations_16;
      highp float fOscillation_17;
      fOscillation_17 = 1.0;
      highp float fAmount_18;
      highp float fTarget_19;
      highp vec4 tmpvar_20;
      tmpvar_20.x = (tmpvar_15 + _glesMultiTexCoord0.w);
      tmpvar_20.y = ((tmpvar_15 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_20.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_15 + _glesMultiTexCoord0.w));
      tmpvar_20.w = ((tmpvar_15 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_21;
      tmpvar_21 = abs(((
        fract((tmpvar_20 + 0.5))
       * 2.0) - 1.0));
      vOscillations_16 = (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0);
      highp float tmpvar_22;
      tmpvar_22 = (vOscillations_16.y * vOscillations_16.z);
      fTarget_19 = 1.0;
      fAmount_18 = tmpvar_22;
      if ((tmpvar_22 < 0.0)) {
        fTarget_19 = -1.0;
        fAmount_18 = -(tmpvar_22);
      };
      fOscillation_17 = (((
        (mix (mix (tmpvar_22, fTarget_19, fAmount_18), fTarget_19, fAmount_18) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_16.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_16.w * _ST_WindBranchWhip.x)));
      vPos_12 = (_glesVertex.xyz + ((tmpvar_14 * fOscillation_17) * _ST_WindBranch.y));
      highp vec4 tmpvar_23;
      tmpvar_23.zw = vec2(0.0, 0.0);
      tmpvar_23.x = ((tmpvar_15 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_23.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_24;
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_23 + 0.5))
       * 2.0) - 1.0));
      tmpvar_24 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      fAdherenceScale_13 = (1.0 - ((
        ((tmpvar_24.x * tmpvar_24.y) * tmpvar_24.x)
       * tmpvar_24.y) * _ST_WindTurbulences.x));
      fAdherenceScale_13 = (fAdherenceScale_13 + ((vOscillations_16.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_12 = (vPos_12 + ((
        ((vRotatedBranchAnchor_3 - vPos_12) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_13) * _glesMultiTexCoord0.z));
      vPos_11 = vPos_12;
    } else {
      highp vec3 vPos_26;
      vPos_26 = vPos_11;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (tmpvar_7.x + tmpvar_7.y));
      highp vec4 vOscillations_29;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.w = 0.0;
      tmpvar_32.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      vPos_26 = (vPos_11 + ((tmpvar_27 * 
        (((mix (
          mix (tmpvar_34, fTarget_31, fAmount_30)
        , fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_11 = vPos_26;
    };
    FinalPosition_5 = vPos_11;
  };
  if ((tmpvar_8 > 0.0)) {
    highp vec3 vPos_35;
    vPos_35 = FinalPosition_5;
    highp float fAdjust_36;
    highp float fLength_37;
    fLength_37 = sqrt(dot (FinalPosition_5, FinalPosition_5));
    highp float tmpvar_38;
    tmpvar_38 = (max ((FinalPosition_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_36 = tmpvar_38;
    if ((tmpvar_38 != 0.0)) {
      fAdjust_36 = pow (tmpvar_38, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_39;
    tmpvar_39.zw = vec2(0.0, 0.0);
    tmpvar_39.x = (tmpvar_7.x + _ST_WindGlobal.x);
    tmpvar_39.y = (tmpvar_7.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_40;
    highp vec4 tmpvar_41;
    tmpvar_41 = abs(((
      fract((tmpvar_39 + 0.5))
     * 2.0) - 1.0));
    tmpvar_40 = (((
      (tmpvar_41 * tmpvar_41)
     * 
      (3.0 - (2.0 * tmpvar_41))
    ) - 0.5) * 2.0);
    vPos_35.xz = (FinalPosition_5.xz + (vRotatedWindVector_4.xz * (
      ((_ST_WindGlobal.y * (tmpvar_40.x + (tmpvar_40.y * tmpvar_40.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_36)));
    vPos_35 = (normalize(vPos_35) * fLength_37);
    FinalPosition_5 = vPos_35;
  };
  tmpvar_2.xyz = FinalPosition_5;
  highp vec3 vertex_42;
  vertex_42 = tmpvar_2.xyz;
  highp vec4 clipPos_43;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp vec4 tmpvar_44;
    tmpvar_44.w = 1.0;
    tmpvar_44.xyz = vertex_42;
    highp vec3 tmpvar_45;
    tmpvar_45 = (_Object2World * tmpvar_44).xyz;
    highp vec4 v_46;
    v_46.x = _World2Object[0].x;
    v_46.y = _World2Object[1].x;
    v_46.z = _World2Object[2].x;
    v_46.w = _World2Object[3].x;
    highp vec4 v_47;
    v_47.x = _World2Object[0].y;
    v_47.y = _World2Object[1].y;
    v_47.z = _World2Object[2].y;
    v_47.w = _World2Object[3].y;
    highp vec4 v_48;
    v_48.x = _World2Object[0].z;
    v_48.y = _World2Object[1].z;
    v_48.z = _World2Object[2].z;
    v_48.w = _World2Object[3].z;
    highp vec3 tmpvar_49;
    tmpvar_49 = normalize(((
      (v_46.xyz * _glesNormal.x)
     + 
      (v_47.xyz * _glesNormal.y)
    ) + (v_48.xyz * _glesNormal.z)));
    highp float tmpvar_50;
    tmpvar_50 = dot (tmpvar_49, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_45 * _WorldSpaceLightPos0.w)
    )));
    highp vec4 tmpvar_51;
    tmpvar_51.w = 1.0;
    tmpvar_51.xyz = (tmpvar_45 - (tmpvar_49 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_50 * tmpvar_50)))
    )));
    clipPos_43 = (unity_MatrixVP * tmpvar_51);
  } else {
    highp vec4 tmpvar_52;
    tmpvar_52.w = 1.0;
    tmpvar_52.xyz = vertex_42;
    clipPos_43 = (glstate_matrix_mvp * tmpvar_52);
  };
  highp vec4 clipPos_53;
  clipPos_53.xyw = clipPos_43.xyw;
  clipPos_53.z = (clipPos_43.z + clamp ((unity_LightShadowBias.x / clipPos_43.w), 0.0, 1.0));
  clipPos_53.z = mix (clipPos_53.z, max (clipPos_53.z, -(clipPos_43.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_53;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
void main ()
{
  _glesFragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}



#endif"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
varying highp vec3 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_3;
  highp vec3 vRotatedWindVector_4;
  highp vec3 FinalPosition_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = tmpvar_1.xyz;
  FinalPosition_5 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7.x = _Object2World[3].x;
  tmpvar_7.y = _Object2World[3].y;
  tmpvar_7.z = _Object2World[3].z;
  mediump float tmpvar_8;
  tmpvar_8 = (_WindQuality * _WindEnabled);
  if ((tmpvar_8 > 0.0)) {
    highp mat3 tmpvar_9;
    tmpvar_9[0] = _World2Object[0].xyz;
    tmpvar_9[1] = _World2Object[1].xyz;
    tmpvar_9[2] = _World2Object[2].xyz;
    vRotatedWindVector_4 = normalize((tmpvar_9 * _ST_WindVector.xyz));
    highp mat3 tmpvar_10;
    tmpvar_10[0] = _World2Object[0].xyz;
    tmpvar_10[1] = _World2Object[1].xyz;
    tmpvar_10[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_3 = (normalize((tmpvar_10 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_4 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_3 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_8 >= 3.0)) {
    highp vec3 vPos_11;
    vPos_11 = tmpvar_6;
    if ((tmpvar_8 == 5.0)) {
      highp vec3 vPos_12;
      vPos_12 = tmpvar_6;
      highp float fAdherenceScale_13;
      highp vec3 tmpvar_14;
      tmpvar_14 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_15;
      tmpvar_15 = (_ST_WindBranch.x + (tmpvar_7.x + tmpvar_7.y));
      highp vec4 vOscillations_16;
      highp float fOscillation_17;
      fOscillation_17 = 1.0;
      highp float fAmount_18;
      highp float fTarget_19;
      highp vec4 tmpvar_20;
      tmpvar_20.x = (tmpvar_15 + _glesMultiTexCoord0.w);
      tmpvar_20.y = ((tmpvar_15 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_20.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_15 + _glesMultiTexCoord0.w));
      tmpvar_20.w = ((tmpvar_15 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_21;
      tmpvar_21 = abs(((
        fract((tmpvar_20 + 0.5))
       * 2.0) - 1.0));
      vOscillations_16 = (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0);
      highp float tmpvar_22;
      tmpvar_22 = (vOscillations_16.y * vOscillations_16.z);
      fTarget_19 = 1.0;
      fAmount_18 = tmpvar_22;
      if ((tmpvar_22 < 0.0)) {
        fTarget_19 = -1.0;
        fAmount_18 = -(tmpvar_22);
      };
      fOscillation_17 = (((
        (mix (mix (tmpvar_22, fTarget_19, fAmount_18), fTarget_19, fAmount_18) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_16.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_16.w * _ST_WindBranchWhip.x)));
      vPos_12 = (_glesVertex.xyz + ((tmpvar_14 * fOscillation_17) * _ST_WindBranch.y));
      highp vec4 tmpvar_23;
      tmpvar_23.zw = vec2(0.0, 0.0);
      tmpvar_23.x = ((tmpvar_15 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_23.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_24;
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_23 + 0.5))
       * 2.0) - 1.0));
      tmpvar_24 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      fAdherenceScale_13 = (1.0 - ((
        ((tmpvar_24.x * tmpvar_24.y) * tmpvar_24.x)
       * tmpvar_24.y) * _ST_WindTurbulences.x));
      fAdherenceScale_13 = (fAdherenceScale_13 + ((vOscillations_16.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_12 = (vPos_12 + ((
        ((vRotatedBranchAnchor_3 - vPos_12) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_13) * _glesMultiTexCoord0.z));
      vPos_11 = vPos_12;
    } else {
      highp vec3 vPos_26;
      vPos_26 = vPos_11;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (tmpvar_7.x + tmpvar_7.y));
      highp vec4 vOscillations_29;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.w = 0.0;
      tmpvar_32.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      vPos_26 = (vPos_11 + ((tmpvar_27 * 
        (((mix (
          mix (tmpvar_34, fTarget_31, fAmount_30)
        , fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_11 = vPos_26;
    };
    FinalPosition_5 = vPos_11;
  };
  if ((tmpvar_8 > 0.0)) {
    highp vec3 vPos_35;
    vPos_35 = FinalPosition_5;
    highp float fAdjust_36;
    highp float fLength_37;
    fLength_37 = sqrt(dot (FinalPosition_5, FinalPosition_5));
    highp float tmpvar_38;
    tmpvar_38 = (max ((FinalPosition_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_36 = tmpvar_38;
    if ((tmpvar_38 != 0.0)) {
      fAdjust_36 = pow (tmpvar_38, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_39;
    tmpvar_39.zw = vec2(0.0, 0.0);
    tmpvar_39.x = (tmpvar_7.x + _ST_WindGlobal.x);
    tmpvar_39.y = (tmpvar_7.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_40;
    highp vec4 tmpvar_41;
    tmpvar_41 = abs(((
      fract((tmpvar_39 + 0.5))
     * 2.0) - 1.0));
    tmpvar_40 = (((
      (tmpvar_41 * tmpvar_41)
     * 
      (3.0 - (2.0 * tmpvar_41))
    ) - 0.5) * 2.0);
    vPos_35.xz = (FinalPosition_5.xz + (vRotatedWindVector_4.xz * (
      ((_ST_WindGlobal.y * (tmpvar_40.x + (tmpvar_40.y * tmpvar_40.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_36)));
    vPos_35 = (normalize(vPos_35) * fLength_37);
    FinalPosition_5 = vPos_35;
  };
  tmpvar_2.xyz = FinalPosition_5;
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_2).xyz - _LightPositionRange.xyz);
  gl_Position = (glstate_matrix_mvp * tmpvar_2);
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _LightPositionRange;
varying highp vec3 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = fract((vec4(1.0, 255.0, 65025.0, 1.658138e+07) * min (
    (sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w)
  , 0.999)));
  highp vec4 tmpvar_2;
  tmpvar_2 = (tmpvar_1 - (tmpvar_1.yzww * 0.003921569));
  gl_FragData[0] = tmpvar_2;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
out highp vec3 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_3;
  highp vec3 vRotatedWindVector_4;
  highp vec3 FinalPosition_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = tmpvar_1.xyz;
  FinalPosition_5 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7.x = _Object2World[3].x;
  tmpvar_7.y = _Object2World[3].y;
  tmpvar_7.z = _Object2World[3].z;
  mediump float tmpvar_8;
  tmpvar_8 = (_WindQuality * _WindEnabled);
  if ((tmpvar_8 > 0.0)) {
    highp mat3 tmpvar_9;
    tmpvar_9[0] = _World2Object[0].xyz;
    tmpvar_9[1] = _World2Object[1].xyz;
    tmpvar_9[2] = _World2Object[2].xyz;
    vRotatedWindVector_4 = normalize((tmpvar_9 * _ST_WindVector.xyz));
    highp mat3 tmpvar_10;
    tmpvar_10[0] = _World2Object[0].xyz;
    tmpvar_10[1] = _World2Object[1].xyz;
    tmpvar_10[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_3 = (normalize((tmpvar_10 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_4 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_3 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_8 >= 3.0)) {
    highp vec3 vPos_11;
    vPos_11 = tmpvar_6;
    if ((tmpvar_8 == 5.0)) {
      highp vec3 vPos_12;
      vPos_12 = tmpvar_6;
      highp float fAdherenceScale_13;
      highp vec3 tmpvar_14;
      tmpvar_14 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_15;
      tmpvar_15 = (_ST_WindBranch.x + (tmpvar_7.x + tmpvar_7.y));
      highp vec4 vOscillations_16;
      highp float fOscillation_17;
      fOscillation_17 = 1.0;
      highp float fAmount_18;
      highp float fTarget_19;
      highp vec4 tmpvar_20;
      tmpvar_20.x = (tmpvar_15 + _glesMultiTexCoord0.w);
      tmpvar_20.y = ((tmpvar_15 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_20.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_15 + _glesMultiTexCoord0.w));
      tmpvar_20.w = ((tmpvar_15 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_21;
      tmpvar_21 = abs(((
        fract((tmpvar_20 + 0.5))
       * 2.0) - 1.0));
      vOscillations_16 = (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0);
      highp float tmpvar_22;
      tmpvar_22 = (vOscillations_16.y * vOscillations_16.z);
      fTarget_19 = 1.0;
      fAmount_18 = tmpvar_22;
      if ((tmpvar_22 < 0.0)) {
        fTarget_19 = -1.0;
        fAmount_18 = -(tmpvar_22);
      };
      fOscillation_17 = (((
        (mix (mix (tmpvar_22, fTarget_19, fAmount_18), fTarget_19, fAmount_18) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_16.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_16.w * _ST_WindBranchWhip.x)));
      vPos_12 = (_glesVertex.xyz + ((tmpvar_14 * fOscillation_17) * _ST_WindBranch.y));
      highp vec4 tmpvar_23;
      tmpvar_23.zw = vec2(0.0, 0.0);
      tmpvar_23.x = ((tmpvar_15 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_23.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_24;
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_23 + 0.5))
       * 2.0) - 1.0));
      tmpvar_24 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      fAdherenceScale_13 = (1.0 - ((
        ((tmpvar_24.x * tmpvar_24.y) * tmpvar_24.x)
       * tmpvar_24.y) * _ST_WindTurbulences.x));
      fAdherenceScale_13 = (fAdherenceScale_13 + ((vOscillations_16.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_12 = (vPos_12 + ((
        ((vRotatedBranchAnchor_3 - vPos_12) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_13) * _glesMultiTexCoord0.z));
      vPos_11 = vPos_12;
    } else {
      highp vec3 vPos_26;
      vPos_26 = vPos_11;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (tmpvar_7.x + tmpvar_7.y));
      highp vec4 vOscillations_29;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.w = 0.0;
      tmpvar_32.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      vPos_26 = (vPos_11 + ((tmpvar_27 * 
        (((mix (
          mix (tmpvar_34, fTarget_31, fAmount_30)
        , fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_11 = vPos_26;
    };
    FinalPosition_5 = vPos_11;
  };
  if ((tmpvar_8 > 0.0)) {
    highp vec3 vPos_35;
    vPos_35 = FinalPosition_5;
    highp float fAdjust_36;
    highp float fLength_37;
    fLength_37 = sqrt(dot (FinalPosition_5, FinalPosition_5));
    highp float tmpvar_38;
    tmpvar_38 = (max ((FinalPosition_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_36 = tmpvar_38;
    if ((tmpvar_38 != 0.0)) {
      fAdjust_36 = pow (tmpvar_38, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_39;
    tmpvar_39.zw = vec2(0.0, 0.0);
    tmpvar_39.x = (tmpvar_7.x + _ST_WindGlobal.x);
    tmpvar_39.y = (tmpvar_7.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_40;
    highp vec4 tmpvar_41;
    tmpvar_41 = abs(((
      fract((tmpvar_39 + 0.5))
     * 2.0) - 1.0));
    tmpvar_40 = (((
      (tmpvar_41 * tmpvar_41)
     * 
      (3.0 - (2.0 * tmpvar_41))
    ) - 0.5) * 2.0);
    vPos_35.xz = (FinalPosition_5.xz + (vRotatedWindVector_4.xz * (
      ((_ST_WindGlobal.y * (tmpvar_40.x + (tmpvar_40.y * tmpvar_40.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_36)));
    vPos_35 = (normalize(vPos_35) * fLength_37);
    FinalPosition_5 = vPos_35;
  };
  tmpvar_2.xyz = FinalPosition_5;
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_2).xyz - _LightPositionRange.xyz);
  gl_Position = (glstate_matrix_mvp * tmpvar_2);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _LightPositionRange;
in highp vec3 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = vec4((sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w));
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_3;
  highp vec3 vRotatedWindVector_4;
  highp vec3 FinalPosition_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = tmpvar_1.xyz;
  FinalPosition_5 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7.x = _Object2World[3].x;
  tmpvar_7.y = _Object2World[3].y;
  tmpvar_7.z = _Object2World[3].z;
  mediump float tmpvar_8;
  tmpvar_8 = (_WindQuality * _WindEnabled);
  if ((tmpvar_8 > 0.0)) {
    highp mat3 tmpvar_9;
    tmpvar_9[0] = _World2Object[0].xyz;
    tmpvar_9[1] = _World2Object[1].xyz;
    tmpvar_9[2] = _World2Object[2].xyz;
    vRotatedWindVector_4 = normalize((tmpvar_9 * _ST_WindVector.xyz));
    highp mat3 tmpvar_10;
    tmpvar_10[0] = _World2Object[0].xyz;
    tmpvar_10[1] = _World2Object[1].xyz;
    tmpvar_10[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_3 = (normalize((tmpvar_10 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_4 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_3 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_8 >= 3.0)) {
    highp vec3 vPos_11;
    vPos_11 = tmpvar_6;
    if ((tmpvar_8 == 5.0)) {
      highp vec3 vPos_12;
      vPos_12 = tmpvar_6;
      highp float fAdherenceScale_13;
      highp vec3 tmpvar_14;
      tmpvar_14 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_15;
      tmpvar_15 = (_ST_WindBranch.x + (tmpvar_7.x + tmpvar_7.y));
      highp vec4 vOscillations_16;
      highp float fOscillation_17;
      fOscillation_17 = 1.0;
      highp float fAmount_18;
      highp float fTarget_19;
      highp vec4 tmpvar_20;
      tmpvar_20.x = (tmpvar_15 + _glesMultiTexCoord0.w);
      tmpvar_20.y = ((tmpvar_15 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_20.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_15 + _glesMultiTexCoord0.w));
      tmpvar_20.w = ((tmpvar_15 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_21;
      tmpvar_21 = abs(((
        fract((tmpvar_20 + 0.5))
       * 2.0) - 1.0));
      vOscillations_16 = (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0);
      highp float tmpvar_22;
      tmpvar_22 = (vOscillations_16.y * vOscillations_16.z);
      fTarget_19 = 1.0;
      fAmount_18 = tmpvar_22;
      if ((tmpvar_22 < 0.0)) {
        fTarget_19 = -1.0;
        fAmount_18 = -(tmpvar_22);
      };
      fOscillation_17 = (((
        (mix (mix (tmpvar_22, fTarget_19, fAmount_18), fTarget_19, fAmount_18) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_16.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_16.w * _ST_WindBranchWhip.x)));
      vPos_12 = (_glesVertex.xyz + ((tmpvar_14 * fOscillation_17) * _ST_WindBranch.y));
      highp vec4 tmpvar_23;
      tmpvar_23.zw = vec2(0.0, 0.0);
      tmpvar_23.x = ((tmpvar_15 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_23.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_24;
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_23 + 0.5))
       * 2.0) - 1.0));
      tmpvar_24 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      fAdherenceScale_13 = (1.0 - ((
        ((tmpvar_24.x * tmpvar_24.y) * tmpvar_24.x)
       * tmpvar_24.y) * _ST_WindTurbulences.x));
      fAdherenceScale_13 = (fAdherenceScale_13 + ((vOscillations_16.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_12 = (vPos_12 + ((
        ((vRotatedBranchAnchor_3 - vPos_12) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_13) * _glesMultiTexCoord0.z));
      vPos_11 = vPos_12;
    } else {
      highp vec3 vPos_26;
      vPos_26 = vPos_11;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (tmpvar_7.x + tmpvar_7.y));
      highp vec4 vOscillations_29;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.w = 0.0;
      tmpvar_32.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      vPos_26 = (vPos_11 + ((tmpvar_27 * 
        (((mix (
          mix (tmpvar_34, fTarget_31, fAmount_30)
        , fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_11 = vPos_26;
    };
    FinalPosition_5 = vPos_11;
  };
  if ((tmpvar_8 > 0.0)) {
    highp vec3 vPos_35;
    vPos_35 = FinalPosition_5;
    highp float fAdjust_36;
    highp float fLength_37;
    fLength_37 = sqrt(dot (FinalPosition_5, FinalPosition_5));
    highp float tmpvar_38;
    tmpvar_38 = (max ((FinalPosition_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_36 = tmpvar_38;
    if ((tmpvar_38 != 0.0)) {
      fAdjust_36 = pow (tmpvar_38, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_39;
    tmpvar_39.zw = vec2(0.0, 0.0);
    tmpvar_39.x = (tmpvar_7.x + _ST_WindGlobal.x);
    tmpvar_39.y = (tmpvar_7.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_40;
    highp vec4 tmpvar_41;
    tmpvar_41 = abs(((
      fract((tmpvar_39 + 0.5))
     * 2.0) - 1.0));
    tmpvar_40 = (((
      (tmpvar_41 * tmpvar_41)
     * 
      (3.0 - (2.0 * tmpvar_41))
    ) - 0.5) * 2.0);
    vPos_35.xz = (FinalPosition_5.xz + (vRotatedWindVector_4.xz * (
      ((_ST_WindGlobal.y * (tmpvar_40.x + (tmpvar_40.y * tmpvar_40.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_36)));
    vPos_35 = (normalize(vPos_35) * fLength_37);
    FinalPosition_5 = vPos_35;
  };
  tmpvar_2.xyz = FinalPosition_5;
  highp vec3 vertex_42;
  vertex_42 = tmpvar_2.xyz;
  highp vec4 clipPos_43;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp vec4 tmpvar_44;
    tmpvar_44.w = 1.0;
    tmpvar_44.xyz = vertex_42;
    highp vec3 tmpvar_45;
    tmpvar_45 = (_Object2World * tmpvar_44).xyz;
    highp vec4 v_46;
    v_46.x = _World2Object[0].x;
    v_46.y = _World2Object[1].x;
    v_46.z = _World2Object[2].x;
    v_46.w = _World2Object[3].x;
    highp vec4 v_47;
    v_47.x = _World2Object[0].y;
    v_47.y = _World2Object[1].y;
    v_47.z = _World2Object[2].y;
    v_47.w = _World2Object[3].y;
    highp vec4 v_48;
    v_48.x = _World2Object[0].z;
    v_48.y = _World2Object[1].z;
    v_48.z = _World2Object[2].z;
    v_48.w = _World2Object[3].z;
    highp vec3 tmpvar_49;
    tmpvar_49 = normalize(((
      (v_46.xyz * _glesNormal.x)
     + 
      (v_47.xyz * _glesNormal.y)
    ) + (v_48.xyz * _glesNormal.z)));
    highp float tmpvar_50;
    tmpvar_50 = dot (tmpvar_49, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_45 * _WorldSpaceLightPos0.w)
    )));
    highp vec4 tmpvar_51;
    tmpvar_51.w = 1.0;
    tmpvar_51.xyz = (tmpvar_45 - (tmpvar_49 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_50 * tmpvar_50)))
    )));
    clipPos_43 = (unity_MatrixVP * tmpvar_51);
  } else {
    highp vec4 tmpvar_52;
    tmpvar_52.w = 1.0;
    tmpvar_52.xyz = vertex_42;
    clipPos_43 = (glstate_matrix_mvp * tmpvar_52);
  };
  highp vec4 clipPos_53;
  clipPos_53.xyw = clipPos_43.xyw;
  clipPos_53.z = (clipPos_43.z + clamp ((unity_LightShadowBias.x / clipPos_43.w), 0.0, 1.0));
  clipPos_53.z = mix (clipPos_53.z, max (clipPos_53.z, -(clipPos_43.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_53;
}



#endif
#ifdef FRAGMENT

void main ()
{
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_3;
  highp vec3 vRotatedWindVector_4;
  highp vec3 FinalPosition_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = tmpvar_1.xyz;
  FinalPosition_5 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7.x = _Object2World[3].x;
  tmpvar_7.y = _Object2World[3].y;
  tmpvar_7.z = _Object2World[3].z;
  mediump float tmpvar_8;
  tmpvar_8 = (_WindQuality * _WindEnabled);
  if ((tmpvar_8 > 0.0)) {
    highp mat3 tmpvar_9;
    tmpvar_9[0] = _World2Object[0].xyz;
    tmpvar_9[1] = _World2Object[1].xyz;
    tmpvar_9[2] = _World2Object[2].xyz;
    vRotatedWindVector_4 = normalize((tmpvar_9 * _ST_WindVector.xyz));
    highp mat3 tmpvar_10;
    tmpvar_10[0] = _World2Object[0].xyz;
    tmpvar_10[1] = _World2Object[1].xyz;
    tmpvar_10[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_3 = (normalize((tmpvar_10 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_4 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_3 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_8 >= 3.0)) {
    highp vec3 vPos_11;
    vPos_11 = tmpvar_6;
    if ((tmpvar_8 == 5.0)) {
      highp vec3 vPos_12;
      vPos_12 = tmpvar_6;
      highp float fAdherenceScale_13;
      highp vec3 tmpvar_14;
      tmpvar_14 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_15;
      tmpvar_15 = (_ST_WindBranch.x + (tmpvar_7.x + tmpvar_7.y));
      highp vec4 vOscillations_16;
      highp float fOscillation_17;
      fOscillation_17 = 1.0;
      highp float fAmount_18;
      highp float fTarget_19;
      highp vec4 tmpvar_20;
      tmpvar_20.x = (tmpvar_15 + _glesMultiTexCoord0.w);
      tmpvar_20.y = ((tmpvar_15 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_20.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_15 + _glesMultiTexCoord0.w));
      tmpvar_20.w = ((tmpvar_15 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_21;
      tmpvar_21 = abs(((
        fract((tmpvar_20 + 0.5))
       * 2.0) - 1.0));
      vOscillations_16 = (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0);
      highp float tmpvar_22;
      tmpvar_22 = (vOscillations_16.y * vOscillations_16.z);
      fTarget_19 = 1.0;
      fAmount_18 = tmpvar_22;
      if ((tmpvar_22 < 0.0)) {
        fTarget_19 = -1.0;
        fAmount_18 = -(tmpvar_22);
      };
      fOscillation_17 = (((
        (mix (mix (tmpvar_22, fTarget_19, fAmount_18), fTarget_19, fAmount_18) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_16.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_16.w * _ST_WindBranchWhip.x)));
      vPos_12 = (_glesVertex.xyz + ((tmpvar_14 * fOscillation_17) * _ST_WindBranch.y));
      highp vec4 tmpvar_23;
      tmpvar_23.zw = vec2(0.0, 0.0);
      tmpvar_23.x = ((tmpvar_15 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_23.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_24;
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_23 + 0.5))
       * 2.0) - 1.0));
      tmpvar_24 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      fAdherenceScale_13 = (1.0 - ((
        ((tmpvar_24.x * tmpvar_24.y) * tmpvar_24.x)
       * tmpvar_24.y) * _ST_WindTurbulences.x));
      fAdherenceScale_13 = (fAdherenceScale_13 + ((vOscillations_16.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_12 = (vPos_12 + ((
        ((vRotatedBranchAnchor_3 - vPos_12) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_13) * _glesMultiTexCoord0.z));
      vPos_11 = vPos_12;
    } else {
      highp vec3 vPos_26;
      vPos_26 = vPos_11;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (tmpvar_7.x + tmpvar_7.y));
      highp vec4 vOscillations_29;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.w = 0.0;
      tmpvar_32.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      vPos_26 = (vPos_11 + ((tmpvar_27 * 
        (((mix (
          mix (tmpvar_34, fTarget_31, fAmount_30)
        , fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_11 = vPos_26;
    };
    FinalPosition_5 = vPos_11;
  };
  if ((tmpvar_8 > 0.0)) {
    highp vec3 vPos_35;
    vPos_35 = FinalPosition_5;
    highp float fAdjust_36;
    highp float fLength_37;
    fLength_37 = sqrt(dot (FinalPosition_5, FinalPosition_5));
    highp float tmpvar_38;
    tmpvar_38 = (max ((FinalPosition_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_36 = tmpvar_38;
    if ((tmpvar_38 != 0.0)) {
      fAdjust_36 = pow (tmpvar_38, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_39;
    tmpvar_39.zw = vec2(0.0, 0.0);
    tmpvar_39.x = (tmpvar_7.x + _ST_WindGlobal.x);
    tmpvar_39.y = (tmpvar_7.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_40;
    highp vec4 tmpvar_41;
    tmpvar_41 = abs(((
      fract((tmpvar_39 + 0.5))
     * 2.0) - 1.0));
    tmpvar_40 = (((
      (tmpvar_41 * tmpvar_41)
     * 
      (3.0 - (2.0 * tmpvar_41))
    ) - 0.5) * 2.0);
    vPos_35.xz = (FinalPosition_5.xz + (vRotatedWindVector_4.xz * (
      ((_ST_WindGlobal.y * (tmpvar_40.x + (tmpvar_40.y * tmpvar_40.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_36)));
    vPos_35 = (normalize(vPos_35) * fLength_37);
    FinalPosition_5 = vPos_35;
  };
  tmpvar_2.xyz = FinalPosition_5;
  highp vec3 vertex_42;
  vertex_42 = tmpvar_2.xyz;
  highp vec4 clipPos_43;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp vec4 tmpvar_44;
    tmpvar_44.w = 1.0;
    tmpvar_44.xyz = vertex_42;
    highp vec3 tmpvar_45;
    tmpvar_45 = (_Object2World * tmpvar_44).xyz;
    highp vec4 v_46;
    v_46.x = _World2Object[0].x;
    v_46.y = _World2Object[1].x;
    v_46.z = _World2Object[2].x;
    v_46.w = _World2Object[3].x;
    highp vec4 v_47;
    v_47.x = _World2Object[0].y;
    v_47.y = _World2Object[1].y;
    v_47.z = _World2Object[2].y;
    v_47.w = _World2Object[3].y;
    highp vec4 v_48;
    v_48.x = _World2Object[0].z;
    v_48.y = _World2Object[1].z;
    v_48.z = _World2Object[2].z;
    v_48.w = _World2Object[3].z;
    highp vec3 tmpvar_49;
    tmpvar_49 = normalize(((
      (v_46.xyz * _glesNormal.x)
     + 
      (v_47.xyz * _glesNormal.y)
    ) + (v_48.xyz * _glesNormal.z)));
    highp float tmpvar_50;
    tmpvar_50 = dot (tmpvar_49, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_45 * _WorldSpaceLightPos0.w)
    )));
    highp vec4 tmpvar_51;
    tmpvar_51.w = 1.0;
    tmpvar_51.xyz = (tmpvar_45 - (tmpvar_49 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_50 * tmpvar_50)))
    )));
    clipPos_43 = (unity_MatrixVP * tmpvar_51);
  } else {
    highp vec4 tmpvar_52;
    tmpvar_52.w = 1.0;
    tmpvar_52.xyz = vertex_42;
    clipPos_43 = (glstate_matrix_mvp * tmpvar_52);
  };
  highp vec4 clipPos_53;
  clipPos_53.xyw = clipPos_43.xyw;
  clipPos_53.z = (clipPos_43.z + clamp ((unity_LightShadowBias.x / clipPos_43.w), 0.0, 1.0));
  clipPos_53.z = mix (clipPos_53.z, max (clipPos_53.z, -(clipPos_43.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_53;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
void main ()
{
  _glesFragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}



#endif"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
varying highp vec3 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_3;
  highp vec3 vRotatedWindVector_4;
  highp vec3 FinalPosition_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = tmpvar_1.xyz;
  FinalPosition_5 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7.x = _Object2World[3].x;
  tmpvar_7.y = _Object2World[3].y;
  tmpvar_7.z = _Object2World[3].z;
  mediump float tmpvar_8;
  tmpvar_8 = (_WindQuality * _WindEnabled);
  if ((tmpvar_8 > 0.0)) {
    highp mat3 tmpvar_9;
    tmpvar_9[0] = _World2Object[0].xyz;
    tmpvar_9[1] = _World2Object[1].xyz;
    tmpvar_9[2] = _World2Object[2].xyz;
    vRotatedWindVector_4 = normalize((tmpvar_9 * _ST_WindVector.xyz));
    highp mat3 tmpvar_10;
    tmpvar_10[0] = _World2Object[0].xyz;
    tmpvar_10[1] = _World2Object[1].xyz;
    tmpvar_10[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_3 = (normalize((tmpvar_10 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_4 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_3 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_8 >= 3.0)) {
    highp vec3 vPos_11;
    vPos_11 = tmpvar_6;
    if ((tmpvar_8 == 5.0)) {
      highp vec3 vPos_12;
      vPos_12 = tmpvar_6;
      highp float fAdherenceScale_13;
      highp vec3 tmpvar_14;
      tmpvar_14 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_15;
      tmpvar_15 = (_ST_WindBranch.x + (tmpvar_7.x + tmpvar_7.y));
      highp vec4 vOscillations_16;
      highp float fOscillation_17;
      fOscillation_17 = 1.0;
      highp float fAmount_18;
      highp float fTarget_19;
      highp vec4 tmpvar_20;
      tmpvar_20.x = (tmpvar_15 + _glesMultiTexCoord0.w);
      tmpvar_20.y = ((tmpvar_15 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_20.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_15 + _glesMultiTexCoord0.w));
      tmpvar_20.w = ((tmpvar_15 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_21;
      tmpvar_21 = abs(((
        fract((tmpvar_20 + 0.5))
       * 2.0) - 1.0));
      vOscillations_16 = (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0);
      highp float tmpvar_22;
      tmpvar_22 = (vOscillations_16.y * vOscillations_16.z);
      fTarget_19 = 1.0;
      fAmount_18 = tmpvar_22;
      if ((tmpvar_22 < 0.0)) {
        fTarget_19 = -1.0;
        fAmount_18 = -(tmpvar_22);
      };
      fOscillation_17 = (((
        (mix (mix (tmpvar_22, fTarget_19, fAmount_18), fTarget_19, fAmount_18) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_16.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_16.w * _ST_WindBranchWhip.x)));
      vPos_12 = (_glesVertex.xyz + ((tmpvar_14 * fOscillation_17) * _ST_WindBranch.y));
      highp vec4 tmpvar_23;
      tmpvar_23.zw = vec2(0.0, 0.0);
      tmpvar_23.x = ((tmpvar_15 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_23.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_24;
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_23 + 0.5))
       * 2.0) - 1.0));
      tmpvar_24 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      fAdherenceScale_13 = (1.0 - ((
        ((tmpvar_24.x * tmpvar_24.y) * tmpvar_24.x)
       * tmpvar_24.y) * _ST_WindTurbulences.x));
      fAdherenceScale_13 = (fAdherenceScale_13 + ((vOscillations_16.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_12 = (vPos_12 + ((
        ((vRotatedBranchAnchor_3 - vPos_12) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_13) * _glesMultiTexCoord0.z));
      vPos_11 = vPos_12;
    } else {
      highp vec3 vPos_26;
      vPos_26 = vPos_11;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (tmpvar_7.x + tmpvar_7.y));
      highp vec4 vOscillations_29;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.w = 0.0;
      tmpvar_32.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      vPos_26 = (vPos_11 + ((tmpvar_27 * 
        (((mix (
          mix (tmpvar_34, fTarget_31, fAmount_30)
        , fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_11 = vPos_26;
    };
    FinalPosition_5 = vPos_11;
  };
  if ((tmpvar_8 > 0.0)) {
    highp vec3 vPos_35;
    vPos_35 = FinalPosition_5;
    highp float fAdjust_36;
    highp float fLength_37;
    fLength_37 = sqrt(dot (FinalPosition_5, FinalPosition_5));
    highp float tmpvar_38;
    tmpvar_38 = (max ((FinalPosition_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_36 = tmpvar_38;
    if ((tmpvar_38 != 0.0)) {
      fAdjust_36 = pow (tmpvar_38, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_39;
    tmpvar_39.zw = vec2(0.0, 0.0);
    tmpvar_39.x = (tmpvar_7.x + _ST_WindGlobal.x);
    tmpvar_39.y = (tmpvar_7.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_40;
    highp vec4 tmpvar_41;
    tmpvar_41 = abs(((
      fract((tmpvar_39 + 0.5))
     * 2.0) - 1.0));
    tmpvar_40 = (((
      (tmpvar_41 * tmpvar_41)
     * 
      (3.0 - (2.0 * tmpvar_41))
    ) - 0.5) * 2.0);
    vPos_35.xz = (FinalPosition_5.xz + (vRotatedWindVector_4.xz * (
      ((_ST_WindGlobal.y * (tmpvar_40.x + (tmpvar_40.y * tmpvar_40.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_36)));
    vPos_35 = (normalize(vPos_35) * fLength_37);
    FinalPosition_5 = vPos_35;
  };
  tmpvar_2.xyz = FinalPosition_5;
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_2).xyz - _LightPositionRange.xyz);
  gl_Position = (glstate_matrix_mvp * tmpvar_2);
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _LightPositionRange;
varying highp vec3 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = fract((vec4(1.0, 255.0, 65025.0, 1.658138e+07) * min (
    (sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w)
  , 0.999)));
  highp vec4 tmpvar_2;
  tmpvar_2 = (tmpvar_1 - (tmpvar_1.yzww * 0.003921569));
  gl_FragData[0] = tmpvar_2;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
out highp vec3 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_3;
  highp vec3 vRotatedWindVector_4;
  highp vec3 FinalPosition_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = tmpvar_1.xyz;
  FinalPosition_5 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7.x = _Object2World[3].x;
  tmpvar_7.y = _Object2World[3].y;
  tmpvar_7.z = _Object2World[3].z;
  mediump float tmpvar_8;
  tmpvar_8 = (_WindQuality * _WindEnabled);
  if ((tmpvar_8 > 0.0)) {
    highp mat3 tmpvar_9;
    tmpvar_9[0] = _World2Object[0].xyz;
    tmpvar_9[1] = _World2Object[1].xyz;
    tmpvar_9[2] = _World2Object[2].xyz;
    vRotatedWindVector_4 = normalize((tmpvar_9 * _ST_WindVector.xyz));
    highp mat3 tmpvar_10;
    tmpvar_10[0] = _World2Object[0].xyz;
    tmpvar_10[1] = _World2Object[1].xyz;
    tmpvar_10[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_3 = (normalize((tmpvar_10 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_4 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_3 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_8 >= 3.0)) {
    highp vec3 vPos_11;
    vPos_11 = tmpvar_6;
    if ((tmpvar_8 == 5.0)) {
      highp vec3 vPos_12;
      vPos_12 = tmpvar_6;
      highp float fAdherenceScale_13;
      highp vec3 tmpvar_14;
      tmpvar_14 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_15;
      tmpvar_15 = (_ST_WindBranch.x + (tmpvar_7.x + tmpvar_7.y));
      highp vec4 vOscillations_16;
      highp float fOscillation_17;
      fOscillation_17 = 1.0;
      highp float fAmount_18;
      highp float fTarget_19;
      highp vec4 tmpvar_20;
      tmpvar_20.x = (tmpvar_15 + _glesMultiTexCoord0.w);
      tmpvar_20.y = ((tmpvar_15 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_20.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_15 + _glesMultiTexCoord0.w));
      tmpvar_20.w = ((tmpvar_15 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_21;
      tmpvar_21 = abs(((
        fract((tmpvar_20 + 0.5))
       * 2.0) - 1.0));
      vOscillations_16 = (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0);
      highp float tmpvar_22;
      tmpvar_22 = (vOscillations_16.y * vOscillations_16.z);
      fTarget_19 = 1.0;
      fAmount_18 = tmpvar_22;
      if ((tmpvar_22 < 0.0)) {
        fTarget_19 = -1.0;
        fAmount_18 = -(tmpvar_22);
      };
      fOscillation_17 = (((
        (mix (mix (tmpvar_22, fTarget_19, fAmount_18), fTarget_19, fAmount_18) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_16.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_16.w * _ST_WindBranchWhip.x)));
      vPos_12 = (_glesVertex.xyz + ((tmpvar_14 * fOscillation_17) * _ST_WindBranch.y));
      highp vec4 tmpvar_23;
      tmpvar_23.zw = vec2(0.0, 0.0);
      tmpvar_23.x = ((tmpvar_15 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_23.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_24;
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_23 + 0.5))
       * 2.0) - 1.0));
      tmpvar_24 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      fAdherenceScale_13 = (1.0 - ((
        ((tmpvar_24.x * tmpvar_24.y) * tmpvar_24.x)
       * tmpvar_24.y) * _ST_WindTurbulences.x));
      fAdherenceScale_13 = (fAdherenceScale_13 + ((vOscillations_16.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_12 = (vPos_12 + ((
        ((vRotatedBranchAnchor_3 - vPos_12) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_13) * _glesMultiTexCoord0.z));
      vPos_11 = vPos_12;
    } else {
      highp vec3 vPos_26;
      vPos_26 = vPos_11;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (tmpvar_7.x + tmpvar_7.y));
      highp vec4 vOscillations_29;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.w = 0.0;
      tmpvar_32.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      vPos_26 = (vPos_11 + ((tmpvar_27 * 
        (((mix (
          mix (tmpvar_34, fTarget_31, fAmount_30)
        , fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_11 = vPos_26;
    };
    FinalPosition_5 = vPos_11;
  };
  if ((tmpvar_8 > 0.0)) {
    highp vec3 vPos_35;
    vPos_35 = FinalPosition_5;
    highp float fAdjust_36;
    highp float fLength_37;
    fLength_37 = sqrt(dot (FinalPosition_5, FinalPosition_5));
    highp float tmpvar_38;
    tmpvar_38 = (max ((FinalPosition_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_36 = tmpvar_38;
    if ((tmpvar_38 != 0.0)) {
      fAdjust_36 = pow (tmpvar_38, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_39;
    tmpvar_39.zw = vec2(0.0, 0.0);
    tmpvar_39.x = (tmpvar_7.x + _ST_WindGlobal.x);
    tmpvar_39.y = (tmpvar_7.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_40;
    highp vec4 tmpvar_41;
    tmpvar_41 = abs(((
      fract((tmpvar_39 + 0.5))
     * 2.0) - 1.0));
    tmpvar_40 = (((
      (tmpvar_41 * tmpvar_41)
     * 
      (3.0 - (2.0 * tmpvar_41))
    ) - 0.5) * 2.0);
    vPos_35.xz = (FinalPosition_5.xz + (vRotatedWindVector_4.xz * (
      ((_ST_WindGlobal.y * (tmpvar_40.x + (tmpvar_40.y * tmpvar_40.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_36)));
    vPos_35 = (normalize(vPos_35) * fLength_37);
    FinalPosition_5 = vPos_35;
  };
  tmpvar_2.xyz = FinalPosition_5;
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_2).xyz - _LightPositionRange.xyz);
  gl_Position = (glstate_matrix_mvp * tmpvar_2);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _LightPositionRange;
in highp vec3 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = vec4((sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w));
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  mediump vec2 tmpvar_3;
  highp vec2 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord0.xy;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_5 = tmpvar_1;
  tmpvar_6 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_7;
  highp vec3 vRotatedWindVector_8;
  highp vec3 FinalPosition_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_1.xyz;
  FinalPosition_9 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  mediump float tmpvar_12;
  tmpvar_12 = (_WindQuality * _WindEnabled);
  if ((tmpvar_12 > 0.0)) {
    highp mat3 tmpvar_13;
    tmpvar_13[0] = _World2Object[0].xyz;
    tmpvar_13[1] = _World2Object[1].xyz;
    tmpvar_13[2] = _World2Object[2].xyz;
    vRotatedWindVector_8 = normalize((tmpvar_13 * _ST_WindVector.xyz));
    highp mat3 tmpvar_14;
    tmpvar_14[0] = _World2Object[0].xyz;
    tmpvar_14[1] = _World2Object[1].xyz;
    tmpvar_14[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_7 = (normalize((tmpvar_14 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_8 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_7 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_12 == 5.0)) {
    highp vec3 vPos_15;
    vPos_15 = tmpvar_10;
    highp float fOffset_16;
    fOffset_16 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_16 = 0.75;
    };
    highp vec4 tmpvar_17;
    tmpvar_17.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_17.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_16);
    highp vec4 tmpvar_18;
    tmpvar_18 = abs(((
      fract((tmpvar_17 + 0.5))
     * 2.0) - 1.0));
    vPos_15 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_18 * tmpvar_18)
       * 
        (3.0 - (2.0 * tmpvar_18))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_6 = tmpvar_2;
    FinalPosition_9 = vPos_15;
  };
  if ((tmpvar_12 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = FinalPosition_9;
    if ((tmpvar_12 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = FinalPosition_9;
      highp float fAdherenceScale_21;
      highp vec3 tmpvar_22;
      tmpvar_22 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_23;
      tmpvar_23 = (_ST_WindBranch.x + (tmpvar_11.x + tmpvar_11.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (tmpvar_23 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((tmpvar_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_23 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((tmpvar_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        (mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_24.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (FinalPosition_9 + ((tmpvar_22 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((tmpvar_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_21 = (1.0 - ((
        ((tmpvar_32.x * tmpvar_32.y) * tmpvar_32.x)
       * tmpvar_32.y) * _ST_WindTurbulences.x));
      fAdherenceScale_21 = (fAdherenceScale_21 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_7 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_21) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp vec3 tmpvar_35;
      tmpvar_35 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_36;
      tmpvar_36 = (_ST_WindBranch.x + (tmpvar_11.x + tmpvar_11.y));
      highp vec4 vOscillations_37;
      highp float fAmount_38;
      highp float fTarget_39;
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.x = (tmpvar_36 + _glesMultiTexCoord0.w);
      tmpvar_40.y = ((tmpvar_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_40.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_39 = 1.0;
      fAmount_38 = tmpvar_42;
      if ((tmpvar_42 < 0.0)) {
        fTarget_39 = -1.0;
        fAmount_38 = -(tmpvar_42);
      };
      vPos_34 = (vPos_19 + ((tmpvar_35 * 
        (((mix (
          mix (tmpvar_42, fTarget_39, fAmount_38)
        , fTarget_39, fAmount_38) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_9 = vPos_19;
  };
  if ((tmpvar_12 > 0.0)) {
    highp vec3 vPos_43;
    vPos_43 = FinalPosition_9;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_9, FinalPosition_9));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_11.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_11.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    vPos_43.xz = (FinalPosition_9.xz + (vRotatedWindVector_8.xz * (
      ((_ST_WindGlobal.y * (tmpvar_48.x + (tmpvar_48.y * tmpvar_48.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_44)));
    vPos_43 = (normalize(vPos_43) * fLength_45);
    FinalPosition_9 = vPos_43;
  };
  tmpvar_5.xyz = FinalPosition_9;
  highp vec3 vertex_50;
  vertex_50 = tmpvar_5.xyz;
  highp vec4 clipPos_51;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp vec4 tmpvar_52;
    tmpvar_52.w = 1.0;
    tmpvar_52.xyz = vertex_50;
    highp vec3 tmpvar_53;
    tmpvar_53 = (_Object2World * tmpvar_52).xyz;
    highp vec4 v_54;
    v_54.x = _World2Object[0].x;
    v_54.y = _World2Object[1].x;
    v_54.z = _World2Object[2].x;
    v_54.w = _World2Object[3].x;
    highp vec4 v_55;
    v_55.x = _World2Object[0].y;
    v_55.y = _World2Object[1].y;
    v_55.z = _World2Object[2].y;
    v_55.w = _World2Object[3].y;
    highp vec4 v_56;
    v_56.x = _World2Object[0].z;
    v_56.y = _World2Object[1].z;
    v_56.z = _World2Object[2].z;
    v_56.w = _World2Object[3].z;
    highp vec3 tmpvar_57;
    tmpvar_57 = normalize(((
      (v_54.xyz * tmpvar_6.x)
     + 
      (v_55.xyz * tmpvar_6.y)
    ) + (v_56.xyz * tmpvar_6.z)));
    highp float tmpvar_58;
    tmpvar_58 = dot (tmpvar_57, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_53 * _WorldSpaceLightPos0.w)
    )));
    highp vec4 tmpvar_59;
    tmpvar_59.w = 1.0;
    tmpvar_59.xyz = (tmpvar_53 - (tmpvar_57 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_58 * tmpvar_58)))
    )));
    clipPos_51 = (unity_MatrixVP * tmpvar_59);
  } else {
    highp vec4 tmpvar_60;
    tmpvar_60.w = 1.0;
    tmpvar_60.xyz = vertex_50;
    clipPos_51 = (glstate_matrix_mvp * tmpvar_60);
  };
  highp vec4 clipPos_61;
  clipPos_61.xyw = clipPos_51.xyw;
  clipPos_61.z = (clipPos_51.z + clamp ((unity_LightShadowBias.x / clipPos_51.w), 0.0, 1.0));
  clipPos_61.z = mix (clipPos_61.z, max (clipPos_61.z, -(clipPos_51.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_61;
  xlv_TEXCOORD1 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  lowp float x_1;
  x_1 = ((texture2D (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_FROND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
out mediump vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  mediump vec2 tmpvar_3;
  highp vec2 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord0.xy;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_5 = tmpvar_1;
  tmpvar_6 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_7;
  highp vec3 vRotatedWindVector_8;
  highp vec3 FinalPosition_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_1.xyz;
  FinalPosition_9 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  mediump float tmpvar_12;
  tmpvar_12 = (_WindQuality * _WindEnabled);
  if ((tmpvar_12 > 0.0)) {
    highp mat3 tmpvar_13;
    tmpvar_13[0] = _World2Object[0].xyz;
    tmpvar_13[1] = _World2Object[1].xyz;
    tmpvar_13[2] = _World2Object[2].xyz;
    vRotatedWindVector_8 = normalize((tmpvar_13 * _ST_WindVector.xyz));
    highp mat3 tmpvar_14;
    tmpvar_14[0] = _World2Object[0].xyz;
    tmpvar_14[1] = _World2Object[1].xyz;
    tmpvar_14[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_7 = (normalize((tmpvar_14 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_8 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_7 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_12 == 5.0)) {
    highp vec3 vPos_15;
    vPos_15 = tmpvar_10;
    highp float fOffset_16;
    fOffset_16 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_16 = 0.75;
    };
    highp vec4 tmpvar_17;
    tmpvar_17.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_17.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_16);
    highp vec4 tmpvar_18;
    tmpvar_18 = abs(((
      fract((tmpvar_17 + 0.5))
     * 2.0) - 1.0));
    vPos_15 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_18 * tmpvar_18)
       * 
        (3.0 - (2.0 * tmpvar_18))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_6 = tmpvar_2;
    FinalPosition_9 = vPos_15;
  };
  if ((tmpvar_12 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = FinalPosition_9;
    if ((tmpvar_12 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = FinalPosition_9;
      highp float fAdherenceScale_21;
      highp vec3 tmpvar_22;
      tmpvar_22 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_23;
      tmpvar_23 = (_ST_WindBranch.x + (tmpvar_11.x + tmpvar_11.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (tmpvar_23 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((tmpvar_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_23 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((tmpvar_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        (mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_24.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (FinalPosition_9 + ((tmpvar_22 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((tmpvar_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_21 = (1.0 - ((
        ((tmpvar_32.x * tmpvar_32.y) * tmpvar_32.x)
       * tmpvar_32.y) * _ST_WindTurbulences.x));
      fAdherenceScale_21 = (fAdherenceScale_21 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_7 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_21) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp vec3 tmpvar_35;
      tmpvar_35 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_36;
      tmpvar_36 = (_ST_WindBranch.x + (tmpvar_11.x + tmpvar_11.y));
      highp vec4 vOscillations_37;
      highp float fAmount_38;
      highp float fTarget_39;
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.x = (tmpvar_36 + _glesMultiTexCoord0.w);
      tmpvar_40.y = ((tmpvar_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_40.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_39 = 1.0;
      fAmount_38 = tmpvar_42;
      if ((tmpvar_42 < 0.0)) {
        fTarget_39 = -1.0;
        fAmount_38 = -(tmpvar_42);
      };
      vPos_34 = (vPos_19 + ((tmpvar_35 * 
        (((mix (
          mix (tmpvar_42, fTarget_39, fAmount_38)
        , fTarget_39, fAmount_38) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_9 = vPos_19;
  };
  if ((tmpvar_12 > 0.0)) {
    highp vec3 vPos_43;
    vPos_43 = FinalPosition_9;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_9, FinalPosition_9));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_11.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_11.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    vPos_43.xz = (FinalPosition_9.xz + (vRotatedWindVector_8.xz * (
      ((_ST_WindGlobal.y * (tmpvar_48.x + (tmpvar_48.y * tmpvar_48.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_44)));
    vPos_43 = (normalize(vPos_43) * fLength_45);
    FinalPosition_9 = vPos_43;
  };
  tmpvar_5.xyz = FinalPosition_9;
  highp vec3 vertex_50;
  vertex_50 = tmpvar_5.xyz;
  highp vec4 clipPos_51;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp vec4 tmpvar_52;
    tmpvar_52.w = 1.0;
    tmpvar_52.xyz = vertex_50;
    highp vec3 tmpvar_53;
    tmpvar_53 = (_Object2World * tmpvar_52).xyz;
    highp vec4 v_54;
    v_54.x = _World2Object[0].x;
    v_54.y = _World2Object[1].x;
    v_54.z = _World2Object[2].x;
    v_54.w = _World2Object[3].x;
    highp vec4 v_55;
    v_55.x = _World2Object[0].y;
    v_55.y = _World2Object[1].y;
    v_55.z = _World2Object[2].y;
    v_55.w = _World2Object[3].y;
    highp vec4 v_56;
    v_56.x = _World2Object[0].z;
    v_56.y = _World2Object[1].z;
    v_56.z = _World2Object[2].z;
    v_56.w = _World2Object[3].z;
    highp vec3 tmpvar_57;
    tmpvar_57 = normalize(((
      (v_54.xyz * tmpvar_6.x)
     + 
      (v_55.xyz * tmpvar_6.y)
    ) + (v_56.xyz * tmpvar_6.z)));
    highp float tmpvar_58;
    tmpvar_58 = dot (tmpvar_57, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_53 * _WorldSpaceLightPos0.w)
    )));
    highp vec4 tmpvar_59;
    tmpvar_59.w = 1.0;
    tmpvar_59.xyz = (tmpvar_53 - (tmpvar_57 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_58 * tmpvar_58)))
    )));
    clipPos_51 = (unity_MatrixVP * tmpvar_59);
  } else {
    highp vec4 tmpvar_60;
    tmpvar_60.w = 1.0;
    tmpvar_60.xyz = vertex_50;
    clipPos_51 = (glstate_matrix_mvp * tmpvar_60);
  };
  highp vec4 clipPos_61;
  clipPos_61.xyw = clipPos_51.xyw;
  clipPos_61.z = (clipPos_51.z + clamp ((unity_LightShadowBias.x / clipPos_51.w), 0.0, 1.0));
  clipPos_61.z = mix (clipPos_61.z, max (clipPos_61.z, -(clipPos_51.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_61;
  xlv_TEXCOORD1 = tmpvar_3;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
in mediump vec2 xlv_TEXCOORD1;
void main ()
{
  lowp float x_1;
  x_1 = ((texture (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  _glesFragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}



#endif"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec2 tmpvar_2;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0.xy;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_5;
  highp vec3 vRotatedWindVector_6;
  highp vec3 FinalPosition_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = tmpvar_1.xyz;
  FinalPosition_7 = tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_9.x = _Object2World[3].x;
  tmpvar_9.y = _Object2World[3].y;
  tmpvar_9.z = _Object2World[3].z;
  mediump float tmpvar_10;
  tmpvar_10 = (_WindQuality * _WindEnabled);
  if ((tmpvar_10 > 0.0)) {
    highp mat3 tmpvar_11;
    tmpvar_11[0] = _World2Object[0].xyz;
    tmpvar_11[1] = _World2Object[1].xyz;
    tmpvar_11[2] = _World2Object[2].xyz;
    vRotatedWindVector_6 = normalize((tmpvar_11 * _ST_WindVector.xyz));
    highp mat3 tmpvar_12;
    tmpvar_12[0] = _World2Object[0].xyz;
    tmpvar_12[1] = _World2Object[1].xyz;
    tmpvar_12[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_5 = (normalize((tmpvar_12 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_6 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_5 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_10 == 5.0)) {
    highp vec3 vPos_13;
    vPos_13 = tmpvar_8;
    highp float fOffset_14;
    fOffset_14 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_14 = 0.75;
    };
    highp vec4 tmpvar_15;
    tmpvar_15.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_15.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_14);
    highp vec4 tmpvar_16;
    tmpvar_16 = abs(((
      fract((tmpvar_15 + 0.5))
     * 2.0) - 1.0));
    vPos_13 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_16 * tmpvar_16)
       * 
        (3.0 - (2.0 * tmpvar_16))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    FinalPosition_7 = vPos_13;
  };
  if ((tmpvar_10 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = FinalPosition_7;
    if ((tmpvar_10 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = FinalPosition_7;
      highp float fAdherenceScale_19;
      highp vec3 tmpvar_20;
      tmpvar_20 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_21;
      tmpvar_21 = (_ST_WindBranch.x + (tmpvar_9.x + tmpvar_9.y));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (tmpvar_21 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((tmpvar_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_21 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((tmpvar_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        (mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_22.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (FinalPosition_7 + ((tmpvar_20 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((tmpvar_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_19 = (1.0 - ((
        ((tmpvar_30.x * tmpvar_30.y) * tmpvar_30.x)
       * tmpvar_30.y) * _ST_WindTurbulences.x));
      fAdherenceScale_19 = (fAdherenceScale_19 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((vRotatedBranchAnchor_5 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_19) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp vec3 tmpvar_33;
      tmpvar_33 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_34;
      tmpvar_34 = (_ST_WindBranch.x + (tmpvar_9.x + tmpvar_9.y));
      highp vec4 vOscillations_35;
      highp float fAmount_36;
      highp float fTarget_37;
      highp vec4 tmpvar_38;
      tmpvar_38.w = 0.0;
      tmpvar_38.x = (tmpvar_34 + _glesMultiTexCoord0.w);
      tmpvar_38.y = ((tmpvar_34 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_38.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_34 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      highp float tmpvar_40;
      tmpvar_40 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_37 = 1.0;
      fAmount_36 = tmpvar_40;
      if ((tmpvar_40 < 0.0)) {
        fTarget_37 = -1.0;
        fAmount_36 = -(tmpvar_40);
      };
      vPos_32 = (vPos_17 + ((tmpvar_33 * 
        (((mix (
          mix (tmpvar_40, fTarget_37, fAmount_36)
        , fTarget_37, fAmount_36) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    FinalPosition_7 = vPos_17;
  };
  if ((tmpvar_10 > 0.0)) {
    highp vec3 vPos_41;
    vPos_41 = FinalPosition_7;
    highp float fAdjust_42;
    highp float fLength_43;
    fLength_43 = sqrt(dot (FinalPosition_7, FinalPosition_7));
    highp float tmpvar_44;
    tmpvar_44 = (max ((FinalPosition_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_42 = tmpvar_44;
    if ((tmpvar_44 != 0.0)) {
      fAdjust_42 = pow (tmpvar_44, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_45;
    tmpvar_45.zw = vec2(0.0, 0.0);
    tmpvar_45.x = (tmpvar_9.x + _ST_WindGlobal.x);
    tmpvar_45.y = (tmpvar_9.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_46;
    highp vec4 tmpvar_47;
    tmpvar_47 = abs(((
      fract((tmpvar_45 + 0.5))
     * 2.0) - 1.0));
    tmpvar_46 = (((
      (tmpvar_47 * tmpvar_47)
     * 
      (3.0 - (2.0 * tmpvar_47))
    ) - 0.5) * 2.0);
    vPos_41.xz = (FinalPosition_7.xz + (vRotatedWindVector_6.xz * (
      ((_ST_WindGlobal.y * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_42)));
    vPos_41 = (normalize(vPos_41) * fLength_43);
    FinalPosition_7 = vPos_41;
  };
  tmpvar_4.xyz = FinalPosition_7;
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_4).xyz - _LightPositionRange.xyz);
  gl_Position = (glstate_matrix_mvp * tmpvar_4);
  xlv_TEXCOORD1 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _LightPositionRange;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  lowp float x_1;
  x_1 = ((texture2D (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_2;
  tmpvar_2 = fract((vec4(1.0, 255.0, 65025.0, 1.658138e+07) * min (
    (sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w)
  , 0.999)));
  highp vec4 tmpvar_3;
  tmpvar_3 = (tmpvar_2 - (tmpvar_2.yzww * 0.003921569));
  gl_FragData[0] = tmpvar_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_FROND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
out highp vec3 xlv_TEXCOORD0;
out mediump vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec2 tmpvar_2;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0.xy;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_5;
  highp vec3 vRotatedWindVector_6;
  highp vec3 FinalPosition_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = tmpvar_1.xyz;
  FinalPosition_7 = tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_9.x = _Object2World[3].x;
  tmpvar_9.y = _Object2World[3].y;
  tmpvar_9.z = _Object2World[3].z;
  mediump float tmpvar_10;
  tmpvar_10 = (_WindQuality * _WindEnabled);
  if ((tmpvar_10 > 0.0)) {
    highp mat3 tmpvar_11;
    tmpvar_11[0] = _World2Object[0].xyz;
    tmpvar_11[1] = _World2Object[1].xyz;
    tmpvar_11[2] = _World2Object[2].xyz;
    vRotatedWindVector_6 = normalize((tmpvar_11 * _ST_WindVector.xyz));
    highp mat3 tmpvar_12;
    tmpvar_12[0] = _World2Object[0].xyz;
    tmpvar_12[1] = _World2Object[1].xyz;
    tmpvar_12[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_5 = (normalize((tmpvar_12 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_6 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_5 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_10 == 5.0)) {
    highp vec3 vPos_13;
    vPos_13 = tmpvar_8;
    highp float fOffset_14;
    fOffset_14 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_14 = 0.75;
    };
    highp vec4 tmpvar_15;
    tmpvar_15.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_15.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_14);
    highp vec4 tmpvar_16;
    tmpvar_16 = abs(((
      fract((tmpvar_15 + 0.5))
     * 2.0) - 1.0));
    vPos_13 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_16 * tmpvar_16)
       * 
        (3.0 - (2.0 * tmpvar_16))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    FinalPosition_7 = vPos_13;
  };
  if ((tmpvar_10 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = FinalPosition_7;
    if ((tmpvar_10 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = FinalPosition_7;
      highp float fAdherenceScale_19;
      highp vec3 tmpvar_20;
      tmpvar_20 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_21;
      tmpvar_21 = (_ST_WindBranch.x + (tmpvar_9.x + tmpvar_9.y));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (tmpvar_21 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((tmpvar_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_21 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((tmpvar_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        (mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_22.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (FinalPosition_7 + ((tmpvar_20 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((tmpvar_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_19 = (1.0 - ((
        ((tmpvar_30.x * tmpvar_30.y) * tmpvar_30.x)
       * tmpvar_30.y) * _ST_WindTurbulences.x));
      fAdherenceScale_19 = (fAdherenceScale_19 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((vRotatedBranchAnchor_5 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_19) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp vec3 tmpvar_33;
      tmpvar_33 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_34;
      tmpvar_34 = (_ST_WindBranch.x + (tmpvar_9.x + tmpvar_9.y));
      highp vec4 vOscillations_35;
      highp float fAmount_36;
      highp float fTarget_37;
      highp vec4 tmpvar_38;
      tmpvar_38.w = 0.0;
      tmpvar_38.x = (tmpvar_34 + _glesMultiTexCoord0.w);
      tmpvar_38.y = ((tmpvar_34 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_38.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_34 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      highp float tmpvar_40;
      tmpvar_40 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_37 = 1.0;
      fAmount_36 = tmpvar_40;
      if ((tmpvar_40 < 0.0)) {
        fTarget_37 = -1.0;
        fAmount_36 = -(tmpvar_40);
      };
      vPos_32 = (vPos_17 + ((tmpvar_33 * 
        (((mix (
          mix (tmpvar_40, fTarget_37, fAmount_36)
        , fTarget_37, fAmount_36) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    FinalPosition_7 = vPos_17;
  };
  if ((tmpvar_10 > 0.0)) {
    highp vec3 vPos_41;
    vPos_41 = FinalPosition_7;
    highp float fAdjust_42;
    highp float fLength_43;
    fLength_43 = sqrt(dot (FinalPosition_7, FinalPosition_7));
    highp float tmpvar_44;
    tmpvar_44 = (max ((FinalPosition_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_42 = tmpvar_44;
    if ((tmpvar_44 != 0.0)) {
      fAdjust_42 = pow (tmpvar_44, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_45;
    tmpvar_45.zw = vec2(0.0, 0.0);
    tmpvar_45.x = (tmpvar_9.x + _ST_WindGlobal.x);
    tmpvar_45.y = (tmpvar_9.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_46;
    highp vec4 tmpvar_47;
    tmpvar_47 = abs(((
      fract((tmpvar_45 + 0.5))
     * 2.0) - 1.0));
    tmpvar_46 = (((
      (tmpvar_47 * tmpvar_47)
     * 
      (3.0 - (2.0 * tmpvar_47))
    ) - 0.5) * 2.0);
    vPos_41.xz = (FinalPosition_7.xz + (vRotatedWindVector_6.xz * (
      ((_ST_WindGlobal.y * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_42)));
    vPos_41 = (normalize(vPos_41) * fLength_43);
    FinalPosition_7 = vPos_41;
  };
  tmpvar_4.xyz = FinalPosition_7;
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_4).xyz - _LightPositionRange.xyz);
  gl_Position = (glstate_matrix_mvp * tmpvar_4);
  xlv_TEXCOORD1 = tmpvar_2;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _LightPositionRange;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
in highp vec3 xlv_TEXCOORD0;
in mediump vec2 xlv_TEXCOORD1;
void main ()
{
  lowp float x_1;
  x_1 = ((texture (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_2;
  tmpvar_2 = vec4((sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w));
  _glesFragData[0] = tmpvar_2;
}



#endif"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  mediump vec2 tmpvar_3;
  highp vec2 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord0.xy;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_5 = tmpvar_1;
  tmpvar_6 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_7;
  highp vec3 vRotatedWindVector_8;
  highp vec3 FinalPosition_9;
  FinalPosition_9 = tmpvar_1.xyz;
  highp vec3 tmpvar_10;
  tmpvar_10.x = _Object2World[3].x;
  tmpvar_10.y = _Object2World[3].y;
  tmpvar_10.z = _Object2World[3].z;
  mediump float tmpvar_11;
  tmpvar_11 = (_WindQuality * _WindEnabled);
  if ((tmpvar_11 > 0.0)) {
    highp mat3 tmpvar_12;
    tmpvar_12[0] = _World2Object[0].xyz;
    tmpvar_12[1] = _World2Object[1].xyz;
    tmpvar_12[2] = _World2Object[2].xyz;
    vRotatedWindVector_8 = normalize((tmpvar_12 * _ST_WindVector.xyz));
    highp mat3 tmpvar_13;
    tmpvar_13[0] = _World2Object[0].xyz;
    tmpvar_13[1] = _World2Object[1].xyz;
    tmpvar_13[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_7 = (normalize((tmpvar_13 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_8 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_7 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_9 = tmpvar_14;
  if (((tmpvar_11 > 1.0) && (tmpvar_11 < 5.0))) {
    highp float tmpvar_15;
    tmpvar_15 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_16;
    isBestWind_16 = (tmpvar_11 == 4.0);
    bool bLeaf2_17;
    bLeaf2_17 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_18;
    vPos_18 = tmpvar_14;
    highp vec3 vDirection_19;
    vDirection_19 = tmpvar_2;
    highp float tmpvar_20;
    if (bLeaf2_17) {
      tmpvar_20 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_20 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_21;
    if (bLeaf2_17) {
      tmpvar_21 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_21 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_22;
    highp vec4 tmpvar_23;
    tmpvar_23.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_23.x = (tmpvar_20 + tmpvar_15);
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (tmpvar_14 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_21 * (((
        (tmpvar_24 * tmpvar_24)
       * 
        (3.0 - (2.0 * tmpvar_24))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_19 = tmpvar_2;
    vPos_18 = vPos_22;
    if (isBestWind_16) {
      highp vec3 tmpvar_25;
      tmpvar_25 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_26;
      if (bLeaf2_17) {
        tmpvar_26 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_26 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_27;
      if (bLeaf2_17) {
        tmpvar_27 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_27 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_28;
      if (bLeaf2_17) {
        tmpvar_28 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_28 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_29;
      if (bLeaf2_17) {
        tmpvar_29 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_29 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_30;
      if (bLeaf2_17) {
        tmpvar_30 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_30 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_31;
      if (bLeaf2_17) {
        tmpvar_31 = bool(1);
      } else {
        tmpvar_31 = bool(1);
      };
      highp float fTwitch_32;
      highp vec3 vAxis_33;
      highp vec3 tmpvar_34;
      tmpvar_34 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_35;
      tmpvar_35 = ((tmpvar_34.x + tmpvar_34.y) + tmpvar_34.z);
      highp vec4 tmpvar_36;
      tmpvar_36.x = (tmpvar_26 + tmpvar_35);
      tmpvar_36.y = ((tmpvar_26 * 0.75) - tmpvar_35);
      tmpvar_36.z = ((tmpvar_26 * 0.01) + tmpvar_35);
      tmpvar_36.w = (tmpvar_26 + tmpvar_35);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      highp float tmpvar_39;
      tmpvar_39 = sqrt(dot (vPos_22, vPos_22));
      highp float fAngle_40;
      fAngle_40 = ((_glesMultiTexCoord2.x * tmpvar_28) * (tmpvar_37.x + (tmpvar_37.y * tmpvar_37.y)));
      highp vec2 vSinCos_41;
      vSinCos_41.x = sin(fAngle_40);
      vSinCos_41.y = cos(fAngle_40);
      highp float tmpvar_42;
      tmpvar_42 = (1.0 - vSinCos_41.y);
      highp mat3 tmpvar_43;
      tmpvar_43[0].x = (((tmpvar_42 * tmpvar_25.x) * tmpvar_25.x) + vSinCos_41.y);
      tmpvar_43[0].y = (((tmpvar_42 * tmpvar_25.x) * tmpvar_25.y) + (vSinCos_41.x * tmpvar_25.z));
      tmpvar_43[0].z = (((tmpvar_42 * tmpvar_25.x) * tmpvar_25.z) - (vSinCos_41.x * tmpvar_25.y));
      tmpvar_43[1].x = (((tmpvar_42 * tmpvar_25.x) * tmpvar_25.y) - (vSinCos_41.x * tmpvar_25.z));
      tmpvar_43[1].y = (((tmpvar_42 * tmpvar_25.y) * tmpvar_25.y) + vSinCos_41.y);
      tmpvar_43[1].z = (((tmpvar_42 * tmpvar_25.y) * tmpvar_25.z) + (vSinCos_41.x * tmpvar_25.x));
      tmpvar_43[2].x = (((tmpvar_42 * tmpvar_25.x) * tmpvar_25.z) + (vSinCos_41.x * tmpvar_25.y));
      tmpvar_43[2].y = (((tmpvar_42 * tmpvar_25.y) * tmpvar_25.z) - (vSinCos_41.x * tmpvar_25.x));
      tmpvar_43[2].z = (((tmpvar_42 * tmpvar_25.z) * tmpvar_25.z) + vSinCos_41.y);
      highp vec3 tmpvar_44;
      tmpvar_44 = ((tmpvar_25.yzx * vRotatedWindVector_8.zxy) - (tmpvar_25.zxy * vRotatedWindVector_8.yzx));
      vAxis_33.xz = tmpvar_44.xz;
      highp float tmpvar_45;
      tmpvar_45 = clamp (dot (vRotatedWindVector_8, tmpvar_25), -1.0, 1.0);
      vAxis_33.y = (tmpvar_44.y + tmpvar_45);
      highp vec3 tmpvar_46;
      tmpvar_46 = normalize(vAxis_33);
      vAxis_33 = tmpvar_46;
      highp float tmpvar_47;
      tmpvar_47 = (1.570796 - (sign(tmpvar_45) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_45))) * (1.570796 + (abs(tmpvar_45) * (-0.2146018 + 
          (abs(tmpvar_45) * (0.08656672 + (abs(tmpvar_45) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_48;
      tmpvar_48 = (tmpvar_37.y - (tmpvar_37.x * tmpvar_37.x));
      fTwitch_32 = 0.0;
      if (tmpvar_31) {
        highp float fTime_49;
        fTime_49 = (tmpvar_30.z + tmpvar_35);
        highp vec4 tmpvar_50;
        tmpvar_50.zw = vec2(0.0, 0.0);
        tmpvar_50.x = fTime_49;
        tmpvar_50.y = (0.87 * fTime_49);
        highp vec4 tmpvar_51;
        highp vec4 tmpvar_52;
        tmpvar_52 = abs(((
          fract((tmpvar_50 + 0.5))
         * 2.0) - 1.0));
        tmpvar_51 = (((
          (tmpvar_52 * tmpvar_52)
         * 
          (3.0 - (2.0 * tmpvar_52))
        ) - 0.5) * 2.0);
        fTwitch_32 = (tmpvar_30.x * pow (clamp (
          ((((tmpvar_51.x * tmpvar_51.y) * tmpvar_51.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_30.y));
      };
      highp float fAngle_53;
      fAngle_53 = (_glesMultiTexCoord2.x * ((
        (tmpvar_47 * tmpvar_29)
       + 
        (tmpvar_48 * tmpvar_27)
      ) + fTwitch_32));
      highp vec2 vSinCos_54;
      vSinCos_54.x = sin(fAngle_53);
      vSinCos_54.y = cos(fAngle_53);
      highp float tmpvar_55;
      tmpvar_55 = (1.0 - vSinCos_54.y);
      highp mat3 tmpvar_56;
      tmpvar_56[0].x = (((tmpvar_55 * tmpvar_46.x) * tmpvar_46.x) + vSinCos_54.y);
      tmpvar_56[0].y = (((tmpvar_55 * tmpvar_46.x) * tmpvar_46.y) + (vSinCos_54.x * tmpvar_46.z));
      tmpvar_56[0].z = (((tmpvar_55 * tmpvar_46.x) * tmpvar_46.z) - (vSinCos_54.x * tmpvar_46.y));
      tmpvar_56[1].x = (((tmpvar_55 * tmpvar_46.x) * tmpvar_46.y) - (vSinCos_54.x * tmpvar_46.z));
      tmpvar_56[1].y = (((tmpvar_55 * tmpvar_46.y) * tmpvar_46.y) + vSinCos_54.y);
      tmpvar_56[1].z = (((tmpvar_55 * tmpvar_46.y) * tmpvar_46.z) + (vSinCos_54.x * tmpvar_46.x));
      tmpvar_56[2].x = (((tmpvar_55 * tmpvar_46.x) * tmpvar_46.z) + (vSinCos_54.x * tmpvar_46.y));
      tmpvar_56[2].y = (((tmpvar_55 * tmpvar_46.y) * tmpvar_46.z) - (vSinCos_54.x * tmpvar_46.x));
      tmpvar_56[2].z = (((tmpvar_55 * tmpvar_46.z) * tmpvar_46.z) + vSinCos_54.y);
      highp mat3 tmpvar_57;
      tmpvar_57 = (tmpvar_43 * tmpvar_56);
      vDirection_19 = (tmpvar_57 * _glesNormal);
      vPos_18 = (normalize((tmpvar_57 * vPos_22)) * tmpvar_39);
    };
    tmpvar_6 = vDirection_19;
    FinalPosition_9 = vPos_18;
  };
  highp vec3 tmpvar_58;
  tmpvar_58 = (FinalPosition_9 + _glesMultiTexCoord1.xyz);
  FinalPosition_9 = tmpvar_58;
  if ((tmpvar_11 >= 3.0)) {
    highp vec3 vPos_59;
    vPos_59 = tmpvar_58;
    if ((tmpvar_11 == 5.0)) {
      highp vec3 vPos_60;
      vPos_60 = tmpvar_58;
      highp float fAdherenceScale_61;
      highp vec3 tmpvar_62;
      tmpvar_62 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_63;
      tmpvar_63 = (_ST_WindBranch.x + (tmpvar_10.x + tmpvar_10.y));
      highp vec4 vOscillations_64;
      highp float fOscillation_65;
      fOscillation_65 = 1.0;
      highp float fAmount_66;
      highp float fTarget_67;
      highp vec4 tmpvar_68;
      tmpvar_68.x = (tmpvar_63 + _glesMultiTexCoord0.w);
      tmpvar_68.y = ((tmpvar_63 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_68.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_63 + _glesMultiTexCoord0.w));
      tmpvar_68.w = ((tmpvar_63 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_69;
      tmpvar_69 = abs(((
        fract((tmpvar_68 + 0.5))
       * 2.0) - 1.0));
      vOscillations_64 = (((
        (tmpvar_69 * tmpvar_69)
       * 
        (3.0 - (2.0 * tmpvar_69))
      ) - 0.5) * 2.0);
      highp float tmpvar_70;
      tmpvar_70 = (vOscillations_64.y * vOscillations_64.z);
      fTarget_67 = 1.0;
      fAmount_66 = tmpvar_70;
      if ((tmpvar_70 < 0.0)) {
        fTarget_67 = -1.0;
        fAmount_66 = -(tmpvar_70);
      };
      fOscillation_65 = (((
        (mix (mix (tmpvar_70, fTarget_67, fAmount_66), fTarget_67, fAmount_66) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_64.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_64.w * _ST_WindBranchWhip.x)));
      vPos_60 = (tmpvar_58 + ((tmpvar_62 * fOscillation_65) * _ST_WindBranch.y));
      highp vec4 tmpvar_71;
      tmpvar_71.zw = vec2(0.0, 0.0);
      tmpvar_71.x = ((tmpvar_63 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_71.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_72;
      highp vec4 tmpvar_73;
      tmpvar_73 = abs(((
        fract((tmpvar_71 + 0.5))
       * 2.0) - 1.0));
      tmpvar_72 = (((
        (tmpvar_73 * tmpvar_73)
       * 
        (3.0 - (2.0 * tmpvar_73))
      ) - 0.5) * 2.0);
      fAdherenceScale_61 = (1.0 - ((
        ((tmpvar_72.x * tmpvar_72.y) * tmpvar_72.x)
       * tmpvar_72.y) * _ST_WindTurbulences.x));
      fAdherenceScale_61 = (fAdherenceScale_61 + ((vOscillations_64.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_60 = (vPos_60 + ((
        ((vRotatedBranchAnchor_7 - vPos_60) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_61) * _glesMultiTexCoord0.z));
      vPos_59 = vPos_60;
    } else {
      highp vec3 vPos_74;
      vPos_74 = vPos_59;
      highp vec3 tmpvar_75;
      tmpvar_75 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_76;
      tmpvar_76 = (_ST_WindBranch.x + (tmpvar_10.x + tmpvar_10.y));
      highp vec4 vOscillations_77;
      highp float fAmount_78;
      highp float fTarget_79;
      highp vec4 tmpvar_80;
      tmpvar_80.w = 0.0;
      tmpvar_80.x = (tmpvar_76 + _glesMultiTexCoord0.w);
      tmpvar_80.y = ((tmpvar_76 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_80.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_76 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      vOscillations_77 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      highp float tmpvar_82;
      tmpvar_82 = (vOscillations_77.y * vOscillations_77.z);
      fTarget_79 = 1.0;
      fAmount_78 = tmpvar_82;
      if ((tmpvar_82 < 0.0)) {
        fTarget_79 = -1.0;
        fAmount_78 = -(tmpvar_82);
      };
      vPos_74 = (vPos_59 + ((tmpvar_75 * 
        (((mix (
          mix (tmpvar_82, fTarget_79, fAmount_78)
        , fTarget_79, fAmount_78) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_77.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_59 = vPos_74;
    };
    FinalPosition_9 = vPos_59;
  };
  if ((tmpvar_11 > 0.0)) {
    highp vec3 vPos_83;
    vPos_83 = FinalPosition_9;
    highp float fAdjust_84;
    highp float fLength_85;
    fLength_85 = sqrt(dot (FinalPosition_9, FinalPosition_9));
    highp float tmpvar_86;
    tmpvar_86 = (max ((FinalPosition_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_84 = tmpvar_86;
    if ((tmpvar_86 != 0.0)) {
      fAdjust_84 = pow (tmpvar_86, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_87;
    tmpvar_87.zw = vec2(0.0, 0.0);
    tmpvar_87.x = (tmpvar_10.x + _ST_WindGlobal.x);
    tmpvar_87.y = (tmpvar_10.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_88;
    highp vec4 tmpvar_89;
    tmpvar_89 = abs(((
      fract((tmpvar_87 + 0.5))
     * 2.0) - 1.0));
    tmpvar_88 = (((
      (tmpvar_89 * tmpvar_89)
     * 
      (3.0 - (2.0 * tmpvar_89))
    ) - 0.5) * 2.0);
    vPos_83.xz = (FinalPosition_9.xz + (vRotatedWindVector_8.xz * (
      ((_ST_WindGlobal.y * (tmpvar_88.x + (tmpvar_88.y * tmpvar_88.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_84)));
    vPos_83 = (normalize(vPos_83) * fLength_85);
    FinalPosition_9 = vPos_83;
  };
  tmpvar_5.xyz = FinalPosition_9;
  highp vec3 vertex_90;
  vertex_90 = tmpvar_5.xyz;
  highp vec4 clipPos_91;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp vec4 tmpvar_92;
    tmpvar_92.w = 1.0;
    tmpvar_92.xyz = vertex_90;
    highp vec3 tmpvar_93;
    tmpvar_93 = (_Object2World * tmpvar_92).xyz;
    highp vec4 v_94;
    v_94.x = _World2Object[0].x;
    v_94.y = _World2Object[1].x;
    v_94.z = _World2Object[2].x;
    v_94.w = _World2Object[3].x;
    highp vec4 v_95;
    v_95.x = _World2Object[0].y;
    v_95.y = _World2Object[1].y;
    v_95.z = _World2Object[2].y;
    v_95.w = _World2Object[3].y;
    highp vec4 v_96;
    v_96.x = _World2Object[0].z;
    v_96.y = _World2Object[1].z;
    v_96.z = _World2Object[2].z;
    v_96.w = _World2Object[3].z;
    highp vec3 tmpvar_97;
    tmpvar_97 = normalize(((
      (v_94.xyz * tmpvar_6.x)
     + 
      (v_95.xyz * tmpvar_6.y)
    ) + (v_96.xyz * tmpvar_6.z)));
    highp float tmpvar_98;
    tmpvar_98 = dot (tmpvar_97, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_93 * _WorldSpaceLightPos0.w)
    )));
    highp vec4 tmpvar_99;
    tmpvar_99.w = 1.0;
    tmpvar_99.xyz = (tmpvar_93 - (tmpvar_97 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_98 * tmpvar_98)))
    )));
    clipPos_91 = (unity_MatrixVP * tmpvar_99);
  } else {
    highp vec4 tmpvar_100;
    tmpvar_100.w = 1.0;
    tmpvar_100.xyz = vertex_90;
    clipPos_91 = (glstate_matrix_mvp * tmpvar_100);
  };
  highp vec4 clipPos_101;
  clipPos_101.xyw = clipPos_91.xyw;
  clipPos_101.z = (clipPos_91.z + clamp ((unity_LightShadowBias.x / clipPos_91.w), 0.0, 1.0));
  clipPos_101.z = mix (clipPos_101.z, max (clipPos_101.z, -(clipPos_91.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_101;
  xlv_TEXCOORD1 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  lowp float x_1;
  x_1 = ((texture2D (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
out mediump vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  mediump vec2 tmpvar_3;
  highp vec2 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord0.xy;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_5 = tmpvar_1;
  tmpvar_6 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_7;
  highp vec3 vRotatedWindVector_8;
  highp vec3 FinalPosition_9;
  FinalPosition_9 = tmpvar_1.xyz;
  highp vec3 tmpvar_10;
  tmpvar_10.x = _Object2World[3].x;
  tmpvar_10.y = _Object2World[3].y;
  tmpvar_10.z = _Object2World[3].z;
  mediump float tmpvar_11;
  tmpvar_11 = (_WindQuality * _WindEnabled);
  if ((tmpvar_11 > 0.0)) {
    highp mat3 tmpvar_12;
    tmpvar_12[0] = _World2Object[0].xyz;
    tmpvar_12[1] = _World2Object[1].xyz;
    tmpvar_12[2] = _World2Object[2].xyz;
    vRotatedWindVector_8 = normalize((tmpvar_12 * _ST_WindVector.xyz));
    highp mat3 tmpvar_13;
    tmpvar_13[0] = _World2Object[0].xyz;
    tmpvar_13[1] = _World2Object[1].xyz;
    tmpvar_13[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_7 = (normalize((tmpvar_13 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_8 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_7 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_9 = tmpvar_14;
  if (((tmpvar_11 > 1.0) && (tmpvar_11 < 5.0))) {
    highp float tmpvar_15;
    tmpvar_15 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_16;
    isBestWind_16 = (tmpvar_11 == 4.0);
    bool bLeaf2_17;
    bLeaf2_17 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_18;
    vPos_18 = tmpvar_14;
    highp vec3 vDirection_19;
    vDirection_19 = tmpvar_2;
    highp float tmpvar_20;
    if (bLeaf2_17) {
      tmpvar_20 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_20 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_21;
    if (bLeaf2_17) {
      tmpvar_21 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_21 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_22;
    highp vec4 tmpvar_23;
    tmpvar_23.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_23.x = (tmpvar_20 + tmpvar_15);
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (tmpvar_14 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_21 * (((
        (tmpvar_24 * tmpvar_24)
       * 
        (3.0 - (2.0 * tmpvar_24))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_19 = tmpvar_2;
    vPos_18 = vPos_22;
    if (isBestWind_16) {
      highp vec3 tmpvar_25;
      tmpvar_25 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_26;
      if (bLeaf2_17) {
        tmpvar_26 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_26 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_27;
      if (bLeaf2_17) {
        tmpvar_27 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_27 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_28;
      if (bLeaf2_17) {
        tmpvar_28 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_28 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_29;
      if (bLeaf2_17) {
        tmpvar_29 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_29 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_30;
      if (bLeaf2_17) {
        tmpvar_30 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_30 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_31;
      if (bLeaf2_17) {
        tmpvar_31 = bool(1);
      } else {
        tmpvar_31 = bool(1);
      };
      highp float fTwitch_32;
      highp vec3 vAxis_33;
      highp vec3 tmpvar_34;
      tmpvar_34 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_35;
      tmpvar_35 = ((tmpvar_34.x + tmpvar_34.y) + tmpvar_34.z);
      highp vec4 tmpvar_36;
      tmpvar_36.x = (tmpvar_26 + tmpvar_35);
      tmpvar_36.y = ((tmpvar_26 * 0.75) - tmpvar_35);
      tmpvar_36.z = ((tmpvar_26 * 0.01) + tmpvar_35);
      tmpvar_36.w = (tmpvar_26 + tmpvar_35);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      highp float tmpvar_39;
      tmpvar_39 = sqrt(dot (vPos_22, vPos_22));
      highp float fAngle_40;
      fAngle_40 = ((_glesMultiTexCoord2.x * tmpvar_28) * (tmpvar_37.x + (tmpvar_37.y * tmpvar_37.y)));
      highp vec2 vSinCos_41;
      vSinCos_41.x = sin(fAngle_40);
      vSinCos_41.y = cos(fAngle_40);
      highp float tmpvar_42;
      tmpvar_42 = (1.0 - vSinCos_41.y);
      highp mat3 tmpvar_43;
      tmpvar_43[0].x = (((tmpvar_42 * tmpvar_25.x) * tmpvar_25.x) + vSinCos_41.y);
      tmpvar_43[0].y = (((tmpvar_42 * tmpvar_25.x) * tmpvar_25.y) + (vSinCos_41.x * tmpvar_25.z));
      tmpvar_43[0].z = (((tmpvar_42 * tmpvar_25.x) * tmpvar_25.z) - (vSinCos_41.x * tmpvar_25.y));
      tmpvar_43[1].x = (((tmpvar_42 * tmpvar_25.x) * tmpvar_25.y) - (vSinCos_41.x * tmpvar_25.z));
      tmpvar_43[1].y = (((tmpvar_42 * tmpvar_25.y) * tmpvar_25.y) + vSinCos_41.y);
      tmpvar_43[1].z = (((tmpvar_42 * tmpvar_25.y) * tmpvar_25.z) + (vSinCos_41.x * tmpvar_25.x));
      tmpvar_43[2].x = (((tmpvar_42 * tmpvar_25.x) * tmpvar_25.z) + (vSinCos_41.x * tmpvar_25.y));
      tmpvar_43[2].y = (((tmpvar_42 * tmpvar_25.y) * tmpvar_25.z) - (vSinCos_41.x * tmpvar_25.x));
      tmpvar_43[2].z = (((tmpvar_42 * tmpvar_25.z) * tmpvar_25.z) + vSinCos_41.y);
      highp vec3 tmpvar_44;
      tmpvar_44 = ((tmpvar_25.yzx * vRotatedWindVector_8.zxy) - (tmpvar_25.zxy * vRotatedWindVector_8.yzx));
      vAxis_33.xz = tmpvar_44.xz;
      highp float tmpvar_45;
      tmpvar_45 = clamp (dot (vRotatedWindVector_8, tmpvar_25), -1.0, 1.0);
      vAxis_33.y = (tmpvar_44.y + tmpvar_45);
      highp vec3 tmpvar_46;
      tmpvar_46 = normalize(vAxis_33);
      vAxis_33 = tmpvar_46;
      highp float tmpvar_47;
      tmpvar_47 = (1.570796 - (sign(tmpvar_45) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_45))) * (1.570796 + (abs(tmpvar_45) * (-0.2146018 + 
          (abs(tmpvar_45) * (0.08656672 + (abs(tmpvar_45) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_48;
      tmpvar_48 = (tmpvar_37.y - (tmpvar_37.x * tmpvar_37.x));
      fTwitch_32 = 0.0;
      if (tmpvar_31) {
        highp float fTime_49;
        fTime_49 = (tmpvar_30.z + tmpvar_35);
        highp vec4 tmpvar_50;
        tmpvar_50.zw = vec2(0.0, 0.0);
        tmpvar_50.x = fTime_49;
        tmpvar_50.y = (0.87 * fTime_49);
        highp vec4 tmpvar_51;
        highp vec4 tmpvar_52;
        tmpvar_52 = abs(((
          fract((tmpvar_50 + 0.5))
         * 2.0) - 1.0));
        tmpvar_51 = (((
          (tmpvar_52 * tmpvar_52)
         * 
          (3.0 - (2.0 * tmpvar_52))
        ) - 0.5) * 2.0);
        fTwitch_32 = (tmpvar_30.x * pow (clamp (
          ((((tmpvar_51.x * tmpvar_51.y) * tmpvar_51.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_30.y));
      };
      highp float fAngle_53;
      fAngle_53 = (_glesMultiTexCoord2.x * ((
        (tmpvar_47 * tmpvar_29)
       + 
        (tmpvar_48 * tmpvar_27)
      ) + fTwitch_32));
      highp vec2 vSinCos_54;
      vSinCos_54.x = sin(fAngle_53);
      vSinCos_54.y = cos(fAngle_53);
      highp float tmpvar_55;
      tmpvar_55 = (1.0 - vSinCos_54.y);
      highp mat3 tmpvar_56;
      tmpvar_56[0].x = (((tmpvar_55 * tmpvar_46.x) * tmpvar_46.x) + vSinCos_54.y);
      tmpvar_56[0].y = (((tmpvar_55 * tmpvar_46.x) * tmpvar_46.y) + (vSinCos_54.x * tmpvar_46.z));
      tmpvar_56[0].z = (((tmpvar_55 * tmpvar_46.x) * tmpvar_46.z) - (vSinCos_54.x * tmpvar_46.y));
      tmpvar_56[1].x = (((tmpvar_55 * tmpvar_46.x) * tmpvar_46.y) - (vSinCos_54.x * tmpvar_46.z));
      tmpvar_56[1].y = (((tmpvar_55 * tmpvar_46.y) * tmpvar_46.y) + vSinCos_54.y);
      tmpvar_56[1].z = (((tmpvar_55 * tmpvar_46.y) * tmpvar_46.z) + (vSinCos_54.x * tmpvar_46.x));
      tmpvar_56[2].x = (((tmpvar_55 * tmpvar_46.x) * tmpvar_46.z) + (vSinCos_54.x * tmpvar_46.y));
      tmpvar_56[2].y = (((tmpvar_55 * tmpvar_46.y) * tmpvar_46.z) - (vSinCos_54.x * tmpvar_46.x));
      tmpvar_56[2].z = (((tmpvar_55 * tmpvar_46.z) * tmpvar_46.z) + vSinCos_54.y);
      highp mat3 tmpvar_57;
      tmpvar_57 = (tmpvar_43 * tmpvar_56);
      vDirection_19 = (tmpvar_57 * _glesNormal);
      vPos_18 = (normalize((tmpvar_57 * vPos_22)) * tmpvar_39);
    };
    tmpvar_6 = vDirection_19;
    FinalPosition_9 = vPos_18;
  };
  highp vec3 tmpvar_58;
  tmpvar_58 = (FinalPosition_9 + _glesMultiTexCoord1.xyz);
  FinalPosition_9 = tmpvar_58;
  if ((tmpvar_11 >= 3.0)) {
    highp vec3 vPos_59;
    vPos_59 = tmpvar_58;
    if ((tmpvar_11 == 5.0)) {
      highp vec3 vPos_60;
      vPos_60 = tmpvar_58;
      highp float fAdherenceScale_61;
      highp vec3 tmpvar_62;
      tmpvar_62 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_63;
      tmpvar_63 = (_ST_WindBranch.x + (tmpvar_10.x + tmpvar_10.y));
      highp vec4 vOscillations_64;
      highp float fOscillation_65;
      fOscillation_65 = 1.0;
      highp float fAmount_66;
      highp float fTarget_67;
      highp vec4 tmpvar_68;
      tmpvar_68.x = (tmpvar_63 + _glesMultiTexCoord0.w);
      tmpvar_68.y = ((tmpvar_63 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_68.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_63 + _glesMultiTexCoord0.w));
      tmpvar_68.w = ((tmpvar_63 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_69;
      tmpvar_69 = abs(((
        fract((tmpvar_68 + 0.5))
       * 2.0) - 1.0));
      vOscillations_64 = (((
        (tmpvar_69 * tmpvar_69)
       * 
        (3.0 - (2.0 * tmpvar_69))
      ) - 0.5) * 2.0);
      highp float tmpvar_70;
      tmpvar_70 = (vOscillations_64.y * vOscillations_64.z);
      fTarget_67 = 1.0;
      fAmount_66 = tmpvar_70;
      if ((tmpvar_70 < 0.0)) {
        fTarget_67 = -1.0;
        fAmount_66 = -(tmpvar_70);
      };
      fOscillation_65 = (((
        (mix (mix (tmpvar_70, fTarget_67, fAmount_66), fTarget_67, fAmount_66) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_64.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_64.w * _ST_WindBranchWhip.x)));
      vPos_60 = (tmpvar_58 + ((tmpvar_62 * fOscillation_65) * _ST_WindBranch.y));
      highp vec4 tmpvar_71;
      tmpvar_71.zw = vec2(0.0, 0.0);
      tmpvar_71.x = ((tmpvar_63 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_71.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_72;
      highp vec4 tmpvar_73;
      tmpvar_73 = abs(((
        fract((tmpvar_71 + 0.5))
       * 2.0) - 1.0));
      tmpvar_72 = (((
        (tmpvar_73 * tmpvar_73)
       * 
        (3.0 - (2.0 * tmpvar_73))
      ) - 0.5) * 2.0);
      fAdherenceScale_61 = (1.0 - ((
        ((tmpvar_72.x * tmpvar_72.y) * tmpvar_72.x)
       * tmpvar_72.y) * _ST_WindTurbulences.x));
      fAdherenceScale_61 = (fAdherenceScale_61 + ((vOscillations_64.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_60 = (vPos_60 + ((
        ((vRotatedBranchAnchor_7 - vPos_60) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_61) * _glesMultiTexCoord0.z));
      vPos_59 = vPos_60;
    } else {
      highp vec3 vPos_74;
      vPos_74 = vPos_59;
      highp vec3 tmpvar_75;
      tmpvar_75 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_76;
      tmpvar_76 = (_ST_WindBranch.x + (tmpvar_10.x + tmpvar_10.y));
      highp vec4 vOscillations_77;
      highp float fAmount_78;
      highp float fTarget_79;
      highp vec4 tmpvar_80;
      tmpvar_80.w = 0.0;
      tmpvar_80.x = (tmpvar_76 + _glesMultiTexCoord0.w);
      tmpvar_80.y = ((tmpvar_76 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_80.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_76 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      vOscillations_77 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      highp float tmpvar_82;
      tmpvar_82 = (vOscillations_77.y * vOscillations_77.z);
      fTarget_79 = 1.0;
      fAmount_78 = tmpvar_82;
      if ((tmpvar_82 < 0.0)) {
        fTarget_79 = -1.0;
        fAmount_78 = -(tmpvar_82);
      };
      vPos_74 = (vPos_59 + ((tmpvar_75 * 
        (((mix (
          mix (tmpvar_82, fTarget_79, fAmount_78)
        , fTarget_79, fAmount_78) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_77.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_59 = vPos_74;
    };
    FinalPosition_9 = vPos_59;
  };
  if ((tmpvar_11 > 0.0)) {
    highp vec3 vPos_83;
    vPos_83 = FinalPosition_9;
    highp float fAdjust_84;
    highp float fLength_85;
    fLength_85 = sqrt(dot (FinalPosition_9, FinalPosition_9));
    highp float tmpvar_86;
    tmpvar_86 = (max ((FinalPosition_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_84 = tmpvar_86;
    if ((tmpvar_86 != 0.0)) {
      fAdjust_84 = pow (tmpvar_86, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_87;
    tmpvar_87.zw = vec2(0.0, 0.0);
    tmpvar_87.x = (tmpvar_10.x + _ST_WindGlobal.x);
    tmpvar_87.y = (tmpvar_10.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_88;
    highp vec4 tmpvar_89;
    tmpvar_89 = abs(((
      fract((tmpvar_87 + 0.5))
     * 2.0) - 1.0));
    tmpvar_88 = (((
      (tmpvar_89 * tmpvar_89)
     * 
      (3.0 - (2.0 * tmpvar_89))
    ) - 0.5) * 2.0);
    vPos_83.xz = (FinalPosition_9.xz + (vRotatedWindVector_8.xz * (
      ((_ST_WindGlobal.y * (tmpvar_88.x + (tmpvar_88.y * tmpvar_88.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_84)));
    vPos_83 = (normalize(vPos_83) * fLength_85);
    FinalPosition_9 = vPos_83;
  };
  tmpvar_5.xyz = FinalPosition_9;
  highp vec3 vertex_90;
  vertex_90 = tmpvar_5.xyz;
  highp vec4 clipPos_91;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp vec4 tmpvar_92;
    tmpvar_92.w = 1.0;
    tmpvar_92.xyz = vertex_90;
    highp vec3 tmpvar_93;
    tmpvar_93 = (_Object2World * tmpvar_92).xyz;
    highp vec4 v_94;
    v_94.x = _World2Object[0].x;
    v_94.y = _World2Object[1].x;
    v_94.z = _World2Object[2].x;
    v_94.w = _World2Object[3].x;
    highp vec4 v_95;
    v_95.x = _World2Object[0].y;
    v_95.y = _World2Object[1].y;
    v_95.z = _World2Object[2].y;
    v_95.w = _World2Object[3].y;
    highp vec4 v_96;
    v_96.x = _World2Object[0].z;
    v_96.y = _World2Object[1].z;
    v_96.z = _World2Object[2].z;
    v_96.w = _World2Object[3].z;
    highp vec3 tmpvar_97;
    tmpvar_97 = normalize(((
      (v_94.xyz * tmpvar_6.x)
     + 
      (v_95.xyz * tmpvar_6.y)
    ) + (v_96.xyz * tmpvar_6.z)));
    highp float tmpvar_98;
    tmpvar_98 = dot (tmpvar_97, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_93 * _WorldSpaceLightPos0.w)
    )));
    highp vec4 tmpvar_99;
    tmpvar_99.w = 1.0;
    tmpvar_99.xyz = (tmpvar_93 - (tmpvar_97 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_98 * tmpvar_98)))
    )));
    clipPos_91 = (unity_MatrixVP * tmpvar_99);
  } else {
    highp vec4 tmpvar_100;
    tmpvar_100.w = 1.0;
    tmpvar_100.xyz = vertex_90;
    clipPos_91 = (glstate_matrix_mvp * tmpvar_100);
  };
  highp vec4 clipPos_101;
  clipPos_101.xyw = clipPos_91.xyw;
  clipPos_101.z = (clipPos_91.z + clamp ((unity_LightShadowBias.x / clipPos_91.w), 0.0, 1.0));
  clipPos_101.z = mix (clipPos_101.z, max (clipPos_101.z, -(clipPos_91.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_101;
  xlv_TEXCOORD1 = tmpvar_3;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
in mediump vec2 xlv_TEXCOORD1;
void main ()
{
  lowp float x_1;
  x_1 = ((texture (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  _glesFragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}



#endif"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec2 tmpvar_2;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0.xy;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_5;
  highp vec3 vRotatedWindVector_6;
  highp vec3 FinalPosition_7;
  FinalPosition_7 = tmpvar_1.xyz;
  highp vec3 tmpvar_8;
  tmpvar_8.x = _Object2World[3].x;
  tmpvar_8.y = _Object2World[3].y;
  tmpvar_8.z = _Object2World[3].z;
  mediump float tmpvar_9;
  tmpvar_9 = (_WindQuality * _WindEnabled);
  if ((tmpvar_9 > 0.0)) {
    highp mat3 tmpvar_10;
    tmpvar_10[0] = _World2Object[0].xyz;
    tmpvar_10[1] = _World2Object[1].xyz;
    tmpvar_10[2] = _World2Object[2].xyz;
    vRotatedWindVector_6 = normalize((tmpvar_10 * _ST_WindVector.xyz));
    highp mat3 tmpvar_11;
    tmpvar_11[0] = _World2Object[0].xyz;
    tmpvar_11[1] = _World2Object[1].xyz;
    tmpvar_11[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_5 = (normalize((tmpvar_11 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_6 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_5 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_7 = tmpvar_12;
  if (((tmpvar_9 > 1.0) && (tmpvar_9 < 5.0))) {
    highp float tmpvar_13;
    tmpvar_13 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_14;
    isBestWind_14 = (tmpvar_9 == 4.0);
    bool bLeaf2_15;
    bLeaf2_15 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_16;
    vPos_16 = tmpvar_12;
    highp float tmpvar_17;
    if (bLeaf2_15) {
      tmpvar_17 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_17 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_18;
    if (bLeaf2_15) {
      tmpvar_18 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_18 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_19;
    highp vec4 tmpvar_20;
    tmpvar_20.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_20.x = (tmpvar_17 + tmpvar_13);
    highp vec4 tmpvar_21;
    tmpvar_21 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    vPos_19 = (tmpvar_12 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_18 * (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vPos_16 = vPos_19;
    if (isBestWind_14) {
      highp vec3 tmpvar_22;
      tmpvar_22 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_23;
      if (bLeaf2_15) {
        tmpvar_23 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_23 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_24;
      if (bLeaf2_15) {
        tmpvar_24 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_24 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_25;
      if (bLeaf2_15) {
        tmpvar_25 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_25 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_26;
      if (bLeaf2_15) {
        tmpvar_26 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_26 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_27;
      if (bLeaf2_15) {
        tmpvar_27 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_27 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_28;
      if (bLeaf2_15) {
        tmpvar_28 = bool(1);
      } else {
        tmpvar_28 = bool(1);
      };
      highp float fTwitch_29;
      highp vec3 vAxis_30;
      highp vec3 tmpvar_31;
      tmpvar_31 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_32;
      tmpvar_32 = ((tmpvar_31.x + tmpvar_31.y) + tmpvar_31.z);
      highp vec4 tmpvar_33;
      tmpvar_33.x = (tmpvar_23 + tmpvar_32);
      tmpvar_33.y = ((tmpvar_23 * 0.75) - tmpvar_32);
      tmpvar_33.z = ((tmpvar_23 * 0.01) + tmpvar_32);
      tmpvar_33.w = (tmpvar_23 + tmpvar_32);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = sqrt(dot (vPos_19, vPos_19));
      highp float fAngle_37;
      fAngle_37 = ((_glesMultiTexCoord2.x * tmpvar_25) * (tmpvar_34.x + (tmpvar_34.y * tmpvar_34.y)));
      highp vec2 vSinCos_38;
      vSinCos_38.x = sin(fAngle_37);
      vSinCos_38.y = cos(fAngle_37);
      highp float tmpvar_39;
      tmpvar_39 = (1.0 - vSinCos_38.y);
      highp mat3 tmpvar_40;
      tmpvar_40[0].x = (((tmpvar_39 * tmpvar_22.x) * tmpvar_22.x) + vSinCos_38.y);
      tmpvar_40[0].y = (((tmpvar_39 * tmpvar_22.x) * tmpvar_22.y) + (vSinCos_38.x * tmpvar_22.z));
      tmpvar_40[0].z = (((tmpvar_39 * tmpvar_22.x) * tmpvar_22.z) - (vSinCos_38.x * tmpvar_22.y));
      tmpvar_40[1].x = (((tmpvar_39 * tmpvar_22.x) * tmpvar_22.y) - (vSinCos_38.x * tmpvar_22.z));
      tmpvar_40[1].y = (((tmpvar_39 * tmpvar_22.y) * tmpvar_22.y) + vSinCos_38.y);
      tmpvar_40[1].z = (((tmpvar_39 * tmpvar_22.y) * tmpvar_22.z) + (vSinCos_38.x * tmpvar_22.x));
      tmpvar_40[2].x = (((tmpvar_39 * tmpvar_22.x) * tmpvar_22.z) + (vSinCos_38.x * tmpvar_22.y));
      tmpvar_40[2].y = (((tmpvar_39 * tmpvar_22.y) * tmpvar_22.z) - (vSinCos_38.x * tmpvar_22.x));
      tmpvar_40[2].z = (((tmpvar_39 * tmpvar_22.z) * tmpvar_22.z) + vSinCos_38.y);
      highp vec3 tmpvar_41;
      tmpvar_41 = ((tmpvar_22.yzx * vRotatedWindVector_6.zxy) - (tmpvar_22.zxy * vRotatedWindVector_6.yzx));
      vAxis_30.xz = tmpvar_41.xz;
      highp float tmpvar_42;
      tmpvar_42 = clamp (dot (vRotatedWindVector_6, tmpvar_22), -1.0, 1.0);
      vAxis_30.y = (tmpvar_41.y + tmpvar_42);
      highp vec3 tmpvar_43;
      tmpvar_43 = normalize(vAxis_30);
      vAxis_30 = tmpvar_43;
      highp float tmpvar_44;
      tmpvar_44 = (1.570796 - (sign(tmpvar_42) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_42))) * (1.570796 + (abs(tmpvar_42) * (-0.2146018 + 
          (abs(tmpvar_42) * (0.08656672 + (abs(tmpvar_42) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_45;
      tmpvar_45 = (tmpvar_34.y - (tmpvar_34.x * tmpvar_34.x));
      fTwitch_29 = 0.0;
      if (tmpvar_28) {
        highp float fTime_46;
        fTime_46 = (tmpvar_27.z + tmpvar_32);
        highp vec4 tmpvar_47;
        tmpvar_47.zw = vec2(0.0, 0.0);
        tmpvar_47.x = fTime_46;
        tmpvar_47.y = (0.87 * fTime_46);
        highp vec4 tmpvar_48;
        highp vec4 tmpvar_49;
        tmpvar_49 = abs(((
          fract((tmpvar_47 + 0.5))
         * 2.0) - 1.0));
        tmpvar_48 = (((
          (tmpvar_49 * tmpvar_49)
         * 
          (3.0 - (2.0 * tmpvar_49))
        ) - 0.5) * 2.0);
        fTwitch_29 = (tmpvar_27.x * pow (clamp (
          ((((tmpvar_48.x * tmpvar_48.y) * tmpvar_48.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_27.y));
      };
      highp float fAngle_50;
      fAngle_50 = (_glesMultiTexCoord2.x * ((
        (tmpvar_44 * tmpvar_26)
       + 
        (tmpvar_45 * tmpvar_24)
      ) + fTwitch_29));
      highp vec2 vSinCos_51;
      vSinCos_51.x = sin(fAngle_50);
      vSinCos_51.y = cos(fAngle_50);
      highp float tmpvar_52;
      tmpvar_52 = (1.0 - vSinCos_51.y);
      highp mat3 tmpvar_53;
      tmpvar_53[0].x = (((tmpvar_52 * tmpvar_43.x) * tmpvar_43.x) + vSinCos_51.y);
      tmpvar_53[0].y = (((tmpvar_52 * tmpvar_43.x) * tmpvar_43.y) + (vSinCos_51.x * tmpvar_43.z));
      tmpvar_53[0].z = (((tmpvar_52 * tmpvar_43.x) * tmpvar_43.z) - (vSinCos_51.x * tmpvar_43.y));
      tmpvar_53[1].x = (((tmpvar_52 * tmpvar_43.x) * tmpvar_43.y) - (vSinCos_51.x * tmpvar_43.z));
      tmpvar_53[1].y = (((tmpvar_52 * tmpvar_43.y) * tmpvar_43.y) + vSinCos_51.y);
      tmpvar_53[1].z = (((tmpvar_52 * tmpvar_43.y) * tmpvar_43.z) + (vSinCos_51.x * tmpvar_43.x));
      tmpvar_53[2].x = (((tmpvar_52 * tmpvar_43.x) * tmpvar_43.z) + (vSinCos_51.x * tmpvar_43.y));
      tmpvar_53[2].y = (((tmpvar_52 * tmpvar_43.y) * tmpvar_43.z) - (vSinCos_51.x * tmpvar_43.x));
      tmpvar_53[2].z = (((tmpvar_52 * tmpvar_43.z) * tmpvar_43.z) + vSinCos_51.y);
      vPos_16 = (normalize((
        (tmpvar_40 * tmpvar_53)
       * vPos_19)) * tmpvar_36);
    };
    FinalPosition_7 = vPos_16;
  };
  highp vec3 tmpvar_54;
  tmpvar_54 = (FinalPosition_7 + _glesMultiTexCoord1.xyz);
  FinalPosition_7 = tmpvar_54;
  if ((tmpvar_9 >= 3.0)) {
    highp vec3 vPos_55;
    vPos_55 = tmpvar_54;
    if ((tmpvar_9 == 5.0)) {
      highp vec3 vPos_56;
      vPos_56 = tmpvar_54;
      highp float fAdherenceScale_57;
      highp vec3 tmpvar_58;
      tmpvar_58 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_59;
      tmpvar_59 = (_ST_WindBranch.x + (tmpvar_8.x + tmpvar_8.y));
      highp vec4 vOscillations_60;
      highp float fOscillation_61;
      fOscillation_61 = 1.0;
      highp float fAmount_62;
      highp float fTarget_63;
      highp vec4 tmpvar_64;
      tmpvar_64.x = (tmpvar_59 + _glesMultiTexCoord0.w);
      tmpvar_64.y = ((tmpvar_59 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_64.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_59 + _glesMultiTexCoord0.w));
      tmpvar_64.w = ((tmpvar_59 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_65;
      tmpvar_65 = abs(((
        fract((tmpvar_64 + 0.5))
       * 2.0) - 1.0));
      vOscillations_60 = (((
        (tmpvar_65 * tmpvar_65)
       * 
        (3.0 - (2.0 * tmpvar_65))
      ) - 0.5) * 2.0);
      highp float tmpvar_66;
      tmpvar_66 = (vOscillations_60.y * vOscillations_60.z);
      fTarget_63 = 1.0;
      fAmount_62 = tmpvar_66;
      if ((tmpvar_66 < 0.0)) {
        fTarget_63 = -1.0;
        fAmount_62 = -(tmpvar_66);
      };
      fOscillation_61 = (((
        (mix (mix (tmpvar_66, fTarget_63, fAmount_62), fTarget_63, fAmount_62) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_60.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_60.w * _ST_WindBranchWhip.x)));
      vPos_56 = (tmpvar_54 + ((tmpvar_58 * fOscillation_61) * _ST_WindBranch.y));
      highp vec4 tmpvar_67;
      tmpvar_67.zw = vec2(0.0, 0.0);
      tmpvar_67.x = ((tmpvar_59 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_67.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_68;
      highp vec4 tmpvar_69;
      tmpvar_69 = abs(((
        fract((tmpvar_67 + 0.5))
       * 2.0) - 1.0));
      tmpvar_68 = (((
        (tmpvar_69 * tmpvar_69)
       * 
        (3.0 - (2.0 * tmpvar_69))
      ) - 0.5) * 2.0);
      fAdherenceScale_57 = (1.0 - ((
        ((tmpvar_68.x * tmpvar_68.y) * tmpvar_68.x)
       * tmpvar_68.y) * _ST_WindTurbulences.x));
      fAdherenceScale_57 = (fAdherenceScale_57 + ((vOscillations_60.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_56 = (vPos_56 + ((
        ((vRotatedBranchAnchor_5 - vPos_56) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_57) * _glesMultiTexCoord0.z));
      vPos_55 = vPos_56;
    } else {
      highp vec3 vPos_70;
      vPos_70 = vPos_55;
      highp vec3 tmpvar_71;
      tmpvar_71 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_72;
      tmpvar_72 = (_ST_WindBranch.x + (tmpvar_8.x + tmpvar_8.y));
      highp vec4 vOscillations_73;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.w = 0.0;
      tmpvar_76.x = (tmpvar_72 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((tmpvar_72 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_72 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_73 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_73.y * vOscillations_73.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      vPos_70 = (vPos_55 + ((tmpvar_71 * 
        (((mix (
          mix (tmpvar_78, fTarget_75, fAmount_74)
        , fTarget_75, fAmount_74) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_73.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_55 = vPos_70;
    };
    FinalPosition_7 = vPos_55;
  };
  if ((tmpvar_9 > 0.0)) {
    highp vec3 vPos_79;
    vPos_79 = FinalPosition_7;
    highp float fAdjust_80;
    highp float fLength_81;
    fLength_81 = sqrt(dot (FinalPosition_7, FinalPosition_7));
    highp float tmpvar_82;
    tmpvar_82 = (max ((FinalPosition_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_80 = tmpvar_82;
    if ((tmpvar_82 != 0.0)) {
      fAdjust_80 = pow (tmpvar_82, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_83;
    tmpvar_83.zw = vec2(0.0, 0.0);
    tmpvar_83.x = (tmpvar_8.x + _ST_WindGlobal.x);
    tmpvar_83.y = (tmpvar_8.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_84;
    highp vec4 tmpvar_85;
    tmpvar_85 = abs(((
      fract((tmpvar_83 + 0.5))
     * 2.0) - 1.0));
    tmpvar_84 = (((
      (tmpvar_85 * tmpvar_85)
     * 
      (3.0 - (2.0 * tmpvar_85))
    ) - 0.5) * 2.0);
    vPos_79.xz = (FinalPosition_7.xz + (vRotatedWindVector_6.xz * (
      ((_ST_WindGlobal.y * (tmpvar_84.x + (tmpvar_84.y * tmpvar_84.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_80)));
    vPos_79 = (normalize(vPos_79) * fLength_81);
    FinalPosition_7 = vPos_79;
  };
  tmpvar_4.xyz = FinalPosition_7;
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_4).xyz - _LightPositionRange.xyz);
  gl_Position = (glstate_matrix_mvp * tmpvar_4);
  xlv_TEXCOORD1 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _LightPositionRange;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  lowp float x_1;
  x_1 = ((texture2D (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_2;
  tmpvar_2 = fract((vec4(1.0, 255.0, 65025.0, 1.658138e+07) * min (
    (sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w)
  , 0.999)));
  highp vec4 tmpvar_3;
  tmpvar_3 = (tmpvar_2 - (tmpvar_2.yzww * 0.003921569));
  gl_FragData[0] = tmpvar_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
out highp vec3 xlv_TEXCOORD0;
out mediump vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec2 tmpvar_2;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0.xy;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_5;
  highp vec3 vRotatedWindVector_6;
  highp vec3 FinalPosition_7;
  FinalPosition_7 = tmpvar_1.xyz;
  highp vec3 tmpvar_8;
  tmpvar_8.x = _Object2World[3].x;
  tmpvar_8.y = _Object2World[3].y;
  tmpvar_8.z = _Object2World[3].z;
  mediump float tmpvar_9;
  tmpvar_9 = (_WindQuality * _WindEnabled);
  if ((tmpvar_9 > 0.0)) {
    highp mat3 tmpvar_10;
    tmpvar_10[0] = _World2Object[0].xyz;
    tmpvar_10[1] = _World2Object[1].xyz;
    tmpvar_10[2] = _World2Object[2].xyz;
    vRotatedWindVector_6 = normalize((tmpvar_10 * _ST_WindVector.xyz));
    highp mat3 tmpvar_11;
    tmpvar_11[0] = _World2Object[0].xyz;
    tmpvar_11[1] = _World2Object[1].xyz;
    tmpvar_11[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_5 = (normalize((tmpvar_11 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_6 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_5 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_7 = tmpvar_12;
  if (((tmpvar_9 > 1.0) && (tmpvar_9 < 5.0))) {
    highp float tmpvar_13;
    tmpvar_13 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_14;
    isBestWind_14 = (tmpvar_9 == 4.0);
    bool bLeaf2_15;
    bLeaf2_15 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_16;
    vPos_16 = tmpvar_12;
    highp float tmpvar_17;
    if (bLeaf2_15) {
      tmpvar_17 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_17 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_18;
    if (bLeaf2_15) {
      tmpvar_18 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_18 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_19;
    highp vec4 tmpvar_20;
    tmpvar_20.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_20.x = (tmpvar_17 + tmpvar_13);
    highp vec4 tmpvar_21;
    tmpvar_21 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    vPos_19 = (tmpvar_12 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_18 * (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vPos_16 = vPos_19;
    if (isBestWind_14) {
      highp vec3 tmpvar_22;
      tmpvar_22 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_23;
      if (bLeaf2_15) {
        tmpvar_23 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_23 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_24;
      if (bLeaf2_15) {
        tmpvar_24 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_24 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_25;
      if (bLeaf2_15) {
        tmpvar_25 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_25 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_26;
      if (bLeaf2_15) {
        tmpvar_26 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_26 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_27;
      if (bLeaf2_15) {
        tmpvar_27 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_27 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_28;
      if (bLeaf2_15) {
        tmpvar_28 = bool(1);
      } else {
        tmpvar_28 = bool(1);
      };
      highp float fTwitch_29;
      highp vec3 vAxis_30;
      highp vec3 tmpvar_31;
      tmpvar_31 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_32;
      tmpvar_32 = ((tmpvar_31.x + tmpvar_31.y) + tmpvar_31.z);
      highp vec4 tmpvar_33;
      tmpvar_33.x = (tmpvar_23 + tmpvar_32);
      tmpvar_33.y = ((tmpvar_23 * 0.75) - tmpvar_32);
      tmpvar_33.z = ((tmpvar_23 * 0.01) + tmpvar_32);
      tmpvar_33.w = (tmpvar_23 + tmpvar_32);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = sqrt(dot (vPos_19, vPos_19));
      highp float fAngle_37;
      fAngle_37 = ((_glesMultiTexCoord2.x * tmpvar_25) * (tmpvar_34.x + (tmpvar_34.y * tmpvar_34.y)));
      highp vec2 vSinCos_38;
      vSinCos_38.x = sin(fAngle_37);
      vSinCos_38.y = cos(fAngle_37);
      highp float tmpvar_39;
      tmpvar_39 = (1.0 - vSinCos_38.y);
      highp mat3 tmpvar_40;
      tmpvar_40[0].x = (((tmpvar_39 * tmpvar_22.x) * tmpvar_22.x) + vSinCos_38.y);
      tmpvar_40[0].y = (((tmpvar_39 * tmpvar_22.x) * tmpvar_22.y) + (vSinCos_38.x * tmpvar_22.z));
      tmpvar_40[0].z = (((tmpvar_39 * tmpvar_22.x) * tmpvar_22.z) - (vSinCos_38.x * tmpvar_22.y));
      tmpvar_40[1].x = (((tmpvar_39 * tmpvar_22.x) * tmpvar_22.y) - (vSinCos_38.x * tmpvar_22.z));
      tmpvar_40[1].y = (((tmpvar_39 * tmpvar_22.y) * tmpvar_22.y) + vSinCos_38.y);
      tmpvar_40[1].z = (((tmpvar_39 * tmpvar_22.y) * tmpvar_22.z) + (vSinCos_38.x * tmpvar_22.x));
      tmpvar_40[2].x = (((tmpvar_39 * tmpvar_22.x) * tmpvar_22.z) + (vSinCos_38.x * tmpvar_22.y));
      tmpvar_40[2].y = (((tmpvar_39 * tmpvar_22.y) * tmpvar_22.z) - (vSinCos_38.x * tmpvar_22.x));
      tmpvar_40[2].z = (((tmpvar_39 * tmpvar_22.z) * tmpvar_22.z) + vSinCos_38.y);
      highp vec3 tmpvar_41;
      tmpvar_41 = ((tmpvar_22.yzx * vRotatedWindVector_6.zxy) - (tmpvar_22.zxy * vRotatedWindVector_6.yzx));
      vAxis_30.xz = tmpvar_41.xz;
      highp float tmpvar_42;
      tmpvar_42 = clamp (dot (vRotatedWindVector_6, tmpvar_22), -1.0, 1.0);
      vAxis_30.y = (tmpvar_41.y + tmpvar_42);
      highp vec3 tmpvar_43;
      tmpvar_43 = normalize(vAxis_30);
      vAxis_30 = tmpvar_43;
      highp float tmpvar_44;
      tmpvar_44 = (1.570796 - (sign(tmpvar_42) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_42))) * (1.570796 + (abs(tmpvar_42) * (-0.2146018 + 
          (abs(tmpvar_42) * (0.08656672 + (abs(tmpvar_42) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_45;
      tmpvar_45 = (tmpvar_34.y - (tmpvar_34.x * tmpvar_34.x));
      fTwitch_29 = 0.0;
      if (tmpvar_28) {
        highp float fTime_46;
        fTime_46 = (tmpvar_27.z + tmpvar_32);
        highp vec4 tmpvar_47;
        tmpvar_47.zw = vec2(0.0, 0.0);
        tmpvar_47.x = fTime_46;
        tmpvar_47.y = (0.87 * fTime_46);
        highp vec4 tmpvar_48;
        highp vec4 tmpvar_49;
        tmpvar_49 = abs(((
          fract((tmpvar_47 + 0.5))
         * 2.0) - 1.0));
        tmpvar_48 = (((
          (tmpvar_49 * tmpvar_49)
         * 
          (3.0 - (2.0 * tmpvar_49))
        ) - 0.5) * 2.0);
        fTwitch_29 = (tmpvar_27.x * pow (clamp (
          ((((tmpvar_48.x * tmpvar_48.y) * tmpvar_48.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_27.y));
      };
      highp float fAngle_50;
      fAngle_50 = (_glesMultiTexCoord2.x * ((
        (tmpvar_44 * tmpvar_26)
       + 
        (tmpvar_45 * tmpvar_24)
      ) + fTwitch_29));
      highp vec2 vSinCos_51;
      vSinCos_51.x = sin(fAngle_50);
      vSinCos_51.y = cos(fAngle_50);
      highp float tmpvar_52;
      tmpvar_52 = (1.0 - vSinCos_51.y);
      highp mat3 tmpvar_53;
      tmpvar_53[0].x = (((tmpvar_52 * tmpvar_43.x) * tmpvar_43.x) + vSinCos_51.y);
      tmpvar_53[0].y = (((tmpvar_52 * tmpvar_43.x) * tmpvar_43.y) + (vSinCos_51.x * tmpvar_43.z));
      tmpvar_53[0].z = (((tmpvar_52 * tmpvar_43.x) * tmpvar_43.z) - (vSinCos_51.x * tmpvar_43.y));
      tmpvar_53[1].x = (((tmpvar_52 * tmpvar_43.x) * tmpvar_43.y) - (vSinCos_51.x * tmpvar_43.z));
      tmpvar_53[1].y = (((tmpvar_52 * tmpvar_43.y) * tmpvar_43.y) + vSinCos_51.y);
      tmpvar_53[1].z = (((tmpvar_52 * tmpvar_43.y) * tmpvar_43.z) + (vSinCos_51.x * tmpvar_43.x));
      tmpvar_53[2].x = (((tmpvar_52 * tmpvar_43.x) * tmpvar_43.z) + (vSinCos_51.x * tmpvar_43.y));
      tmpvar_53[2].y = (((tmpvar_52 * tmpvar_43.y) * tmpvar_43.z) - (vSinCos_51.x * tmpvar_43.x));
      tmpvar_53[2].z = (((tmpvar_52 * tmpvar_43.z) * tmpvar_43.z) + vSinCos_51.y);
      vPos_16 = (normalize((
        (tmpvar_40 * tmpvar_53)
       * vPos_19)) * tmpvar_36);
    };
    FinalPosition_7 = vPos_16;
  };
  highp vec3 tmpvar_54;
  tmpvar_54 = (FinalPosition_7 + _glesMultiTexCoord1.xyz);
  FinalPosition_7 = tmpvar_54;
  if ((tmpvar_9 >= 3.0)) {
    highp vec3 vPos_55;
    vPos_55 = tmpvar_54;
    if ((tmpvar_9 == 5.0)) {
      highp vec3 vPos_56;
      vPos_56 = tmpvar_54;
      highp float fAdherenceScale_57;
      highp vec3 tmpvar_58;
      tmpvar_58 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_59;
      tmpvar_59 = (_ST_WindBranch.x + (tmpvar_8.x + tmpvar_8.y));
      highp vec4 vOscillations_60;
      highp float fOscillation_61;
      fOscillation_61 = 1.0;
      highp float fAmount_62;
      highp float fTarget_63;
      highp vec4 tmpvar_64;
      tmpvar_64.x = (tmpvar_59 + _glesMultiTexCoord0.w);
      tmpvar_64.y = ((tmpvar_59 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_64.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_59 + _glesMultiTexCoord0.w));
      tmpvar_64.w = ((tmpvar_59 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_65;
      tmpvar_65 = abs(((
        fract((tmpvar_64 + 0.5))
       * 2.0) - 1.0));
      vOscillations_60 = (((
        (tmpvar_65 * tmpvar_65)
       * 
        (3.0 - (2.0 * tmpvar_65))
      ) - 0.5) * 2.0);
      highp float tmpvar_66;
      tmpvar_66 = (vOscillations_60.y * vOscillations_60.z);
      fTarget_63 = 1.0;
      fAmount_62 = tmpvar_66;
      if ((tmpvar_66 < 0.0)) {
        fTarget_63 = -1.0;
        fAmount_62 = -(tmpvar_66);
      };
      fOscillation_61 = (((
        (mix (mix (tmpvar_66, fTarget_63, fAmount_62), fTarget_63, fAmount_62) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_60.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_60.w * _ST_WindBranchWhip.x)));
      vPos_56 = (tmpvar_54 + ((tmpvar_58 * fOscillation_61) * _ST_WindBranch.y));
      highp vec4 tmpvar_67;
      tmpvar_67.zw = vec2(0.0, 0.0);
      tmpvar_67.x = ((tmpvar_59 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_67.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_68;
      highp vec4 tmpvar_69;
      tmpvar_69 = abs(((
        fract((tmpvar_67 + 0.5))
       * 2.0) - 1.0));
      tmpvar_68 = (((
        (tmpvar_69 * tmpvar_69)
       * 
        (3.0 - (2.0 * tmpvar_69))
      ) - 0.5) * 2.0);
      fAdherenceScale_57 = (1.0 - ((
        ((tmpvar_68.x * tmpvar_68.y) * tmpvar_68.x)
       * tmpvar_68.y) * _ST_WindTurbulences.x));
      fAdherenceScale_57 = (fAdherenceScale_57 + ((vOscillations_60.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_56 = (vPos_56 + ((
        ((vRotatedBranchAnchor_5 - vPos_56) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_57) * _glesMultiTexCoord0.z));
      vPos_55 = vPos_56;
    } else {
      highp vec3 vPos_70;
      vPos_70 = vPos_55;
      highp vec3 tmpvar_71;
      tmpvar_71 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_72;
      tmpvar_72 = (_ST_WindBranch.x + (tmpvar_8.x + tmpvar_8.y));
      highp vec4 vOscillations_73;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.w = 0.0;
      tmpvar_76.x = (tmpvar_72 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((tmpvar_72 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_72 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_73 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_73.y * vOscillations_73.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      vPos_70 = (vPos_55 + ((tmpvar_71 * 
        (((mix (
          mix (tmpvar_78, fTarget_75, fAmount_74)
        , fTarget_75, fAmount_74) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_73.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_55 = vPos_70;
    };
    FinalPosition_7 = vPos_55;
  };
  if ((tmpvar_9 > 0.0)) {
    highp vec3 vPos_79;
    vPos_79 = FinalPosition_7;
    highp float fAdjust_80;
    highp float fLength_81;
    fLength_81 = sqrt(dot (FinalPosition_7, FinalPosition_7));
    highp float tmpvar_82;
    tmpvar_82 = (max ((FinalPosition_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_80 = tmpvar_82;
    if ((tmpvar_82 != 0.0)) {
      fAdjust_80 = pow (tmpvar_82, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_83;
    tmpvar_83.zw = vec2(0.0, 0.0);
    tmpvar_83.x = (tmpvar_8.x + _ST_WindGlobal.x);
    tmpvar_83.y = (tmpvar_8.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_84;
    highp vec4 tmpvar_85;
    tmpvar_85 = abs(((
      fract((tmpvar_83 + 0.5))
     * 2.0) - 1.0));
    tmpvar_84 = (((
      (tmpvar_85 * tmpvar_85)
     * 
      (3.0 - (2.0 * tmpvar_85))
    ) - 0.5) * 2.0);
    vPos_79.xz = (FinalPosition_7.xz + (vRotatedWindVector_6.xz * (
      ((_ST_WindGlobal.y * (tmpvar_84.x + (tmpvar_84.y * tmpvar_84.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_80)));
    vPos_79 = (normalize(vPos_79) * fLength_81);
    FinalPosition_7 = vPos_79;
  };
  tmpvar_4.xyz = FinalPosition_7;
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_4).xyz - _LightPositionRange.xyz);
  gl_Position = (glstate_matrix_mvp * tmpvar_4);
  xlv_TEXCOORD1 = tmpvar_2;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _LightPositionRange;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
in highp vec3 xlv_TEXCOORD0;
in mediump vec2 xlv_TEXCOORD1;
void main ()
{
  lowp float x_1;
  x_1 = ((texture (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_2;
  tmpvar_2 = vec4((sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w));
  _glesFragData[0] = tmpvar_2;
}



#endif"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_FACING_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  mediump vec2 tmpvar_3;
  highp vec2 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord0.xy;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_5 = tmpvar_1;
  tmpvar_6 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_7;
  highp vec3 vRotatedWindVector_8;
  highp vec3 FinalPosition_9;
  FinalPosition_9 = tmpvar_1.xyz;
  highp vec3 tmpvar_10;
  tmpvar_10.x = _Object2World[3].x;
  tmpvar_10.y = _Object2World[3].y;
  tmpvar_10.z = _Object2World[3].z;
  mediump float tmpvar_11;
  tmpvar_11 = (_WindQuality * _WindEnabled);
  if ((tmpvar_11 > 0.0)) {
    highp mat3 tmpvar_12;
    tmpvar_12[0] = _World2Object[0].xyz;
    tmpvar_12[1] = _World2Object[1].xyz;
    tmpvar_12[2] = _World2Object[2].xyz;
    vRotatedWindVector_8 = normalize((tmpvar_12 * _ST_WindVector.xyz));
    highp mat3 tmpvar_13;
    tmpvar_13[0] = _World2Object[0].xyz;
    tmpvar_13[1] = _World2Object[1].xyz;
    tmpvar_13[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_7 = (normalize((tmpvar_13 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_8 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_7 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_15[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_15[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = (normalize((tmpvar_14 * tmpvar_15)) * sqrt(dot (tmpvar_14, tmpvar_14)));
  FinalPosition_9 = tmpvar_16;
  if (((tmpvar_11 > 1.0) && (tmpvar_11 < 5.0))) {
    highp float tmpvar_17;
    tmpvar_17 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_18;
    isBestWind_18 = (tmpvar_11 == 4.0);
    bool bLeaf2_19;
    bLeaf2_19 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    highp vec3 vDirection_21;
    vDirection_21 = tmpvar_2;
    highp float tmpvar_22;
    if (bLeaf2_19) {
      tmpvar_22 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_22 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_23;
    if (bLeaf2_19) {
      tmpvar_23 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_23 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_24;
    highp vec4 tmpvar_25;
    tmpvar_25.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_25.x = (tmpvar_22 + tmpvar_17);
    highp vec4 tmpvar_26;
    tmpvar_26 = abs(((
      fract((tmpvar_25 + 0.5))
     * 2.0) - 1.0));
    vPos_24 = (tmpvar_16 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_23 * (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_21 = tmpvar_2;
    vPos_20 = vPos_24;
    if (isBestWind_18) {
      highp vec3 tmpvar_27;
      tmpvar_27 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_28;
      if (bLeaf2_19) {
        tmpvar_28 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_28 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_29;
      if (bLeaf2_19) {
        tmpvar_29 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_29 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_30;
      if (bLeaf2_19) {
        tmpvar_30 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_30 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_31;
      if (bLeaf2_19) {
        tmpvar_31 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_32;
      if (bLeaf2_19) {
        tmpvar_32 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_32 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_33;
      if (bLeaf2_19) {
        tmpvar_33 = bool(1);
      } else {
        tmpvar_33 = bool(1);
      };
      highp float fTwitch_34;
      highp vec3 vAxis_35;
      highp vec3 tmpvar_36;
      tmpvar_36 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_37;
      tmpvar_37 = ((tmpvar_36.x + tmpvar_36.y) + tmpvar_36.z);
      highp vec4 tmpvar_38;
      tmpvar_38.x = (tmpvar_28 + tmpvar_37);
      tmpvar_38.y = ((tmpvar_28 * 0.75) - tmpvar_37);
      tmpvar_38.z = ((tmpvar_28 * 0.01) + tmpvar_37);
      tmpvar_38.w = (tmpvar_28 + tmpvar_37);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = sqrt(dot (vPos_24, vPos_24));
      highp float fAngle_42;
      fAngle_42 = ((_glesMultiTexCoord2.x * tmpvar_30) * (tmpvar_39.x + (tmpvar_39.y * tmpvar_39.y)));
      highp vec2 vSinCos_43;
      vSinCos_43.x = sin(fAngle_42);
      vSinCos_43.y = cos(fAngle_42);
      highp float tmpvar_44;
      tmpvar_44 = (1.0 - vSinCos_43.y);
      highp mat3 tmpvar_45;
      tmpvar_45[0].x = (((tmpvar_44 * tmpvar_27.x) * tmpvar_27.x) + vSinCos_43.y);
      tmpvar_45[0].y = (((tmpvar_44 * tmpvar_27.x) * tmpvar_27.y) + (vSinCos_43.x * tmpvar_27.z));
      tmpvar_45[0].z = (((tmpvar_44 * tmpvar_27.x) * tmpvar_27.z) - (vSinCos_43.x * tmpvar_27.y));
      tmpvar_45[1].x = (((tmpvar_44 * tmpvar_27.x) * tmpvar_27.y) - (vSinCos_43.x * tmpvar_27.z));
      tmpvar_45[1].y = (((tmpvar_44 * tmpvar_27.y) * tmpvar_27.y) + vSinCos_43.y);
      tmpvar_45[1].z = (((tmpvar_44 * tmpvar_27.y) * tmpvar_27.z) + (vSinCos_43.x * tmpvar_27.x));
      tmpvar_45[2].x = (((tmpvar_44 * tmpvar_27.x) * tmpvar_27.z) + (vSinCos_43.x * tmpvar_27.y));
      tmpvar_45[2].y = (((tmpvar_44 * tmpvar_27.y) * tmpvar_27.z) - (vSinCos_43.x * tmpvar_27.x));
      tmpvar_45[2].z = (((tmpvar_44 * tmpvar_27.z) * tmpvar_27.z) + vSinCos_43.y);
      highp vec3 tmpvar_46;
      tmpvar_46 = ((tmpvar_27.yzx * vRotatedWindVector_8.zxy) - (tmpvar_27.zxy * vRotatedWindVector_8.yzx));
      vAxis_35.xz = tmpvar_46.xz;
      highp float tmpvar_47;
      tmpvar_47 = clamp (dot (vRotatedWindVector_8, tmpvar_27), -1.0, 1.0);
      vAxis_35.y = (tmpvar_46.y + tmpvar_47);
      highp vec3 tmpvar_48;
      tmpvar_48 = normalize(vAxis_35);
      vAxis_35 = tmpvar_48;
      highp float tmpvar_49;
      tmpvar_49 = (1.570796 - (sign(tmpvar_47) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_47))) * (1.570796 + (abs(tmpvar_47) * (-0.2146018 + 
          (abs(tmpvar_47) * (0.08656672 + (abs(tmpvar_47) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_50;
      tmpvar_50 = (tmpvar_39.y - (tmpvar_39.x * tmpvar_39.x));
      fTwitch_34 = 0.0;
      if (tmpvar_33) {
        highp float fTime_51;
        fTime_51 = (tmpvar_32.z + tmpvar_37);
        highp vec4 tmpvar_52;
        tmpvar_52.zw = vec2(0.0, 0.0);
        tmpvar_52.x = fTime_51;
        tmpvar_52.y = (0.87 * fTime_51);
        highp vec4 tmpvar_53;
        highp vec4 tmpvar_54;
        tmpvar_54 = abs(((
          fract((tmpvar_52 + 0.5))
         * 2.0) - 1.0));
        tmpvar_53 = (((
          (tmpvar_54 * tmpvar_54)
         * 
          (3.0 - (2.0 * tmpvar_54))
        ) - 0.5) * 2.0);
        fTwitch_34 = (tmpvar_32.x * pow (clamp (
          ((((tmpvar_53.x * tmpvar_53.y) * tmpvar_53.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_32.y));
      };
      highp float fAngle_55;
      fAngle_55 = (_glesMultiTexCoord2.x * ((
        (tmpvar_49 * tmpvar_31)
       + 
        (tmpvar_50 * tmpvar_29)
      ) + fTwitch_34));
      highp vec2 vSinCos_56;
      vSinCos_56.x = sin(fAngle_55);
      vSinCos_56.y = cos(fAngle_55);
      highp float tmpvar_57;
      tmpvar_57 = (1.0 - vSinCos_56.y);
      highp mat3 tmpvar_58;
      tmpvar_58[0].x = (((tmpvar_57 * tmpvar_48.x) * tmpvar_48.x) + vSinCos_56.y);
      tmpvar_58[0].y = (((tmpvar_57 * tmpvar_48.x) * tmpvar_48.y) + (vSinCos_56.x * tmpvar_48.z));
      tmpvar_58[0].z = (((tmpvar_57 * tmpvar_48.x) * tmpvar_48.z) - (vSinCos_56.x * tmpvar_48.y));
      tmpvar_58[1].x = (((tmpvar_57 * tmpvar_48.x) * tmpvar_48.y) - (vSinCos_56.x * tmpvar_48.z));
      tmpvar_58[1].y = (((tmpvar_57 * tmpvar_48.y) * tmpvar_48.y) + vSinCos_56.y);
      tmpvar_58[1].z = (((tmpvar_57 * tmpvar_48.y) * tmpvar_48.z) + (vSinCos_56.x * tmpvar_48.x));
      tmpvar_58[2].x = (((tmpvar_57 * tmpvar_48.x) * tmpvar_48.z) + (vSinCos_56.x * tmpvar_48.y));
      tmpvar_58[2].y = (((tmpvar_57 * tmpvar_48.y) * tmpvar_48.z) - (vSinCos_56.x * tmpvar_48.x));
      tmpvar_58[2].z = (((tmpvar_57 * tmpvar_48.z) * tmpvar_48.z) + vSinCos_56.y);
      highp mat3 tmpvar_59;
      tmpvar_59 = (tmpvar_45 * tmpvar_58);
      vDirection_21 = (tmpvar_59 * _glesNormal);
      vPos_20 = (normalize((tmpvar_59 * vPos_24)) * tmpvar_41);
    };
    tmpvar_6 = vDirection_21;
    FinalPosition_9 = vPos_20;
  };
  highp vec3 tmpvar_60;
  tmpvar_60 = (FinalPosition_9 + _glesMultiTexCoord1.xyz);
  FinalPosition_9 = tmpvar_60;
  if ((tmpvar_11 >= 3.0)) {
    highp vec3 vPos_61;
    vPos_61 = tmpvar_60;
    if ((tmpvar_11 == 5.0)) {
      highp vec3 vPos_62;
      vPos_62 = tmpvar_60;
      highp float fAdherenceScale_63;
      highp vec3 tmpvar_64;
      tmpvar_64 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_65;
      tmpvar_65 = (_ST_WindBranch.x + (tmpvar_10.x + tmpvar_10.y));
      highp vec4 vOscillations_66;
      highp float fOscillation_67;
      fOscillation_67 = 1.0;
      highp float fAmount_68;
      highp float fTarget_69;
      highp vec4 tmpvar_70;
      tmpvar_70.x = (tmpvar_65 + _glesMultiTexCoord0.w);
      tmpvar_70.y = ((tmpvar_65 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_70.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_65 + _glesMultiTexCoord0.w));
      tmpvar_70.w = ((tmpvar_65 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_71;
      tmpvar_71 = abs(((
        fract((tmpvar_70 + 0.5))
       * 2.0) - 1.0));
      vOscillations_66 = (((
        (tmpvar_71 * tmpvar_71)
       * 
        (3.0 - (2.0 * tmpvar_71))
      ) - 0.5) * 2.0);
      highp float tmpvar_72;
      tmpvar_72 = (vOscillations_66.y * vOscillations_66.z);
      fTarget_69 = 1.0;
      fAmount_68 = tmpvar_72;
      if ((tmpvar_72 < 0.0)) {
        fTarget_69 = -1.0;
        fAmount_68 = -(tmpvar_72);
      };
      fOscillation_67 = (((
        (mix (mix (tmpvar_72, fTarget_69, fAmount_68), fTarget_69, fAmount_68) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_66.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_66.w * _ST_WindBranchWhip.x)));
      vPos_62 = (tmpvar_60 + ((tmpvar_64 * fOscillation_67) * _ST_WindBranch.y));
      highp vec4 tmpvar_73;
      tmpvar_73.zw = vec2(0.0, 0.0);
      tmpvar_73.x = ((tmpvar_65 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_73.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_74;
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_73 + 0.5))
       * 2.0) - 1.0));
      tmpvar_74 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      fAdherenceScale_63 = (1.0 - ((
        ((tmpvar_74.x * tmpvar_74.y) * tmpvar_74.x)
       * tmpvar_74.y) * _ST_WindTurbulences.x));
      fAdherenceScale_63 = (fAdherenceScale_63 + ((vOscillations_66.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_62 = (vPos_62 + ((
        ((vRotatedBranchAnchor_7 - vPos_62) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_63) * _glesMultiTexCoord0.z));
      vPos_61 = vPos_62;
    } else {
      highp vec3 vPos_76;
      vPos_76 = vPos_61;
      highp vec3 tmpvar_77;
      tmpvar_77 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_78;
      tmpvar_78 = (_ST_WindBranch.x + (tmpvar_10.x + tmpvar_10.y));
      highp vec4 vOscillations_79;
      highp float fAmount_80;
      highp float fTarget_81;
      highp vec4 tmpvar_82;
      tmpvar_82.w = 0.0;
      tmpvar_82.x = (tmpvar_78 + _glesMultiTexCoord0.w);
      tmpvar_82.y = ((tmpvar_78 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_82.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_78 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_82 + 0.5))
       * 2.0) - 1.0));
      vOscillations_79 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      highp float tmpvar_84;
      tmpvar_84 = (vOscillations_79.y * vOscillations_79.z);
      fTarget_81 = 1.0;
      fAmount_80 = tmpvar_84;
      if ((tmpvar_84 < 0.0)) {
        fTarget_81 = -1.0;
        fAmount_80 = -(tmpvar_84);
      };
      vPos_76 = (vPos_61 + ((tmpvar_77 * 
        (((mix (
          mix (tmpvar_84, fTarget_81, fAmount_80)
        , fTarget_81, fAmount_80) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_79.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_61 = vPos_76;
    };
    FinalPosition_9 = vPos_61;
  };
  if ((tmpvar_11 > 0.0)) {
    highp vec3 vPos_85;
    vPos_85 = FinalPosition_9;
    highp float fAdjust_86;
    highp float fLength_87;
    fLength_87 = sqrt(dot (FinalPosition_9, FinalPosition_9));
    highp float tmpvar_88;
    tmpvar_88 = (max ((FinalPosition_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_86 = tmpvar_88;
    if ((tmpvar_88 != 0.0)) {
      fAdjust_86 = pow (tmpvar_88, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_89;
    tmpvar_89.zw = vec2(0.0, 0.0);
    tmpvar_89.x = (tmpvar_10.x + _ST_WindGlobal.x);
    tmpvar_89.y = (tmpvar_10.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_90;
    highp vec4 tmpvar_91;
    tmpvar_91 = abs(((
      fract((tmpvar_89 + 0.5))
     * 2.0) - 1.0));
    tmpvar_90 = (((
      (tmpvar_91 * tmpvar_91)
     * 
      (3.0 - (2.0 * tmpvar_91))
    ) - 0.5) * 2.0);
    vPos_85.xz = (FinalPosition_9.xz + (vRotatedWindVector_8.xz * (
      ((_ST_WindGlobal.y * (tmpvar_90.x + (tmpvar_90.y * tmpvar_90.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_86)));
    vPos_85 = (normalize(vPos_85) * fLength_87);
    FinalPosition_9 = vPos_85;
  };
  tmpvar_5.xyz = FinalPosition_9;
  highp vec3 vertex_92;
  vertex_92 = tmpvar_5.xyz;
  highp vec4 clipPos_93;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp vec4 tmpvar_94;
    tmpvar_94.w = 1.0;
    tmpvar_94.xyz = vertex_92;
    highp vec3 tmpvar_95;
    tmpvar_95 = (_Object2World * tmpvar_94).xyz;
    highp vec4 v_96;
    v_96.x = _World2Object[0].x;
    v_96.y = _World2Object[1].x;
    v_96.z = _World2Object[2].x;
    v_96.w = _World2Object[3].x;
    highp vec4 v_97;
    v_97.x = _World2Object[0].y;
    v_97.y = _World2Object[1].y;
    v_97.z = _World2Object[2].y;
    v_97.w = _World2Object[3].y;
    highp vec4 v_98;
    v_98.x = _World2Object[0].z;
    v_98.y = _World2Object[1].z;
    v_98.z = _World2Object[2].z;
    v_98.w = _World2Object[3].z;
    highp vec3 tmpvar_99;
    tmpvar_99 = normalize(((
      (v_96.xyz * tmpvar_6.x)
     + 
      (v_97.xyz * tmpvar_6.y)
    ) + (v_98.xyz * tmpvar_6.z)));
    highp float tmpvar_100;
    tmpvar_100 = dot (tmpvar_99, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_95 * _WorldSpaceLightPos0.w)
    )));
    highp vec4 tmpvar_101;
    tmpvar_101.w = 1.0;
    tmpvar_101.xyz = (tmpvar_95 - (tmpvar_99 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_100 * tmpvar_100)))
    )));
    clipPos_93 = (unity_MatrixVP * tmpvar_101);
  } else {
    highp vec4 tmpvar_102;
    tmpvar_102.w = 1.0;
    tmpvar_102.xyz = vertex_92;
    clipPos_93 = (glstate_matrix_mvp * tmpvar_102);
  };
  highp vec4 clipPos_103;
  clipPos_103.xyw = clipPos_93.xyw;
  clipPos_103.z = (clipPos_93.z + clamp ((unity_LightShadowBias.x / clipPos_93.w), 0.0, 1.0));
  clipPos_103.z = mix (clipPos_103.z, max (clipPos_103.z, -(clipPos_93.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_103;
  xlv_TEXCOORD1 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  lowp float x_1;
  x_1 = ((texture2D (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
out mediump vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  mediump vec2 tmpvar_3;
  highp vec2 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord0.xy;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_5 = tmpvar_1;
  tmpvar_6 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_7;
  highp vec3 vRotatedWindVector_8;
  highp vec3 FinalPosition_9;
  FinalPosition_9 = tmpvar_1.xyz;
  highp vec3 tmpvar_10;
  tmpvar_10.x = _Object2World[3].x;
  tmpvar_10.y = _Object2World[3].y;
  tmpvar_10.z = _Object2World[3].z;
  mediump float tmpvar_11;
  tmpvar_11 = (_WindQuality * _WindEnabled);
  if ((tmpvar_11 > 0.0)) {
    highp mat3 tmpvar_12;
    tmpvar_12[0] = _World2Object[0].xyz;
    tmpvar_12[1] = _World2Object[1].xyz;
    tmpvar_12[2] = _World2Object[2].xyz;
    vRotatedWindVector_8 = normalize((tmpvar_12 * _ST_WindVector.xyz));
    highp mat3 tmpvar_13;
    tmpvar_13[0] = _World2Object[0].xyz;
    tmpvar_13[1] = _World2Object[1].xyz;
    tmpvar_13[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_7 = (normalize((tmpvar_13 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_8 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_7 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_15[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_15[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = (normalize((tmpvar_14 * tmpvar_15)) * sqrt(dot (tmpvar_14, tmpvar_14)));
  FinalPosition_9 = tmpvar_16;
  if (((tmpvar_11 > 1.0) && (tmpvar_11 < 5.0))) {
    highp float tmpvar_17;
    tmpvar_17 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_18;
    isBestWind_18 = (tmpvar_11 == 4.0);
    bool bLeaf2_19;
    bLeaf2_19 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    highp vec3 vDirection_21;
    vDirection_21 = tmpvar_2;
    highp float tmpvar_22;
    if (bLeaf2_19) {
      tmpvar_22 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_22 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_23;
    if (bLeaf2_19) {
      tmpvar_23 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_23 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_24;
    highp vec4 tmpvar_25;
    tmpvar_25.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_25.x = (tmpvar_22 + tmpvar_17);
    highp vec4 tmpvar_26;
    tmpvar_26 = abs(((
      fract((tmpvar_25 + 0.5))
     * 2.0) - 1.0));
    vPos_24 = (tmpvar_16 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_23 * (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_21 = tmpvar_2;
    vPos_20 = vPos_24;
    if (isBestWind_18) {
      highp vec3 tmpvar_27;
      tmpvar_27 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_28;
      if (bLeaf2_19) {
        tmpvar_28 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_28 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_29;
      if (bLeaf2_19) {
        tmpvar_29 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_29 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_30;
      if (bLeaf2_19) {
        tmpvar_30 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_30 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_31;
      if (bLeaf2_19) {
        tmpvar_31 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_32;
      if (bLeaf2_19) {
        tmpvar_32 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_32 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_33;
      if (bLeaf2_19) {
        tmpvar_33 = bool(1);
      } else {
        tmpvar_33 = bool(1);
      };
      highp float fTwitch_34;
      highp vec3 vAxis_35;
      highp vec3 tmpvar_36;
      tmpvar_36 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_37;
      tmpvar_37 = ((tmpvar_36.x + tmpvar_36.y) + tmpvar_36.z);
      highp vec4 tmpvar_38;
      tmpvar_38.x = (tmpvar_28 + tmpvar_37);
      tmpvar_38.y = ((tmpvar_28 * 0.75) - tmpvar_37);
      tmpvar_38.z = ((tmpvar_28 * 0.01) + tmpvar_37);
      tmpvar_38.w = (tmpvar_28 + tmpvar_37);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = sqrt(dot (vPos_24, vPos_24));
      highp float fAngle_42;
      fAngle_42 = ((_glesMultiTexCoord2.x * tmpvar_30) * (tmpvar_39.x + (tmpvar_39.y * tmpvar_39.y)));
      highp vec2 vSinCos_43;
      vSinCos_43.x = sin(fAngle_42);
      vSinCos_43.y = cos(fAngle_42);
      highp float tmpvar_44;
      tmpvar_44 = (1.0 - vSinCos_43.y);
      highp mat3 tmpvar_45;
      tmpvar_45[0].x = (((tmpvar_44 * tmpvar_27.x) * tmpvar_27.x) + vSinCos_43.y);
      tmpvar_45[0].y = (((tmpvar_44 * tmpvar_27.x) * tmpvar_27.y) + (vSinCos_43.x * tmpvar_27.z));
      tmpvar_45[0].z = (((tmpvar_44 * tmpvar_27.x) * tmpvar_27.z) - (vSinCos_43.x * tmpvar_27.y));
      tmpvar_45[1].x = (((tmpvar_44 * tmpvar_27.x) * tmpvar_27.y) - (vSinCos_43.x * tmpvar_27.z));
      tmpvar_45[1].y = (((tmpvar_44 * tmpvar_27.y) * tmpvar_27.y) + vSinCos_43.y);
      tmpvar_45[1].z = (((tmpvar_44 * tmpvar_27.y) * tmpvar_27.z) + (vSinCos_43.x * tmpvar_27.x));
      tmpvar_45[2].x = (((tmpvar_44 * tmpvar_27.x) * tmpvar_27.z) + (vSinCos_43.x * tmpvar_27.y));
      tmpvar_45[2].y = (((tmpvar_44 * tmpvar_27.y) * tmpvar_27.z) - (vSinCos_43.x * tmpvar_27.x));
      tmpvar_45[2].z = (((tmpvar_44 * tmpvar_27.z) * tmpvar_27.z) + vSinCos_43.y);
      highp vec3 tmpvar_46;
      tmpvar_46 = ((tmpvar_27.yzx * vRotatedWindVector_8.zxy) - (tmpvar_27.zxy * vRotatedWindVector_8.yzx));
      vAxis_35.xz = tmpvar_46.xz;
      highp float tmpvar_47;
      tmpvar_47 = clamp (dot (vRotatedWindVector_8, tmpvar_27), -1.0, 1.0);
      vAxis_35.y = (tmpvar_46.y + tmpvar_47);
      highp vec3 tmpvar_48;
      tmpvar_48 = normalize(vAxis_35);
      vAxis_35 = tmpvar_48;
      highp float tmpvar_49;
      tmpvar_49 = (1.570796 - (sign(tmpvar_47) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_47))) * (1.570796 + (abs(tmpvar_47) * (-0.2146018 + 
          (abs(tmpvar_47) * (0.08656672 + (abs(tmpvar_47) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_50;
      tmpvar_50 = (tmpvar_39.y - (tmpvar_39.x * tmpvar_39.x));
      fTwitch_34 = 0.0;
      if (tmpvar_33) {
        highp float fTime_51;
        fTime_51 = (tmpvar_32.z + tmpvar_37);
        highp vec4 tmpvar_52;
        tmpvar_52.zw = vec2(0.0, 0.0);
        tmpvar_52.x = fTime_51;
        tmpvar_52.y = (0.87 * fTime_51);
        highp vec4 tmpvar_53;
        highp vec4 tmpvar_54;
        tmpvar_54 = abs(((
          fract((tmpvar_52 + 0.5))
         * 2.0) - 1.0));
        tmpvar_53 = (((
          (tmpvar_54 * tmpvar_54)
         * 
          (3.0 - (2.0 * tmpvar_54))
        ) - 0.5) * 2.0);
        fTwitch_34 = (tmpvar_32.x * pow (clamp (
          ((((tmpvar_53.x * tmpvar_53.y) * tmpvar_53.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_32.y));
      };
      highp float fAngle_55;
      fAngle_55 = (_glesMultiTexCoord2.x * ((
        (tmpvar_49 * tmpvar_31)
       + 
        (tmpvar_50 * tmpvar_29)
      ) + fTwitch_34));
      highp vec2 vSinCos_56;
      vSinCos_56.x = sin(fAngle_55);
      vSinCos_56.y = cos(fAngle_55);
      highp float tmpvar_57;
      tmpvar_57 = (1.0 - vSinCos_56.y);
      highp mat3 tmpvar_58;
      tmpvar_58[0].x = (((tmpvar_57 * tmpvar_48.x) * tmpvar_48.x) + vSinCos_56.y);
      tmpvar_58[0].y = (((tmpvar_57 * tmpvar_48.x) * tmpvar_48.y) + (vSinCos_56.x * tmpvar_48.z));
      tmpvar_58[0].z = (((tmpvar_57 * tmpvar_48.x) * tmpvar_48.z) - (vSinCos_56.x * tmpvar_48.y));
      tmpvar_58[1].x = (((tmpvar_57 * tmpvar_48.x) * tmpvar_48.y) - (vSinCos_56.x * tmpvar_48.z));
      tmpvar_58[1].y = (((tmpvar_57 * tmpvar_48.y) * tmpvar_48.y) + vSinCos_56.y);
      tmpvar_58[1].z = (((tmpvar_57 * tmpvar_48.y) * tmpvar_48.z) + (vSinCos_56.x * tmpvar_48.x));
      tmpvar_58[2].x = (((tmpvar_57 * tmpvar_48.x) * tmpvar_48.z) + (vSinCos_56.x * tmpvar_48.y));
      tmpvar_58[2].y = (((tmpvar_57 * tmpvar_48.y) * tmpvar_48.z) - (vSinCos_56.x * tmpvar_48.x));
      tmpvar_58[2].z = (((tmpvar_57 * tmpvar_48.z) * tmpvar_48.z) + vSinCos_56.y);
      highp mat3 tmpvar_59;
      tmpvar_59 = (tmpvar_45 * tmpvar_58);
      vDirection_21 = (tmpvar_59 * _glesNormal);
      vPos_20 = (normalize((tmpvar_59 * vPos_24)) * tmpvar_41);
    };
    tmpvar_6 = vDirection_21;
    FinalPosition_9 = vPos_20;
  };
  highp vec3 tmpvar_60;
  tmpvar_60 = (FinalPosition_9 + _glesMultiTexCoord1.xyz);
  FinalPosition_9 = tmpvar_60;
  if ((tmpvar_11 >= 3.0)) {
    highp vec3 vPos_61;
    vPos_61 = tmpvar_60;
    if ((tmpvar_11 == 5.0)) {
      highp vec3 vPos_62;
      vPos_62 = tmpvar_60;
      highp float fAdherenceScale_63;
      highp vec3 tmpvar_64;
      tmpvar_64 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_65;
      tmpvar_65 = (_ST_WindBranch.x + (tmpvar_10.x + tmpvar_10.y));
      highp vec4 vOscillations_66;
      highp float fOscillation_67;
      fOscillation_67 = 1.0;
      highp float fAmount_68;
      highp float fTarget_69;
      highp vec4 tmpvar_70;
      tmpvar_70.x = (tmpvar_65 + _glesMultiTexCoord0.w);
      tmpvar_70.y = ((tmpvar_65 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_70.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_65 + _glesMultiTexCoord0.w));
      tmpvar_70.w = ((tmpvar_65 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_71;
      tmpvar_71 = abs(((
        fract((tmpvar_70 + 0.5))
       * 2.0) - 1.0));
      vOscillations_66 = (((
        (tmpvar_71 * tmpvar_71)
       * 
        (3.0 - (2.0 * tmpvar_71))
      ) - 0.5) * 2.0);
      highp float tmpvar_72;
      tmpvar_72 = (vOscillations_66.y * vOscillations_66.z);
      fTarget_69 = 1.0;
      fAmount_68 = tmpvar_72;
      if ((tmpvar_72 < 0.0)) {
        fTarget_69 = -1.0;
        fAmount_68 = -(tmpvar_72);
      };
      fOscillation_67 = (((
        (mix (mix (tmpvar_72, fTarget_69, fAmount_68), fTarget_69, fAmount_68) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_66.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_66.w * _ST_WindBranchWhip.x)));
      vPos_62 = (tmpvar_60 + ((tmpvar_64 * fOscillation_67) * _ST_WindBranch.y));
      highp vec4 tmpvar_73;
      tmpvar_73.zw = vec2(0.0, 0.0);
      tmpvar_73.x = ((tmpvar_65 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_73.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_74;
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_73 + 0.5))
       * 2.0) - 1.0));
      tmpvar_74 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      fAdherenceScale_63 = (1.0 - ((
        ((tmpvar_74.x * tmpvar_74.y) * tmpvar_74.x)
       * tmpvar_74.y) * _ST_WindTurbulences.x));
      fAdherenceScale_63 = (fAdherenceScale_63 + ((vOscillations_66.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_62 = (vPos_62 + ((
        ((vRotatedBranchAnchor_7 - vPos_62) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_63) * _glesMultiTexCoord0.z));
      vPos_61 = vPos_62;
    } else {
      highp vec3 vPos_76;
      vPos_76 = vPos_61;
      highp vec3 tmpvar_77;
      tmpvar_77 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_78;
      tmpvar_78 = (_ST_WindBranch.x + (tmpvar_10.x + tmpvar_10.y));
      highp vec4 vOscillations_79;
      highp float fAmount_80;
      highp float fTarget_81;
      highp vec4 tmpvar_82;
      tmpvar_82.w = 0.0;
      tmpvar_82.x = (tmpvar_78 + _glesMultiTexCoord0.w);
      tmpvar_82.y = ((tmpvar_78 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_82.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_78 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_82 + 0.5))
       * 2.0) - 1.0));
      vOscillations_79 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      highp float tmpvar_84;
      tmpvar_84 = (vOscillations_79.y * vOscillations_79.z);
      fTarget_81 = 1.0;
      fAmount_80 = tmpvar_84;
      if ((tmpvar_84 < 0.0)) {
        fTarget_81 = -1.0;
        fAmount_80 = -(tmpvar_84);
      };
      vPos_76 = (vPos_61 + ((tmpvar_77 * 
        (((mix (
          mix (tmpvar_84, fTarget_81, fAmount_80)
        , fTarget_81, fAmount_80) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_79.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_61 = vPos_76;
    };
    FinalPosition_9 = vPos_61;
  };
  if ((tmpvar_11 > 0.0)) {
    highp vec3 vPos_85;
    vPos_85 = FinalPosition_9;
    highp float fAdjust_86;
    highp float fLength_87;
    fLength_87 = sqrt(dot (FinalPosition_9, FinalPosition_9));
    highp float tmpvar_88;
    tmpvar_88 = (max ((FinalPosition_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_86 = tmpvar_88;
    if ((tmpvar_88 != 0.0)) {
      fAdjust_86 = pow (tmpvar_88, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_89;
    tmpvar_89.zw = vec2(0.0, 0.0);
    tmpvar_89.x = (tmpvar_10.x + _ST_WindGlobal.x);
    tmpvar_89.y = (tmpvar_10.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_90;
    highp vec4 tmpvar_91;
    tmpvar_91 = abs(((
      fract((tmpvar_89 + 0.5))
     * 2.0) - 1.0));
    tmpvar_90 = (((
      (tmpvar_91 * tmpvar_91)
     * 
      (3.0 - (2.0 * tmpvar_91))
    ) - 0.5) * 2.0);
    vPos_85.xz = (FinalPosition_9.xz + (vRotatedWindVector_8.xz * (
      ((_ST_WindGlobal.y * (tmpvar_90.x + (tmpvar_90.y * tmpvar_90.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_86)));
    vPos_85 = (normalize(vPos_85) * fLength_87);
    FinalPosition_9 = vPos_85;
  };
  tmpvar_5.xyz = FinalPosition_9;
  highp vec3 vertex_92;
  vertex_92 = tmpvar_5.xyz;
  highp vec4 clipPos_93;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp vec4 tmpvar_94;
    tmpvar_94.w = 1.0;
    tmpvar_94.xyz = vertex_92;
    highp vec3 tmpvar_95;
    tmpvar_95 = (_Object2World * tmpvar_94).xyz;
    highp vec4 v_96;
    v_96.x = _World2Object[0].x;
    v_96.y = _World2Object[1].x;
    v_96.z = _World2Object[2].x;
    v_96.w = _World2Object[3].x;
    highp vec4 v_97;
    v_97.x = _World2Object[0].y;
    v_97.y = _World2Object[1].y;
    v_97.z = _World2Object[2].y;
    v_97.w = _World2Object[3].y;
    highp vec4 v_98;
    v_98.x = _World2Object[0].z;
    v_98.y = _World2Object[1].z;
    v_98.z = _World2Object[2].z;
    v_98.w = _World2Object[3].z;
    highp vec3 tmpvar_99;
    tmpvar_99 = normalize(((
      (v_96.xyz * tmpvar_6.x)
     + 
      (v_97.xyz * tmpvar_6.y)
    ) + (v_98.xyz * tmpvar_6.z)));
    highp float tmpvar_100;
    tmpvar_100 = dot (tmpvar_99, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_95 * _WorldSpaceLightPos0.w)
    )));
    highp vec4 tmpvar_101;
    tmpvar_101.w = 1.0;
    tmpvar_101.xyz = (tmpvar_95 - (tmpvar_99 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_100 * tmpvar_100)))
    )));
    clipPos_93 = (unity_MatrixVP * tmpvar_101);
  } else {
    highp vec4 tmpvar_102;
    tmpvar_102.w = 1.0;
    tmpvar_102.xyz = vertex_92;
    clipPos_93 = (glstate_matrix_mvp * tmpvar_102);
  };
  highp vec4 clipPos_103;
  clipPos_103.xyw = clipPos_93.xyw;
  clipPos_103.z = (clipPos_93.z + clamp ((unity_LightShadowBias.x / clipPos_93.w), 0.0, 1.0));
  clipPos_103.z = mix (clipPos_103.z, max (clipPos_103.z, -(clipPos_93.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_103;
  xlv_TEXCOORD1 = tmpvar_3;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
in mediump vec2 xlv_TEXCOORD1;
void main ()
{
  lowp float x_1;
  x_1 = ((texture (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  _glesFragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}



#endif"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_FACING_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec2 tmpvar_2;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0.xy;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_5;
  highp vec3 vRotatedWindVector_6;
  highp vec3 FinalPosition_7;
  FinalPosition_7 = tmpvar_1.xyz;
  highp vec3 tmpvar_8;
  tmpvar_8.x = _Object2World[3].x;
  tmpvar_8.y = _Object2World[3].y;
  tmpvar_8.z = _Object2World[3].z;
  mediump float tmpvar_9;
  tmpvar_9 = (_WindQuality * _WindEnabled);
  if ((tmpvar_9 > 0.0)) {
    highp mat3 tmpvar_10;
    tmpvar_10[0] = _World2Object[0].xyz;
    tmpvar_10[1] = _World2Object[1].xyz;
    tmpvar_10[2] = _World2Object[2].xyz;
    vRotatedWindVector_6 = normalize((tmpvar_10 * _ST_WindVector.xyz));
    highp mat3 tmpvar_11;
    tmpvar_11[0] = _World2Object[0].xyz;
    tmpvar_11[1] = _World2Object[1].xyz;
    tmpvar_11[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_5 = (normalize((tmpvar_11 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_6 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_5 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_13[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_13[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = (normalize((tmpvar_12 * tmpvar_13)) * sqrt(dot (tmpvar_12, tmpvar_12)));
  FinalPosition_7 = tmpvar_14;
  if (((tmpvar_9 > 1.0) && (tmpvar_9 < 5.0))) {
    highp float tmpvar_15;
    tmpvar_15 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_16;
    isBestWind_16 = (tmpvar_9 == 4.0);
    bool bLeaf2_17;
    bLeaf2_17 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_18;
    vPos_18 = tmpvar_14;
    highp float tmpvar_19;
    if (bLeaf2_17) {
      tmpvar_19 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_19 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_20;
    if (bLeaf2_17) {
      tmpvar_20 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_20 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_21;
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (tmpvar_19 + tmpvar_15);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_21 = (tmpvar_14 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_20 * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vPos_18 = vPos_21;
    if (isBestWind_16) {
      highp vec3 tmpvar_24;
      tmpvar_24 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_25;
      if (bLeaf2_17) {
        tmpvar_25 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_25 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_26;
      if (bLeaf2_17) {
        tmpvar_26 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_26 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_27;
      if (bLeaf2_17) {
        tmpvar_27 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_27 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_28;
      if (bLeaf2_17) {
        tmpvar_28 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_28 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_29;
      if (bLeaf2_17) {
        tmpvar_29 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_29 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_30;
      if (bLeaf2_17) {
        tmpvar_30 = bool(1);
      } else {
        tmpvar_30 = bool(1);
      };
      highp float fTwitch_31;
      highp vec3 vAxis_32;
      highp vec3 tmpvar_33;
      tmpvar_33 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_34;
      tmpvar_34 = ((tmpvar_33.x + tmpvar_33.y) + tmpvar_33.z);
      highp vec4 tmpvar_35;
      tmpvar_35.x = (tmpvar_25 + tmpvar_34);
      tmpvar_35.y = ((tmpvar_25 * 0.75) - tmpvar_34);
      tmpvar_35.z = ((tmpvar_25 * 0.01) + tmpvar_34);
      tmpvar_35.w = (tmpvar_25 + tmpvar_34);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      highp float tmpvar_38;
      tmpvar_38 = sqrt(dot (vPos_21, vPos_21));
      highp float fAngle_39;
      fAngle_39 = ((_glesMultiTexCoord2.x * tmpvar_27) * (tmpvar_36.x + (tmpvar_36.y * tmpvar_36.y)));
      highp vec2 vSinCos_40;
      vSinCos_40.x = sin(fAngle_39);
      vSinCos_40.y = cos(fAngle_39);
      highp float tmpvar_41;
      tmpvar_41 = (1.0 - vSinCos_40.y);
      highp mat3 tmpvar_42;
      tmpvar_42[0].x = (((tmpvar_41 * tmpvar_24.x) * tmpvar_24.x) + vSinCos_40.y);
      tmpvar_42[0].y = (((tmpvar_41 * tmpvar_24.x) * tmpvar_24.y) + (vSinCos_40.x * tmpvar_24.z));
      tmpvar_42[0].z = (((tmpvar_41 * tmpvar_24.x) * tmpvar_24.z) - (vSinCos_40.x * tmpvar_24.y));
      tmpvar_42[1].x = (((tmpvar_41 * tmpvar_24.x) * tmpvar_24.y) - (vSinCos_40.x * tmpvar_24.z));
      tmpvar_42[1].y = (((tmpvar_41 * tmpvar_24.y) * tmpvar_24.y) + vSinCos_40.y);
      tmpvar_42[1].z = (((tmpvar_41 * tmpvar_24.y) * tmpvar_24.z) + (vSinCos_40.x * tmpvar_24.x));
      tmpvar_42[2].x = (((tmpvar_41 * tmpvar_24.x) * tmpvar_24.z) + (vSinCos_40.x * tmpvar_24.y));
      tmpvar_42[2].y = (((tmpvar_41 * tmpvar_24.y) * tmpvar_24.z) - (vSinCos_40.x * tmpvar_24.x));
      tmpvar_42[2].z = (((tmpvar_41 * tmpvar_24.z) * tmpvar_24.z) + vSinCos_40.y);
      highp vec3 tmpvar_43;
      tmpvar_43 = ((tmpvar_24.yzx * vRotatedWindVector_6.zxy) - (tmpvar_24.zxy * vRotatedWindVector_6.yzx));
      vAxis_32.xz = tmpvar_43.xz;
      highp float tmpvar_44;
      tmpvar_44 = clamp (dot (vRotatedWindVector_6, tmpvar_24), -1.0, 1.0);
      vAxis_32.y = (tmpvar_43.y + tmpvar_44);
      highp vec3 tmpvar_45;
      tmpvar_45 = normalize(vAxis_32);
      vAxis_32 = tmpvar_45;
      highp float tmpvar_46;
      tmpvar_46 = (1.570796 - (sign(tmpvar_44) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_44))) * (1.570796 + (abs(tmpvar_44) * (-0.2146018 + 
          (abs(tmpvar_44) * (0.08656672 + (abs(tmpvar_44) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_47;
      tmpvar_47 = (tmpvar_36.y - (tmpvar_36.x * tmpvar_36.x));
      fTwitch_31 = 0.0;
      if (tmpvar_30) {
        highp float fTime_48;
        fTime_48 = (tmpvar_29.z + tmpvar_34);
        highp vec4 tmpvar_49;
        tmpvar_49.zw = vec2(0.0, 0.0);
        tmpvar_49.x = fTime_48;
        tmpvar_49.y = (0.87 * fTime_48);
        highp vec4 tmpvar_50;
        highp vec4 tmpvar_51;
        tmpvar_51 = abs(((
          fract((tmpvar_49 + 0.5))
         * 2.0) - 1.0));
        tmpvar_50 = (((
          (tmpvar_51 * tmpvar_51)
         * 
          (3.0 - (2.0 * tmpvar_51))
        ) - 0.5) * 2.0);
        fTwitch_31 = (tmpvar_29.x * pow (clamp (
          ((((tmpvar_50.x * tmpvar_50.y) * tmpvar_50.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_29.y));
      };
      highp float fAngle_52;
      fAngle_52 = (_glesMultiTexCoord2.x * ((
        (tmpvar_46 * tmpvar_28)
       + 
        (tmpvar_47 * tmpvar_26)
      ) + fTwitch_31));
      highp vec2 vSinCos_53;
      vSinCos_53.x = sin(fAngle_52);
      vSinCos_53.y = cos(fAngle_52);
      highp float tmpvar_54;
      tmpvar_54 = (1.0 - vSinCos_53.y);
      highp mat3 tmpvar_55;
      tmpvar_55[0].x = (((tmpvar_54 * tmpvar_45.x) * tmpvar_45.x) + vSinCos_53.y);
      tmpvar_55[0].y = (((tmpvar_54 * tmpvar_45.x) * tmpvar_45.y) + (vSinCos_53.x * tmpvar_45.z));
      tmpvar_55[0].z = (((tmpvar_54 * tmpvar_45.x) * tmpvar_45.z) - (vSinCos_53.x * tmpvar_45.y));
      tmpvar_55[1].x = (((tmpvar_54 * tmpvar_45.x) * tmpvar_45.y) - (vSinCos_53.x * tmpvar_45.z));
      tmpvar_55[1].y = (((tmpvar_54 * tmpvar_45.y) * tmpvar_45.y) + vSinCos_53.y);
      tmpvar_55[1].z = (((tmpvar_54 * tmpvar_45.y) * tmpvar_45.z) + (vSinCos_53.x * tmpvar_45.x));
      tmpvar_55[2].x = (((tmpvar_54 * tmpvar_45.x) * tmpvar_45.z) + (vSinCos_53.x * tmpvar_45.y));
      tmpvar_55[2].y = (((tmpvar_54 * tmpvar_45.y) * tmpvar_45.z) - (vSinCos_53.x * tmpvar_45.x));
      tmpvar_55[2].z = (((tmpvar_54 * tmpvar_45.z) * tmpvar_45.z) + vSinCos_53.y);
      vPos_18 = (normalize((
        (tmpvar_42 * tmpvar_55)
       * vPos_21)) * tmpvar_38);
    };
    FinalPosition_7 = vPos_18;
  };
  highp vec3 tmpvar_56;
  tmpvar_56 = (FinalPosition_7 + _glesMultiTexCoord1.xyz);
  FinalPosition_7 = tmpvar_56;
  if ((tmpvar_9 >= 3.0)) {
    highp vec3 vPos_57;
    vPos_57 = tmpvar_56;
    if ((tmpvar_9 == 5.0)) {
      highp vec3 vPos_58;
      vPos_58 = tmpvar_56;
      highp float fAdherenceScale_59;
      highp vec3 tmpvar_60;
      tmpvar_60 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_61;
      tmpvar_61 = (_ST_WindBranch.x + (tmpvar_8.x + tmpvar_8.y));
      highp vec4 vOscillations_62;
      highp float fOscillation_63;
      fOscillation_63 = 1.0;
      highp float fAmount_64;
      highp float fTarget_65;
      highp vec4 tmpvar_66;
      tmpvar_66.x = (tmpvar_61 + _glesMultiTexCoord0.w);
      tmpvar_66.y = ((tmpvar_61 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_66.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_61 + _glesMultiTexCoord0.w));
      tmpvar_66.w = ((tmpvar_61 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_67;
      tmpvar_67 = abs(((
        fract((tmpvar_66 + 0.5))
       * 2.0) - 1.0));
      vOscillations_62 = (((
        (tmpvar_67 * tmpvar_67)
       * 
        (3.0 - (2.0 * tmpvar_67))
      ) - 0.5) * 2.0);
      highp float tmpvar_68;
      tmpvar_68 = (vOscillations_62.y * vOscillations_62.z);
      fTarget_65 = 1.0;
      fAmount_64 = tmpvar_68;
      if ((tmpvar_68 < 0.0)) {
        fTarget_65 = -1.0;
        fAmount_64 = -(tmpvar_68);
      };
      fOscillation_63 = (((
        (mix (mix (tmpvar_68, fTarget_65, fAmount_64), fTarget_65, fAmount_64) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_62.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_62.w * _ST_WindBranchWhip.x)));
      vPos_58 = (tmpvar_56 + ((tmpvar_60 * fOscillation_63) * _ST_WindBranch.y));
      highp vec4 tmpvar_69;
      tmpvar_69.zw = vec2(0.0, 0.0);
      tmpvar_69.x = ((tmpvar_61 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_69.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_70;
      highp vec4 tmpvar_71;
      tmpvar_71 = abs(((
        fract((tmpvar_69 + 0.5))
       * 2.0) - 1.0));
      tmpvar_70 = (((
        (tmpvar_71 * tmpvar_71)
       * 
        (3.0 - (2.0 * tmpvar_71))
      ) - 0.5) * 2.0);
      fAdherenceScale_59 = (1.0 - ((
        ((tmpvar_70.x * tmpvar_70.y) * tmpvar_70.x)
       * tmpvar_70.y) * _ST_WindTurbulences.x));
      fAdherenceScale_59 = (fAdherenceScale_59 + ((vOscillations_62.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_58 = (vPos_58 + ((
        ((vRotatedBranchAnchor_5 - vPos_58) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_59) * _glesMultiTexCoord0.z));
      vPos_57 = vPos_58;
    } else {
      highp vec3 vPos_72;
      vPos_72 = vPos_57;
      highp vec3 tmpvar_73;
      tmpvar_73 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_74;
      tmpvar_74 = (_ST_WindBranch.x + (tmpvar_8.x + tmpvar_8.y));
      highp vec4 vOscillations_75;
      highp float fAmount_76;
      highp float fTarget_77;
      highp vec4 tmpvar_78;
      tmpvar_78.w = 0.0;
      tmpvar_78.x = (tmpvar_74 + _glesMultiTexCoord0.w);
      tmpvar_78.y = ((tmpvar_74 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_78.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_74 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      vOscillations_75 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      highp float tmpvar_80;
      tmpvar_80 = (vOscillations_75.y * vOscillations_75.z);
      fTarget_77 = 1.0;
      fAmount_76 = tmpvar_80;
      if ((tmpvar_80 < 0.0)) {
        fTarget_77 = -1.0;
        fAmount_76 = -(tmpvar_80);
      };
      vPos_72 = (vPos_57 + ((tmpvar_73 * 
        (((mix (
          mix (tmpvar_80, fTarget_77, fAmount_76)
        , fTarget_77, fAmount_76) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_75.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_57 = vPos_72;
    };
    FinalPosition_7 = vPos_57;
  };
  if ((tmpvar_9 > 0.0)) {
    highp vec3 vPos_81;
    vPos_81 = FinalPosition_7;
    highp float fAdjust_82;
    highp float fLength_83;
    fLength_83 = sqrt(dot (FinalPosition_7, FinalPosition_7));
    highp float tmpvar_84;
    tmpvar_84 = (max ((FinalPosition_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_82 = tmpvar_84;
    if ((tmpvar_84 != 0.0)) {
      fAdjust_82 = pow (tmpvar_84, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_85;
    tmpvar_85.zw = vec2(0.0, 0.0);
    tmpvar_85.x = (tmpvar_8.x + _ST_WindGlobal.x);
    tmpvar_85.y = (tmpvar_8.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_86;
    highp vec4 tmpvar_87;
    tmpvar_87 = abs(((
      fract((tmpvar_85 + 0.5))
     * 2.0) - 1.0));
    tmpvar_86 = (((
      (tmpvar_87 * tmpvar_87)
     * 
      (3.0 - (2.0 * tmpvar_87))
    ) - 0.5) * 2.0);
    vPos_81.xz = (FinalPosition_7.xz + (vRotatedWindVector_6.xz * (
      ((_ST_WindGlobal.y * (tmpvar_86.x + (tmpvar_86.y * tmpvar_86.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_82)));
    vPos_81 = (normalize(vPos_81) * fLength_83);
    FinalPosition_7 = vPos_81;
  };
  tmpvar_4.xyz = FinalPosition_7;
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_4).xyz - _LightPositionRange.xyz);
  gl_Position = (glstate_matrix_mvp * tmpvar_4);
  xlv_TEXCOORD1 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _LightPositionRange;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  lowp float x_1;
  x_1 = ((texture2D (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_2;
  tmpvar_2 = fract((vec4(1.0, 255.0, 65025.0, 1.658138e+07) * min (
    (sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w)
  , 0.999)));
  highp vec4 tmpvar_3;
  tmpvar_3 = (tmpvar_2 - (tmpvar_2.yzww * 0.003921569));
  gl_FragData[0] = tmpvar_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
out highp vec3 xlv_TEXCOORD0;
out mediump vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec2 tmpvar_2;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0.xy;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_5;
  highp vec3 vRotatedWindVector_6;
  highp vec3 FinalPosition_7;
  FinalPosition_7 = tmpvar_1.xyz;
  highp vec3 tmpvar_8;
  tmpvar_8.x = _Object2World[3].x;
  tmpvar_8.y = _Object2World[3].y;
  tmpvar_8.z = _Object2World[3].z;
  mediump float tmpvar_9;
  tmpvar_9 = (_WindQuality * _WindEnabled);
  if ((tmpvar_9 > 0.0)) {
    highp mat3 tmpvar_10;
    tmpvar_10[0] = _World2Object[0].xyz;
    tmpvar_10[1] = _World2Object[1].xyz;
    tmpvar_10[2] = _World2Object[2].xyz;
    vRotatedWindVector_6 = normalize((tmpvar_10 * _ST_WindVector.xyz));
    highp mat3 tmpvar_11;
    tmpvar_11[0] = _World2Object[0].xyz;
    tmpvar_11[1] = _World2Object[1].xyz;
    tmpvar_11[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_5 = (normalize((tmpvar_11 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_6 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_5 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_13[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_13[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = (normalize((tmpvar_12 * tmpvar_13)) * sqrt(dot (tmpvar_12, tmpvar_12)));
  FinalPosition_7 = tmpvar_14;
  if (((tmpvar_9 > 1.0) && (tmpvar_9 < 5.0))) {
    highp float tmpvar_15;
    tmpvar_15 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_16;
    isBestWind_16 = (tmpvar_9 == 4.0);
    bool bLeaf2_17;
    bLeaf2_17 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_18;
    vPos_18 = tmpvar_14;
    highp float tmpvar_19;
    if (bLeaf2_17) {
      tmpvar_19 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_19 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_20;
    if (bLeaf2_17) {
      tmpvar_20 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_20 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_21;
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (tmpvar_19 + tmpvar_15);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_21 = (tmpvar_14 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_20 * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vPos_18 = vPos_21;
    if (isBestWind_16) {
      highp vec3 tmpvar_24;
      tmpvar_24 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_25;
      if (bLeaf2_17) {
        tmpvar_25 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_25 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_26;
      if (bLeaf2_17) {
        tmpvar_26 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_26 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_27;
      if (bLeaf2_17) {
        tmpvar_27 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_27 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_28;
      if (bLeaf2_17) {
        tmpvar_28 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_28 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_29;
      if (bLeaf2_17) {
        tmpvar_29 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_29 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_30;
      if (bLeaf2_17) {
        tmpvar_30 = bool(1);
      } else {
        tmpvar_30 = bool(1);
      };
      highp float fTwitch_31;
      highp vec3 vAxis_32;
      highp vec3 tmpvar_33;
      tmpvar_33 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_34;
      tmpvar_34 = ((tmpvar_33.x + tmpvar_33.y) + tmpvar_33.z);
      highp vec4 tmpvar_35;
      tmpvar_35.x = (tmpvar_25 + tmpvar_34);
      tmpvar_35.y = ((tmpvar_25 * 0.75) - tmpvar_34);
      tmpvar_35.z = ((tmpvar_25 * 0.01) + tmpvar_34);
      tmpvar_35.w = (tmpvar_25 + tmpvar_34);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      highp float tmpvar_38;
      tmpvar_38 = sqrt(dot (vPos_21, vPos_21));
      highp float fAngle_39;
      fAngle_39 = ((_glesMultiTexCoord2.x * tmpvar_27) * (tmpvar_36.x + (tmpvar_36.y * tmpvar_36.y)));
      highp vec2 vSinCos_40;
      vSinCos_40.x = sin(fAngle_39);
      vSinCos_40.y = cos(fAngle_39);
      highp float tmpvar_41;
      tmpvar_41 = (1.0 - vSinCos_40.y);
      highp mat3 tmpvar_42;
      tmpvar_42[0].x = (((tmpvar_41 * tmpvar_24.x) * tmpvar_24.x) + vSinCos_40.y);
      tmpvar_42[0].y = (((tmpvar_41 * tmpvar_24.x) * tmpvar_24.y) + (vSinCos_40.x * tmpvar_24.z));
      tmpvar_42[0].z = (((tmpvar_41 * tmpvar_24.x) * tmpvar_24.z) - (vSinCos_40.x * tmpvar_24.y));
      tmpvar_42[1].x = (((tmpvar_41 * tmpvar_24.x) * tmpvar_24.y) - (vSinCos_40.x * tmpvar_24.z));
      tmpvar_42[1].y = (((tmpvar_41 * tmpvar_24.y) * tmpvar_24.y) + vSinCos_40.y);
      tmpvar_42[1].z = (((tmpvar_41 * tmpvar_24.y) * tmpvar_24.z) + (vSinCos_40.x * tmpvar_24.x));
      tmpvar_42[2].x = (((tmpvar_41 * tmpvar_24.x) * tmpvar_24.z) + (vSinCos_40.x * tmpvar_24.y));
      tmpvar_42[2].y = (((tmpvar_41 * tmpvar_24.y) * tmpvar_24.z) - (vSinCos_40.x * tmpvar_24.x));
      tmpvar_42[2].z = (((tmpvar_41 * tmpvar_24.z) * tmpvar_24.z) + vSinCos_40.y);
      highp vec3 tmpvar_43;
      tmpvar_43 = ((tmpvar_24.yzx * vRotatedWindVector_6.zxy) - (tmpvar_24.zxy * vRotatedWindVector_6.yzx));
      vAxis_32.xz = tmpvar_43.xz;
      highp float tmpvar_44;
      tmpvar_44 = clamp (dot (vRotatedWindVector_6, tmpvar_24), -1.0, 1.0);
      vAxis_32.y = (tmpvar_43.y + tmpvar_44);
      highp vec3 tmpvar_45;
      tmpvar_45 = normalize(vAxis_32);
      vAxis_32 = tmpvar_45;
      highp float tmpvar_46;
      tmpvar_46 = (1.570796 - (sign(tmpvar_44) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_44))) * (1.570796 + (abs(tmpvar_44) * (-0.2146018 + 
          (abs(tmpvar_44) * (0.08656672 + (abs(tmpvar_44) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_47;
      tmpvar_47 = (tmpvar_36.y - (tmpvar_36.x * tmpvar_36.x));
      fTwitch_31 = 0.0;
      if (tmpvar_30) {
        highp float fTime_48;
        fTime_48 = (tmpvar_29.z + tmpvar_34);
        highp vec4 tmpvar_49;
        tmpvar_49.zw = vec2(0.0, 0.0);
        tmpvar_49.x = fTime_48;
        tmpvar_49.y = (0.87 * fTime_48);
        highp vec4 tmpvar_50;
        highp vec4 tmpvar_51;
        tmpvar_51 = abs(((
          fract((tmpvar_49 + 0.5))
         * 2.0) - 1.0));
        tmpvar_50 = (((
          (tmpvar_51 * tmpvar_51)
         * 
          (3.0 - (2.0 * tmpvar_51))
        ) - 0.5) * 2.0);
        fTwitch_31 = (tmpvar_29.x * pow (clamp (
          ((((tmpvar_50.x * tmpvar_50.y) * tmpvar_50.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_29.y));
      };
      highp float fAngle_52;
      fAngle_52 = (_glesMultiTexCoord2.x * ((
        (tmpvar_46 * tmpvar_28)
       + 
        (tmpvar_47 * tmpvar_26)
      ) + fTwitch_31));
      highp vec2 vSinCos_53;
      vSinCos_53.x = sin(fAngle_52);
      vSinCos_53.y = cos(fAngle_52);
      highp float tmpvar_54;
      tmpvar_54 = (1.0 - vSinCos_53.y);
      highp mat3 tmpvar_55;
      tmpvar_55[0].x = (((tmpvar_54 * tmpvar_45.x) * tmpvar_45.x) + vSinCos_53.y);
      tmpvar_55[0].y = (((tmpvar_54 * tmpvar_45.x) * tmpvar_45.y) + (vSinCos_53.x * tmpvar_45.z));
      tmpvar_55[0].z = (((tmpvar_54 * tmpvar_45.x) * tmpvar_45.z) - (vSinCos_53.x * tmpvar_45.y));
      tmpvar_55[1].x = (((tmpvar_54 * tmpvar_45.x) * tmpvar_45.y) - (vSinCos_53.x * tmpvar_45.z));
      tmpvar_55[1].y = (((tmpvar_54 * tmpvar_45.y) * tmpvar_45.y) + vSinCos_53.y);
      tmpvar_55[1].z = (((tmpvar_54 * tmpvar_45.y) * tmpvar_45.z) + (vSinCos_53.x * tmpvar_45.x));
      tmpvar_55[2].x = (((tmpvar_54 * tmpvar_45.x) * tmpvar_45.z) + (vSinCos_53.x * tmpvar_45.y));
      tmpvar_55[2].y = (((tmpvar_54 * tmpvar_45.y) * tmpvar_45.z) - (vSinCos_53.x * tmpvar_45.x));
      tmpvar_55[2].z = (((tmpvar_54 * tmpvar_45.z) * tmpvar_45.z) + vSinCos_53.y);
      vPos_18 = (normalize((
        (tmpvar_42 * tmpvar_55)
       * vPos_21)) * tmpvar_38);
    };
    FinalPosition_7 = vPos_18;
  };
  highp vec3 tmpvar_56;
  tmpvar_56 = (FinalPosition_7 + _glesMultiTexCoord1.xyz);
  FinalPosition_7 = tmpvar_56;
  if ((tmpvar_9 >= 3.0)) {
    highp vec3 vPos_57;
    vPos_57 = tmpvar_56;
    if ((tmpvar_9 == 5.0)) {
      highp vec3 vPos_58;
      vPos_58 = tmpvar_56;
      highp float fAdherenceScale_59;
      highp vec3 tmpvar_60;
      tmpvar_60 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_61;
      tmpvar_61 = (_ST_WindBranch.x + (tmpvar_8.x + tmpvar_8.y));
      highp vec4 vOscillations_62;
      highp float fOscillation_63;
      fOscillation_63 = 1.0;
      highp float fAmount_64;
      highp float fTarget_65;
      highp vec4 tmpvar_66;
      tmpvar_66.x = (tmpvar_61 + _glesMultiTexCoord0.w);
      tmpvar_66.y = ((tmpvar_61 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_66.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_61 + _glesMultiTexCoord0.w));
      tmpvar_66.w = ((tmpvar_61 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_67;
      tmpvar_67 = abs(((
        fract((tmpvar_66 + 0.5))
       * 2.0) - 1.0));
      vOscillations_62 = (((
        (tmpvar_67 * tmpvar_67)
       * 
        (3.0 - (2.0 * tmpvar_67))
      ) - 0.5) * 2.0);
      highp float tmpvar_68;
      tmpvar_68 = (vOscillations_62.y * vOscillations_62.z);
      fTarget_65 = 1.0;
      fAmount_64 = tmpvar_68;
      if ((tmpvar_68 < 0.0)) {
        fTarget_65 = -1.0;
        fAmount_64 = -(tmpvar_68);
      };
      fOscillation_63 = (((
        (mix (mix (tmpvar_68, fTarget_65, fAmount_64), fTarget_65, fAmount_64) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_62.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_62.w * _ST_WindBranchWhip.x)));
      vPos_58 = (tmpvar_56 + ((tmpvar_60 * fOscillation_63) * _ST_WindBranch.y));
      highp vec4 tmpvar_69;
      tmpvar_69.zw = vec2(0.0, 0.0);
      tmpvar_69.x = ((tmpvar_61 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_69.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_70;
      highp vec4 tmpvar_71;
      tmpvar_71 = abs(((
        fract((tmpvar_69 + 0.5))
       * 2.0) - 1.0));
      tmpvar_70 = (((
        (tmpvar_71 * tmpvar_71)
       * 
        (3.0 - (2.0 * tmpvar_71))
      ) - 0.5) * 2.0);
      fAdherenceScale_59 = (1.0 - ((
        ((tmpvar_70.x * tmpvar_70.y) * tmpvar_70.x)
       * tmpvar_70.y) * _ST_WindTurbulences.x));
      fAdherenceScale_59 = (fAdherenceScale_59 + ((vOscillations_62.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_58 = (vPos_58 + ((
        ((vRotatedBranchAnchor_5 - vPos_58) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_59) * _glesMultiTexCoord0.z));
      vPos_57 = vPos_58;
    } else {
      highp vec3 vPos_72;
      vPos_72 = vPos_57;
      highp vec3 tmpvar_73;
      tmpvar_73 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_74;
      tmpvar_74 = (_ST_WindBranch.x + (tmpvar_8.x + tmpvar_8.y));
      highp vec4 vOscillations_75;
      highp float fAmount_76;
      highp float fTarget_77;
      highp vec4 tmpvar_78;
      tmpvar_78.w = 0.0;
      tmpvar_78.x = (tmpvar_74 + _glesMultiTexCoord0.w);
      tmpvar_78.y = ((tmpvar_74 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_78.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_74 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      vOscillations_75 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      highp float tmpvar_80;
      tmpvar_80 = (vOscillations_75.y * vOscillations_75.z);
      fTarget_77 = 1.0;
      fAmount_76 = tmpvar_80;
      if ((tmpvar_80 < 0.0)) {
        fTarget_77 = -1.0;
        fAmount_76 = -(tmpvar_80);
      };
      vPos_72 = (vPos_57 + ((tmpvar_73 * 
        (((mix (
          mix (tmpvar_80, fTarget_77, fAmount_76)
        , fTarget_77, fAmount_76) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_75.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_57 = vPos_72;
    };
    FinalPosition_7 = vPos_57;
  };
  if ((tmpvar_9 > 0.0)) {
    highp vec3 vPos_81;
    vPos_81 = FinalPosition_7;
    highp float fAdjust_82;
    highp float fLength_83;
    fLength_83 = sqrt(dot (FinalPosition_7, FinalPosition_7));
    highp float tmpvar_84;
    tmpvar_84 = (max ((FinalPosition_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_82 = tmpvar_84;
    if ((tmpvar_84 != 0.0)) {
      fAdjust_82 = pow (tmpvar_84, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_85;
    tmpvar_85.zw = vec2(0.0, 0.0);
    tmpvar_85.x = (tmpvar_8.x + _ST_WindGlobal.x);
    tmpvar_85.y = (tmpvar_8.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_86;
    highp vec4 tmpvar_87;
    tmpvar_87 = abs(((
      fract((tmpvar_85 + 0.5))
     * 2.0) - 1.0));
    tmpvar_86 = (((
      (tmpvar_87 * tmpvar_87)
     * 
      (3.0 - (2.0 * tmpvar_87))
    ) - 0.5) * 2.0);
    vPos_81.xz = (FinalPosition_7.xz + (vRotatedWindVector_6.xz * (
      ((_ST_WindGlobal.y * (tmpvar_86.x + (tmpvar_86.y * tmpvar_86.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_82)));
    vPos_81 = (normalize(vPos_81) * fLength_83);
    FinalPosition_7 = vPos_81;
  };
  tmpvar_4.xyz = FinalPosition_7;
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_4).xyz - _LightPositionRange.xyz);
  gl_Position = (glstate_matrix_mvp * tmpvar_4);
  xlv_TEXCOORD1 = tmpvar_2;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _LightPositionRange;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
in highp vec3 xlv_TEXCOORD0;
in mediump vec2 xlv_TEXCOORD1;
void main ()
{
  lowp float x_1;
  x_1 = ((texture (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_2;
  tmpvar_2 = vec4((sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w));
  _glesFragData[0] = tmpvar_2;
}



#endif"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_3;
  highp vec3 vRotatedWindVector_4;
  highp vec3 FinalPosition_5;
  FinalPosition_5 = tmpvar_1.xyz;
  highp vec3 tmpvar_6;
  tmpvar_6.x = _Object2World[3].x;
  tmpvar_6.y = _Object2World[3].y;
  tmpvar_6.z = _Object2World[3].z;
  mediump float tmpvar_7;
  tmpvar_7 = (_WindQuality * _WindEnabled);
  if ((tmpvar_7 > 0.0)) {
    highp mat3 tmpvar_8;
    tmpvar_8[0] = _World2Object[0].xyz;
    tmpvar_8[1] = _World2Object[1].xyz;
    tmpvar_8[2] = _World2Object[2].xyz;
    vRotatedWindVector_4 = normalize((tmpvar_8 * _ST_WindVector.xyz));
    highp mat3 tmpvar_9;
    tmpvar_9[0] = _World2Object[0].xyz;
    tmpvar_9[1] = _World2Object[1].xyz;
    tmpvar_9[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_3 = (normalize((tmpvar_9 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_4 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_3 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_5 = tmpvar_10;
  if ((tmpvar_7 >= 3.0)) {
    highp vec3 vPos_11;
    vPos_11 = tmpvar_10;
    if ((tmpvar_7 == 5.0)) {
      highp vec3 vPos_12;
      vPos_12 = tmpvar_10;
      highp float fAdherenceScale_13;
      highp vec3 tmpvar_14;
      tmpvar_14 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_15;
      tmpvar_15 = (_ST_WindBranch.x + (tmpvar_6.x + tmpvar_6.y));
      highp vec4 vOscillations_16;
      highp float fOscillation_17;
      fOscillation_17 = 1.0;
      highp float fAmount_18;
      highp float fTarget_19;
      highp vec4 tmpvar_20;
      tmpvar_20.x = (tmpvar_15 + _glesMultiTexCoord0.w);
      tmpvar_20.y = ((tmpvar_15 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_20.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_15 + _glesMultiTexCoord0.w));
      tmpvar_20.w = ((tmpvar_15 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_21;
      tmpvar_21 = abs(((
        fract((tmpvar_20 + 0.5))
       * 2.0) - 1.0));
      vOscillations_16 = (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0);
      highp float tmpvar_22;
      tmpvar_22 = (vOscillations_16.y * vOscillations_16.z);
      fTarget_19 = 1.0;
      fAmount_18 = tmpvar_22;
      if ((tmpvar_22 < 0.0)) {
        fTarget_19 = -1.0;
        fAmount_18 = -(tmpvar_22);
      };
      fOscillation_17 = (((
        (mix (mix (tmpvar_22, fTarget_19, fAmount_18), fTarget_19, fAmount_18) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_16.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_16.w * _ST_WindBranchWhip.x)));
      vPos_12 = (tmpvar_10 + ((tmpvar_14 * fOscillation_17) * _ST_WindBranch.y));
      highp vec4 tmpvar_23;
      tmpvar_23.zw = vec2(0.0, 0.0);
      tmpvar_23.x = ((tmpvar_15 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_23.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_24;
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_23 + 0.5))
       * 2.0) - 1.0));
      tmpvar_24 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      fAdherenceScale_13 = (1.0 - ((
        ((tmpvar_24.x * tmpvar_24.y) * tmpvar_24.x)
       * tmpvar_24.y) * _ST_WindTurbulences.x));
      fAdherenceScale_13 = (fAdherenceScale_13 + ((vOscillations_16.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_12 = (vPos_12 + ((
        ((vRotatedBranchAnchor_3 - vPos_12) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_13) * _glesMultiTexCoord0.z));
      vPos_11 = vPos_12;
    } else {
      highp vec3 vPos_26;
      vPos_26 = vPos_11;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (tmpvar_6.x + tmpvar_6.y));
      highp vec4 vOscillations_29;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.w = 0.0;
      tmpvar_32.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      vPos_26 = (vPos_11 + ((tmpvar_27 * 
        (((mix (
          mix (tmpvar_34, fTarget_31, fAmount_30)
        , fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_11 = vPos_26;
    };
    FinalPosition_5 = vPos_11;
  };
  if ((tmpvar_7 > 0.0)) {
    highp vec3 vPos_35;
    vPos_35 = FinalPosition_5;
    highp float fAdjust_36;
    highp float fLength_37;
    fLength_37 = sqrt(dot (FinalPosition_5, FinalPosition_5));
    highp float tmpvar_38;
    tmpvar_38 = (max ((FinalPosition_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_36 = tmpvar_38;
    if ((tmpvar_38 != 0.0)) {
      fAdjust_36 = pow (tmpvar_38, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_39;
    tmpvar_39.zw = vec2(0.0, 0.0);
    tmpvar_39.x = (tmpvar_6.x + _ST_WindGlobal.x);
    tmpvar_39.y = (tmpvar_6.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_40;
    highp vec4 tmpvar_41;
    tmpvar_41 = abs(((
      fract((tmpvar_39 + 0.5))
     * 2.0) - 1.0));
    tmpvar_40 = (((
      (tmpvar_41 * tmpvar_41)
     * 
      (3.0 - (2.0 * tmpvar_41))
    ) - 0.5) * 2.0);
    vPos_35.xz = (FinalPosition_5.xz + (vRotatedWindVector_4.xz * (
      ((_ST_WindGlobal.y * (tmpvar_40.x + (tmpvar_40.y * tmpvar_40.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_36)));
    vPos_35 = (normalize(vPos_35) * fLength_37);
    FinalPosition_5 = vPos_35;
  };
  tmpvar_2.xyz = FinalPosition_5;
  highp vec3 vertex_42;
  vertex_42 = tmpvar_2.xyz;
  highp vec4 clipPos_43;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp vec4 tmpvar_44;
    tmpvar_44.w = 1.0;
    tmpvar_44.xyz = vertex_42;
    highp vec3 tmpvar_45;
    tmpvar_45 = (_Object2World * tmpvar_44).xyz;
    highp vec4 v_46;
    v_46.x = _World2Object[0].x;
    v_46.y = _World2Object[1].x;
    v_46.z = _World2Object[2].x;
    v_46.w = _World2Object[3].x;
    highp vec4 v_47;
    v_47.x = _World2Object[0].y;
    v_47.y = _World2Object[1].y;
    v_47.z = _World2Object[2].y;
    v_47.w = _World2Object[3].y;
    highp vec4 v_48;
    v_48.x = _World2Object[0].z;
    v_48.y = _World2Object[1].z;
    v_48.z = _World2Object[2].z;
    v_48.w = _World2Object[3].z;
    highp vec3 tmpvar_49;
    tmpvar_49 = normalize(((
      (v_46.xyz * _glesNormal.x)
     + 
      (v_47.xyz * _glesNormal.y)
    ) + (v_48.xyz * _glesNormal.z)));
    highp float tmpvar_50;
    tmpvar_50 = dot (tmpvar_49, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_45 * _WorldSpaceLightPos0.w)
    )));
    highp vec4 tmpvar_51;
    tmpvar_51.w = 1.0;
    tmpvar_51.xyz = (tmpvar_45 - (tmpvar_49 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_50 * tmpvar_50)))
    )));
    clipPos_43 = (unity_MatrixVP * tmpvar_51);
  } else {
    highp vec4 tmpvar_52;
    tmpvar_52.w = 1.0;
    tmpvar_52.xyz = vertex_42;
    clipPos_43 = (glstate_matrix_mvp * tmpvar_52);
  };
  highp vec4 clipPos_53;
  clipPos_53.xyw = clipPos_43.xyw;
  clipPos_53.z = (clipPos_43.z + clamp ((unity_LightShadowBias.x / clipPos_43.w), 0.0, 1.0));
  clipPos_53.z = mix (clipPos_53.z, max (clipPos_53.z, -(clipPos_43.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_53;
}



#endif
#ifdef FRAGMENT

void main ()
{
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_3;
  highp vec3 vRotatedWindVector_4;
  highp vec3 FinalPosition_5;
  FinalPosition_5 = tmpvar_1.xyz;
  highp vec3 tmpvar_6;
  tmpvar_6.x = _Object2World[3].x;
  tmpvar_6.y = _Object2World[3].y;
  tmpvar_6.z = _Object2World[3].z;
  mediump float tmpvar_7;
  tmpvar_7 = (_WindQuality * _WindEnabled);
  if ((tmpvar_7 > 0.0)) {
    highp mat3 tmpvar_8;
    tmpvar_8[0] = _World2Object[0].xyz;
    tmpvar_8[1] = _World2Object[1].xyz;
    tmpvar_8[2] = _World2Object[2].xyz;
    vRotatedWindVector_4 = normalize((tmpvar_8 * _ST_WindVector.xyz));
    highp mat3 tmpvar_9;
    tmpvar_9[0] = _World2Object[0].xyz;
    tmpvar_9[1] = _World2Object[1].xyz;
    tmpvar_9[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_3 = (normalize((tmpvar_9 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_4 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_3 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_5 = tmpvar_10;
  if ((tmpvar_7 >= 3.0)) {
    highp vec3 vPos_11;
    vPos_11 = tmpvar_10;
    if ((tmpvar_7 == 5.0)) {
      highp vec3 vPos_12;
      vPos_12 = tmpvar_10;
      highp float fAdherenceScale_13;
      highp vec3 tmpvar_14;
      tmpvar_14 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_15;
      tmpvar_15 = (_ST_WindBranch.x + (tmpvar_6.x + tmpvar_6.y));
      highp vec4 vOscillations_16;
      highp float fOscillation_17;
      fOscillation_17 = 1.0;
      highp float fAmount_18;
      highp float fTarget_19;
      highp vec4 tmpvar_20;
      tmpvar_20.x = (tmpvar_15 + _glesMultiTexCoord0.w);
      tmpvar_20.y = ((tmpvar_15 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_20.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_15 + _glesMultiTexCoord0.w));
      tmpvar_20.w = ((tmpvar_15 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_21;
      tmpvar_21 = abs(((
        fract((tmpvar_20 + 0.5))
       * 2.0) - 1.0));
      vOscillations_16 = (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0);
      highp float tmpvar_22;
      tmpvar_22 = (vOscillations_16.y * vOscillations_16.z);
      fTarget_19 = 1.0;
      fAmount_18 = tmpvar_22;
      if ((tmpvar_22 < 0.0)) {
        fTarget_19 = -1.0;
        fAmount_18 = -(tmpvar_22);
      };
      fOscillation_17 = (((
        (mix (mix (tmpvar_22, fTarget_19, fAmount_18), fTarget_19, fAmount_18) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_16.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_16.w * _ST_WindBranchWhip.x)));
      vPos_12 = (tmpvar_10 + ((tmpvar_14 * fOscillation_17) * _ST_WindBranch.y));
      highp vec4 tmpvar_23;
      tmpvar_23.zw = vec2(0.0, 0.0);
      tmpvar_23.x = ((tmpvar_15 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_23.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_24;
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_23 + 0.5))
       * 2.0) - 1.0));
      tmpvar_24 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      fAdherenceScale_13 = (1.0 - ((
        ((tmpvar_24.x * tmpvar_24.y) * tmpvar_24.x)
       * tmpvar_24.y) * _ST_WindTurbulences.x));
      fAdherenceScale_13 = (fAdherenceScale_13 + ((vOscillations_16.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_12 = (vPos_12 + ((
        ((vRotatedBranchAnchor_3 - vPos_12) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_13) * _glesMultiTexCoord0.z));
      vPos_11 = vPos_12;
    } else {
      highp vec3 vPos_26;
      vPos_26 = vPos_11;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (tmpvar_6.x + tmpvar_6.y));
      highp vec4 vOscillations_29;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.w = 0.0;
      tmpvar_32.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      vPos_26 = (vPos_11 + ((tmpvar_27 * 
        (((mix (
          mix (tmpvar_34, fTarget_31, fAmount_30)
        , fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_11 = vPos_26;
    };
    FinalPosition_5 = vPos_11;
  };
  if ((tmpvar_7 > 0.0)) {
    highp vec3 vPos_35;
    vPos_35 = FinalPosition_5;
    highp float fAdjust_36;
    highp float fLength_37;
    fLength_37 = sqrt(dot (FinalPosition_5, FinalPosition_5));
    highp float tmpvar_38;
    tmpvar_38 = (max ((FinalPosition_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_36 = tmpvar_38;
    if ((tmpvar_38 != 0.0)) {
      fAdjust_36 = pow (tmpvar_38, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_39;
    tmpvar_39.zw = vec2(0.0, 0.0);
    tmpvar_39.x = (tmpvar_6.x + _ST_WindGlobal.x);
    tmpvar_39.y = (tmpvar_6.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_40;
    highp vec4 tmpvar_41;
    tmpvar_41 = abs(((
      fract((tmpvar_39 + 0.5))
     * 2.0) - 1.0));
    tmpvar_40 = (((
      (tmpvar_41 * tmpvar_41)
     * 
      (3.0 - (2.0 * tmpvar_41))
    ) - 0.5) * 2.0);
    vPos_35.xz = (FinalPosition_5.xz + (vRotatedWindVector_4.xz * (
      ((_ST_WindGlobal.y * (tmpvar_40.x + (tmpvar_40.y * tmpvar_40.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_36)));
    vPos_35 = (normalize(vPos_35) * fLength_37);
    FinalPosition_5 = vPos_35;
  };
  tmpvar_2.xyz = FinalPosition_5;
  highp vec3 vertex_42;
  vertex_42 = tmpvar_2.xyz;
  highp vec4 clipPos_43;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp vec4 tmpvar_44;
    tmpvar_44.w = 1.0;
    tmpvar_44.xyz = vertex_42;
    highp vec3 tmpvar_45;
    tmpvar_45 = (_Object2World * tmpvar_44).xyz;
    highp vec4 v_46;
    v_46.x = _World2Object[0].x;
    v_46.y = _World2Object[1].x;
    v_46.z = _World2Object[2].x;
    v_46.w = _World2Object[3].x;
    highp vec4 v_47;
    v_47.x = _World2Object[0].y;
    v_47.y = _World2Object[1].y;
    v_47.z = _World2Object[2].y;
    v_47.w = _World2Object[3].y;
    highp vec4 v_48;
    v_48.x = _World2Object[0].z;
    v_48.y = _World2Object[1].z;
    v_48.z = _World2Object[2].z;
    v_48.w = _World2Object[3].z;
    highp vec3 tmpvar_49;
    tmpvar_49 = normalize(((
      (v_46.xyz * _glesNormal.x)
     + 
      (v_47.xyz * _glesNormal.y)
    ) + (v_48.xyz * _glesNormal.z)));
    highp float tmpvar_50;
    tmpvar_50 = dot (tmpvar_49, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_45 * _WorldSpaceLightPos0.w)
    )));
    highp vec4 tmpvar_51;
    tmpvar_51.w = 1.0;
    tmpvar_51.xyz = (tmpvar_45 - (tmpvar_49 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_50 * tmpvar_50)))
    )));
    clipPos_43 = (unity_MatrixVP * tmpvar_51);
  } else {
    highp vec4 tmpvar_52;
    tmpvar_52.w = 1.0;
    tmpvar_52.xyz = vertex_42;
    clipPos_43 = (glstate_matrix_mvp * tmpvar_52);
  };
  highp vec4 clipPos_53;
  clipPos_53.xyw = clipPos_43.xyw;
  clipPos_53.z = (clipPos_43.z + clamp ((unity_LightShadowBias.x / clipPos_43.w), 0.0, 1.0));
  clipPos_53.z = mix (clipPos_53.z, max (clipPos_53.z, -(clipPos_43.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_53;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
void main ()
{
  _glesFragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}



#endif"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
varying highp vec3 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_3;
  highp vec3 vRotatedWindVector_4;
  highp vec3 FinalPosition_5;
  FinalPosition_5 = tmpvar_1.xyz;
  highp vec3 tmpvar_6;
  tmpvar_6.x = _Object2World[3].x;
  tmpvar_6.y = _Object2World[3].y;
  tmpvar_6.z = _Object2World[3].z;
  mediump float tmpvar_7;
  tmpvar_7 = (_WindQuality * _WindEnabled);
  if ((tmpvar_7 > 0.0)) {
    highp mat3 tmpvar_8;
    tmpvar_8[0] = _World2Object[0].xyz;
    tmpvar_8[1] = _World2Object[1].xyz;
    tmpvar_8[2] = _World2Object[2].xyz;
    vRotatedWindVector_4 = normalize((tmpvar_8 * _ST_WindVector.xyz));
    highp mat3 tmpvar_9;
    tmpvar_9[0] = _World2Object[0].xyz;
    tmpvar_9[1] = _World2Object[1].xyz;
    tmpvar_9[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_3 = (normalize((tmpvar_9 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_4 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_3 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_5 = tmpvar_10;
  if ((tmpvar_7 >= 3.0)) {
    highp vec3 vPos_11;
    vPos_11 = tmpvar_10;
    if ((tmpvar_7 == 5.0)) {
      highp vec3 vPos_12;
      vPos_12 = tmpvar_10;
      highp float fAdherenceScale_13;
      highp vec3 tmpvar_14;
      tmpvar_14 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_15;
      tmpvar_15 = (_ST_WindBranch.x + (tmpvar_6.x + tmpvar_6.y));
      highp vec4 vOscillations_16;
      highp float fOscillation_17;
      fOscillation_17 = 1.0;
      highp float fAmount_18;
      highp float fTarget_19;
      highp vec4 tmpvar_20;
      tmpvar_20.x = (tmpvar_15 + _glesMultiTexCoord0.w);
      tmpvar_20.y = ((tmpvar_15 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_20.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_15 + _glesMultiTexCoord0.w));
      tmpvar_20.w = ((tmpvar_15 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_21;
      tmpvar_21 = abs(((
        fract((tmpvar_20 + 0.5))
       * 2.0) - 1.0));
      vOscillations_16 = (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0);
      highp float tmpvar_22;
      tmpvar_22 = (vOscillations_16.y * vOscillations_16.z);
      fTarget_19 = 1.0;
      fAmount_18 = tmpvar_22;
      if ((tmpvar_22 < 0.0)) {
        fTarget_19 = -1.0;
        fAmount_18 = -(tmpvar_22);
      };
      fOscillation_17 = (((
        (mix (mix (tmpvar_22, fTarget_19, fAmount_18), fTarget_19, fAmount_18) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_16.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_16.w * _ST_WindBranchWhip.x)));
      vPos_12 = (tmpvar_10 + ((tmpvar_14 * fOscillation_17) * _ST_WindBranch.y));
      highp vec4 tmpvar_23;
      tmpvar_23.zw = vec2(0.0, 0.0);
      tmpvar_23.x = ((tmpvar_15 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_23.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_24;
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_23 + 0.5))
       * 2.0) - 1.0));
      tmpvar_24 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      fAdherenceScale_13 = (1.0 - ((
        ((tmpvar_24.x * tmpvar_24.y) * tmpvar_24.x)
       * tmpvar_24.y) * _ST_WindTurbulences.x));
      fAdherenceScale_13 = (fAdherenceScale_13 + ((vOscillations_16.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_12 = (vPos_12 + ((
        ((vRotatedBranchAnchor_3 - vPos_12) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_13) * _glesMultiTexCoord0.z));
      vPos_11 = vPos_12;
    } else {
      highp vec3 vPos_26;
      vPos_26 = vPos_11;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (tmpvar_6.x + tmpvar_6.y));
      highp vec4 vOscillations_29;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.w = 0.0;
      tmpvar_32.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      vPos_26 = (vPos_11 + ((tmpvar_27 * 
        (((mix (
          mix (tmpvar_34, fTarget_31, fAmount_30)
        , fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_11 = vPos_26;
    };
    FinalPosition_5 = vPos_11;
  };
  if ((tmpvar_7 > 0.0)) {
    highp vec3 vPos_35;
    vPos_35 = FinalPosition_5;
    highp float fAdjust_36;
    highp float fLength_37;
    fLength_37 = sqrt(dot (FinalPosition_5, FinalPosition_5));
    highp float tmpvar_38;
    tmpvar_38 = (max ((FinalPosition_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_36 = tmpvar_38;
    if ((tmpvar_38 != 0.0)) {
      fAdjust_36 = pow (tmpvar_38, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_39;
    tmpvar_39.zw = vec2(0.0, 0.0);
    tmpvar_39.x = (tmpvar_6.x + _ST_WindGlobal.x);
    tmpvar_39.y = (tmpvar_6.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_40;
    highp vec4 tmpvar_41;
    tmpvar_41 = abs(((
      fract((tmpvar_39 + 0.5))
     * 2.0) - 1.0));
    tmpvar_40 = (((
      (tmpvar_41 * tmpvar_41)
     * 
      (3.0 - (2.0 * tmpvar_41))
    ) - 0.5) * 2.0);
    vPos_35.xz = (FinalPosition_5.xz + (vRotatedWindVector_4.xz * (
      ((_ST_WindGlobal.y * (tmpvar_40.x + (tmpvar_40.y * tmpvar_40.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_36)));
    vPos_35 = (normalize(vPos_35) * fLength_37);
    FinalPosition_5 = vPos_35;
  };
  tmpvar_2.xyz = FinalPosition_5;
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_2).xyz - _LightPositionRange.xyz);
  gl_Position = (glstate_matrix_mvp * tmpvar_2);
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _LightPositionRange;
varying highp vec3 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = fract((vec4(1.0, 255.0, 65025.0, 1.658138e+07) * min (
    (sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w)
  , 0.999)));
  highp vec4 tmpvar_2;
  tmpvar_2 = (tmpvar_1 - (tmpvar_1.yzww * 0.003921569));
  gl_FragData[0] = tmpvar_2;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
out highp vec3 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_3;
  highp vec3 vRotatedWindVector_4;
  highp vec3 FinalPosition_5;
  FinalPosition_5 = tmpvar_1.xyz;
  highp vec3 tmpvar_6;
  tmpvar_6.x = _Object2World[3].x;
  tmpvar_6.y = _Object2World[3].y;
  tmpvar_6.z = _Object2World[3].z;
  mediump float tmpvar_7;
  tmpvar_7 = (_WindQuality * _WindEnabled);
  if ((tmpvar_7 > 0.0)) {
    highp mat3 tmpvar_8;
    tmpvar_8[0] = _World2Object[0].xyz;
    tmpvar_8[1] = _World2Object[1].xyz;
    tmpvar_8[2] = _World2Object[2].xyz;
    vRotatedWindVector_4 = normalize((tmpvar_8 * _ST_WindVector.xyz));
    highp mat3 tmpvar_9;
    tmpvar_9[0] = _World2Object[0].xyz;
    tmpvar_9[1] = _World2Object[1].xyz;
    tmpvar_9[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_3 = (normalize((tmpvar_9 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_4 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_3 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_5 = tmpvar_10;
  if ((tmpvar_7 >= 3.0)) {
    highp vec3 vPos_11;
    vPos_11 = tmpvar_10;
    if ((tmpvar_7 == 5.0)) {
      highp vec3 vPos_12;
      vPos_12 = tmpvar_10;
      highp float fAdherenceScale_13;
      highp vec3 tmpvar_14;
      tmpvar_14 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_15;
      tmpvar_15 = (_ST_WindBranch.x + (tmpvar_6.x + tmpvar_6.y));
      highp vec4 vOscillations_16;
      highp float fOscillation_17;
      fOscillation_17 = 1.0;
      highp float fAmount_18;
      highp float fTarget_19;
      highp vec4 tmpvar_20;
      tmpvar_20.x = (tmpvar_15 + _glesMultiTexCoord0.w);
      tmpvar_20.y = ((tmpvar_15 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_20.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_15 + _glesMultiTexCoord0.w));
      tmpvar_20.w = ((tmpvar_15 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_21;
      tmpvar_21 = abs(((
        fract((tmpvar_20 + 0.5))
       * 2.0) - 1.0));
      vOscillations_16 = (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0);
      highp float tmpvar_22;
      tmpvar_22 = (vOscillations_16.y * vOscillations_16.z);
      fTarget_19 = 1.0;
      fAmount_18 = tmpvar_22;
      if ((tmpvar_22 < 0.0)) {
        fTarget_19 = -1.0;
        fAmount_18 = -(tmpvar_22);
      };
      fOscillation_17 = (((
        (mix (mix (tmpvar_22, fTarget_19, fAmount_18), fTarget_19, fAmount_18) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_16.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_16.w * _ST_WindBranchWhip.x)));
      vPos_12 = (tmpvar_10 + ((tmpvar_14 * fOscillation_17) * _ST_WindBranch.y));
      highp vec4 tmpvar_23;
      tmpvar_23.zw = vec2(0.0, 0.0);
      tmpvar_23.x = ((tmpvar_15 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_23.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_24;
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_23 + 0.5))
       * 2.0) - 1.0));
      tmpvar_24 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      fAdherenceScale_13 = (1.0 - ((
        ((tmpvar_24.x * tmpvar_24.y) * tmpvar_24.x)
       * tmpvar_24.y) * _ST_WindTurbulences.x));
      fAdherenceScale_13 = (fAdherenceScale_13 + ((vOscillations_16.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_12 = (vPos_12 + ((
        ((vRotatedBranchAnchor_3 - vPos_12) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_13) * _glesMultiTexCoord0.z));
      vPos_11 = vPos_12;
    } else {
      highp vec3 vPos_26;
      vPos_26 = vPos_11;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (tmpvar_6.x + tmpvar_6.y));
      highp vec4 vOscillations_29;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.w = 0.0;
      tmpvar_32.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      vPos_26 = (vPos_11 + ((tmpvar_27 * 
        (((mix (
          mix (tmpvar_34, fTarget_31, fAmount_30)
        , fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_11 = vPos_26;
    };
    FinalPosition_5 = vPos_11;
  };
  if ((tmpvar_7 > 0.0)) {
    highp vec3 vPos_35;
    vPos_35 = FinalPosition_5;
    highp float fAdjust_36;
    highp float fLength_37;
    fLength_37 = sqrt(dot (FinalPosition_5, FinalPosition_5));
    highp float tmpvar_38;
    tmpvar_38 = (max ((FinalPosition_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_36 = tmpvar_38;
    if ((tmpvar_38 != 0.0)) {
      fAdjust_36 = pow (tmpvar_38, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_39;
    tmpvar_39.zw = vec2(0.0, 0.0);
    tmpvar_39.x = (tmpvar_6.x + _ST_WindGlobal.x);
    tmpvar_39.y = (tmpvar_6.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_40;
    highp vec4 tmpvar_41;
    tmpvar_41 = abs(((
      fract((tmpvar_39 + 0.5))
     * 2.0) - 1.0));
    tmpvar_40 = (((
      (tmpvar_41 * tmpvar_41)
     * 
      (3.0 - (2.0 * tmpvar_41))
    ) - 0.5) * 2.0);
    vPos_35.xz = (FinalPosition_5.xz + (vRotatedWindVector_4.xz * (
      ((_ST_WindGlobal.y * (tmpvar_40.x + (tmpvar_40.y * tmpvar_40.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_36)));
    vPos_35 = (normalize(vPos_35) * fLength_37);
    FinalPosition_5 = vPos_35;
  };
  tmpvar_2.xyz = FinalPosition_5;
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_2).xyz - _LightPositionRange.xyz);
  gl_Position = (glstate_matrix_mvp * tmpvar_2);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _LightPositionRange;
in highp vec3 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = vec4((sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w));
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_3;
  highp vec3 vRotatedWindVector_4;
  highp vec3 FinalPosition_5;
  FinalPosition_5 = tmpvar_1.xyz;
  highp vec3 tmpvar_6;
  tmpvar_6.x = _Object2World[3].x;
  tmpvar_6.y = _Object2World[3].y;
  tmpvar_6.z = _Object2World[3].z;
  mediump float tmpvar_7;
  tmpvar_7 = (_WindQuality * _WindEnabled);
  if ((tmpvar_7 > 0.0)) {
    highp mat3 tmpvar_8;
    tmpvar_8[0] = _World2Object[0].xyz;
    tmpvar_8[1] = _World2Object[1].xyz;
    tmpvar_8[2] = _World2Object[2].xyz;
    vRotatedWindVector_4 = normalize((tmpvar_8 * _ST_WindVector.xyz));
    highp mat3 tmpvar_9;
    tmpvar_9[0] = _World2Object[0].xyz;
    tmpvar_9[1] = _World2Object[1].xyz;
    tmpvar_9[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_3 = (normalize((tmpvar_9 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_4 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_3 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_5 = tmpvar_10;
  if ((tmpvar_7 >= 3.0)) {
    highp vec3 vPos_11;
    vPos_11 = tmpvar_10;
    if ((tmpvar_7 == 5.0)) {
      highp vec3 vPos_12;
      vPos_12 = tmpvar_10;
      highp float fAdherenceScale_13;
      highp vec3 tmpvar_14;
      tmpvar_14 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_15;
      tmpvar_15 = (_ST_WindBranch.x + (tmpvar_6.x + tmpvar_6.y));
      highp vec4 vOscillations_16;
      highp float fOscillation_17;
      fOscillation_17 = 1.0;
      highp float fAmount_18;
      highp float fTarget_19;
      highp vec4 tmpvar_20;
      tmpvar_20.x = (tmpvar_15 + _glesMultiTexCoord0.w);
      tmpvar_20.y = ((tmpvar_15 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_20.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_15 + _glesMultiTexCoord0.w));
      tmpvar_20.w = ((tmpvar_15 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_21;
      tmpvar_21 = abs(((
        fract((tmpvar_20 + 0.5))
       * 2.0) - 1.0));
      vOscillations_16 = (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0);
      highp float tmpvar_22;
      tmpvar_22 = (vOscillations_16.y * vOscillations_16.z);
      fTarget_19 = 1.0;
      fAmount_18 = tmpvar_22;
      if ((tmpvar_22 < 0.0)) {
        fTarget_19 = -1.0;
        fAmount_18 = -(tmpvar_22);
      };
      fOscillation_17 = (((
        (mix (mix (tmpvar_22, fTarget_19, fAmount_18), fTarget_19, fAmount_18) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_16.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_16.w * _ST_WindBranchWhip.x)));
      vPos_12 = (tmpvar_10 + ((tmpvar_14 * fOscillation_17) * _ST_WindBranch.y));
      highp vec4 tmpvar_23;
      tmpvar_23.zw = vec2(0.0, 0.0);
      tmpvar_23.x = ((tmpvar_15 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_23.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_24;
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_23 + 0.5))
       * 2.0) - 1.0));
      tmpvar_24 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      fAdherenceScale_13 = (1.0 - ((
        ((tmpvar_24.x * tmpvar_24.y) * tmpvar_24.x)
       * tmpvar_24.y) * _ST_WindTurbulences.x));
      fAdherenceScale_13 = (fAdherenceScale_13 + ((vOscillations_16.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_12 = (vPos_12 + ((
        ((vRotatedBranchAnchor_3 - vPos_12) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_13) * _glesMultiTexCoord0.z));
      vPos_11 = vPos_12;
    } else {
      highp vec3 vPos_26;
      vPos_26 = vPos_11;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (tmpvar_6.x + tmpvar_6.y));
      highp vec4 vOscillations_29;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.w = 0.0;
      tmpvar_32.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      vPos_26 = (vPos_11 + ((tmpvar_27 * 
        (((mix (
          mix (tmpvar_34, fTarget_31, fAmount_30)
        , fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_11 = vPos_26;
    };
    FinalPosition_5 = vPos_11;
  };
  if ((tmpvar_7 > 0.0)) {
    highp vec3 vPos_35;
    vPos_35 = FinalPosition_5;
    highp float fAdjust_36;
    highp float fLength_37;
    fLength_37 = sqrt(dot (FinalPosition_5, FinalPosition_5));
    highp float tmpvar_38;
    tmpvar_38 = (max ((FinalPosition_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_36 = tmpvar_38;
    if ((tmpvar_38 != 0.0)) {
      fAdjust_36 = pow (tmpvar_38, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_39;
    tmpvar_39.zw = vec2(0.0, 0.0);
    tmpvar_39.x = (tmpvar_6.x + _ST_WindGlobal.x);
    tmpvar_39.y = (tmpvar_6.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_40;
    highp vec4 tmpvar_41;
    tmpvar_41 = abs(((
      fract((tmpvar_39 + 0.5))
     * 2.0) - 1.0));
    tmpvar_40 = (((
      (tmpvar_41 * tmpvar_41)
     * 
      (3.0 - (2.0 * tmpvar_41))
    ) - 0.5) * 2.0);
    vPos_35.xz = (FinalPosition_5.xz + (vRotatedWindVector_4.xz * (
      ((_ST_WindGlobal.y * (tmpvar_40.x + (tmpvar_40.y * tmpvar_40.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_36)));
    vPos_35 = (normalize(vPos_35) * fLength_37);
    FinalPosition_5 = vPos_35;
  };
  tmpvar_2.xyz = FinalPosition_5;
  highp vec3 vertex_42;
  vertex_42 = tmpvar_2.xyz;
  highp vec4 clipPos_43;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp vec4 tmpvar_44;
    tmpvar_44.w = 1.0;
    tmpvar_44.xyz = vertex_42;
    highp vec3 tmpvar_45;
    tmpvar_45 = (_Object2World * tmpvar_44).xyz;
    highp vec4 v_46;
    v_46.x = _World2Object[0].x;
    v_46.y = _World2Object[1].x;
    v_46.z = _World2Object[2].x;
    v_46.w = _World2Object[3].x;
    highp vec4 v_47;
    v_47.x = _World2Object[0].y;
    v_47.y = _World2Object[1].y;
    v_47.z = _World2Object[2].y;
    v_47.w = _World2Object[3].y;
    highp vec4 v_48;
    v_48.x = _World2Object[0].z;
    v_48.y = _World2Object[1].z;
    v_48.z = _World2Object[2].z;
    v_48.w = _World2Object[3].z;
    highp vec3 tmpvar_49;
    tmpvar_49 = normalize(((
      (v_46.xyz * _glesNormal.x)
     + 
      (v_47.xyz * _glesNormal.y)
    ) + (v_48.xyz * _glesNormal.z)));
    highp float tmpvar_50;
    tmpvar_50 = dot (tmpvar_49, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_45 * _WorldSpaceLightPos0.w)
    )));
    highp vec4 tmpvar_51;
    tmpvar_51.w = 1.0;
    tmpvar_51.xyz = (tmpvar_45 - (tmpvar_49 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_50 * tmpvar_50)))
    )));
    clipPos_43 = (unity_MatrixVP * tmpvar_51);
  } else {
    highp vec4 tmpvar_52;
    tmpvar_52.w = 1.0;
    tmpvar_52.xyz = vertex_42;
    clipPos_43 = (glstate_matrix_mvp * tmpvar_52);
  };
  highp vec4 clipPos_53;
  clipPos_53.xyw = clipPos_43.xyw;
  clipPos_53.z = (clipPos_43.z + clamp ((unity_LightShadowBias.x / clipPos_43.w), 0.0, 1.0));
  clipPos_53.z = mix (clipPos_53.z, max (clipPos_53.z, -(clipPos_43.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_53;
}



#endif
#ifdef FRAGMENT

void main ()
{
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_3;
  highp vec3 vRotatedWindVector_4;
  highp vec3 FinalPosition_5;
  FinalPosition_5 = tmpvar_1.xyz;
  highp vec3 tmpvar_6;
  tmpvar_6.x = _Object2World[3].x;
  tmpvar_6.y = _Object2World[3].y;
  tmpvar_6.z = _Object2World[3].z;
  mediump float tmpvar_7;
  tmpvar_7 = (_WindQuality * _WindEnabled);
  if ((tmpvar_7 > 0.0)) {
    highp mat3 tmpvar_8;
    tmpvar_8[0] = _World2Object[0].xyz;
    tmpvar_8[1] = _World2Object[1].xyz;
    tmpvar_8[2] = _World2Object[2].xyz;
    vRotatedWindVector_4 = normalize((tmpvar_8 * _ST_WindVector.xyz));
    highp mat3 tmpvar_9;
    tmpvar_9[0] = _World2Object[0].xyz;
    tmpvar_9[1] = _World2Object[1].xyz;
    tmpvar_9[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_3 = (normalize((tmpvar_9 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_4 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_3 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_5 = tmpvar_10;
  if ((tmpvar_7 >= 3.0)) {
    highp vec3 vPos_11;
    vPos_11 = tmpvar_10;
    if ((tmpvar_7 == 5.0)) {
      highp vec3 vPos_12;
      vPos_12 = tmpvar_10;
      highp float fAdherenceScale_13;
      highp vec3 tmpvar_14;
      tmpvar_14 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_15;
      tmpvar_15 = (_ST_WindBranch.x + (tmpvar_6.x + tmpvar_6.y));
      highp vec4 vOscillations_16;
      highp float fOscillation_17;
      fOscillation_17 = 1.0;
      highp float fAmount_18;
      highp float fTarget_19;
      highp vec4 tmpvar_20;
      tmpvar_20.x = (tmpvar_15 + _glesMultiTexCoord0.w);
      tmpvar_20.y = ((tmpvar_15 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_20.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_15 + _glesMultiTexCoord0.w));
      tmpvar_20.w = ((tmpvar_15 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_21;
      tmpvar_21 = abs(((
        fract((tmpvar_20 + 0.5))
       * 2.0) - 1.0));
      vOscillations_16 = (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0);
      highp float tmpvar_22;
      tmpvar_22 = (vOscillations_16.y * vOscillations_16.z);
      fTarget_19 = 1.0;
      fAmount_18 = tmpvar_22;
      if ((tmpvar_22 < 0.0)) {
        fTarget_19 = -1.0;
        fAmount_18 = -(tmpvar_22);
      };
      fOscillation_17 = (((
        (mix (mix (tmpvar_22, fTarget_19, fAmount_18), fTarget_19, fAmount_18) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_16.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_16.w * _ST_WindBranchWhip.x)));
      vPos_12 = (tmpvar_10 + ((tmpvar_14 * fOscillation_17) * _ST_WindBranch.y));
      highp vec4 tmpvar_23;
      tmpvar_23.zw = vec2(0.0, 0.0);
      tmpvar_23.x = ((tmpvar_15 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_23.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_24;
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_23 + 0.5))
       * 2.0) - 1.0));
      tmpvar_24 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      fAdherenceScale_13 = (1.0 - ((
        ((tmpvar_24.x * tmpvar_24.y) * tmpvar_24.x)
       * tmpvar_24.y) * _ST_WindTurbulences.x));
      fAdherenceScale_13 = (fAdherenceScale_13 + ((vOscillations_16.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_12 = (vPos_12 + ((
        ((vRotatedBranchAnchor_3 - vPos_12) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_13) * _glesMultiTexCoord0.z));
      vPos_11 = vPos_12;
    } else {
      highp vec3 vPos_26;
      vPos_26 = vPos_11;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (tmpvar_6.x + tmpvar_6.y));
      highp vec4 vOscillations_29;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.w = 0.0;
      tmpvar_32.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      vPos_26 = (vPos_11 + ((tmpvar_27 * 
        (((mix (
          mix (tmpvar_34, fTarget_31, fAmount_30)
        , fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_11 = vPos_26;
    };
    FinalPosition_5 = vPos_11;
  };
  if ((tmpvar_7 > 0.0)) {
    highp vec3 vPos_35;
    vPos_35 = FinalPosition_5;
    highp float fAdjust_36;
    highp float fLength_37;
    fLength_37 = sqrt(dot (FinalPosition_5, FinalPosition_5));
    highp float tmpvar_38;
    tmpvar_38 = (max ((FinalPosition_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_36 = tmpvar_38;
    if ((tmpvar_38 != 0.0)) {
      fAdjust_36 = pow (tmpvar_38, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_39;
    tmpvar_39.zw = vec2(0.0, 0.0);
    tmpvar_39.x = (tmpvar_6.x + _ST_WindGlobal.x);
    tmpvar_39.y = (tmpvar_6.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_40;
    highp vec4 tmpvar_41;
    tmpvar_41 = abs(((
      fract((tmpvar_39 + 0.5))
     * 2.0) - 1.0));
    tmpvar_40 = (((
      (tmpvar_41 * tmpvar_41)
     * 
      (3.0 - (2.0 * tmpvar_41))
    ) - 0.5) * 2.0);
    vPos_35.xz = (FinalPosition_5.xz + (vRotatedWindVector_4.xz * (
      ((_ST_WindGlobal.y * (tmpvar_40.x + (tmpvar_40.y * tmpvar_40.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_36)));
    vPos_35 = (normalize(vPos_35) * fLength_37);
    FinalPosition_5 = vPos_35;
  };
  tmpvar_2.xyz = FinalPosition_5;
  highp vec3 vertex_42;
  vertex_42 = tmpvar_2.xyz;
  highp vec4 clipPos_43;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp vec4 tmpvar_44;
    tmpvar_44.w = 1.0;
    tmpvar_44.xyz = vertex_42;
    highp vec3 tmpvar_45;
    tmpvar_45 = (_Object2World * tmpvar_44).xyz;
    highp vec4 v_46;
    v_46.x = _World2Object[0].x;
    v_46.y = _World2Object[1].x;
    v_46.z = _World2Object[2].x;
    v_46.w = _World2Object[3].x;
    highp vec4 v_47;
    v_47.x = _World2Object[0].y;
    v_47.y = _World2Object[1].y;
    v_47.z = _World2Object[2].y;
    v_47.w = _World2Object[3].y;
    highp vec4 v_48;
    v_48.x = _World2Object[0].z;
    v_48.y = _World2Object[1].z;
    v_48.z = _World2Object[2].z;
    v_48.w = _World2Object[3].z;
    highp vec3 tmpvar_49;
    tmpvar_49 = normalize(((
      (v_46.xyz * _glesNormal.x)
     + 
      (v_47.xyz * _glesNormal.y)
    ) + (v_48.xyz * _glesNormal.z)));
    highp float tmpvar_50;
    tmpvar_50 = dot (tmpvar_49, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_45 * _WorldSpaceLightPos0.w)
    )));
    highp vec4 tmpvar_51;
    tmpvar_51.w = 1.0;
    tmpvar_51.xyz = (tmpvar_45 - (tmpvar_49 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_50 * tmpvar_50)))
    )));
    clipPos_43 = (unity_MatrixVP * tmpvar_51);
  } else {
    highp vec4 tmpvar_52;
    tmpvar_52.w = 1.0;
    tmpvar_52.xyz = vertex_42;
    clipPos_43 = (glstate_matrix_mvp * tmpvar_52);
  };
  highp vec4 clipPos_53;
  clipPos_53.xyw = clipPos_43.xyw;
  clipPos_53.z = (clipPos_43.z + clamp ((unity_LightShadowBias.x / clipPos_43.w), 0.0, 1.0));
  clipPos_53.z = mix (clipPos_53.z, max (clipPos_53.z, -(clipPos_43.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_53;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
void main ()
{
  _glesFragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}



#endif"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
varying highp vec3 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_3;
  highp vec3 vRotatedWindVector_4;
  highp vec3 FinalPosition_5;
  FinalPosition_5 = tmpvar_1.xyz;
  highp vec3 tmpvar_6;
  tmpvar_6.x = _Object2World[3].x;
  tmpvar_6.y = _Object2World[3].y;
  tmpvar_6.z = _Object2World[3].z;
  mediump float tmpvar_7;
  tmpvar_7 = (_WindQuality * _WindEnabled);
  if ((tmpvar_7 > 0.0)) {
    highp mat3 tmpvar_8;
    tmpvar_8[0] = _World2Object[0].xyz;
    tmpvar_8[1] = _World2Object[1].xyz;
    tmpvar_8[2] = _World2Object[2].xyz;
    vRotatedWindVector_4 = normalize((tmpvar_8 * _ST_WindVector.xyz));
    highp mat3 tmpvar_9;
    tmpvar_9[0] = _World2Object[0].xyz;
    tmpvar_9[1] = _World2Object[1].xyz;
    tmpvar_9[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_3 = (normalize((tmpvar_9 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_4 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_3 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_5 = tmpvar_10;
  if ((tmpvar_7 >= 3.0)) {
    highp vec3 vPos_11;
    vPos_11 = tmpvar_10;
    if ((tmpvar_7 == 5.0)) {
      highp vec3 vPos_12;
      vPos_12 = tmpvar_10;
      highp float fAdherenceScale_13;
      highp vec3 tmpvar_14;
      tmpvar_14 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_15;
      tmpvar_15 = (_ST_WindBranch.x + (tmpvar_6.x + tmpvar_6.y));
      highp vec4 vOscillations_16;
      highp float fOscillation_17;
      fOscillation_17 = 1.0;
      highp float fAmount_18;
      highp float fTarget_19;
      highp vec4 tmpvar_20;
      tmpvar_20.x = (tmpvar_15 + _glesMultiTexCoord0.w);
      tmpvar_20.y = ((tmpvar_15 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_20.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_15 + _glesMultiTexCoord0.w));
      tmpvar_20.w = ((tmpvar_15 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_21;
      tmpvar_21 = abs(((
        fract((tmpvar_20 + 0.5))
       * 2.0) - 1.0));
      vOscillations_16 = (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0);
      highp float tmpvar_22;
      tmpvar_22 = (vOscillations_16.y * vOscillations_16.z);
      fTarget_19 = 1.0;
      fAmount_18 = tmpvar_22;
      if ((tmpvar_22 < 0.0)) {
        fTarget_19 = -1.0;
        fAmount_18 = -(tmpvar_22);
      };
      fOscillation_17 = (((
        (mix (mix (tmpvar_22, fTarget_19, fAmount_18), fTarget_19, fAmount_18) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_16.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_16.w * _ST_WindBranchWhip.x)));
      vPos_12 = (tmpvar_10 + ((tmpvar_14 * fOscillation_17) * _ST_WindBranch.y));
      highp vec4 tmpvar_23;
      tmpvar_23.zw = vec2(0.0, 0.0);
      tmpvar_23.x = ((tmpvar_15 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_23.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_24;
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_23 + 0.5))
       * 2.0) - 1.0));
      tmpvar_24 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      fAdherenceScale_13 = (1.0 - ((
        ((tmpvar_24.x * tmpvar_24.y) * tmpvar_24.x)
       * tmpvar_24.y) * _ST_WindTurbulences.x));
      fAdherenceScale_13 = (fAdherenceScale_13 + ((vOscillations_16.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_12 = (vPos_12 + ((
        ((vRotatedBranchAnchor_3 - vPos_12) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_13) * _glesMultiTexCoord0.z));
      vPos_11 = vPos_12;
    } else {
      highp vec3 vPos_26;
      vPos_26 = vPos_11;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (tmpvar_6.x + tmpvar_6.y));
      highp vec4 vOscillations_29;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.w = 0.0;
      tmpvar_32.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      vPos_26 = (vPos_11 + ((tmpvar_27 * 
        (((mix (
          mix (tmpvar_34, fTarget_31, fAmount_30)
        , fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_11 = vPos_26;
    };
    FinalPosition_5 = vPos_11;
  };
  if ((tmpvar_7 > 0.0)) {
    highp vec3 vPos_35;
    vPos_35 = FinalPosition_5;
    highp float fAdjust_36;
    highp float fLength_37;
    fLength_37 = sqrt(dot (FinalPosition_5, FinalPosition_5));
    highp float tmpvar_38;
    tmpvar_38 = (max ((FinalPosition_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_36 = tmpvar_38;
    if ((tmpvar_38 != 0.0)) {
      fAdjust_36 = pow (tmpvar_38, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_39;
    tmpvar_39.zw = vec2(0.0, 0.0);
    tmpvar_39.x = (tmpvar_6.x + _ST_WindGlobal.x);
    tmpvar_39.y = (tmpvar_6.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_40;
    highp vec4 tmpvar_41;
    tmpvar_41 = abs(((
      fract((tmpvar_39 + 0.5))
     * 2.0) - 1.0));
    tmpvar_40 = (((
      (tmpvar_41 * tmpvar_41)
     * 
      (3.0 - (2.0 * tmpvar_41))
    ) - 0.5) * 2.0);
    vPos_35.xz = (FinalPosition_5.xz + (vRotatedWindVector_4.xz * (
      ((_ST_WindGlobal.y * (tmpvar_40.x + (tmpvar_40.y * tmpvar_40.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_36)));
    vPos_35 = (normalize(vPos_35) * fLength_37);
    FinalPosition_5 = vPos_35;
  };
  tmpvar_2.xyz = FinalPosition_5;
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_2).xyz - _LightPositionRange.xyz);
  gl_Position = (glstate_matrix_mvp * tmpvar_2);
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _LightPositionRange;
varying highp vec3 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = fract((vec4(1.0, 255.0, 65025.0, 1.658138e+07) * min (
    (sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w)
  , 0.999)));
  highp vec4 tmpvar_2;
  tmpvar_2 = (tmpvar_1 - (tmpvar_1.yzww * 0.003921569));
  gl_FragData[0] = tmpvar_2;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
out highp vec3 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_3;
  highp vec3 vRotatedWindVector_4;
  highp vec3 FinalPosition_5;
  FinalPosition_5 = tmpvar_1.xyz;
  highp vec3 tmpvar_6;
  tmpvar_6.x = _Object2World[3].x;
  tmpvar_6.y = _Object2World[3].y;
  tmpvar_6.z = _Object2World[3].z;
  mediump float tmpvar_7;
  tmpvar_7 = (_WindQuality * _WindEnabled);
  if ((tmpvar_7 > 0.0)) {
    highp mat3 tmpvar_8;
    tmpvar_8[0] = _World2Object[0].xyz;
    tmpvar_8[1] = _World2Object[1].xyz;
    tmpvar_8[2] = _World2Object[2].xyz;
    vRotatedWindVector_4 = normalize((tmpvar_8 * _ST_WindVector.xyz));
    highp mat3 tmpvar_9;
    tmpvar_9[0] = _World2Object[0].xyz;
    tmpvar_9[1] = _World2Object[1].xyz;
    tmpvar_9[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_3 = (normalize((tmpvar_9 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_4 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_3 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_5 = tmpvar_10;
  if ((tmpvar_7 >= 3.0)) {
    highp vec3 vPos_11;
    vPos_11 = tmpvar_10;
    if ((tmpvar_7 == 5.0)) {
      highp vec3 vPos_12;
      vPos_12 = tmpvar_10;
      highp float fAdherenceScale_13;
      highp vec3 tmpvar_14;
      tmpvar_14 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_15;
      tmpvar_15 = (_ST_WindBranch.x + (tmpvar_6.x + tmpvar_6.y));
      highp vec4 vOscillations_16;
      highp float fOscillation_17;
      fOscillation_17 = 1.0;
      highp float fAmount_18;
      highp float fTarget_19;
      highp vec4 tmpvar_20;
      tmpvar_20.x = (tmpvar_15 + _glesMultiTexCoord0.w);
      tmpvar_20.y = ((tmpvar_15 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_20.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_15 + _glesMultiTexCoord0.w));
      tmpvar_20.w = ((tmpvar_15 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_21;
      tmpvar_21 = abs(((
        fract((tmpvar_20 + 0.5))
       * 2.0) - 1.0));
      vOscillations_16 = (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0);
      highp float tmpvar_22;
      tmpvar_22 = (vOscillations_16.y * vOscillations_16.z);
      fTarget_19 = 1.0;
      fAmount_18 = tmpvar_22;
      if ((tmpvar_22 < 0.0)) {
        fTarget_19 = -1.0;
        fAmount_18 = -(tmpvar_22);
      };
      fOscillation_17 = (((
        (mix (mix (tmpvar_22, fTarget_19, fAmount_18), fTarget_19, fAmount_18) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_16.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_16.w * _ST_WindBranchWhip.x)));
      vPos_12 = (tmpvar_10 + ((tmpvar_14 * fOscillation_17) * _ST_WindBranch.y));
      highp vec4 tmpvar_23;
      tmpvar_23.zw = vec2(0.0, 0.0);
      tmpvar_23.x = ((tmpvar_15 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_23.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_24;
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_23 + 0.5))
       * 2.0) - 1.0));
      tmpvar_24 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      fAdherenceScale_13 = (1.0 - ((
        ((tmpvar_24.x * tmpvar_24.y) * tmpvar_24.x)
       * tmpvar_24.y) * _ST_WindTurbulences.x));
      fAdherenceScale_13 = (fAdherenceScale_13 + ((vOscillations_16.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_12 = (vPos_12 + ((
        ((vRotatedBranchAnchor_3 - vPos_12) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_13) * _glesMultiTexCoord0.z));
      vPos_11 = vPos_12;
    } else {
      highp vec3 vPos_26;
      vPos_26 = vPos_11;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (tmpvar_6.x + tmpvar_6.y));
      highp vec4 vOscillations_29;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.w = 0.0;
      tmpvar_32.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      vPos_26 = (vPos_11 + ((tmpvar_27 * 
        (((mix (
          mix (tmpvar_34, fTarget_31, fAmount_30)
        , fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_11 = vPos_26;
    };
    FinalPosition_5 = vPos_11;
  };
  if ((tmpvar_7 > 0.0)) {
    highp vec3 vPos_35;
    vPos_35 = FinalPosition_5;
    highp float fAdjust_36;
    highp float fLength_37;
    fLength_37 = sqrt(dot (FinalPosition_5, FinalPosition_5));
    highp float tmpvar_38;
    tmpvar_38 = (max ((FinalPosition_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_36 = tmpvar_38;
    if ((tmpvar_38 != 0.0)) {
      fAdjust_36 = pow (tmpvar_38, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_39;
    tmpvar_39.zw = vec2(0.0, 0.0);
    tmpvar_39.x = (tmpvar_6.x + _ST_WindGlobal.x);
    tmpvar_39.y = (tmpvar_6.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_40;
    highp vec4 tmpvar_41;
    tmpvar_41 = abs(((
      fract((tmpvar_39 + 0.5))
     * 2.0) - 1.0));
    tmpvar_40 = (((
      (tmpvar_41 * tmpvar_41)
     * 
      (3.0 - (2.0 * tmpvar_41))
    ) - 0.5) * 2.0);
    vPos_35.xz = (FinalPosition_5.xz + (vRotatedWindVector_4.xz * (
      ((_ST_WindGlobal.y * (tmpvar_40.x + (tmpvar_40.y * tmpvar_40.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_36)));
    vPos_35 = (normalize(vPos_35) * fLength_37);
    FinalPosition_5 = vPos_35;
  };
  tmpvar_2.xyz = FinalPosition_5;
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_2).xyz - _LightPositionRange.xyz);
  gl_Position = (glstate_matrix_mvp * tmpvar_2);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _LightPositionRange;
in highp vec3 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = vec4((sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w));
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_3;
  highp vec3 vRotatedWindVector_4;
  highp vec3 FinalPosition_5;
  FinalPosition_5 = tmpvar_1.xyz;
  highp vec3 tmpvar_6;
  tmpvar_6.x = _Object2World[3].x;
  tmpvar_6.y = _Object2World[3].y;
  tmpvar_6.z = _Object2World[3].z;
  mediump float tmpvar_7;
  tmpvar_7 = (_WindQuality * _WindEnabled);
  if ((tmpvar_7 > 0.0)) {
    highp mat3 tmpvar_8;
    tmpvar_8[0] = _World2Object[0].xyz;
    tmpvar_8[1] = _World2Object[1].xyz;
    tmpvar_8[2] = _World2Object[2].xyz;
    vRotatedWindVector_4 = normalize((tmpvar_8 * _ST_WindVector.xyz));
    highp mat3 tmpvar_9;
    tmpvar_9[0] = _World2Object[0].xyz;
    tmpvar_9[1] = _World2Object[1].xyz;
    tmpvar_9[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_3 = (normalize((tmpvar_9 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_4 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_3 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_5 = tmpvar_10;
  if ((tmpvar_7 >= 3.0)) {
    highp vec3 vPos_11;
    vPos_11 = tmpvar_10;
    if ((tmpvar_7 == 5.0)) {
      highp vec3 vPos_12;
      vPos_12 = tmpvar_10;
      highp float fAdherenceScale_13;
      highp vec3 tmpvar_14;
      tmpvar_14 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_15;
      tmpvar_15 = (_ST_WindBranch.x + (tmpvar_6.x + tmpvar_6.y));
      highp vec4 vOscillations_16;
      highp float fOscillation_17;
      fOscillation_17 = 1.0;
      highp float fAmount_18;
      highp float fTarget_19;
      highp vec4 tmpvar_20;
      tmpvar_20.x = (tmpvar_15 + _glesMultiTexCoord0.w);
      tmpvar_20.y = ((tmpvar_15 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_20.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_15 + _glesMultiTexCoord0.w));
      tmpvar_20.w = ((tmpvar_15 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_21;
      tmpvar_21 = abs(((
        fract((tmpvar_20 + 0.5))
       * 2.0) - 1.0));
      vOscillations_16 = (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0);
      highp float tmpvar_22;
      tmpvar_22 = (vOscillations_16.y * vOscillations_16.z);
      fTarget_19 = 1.0;
      fAmount_18 = tmpvar_22;
      if ((tmpvar_22 < 0.0)) {
        fTarget_19 = -1.0;
        fAmount_18 = -(tmpvar_22);
      };
      fOscillation_17 = (((
        (mix (mix (tmpvar_22, fTarget_19, fAmount_18), fTarget_19, fAmount_18) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_16.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_16.w * _ST_WindBranchWhip.x)));
      vPos_12 = (tmpvar_10 + ((tmpvar_14 * fOscillation_17) * _ST_WindBranch.y));
      highp vec4 tmpvar_23;
      tmpvar_23.zw = vec2(0.0, 0.0);
      tmpvar_23.x = ((tmpvar_15 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_23.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_24;
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_23 + 0.5))
       * 2.0) - 1.0));
      tmpvar_24 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      fAdherenceScale_13 = (1.0 - ((
        ((tmpvar_24.x * tmpvar_24.y) * tmpvar_24.x)
       * tmpvar_24.y) * _ST_WindTurbulences.x));
      fAdherenceScale_13 = (fAdherenceScale_13 + ((vOscillations_16.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_12 = (vPos_12 + ((
        ((vRotatedBranchAnchor_3 - vPos_12) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_13) * _glesMultiTexCoord0.z));
      vPos_11 = vPos_12;
    } else {
      highp vec3 vPos_26;
      vPos_26 = vPos_11;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (tmpvar_6.x + tmpvar_6.y));
      highp vec4 vOscillations_29;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.w = 0.0;
      tmpvar_32.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      vPos_26 = (vPos_11 + ((tmpvar_27 * 
        (((mix (
          mix (tmpvar_34, fTarget_31, fAmount_30)
        , fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_11 = vPos_26;
    };
    FinalPosition_5 = vPos_11;
  };
  if ((tmpvar_7 > 0.0)) {
    highp vec3 vPos_35;
    vPos_35 = FinalPosition_5;
    highp float fAdjust_36;
    highp float fLength_37;
    fLength_37 = sqrt(dot (FinalPosition_5, FinalPosition_5));
    highp float tmpvar_38;
    tmpvar_38 = (max ((FinalPosition_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_36 = tmpvar_38;
    if ((tmpvar_38 != 0.0)) {
      fAdjust_36 = pow (tmpvar_38, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_39;
    tmpvar_39.zw = vec2(0.0, 0.0);
    tmpvar_39.x = (tmpvar_6.x + _ST_WindGlobal.x);
    tmpvar_39.y = (tmpvar_6.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_40;
    highp vec4 tmpvar_41;
    tmpvar_41 = abs(((
      fract((tmpvar_39 + 0.5))
     * 2.0) - 1.0));
    tmpvar_40 = (((
      (tmpvar_41 * tmpvar_41)
     * 
      (3.0 - (2.0 * tmpvar_41))
    ) - 0.5) * 2.0);
    vPos_35.xz = (FinalPosition_5.xz + (vRotatedWindVector_4.xz * (
      ((_ST_WindGlobal.y * (tmpvar_40.x + (tmpvar_40.y * tmpvar_40.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_36)));
    vPos_35 = (normalize(vPos_35) * fLength_37);
    FinalPosition_5 = vPos_35;
  };
  tmpvar_2.xyz = FinalPosition_5;
  highp vec3 vertex_42;
  vertex_42 = tmpvar_2.xyz;
  highp vec4 clipPos_43;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp vec4 tmpvar_44;
    tmpvar_44.w = 1.0;
    tmpvar_44.xyz = vertex_42;
    highp vec3 tmpvar_45;
    tmpvar_45 = (_Object2World * tmpvar_44).xyz;
    highp vec4 v_46;
    v_46.x = _World2Object[0].x;
    v_46.y = _World2Object[1].x;
    v_46.z = _World2Object[2].x;
    v_46.w = _World2Object[3].x;
    highp vec4 v_47;
    v_47.x = _World2Object[0].y;
    v_47.y = _World2Object[1].y;
    v_47.z = _World2Object[2].y;
    v_47.w = _World2Object[3].y;
    highp vec4 v_48;
    v_48.x = _World2Object[0].z;
    v_48.y = _World2Object[1].z;
    v_48.z = _World2Object[2].z;
    v_48.w = _World2Object[3].z;
    highp vec3 tmpvar_49;
    tmpvar_49 = normalize(((
      (v_46.xyz * _glesNormal.x)
     + 
      (v_47.xyz * _glesNormal.y)
    ) + (v_48.xyz * _glesNormal.z)));
    highp float tmpvar_50;
    tmpvar_50 = dot (tmpvar_49, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_45 * _WorldSpaceLightPos0.w)
    )));
    highp vec4 tmpvar_51;
    tmpvar_51.w = 1.0;
    tmpvar_51.xyz = (tmpvar_45 - (tmpvar_49 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_50 * tmpvar_50)))
    )));
    clipPos_43 = (unity_MatrixVP * tmpvar_51);
  } else {
    highp vec4 tmpvar_52;
    tmpvar_52.w = 1.0;
    tmpvar_52.xyz = vertex_42;
    clipPos_43 = (glstate_matrix_mvp * tmpvar_52);
  };
  highp vec4 clipPos_53;
  clipPos_53.xyw = clipPos_43.xyw;
  clipPos_53.z = (clipPos_43.z + clamp ((unity_LightShadowBias.x / clipPos_43.w), 0.0, 1.0));
  clipPos_53.z = mix (clipPos_53.z, max (clipPos_53.z, -(clipPos_43.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_53;
}



#endif
#ifdef FRAGMENT

void main ()
{
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_3;
  highp vec3 vRotatedWindVector_4;
  highp vec3 FinalPosition_5;
  FinalPosition_5 = tmpvar_1.xyz;
  highp vec3 tmpvar_6;
  tmpvar_6.x = _Object2World[3].x;
  tmpvar_6.y = _Object2World[3].y;
  tmpvar_6.z = _Object2World[3].z;
  mediump float tmpvar_7;
  tmpvar_7 = (_WindQuality * _WindEnabled);
  if ((tmpvar_7 > 0.0)) {
    highp mat3 tmpvar_8;
    tmpvar_8[0] = _World2Object[0].xyz;
    tmpvar_8[1] = _World2Object[1].xyz;
    tmpvar_8[2] = _World2Object[2].xyz;
    vRotatedWindVector_4 = normalize((tmpvar_8 * _ST_WindVector.xyz));
    highp mat3 tmpvar_9;
    tmpvar_9[0] = _World2Object[0].xyz;
    tmpvar_9[1] = _World2Object[1].xyz;
    tmpvar_9[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_3 = (normalize((tmpvar_9 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_4 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_3 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_5 = tmpvar_10;
  if ((tmpvar_7 >= 3.0)) {
    highp vec3 vPos_11;
    vPos_11 = tmpvar_10;
    if ((tmpvar_7 == 5.0)) {
      highp vec3 vPos_12;
      vPos_12 = tmpvar_10;
      highp float fAdherenceScale_13;
      highp vec3 tmpvar_14;
      tmpvar_14 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_15;
      tmpvar_15 = (_ST_WindBranch.x + (tmpvar_6.x + tmpvar_6.y));
      highp vec4 vOscillations_16;
      highp float fOscillation_17;
      fOscillation_17 = 1.0;
      highp float fAmount_18;
      highp float fTarget_19;
      highp vec4 tmpvar_20;
      tmpvar_20.x = (tmpvar_15 + _glesMultiTexCoord0.w);
      tmpvar_20.y = ((tmpvar_15 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_20.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_15 + _glesMultiTexCoord0.w));
      tmpvar_20.w = ((tmpvar_15 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_21;
      tmpvar_21 = abs(((
        fract((tmpvar_20 + 0.5))
       * 2.0) - 1.0));
      vOscillations_16 = (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0);
      highp float tmpvar_22;
      tmpvar_22 = (vOscillations_16.y * vOscillations_16.z);
      fTarget_19 = 1.0;
      fAmount_18 = tmpvar_22;
      if ((tmpvar_22 < 0.0)) {
        fTarget_19 = -1.0;
        fAmount_18 = -(tmpvar_22);
      };
      fOscillation_17 = (((
        (mix (mix (tmpvar_22, fTarget_19, fAmount_18), fTarget_19, fAmount_18) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_16.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_16.w * _ST_WindBranchWhip.x)));
      vPos_12 = (tmpvar_10 + ((tmpvar_14 * fOscillation_17) * _ST_WindBranch.y));
      highp vec4 tmpvar_23;
      tmpvar_23.zw = vec2(0.0, 0.0);
      tmpvar_23.x = ((tmpvar_15 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_23.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_24;
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_23 + 0.5))
       * 2.0) - 1.0));
      tmpvar_24 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      fAdherenceScale_13 = (1.0 - ((
        ((tmpvar_24.x * tmpvar_24.y) * tmpvar_24.x)
       * tmpvar_24.y) * _ST_WindTurbulences.x));
      fAdherenceScale_13 = (fAdherenceScale_13 + ((vOscillations_16.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_12 = (vPos_12 + ((
        ((vRotatedBranchAnchor_3 - vPos_12) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_13) * _glesMultiTexCoord0.z));
      vPos_11 = vPos_12;
    } else {
      highp vec3 vPos_26;
      vPos_26 = vPos_11;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (tmpvar_6.x + tmpvar_6.y));
      highp vec4 vOscillations_29;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.w = 0.0;
      tmpvar_32.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      vPos_26 = (vPos_11 + ((tmpvar_27 * 
        (((mix (
          mix (tmpvar_34, fTarget_31, fAmount_30)
        , fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_11 = vPos_26;
    };
    FinalPosition_5 = vPos_11;
  };
  if ((tmpvar_7 > 0.0)) {
    highp vec3 vPos_35;
    vPos_35 = FinalPosition_5;
    highp float fAdjust_36;
    highp float fLength_37;
    fLength_37 = sqrt(dot (FinalPosition_5, FinalPosition_5));
    highp float tmpvar_38;
    tmpvar_38 = (max ((FinalPosition_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_36 = tmpvar_38;
    if ((tmpvar_38 != 0.0)) {
      fAdjust_36 = pow (tmpvar_38, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_39;
    tmpvar_39.zw = vec2(0.0, 0.0);
    tmpvar_39.x = (tmpvar_6.x + _ST_WindGlobal.x);
    tmpvar_39.y = (tmpvar_6.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_40;
    highp vec4 tmpvar_41;
    tmpvar_41 = abs(((
      fract((tmpvar_39 + 0.5))
     * 2.0) - 1.0));
    tmpvar_40 = (((
      (tmpvar_41 * tmpvar_41)
     * 
      (3.0 - (2.0 * tmpvar_41))
    ) - 0.5) * 2.0);
    vPos_35.xz = (FinalPosition_5.xz + (vRotatedWindVector_4.xz * (
      ((_ST_WindGlobal.y * (tmpvar_40.x + (tmpvar_40.y * tmpvar_40.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_36)));
    vPos_35 = (normalize(vPos_35) * fLength_37);
    FinalPosition_5 = vPos_35;
  };
  tmpvar_2.xyz = FinalPosition_5;
  highp vec3 vertex_42;
  vertex_42 = tmpvar_2.xyz;
  highp vec4 clipPos_43;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp vec4 tmpvar_44;
    tmpvar_44.w = 1.0;
    tmpvar_44.xyz = vertex_42;
    highp vec3 tmpvar_45;
    tmpvar_45 = (_Object2World * tmpvar_44).xyz;
    highp vec4 v_46;
    v_46.x = _World2Object[0].x;
    v_46.y = _World2Object[1].x;
    v_46.z = _World2Object[2].x;
    v_46.w = _World2Object[3].x;
    highp vec4 v_47;
    v_47.x = _World2Object[0].y;
    v_47.y = _World2Object[1].y;
    v_47.z = _World2Object[2].y;
    v_47.w = _World2Object[3].y;
    highp vec4 v_48;
    v_48.x = _World2Object[0].z;
    v_48.y = _World2Object[1].z;
    v_48.z = _World2Object[2].z;
    v_48.w = _World2Object[3].z;
    highp vec3 tmpvar_49;
    tmpvar_49 = normalize(((
      (v_46.xyz * _glesNormal.x)
     + 
      (v_47.xyz * _glesNormal.y)
    ) + (v_48.xyz * _glesNormal.z)));
    highp float tmpvar_50;
    tmpvar_50 = dot (tmpvar_49, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_45 * _WorldSpaceLightPos0.w)
    )));
    highp vec4 tmpvar_51;
    tmpvar_51.w = 1.0;
    tmpvar_51.xyz = (tmpvar_45 - (tmpvar_49 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_50 * tmpvar_50)))
    )));
    clipPos_43 = (unity_MatrixVP * tmpvar_51);
  } else {
    highp vec4 tmpvar_52;
    tmpvar_52.w = 1.0;
    tmpvar_52.xyz = vertex_42;
    clipPos_43 = (glstate_matrix_mvp * tmpvar_52);
  };
  highp vec4 clipPos_53;
  clipPos_53.xyw = clipPos_43.xyw;
  clipPos_53.z = (clipPos_43.z + clamp ((unity_LightShadowBias.x / clipPos_43.w), 0.0, 1.0));
  clipPos_53.z = mix (clipPos_53.z, max (clipPos_53.z, -(clipPos_43.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_53;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
void main ()
{
  _glesFragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}



#endif"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
varying highp vec3 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_3;
  highp vec3 vRotatedWindVector_4;
  highp vec3 FinalPosition_5;
  FinalPosition_5 = tmpvar_1.xyz;
  highp vec3 tmpvar_6;
  tmpvar_6.x = _Object2World[3].x;
  tmpvar_6.y = _Object2World[3].y;
  tmpvar_6.z = _Object2World[3].z;
  mediump float tmpvar_7;
  tmpvar_7 = (_WindQuality * _WindEnabled);
  if ((tmpvar_7 > 0.0)) {
    highp mat3 tmpvar_8;
    tmpvar_8[0] = _World2Object[0].xyz;
    tmpvar_8[1] = _World2Object[1].xyz;
    tmpvar_8[2] = _World2Object[2].xyz;
    vRotatedWindVector_4 = normalize((tmpvar_8 * _ST_WindVector.xyz));
    highp mat3 tmpvar_9;
    tmpvar_9[0] = _World2Object[0].xyz;
    tmpvar_9[1] = _World2Object[1].xyz;
    tmpvar_9[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_3 = (normalize((tmpvar_9 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_4 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_3 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_5 = tmpvar_10;
  if ((tmpvar_7 >= 3.0)) {
    highp vec3 vPos_11;
    vPos_11 = tmpvar_10;
    if ((tmpvar_7 == 5.0)) {
      highp vec3 vPos_12;
      vPos_12 = tmpvar_10;
      highp float fAdherenceScale_13;
      highp vec3 tmpvar_14;
      tmpvar_14 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_15;
      tmpvar_15 = (_ST_WindBranch.x + (tmpvar_6.x + tmpvar_6.y));
      highp vec4 vOscillations_16;
      highp float fOscillation_17;
      fOscillation_17 = 1.0;
      highp float fAmount_18;
      highp float fTarget_19;
      highp vec4 tmpvar_20;
      tmpvar_20.x = (tmpvar_15 + _glesMultiTexCoord0.w);
      tmpvar_20.y = ((tmpvar_15 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_20.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_15 + _glesMultiTexCoord0.w));
      tmpvar_20.w = ((tmpvar_15 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_21;
      tmpvar_21 = abs(((
        fract((tmpvar_20 + 0.5))
       * 2.0) - 1.0));
      vOscillations_16 = (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0);
      highp float tmpvar_22;
      tmpvar_22 = (vOscillations_16.y * vOscillations_16.z);
      fTarget_19 = 1.0;
      fAmount_18 = tmpvar_22;
      if ((tmpvar_22 < 0.0)) {
        fTarget_19 = -1.0;
        fAmount_18 = -(tmpvar_22);
      };
      fOscillation_17 = (((
        (mix (mix (tmpvar_22, fTarget_19, fAmount_18), fTarget_19, fAmount_18) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_16.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_16.w * _ST_WindBranchWhip.x)));
      vPos_12 = (tmpvar_10 + ((tmpvar_14 * fOscillation_17) * _ST_WindBranch.y));
      highp vec4 tmpvar_23;
      tmpvar_23.zw = vec2(0.0, 0.0);
      tmpvar_23.x = ((tmpvar_15 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_23.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_24;
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_23 + 0.5))
       * 2.0) - 1.0));
      tmpvar_24 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      fAdherenceScale_13 = (1.0 - ((
        ((tmpvar_24.x * tmpvar_24.y) * tmpvar_24.x)
       * tmpvar_24.y) * _ST_WindTurbulences.x));
      fAdherenceScale_13 = (fAdherenceScale_13 + ((vOscillations_16.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_12 = (vPos_12 + ((
        ((vRotatedBranchAnchor_3 - vPos_12) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_13) * _glesMultiTexCoord0.z));
      vPos_11 = vPos_12;
    } else {
      highp vec3 vPos_26;
      vPos_26 = vPos_11;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (tmpvar_6.x + tmpvar_6.y));
      highp vec4 vOscillations_29;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.w = 0.0;
      tmpvar_32.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      vPos_26 = (vPos_11 + ((tmpvar_27 * 
        (((mix (
          mix (tmpvar_34, fTarget_31, fAmount_30)
        , fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_11 = vPos_26;
    };
    FinalPosition_5 = vPos_11;
  };
  if ((tmpvar_7 > 0.0)) {
    highp vec3 vPos_35;
    vPos_35 = FinalPosition_5;
    highp float fAdjust_36;
    highp float fLength_37;
    fLength_37 = sqrt(dot (FinalPosition_5, FinalPosition_5));
    highp float tmpvar_38;
    tmpvar_38 = (max ((FinalPosition_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_36 = tmpvar_38;
    if ((tmpvar_38 != 0.0)) {
      fAdjust_36 = pow (tmpvar_38, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_39;
    tmpvar_39.zw = vec2(0.0, 0.0);
    tmpvar_39.x = (tmpvar_6.x + _ST_WindGlobal.x);
    tmpvar_39.y = (tmpvar_6.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_40;
    highp vec4 tmpvar_41;
    tmpvar_41 = abs(((
      fract((tmpvar_39 + 0.5))
     * 2.0) - 1.0));
    tmpvar_40 = (((
      (tmpvar_41 * tmpvar_41)
     * 
      (3.0 - (2.0 * tmpvar_41))
    ) - 0.5) * 2.0);
    vPos_35.xz = (FinalPosition_5.xz + (vRotatedWindVector_4.xz * (
      ((_ST_WindGlobal.y * (tmpvar_40.x + (tmpvar_40.y * tmpvar_40.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_36)));
    vPos_35 = (normalize(vPos_35) * fLength_37);
    FinalPosition_5 = vPos_35;
  };
  tmpvar_2.xyz = FinalPosition_5;
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_2).xyz - _LightPositionRange.xyz);
  gl_Position = (glstate_matrix_mvp * tmpvar_2);
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _LightPositionRange;
varying highp vec3 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = fract((vec4(1.0, 255.0, 65025.0, 1.658138e+07) * min (
    (sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w)
  , 0.999)));
  highp vec4 tmpvar_2;
  tmpvar_2 = (tmpvar_1 - (tmpvar_1.yzww * 0.003921569));
  gl_FragData[0] = tmpvar_2;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
out highp vec3 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_3;
  highp vec3 vRotatedWindVector_4;
  highp vec3 FinalPosition_5;
  FinalPosition_5 = tmpvar_1.xyz;
  highp vec3 tmpvar_6;
  tmpvar_6.x = _Object2World[3].x;
  tmpvar_6.y = _Object2World[3].y;
  tmpvar_6.z = _Object2World[3].z;
  mediump float tmpvar_7;
  tmpvar_7 = (_WindQuality * _WindEnabled);
  if ((tmpvar_7 > 0.0)) {
    highp mat3 tmpvar_8;
    tmpvar_8[0] = _World2Object[0].xyz;
    tmpvar_8[1] = _World2Object[1].xyz;
    tmpvar_8[2] = _World2Object[2].xyz;
    vRotatedWindVector_4 = normalize((tmpvar_8 * _ST_WindVector.xyz));
    highp mat3 tmpvar_9;
    tmpvar_9[0] = _World2Object[0].xyz;
    tmpvar_9[1] = _World2Object[1].xyz;
    tmpvar_9[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_3 = (normalize((tmpvar_9 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_4 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_3 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_5 = tmpvar_10;
  if ((tmpvar_7 >= 3.0)) {
    highp vec3 vPos_11;
    vPos_11 = tmpvar_10;
    if ((tmpvar_7 == 5.0)) {
      highp vec3 vPos_12;
      vPos_12 = tmpvar_10;
      highp float fAdherenceScale_13;
      highp vec3 tmpvar_14;
      tmpvar_14 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_15;
      tmpvar_15 = (_ST_WindBranch.x + (tmpvar_6.x + tmpvar_6.y));
      highp vec4 vOscillations_16;
      highp float fOscillation_17;
      fOscillation_17 = 1.0;
      highp float fAmount_18;
      highp float fTarget_19;
      highp vec4 tmpvar_20;
      tmpvar_20.x = (tmpvar_15 + _glesMultiTexCoord0.w);
      tmpvar_20.y = ((tmpvar_15 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_20.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_15 + _glesMultiTexCoord0.w));
      tmpvar_20.w = ((tmpvar_15 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_21;
      tmpvar_21 = abs(((
        fract((tmpvar_20 + 0.5))
       * 2.0) - 1.0));
      vOscillations_16 = (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0);
      highp float tmpvar_22;
      tmpvar_22 = (vOscillations_16.y * vOscillations_16.z);
      fTarget_19 = 1.0;
      fAmount_18 = tmpvar_22;
      if ((tmpvar_22 < 0.0)) {
        fTarget_19 = -1.0;
        fAmount_18 = -(tmpvar_22);
      };
      fOscillation_17 = (((
        (mix (mix (tmpvar_22, fTarget_19, fAmount_18), fTarget_19, fAmount_18) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_16.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_16.w * _ST_WindBranchWhip.x)));
      vPos_12 = (tmpvar_10 + ((tmpvar_14 * fOscillation_17) * _ST_WindBranch.y));
      highp vec4 tmpvar_23;
      tmpvar_23.zw = vec2(0.0, 0.0);
      tmpvar_23.x = ((tmpvar_15 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_23.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_24;
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_23 + 0.5))
       * 2.0) - 1.0));
      tmpvar_24 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      fAdherenceScale_13 = (1.0 - ((
        ((tmpvar_24.x * tmpvar_24.y) * tmpvar_24.x)
       * tmpvar_24.y) * _ST_WindTurbulences.x));
      fAdherenceScale_13 = (fAdherenceScale_13 + ((vOscillations_16.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_12 = (vPos_12 + ((
        ((vRotatedBranchAnchor_3 - vPos_12) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_13) * _glesMultiTexCoord0.z));
      vPos_11 = vPos_12;
    } else {
      highp vec3 vPos_26;
      vPos_26 = vPos_11;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (tmpvar_6.x + tmpvar_6.y));
      highp vec4 vOscillations_29;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.w = 0.0;
      tmpvar_32.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      vPos_26 = (vPos_11 + ((tmpvar_27 * 
        (((mix (
          mix (tmpvar_34, fTarget_31, fAmount_30)
        , fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_11 = vPos_26;
    };
    FinalPosition_5 = vPos_11;
  };
  if ((tmpvar_7 > 0.0)) {
    highp vec3 vPos_35;
    vPos_35 = FinalPosition_5;
    highp float fAdjust_36;
    highp float fLength_37;
    fLength_37 = sqrt(dot (FinalPosition_5, FinalPosition_5));
    highp float tmpvar_38;
    tmpvar_38 = (max ((FinalPosition_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_36 = tmpvar_38;
    if ((tmpvar_38 != 0.0)) {
      fAdjust_36 = pow (tmpvar_38, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_39;
    tmpvar_39.zw = vec2(0.0, 0.0);
    tmpvar_39.x = (tmpvar_6.x + _ST_WindGlobal.x);
    tmpvar_39.y = (tmpvar_6.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_40;
    highp vec4 tmpvar_41;
    tmpvar_41 = abs(((
      fract((tmpvar_39 + 0.5))
     * 2.0) - 1.0));
    tmpvar_40 = (((
      (tmpvar_41 * tmpvar_41)
     * 
      (3.0 - (2.0 * tmpvar_41))
    ) - 0.5) * 2.0);
    vPos_35.xz = (FinalPosition_5.xz + (vRotatedWindVector_4.xz * (
      ((_ST_WindGlobal.y * (tmpvar_40.x + (tmpvar_40.y * tmpvar_40.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_36)));
    vPos_35 = (normalize(vPos_35) * fLength_37);
    FinalPosition_5 = vPos_35;
  };
  tmpvar_2.xyz = FinalPosition_5;
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_2).xyz - _LightPositionRange.xyz);
  gl_Position = (glstate_matrix_mvp * tmpvar_2);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _LightPositionRange;
in highp vec3 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = vec4((sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w));
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  mediump vec2 tmpvar_3;
  highp vec2 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord0.xy;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_5 = tmpvar_1;
  tmpvar_6 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_7;
  highp vec3 vRotatedWindVector_8;
  highp vec3 FinalPosition_9;
  FinalPosition_9 = tmpvar_1.xyz;
  highp vec3 tmpvar_10;
  tmpvar_10.x = _Object2World[3].x;
  tmpvar_10.y = _Object2World[3].y;
  tmpvar_10.z = _Object2World[3].z;
  mediump float tmpvar_11;
  tmpvar_11 = (_WindQuality * _WindEnabled);
  if ((tmpvar_11 > 0.0)) {
    highp mat3 tmpvar_12;
    tmpvar_12[0] = _World2Object[0].xyz;
    tmpvar_12[1] = _World2Object[1].xyz;
    tmpvar_12[2] = _World2Object[2].xyz;
    vRotatedWindVector_8 = normalize((tmpvar_12 * _ST_WindVector.xyz));
    highp mat3 tmpvar_13;
    tmpvar_13[0] = _World2Object[0].xyz;
    tmpvar_13[1] = _World2Object[1].xyz;
    tmpvar_13[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_7 = (normalize((tmpvar_13 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_8 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_7 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_14;
  tmpvar_14 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_9 = tmpvar_14;
  if ((tmpvar_11 == 5.0)) {
    highp vec3 vPos_15;
    vPos_15 = tmpvar_14;
    highp float fOffset_16;
    fOffset_16 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_16 = 0.75;
    };
    highp vec4 tmpvar_17;
    tmpvar_17.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_17.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_16);
    highp vec4 tmpvar_18;
    tmpvar_18 = abs(((
      fract((tmpvar_17 + 0.5))
     * 2.0) - 1.0));
    vPos_15 = (tmpvar_14 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_18 * tmpvar_18)
       * 
        (3.0 - (2.0 * tmpvar_18))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_6 = tmpvar_2;
    FinalPosition_9 = vPos_15;
  };
  if ((tmpvar_11 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = FinalPosition_9;
    if ((tmpvar_11 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = FinalPosition_9;
      highp float fAdherenceScale_21;
      highp vec3 tmpvar_22;
      tmpvar_22 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_23;
      tmpvar_23 = (_ST_WindBranch.x + (tmpvar_10.x + tmpvar_10.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (tmpvar_23 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((tmpvar_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_23 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((tmpvar_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        (mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_24.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (FinalPosition_9 + ((tmpvar_22 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((tmpvar_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_21 = (1.0 - ((
        ((tmpvar_32.x * tmpvar_32.y) * tmpvar_32.x)
       * tmpvar_32.y) * _ST_WindTurbulences.x));
      fAdherenceScale_21 = (fAdherenceScale_21 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_7 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_21) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp vec3 tmpvar_35;
      tmpvar_35 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_36;
      tmpvar_36 = (_ST_WindBranch.x + (tmpvar_10.x + tmpvar_10.y));
      highp vec4 vOscillations_37;
      highp float fAmount_38;
      highp float fTarget_39;
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.x = (tmpvar_36 + _glesMultiTexCoord0.w);
      tmpvar_40.y = ((tmpvar_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_40.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_39 = 1.0;
      fAmount_38 = tmpvar_42;
      if ((tmpvar_42 < 0.0)) {
        fTarget_39 = -1.0;
        fAmount_38 = -(tmpvar_42);
      };
      vPos_34 = (vPos_19 + ((tmpvar_35 * 
        (((mix (
          mix (tmpvar_42, fTarget_39, fAmount_38)
        , fTarget_39, fAmount_38) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_9 = vPos_19;
  };
  if ((tmpvar_11 > 0.0)) {
    highp vec3 vPos_43;
    vPos_43 = FinalPosition_9;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_9, FinalPosition_9));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_10.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_10.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    vPos_43.xz = (FinalPosition_9.xz + (vRotatedWindVector_8.xz * (
      ((_ST_WindGlobal.y * (tmpvar_48.x + (tmpvar_48.y * tmpvar_48.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_44)));
    vPos_43 = (normalize(vPos_43) * fLength_45);
    FinalPosition_9 = vPos_43;
  };
  tmpvar_5.xyz = FinalPosition_9;
  highp vec3 vertex_50;
  vertex_50 = tmpvar_5.xyz;
  highp vec4 clipPos_51;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp vec4 tmpvar_52;
    tmpvar_52.w = 1.0;
    tmpvar_52.xyz = vertex_50;
    highp vec3 tmpvar_53;
    tmpvar_53 = (_Object2World * tmpvar_52).xyz;
    highp vec4 v_54;
    v_54.x = _World2Object[0].x;
    v_54.y = _World2Object[1].x;
    v_54.z = _World2Object[2].x;
    v_54.w = _World2Object[3].x;
    highp vec4 v_55;
    v_55.x = _World2Object[0].y;
    v_55.y = _World2Object[1].y;
    v_55.z = _World2Object[2].y;
    v_55.w = _World2Object[3].y;
    highp vec4 v_56;
    v_56.x = _World2Object[0].z;
    v_56.y = _World2Object[1].z;
    v_56.z = _World2Object[2].z;
    v_56.w = _World2Object[3].z;
    highp vec3 tmpvar_57;
    tmpvar_57 = normalize(((
      (v_54.xyz * tmpvar_6.x)
     + 
      (v_55.xyz * tmpvar_6.y)
    ) + (v_56.xyz * tmpvar_6.z)));
    highp float tmpvar_58;
    tmpvar_58 = dot (tmpvar_57, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_53 * _WorldSpaceLightPos0.w)
    )));
    highp vec4 tmpvar_59;
    tmpvar_59.w = 1.0;
    tmpvar_59.xyz = (tmpvar_53 - (tmpvar_57 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_58 * tmpvar_58)))
    )));
    clipPos_51 = (unity_MatrixVP * tmpvar_59);
  } else {
    highp vec4 tmpvar_60;
    tmpvar_60.w = 1.0;
    tmpvar_60.xyz = vertex_50;
    clipPos_51 = (glstate_matrix_mvp * tmpvar_60);
  };
  highp vec4 clipPos_61;
  clipPos_61.xyw = clipPos_51.xyw;
  clipPos_61.z = (clipPos_51.z + clamp ((unity_LightShadowBias.x / clipPos_51.w), 0.0, 1.0));
  clipPos_61.z = mix (clipPos_61.z, max (clipPos_61.z, -(clipPos_51.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_61;
  xlv_TEXCOORD1 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  lowp float x_1;
  x_1 = ((texture2D (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
out mediump vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  mediump vec2 tmpvar_3;
  highp vec2 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord0.xy;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_5 = tmpvar_1;
  tmpvar_6 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_7;
  highp vec3 vRotatedWindVector_8;
  highp vec3 FinalPosition_9;
  FinalPosition_9 = tmpvar_1.xyz;
  highp vec3 tmpvar_10;
  tmpvar_10.x = _Object2World[3].x;
  tmpvar_10.y = _Object2World[3].y;
  tmpvar_10.z = _Object2World[3].z;
  mediump float tmpvar_11;
  tmpvar_11 = (_WindQuality * _WindEnabled);
  if ((tmpvar_11 > 0.0)) {
    highp mat3 tmpvar_12;
    tmpvar_12[0] = _World2Object[0].xyz;
    tmpvar_12[1] = _World2Object[1].xyz;
    tmpvar_12[2] = _World2Object[2].xyz;
    vRotatedWindVector_8 = normalize((tmpvar_12 * _ST_WindVector.xyz));
    highp mat3 tmpvar_13;
    tmpvar_13[0] = _World2Object[0].xyz;
    tmpvar_13[1] = _World2Object[1].xyz;
    tmpvar_13[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_7 = (normalize((tmpvar_13 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_8 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_7 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_14;
  tmpvar_14 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_9 = tmpvar_14;
  if ((tmpvar_11 == 5.0)) {
    highp vec3 vPos_15;
    vPos_15 = tmpvar_14;
    highp float fOffset_16;
    fOffset_16 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_16 = 0.75;
    };
    highp vec4 tmpvar_17;
    tmpvar_17.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_17.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_16);
    highp vec4 tmpvar_18;
    tmpvar_18 = abs(((
      fract((tmpvar_17 + 0.5))
     * 2.0) - 1.0));
    vPos_15 = (tmpvar_14 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_18 * tmpvar_18)
       * 
        (3.0 - (2.0 * tmpvar_18))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_6 = tmpvar_2;
    FinalPosition_9 = vPos_15;
  };
  if ((tmpvar_11 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = FinalPosition_9;
    if ((tmpvar_11 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = FinalPosition_9;
      highp float fAdherenceScale_21;
      highp vec3 tmpvar_22;
      tmpvar_22 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_23;
      tmpvar_23 = (_ST_WindBranch.x + (tmpvar_10.x + tmpvar_10.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (tmpvar_23 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((tmpvar_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_23 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((tmpvar_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        (mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_24.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (FinalPosition_9 + ((tmpvar_22 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((tmpvar_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_21 = (1.0 - ((
        ((tmpvar_32.x * tmpvar_32.y) * tmpvar_32.x)
       * tmpvar_32.y) * _ST_WindTurbulences.x));
      fAdherenceScale_21 = (fAdherenceScale_21 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_7 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_21) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp vec3 tmpvar_35;
      tmpvar_35 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_36;
      tmpvar_36 = (_ST_WindBranch.x + (tmpvar_10.x + tmpvar_10.y));
      highp vec4 vOscillations_37;
      highp float fAmount_38;
      highp float fTarget_39;
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.x = (tmpvar_36 + _glesMultiTexCoord0.w);
      tmpvar_40.y = ((tmpvar_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_40.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_39 = 1.0;
      fAmount_38 = tmpvar_42;
      if ((tmpvar_42 < 0.0)) {
        fTarget_39 = -1.0;
        fAmount_38 = -(tmpvar_42);
      };
      vPos_34 = (vPos_19 + ((tmpvar_35 * 
        (((mix (
          mix (tmpvar_42, fTarget_39, fAmount_38)
        , fTarget_39, fAmount_38) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_9 = vPos_19;
  };
  if ((tmpvar_11 > 0.0)) {
    highp vec3 vPos_43;
    vPos_43 = FinalPosition_9;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_9, FinalPosition_9));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_10.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_10.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    vPos_43.xz = (FinalPosition_9.xz + (vRotatedWindVector_8.xz * (
      ((_ST_WindGlobal.y * (tmpvar_48.x + (tmpvar_48.y * tmpvar_48.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_44)));
    vPos_43 = (normalize(vPos_43) * fLength_45);
    FinalPosition_9 = vPos_43;
  };
  tmpvar_5.xyz = FinalPosition_9;
  highp vec3 vertex_50;
  vertex_50 = tmpvar_5.xyz;
  highp vec4 clipPos_51;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp vec4 tmpvar_52;
    tmpvar_52.w = 1.0;
    tmpvar_52.xyz = vertex_50;
    highp vec3 tmpvar_53;
    tmpvar_53 = (_Object2World * tmpvar_52).xyz;
    highp vec4 v_54;
    v_54.x = _World2Object[0].x;
    v_54.y = _World2Object[1].x;
    v_54.z = _World2Object[2].x;
    v_54.w = _World2Object[3].x;
    highp vec4 v_55;
    v_55.x = _World2Object[0].y;
    v_55.y = _World2Object[1].y;
    v_55.z = _World2Object[2].y;
    v_55.w = _World2Object[3].y;
    highp vec4 v_56;
    v_56.x = _World2Object[0].z;
    v_56.y = _World2Object[1].z;
    v_56.z = _World2Object[2].z;
    v_56.w = _World2Object[3].z;
    highp vec3 tmpvar_57;
    tmpvar_57 = normalize(((
      (v_54.xyz * tmpvar_6.x)
     + 
      (v_55.xyz * tmpvar_6.y)
    ) + (v_56.xyz * tmpvar_6.z)));
    highp float tmpvar_58;
    tmpvar_58 = dot (tmpvar_57, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_53 * _WorldSpaceLightPos0.w)
    )));
    highp vec4 tmpvar_59;
    tmpvar_59.w = 1.0;
    tmpvar_59.xyz = (tmpvar_53 - (tmpvar_57 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_58 * tmpvar_58)))
    )));
    clipPos_51 = (unity_MatrixVP * tmpvar_59);
  } else {
    highp vec4 tmpvar_60;
    tmpvar_60.w = 1.0;
    tmpvar_60.xyz = vertex_50;
    clipPos_51 = (glstate_matrix_mvp * tmpvar_60);
  };
  highp vec4 clipPos_61;
  clipPos_61.xyw = clipPos_51.xyw;
  clipPos_61.z = (clipPos_51.z + clamp ((unity_LightShadowBias.x / clipPos_51.w), 0.0, 1.0));
  clipPos_61.z = mix (clipPos_61.z, max (clipPos_61.z, -(clipPos_51.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_61;
  xlv_TEXCOORD1 = tmpvar_3;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
in mediump vec2 xlv_TEXCOORD1;
void main ()
{
  lowp float x_1;
  x_1 = ((texture (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  _glesFragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}



#endif"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec2 tmpvar_2;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0.xy;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_5;
  highp vec3 vRotatedWindVector_6;
  highp vec3 FinalPosition_7;
  FinalPosition_7 = tmpvar_1.xyz;
  highp vec3 tmpvar_8;
  tmpvar_8.x = _Object2World[3].x;
  tmpvar_8.y = _Object2World[3].y;
  tmpvar_8.z = _Object2World[3].z;
  mediump float tmpvar_9;
  tmpvar_9 = (_WindQuality * _WindEnabled);
  if ((tmpvar_9 > 0.0)) {
    highp mat3 tmpvar_10;
    tmpvar_10[0] = _World2Object[0].xyz;
    tmpvar_10[1] = _World2Object[1].xyz;
    tmpvar_10[2] = _World2Object[2].xyz;
    vRotatedWindVector_6 = normalize((tmpvar_10 * _ST_WindVector.xyz));
    highp mat3 tmpvar_11;
    tmpvar_11[0] = _World2Object[0].xyz;
    tmpvar_11[1] = _World2Object[1].xyz;
    tmpvar_11[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_5 = (normalize((tmpvar_11 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_6 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_5 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_12;
  tmpvar_12 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_7 = tmpvar_12;
  if ((tmpvar_9 == 5.0)) {
    highp vec3 vPos_13;
    vPos_13 = tmpvar_12;
    highp float fOffset_14;
    fOffset_14 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_14 = 0.75;
    };
    highp vec4 tmpvar_15;
    tmpvar_15.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_15.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_14);
    highp vec4 tmpvar_16;
    tmpvar_16 = abs(((
      fract((tmpvar_15 + 0.5))
     * 2.0) - 1.0));
    vPos_13 = (tmpvar_12 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_16 * tmpvar_16)
       * 
        (3.0 - (2.0 * tmpvar_16))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    FinalPosition_7 = vPos_13;
  };
  if ((tmpvar_9 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = FinalPosition_7;
    if ((tmpvar_9 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = FinalPosition_7;
      highp float fAdherenceScale_19;
      highp vec3 tmpvar_20;
      tmpvar_20 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_21;
      tmpvar_21 = (_ST_WindBranch.x + (tmpvar_8.x + tmpvar_8.y));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (tmpvar_21 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((tmpvar_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_21 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((tmpvar_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        (mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_22.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (FinalPosition_7 + ((tmpvar_20 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((tmpvar_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_19 = (1.0 - ((
        ((tmpvar_30.x * tmpvar_30.y) * tmpvar_30.x)
       * tmpvar_30.y) * _ST_WindTurbulences.x));
      fAdherenceScale_19 = (fAdherenceScale_19 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((vRotatedBranchAnchor_5 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_19) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp vec3 tmpvar_33;
      tmpvar_33 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_34;
      tmpvar_34 = (_ST_WindBranch.x + (tmpvar_8.x + tmpvar_8.y));
      highp vec4 vOscillations_35;
      highp float fAmount_36;
      highp float fTarget_37;
      highp vec4 tmpvar_38;
      tmpvar_38.w = 0.0;
      tmpvar_38.x = (tmpvar_34 + _glesMultiTexCoord0.w);
      tmpvar_38.y = ((tmpvar_34 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_38.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_34 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      highp float tmpvar_40;
      tmpvar_40 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_37 = 1.0;
      fAmount_36 = tmpvar_40;
      if ((tmpvar_40 < 0.0)) {
        fTarget_37 = -1.0;
        fAmount_36 = -(tmpvar_40);
      };
      vPos_32 = (vPos_17 + ((tmpvar_33 * 
        (((mix (
          mix (tmpvar_40, fTarget_37, fAmount_36)
        , fTarget_37, fAmount_36) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    FinalPosition_7 = vPos_17;
  };
  if ((tmpvar_9 > 0.0)) {
    highp vec3 vPos_41;
    vPos_41 = FinalPosition_7;
    highp float fAdjust_42;
    highp float fLength_43;
    fLength_43 = sqrt(dot (FinalPosition_7, FinalPosition_7));
    highp float tmpvar_44;
    tmpvar_44 = (max ((FinalPosition_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_42 = tmpvar_44;
    if ((tmpvar_44 != 0.0)) {
      fAdjust_42 = pow (tmpvar_44, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_45;
    tmpvar_45.zw = vec2(0.0, 0.0);
    tmpvar_45.x = (tmpvar_8.x + _ST_WindGlobal.x);
    tmpvar_45.y = (tmpvar_8.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_46;
    highp vec4 tmpvar_47;
    tmpvar_47 = abs(((
      fract((tmpvar_45 + 0.5))
     * 2.0) - 1.0));
    tmpvar_46 = (((
      (tmpvar_47 * tmpvar_47)
     * 
      (3.0 - (2.0 * tmpvar_47))
    ) - 0.5) * 2.0);
    vPos_41.xz = (FinalPosition_7.xz + (vRotatedWindVector_6.xz * (
      ((_ST_WindGlobal.y * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_42)));
    vPos_41 = (normalize(vPos_41) * fLength_43);
    FinalPosition_7 = vPos_41;
  };
  tmpvar_4.xyz = FinalPosition_7;
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_4).xyz - _LightPositionRange.xyz);
  gl_Position = (glstate_matrix_mvp * tmpvar_4);
  xlv_TEXCOORD1 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _LightPositionRange;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  lowp float x_1;
  x_1 = ((texture2D (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_2;
  tmpvar_2 = fract((vec4(1.0, 255.0, 65025.0, 1.658138e+07) * min (
    (sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w)
  , 0.999)));
  highp vec4 tmpvar_3;
  tmpvar_3 = (tmpvar_2 - (tmpvar_2.yzww * 0.003921569));
  gl_FragData[0] = tmpvar_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
out highp vec3 xlv_TEXCOORD0;
out mediump vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec2 tmpvar_2;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0.xy;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_5;
  highp vec3 vRotatedWindVector_6;
  highp vec3 FinalPosition_7;
  FinalPosition_7 = tmpvar_1.xyz;
  highp vec3 tmpvar_8;
  tmpvar_8.x = _Object2World[3].x;
  tmpvar_8.y = _Object2World[3].y;
  tmpvar_8.z = _Object2World[3].z;
  mediump float tmpvar_9;
  tmpvar_9 = (_WindQuality * _WindEnabled);
  if ((tmpvar_9 > 0.0)) {
    highp mat3 tmpvar_10;
    tmpvar_10[0] = _World2Object[0].xyz;
    tmpvar_10[1] = _World2Object[1].xyz;
    tmpvar_10[2] = _World2Object[2].xyz;
    vRotatedWindVector_6 = normalize((tmpvar_10 * _ST_WindVector.xyz));
    highp mat3 tmpvar_11;
    tmpvar_11[0] = _World2Object[0].xyz;
    tmpvar_11[1] = _World2Object[1].xyz;
    tmpvar_11[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_5 = (normalize((tmpvar_11 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_6 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_5 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_12;
  tmpvar_12 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_7 = tmpvar_12;
  if ((tmpvar_9 == 5.0)) {
    highp vec3 vPos_13;
    vPos_13 = tmpvar_12;
    highp float fOffset_14;
    fOffset_14 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_14 = 0.75;
    };
    highp vec4 tmpvar_15;
    tmpvar_15.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_15.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_14);
    highp vec4 tmpvar_16;
    tmpvar_16 = abs(((
      fract((tmpvar_15 + 0.5))
     * 2.0) - 1.0));
    vPos_13 = (tmpvar_12 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_16 * tmpvar_16)
       * 
        (3.0 - (2.0 * tmpvar_16))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    FinalPosition_7 = vPos_13;
  };
  if ((tmpvar_9 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = FinalPosition_7;
    if ((tmpvar_9 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = FinalPosition_7;
      highp float fAdherenceScale_19;
      highp vec3 tmpvar_20;
      tmpvar_20 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_21;
      tmpvar_21 = (_ST_WindBranch.x + (tmpvar_8.x + tmpvar_8.y));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (tmpvar_21 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((tmpvar_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_21 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((tmpvar_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        (mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_22.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (FinalPosition_7 + ((tmpvar_20 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((tmpvar_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_19 = (1.0 - ((
        ((tmpvar_30.x * tmpvar_30.y) * tmpvar_30.x)
       * tmpvar_30.y) * _ST_WindTurbulences.x));
      fAdherenceScale_19 = (fAdherenceScale_19 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((vRotatedBranchAnchor_5 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_19) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp vec3 tmpvar_33;
      tmpvar_33 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_34;
      tmpvar_34 = (_ST_WindBranch.x + (tmpvar_8.x + tmpvar_8.y));
      highp vec4 vOscillations_35;
      highp float fAmount_36;
      highp float fTarget_37;
      highp vec4 tmpvar_38;
      tmpvar_38.w = 0.0;
      tmpvar_38.x = (tmpvar_34 + _glesMultiTexCoord0.w);
      tmpvar_38.y = ((tmpvar_34 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_38.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_34 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      highp float tmpvar_40;
      tmpvar_40 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_37 = 1.0;
      fAmount_36 = tmpvar_40;
      if ((tmpvar_40 < 0.0)) {
        fTarget_37 = -1.0;
        fAmount_36 = -(tmpvar_40);
      };
      vPos_32 = (vPos_17 + ((tmpvar_33 * 
        (((mix (
          mix (tmpvar_40, fTarget_37, fAmount_36)
        , fTarget_37, fAmount_36) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    FinalPosition_7 = vPos_17;
  };
  if ((tmpvar_9 > 0.0)) {
    highp vec3 vPos_41;
    vPos_41 = FinalPosition_7;
    highp float fAdjust_42;
    highp float fLength_43;
    fLength_43 = sqrt(dot (FinalPosition_7, FinalPosition_7));
    highp float tmpvar_44;
    tmpvar_44 = (max ((FinalPosition_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_42 = tmpvar_44;
    if ((tmpvar_44 != 0.0)) {
      fAdjust_42 = pow (tmpvar_44, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_45;
    tmpvar_45.zw = vec2(0.0, 0.0);
    tmpvar_45.x = (tmpvar_8.x + _ST_WindGlobal.x);
    tmpvar_45.y = (tmpvar_8.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_46;
    highp vec4 tmpvar_47;
    tmpvar_47 = abs(((
      fract((tmpvar_45 + 0.5))
     * 2.0) - 1.0));
    tmpvar_46 = (((
      (tmpvar_47 * tmpvar_47)
     * 
      (3.0 - (2.0 * tmpvar_47))
    ) - 0.5) * 2.0);
    vPos_41.xz = (FinalPosition_7.xz + (vRotatedWindVector_6.xz * (
      ((_ST_WindGlobal.y * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_42)));
    vPos_41 = (normalize(vPos_41) * fLength_43);
    FinalPosition_7 = vPos_41;
  };
  tmpvar_4.xyz = FinalPosition_7;
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_4).xyz - _LightPositionRange.xyz);
  gl_Position = (glstate_matrix_mvp * tmpvar_4);
  xlv_TEXCOORD1 = tmpvar_2;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _LightPositionRange;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
in highp vec3 xlv_TEXCOORD0;
in mediump vec2 xlv_TEXCOORD1;
void main ()
{
  lowp float x_1;
  x_1 = ((texture (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_2;
  tmpvar_2 = vec4((sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w));
  _glesFragData[0] = tmpvar_2;
}



#endif"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  highp vec2 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord3.xy;
  mediump vec2 tmpvar_5;
  highp vec2 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord0.xy;
  tmpvar_5 = tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_1;
  tmpvar_8 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_9;
  highp vec3 vRotatedWindVector_10;
  highp vec3 FinalPosition_11;
  FinalPosition_11 = tmpvar_1.xyz;
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  mediump float tmpvar_13;
  tmpvar_13 = (_WindQuality * _WindEnabled);
  if ((tmpvar_13 > 0.0)) {
    highp mat3 tmpvar_14;
    tmpvar_14[0] = _World2Object[0].xyz;
    tmpvar_14[1] = _World2Object[1].xyz;
    tmpvar_14[2] = _World2Object[2].xyz;
    vRotatedWindVector_10 = normalize((tmpvar_14 * _ST_WindVector.xyz));
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_9 = (normalize((tmpvar_15 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_16;
  tmpvar_16.x = tmpvar_3.w;
  tmpvar_16.y = tmpvar_4.x;
  tmpvar_16.z = tmpvar_4.y;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix ((_glesVertex.xyz - _glesMultiTexCoord1.xyz), tmpvar_16, unity_LODFade.xxx);
  FinalPosition_11 = tmpvar_17;
  if (((tmpvar_13 > 1.0) && (tmpvar_13 < 5.0))) {
    highp float tmpvar_18;
    tmpvar_18 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_19;
    isBestWind_19 = (tmpvar_13 == 4.0);
    bool bLeaf2_20;
    bLeaf2_20 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    highp vec3 vDirection_22;
    vDirection_22 = tmpvar_2;
    highp float tmpvar_23;
    if (bLeaf2_20) {
      tmpvar_23 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_23 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_24;
    if (bLeaf2_20) {
      tmpvar_24 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_24 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_25;
    highp vec4 tmpvar_26;
    tmpvar_26.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_26.x = (tmpvar_23 + tmpvar_18);
    highp vec4 tmpvar_27;
    tmpvar_27 = abs(((
      fract((tmpvar_26 + 0.5))
     * 2.0) - 1.0));
    vPos_25 = (tmpvar_17 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_24 * (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_22 = tmpvar_2;
    vPos_21 = vPos_25;
    if (isBestWind_19) {
      highp vec3 tmpvar_28;
      tmpvar_28 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_29;
      if (bLeaf2_20) {
        tmpvar_29 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_29 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_30;
      if (bLeaf2_20) {
        tmpvar_30 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_30 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_31;
      if (bLeaf2_20) {
        tmpvar_31 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_32;
      if (bLeaf2_20) {
        tmpvar_32 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_33;
      if (bLeaf2_20) {
        tmpvar_33 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_33 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_34;
      if (bLeaf2_20) {
        tmpvar_34 = bool(1);
      } else {
        tmpvar_34 = bool(1);
      };
      highp float fTwitch_35;
      highp vec3 vAxis_36;
      highp vec3 tmpvar_37;
      tmpvar_37 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_38;
      tmpvar_38 = ((tmpvar_37.x + tmpvar_37.y) + tmpvar_37.z);
      highp vec4 tmpvar_39;
      tmpvar_39.x = (tmpvar_29 + tmpvar_38);
      tmpvar_39.y = ((tmpvar_29 * 0.75) - tmpvar_38);
      tmpvar_39.z = ((tmpvar_29 * 0.01) + tmpvar_38);
      tmpvar_39.w = (tmpvar_29 + tmpvar_38);
      highp vec4 tmpvar_40;
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      tmpvar_40 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = sqrt(dot (vPos_25, vPos_25));
      highp float fAngle_43;
      fAngle_43 = ((_glesMultiTexCoord2.x * tmpvar_31) * (tmpvar_40.x + (tmpvar_40.y * tmpvar_40.y)));
      highp vec2 vSinCos_44;
      vSinCos_44.x = sin(fAngle_43);
      vSinCos_44.y = cos(fAngle_43);
      highp float tmpvar_45;
      tmpvar_45 = (1.0 - vSinCos_44.y);
      highp mat3 tmpvar_46;
      tmpvar_46[0].x = (((tmpvar_45 * tmpvar_28.x) * tmpvar_28.x) + vSinCos_44.y);
      tmpvar_46[0].y = (((tmpvar_45 * tmpvar_28.x) * tmpvar_28.y) + (vSinCos_44.x * tmpvar_28.z));
      tmpvar_46[0].z = (((tmpvar_45 * tmpvar_28.x) * tmpvar_28.z) - (vSinCos_44.x * tmpvar_28.y));
      tmpvar_46[1].x = (((tmpvar_45 * tmpvar_28.x) * tmpvar_28.y) - (vSinCos_44.x * tmpvar_28.z));
      tmpvar_46[1].y = (((tmpvar_45 * tmpvar_28.y) * tmpvar_28.y) + vSinCos_44.y);
      tmpvar_46[1].z = (((tmpvar_45 * tmpvar_28.y) * tmpvar_28.z) + (vSinCos_44.x * tmpvar_28.x));
      tmpvar_46[2].x = (((tmpvar_45 * tmpvar_28.x) * tmpvar_28.z) + (vSinCos_44.x * tmpvar_28.y));
      tmpvar_46[2].y = (((tmpvar_45 * tmpvar_28.y) * tmpvar_28.z) - (vSinCos_44.x * tmpvar_28.x));
      tmpvar_46[2].z = (((tmpvar_45 * tmpvar_28.z) * tmpvar_28.z) + vSinCos_44.y);
      highp vec3 tmpvar_47;
      tmpvar_47 = ((tmpvar_28.yzx * vRotatedWindVector_10.zxy) - (tmpvar_28.zxy * vRotatedWindVector_10.yzx));
      vAxis_36.xz = tmpvar_47.xz;
      highp float tmpvar_48;
      tmpvar_48 = clamp (dot (vRotatedWindVector_10, tmpvar_28), -1.0, 1.0);
      vAxis_36.y = (tmpvar_47.y + tmpvar_48);
      highp vec3 tmpvar_49;
      tmpvar_49 = normalize(vAxis_36);
      vAxis_36 = tmpvar_49;
      highp float tmpvar_50;
      tmpvar_50 = (1.570796 - (sign(tmpvar_48) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_48))) * (1.570796 + (abs(tmpvar_48) * (-0.2146018 + 
          (abs(tmpvar_48) * (0.08656672 + (abs(tmpvar_48) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_51;
      tmpvar_51 = (tmpvar_40.y - (tmpvar_40.x * tmpvar_40.x));
      fTwitch_35 = 0.0;
      if (tmpvar_34) {
        highp float fTime_52;
        fTime_52 = (tmpvar_33.z + tmpvar_38);
        highp vec4 tmpvar_53;
        tmpvar_53.zw = vec2(0.0, 0.0);
        tmpvar_53.x = fTime_52;
        tmpvar_53.y = (0.87 * fTime_52);
        highp vec4 tmpvar_54;
        highp vec4 tmpvar_55;
        tmpvar_55 = abs(((
          fract((tmpvar_53 + 0.5))
         * 2.0) - 1.0));
        tmpvar_54 = (((
          (tmpvar_55 * tmpvar_55)
         * 
          (3.0 - (2.0 * tmpvar_55))
        ) - 0.5) * 2.0);
        fTwitch_35 = (tmpvar_33.x * pow (clamp (
          ((((tmpvar_54.x * tmpvar_54.y) * tmpvar_54.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_33.y));
      };
      highp float fAngle_56;
      fAngle_56 = (_glesMultiTexCoord2.x * ((
        (tmpvar_50 * tmpvar_32)
       + 
        (tmpvar_51 * tmpvar_30)
      ) + fTwitch_35));
      highp vec2 vSinCos_57;
      vSinCos_57.x = sin(fAngle_56);
      vSinCos_57.y = cos(fAngle_56);
      highp float tmpvar_58;
      tmpvar_58 = (1.0 - vSinCos_57.y);
      highp mat3 tmpvar_59;
      tmpvar_59[0].x = (((tmpvar_58 * tmpvar_49.x) * tmpvar_49.x) + vSinCos_57.y);
      tmpvar_59[0].y = (((tmpvar_58 * tmpvar_49.x) * tmpvar_49.y) + (vSinCos_57.x * tmpvar_49.z));
      tmpvar_59[0].z = (((tmpvar_58 * tmpvar_49.x) * tmpvar_49.z) - (vSinCos_57.x * tmpvar_49.y));
      tmpvar_59[1].x = (((tmpvar_58 * tmpvar_49.x) * tmpvar_49.y) - (vSinCos_57.x * tmpvar_49.z));
      tmpvar_59[1].y = (((tmpvar_58 * tmpvar_49.y) * tmpvar_49.y) + vSinCos_57.y);
      tmpvar_59[1].z = (((tmpvar_58 * tmpvar_49.y) * tmpvar_49.z) + (vSinCos_57.x * tmpvar_49.x));
      tmpvar_59[2].x = (((tmpvar_58 * tmpvar_49.x) * tmpvar_49.z) + (vSinCos_57.x * tmpvar_49.y));
      tmpvar_59[2].y = (((tmpvar_58 * tmpvar_49.y) * tmpvar_49.z) - (vSinCos_57.x * tmpvar_49.x));
      tmpvar_59[2].z = (((tmpvar_58 * tmpvar_49.z) * tmpvar_49.z) + vSinCos_57.y);
      highp mat3 tmpvar_60;
      tmpvar_60 = (tmpvar_46 * tmpvar_59);
      vDirection_22 = (tmpvar_60 * _glesNormal);
      vPos_21 = (normalize((tmpvar_60 * vPos_25)) * tmpvar_42);
    };
    tmpvar_8 = vDirection_22;
    FinalPosition_11 = vPos_21;
  };
  highp vec3 tmpvar_61;
  tmpvar_61 = (FinalPosition_11 + _glesMultiTexCoord1.xyz);
  FinalPosition_11 = tmpvar_61;
  if ((tmpvar_13 >= 3.0)) {
    highp vec3 vPos_62;
    vPos_62 = tmpvar_61;
    if ((tmpvar_13 == 5.0)) {
      highp vec3 vPos_63;
      vPos_63 = tmpvar_61;
      highp float fAdherenceScale_64;
      highp vec3 tmpvar_65;
      tmpvar_65 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_66;
      tmpvar_66 = (_ST_WindBranch.x + (tmpvar_12.x + tmpvar_12.y));
      highp vec4 vOscillations_67;
      highp float fOscillation_68;
      fOscillation_68 = 1.0;
      highp float fAmount_69;
      highp float fTarget_70;
      highp vec4 tmpvar_71;
      tmpvar_71.x = (tmpvar_66 + _glesMultiTexCoord0.w);
      tmpvar_71.y = ((tmpvar_66 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_71.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_66 + _glesMultiTexCoord0.w));
      tmpvar_71.w = ((tmpvar_66 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_72;
      tmpvar_72 = abs(((
        fract((tmpvar_71 + 0.5))
       * 2.0) - 1.0));
      vOscillations_67 = (((
        (tmpvar_72 * tmpvar_72)
       * 
        (3.0 - (2.0 * tmpvar_72))
      ) - 0.5) * 2.0);
      highp float tmpvar_73;
      tmpvar_73 = (vOscillations_67.y * vOscillations_67.z);
      fTarget_70 = 1.0;
      fAmount_69 = tmpvar_73;
      if ((tmpvar_73 < 0.0)) {
        fTarget_70 = -1.0;
        fAmount_69 = -(tmpvar_73);
      };
      fOscillation_68 = (((
        (mix (mix (tmpvar_73, fTarget_70, fAmount_69), fTarget_70, fAmount_69) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_67.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_67.w * _ST_WindBranchWhip.x)));
      vPos_63 = (tmpvar_61 + ((tmpvar_65 * fOscillation_68) * _ST_WindBranch.y));
      highp vec4 tmpvar_74;
      tmpvar_74.zw = vec2(0.0, 0.0);
      tmpvar_74.x = ((tmpvar_66 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_74.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_75;
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      tmpvar_75 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      fAdherenceScale_64 = (1.0 - ((
        ((tmpvar_75.x * tmpvar_75.y) * tmpvar_75.x)
       * tmpvar_75.y) * _ST_WindTurbulences.x));
      fAdherenceScale_64 = (fAdherenceScale_64 + ((vOscillations_67.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_63 = (vPos_63 + ((
        ((vRotatedBranchAnchor_9 - vPos_63) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_64) * _glesMultiTexCoord0.z));
      vPos_62 = vPos_63;
    } else {
      highp vec3 vPos_77;
      vPos_77 = vPos_62;
      highp vec3 tmpvar_78;
      tmpvar_78 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_79;
      tmpvar_79 = (_ST_WindBranch.x + (tmpvar_12.x + tmpvar_12.y));
      highp vec4 vOscillations_80;
      highp float fAmount_81;
      highp float fTarget_82;
      highp vec4 tmpvar_83;
      tmpvar_83.w = 0.0;
      tmpvar_83.x = (tmpvar_79 + _glesMultiTexCoord0.w);
      tmpvar_83.y = ((tmpvar_79 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_83.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_79 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_84;
      tmpvar_84 = abs(((
        fract((tmpvar_83 + 0.5))
       * 2.0) - 1.0));
      vOscillations_80 = (((
        (tmpvar_84 * tmpvar_84)
       * 
        (3.0 - (2.0 * tmpvar_84))
      ) - 0.5) * 2.0);
      highp float tmpvar_85;
      tmpvar_85 = (vOscillations_80.y * vOscillations_80.z);
      fTarget_82 = 1.0;
      fAmount_81 = tmpvar_85;
      if ((tmpvar_85 < 0.0)) {
        fTarget_82 = -1.0;
        fAmount_81 = -(tmpvar_85);
      };
      vPos_77 = (vPos_62 + ((tmpvar_78 * 
        (((mix (
          mix (tmpvar_85, fTarget_82, fAmount_81)
        , fTarget_82, fAmount_81) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_80.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_62 = vPos_77;
    };
    FinalPosition_11 = vPos_62;
  };
  if ((tmpvar_13 > 0.0)) {
    highp vec3 vPos_86;
    vPos_86 = FinalPosition_11;
    highp float fAdjust_87;
    highp float fLength_88;
    fLength_88 = sqrt(dot (FinalPosition_11, FinalPosition_11));
    highp float tmpvar_89;
    tmpvar_89 = (max ((FinalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_87 = tmpvar_89;
    if ((tmpvar_89 != 0.0)) {
      fAdjust_87 = pow (tmpvar_89, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_90;
    tmpvar_90.zw = vec2(0.0, 0.0);
    tmpvar_90.x = (tmpvar_12.x + _ST_WindGlobal.x);
    tmpvar_90.y = (tmpvar_12.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_91;
    highp vec4 tmpvar_92;
    tmpvar_92 = abs(((
      fract((tmpvar_90 + 0.5))
     * 2.0) - 1.0));
    tmpvar_91 = (((
      (tmpvar_92 * tmpvar_92)
     * 
      (3.0 - (2.0 * tmpvar_92))
    ) - 0.5) * 2.0);
    vPos_86.xz = (FinalPosition_11.xz + (vRotatedWindVector_10.xz * (
      ((_ST_WindGlobal.y * (tmpvar_91.x + (tmpvar_91.y * tmpvar_91.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_87)));
    vPos_86 = (normalize(vPos_86) * fLength_88);
    FinalPosition_11 = vPos_86;
  };
  tmpvar_7.xyz = FinalPosition_11;
  highp vec3 vertex_93;
  vertex_93 = tmpvar_7.xyz;
  highp vec4 clipPos_94;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp vec4 tmpvar_95;
    tmpvar_95.w = 1.0;
    tmpvar_95.xyz = vertex_93;
    highp vec3 tmpvar_96;
    tmpvar_96 = (_Object2World * tmpvar_95).xyz;
    highp vec4 v_97;
    v_97.x = _World2Object[0].x;
    v_97.y = _World2Object[1].x;
    v_97.z = _World2Object[2].x;
    v_97.w = _World2Object[3].x;
    highp vec4 v_98;
    v_98.x = _World2Object[0].y;
    v_98.y = _World2Object[1].y;
    v_98.z = _World2Object[2].y;
    v_98.w = _World2Object[3].y;
    highp vec4 v_99;
    v_99.x = _World2Object[0].z;
    v_99.y = _World2Object[1].z;
    v_99.z = _World2Object[2].z;
    v_99.w = _World2Object[3].z;
    highp vec3 tmpvar_100;
    tmpvar_100 = normalize(((
      (v_97.xyz * tmpvar_8.x)
     + 
      (v_98.xyz * tmpvar_8.y)
    ) + (v_99.xyz * tmpvar_8.z)));
    highp float tmpvar_101;
    tmpvar_101 = dot (tmpvar_100, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_96 * _WorldSpaceLightPos0.w)
    )));
    highp vec4 tmpvar_102;
    tmpvar_102.w = 1.0;
    tmpvar_102.xyz = (tmpvar_96 - (tmpvar_100 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_101 * tmpvar_101)))
    )));
    clipPos_94 = (unity_MatrixVP * tmpvar_102);
  } else {
    highp vec4 tmpvar_103;
    tmpvar_103.w = 1.0;
    tmpvar_103.xyz = vertex_93;
    clipPos_94 = (glstate_matrix_mvp * tmpvar_103);
  };
  highp vec4 clipPos_104;
  clipPos_104.xyw = clipPos_94.xyw;
  clipPos_104.z = (clipPos_94.z + clamp ((unity_LightShadowBias.x / clipPos_94.w), 0.0, 1.0));
  clipPos_104.z = mix (clipPos_104.z, max (clipPos_104.z, -(clipPos_94.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_104;
  xlv_TEXCOORD1 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  lowp float x_1;
  x_1 = ((texture2D (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
in vec4 _glesMultiTexCoord3;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
out mediump vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  highp vec2 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord3.xy;
  mediump vec2 tmpvar_5;
  highp vec2 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord0.xy;
  tmpvar_5 = tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_1;
  tmpvar_8 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_9;
  highp vec3 vRotatedWindVector_10;
  highp vec3 FinalPosition_11;
  FinalPosition_11 = tmpvar_1.xyz;
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  mediump float tmpvar_13;
  tmpvar_13 = (_WindQuality * _WindEnabled);
  if ((tmpvar_13 > 0.0)) {
    highp mat3 tmpvar_14;
    tmpvar_14[0] = _World2Object[0].xyz;
    tmpvar_14[1] = _World2Object[1].xyz;
    tmpvar_14[2] = _World2Object[2].xyz;
    vRotatedWindVector_10 = normalize((tmpvar_14 * _ST_WindVector.xyz));
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_9 = (normalize((tmpvar_15 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_16;
  tmpvar_16.x = tmpvar_3.w;
  tmpvar_16.y = tmpvar_4.x;
  tmpvar_16.z = tmpvar_4.y;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix ((_glesVertex.xyz - _glesMultiTexCoord1.xyz), tmpvar_16, unity_LODFade.xxx);
  FinalPosition_11 = tmpvar_17;
  if (((tmpvar_13 > 1.0) && (tmpvar_13 < 5.0))) {
    highp float tmpvar_18;
    tmpvar_18 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_19;
    isBestWind_19 = (tmpvar_13 == 4.0);
    bool bLeaf2_20;
    bLeaf2_20 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    highp vec3 vDirection_22;
    vDirection_22 = tmpvar_2;
    highp float tmpvar_23;
    if (bLeaf2_20) {
      tmpvar_23 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_23 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_24;
    if (bLeaf2_20) {
      tmpvar_24 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_24 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_25;
    highp vec4 tmpvar_26;
    tmpvar_26.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_26.x = (tmpvar_23 + tmpvar_18);
    highp vec4 tmpvar_27;
    tmpvar_27 = abs(((
      fract((tmpvar_26 + 0.5))
     * 2.0) - 1.0));
    vPos_25 = (tmpvar_17 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_24 * (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_22 = tmpvar_2;
    vPos_21 = vPos_25;
    if (isBestWind_19) {
      highp vec3 tmpvar_28;
      tmpvar_28 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_29;
      if (bLeaf2_20) {
        tmpvar_29 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_29 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_30;
      if (bLeaf2_20) {
        tmpvar_30 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_30 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_31;
      if (bLeaf2_20) {
        tmpvar_31 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_32;
      if (bLeaf2_20) {
        tmpvar_32 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_33;
      if (bLeaf2_20) {
        tmpvar_33 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_33 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_34;
      if (bLeaf2_20) {
        tmpvar_34 = bool(1);
      } else {
        tmpvar_34 = bool(1);
      };
      highp float fTwitch_35;
      highp vec3 vAxis_36;
      highp vec3 tmpvar_37;
      tmpvar_37 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_38;
      tmpvar_38 = ((tmpvar_37.x + tmpvar_37.y) + tmpvar_37.z);
      highp vec4 tmpvar_39;
      tmpvar_39.x = (tmpvar_29 + tmpvar_38);
      tmpvar_39.y = ((tmpvar_29 * 0.75) - tmpvar_38);
      tmpvar_39.z = ((tmpvar_29 * 0.01) + tmpvar_38);
      tmpvar_39.w = (tmpvar_29 + tmpvar_38);
      highp vec4 tmpvar_40;
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      tmpvar_40 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = sqrt(dot (vPos_25, vPos_25));
      highp float fAngle_43;
      fAngle_43 = ((_glesMultiTexCoord2.x * tmpvar_31) * (tmpvar_40.x + (tmpvar_40.y * tmpvar_40.y)));
      highp vec2 vSinCos_44;
      vSinCos_44.x = sin(fAngle_43);
      vSinCos_44.y = cos(fAngle_43);
      highp float tmpvar_45;
      tmpvar_45 = (1.0 - vSinCos_44.y);
      highp mat3 tmpvar_46;
      tmpvar_46[0].x = (((tmpvar_45 * tmpvar_28.x) * tmpvar_28.x) + vSinCos_44.y);
      tmpvar_46[0].y = (((tmpvar_45 * tmpvar_28.x) * tmpvar_28.y) + (vSinCos_44.x * tmpvar_28.z));
      tmpvar_46[0].z = (((tmpvar_45 * tmpvar_28.x) * tmpvar_28.z) - (vSinCos_44.x * tmpvar_28.y));
      tmpvar_46[1].x = (((tmpvar_45 * tmpvar_28.x) * tmpvar_28.y) - (vSinCos_44.x * tmpvar_28.z));
      tmpvar_46[1].y = (((tmpvar_45 * tmpvar_28.y) * tmpvar_28.y) + vSinCos_44.y);
      tmpvar_46[1].z = (((tmpvar_45 * tmpvar_28.y) * tmpvar_28.z) + (vSinCos_44.x * tmpvar_28.x));
      tmpvar_46[2].x = (((tmpvar_45 * tmpvar_28.x) * tmpvar_28.z) + (vSinCos_44.x * tmpvar_28.y));
      tmpvar_46[2].y = (((tmpvar_45 * tmpvar_28.y) * tmpvar_28.z) - (vSinCos_44.x * tmpvar_28.x));
      tmpvar_46[2].z = (((tmpvar_45 * tmpvar_28.z) * tmpvar_28.z) + vSinCos_44.y);
      highp vec3 tmpvar_47;
      tmpvar_47 = ((tmpvar_28.yzx * vRotatedWindVector_10.zxy) - (tmpvar_28.zxy * vRotatedWindVector_10.yzx));
      vAxis_36.xz = tmpvar_47.xz;
      highp float tmpvar_48;
      tmpvar_48 = clamp (dot (vRotatedWindVector_10, tmpvar_28), -1.0, 1.0);
      vAxis_36.y = (tmpvar_47.y + tmpvar_48);
      highp vec3 tmpvar_49;
      tmpvar_49 = normalize(vAxis_36);
      vAxis_36 = tmpvar_49;
      highp float tmpvar_50;
      tmpvar_50 = (1.570796 - (sign(tmpvar_48) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_48))) * (1.570796 + (abs(tmpvar_48) * (-0.2146018 + 
          (abs(tmpvar_48) * (0.08656672 + (abs(tmpvar_48) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_51;
      tmpvar_51 = (tmpvar_40.y - (tmpvar_40.x * tmpvar_40.x));
      fTwitch_35 = 0.0;
      if (tmpvar_34) {
        highp float fTime_52;
        fTime_52 = (tmpvar_33.z + tmpvar_38);
        highp vec4 tmpvar_53;
        tmpvar_53.zw = vec2(0.0, 0.0);
        tmpvar_53.x = fTime_52;
        tmpvar_53.y = (0.87 * fTime_52);
        highp vec4 tmpvar_54;
        highp vec4 tmpvar_55;
        tmpvar_55 = abs(((
          fract((tmpvar_53 + 0.5))
         * 2.0) - 1.0));
        tmpvar_54 = (((
          (tmpvar_55 * tmpvar_55)
         * 
          (3.0 - (2.0 * tmpvar_55))
        ) - 0.5) * 2.0);
        fTwitch_35 = (tmpvar_33.x * pow (clamp (
          ((((tmpvar_54.x * tmpvar_54.y) * tmpvar_54.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_33.y));
      };
      highp float fAngle_56;
      fAngle_56 = (_glesMultiTexCoord2.x * ((
        (tmpvar_50 * tmpvar_32)
       + 
        (tmpvar_51 * tmpvar_30)
      ) + fTwitch_35));
      highp vec2 vSinCos_57;
      vSinCos_57.x = sin(fAngle_56);
      vSinCos_57.y = cos(fAngle_56);
      highp float tmpvar_58;
      tmpvar_58 = (1.0 - vSinCos_57.y);
      highp mat3 tmpvar_59;
      tmpvar_59[0].x = (((tmpvar_58 * tmpvar_49.x) * tmpvar_49.x) + vSinCos_57.y);
      tmpvar_59[0].y = (((tmpvar_58 * tmpvar_49.x) * tmpvar_49.y) + (vSinCos_57.x * tmpvar_49.z));
      tmpvar_59[0].z = (((tmpvar_58 * tmpvar_49.x) * tmpvar_49.z) - (vSinCos_57.x * tmpvar_49.y));
      tmpvar_59[1].x = (((tmpvar_58 * tmpvar_49.x) * tmpvar_49.y) - (vSinCos_57.x * tmpvar_49.z));
      tmpvar_59[1].y = (((tmpvar_58 * tmpvar_49.y) * tmpvar_49.y) + vSinCos_57.y);
      tmpvar_59[1].z = (((tmpvar_58 * tmpvar_49.y) * tmpvar_49.z) + (vSinCos_57.x * tmpvar_49.x));
      tmpvar_59[2].x = (((tmpvar_58 * tmpvar_49.x) * tmpvar_49.z) + (vSinCos_57.x * tmpvar_49.y));
      tmpvar_59[2].y = (((tmpvar_58 * tmpvar_49.y) * tmpvar_49.z) - (vSinCos_57.x * tmpvar_49.x));
      tmpvar_59[2].z = (((tmpvar_58 * tmpvar_49.z) * tmpvar_49.z) + vSinCos_57.y);
      highp mat3 tmpvar_60;
      tmpvar_60 = (tmpvar_46 * tmpvar_59);
      vDirection_22 = (tmpvar_60 * _glesNormal);
      vPos_21 = (normalize((tmpvar_60 * vPos_25)) * tmpvar_42);
    };
    tmpvar_8 = vDirection_22;
    FinalPosition_11 = vPos_21;
  };
  highp vec3 tmpvar_61;
  tmpvar_61 = (FinalPosition_11 + _glesMultiTexCoord1.xyz);
  FinalPosition_11 = tmpvar_61;
  if ((tmpvar_13 >= 3.0)) {
    highp vec3 vPos_62;
    vPos_62 = tmpvar_61;
    if ((tmpvar_13 == 5.0)) {
      highp vec3 vPos_63;
      vPos_63 = tmpvar_61;
      highp float fAdherenceScale_64;
      highp vec3 tmpvar_65;
      tmpvar_65 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_66;
      tmpvar_66 = (_ST_WindBranch.x + (tmpvar_12.x + tmpvar_12.y));
      highp vec4 vOscillations_67;
      highp float fOscillation_68;
      fOscillation_68 = 1.0;
      highp float fAmount_69;
      highp float fTarget_70;
      highp vec4 tmpvar_71;
      tmpvar_71.x = (tmpvar_66 + _glesMultiTexCoord0.w);
      tmpvar_71.y = ((tmpvar_66 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_71.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_66 + _glesMultiTexCoord0.w));
      tmpvar_71.w = ((tmpvar_66 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_72;
      tmpvar_72 = abs(((
        fract((tmpvar_71 + 0.5))
       * 2.0) - 1.0));
      vOscillations_67 = (((
        (tmpvar_72 * tmpvar_72)
       * 
        (3.0 - (2.0 * tmpvar_72))
      ) - 0.5) * 2.0);
      highp float tmpvar_73;
      tmpvar_73 = (vOscillations_67.y * vOscillations_67.z);
      fTarget_70 = 1.0;
      fAmount_69 = tmpvar_73;
      if ((tmpvar_73 < 0.0)) {
        fTarget_70 = -1.0;
        fAmount_69 = -(tmpvar_73);
      };
      fOscillation_68 = (((
        (mix (mix (tmpvar_73, fTarget_70, fAmount_69), fTarget_70, fAmount_69) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_67.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_67.w * _ST_WindBranchWhip.x)));
      vPos_63 = (tmpvar_61 + ((tmpvar_65 * fOscillation_68) * _ST_WindBranch.y));
      highp vec4 tmpvar_74;
      tmpvar_74.zw = vec2(0.0, 0.0);
      tmpvar_74.x = ((tmpvar_66 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_74.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_75;
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      tmpvar_75 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      fAdherenceScale_64 = (1.0 - ((
        ((tmpvar_75.x * tmpvar_75.y) * tmpvar_75.x)
       * tmpvar_75.y) * _ST_WindTurbulences.x));
      fAdherenceScale_64 = (fAdherenceScale_64 + ((vOscillations_67.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_63 = (vPos_63 + ((
        ((vRotatedBranchAnchor_9 - vPos_63) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_64) * _glesMultiTexCoord0.z));
      vPos_62 = vPos_63;
    } else {
      highp vec3 vPos_77;
      vPos_77 = vPos_62;
      highp vec3 tmpvar_78;
      tmpvar_78 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_79;
      tmpvar_79 = (_ST_WindBranch.x + (tmpvar_12.x + tmpvar_12.y));
      highp vec4 vOscillations_80;
      highp float fAmount_81;
      highp float fTarget_82;
      highp vec4 tmpvar_83;
      tmpvar_83.w = 0.0;
      tmpvar_83.x = (tmpvar_79 + _glesMultiTexCoord0.w);
      tmpvar_83.y = ((tmpvar_79 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_83.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_79 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_84;
      tmpvar_84 = abs(((
        fract((tmpvar_83 + 0.5))
       * 2.0) - 1.0));
      vOscillations_80 = (((
        (tmpvar_84 * tmpvar_84)
       * 
        (3.0 - (2.0 * tmpvar_84))
      ) - 0.5) * 2.0);
      highp float tmpvar_85;
      tmpvar_85 = (vOscillations_80.y * vOscillations_80.z);
      fTarget_82 = 1.0;
      fAmount_81 = tmpvar_85;
      if ((tmpvar_85 < 0.0)) {
        fTarget_82 = -1.0;
        fAmount_81 = -(tmpvar_85);
      };
      vPos_77 = (vPos_62 + ((tmpvar_78 * 
        (((mix (
          mix (tmpvar_85, fTarget_82, fAmount_81)
        , fTarget_82, fAmount_81) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_80.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_62 = vPos_77;
    };
    FinalPosition_11 = vPos_62;
  };
  if ((tmpvar_13 > 0.0)) {
    highp vec3 vPos_86;
    vPos_86 = FinalPosition_11;
    highp float fAdjust_87;
    highp float fLength_88;
    fLength_88 = sqrt(dot (FinalPosition_11, FinalPosition_11));
    highp float tmpvar_89;
    tmpvar_89 = (max ((FinalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_87 = tmpvar_89;
    if ((tmpvar_89 != 0.0)) {
      fAdjust_87 = pow (tmpvar_89, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_90;
    tmpvar_90.zw = vec2(0.0, 0.0);
    tmpvar_90.x = (tmpvar_12.x + _ST_WindGlobal.x);
    tmpvar_90.y = (tmpvar_12.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_91;
    highp vec4 tmpvar_92;
    tmpvar_92 = abs(((
      fract((tmpvar_90 + 0.5))
     * 2.0) - 1.0));
    tmpvar_91 = (((
      (tmpvar_92 * tmpvar_92)
     * 
      (3.0 - (2.0 * tmpvar_92))
    ) - 0.5) * 2.0);
    vPos_86.xz = (FinalPosition_11.xz + (vRotatedWindVector_10.xz * (
      ((_ST_WindGlobal.y * (tmpvar_91.x + (tmpvar_91.y * tmpvar_91.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_87)));
    vPos_86 = (normalize(vPos_86) * fLength_88);
    FinalPosition_11 = vPos_86;
  };
  tmpvar_7.xyz = FinalPosition_11;
  highp vec3 vertex_93;
  vertex_93 = tmpvar_7.xyz;
  highp vec4 clipPos_94;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp vec4 tmpvar_95;
    tmpvar_95.w = 1.0;
    tmpvar_95.xyz = vertex_93;
    highp vec3 tmpvar_96;
    tmpvar_96 = (_Object2World * tmpvar_95).xyz;
    highp vec4 v_97;
    v_97.x = _World2Object[0].x;
    v_97.y = _World2Object[1].x;
    v_97.z = _World2Object[2].x;
    v_97.w = _World2Object[3].x;
    highp vec4 v_98;
    v_98.x = _World2Object[0].y;
    v_98.y = _World2Object[1].y;
    v_98.z = _World2Object[2].y;
    v_98.w = _World2Object[3].y;
    highp vec4 v_99;
    v_99.x = _World2Object[0].z;
    v_99.y = _World2Object[1].z;
    v_99.z = _World2Object[2].z;
    v_99.w = _World2Object[3].z;
    highp vec3 tmpvar_100;
    tmpvar_100 = normalize(((
      (v_97.xyz * tmpvar_8.x)
     + 
      (v_98.xyz * tmpvar_8.y)
    ) + (v_99.xyz * tmpvar_8.z)));
    highp float tmpvar_101;
    tmpvar_101 = dot (tmpvar_100, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_96 * _WorldSpaceLightPos0.w)
    )));
    highp vec4 tmpvar_102;
    tmpvar_102.w = 1.0;
    tmpvar_102.xyz = (tmpvar_96 - (tmpvar_100 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_101 * tmpvar_101)))
    )));
    clipPos_94 = (unity_MatrixVP * tmpvar_102);
  } else {
    highp vec4 tmpvar_103;
    tmpvar_103.w = 1.0;
    tmpvar_103.xyz = vertex_93;
    clipPos_94 = (glstate_matrix_mvp * tmpvar_103);
  };
  highp vec4 clipPos_104;
  clipPos_104.xyw = clipPos_94.xyw;
  clipPos_104.z = (clipPos_94.z + clamp ((unity_LightShadowBias.x / clipPos_94.w), 0.0, 1.0));
  clipPos_104.z = mix (clipPos_104.z, max (clipPos_104.z, -(clipPos_94.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_104;
  xlv_TEXCOORD1 = tmpvar_5;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
in mediump vec2 xlv_TEXCOORD1;
void main ()
{
  lowp float x_1;
  x_1 = ((texture (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  _glesFragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}



#endif"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord1;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord3.xy;
  mediump vec2 tmpvar_4;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord0.xy;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_7;
  highp vec3 vRotatedWindVector_8;
  highp vec3 FinalPosition_9;
  FinalPosition_9 = tmpvar_1.xyz;
  highp vec3 tmpvar_10;
  tmpvar_10.x = _Object2World[3].x;
  tmpvar_10.y = _Object2World[3].y;
  tmpvar_10.z = _Object2World[3].z;
  mediump float tmpvar_11;
  tmpvar_11 = (_WindQuality * _WindEnabled);
  if ((tmpvar_11 > 0.0)) {
    highp mat3 tmpvar_12;
    tmpvar_12[0] = _World2Object[0].xyz;
    tmpvar_12[1] = _World2Object[1].xyz;
    tmpvar_12[2] = _World2Object[2].xyz;
    vRotatedWindVector_8 = normalize((tmpvar_12 * _ST_WindVector.xyz));
    highp mat3 tmpvar_13;
    tmpvar_13[0] = _World2Object[0].xyz;
    tmpvar_13[1] = _World2Object[1].xyz;
    tmpvar_13[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_7 = (normalize((tmpvar_13 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_8 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_7 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_14;
  tmpvar_14.x = tmpvar_2.w;
  tmpvar_14.y = tmpvar_3.x;
  tmpvar_14.z = tmpvar_3.y;
  highp vec3 tmpvar_15;
  tmpvar_15 = mix ((_glesVertex.xyz - _glesMultiTexCoord1.xyz), tmpvar_14, unity_LODFade.xxx);
  FinalPosition_9 = tmpvar_15;
  if (((tmpvar_11 > 1.0) && (tmpvar_11 < 5.0))) {
    highp float tmpvar_16;
    tmpvar_16 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_17;
    isBestWind_17 = (tmpvar_11 == 4.0);
    bool bLeaf2_18;
    bLeaf2_18 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_19;
    vPos_19 = tmpvar_15;
    highp float tmpvar_20;
    if (bLeaf2_18) {
      tmpvar_20 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_20 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_21;
    if (bLeaf2_18) {
      tmpvar_21 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_21 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_22;
    highp vec4 tmpvar_23;
    tmpvar_23.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_23.x = (tmpvar_20 + tmpvar_16);
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (tmpvar_15 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_21 * (((
        (tmpvar_24 * tmpvar_24)
       * 
        (3.0 - (2.0 * tmpvar_24))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vPos_19 = vPos_22;
    if (isBestWind_17) {
      highp vec3 tmpvar_25;
      tmpvar_25 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_26;
      if (bLeaf2_18) {
        tmpvar_26 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_26 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_27;
      if (bLeaf2_18) {
        tmpvar_27 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_27 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_28;
      if (bLeaf2_18) {
        tmpvar_28 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_28 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_29;
      if (bLeaf2_18) {
        tmpvar_29 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_29 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_30;
      if (bLeaf2_18) {
        tmpvar_30 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_30 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_31;
      if (bLeaf2_18) {
        tmpvar_31 = bool(1);
      } else {
        tmpvar_31 = bool(1);
      };
      highp float fTwitch_32;
      highp vec3 vAxis_33;
      highp vec3 tmpvar_34;
      tmpvar_34 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_35;
      tmpvar_35 = ((tmpvar_34.x + tmpvar_34.y) + tmpvar_34.z);
      highp vec4 tmpvar_36;
      tmpvar_36.x = (tmpvar_26 + tmpvar_35);
      tmpvar_36.y = ((tmpvar_26 * 0.75) - tmpvar_35);
      tmpvar_36.z = ((tmpvar_26 * 0.01) + tmpvar_35);
      tmpvar_36.w = (tmpvar_26 + tmpvar_35);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      highp float tmpvar_39;
      tmpvar_39 = sqrt(dot (vPos_22, vPos_22));
      highp float fAngle_40;
      fAngle_40 = ((_glesMultiTexCoord2.x * tmpvar_28) * (tmpvar_37.x + (tmpvar_37.y * tmpvar_37.y)));
      highp vec2 vSinCos_41;
      vSinCos_41.x = sin(fAngle_40);
      vSinCos_41.y = cos(fAngle_40);
      highp float tmpvar_42;
      tmpvar_42 = (1.0 - vSinCos_41.y);
      highp mat3 tmpvar_43;
      tmpvar_43[0].x = (((tmpvar_42 * tmpvar_25.x) * tmpvar_25.x) + vSinCos_41.y);
      tmpvar_43[0].y = (((tmpvar_42 * tmpvar_25.x) * tmpvar_25.y) + (vSinCos_41.x * tmpvar_25.z));
      tmpvar_43[0].z = (((tmpvar_42 * tmpvar_25.x) * tmpvar_25.z) - (vSinCos_41.x * tmpvar_25.y));
      tmpvar_43[1].x = (((tmpvar_42 * tmpvar_25.x) * tmpvar_25.y) - (vSinCos_41.x * tmpvar_25.z));
      tmpvar_43[1].y = (((tmpvar_42 * tmpvar_25.y) * tmpvar_25.y) + vSinCos_41.y);
      tmpvar_43[1].z = (((tmpvar_42 * tmpvar_25.y) * tmpvar_25.z) + (vSinCos_41.x * tmpvar_25.x));
      tmpvar_43[2].x = (((tmpvar_42 * tmpvar_25.x) * tmpvar_25.z) + (vSinCos_41.x * tmpvar_25.y));
      tmpvar_43[2].y = (((tmpvar_42 * tmpvar_25.y) * tmpvar_25.z) - (vSinCos_41.x * tmpvar_25.x));
      tmpvar_43[2].z = (((tmpvar_42 * tmpvar_25.z) * tmpvar_25.z) + vSinCos_41.y);
      highp vec3 tmpvar_44;
      tmpvar_44 = ((tmpvar_25.yzx * vRotatedWindVector_8.zxy) - (tmpvar_25.zxy * vRotatedWindVector_8.yzx));
      vAxis_33.xz = tmpvar_44.xz;
      highp float tmpvar_45;
      tmpvar_45 = clamp (dot (vRotatedWindVector_8, tmpvar_25), -1.0, 1.0);
      vAxis_33.y = (tmpvar_44.y + tmpvar_45);
      highp vec3 tmpvar_46;
      tmpvar_46 = normalize(vAxis_33);
      vAxis_33 = tmpvar_46;
      highp float tmpvar_47;
      tmpvar_47 = (1.570796 - (sign(tmpvar_45) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_45))) * (1.570796 + (abs(tmpvar_45) * (-0.2146018 + 
          (abs(tmpvar_45) * (0.08656672 + (abs(tmpvar_45) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_48;
      tmpvar_48 = (tmpvar_37.y - (tmpvar_37.x * tmpvar_37.x));
      fTwitch_32 = 0.0;
      if (tmpvar_31) {
        highp float fTime_49;
        fTime_49 = (tmpvar_30.z + tmpvar_35);
        highp vec4 tmpvar_50;
        tmpvar_50.zw = vec2(0.0, 0.0);
        tmpvar_50.x = fTime_49;
        tmpvar_50.y = (0.87 * fTime_49);
        highp vec4 tmpvar_51;
        highp vec4 tmpvar_52;
        tmpvar_52 = abs(((
          fract((tmpvar_50 + 0.5))
         * 2.0) - 1.0));
        tmpvar_51 = (((
          (tmpvar_52 * tmpvar_52)
         * 
          (3.0 - (2.0 * tmpvar_52))
        ) - 0.5) * 2.0);
        fTwitch_32 = (tmpvar_30.x * pow (clamp (
          ((((tmpvar_51.x * tmpvar_51.y) * tmpvar_51.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_30.y));
      };
      highp float fAngle_53;
      fAngle_53 = (_glesMultiTexCoord2.x * ((
        (tmpvar_47 * tmpvar_29)
       + 
        (tmpvar_48 * tmpvar_27)
      ) + fTwitch_32));
      highp vec2 vSinCos_54;
      vSinCos_54.x = sin(fAngle_53);
      vSinCos_54.y = cos(fAngle_53);
      highp float tmpvar_55;
      tmpvar_55 = (1.0 - vSinCos_54.y);
      highp mat3 tmpvar_56;
      tmpvar_56[0].x = (((tmpvar_55 * tmpvar_46.x) * tmpvar_46.x) + vSinCos_54.y);
      tmpvar_56[0].y = (((tmpvar_55 * tmpvar_46.x) * tmpvar_46.y) + (vSinCos_54.x * tmpvar_46.z));
      tmpvar_56[0].z = (((tmpvar_55 * tmpvar_46.x) * tmpvar_46.z) - (vSinCos_54.x * tmpvar_46.y));
      tmpvar_56[1].x = (((tmpvar_55 * tmpvar_46.x) * tmpvar_46.y) - (vSinCos_54.x * tmpvar_46.z));
      tmpvar_56[1].y = (((tmpvar_55 * tmpvar_46.y) * tmpvar_46.y) + vSinCos_54.y);
      tmpvar_56[1].z = (((tmpvar_55 * tmpvar_46.y) * tmpvar_46.z) + (vSinCos_54.x * tmpvar_46.x));
      tmpvar_56[2].x = (((tmpvar_55 * tmpvar_46.x) * tmpvar_46.z) + (vSinCos_54.x * tmpvar_46.y));
      tmpvar_56[2].y = (((tmpvar_55 * tmpvar_46.y) * tmpvar_46.z) - (vSinCos_54.x * tmpvar_46.x));
      tmpvar_56[2].z = (((tmpvar_55 * tmpvar_46.z) * tmpvar_46.z) + vSinCos_54.y);
      vPos_19 = (normalize((
        (tmpvar_43 * tmpvar_56)
       * vPos_22)) * tmpvar_39);
    };
    FinalPosition_9 = vPos_19;
  };
  highp vec3 tmpvar_57;
  tmpvar_57 = (FinalPosition_9 + _glesMultiTexCoord1.xyz);
  FinalPosition_9 = tmpvar_57;
  if ((tmpvar_11 >= 3.0)) {
    highp vec3 vPos_58;
    vPos_58 = tmpvar_57;
    if ((tmpvar_11 == 5.0)) {
      highp vec3 vPos_59;
      vPos_59 = tmpvar_57;
      highp float fAdherenceScale_60;
      highp vec3 tmpvar_61;
      tmpvar_61 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_62;
      tmpvar_62 = (_ST_WindBranch.x + (tmpvar_10.x + tmpvar_10.y));
      highp vec4 vOscillations_63;
      highp float fOscillation_64;
      fOscillation_64 = 1.0;
      highp float fAmount_65;
      highp float fTarget_66;
      highp vec4 tmpvar_67;
      tmpvar_67.x = (tmpvar_62 + _glesMultiTexCoord0.w);
      tmpvar_67.y = ((tmpvar_62 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_67.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_62 + _glesMultiTexCoord0.w));
      tmpvar_67.w = ((tmpvar_62 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_68;
      tmpvar_68 = abs(((
        fract((tmpvar_67 + 0.5))
       * 2.0) - 1.0));
      vOscillations_63 = (((
        (tmpvar_68 * tmpvar_68)
       * 
        (3.0 - (2.0 * tmpvar_68))
      ) - 0.5) * 2.0);
      highp float tmpvar_69;
      tmpvar_69 = (vOscillations_63.y * vOscillations_63.z);
      fTarget_66 = 1.0;
      fAmount_65 = tmpvar_69;
      if ((tmpvar_69 < 0.0)) {
        fTarget_66 = -1.0;
        fAmount_65 = -(tmpvar_69);
      };
      fOscillation_64 = (((
        (mix (mix (tmpvar_69, fTarget_66, fAmount_65), fTarget_66, fAmount_65) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_63.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_63.w * _ST_WindBranchWhip.x)));
      vPos_59 = (tmpvar_57 + ((tmpvar_61 * fOscillation_64) * _ST_WindBranch.y));
      highp vec4 tmpvar_70;
      tmpvar_70.zw = vec2(0.0, 0.0);
      tmpvar_70.x = ((tmpvar_62 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_70.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_71;
      highp vec4 tmpvar_72;
      tmpvar_72 = abs(((
        fract((tmpvar_70 + 0.5))
       * 2.0) - 1.0));
      tmpvar_71 = (((
        (tmpvar_72 * tmpvar_72)
       * 
        (3.0 - (2.0 * tmpvar_72))
      ) - 0.5) * 2.0);
      fAdherenceScale_60 = (1.0 - ((
        ((tmpvar_71.x * tmpvar_71.y) * tmpvar_71.x)
       * tmpvar_71.y) * _ST_WindTurbulences.x));
      fAdherenceScale_60 = (fAdherenceScale_60 + ((vOscillations_63.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_59 = (vPos_59 + ((
        ((vRotatedBranchAnchor_7 - vPos_59) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_60) * _glesMultiTexCoord0.z));
      vPos_58 = vPos_59;
    } else {
      highp vec3 vPos_73;
      vPos_73 = vPos_58;
      highp vec3 tmpvar_74;
      tmpvar_74 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_75;
      tmpvar_75 = (_ST_WindBranch.x + (tmpvar_10.x + tmpvar_10.y));
      highp vec4 vOscillations_76;
      highp float fAmount_77;
      highp float fTarget_78;
      highp vec4 tmpvar_79;
      tmpvar_79.w = 0.0;
      tmpvar_79.x = (tmpvar_75 + _glesMultiTexCoord0.w);
      tmpvar_79.y = ((tmpvar_75 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_79.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_75 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      vOscillations_76 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      highp float tmpvar_81;
      tmpvar_81 = (vOscillations_76.y * vOscillations_76.z);
      fTarget_78 = 1.0;
      fAmount_77 = tmpvar_81;
      if ((tmpvar_81 < 0.0)) {
        fTarget_78 = -1.0;
        fAmount_77 = -(tmpvar_81);
      };
      vPos_73 = (vPos_58 + ((tmpvar_74 * 
        (((mix (
          mix (tmpvar_81, fTarget_78, fAmount_77)
        , fTarget_78, fAmount_77) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_76.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_58 = vPos_73;
    };
    FinalPosition_9 = vPos_58;
  };
  if ((tmpvar_11 > 0.0)) {
    highp vec3 vPos_82;
    vPos_82 = FinalPosition_9;
    highp float fAdjust_83;
    highp float fLength_84;
    fLength_84 = sqrt(dot (FinalPosition_9, FinalPosition_9));
    highp float tmpvar_85;
    tmpvar_85 = (max ((FinalPosition_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_83 = tmpvar_85;
    if ((tmpvar_85 != 0.0)) {
      fAdjust_83 = pow (tmpvar_85, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_86;
    tmpvar_86.zw = vec2(0.0, 0.0);
    tmpvar_86.x = (tmpvar_10.x + _ST_WindGlobal.x);
    tmpvar_86.y = (tmpvar_10.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_87;
    highp vec4 tmpvar_88;
    tmpvar_88 = abs(((
      fract((tmpvar_86 + 0.5))
     * 2.0) - 1.0));
    tmpvar_87 = (((
      (tmpvar_88 * tmpvar_88)
     * 
      (3.0 - (2.0 * tmpvar_88))
    ) - 0.5) * 2.0);
    vPos_82.xz = (FinalPosition_9.xz + (vRotatedWindVector_8.xz * (
      ((_ST_WindGlobal.y * (tmpvar_87.x + (tmpvar_87.y * tmpvar_87.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_83)));
    vPos_82 = (normalize(vPos_82) * fLength_84);
    FinalPosition_9 = vPos_82;
  };
  tmpvar_6.xyz = FinalPosition_9;
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_6).xyz - _LightPositionRange.xyz);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD1 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _LightPositionRange;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  lowp float x_1;
  x_1 = ((texture2D (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_2;
  tmpvar_2 = fract((vec4(1.0, 255.0, 65025.0, 1.658138e+07) * min (
    (sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w)
  , 0.999)));
  highp vec4 tmpvar_3;
  tmpvar_3 = (tmpvar_2 - (tmpvar_2.yzww * 0.003921569));
  gl_FragData[0] = tmpvar_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
in vec4 _glesMultiTexCoord3;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
out highp vec3 xlv_TEXCOORD0;
out mediump vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord1;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord3.xy;
  mediump vec2 tmpvar_4;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord0.xy;
  tmpvar_4 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_7;
  highp vec3 vRotatedWindVector_8;
  highp vec3 FinalPosition_9;
  FinalPosition_9 = tmpvar_1.xyz;
  highp vec3 tmpvar_10;
  tmpvar_10.x = _Object2World[3].x;
  tmpvar_10.y = _Object2World[3].y;
  tmpvar_10.z = _Object2World[3].z;
  mediump float tmpvar_11;
  tmpvar_11 = (_WindQuality * _WindEnabled);
  if ((tmpvar_11 > 0.0)) {
    highp mat3 tmpvar_12;
    tmpvar_12[0] = _World2Object[0].xyz;
    tmpvar_12[1] = _World2Object[1].xyz;
    tmpvar_12[2] = _World2Object[2].xyz;
    vRotatedWindVector_8 = normalize((tmpvar_12 * _ST_WindVector.xyz));
    highp mat3 tmpvar_13;
    tmpvar_13[0] = _World2Object[0].xyz;
    tmpvar_13[1] = _World2Object[1].xyz;
    tmpvar_13[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_7 = (normalize((tmpvar_13 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_8 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_7 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_14;
  tmpvar_14.x = tmpvar_2.w;
  tmpvar_14.y = tmpvar_3.x;
  tmpvar_14.z = tmpvar_3.y;
  highp vec3 tmpvar_15;
  tmpvar_15 = mix ((_glesVertex.xyz - _glesMultiTexCoord1.xyz), tmpvar_14, unity_LODFade.xxx);
  FinalPosition_9 = tmpvar_15;
  if (((tmpvar_11 > 1.0) && (tmpvar_11 < 5.0))) {
    highp float tmpvar_16;
    tmpvar_16 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_17;
    isBestWind_17 = (tmpvar_11 == 4.0);
    bool bLeaf2_18;
    bLeaf2_18 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_19;
    vPos_19 = tmpvar_15;
    highp float tmpvar_20;
    if (bLeaf2_18) {
      tmpvar_20 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_20 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_21;
    if (bLeaf2_18) {
      tmpvar_21 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_21 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_22;
    highp vec4 tmpvar_23;
    tmpvar_23.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_23.x = (tmpvar_20 + tmpvar_16);
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (tmpvar_15 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_21 * (((
        (tmpvar_24 * tmpvar_24)
       * 
        (3.0 - (2.0 * tmpvar_24))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vPos_19 = vPos_22;
    if (isBestWind_17) {
      highp vec3 tmpvar_25;
      tmpvar_25 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_26;
      if (bLeaf2_18) {
        tmpvar_26 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_26 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_27;
      if (bLeaf2_18) {
        tmpvar_27 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_27 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_28;
      if (bLeaf2_18) {
        tmpvar_28 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_28 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_29;
      if (bLeaf2_18) {
        tmpvar_29 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_29 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_30;
      if (bLeaf2_18) {
        tmpvar_30 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_30 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_31;
      if (bLeaf2_18) {
        tmpvar_31 = bool(1);
      } else {
        tmpvar_31 = bool(1);
      };
      highp float fTwitch_32;
      highp vec3 vAxis_33;
      highp vec3 tmpvar_34;
      tmpvar_34 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_35;
      tmpvar_35 = ((tmpvar_34.x + tmpvar_34.y) + tmpvar_34.z);
      highp vec4 tmpvar_36;
      tmpvar_36.x = (tmpvar_26 + tmpvar_35);
      tmpvar_36.y = ((tmpvar_26 * 0.75) - tmpvar_35);
      tmpvar_36.z = ((tmpvar_26 * 0.01) + tmpvar_35);
      tmpvar_36.w = (tmpvar_26 + tmpvar_35);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      highp float tmpvar_39;
      tmpvar_39 = sqrt(dot (vPos_22, vPos_22));
      highp float fAngle_40;
      fAngle_40 = ((_glesMultiTexCoord2.x * tmpvar_28) * (tmpvar_37.x + (tmpvar_37.y * tmpvar_37.y)));
      highp vec2 vSinCos_41;
      vSinCos_41.x = sin(fAngle_40);
      vSinCos_41.y = cos(fAngle_40);
      highp float tmpvar_42;
      tmpvar_42 = (1.0 - vSinCos_41.y);
      highp mat3 tmpvar_43;
      tmpvar_43[0].x = (((tmpvar_42 * tmpvar_25.x) * tmpvar_25.x) + vSinCos_41.y);
      tmpvar_43[0].y = (((tmpvar_42 * tmpvar_25.x) * tmpvar_25.y) + (vSinCos_41.x * tmpvar_25.z));
      tmpvar_43[0].z = (((tmpvar_42 * tmpvar_25.x) * tmpvar_25.z) - (vSinCos_41.x * tmpvar_25.y));
      tmpvar_43[1].x = (((tmpvar_42 * tmpvar_25.x) * tmpvar_25.y) - (vSinCos_41.x * tmpvar_25.z));
      tmpvar_43[1].y = (((tmpvar_42 * tmpvar_25.y) * tmpvar_25.y) + vSinCos_41.y);
      tmpvar_43[1].z = (((tmpvar_42 * tmpvar_25.y) * tmpvar_25.z) + (vSinCos_41.x * tmpvar_25.x));
      tmpvar_43[2].x = (((tmpvar_42 * tmpvar_25.x) * tmpvar_25.z) + (vSinCos_41.x * tmpvar_25.y));
      tmpvar_43[2].y = (((tmpvar_42 * tmpvar_25.y) * tmpvar_25.z) - (vSinCos_41.x * tmpvar_25.x));
      tmpvar_43[2].z = (((tmpvar_42 * tmpvar_25.z) * tmpvar_25.z) + vSinCos_41.y);
      highp vec3 tmpvar_44;
      tmpvar_44 = ((tmpvar_25.yzx * vRotatedWindVector_8.zxy) - (tmpvar_25.zxy * vRotatedWindVector_8.yzx));
      vAxis_33.xz = tmpvar_44.xz;
      highp float tmpvar_45;
      tmpvar_45 = clamp (dot (vRotatedWindVector_8, tmpvar_25), -1.0, 1.0);
      vAxis_33.y = (tmpvar_44.y + tmpvar_45);
      highp vec3 tmpvar_46;
      tmpvar_46 = normalize(vAxis_33);
      vAxis_33 = tmpvar_46;
      highp float tmpvar_47;
      tmpvar_47 = (1.570796 - (sign(tmpvar_45) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_45))) * (1.570796 + (abs(tmpvar_45) * (-0.2146018 + 
          (abs(tmpvar_45) * (0.08656672 + (abs(tmpvar_45) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_48;
      tmpvar_48 = (tmpvar_37.y - (tmpvar_37.x * tmpvar_37.x));
      fTwitch_32 = 0.0;
      if (tmpvar_31) {
        highp float fTime_49;
        fTime_49 = (tmpvar_30.z + tmpvar_35);
        highp vec4 tmpvar_50;
        tmpvar_50.zw = vec2(0.0, 0.0);
        tmpvar_50.x = fTime_49;
        tmpvar_50.y = (0.87 * fTime_49);
        highp vec4 tmpvar_51;
        highp vec4 tmpvar_52;
        tmpvar_52 = abs(((
          fract((tmpvar_50 + 0.5))
         * 2.0) - 1.0));
        tmpvar_51 = (((
          (tmpvar_52 * tmpvar_52)
         * 
          (3.0 - (2.0 * tmpvar_52))
        ) - 0.5) * 2.0);
        fTwitch_32 = (tmpvar_30.x * pow (clamp (
          ((((tmpvar_51.x * tmpvar_51.y) * tmpvar_51.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_30.y));
      };
      highp float fAngle_53;
      fAngle_53 = (_glesMultiTexCoord2.x * ((
        (tmpvar_47 * tmpvar_29)
       + 
        (tmpvar_48 * tmpvar_27)
      ) + fTwitch_32));
      highp vec2 vSinCos_54;
      vSinCos_54.x = sin(fAngle_53);
      vSinCos_54.y = cos(fAngle_53);
      highp float tmpvar_55;
      tmpvar_55 = (1.0 - vSinCos_54.y);
      highp mat3 tmpvar_56;
      tmpvar_56[0].x = (((tmpvar_55 * tmpvar_46.x) * tmpvar_46.x) + vSinCos_54.y);
      tmpvar_56[0].y = (((tmpvar_55 * tmpvar_46.x) * tmpvar_46.y) + (vSinCos_54.x * tmpvar_46.z));
      tmpvar_56[0].z = (((tmpvar_55 * tmpvar_46.x) * tmpvar_46.z) - (vSinCos_54.x * tmpvar_46.y));
      tmpvar_56[1].x = (((tmpvar_55 * tmpvar_46.x) * tmpvar_46.y) - (vSinCos_54.x * tmpvar_46.z));
      tmpvar_56[1].y = (((tmpvar_55 * tmpvar_46.y) * tmpvar_46.y) + vSinCos_54.y);
      tmpvar_56[1].z = (((tmpvar_55 * tmpvar_46.y) * tmpvar_46.z) + (vSinCos_54.x * tmpvar_46.x));
      tmpvar_56[2].x = (((tmpvar_55 * tmpvar_46.x) * tmpvar_46.z) + (vSinCos_54.x * tmpvar_46.y));
      tmpvar_56[2].y = (((tmpvar_55 * tmpvar_46.y) * tmpvar_46.z) - (vSinCos_54.x * tmpvar_46.x));
      tmpvar_56[2].z = (((tmpvar_55 * tmpvar_46.z) * tmpvar_46.z) + vSinCos_54.y);
      vPos_19 = (normalize((
        (tmpvar_43 * tmpvar_56)
       * vPos_22)) * tmpvar_39);
    };
    FinalPosition_9 = vPos_19;
  };
  highp vec3 tmpvar_57;
  tmpvar_57 = (FinalPosition_9 + _glesMultiTexCoord1.xyz);
  FinalPosition_9 = tmpvar_57;
  if ((tmpvar_11 >= 3.0)) {
    highp vec3 vPos_58;
    vPos_58 = tmpvar_57;
    if ((tmpvar_11 == 5.0)) {
      highp vec3 vPos_59;
      vPos_59 = tmpvar_57;
      highp float fAdherenceScale_60;
      highp vec3 tmpvar_61;
      tmpvar_61 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_62;
      tmpvar_62 = (_ST_WindBranch.x + (tmpvar_10.x + tmpvar_10.y));
      highp vec4 vOscillations_63;
      highp float fOscillation_64;
      fOscillation_64 = 1.0;
      highp float fAmount_65;
      highp float fTarget_66;
      highp vec4 tmpvar_67;
      tmpvar_67.x = (tmpvar_62 + _glesMultiTexCoord0.w);
      tmpvar_67.y = ((tmpvar_62 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_67.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_62 + _glesMultiTexCoord0.w));
      tmpvar_67.w = ((tmpvar_62 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_68;
      tmpvar_68 = abs(((
        fract((tmpvar_67 + 0.5))
       * 2.0) - 1.0));
      vOscillations_63 = (((
        (tmpvar_68 * tmpvar_68)
       * 
        (3.0 - (2.0 * tmpvar_68))
      ) - 0.5) * 2.0);
      highp float tmpvar_69;
      tmpvar_69 = (vOscillations_63.y * vOscillations_63.z);
      fTarget_66 = 1.0;
      fAmount_65 = tmpvar_69;
      if ((tmpvar_69 < 0.0)) {
        fTarget_66 = -1.0;
        fAmount_65 = -(tmpvar_69);
      };
      fOscillation_64 = (((
        (mix (mix (tmpvar_69, fTarget_66, fAmount_65), fTarget_66, fAmount_65) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_63.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_63.w * _ST_WindBranchWhip.x)));
      vPos_59 = (tmpvar_57 + ((tmpvar_61 * fOscillation_64) * _ST_WindBranch.y));
      highp vec4 tmpvar_70;
      tmpvar_70.zw = vec2(0.0, 0.0);
      tmpvar_70.x = ((tmpvar_62 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_70.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_71;
      highp vec4 tmpvar_72;
      tmpvar_72 = abs(((
        fract((tmpvar_70 + 0.5))
       * 2.0) - 1.0));
      tmpvar_71 = (((
        (tmpvar_72 * tmpvar_72)
       * 
        (3.0 - (2.0 * tmpvar_72))
      ) - 0.5) * 2.0);
      fAdherenceScale_60 = (1.0 - ((
        ((tmpvar_71.x * tmpvar_71.y) * tmpvar_71.x)
       * tmpvar_71.y) * _ST_WindTurbulences.x));
      fAdherenceScale_60 = (fAdherenceScale_60 + ((vOscillations_63.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_59 = (vPos_59 + ((
        ((vRotatedBranchAnchor_7 - vPos_59) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_60) * _glesMultiTexCoord0.z));
      vPos_58 = vPos_59;
    } else {
      highp vec3 vPos_73;
      vPos_73 = vPos_58;
      highp vec3 tmpvar_74;
      tmpvar_74 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_75;
      tmpvar_75 = (_ST_WindBranch.x + (tmpvar_10.x + tmpvar_10.y));
      highp vec4 vOscillations_76;
      highp float fAmount_77;
      highp float fTarget_78;
      highp vec4 tmpvar_79;
      tmpvar_79.w = 0.0;
      tmpvar_79.x = (tmpvar_75 + _glesMultiTexCoord0.w);
      tmpvar_79.y = ((tmpvar_75 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_79.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_75 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      vOscillations_76 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      highp float tmpvar_81;
      tmpvar_81 = (vOscillations_76.y * vOscillations_76.z);
      fTarget_78 = 1.0;
      fAmount_77 = tmpvar_81;
      if ((tmpvar_81 < 0.0)) {
        fTarget_78 = -1.0;
        fAmount_77 = -(tmpvar_81);
      };
      vPos_73 = (vPos_58 + ((tmpvar_74 * 
        (((mix (
          mix (tmpvar_81, fTarget_78, fAmount_77)
        , fTarget_78, fAmount_77) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_76.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_58 = vPos_73;
    };
    FinalPosition_9 = vPos_58;
  };
  if ((tmpvar_11 > 0.0)) {
    highp vec3 vPos_82;
    vPos_82 = FinalPosition_9;
    highp float fAdjust_83;
    highp float fLength_84;
    fLength_84 = sqrt(dot (FinalPosition_9, FinalPosition_9));
    highp float tmpvar_85;
    tmpvar_85 = (max ((FinalPosition_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_83 = tmpvar_85;
    if ((tmpvar_85 != 0.0)) {
      fAdjust_83 = pow (tmpvar_85, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_86;
    tmpvar_86.zw = vec2(0.0, 0.0);
    tmpvar_86.x = (tmpvar_10.x + _ST_WindGlobal.x);
    tmpvar_86.y = (tmpvar_10.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_87;
    highp vec4 tmpvar_88;
    tmpvar_88 = abs(((
      fract((tmpvar_86 + 0.5))
     * 2.0) - 1.0));
    tmpvar_87 = (((
      (tmpvar_88 * tmpvar_88)
     * 
      (3.0 - (2.0 * tmpvar_88))
    ) - 0.5) * 2.0);
    vPos_82.xz = (FinalPosition_9.xz + (vRotatedWindVector_8.xz * (
      ((_ST_WindGlobal.y * (tmpvar_87.x + (tmpvar_87.y * tmpvar_87.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_83)));
    vPos_82 = (normalize(vPos_82) * fLength_84);
    FinalPosition_9 = vPos_82;
  };
  tmpvar_6.xyz = FinalPosition_9;
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_6).xyz - _LightPositionRange.xyz);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD1 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _LightPositionRange;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
in highp vec3 xlv_TEXCOORD0;
in mediump vec2 xlv_TEXCOORD1;
void main ()
{
  lowp float x_1;
  x_1 = ((texture (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_2;
  tmpvar_2 = vec4((sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w));
  _glesFragData[0] = tmpvar_2;
}



#endif"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FACING_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  mediump vec2 tmpvar_3;
  highp vec2 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord0.xy;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_5 = tmpvar_1;
  tmpvar_6 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_7;
  highp vec3 vRotatedWindVector_8;
  highp vec3 FinalPosition_9;
  FinalPosition_9 = tmpvar_1.xyz;
  highp vec3 tmpvar_10;
  tmpvar_10.x = _Object2World[3].x;
  tmpvar_10.y = _Object2World[3].y;
  tmpvar_10.z = _Object2World[3].z;
  mediump float tmpvar_11;
  tmpvar_11 = (_WindQuality * _WindEnabled);
  if ((tmpvar_11 > 0.0)) {
    highp mat3 tmpvar_12;
    tmpvar_12[0] = _World2Object[0].xyz;
    tmpvar_12[1] = _World2Object[1].xyz;
    tmpvar_12[2] = _World2Object[2].xyz;
    vRotatedWindVector_8 = normalize((tmpvar_12 * _ST_WindVector.xyz));
    highp mat3 tmpvar_13;
    tmpvar_13[0] = _World2Object[0].xyz;
    tmpvar_13[1] = _World2Object[1].xyz;
    tmpvar_13[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_7 = (normalize((tmpvar_13 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_8 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_7 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_14;
  tmpvar_14 = ((_glesVertex.xyz - _glesMultiTexCoord1.xyz) * mix (1.0, _glesMultiTexCoord1.w, unity_LODFade.x));
  highp mat3 tmpvar_15;
  tmpvar_15[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_15[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_15[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = (normalize((tmpvar_14 * tmpvar_15)) * sqrt(dot (tmpvar_14, tmpvar_14)));
  FinalPosition_9 = tmpvar_16;
  if (((tmpvar_11 > 1.0) && (tmpvar_11 < 5.0))) {
    highp float tmpvar_17;
    tmpvar_17 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_18;
    isBestWind_18 = (tmpvar_11 == 4.0);
    bool bLeaf2_19;
    bLeaf2_19 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    highp vec3 vDirection_21;
    vDirection_21 = tmpvar_2;
    highp float tmpvar_22;
    if (bLeaf2_19) {
      tmpvar_22 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_22 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_23;
    if (bLeaf2_19) {
      tmpvar_23 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_23 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_24;
    highp vec4 tmpvar_25;
    tmpvar_25.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_25.x = (tmpvar_22 + tmpvar_17);
    highp vec4 tmpvar_26;
    tmpvar_26 = abs(((
      fract((tmpvar_25 + 0.5))
     * 2.0) - 1.0));
    vPos_24 = (tmpvar_16 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_23 * (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_21 = tmpvar_2;
    vPos_20 = vPos_24;
    if (isBestWind_18) {
      highp vec3 tmpvar_27;
      tmpvar_27 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_28;
      if (bLeaf2_19) {
        tmpvar_28 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_28 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_29;
      if (bLeaf2_19) {
        tmpvar_29 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_29 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_30;
      if (bLeaf2_19) {
        tmpvar_30 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_30 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_31;
      if (bLeaf2_19) {
        tmpvar_31 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_32;
      if (bLeaf2_19) {
        tmpvar_32 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_32 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_33;
      if (bLeaf2_19) {
        tmpvar_33 = bool(1);
      } else {
        tmpvar_33 = bool(1);
      };
      highp float fTwitch_34;
      highp vec3 vAxis_35;
      highp vec3 tmpvar_36;
      tmpvar_36 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_37;
      tmpvar_37 = ((tmpvar_36.x + tmpvar_36.y) + tmpvar_36.z);
      highp vec4 tmpvar_38;
      tmpvar_38.x = (tmpvar_28 + tmpvar_37);
      tmpvar_38.y = ((tmpvar_28 * 0.75) - tmpvar_37);
      tmpvar_38.z = ((tmpvar_28 * 0.01) + tmpvar_37);
      tmpvar_38.w = (tmpvar_28 + tmpvar_37);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = sqrt(dot (vPos_24, vPos_24));
      highp float fAngle_42;
      fAngle_42 = ((_glesMultiTexCoord2.x * tmpvar_30) * (tmpvar_39.x + (tmpvar_39.y * tmpvar_39.y)));
      highp vec2 vSinCos_43;
      vSinCos_43.x = sin(fAngle_42);
      vSinCos_43.y = cos(fAngle_42);
      highp float tmpvar_44;
      tmpvar_44 = (1.0 - vSinCos_43.y);
      highp mat3 tmpvar_45;
      tmpvar_45[0].x = (((tmpvar_44 * tmpvar_27.x) * tmpvar_27.x) + vSinCos_43.y);
      tmpvar_45[0].y = (((tmpvar_44 * tmpvar_27.x) * tmpvar_27.y) + (vSinCos_43.x * tmpvar_27.z));
      tmpvar_45[0].z = (((tmpvar_44 * tmpvar_27.x) * tmpvar_27.z) - (vSinCos_43.x * tmpvar_27.y));
      tmpvar_45[1].x = (((tmpvar_44 * tmpvar_27.x) * tmpvar_27.y) - (vSinCos_43.x * tmpvar_27.z));
      tmpvar_45[1].y = (((tmpvar_44 * tmpvar_27.y) * tmpvar_27.y) + vSinCos_43.y);
      tmpvar_45[1].z = (((tmpvar_44 * tmpvar_27.y) * tmpvar_27.z) + (vSinCos_43.x * tmpvar_27.x));
      tmpvar_45[2].x = (((tmpvar_44 * tmpvar_27.x) * tmpvar_27.z) + (vSinCos_43.x * tmpvar_27.y));
      tmpvar_45[2].y = (((tmpvar_44 * tmpvar_27.y) * tmpvar_27.z) - (vSinCos_43.x * tmpvar_27.x));
      tmpvar_45[2].z = (((tmpvar_44 * tmpvar_27.z) * tmpvar_27.z) + vSinCos_43.y);
      highp vec3 tmpvar_46;
      tmpvar_46 = ((tmpvar_27.yzx * vRotatedWindVector_8.zxy) - (tmpvar_27.zxy * vRotatedWindVector_8.yzx));
      vAxis_35.xz = tmpvar_46.xz;
      highp float tmpvar_47;
      tmpvar_47 = clamp (dot (vRotatedWindVector_8, tmpvar_27), -1.0, 1.0);
      vAxis_35.y = (tmpvar_46.y + tmpvar_47);
      highp vec3 tmpvar_48;
      tmpvar_48 = normalize(vAxis_35);
      vAxis_35 = tmpvar_48;
      highp float tmpvar_49;
      tmpvar_49 = (1.570796 - (sign(tmpvar_47) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_47))) * (1.570796 + (abs(tmpvar_47) * (-0.2146018 + 
          (abs(tmpvar_47) * (0.08656672 + (abs(tmpvar_47) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_50;
      tmpvar_50 = (tmpvar_39.y - (tmpvar_39.x * tmpvar_39.x));
      fTwitch_34 = 0.0;
      if (tmpvar_33) {
        highp float fTime_51;
        fTime_51 = (tmpvar_32.z + tmpvar_37);
        highp vec4 tmpvar_52;
        tmpvar_52.zw = vec2(0.0, 0.0);
        tmpvar_52.x = fTime_51;
        tmpvar_52.y = (0.87 * fTime_51);
        highp vec4 tmpvar_53;
        highp vec4 tmpvar_54;
        tmpvar_54 = abs(((
          fract((tmpvar_52 + 0.5))
         * 2.0) - 1.0));
        tmpvar_53 = (((
          (tmpvar_54 * tmpvar_54)
         * 
          (3.0 - (2.0 * tmpvar_54))
        ) - 0.5) * 2.0);
        fTwitch_34 = (tmpvar_32.x * pow (clamp (
          ((((tmpvar_53.x * tmpvar_53.y) * tmpvar_53.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_32.y));
      };
      highp float fAngle_55;
      fAngle_55 = (_glesMultiTexCoord2.x * ((
        (tmpvar_49 * tmpvar_31)
       + 
        (tmpvar_50 * tmpvar_29)
      ) + fTwitch_34));
      highp vec2 vSinCos_56;
      vSinCos_56.x = sin(fAngle_55);
      vSinCos_56.y = cos(fAngle_55);
      highp float tmpvar_57;
      tmpvar_57 = (1.0 - vSinCos_56.y);
      highp mat3 tmpvar_58;
      tmpvar_58[0].x = (((tmpvar_57 * tmpvar_48.x) * tmpvar_48.x) + vSinCos_56.y);
      tmpvar_58[0].y = (((tmpvar_57 * tmpvar_48.x) * tmpvar_48.y) + (vSinCos_56.x * tmpvar_48.z));
      tmpvar_58[0].z = (((tmpvar_57 * tmpvar_48.x) * tmpvar_48.z) - (vSinCos_56.x * tmpvar_48.y));
      tmpvar_58[1].x = (((tmpvar_57 * tmpvar_48.x) * tmpvar_48.y) - (vSinCos_56.x * tmpvar_48.z));
      tmpvar_58[1].y = (((tmpvar_57 * tmpvar_48.y) * tmpvar_48.y) + vSinCos_56.y);
      tmpvar_58[1].z = (((tmpvar_57 * tmpvar_48.y) * tmpvar_48.z) + (vSinCos_56.x * tmpvar_48.x));
      tmpvar_58[2].x = (((tmpvar_57 * tmpvar_48.x) * tmpvar_48.z) + (vSinCos_56.x * tmpvar_48.y));
      tmpvar_58[2].y = (((tmpvar_57 * tmpvar_48.y) * tmpvar_48.z) - (vSinCos_56.x * tmpvar_48.x));
      tmpvar_58[2].z = (((tmpvar_57 * tmpvar_48.z) * tmpvar_48.z) + vSinCos_56.y);
      highp mat3 tmpvar_59;
      tmpvar_59 = (tmpvar_45 * tmpvar_58);
      vDirection_21 = (tmpvar_59 * _glesNormal);
      vPos_20 = (normalize((tmpvar_59 * vPos_24)) * tmpvar_41);
    };
    tmpvar_6 = vDirection_21;
    FinalPosition_9 = vPos_20;
  };
  highp vec3 tmpvar_60;
  tmpvar_60 = (FinalPosition_9 + _glesMultiTexCoord1.xyz);
  FinalPosition_9 = tmpvar_60;
  if ((tmpvar_11 >= 3.0)) {
    highp vec3 vPos_61;
    vPos_61 = tmpvar_60;
    if ((tmpvar_11 == 5.0)) {
      highp vec3 vPos_62;
      vPos_62 = tmpvar_60;
      highp float fAdherenceScale_63;
      highp vec3 tmpvar_64;
      tmpvar_64 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_65;
      tmpvar_65 = (_ST_WindBranch.x + (tmpvar_10.x + tmpvar_10.y));
      highp vec4 vOscillations_66;
      highp float fOscillation_67;
      fOscillation_67 = 1.0;
      highp float fAmount_68;
      highp float fTarget_69;
      highp vec4 tmpvar_70;
      tmpvar_70.x = (tmpvar_65 + _glesMultiTexCoord0.w);
      tmpvar_70.y = ((tmpvar_65 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_70.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_65 + _glesMultiTexCoord0.w));
      tmpvar_70.w = ((tmpvar_65 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_71;
      tmpvar_71 = abs(((
        fract((tmpvar_70 + 0.5))
       * 2.0) - 1.0));
      vOscillations_66 = (((
        (tmpvar_71 * tmpvar_71)
       * 
        (3.0 - (2.0 * tmpvar_71))
      ) - 0.5) * 2.0);
      highp float tmpvar_72;
      tmpvar_72 = (vOscillations_66.y * vOscillations_66.z);
      fTarget_69 = 1.0;
      fAmount_68 = tmpvar_72;
      if ((tmpvar_72 < 0.0)) {
        fTarget_69 = -1.0;
        fAmount_68 = -(tmpvar_72);
      };
      fOscillation_67 = (((
        (mix (mix (tmpvar_72, fTarget_69, fAmount_68), fTarget_69, fAmount_68) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_66.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_66.w * _ST_WindBranchWhip.x)));
      vPos_62 = (tmpvar_60 + ((tmpvar_64 * fOscillation_67) * _ST_WindBranch.y));
      highp vec4 tmpvar_73;
      tmpvar_73.zw = vec2(0.0, 0.0);
      tmpvar_73.x = ((tmpvar_65 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_73.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_74;
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_73 + 0.5))
       * 2.0) - 1.0));
      tmpvar_74 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      fAdherenceScale_63 = (1.0 - ((
        ((tmpvar_74.x * tmpvar_74.y) * tmpvar_74.x)
       * tmpvar_74.y) * _ST_WindTurbulences.x));
      fAdherenceScale_63 = (fAdherenceScale_63 + ((vOscillations_66.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_62 = (vPos_62 + ((
        ((vRotatedBranchAnchor_7 - vPos_62) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_63) * _glesMultiTexCoord0.z));
      vPos_61 = vPos_62;
    } else {
      highp vec3 vPos_76;
      vPos_76 = vPos_61;
      highp vec3 tmpvar_77;
      tmpvar_77 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_78;
      tmpvar_78 = (_ST_WindBranch.x + (tmpvar_10.x + tmpvar_10.y));
      highp vec4 vOscillations_79;
      highp float fAmount_80;
      highp float fTarget_81;
      highp vec4 tmpvar_82;
      tmpvar_82.w = 0.0;
      tmpvar_82.x = (tmpvar_78 + _glesMultiTexCoord0.w);
      tmpvar_82.y = ((tmpvar_78 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_82.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_78 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_82 + 0.5))
       * 2.0) - 1.0));
      vOscillations_79 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      highp float tmpvar_84;
      tmpvar_84 = (vOscillations_79.y * vOscillations_79.z);
      fTarget_81 = 1.0;
      fAmount_80 = tmpvar_84;
      if ((tmpvar_84 < 0.0)) {
        fTarget_81 = -1.0;
        fAmount_80 = -(tmpvar_84);
      };
      vPos_76 = (vPos_61 + ((tmpvar_77 * 
        (((mix (
          mix (tmpvar_84, fTarget_81, fAmount_80)
        , fTarget_81, fAmount_80) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_79.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_61 = vPos_76;
    };
    FinalPosition_9 = vPos_61;
  };
  if ((tmpvar_11 > 0.0)) {
    highp vec3 vPos_85;
    vPos_85 = FinalPosition_9;
    highp float fAdjust_86;
    highp float fLength_87;
    fLength_87 = sqrt(dot (FinalPosition_9, FinalPosition_9));
    highp float tmpvar_88;
    tmpvar_88 = (max ((FinalPosition_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_86 = tmpvar_88;
    if ((tmpvar_88 != 0.0)) {
      fAdjust_86 = pow (tmpvar_88, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_89;
    tmpvar_89.zw = vec2(0.0, 0.0);
    tmpvar_89.x = (tmpvar_10.x + _ST_WindGlobal.x);
    tmpvar_89.y = (tmpvar_10.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_90;
    highp vec4 tmpvar_91;
    tmpvar_91 = abs(((
      fract((tmpvar_89 + 0.5))
     * 2.0) - 1.0));
    tmpvar_90 = (((
      (tmpvar_91 * tmpvar_91)
     * 
      (3.0 - (2.0 * tmpvar_91))
    ) - 0.5) * 2.0);
    vPos_85.xz = (FinalPosition_9.xz + (vRotatedWindVector_8.xz * (
      ((_ST_WindGlobal.y * (tmpvar_90.x + (tmpvar_90.y * tmpvar_90.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_86)));
    vPos_85 = (normalize(vPos_85) * fLength_87);
    FinalPosition_9 = vPos_85;
  };
  tmpvar_5.xyz = FinalPosition_9;
  highp vec3 vertex_92;
  vertex_92 = tmpvar_5.xyz;
  highp vec4 clipPos_93;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp vec4 tmpvar_94;
    tmpvar_94.w = 1.0;
    tmpvar_94.xyz = vertex_92;
    highp vec3 tmpvar_95;
    tmpvar_95 = (_Object2World * tmpvar_94).xyz;
    highp vec4 v_96;
    v_96.x = _World2Object[0].x;
    v_96.y = _World2Object[1].x;
    v_96.z = _World2Object[2].x;
    v_96.w = _World2Object[3].x;
    highp vec4 v_97;
    v_97.x = _World2Object[0].y;
    v_97.y = _World2Object[1].y;
    v_97.z = _World2Object[2].y;
    v_97.w = _World2Object[3].y;
    highp vec4 v_98;
    v_98.x = _World2Object[0].z;
    v_98.y = _World2Object[1].z;
    v_98.z = _World2Object[2].z;
    v_98.w = _World2Object[3].z;
    highp vec3 tmpvar_99;
    tmpvar_99 = normalize(((
      (v_96.xyz * tmpvar_6.x)
     + 
      (v_97.xyz * tmpvar_6.y)
    ) + (v_98.xyz * tmpvar_6.z)));
    highp float tmpvar_100;
    tmpvar_100 = dot (tmpvar_99, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_95 * _WorldSpaceLightPos0.w)
    )));
    highp vec4 tmpvar_101;
    tmpvar_101.w = 1.0;
    tmpvar_101.xyz = (tmpvar_95 - (tmpvar_99 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_100 * tmpvar_100)))
    )));
    clipPos_93 = (unity_MatrixVP * tmpvar_101);
  } else {
    highp vec4 tmpvar_102;
    tmpvar_102.w = 1.0;
    tmpvar_102.xyz = vertex_92;
    clipPos_93 = (glstate_matrix_mvp * tmpvar_102);
  };
  highp vec4 clipPos_103;
  clipPos_103.xyw = clipPos_93.xyw;
  clipPos_103.z = (clipPos_93.z + clamp ((unity_LightShadowBias.x / clipPos_93.w), 0.0, 1.0));
  clipPos_103.z = mix (clipPos_103.z, max (clipPos_103.z, -(clipPos_93.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_103;
  xlv_TEXCOORD1 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  lowp float x_1;
  x_1 = ((texture2D (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
out mediump vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  mediump vec2 tmpvar_3;
  highp vec2 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord0.xy;
  tmpvar_3 = tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_5 = tmpvar_1;
  tmpvar_6 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_7;
  highp vec3 vRotatedWindVector_8;
  highp vec3 FinalPosition_9;
  FinalPosition_9 = tmpvar_1.xyz;
  highp vec3 tmpvar_10;
  tmpvar_10.x = _Object2World[3].x;
  tmpvar_10.y = _Object2World[3].y;
  tmpvar_10.z = _Object2World[3].z;
  mediump float tmpvar_11;
  tmpvar_11 = (_WindQuality * _WindEnabled);
  if ((tmpvar_11 > 0.0)) {
    highp mat3 tmpvar_12;
    tmpvar_12[0] = _World2Object[0].xyz;
    tmpvar_12[1] = _World2Object[1].xyz;
    tmpvar_12[2] = _World2Object[2].xyz;
    vRotatedWindVector_8 = normalize((tmpvar_12 * _ST_WindVector.xyz));
    highp mat3 tmpvar_13;
    tmpvar_13[0] = _World2Object[0].xyz;
    tmpvar_13[1] = _World2Object[1].xyz;
    tmpvar_13[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_7 = (normalize((tmpvar_13 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_8 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_7 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_14;
  tmpvar_14 = ((_glesVertex.xyz - _glesMultiTexCoord1.xyz) * mix (1.0, _glesMultiTexCoord1.w, unity_LODFade.x));
  highp mat3 tmpvar_15;
  tmpvar_15[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_15[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_15[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = (normalize((tmpvar_14 * tmpvar_15)) * sqrt(dot (tmpvar_14, tmpvar_14)));
  FinalPosition_9 = tmpvar_16;
  if (((tmpvar_11 > 1.0) && (tmpvar_11 < 5.0))) {
    highp float tmpvar_17;
    tmpvar_17 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_18;
    isBestWind_18 = (tmpvar_11 == 4.0);
    bool bLeaf2_19;
    bLeaf2_19 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    highp vec3 vDirection_21;
    vDirection_21 = tmpvar_2;
    highp float tmpvar_22;
    if (bLeaf2_19) {
      tmpvar_22 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_22 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_23;
    if (bLeaf2_19) {
      tmpvar_23 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_23 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_24;
    highp vec4 tmpvar_25;
    tmpvar_25.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_25.x = (tmpvar_22 + tmpvar_17);
    highp vec4 tmpvar_26;
    tmpvar_26 = abs(((
      fract((tmpvar_25 + 0.5))
     * 2.0) - 1.0));
    vPos_24 = (tmpvar_16 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_23 * (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_21 = tmpvar_2;
    vPos_20 = vPos_24;
    if (isBestWind_18) {
      highp vec3 tmpvar_27;
      tmpvar_27 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_28;
      if (bLeaf2_19) {
        tmpvar_28 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_28 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_29;
      if (bLeaf2_19) {
        tmpvar_29 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_29 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_30;
      if (bLeaf2_19) {
        tmpvar_30 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_30 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_31;
      if (bLeaf2_19) {
        tmpvar_31 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_32;
      if (bLeaf2_19) {
        tmpvar_32 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_32 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_33;
      if (bLeaf2_19) {
        tmpvar_33 = bool(1);
      } else {
        tmpvar_33 = bool(1);
      };
      highp float fTwitch_34;
      highp vec3 vAxis_35;
      highp vec3 tmpvar_36;
      tmpvar_36 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_37;
      tmpvar_37 = ((tmpvar_36.x + tmpvar_36.y) + tmpvar_36.z);
      highp vec4 tmpvar_38;
      tmpvar_38.x = (tmpvar_28 + tmpvar_37);
      tmpvar_38.y = ((tmpvar_28 * 0.75) - tmpvar_37);
      tmpvar_38.z = ((tmpvar_28 * 0.01) + tmpvar_37);
      tmpvar_38.w = (tmpvar_28 + tmpvar_37);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = sqrt(dot (vPos_24, vPos_24));
      highp float fAngle_42;
      fAngle_42 = ((_glesMultiTexCoord2.x * tmpvar_30) * (tmpvar_39.x + (tmpvar_39.y * tmpvar_39.y)));
      highp vec2 vSinCos_43;
      vSinCos_43.x = sin(fAngle_42);
      vSinCos_43.y = cos(fAngle_42);
      highp float tmpvar_44;
      tmpvar_44 = (1.0 - vSinCos_43.y);
      highp mat3 tmpvar_45;
      tmpvar_45[0].x = (((tmpvar_44 * tmpvar_27.x) * tmpvar_27.x) + vSinCos_43.y);
      tmpvar_45[0].y = (((tmpvar_44 * tmpvar_27.x) * tmpvar_27.y) + (vSinCos_43.x * tmpvar_27.z));
      tmpvar_45[0].z = (((tmpvar_44 * tmpvar_27.x) * tmpvar_27.z) - (vSinCos_43.x * tmpvar_27.y));
      tmpvar_45[1].x = (((tmpvar_44 * tmpvar_27.x) * tmpvar_27.y) - (vSinCos_43.x * tmpvar_27.z));
      tmpvar_45[1].y = (((tmpvar_44 * tmpvar_27.y) * tmpvar_27.y) + vSinCos_43.y);
      tmpvar_45[1].z = (((tmpvar_44 * tmpvar_27.y) * tmpvar_27.z) + (vSinCos_43.x * tmpvar_27.x));
      tmpvar_45[2].x = (((tmpvar_44 * tmpvar_27.x) * tmpvar_27.z) + (vSinCos_43.x * tmpvar_27.y));
      tmpvar_45[2].y = (((tmpvar_44 * tmpvar_27.y) * tmpvar_27.z) - (vSinCos_43.x * tmpvar_27.x));
      tmpvar_45[2].z = (((tmpvar_44 * tmpvar_27.z) * tmpvar_27.z) + vSinCos_43.y);
      highp vec3 tmpvar_46;
      tmpvar_46 = ((tmpvar_27.yzx * vRotatedWindVector_8.zxy) - (tmpvar_27.zxy * vRotatedWindVector_8.yzx));
      vAxis_35.xz = tmpvar_46.xz;
      highp float tmpvar_47;
      tmpvar_47 = clamp (dot (vRotatedWindVector_8, tmpvar_27), -1.0, 1.0);
      vAxis_35.y = (tmpvar_46.y + tmpvar_47);
      highp vec3 tmpvar_48;
      tmpvar_48 = normalize(vAxis_35);
      vAxis_35 = tmpvar_48;
      highp float tmpvar_49;
      tmpvar_49 = (1.570796 - (sign(tmpvar_47) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_47))) * (1.570796 + (abs(tmpvar_47) * (-0.2146018 + 
          (abs(tmpvar_47) * (0.08656672 + (abs(tmpvar_47) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_50;
      tmpvar_50 = (tmpvar_39.y - (tmpvar_39.x * tmpvar_39.x));
      fTwitch_34 = 0.0;
      if (tmpvar_33) {
        highp float fTime_51;
        fTime_51 = (tmpvar_32.z + tmpvar_37);
        highp vec4 tmpvar_52;
        tmpvar_52.zw = vec2(0.0, 0.0);
        tmpvar_52.x = fTime_51;
        tmpvar_52.y = (0.87 * fTime_51);
        highp vec4 tmpvar_53;
        highp vec4 tmpvar_54;
        tmpvar_54 = abs(((
          fract((tmpvar_52 + 0.5))
         * 2.0) - 1.0));
        tmpvar_53 = (((
          (tmpvar_54 * tmpvar_54)
         * 
          (3.0 - (2.0 * tmpvar_54))
        ) - 0.5) * 2.0);
        fTwitch_34 = (tmpvar_32.x * pow (clamp (
          ((((tmpvar_53.x * tmpvar_53.y) * tmpvar_53.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_32.y));
      };
      highp float fAngle_55;
      fAngle_55 = (_glesMultiTexCoord2.x * ((
        (tmpvar_49 * tmpvar_31)
       + 
        (tmpvar_50 * tmpvar_29)
      ) + fTwitch_34));
      highp vec2 vSinCos_56;
      vSinCos_56.x = sin(fAngle_55);
      vSinCos_56.y = cos(fAngle_55);
      highp float tmpvar_57;
      tmpvar_57 = (1.0 - vSinCos_56.y);
      highp mat3 tmpvar_58;
      tmpvar_58[0].x = (((tmpvar_57 * tmpvar_48.x) * tmpvar_48.x) + vSinCos_56.y);
      tmpvar_58[0].y = (((tmpvar_57 * tmpvar_48.x) * tmpvar_48.y) + (vSinCos_56.x * tmpvar_48.z));
      tmpvar_58[0].z = (((tmpvar_57 * tmpvar_48.x) * tmpvar_48.z) - (vSinCos_56.x * tmpvar_48.y));
      tmpvar_58[1].x = (((tmpvar_57 * tmpvar_48.x) * tmpvar_48.y) - (vSinCos_56.x * tmpvar_48.z));
      tmpvar_58[1].y = (((tmpvar_57 * tmpvar_48.y) * tmpvar_48.y) + vSinCos_56.y);
      tmpvar_58[1].z = (((tmpvar_57 * tmpvar_48.y) * tmpvar_48.z) + (vSinCos_56.x * tmpvar_48.x));
      tmpvar_58[2].x = (((tmpvar_57 * tmpvar_48.x) * tmpvar_48.z) + (vSinCos_56.x * tmpvar_48.y));
      tmpvar_58[2].y = (((tmpvar_57 * tmpvar_48.y) * tmpvar_48.z) - (vSinCos_56.x * tmpvar_48.x));
      tmpvar_58[2].z = (((tmpvar_57 * tmpvar_48.z) * tmpvar_48.z) + vSinCos_56.y);
      highp mat3 tmpvar_59;
      tmpvar_59 = (tmpvar_45 * tmpvar_58);
      vDirection_21 = (tmpvar_59 * _glesNormal);
      vPos_20 = (normalize((tmpvar_59 * vPos_24)) * tmpvar_41);
    };
    tmpvar_6 = vDirection_21;
    FinalPosition_9 = vPos_20;
  };
  highp vec3 tmpvar_60;
  tmpvar_60 = (FinalPosition_9 + _glesMultiTexCoord1.xyz);
  FinalPosition_9 = tmpvar_60;
  if ((tmpvar_11 >= 3.0)) {
    highp vec3 vPos_61;
    vPos_61 = tmpvar_60;
    if ((tmpvar_11 == 5.0)) {
      highp vec3 vPos_62;
      vPos_62 = tmpvar_60;
      highp float fAdherenceScale_63;
      highp vec3 tmpvar_64;
      tmpvar_64 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_65;
      tmpvar_65 = (_ST_WindBranch.x + (tmpvar_10.x + tmpvar_10.y));
      highp vec4 vOscillations_66;
      highp float fOscillation_67;
      fOscillation_67 = 1.0;
      highp float fAmount_68;
      highp float fTarget_69;
      highp vec4 tmpvar_70;
      tmpvar_70.x = (tmpvar_65 + _glesMultiTexCoord0.w);
      tmpvar_70.y = ((tmpvar_65 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_70.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_65 + _glesMultiTexCoord0.w));
      tmpvar_70.w = ((tmpvar_65 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_71;
      tmpvar_71 = abs(((
        fract((tmpvar_70 + 0.5))
       * 2.0) - 1.0));
      vOscillations_66 = (((
        (tmpvar_71 * tmpvar_71)
       * 
        (3.0 - (2.0 * tmpvar_71))
      ) - 0.5) * 2.0);
      highp float tmpvar_72;
      tmpvar_72 = (vOscillations_66.y * vOscillations_66.z);
      fTarget_69 = 1.0;
      fAmount_68 = tmpvar_72;
      if ((tmpvar_72 < 0.0)) {
        fTarget_69 = -1.0;
        fAmount_68 = -(tmpvar_72);
      };
      fOscillation_67 = (((
        (mix (mix (tmpvar_72, fTarget_69, fAmount_68), fTarget_69, fAmount_68) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_66.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_66.w * _ST_WindBranchWhip.x)));
      vPos_62 = (tmpvar_60 + ((tmpvar_64 * fOscillation_67) * _ST_WindBranch.y));
      highp vec4 tmpvar_73;
      tmpvar_73.zw = vec2(0.0, 0.0);
      tmpvar_73.x = ((tmpvar_65 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_73.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_74;
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_73 + 0.5))
       * 2.0) - 1.0));
      tmpvar_74 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      fAdherenceScale_63 = (1.0 - ((
        ((tmpvar_74.x * tmpvar_74.y) * tmpvar_74.x)
       * tmpvar_74.y) * _ST_WindTurbulences.x));
      fAdherenceScale_63 = (fAdherenceScale_63 + ((vOscillations_66.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_62 = (vPos_62 + ((
        ((vRotatedBranchAnchor_7 - vPos_62) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_63) * _glesMultiTexCoord0.z));
      vPos_61 = vPos_62;
    } else {
      highp vec3 vPos_76;
      vPos_76 = vPos_61;
      highp vec3 tmpvar_77;
      tmpvar_77 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_78;
      tmpvar_78 = (_ST_WindBranch.x + (tmpvar_10.x + tmpvar_10.y));
      highp vec4 vOscillations_79;
      highp float fAmount_80;
      highp float fTarget_81;
      highp vec4 tmpvar_82;
      tmpvar_82.w = 0.0;
      tmpvar_82.x = (tmpvar_78 + _glesMultiTexCoord0.w);
      tmpvar_82.y = ((tmpvar_78 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_82.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_78 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_82 + 0.5))
       * 2.0) - 1.0));
      vOscillations_79 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      highp float tmpvar_84;
      tmpvar_84 = (vOscillations_79.y * vOscillations_79.z);
      fTarget_81 = 1.0;
      fAmount_80 = tmpvar_84;
      if ((tmpvar_84 < 0.0)) {
        fTarget_81 = -1.0;
        fAmount_80 = -(tmpvar_84);
      };
      vPos_76 = (vPos_61 + ((tmpvar_77 * 
        (((mix (
          mix (tmpvar_84, fTarget_81, fAmount_80)
        , fTarget_81, fAmount_80) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_79.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_61 = vPos_76;
    };
    FinalPosition_9 = vPos_61;
  };
  if ((tmpvar_11 > 0.0)) {
    highp vec3 vPos_85;
    vPos_85 = FinalPosition_9;
    highp float fAdjust_86;
    highp float fLength_87;
    fLength_87 = sqrt(dot (FinalPosition_9, FinalPosition_9));
    highp float tmpvar_88;
    tmpvar_88 = (max ((FinalPosition_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_86 = tmpvar_88;
    if ((tmpvar_88 != 0.0)) {
      fAdjust_86 = pow (tmpvar_88, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_89;
    tmpvar_89.zw = vec2(0.0, 0.0);
    tmpvar_89.x = (tmpvar_10.x + _ST_WindGlobal.x);
    tmpvar_89.y = (tmpvar_10.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_90;
    highp vec4 tmpvar_91;
    tmpvar_91 = abs(((
      fract((tmpvar_89 + 0.5))
     * 2.0) - 1.0));
    tmpvar_90 = (((
      (tmpvar_91 * tmpvar_91)
     * 
      (3.0 - (2.0 * tmpvar_91))
    ) - 0.5) * 2.0);
    vPos_85.xz = (FinalPosition_9.xz + (vRotatedWindVector_8.xz * (
      ((_ST_WindGlobal.y * (tmpvar_90.x + (tmpvar_90.y * tmpvar_90.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_86)));
    vPos_85 = (normalize(vPos_85) * fLength_87);
    FinalPosition_9 = vPos_85;
  };
  tmpvar_5.xyz = FinalPosition_9;
  highp vec3 vertex_92;
  vertex_92 = tmpvar_5.xyz;
  highp vec4 clipPos_93;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp vec4 tmpvar_94;
    tmpvar_94.w = 1.0;
    tmpvar_94.xyz = vertex_92;
    highp vec3 tmpvar_95;
    tmpvar_95 = (_Object2World * tmpvar_94).xyz;
    highp vec4 v_96;
    v_96.x = _World2Object[0].x;
    v_96.y = _World2Object[1].x;
    v_96.z = _World2Object[2].x;
    v_96.w = _World2Object[3].x;
    highp vec4 v_97;
    v_97.x = _World2Object[0].y;
    v_97.y = _World2Object[1].y;
    v_97.z = _World2Object[2].y;
    v_97.w = _World2Object[3].y;
    highp vec4 v_98;
    v_98.x = _World2Object[0].z;
    v_98.y = _World2Object[1].z;
    v_98.z = _World2Object[2].z;
    v_98.w = _World2Object[3].z;
    highp vec3 tmpvar_99;
    tmpvar_99 = normalize(((
      (v_96.xyz * tmpvar_6.x)
     + 
      (v_97.xyz * tmpvar_6.y)
    ) + (v_98.xyz * tmpvar_6.z)));
    highp float tmpvar_100;
    tmpvar_100 = dot (tmpvar_99, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_95 * _WorldSpaceLightPos0.w)
    )));
    highp vec4 tmpvar_101;
    tmpvar_101.w = 1.0;
    tmpvar_101.xyz = (tmpvar_95 - (tmpvar_99 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_100 * tmpvar_100)))
    )));
    clipPos_93 = (unity_MatrixVP * tmpvar_101);
  } else {
    highp vec4 tmpvar_102;
    tmpvar_102.w = 1.0;
    tmpvar_102.xyz = vertex_92;
    clipPos_93 = (glstate_matrix_mvp * tmpvar_102);
  };
  highp vec4 clipPos_103;
  clipPos_103.xyw = clipPos_93.xyw;
  clipPos_103.z = (clipPos_93.z + clamp ((unity_LightShadowBias.x / clipPos_93.w), 0.0, 1.0));
  clipPos_103.z = mix (clipPos_103.z, max (clipPos_103.z, -(clipPos_93.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_103;
  xlv_TEXCOORD1 = tmpvar_3;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
in mediump vec2 xlv_TEXCOORD1;
void main ()
{
  lowp float x_1;
  x_1 = ((texture (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  _glesFragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}



#endif"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FACING_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec2 tmpvar_2;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0.xy;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_5;
  highp vec3 vRotatedWindVector_6;
  highp vec3 FinalPosition_7;
  FinalPosition_7 = tmpvar_1.xyz;
  highp vec3 tmpvar_8;
  tmpvar_8.x = _Object2World[3].x;
  tmpvar_8.y = _Object2World[3].y;
  tmpvar_8.z = _Object2World[3].z;
  mediump float tmpvar_9;
  tmpvar_9 = (_WindQuality * _WindEnabled);
  if ((tmpvar_9 > 0.0)) {
    highp mat3 tmpvar_10;
    tmpvar_10[0] = _World2Object[0].xyz;
    tmpvar_10[1] = _World2Object[1].xyz;
    tmpvar_10[2] = _World2Object[2].xyz;
    vRotatedWindVector_6 = normalize((tmpvar_10 * _ST_WindVector.xyz));
    highp mat3 tmpvar_11;
    tmpvar_11[0] = _World2Object[0].xyz;
    tmpvar_11[1] = _World2Object[1].xyz;
    tmpvar_11[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_5 = (normalize((tmpvar_11 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_6 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_5 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_12;
  tmpvar_12 = ((_glesVertex.xyz - _glesMultiTexCoord1.xyz) * mix (1.0, _glesMultiTexCoord1.w, unity_LODFade.x));
  highp mat3 tmpvar_13;
  tmpvar_13[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_13[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_13[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = (normalize((tmpvar_12 * tmpvar_13)) * sqrt(dot (tmpvar_12, tmpvar_12)));
  FinalPosition_7 = tmpvar_14;
  if (((tmpvar_9 > 1.0) && (tmpvar_9 < 5.0))) {
    highp float tmpvar_15;
    tmpvar_15 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_16;
    isBestWind_16 = (tmpvar_9 == 4.0);
    bool bLeaf2_17;
    bLeaf2_17 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_18;
    vPos_18 = tmpvar_14;
    highp float tmpvar_19;
    if (bLeaf2_17) {
      tmpvar_19 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_19 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_20;
    if (bLeaf2_17) {
      tmpvar_20 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_20 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_21;
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (tmpvar_19 + tmpvar_15);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_21 = (tmpvar_14 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_20 * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vPos_18 = vPos_21;
    if (isBestWind_16) {
      highp vec3 tmpvar_24;
      tmpvar_24 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_25;
      if (bLeaf2_17) {
        tmpvar_25 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_25 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_26;
      if (bLeaf2_17) {
        tmpvar_26 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_26 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_27;
      if (bLeaf2_17) {
        tmpvar_27 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_27 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_28;
      if (bLeaf2_17) {
        tmpvar_28 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_28 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_29;
      if (bLeaf2_17) {
        tmpvar_29 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_29 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_30;
      if (bLeaf2_17) {
        tmpvar_30 = bool(1);
      } else {
        tmpvar_30 = bool(1);
      };
      highp float fTwitch_31;
      highp vec3 vAxis_32;
      highp vec3 tmpvar_33;
      tmpvar_33 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_34;
      tmpvar_34 = ((tmpvar_33.x + tmpvar_33.y) + tmpvar_33.z);
      highp vec4 tmpvar_35;
      tmpvar_35.x = (tmpvar_25 + tmpvar_34);
      tmpvar_35.y = ((tmpvar_25 * 0.75) - tmpvar_34);
      tmpvar_35.z = ((tmpvar_25 * 0.01) + tmpvar_34);
      tmpvar_35.w = (tmpvar_25 + tmpvar_34);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      highp float tmpvar_38;
      tmpvar_38 = sqrt(dot (vPos_21, vPos_21));
      highp float fAngle_39;
      fAngle_39 = ((_glesMultiTexCoord2.x * tmpvar_27) * (tmpvar_36.x + (tmpvar_36.y * tmpvar_36.y)));
      highp vec2 vSinCos_40;
      vSinCos_40.x = sin(fAngle_39);
      vSinCos_40.y = cos(fAngle_39);
      highp float tmpvar_41;
      tmpvar_41 = (1.0 - vSinCos_40.y);
      highp mat3 tmpvar_42;
      tmpvar_42[0].x = (((tmpvar_41 * tmpvar_24.x) * tmpvar_24.x) + vSinCos_40.y);
      tmpvar_42[0].y = (((tmpvar_41 * tmpvar_24.x) * tmpvar_24.y) + (vSinCos_40.x * tmpvar_24.z));
      tmpvar_42[0].z = (((tmpvar_41 * tmpvar_24.x) * tmpvar_24.z) - (vSinCos_40.x * tmpvar_24.y));
      tmpvar_42[1].x = (((tmpvar_41 * tmpvar_24.x) * tmpvar_24.y) - (vSinCos_40.x * tmpvar_24.z));
      tmpvar_42[1].y = (((tmpvar_41 * tmpvar_24.y) * tmpvar_24.y) + vSinCos_40.y);
      tmpvar_42[1].z = (((tmpvar_41 * tmpvar_24.y) * tmpvar_24.z) + (vSinCos_40.x * tmpvar_24.x));
      tmpvar_42[2].x = (((tmpvar_41 * tmpvar_24.x) * tmpvar_24.z) + (vSinCos_40.x * tmpvar_24.y));
      tmpvar_42[2].y = (((tmpvar_41 * tmpvar_24.y) * tmpvar_24.z) - (vSinCos_40.x * tmpvar_24.x));
      tmpvar_42[2].z = (((tmpvar_41 * tmpvar_24.z) * tmpvar_24.z) + vSinCos_40.y);
      highp vec3 tmpvar_43;
      tmpvar_43 = ((tmpvar_24.yzx * vRotatedWindVector_6.zxy) - (tmpvar_24.zxy * vRotatedWindVector_6.yzx));
      vAxis_32.xz = tmpvar_43.xz;
      highp float tmpvar_44;
      tmpvar_44 = clamp (dot (vRotatedWindVector_6, tmpvar_24), -1.0, 1.0);
      vAxis_32.y = (tmpvar_43.y + tmpvar_44);
      highp vec3 tmpvar_45;
      tmpvar_45 = normalize(vAxis_32);
      vAxis_32 = tmpvar_45;
      highp float tmpvar_46;
      tmpvar_46 = (1.570796 - (sign(tmpvar_44) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_44))) * (1.570796 + (abs(tmpvar_44) * (-0.2146018 + 
          (abs(tmpvar_44) * (0.08656672 + (abs(tmpvar_44) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_47;
      tmpvar_47 = (tmpvar_36.y - (tmpvar_36.x * tmpvar_36.x));
      fTwitch_31 = 0.0;
      if (tmpvar_30) {
        highp float fTime_48;
        fTime_48 = (tmpvar_29.z + tmpvar_34);
        highp vec4 tmpvar_49;
        tmpvar_49.zw = vec2(0.0, 0.0);
        tmpvar_49.x = fTime_48;
        tmpvar_49.y = (0.87 * fTime_48);
        highp vec4 tmpvar_50;
        highp vec4 tmpvar_51;
        tmpvar_51 = abs(((
          fract((tmpvar_49 + 0.5))
         * 2.0) - 1.0));
        tmpvar_50 = (((
          (tmpvar_51 * tmpvar_51)
         * 
          (3.0 - (2.0 * tmpvar_51))
        ) - 0.5) * 2.0);
        fTwitch_31 = (tmpvar_29.x * pow (clamp (
          ((((tmpvar_50.x * tmpvar_50.y) * tmpvar_50.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_29.y));
      };
      highp float fAngle_52;
      fAngle_52 = (_glesMultiTexCoord2.x * ((
        (tmpvar_46 * tmpvar_28)
       + 
        (tmpvar_47 * tmpvar_26)
      ) + fTwitch_31));
      highp vec2 vSinCos_53;
      vSinCos_53.x = sin(fAngle_52);
      vSinCos_53.y = cos(fAngle_52);
      highp float tmpvar_54;
      tmpvar_54 = (1.0 - vSinCos_53.y);
      highp mat3 tmpvar_55;
      tmpvar_55[0].x = (((tmpvar_54 * tmpvar_45.x) * tmpvar_45.x) + vSinCos_53.y);
      tmpvar_55[0].y = (((tmpvar_54 * tmpvar_45.x) * tmpvar_45.y) + (vSinCos_53.x * tmpvar_45.z));
      tmpvar_55[0].z = (((tmpvar_54 * tmpvar_45.x) * tmpvar_45.z) - (vSinCos_53.x * tmpvar_45.y));
      tmpvar_55[1].x = (((tmpvar_54 * tmpvar_45.x) * tmpvar_45.y) - (vSinCos_53.x * tmpvar_45.z));
      tmpvar_55[1].y = (((tmpvar_54 * tmpvar_45.y) * tmpvar_45.y) + vSinCos_53.y);
      tmpvar_55[1].z = (((tmpvar_54 * tmpvar_45.y) * tmpvar_45.z) + (vSinCos_53.x * tmpvar_45.x));
      tmpvar_55[2].x = (((tmpvar_54 * tmpvar_45.x) * tmpvar_45.z) + (vSinCos_53.x * tmpvar_45.y));
      tmpvar_55[2].y = (((tmpvar_54 * tmpvar_45.y) * tmpvar_45.z) - (vSinCos_53.x * tmpvar_45.x));
      tmpvar_55[2].z = (((tmpvar_54 * tmpvar_45.z) * tmpvar_45.z) + vSinCos_53.y);
      vPos_18 = (normalize((
        (tmpvar_42 * tmpvar_55)
       * vPos_21)) * tmpvar_38);
    };
    FinalPosition_7 = vPos_18;
  };
  highp vec3 tmpvar_56;
  tmpvar_56 = (FinalPosition_7 + _glesMultiTexCoord1.xyz);
  FinalPosition_7 = tmpvar_56;
  if ((tmpvar_9 >= 3.0)) {
    highp vec3 vPos_57;
    vPos_57 = tmpvar_56;
    if ((tmpvar_9 == 5.0)) {
      highp vec3 vPos_58;
      vPos_58 = tmpvar_56;
      highp float fAdherenceScale_59;
      highp vec3 tmpvar_60;
      tmpvar_60 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_61;
      tmpvar_61 = (_ST_WindBranch.x + (tmpvar_8.x + tmpvar_8.y));
      highp vec4 vOscillations_62;
      highp float fOscillation_63;
      fOscillation_63 = 1.0;
      highp float fAmount_64;
      highp float fTarget_65;
      highp vec4 tmpvar_66;
      tmpvar_66.x = (tmpvar_61 + _glesMultiTexCoord0.w);
      tmpvar_66.y = ((tmpvar_61 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_66.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_61 + _glesMultiTexCoord0.w));
      tmpvar_66.w = ((tmpvar_61 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_67;
      tmpvar_67 = abs(((
        fract((tmpvar_66 + 0.5))
       * 2.0) - 1.0));
      vOscillations_62 = (((
        (tmpvar_67 * tmpvar_67)
       * 
        (3.0 - (2.0 * tmpvar_67))
      ) - 0.5) * 2.0);
      highp float tmpvar_68;
      tmpvar_68 = (vOscillations_62.y * vOscillations_62.z);
      fTarget_65 = 1.0;
      fAmount_64 = tmpvar_68;
      if ((tmpvar_68 < 0.0)) {
        fTarget_65 = -1.0;
        fAmount_64 = -(tmpvar_68);
      };
      fOscillation_63 = (((
        (mix (mix (tmpvar_68, fTarget_65, fAmount_64), fTarget_65, fAmount_64) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_62.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_62.w * _ST_WindBranchWhip.x)));
      vPos_58 = (tmpvar_56 + ((tmpvar_60 * fOscillation_63) * _ST_WindBranch.y));
      highp vec4 tmpvar_69;
      tmpvar_69.zw = vec2(0.0, 0.0);
      tmpvar_69.x = ((tmpvar_61 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_69.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_70;
      highp vec4 tmpvar_71;
      tmpvar_71 = abs(((
        fract((tmpvar_69 + 0.5))
       * 2.0) - 1.0));
      tmpvar_70 = (((
        (tmpvar_71 * tmpvar_71)
       * 
        (3.0 - (2.0 * tmpvar_71))
      ) - 0.5) * 2.0);
      fAdherenceScale_59 = (1.0 - ((
        ((tmpvar_70.x * tmpvar_70.y) * tmpvar_70.x)
       * tmpvar_70.y) * _ST_WindTurbulences.x));
      fAdherenceScale_59 = (fAdherenceScale_59 + ((vOscillations_62.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_58 = (vPos_58 + ((
        ((vRotatedBranchAnchor_5 - vPos_58) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_59) * _glesMultiTexCoord0.z));
      vPos_57 = vPos_58;
    } else {
      highp vec3 vPos_72;
      vPos_72 = vPos_57;
      highp vec3 tmpvar_73;
      tmpvar_73 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_74;
      tmpvar_74 = (_ST_WindBranch.x + (tmpvar_8.x + tmpvar_8.y));
      highp vec4 vOscillations_75;
      highp float fAmount_76;
      highp float fTarget_77;
      highp vec4 tmpvar_78;
      tmpvar_78.w = 0.0;
      tmpvar_78.x = (tmpvar_74 + _glesMultiTexCoord0.w);
      tmpvar_78.y = ((tmpvar_74 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_78.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_74 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      vOscillations_75 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      highp float tmpvar_80;
      tmpvar_80 = (vOscillations_75.y * vOscillations_75.z);
      fTarget_77 = 1.0;
      fAmount_76 = tmpvar_80;
      if ((tmpvar_80 < 0.0)) {
        fTarget_77 = -1.0;
        fAmount_76 = -(tmpvar_80);
      };
      vPos_72 = (vPos_57 + ((tmpvar_73 * 
        (((mix (
          mix (tmpvar_80, fTarget_77, fAmount_76)
        , fTarget_77, fAmount_76) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_75.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_57 = vPos_72;
    };
    FinalPosition_7 = vPos_57;
  };
  if ((tmpvar_9 > 0.0)) {
    highp vec3 vPos_81;
    vPos_81 = FinalPosition_7;
    highp float fAdjust_82;
    highp float fLength_83;
    fLength_83 = sqrt(dot (FinalPosition_7, FinalPosition_7));
    highp float tmpvar_84;
    tmpvar_84 = (max ((FinalPosition_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_82 = tmpvar_84;
    if ((tmpvar_84 != 0.0)) {
      fAdjust_82 = pow (tmpvar_84, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_85;
    tmpvar_85.zw = vec2(0.0, 0.0);
    tmpvar_85.x = (tmpvar_8.x + _ST_WindGlobal.x);
    tmpvar_85.y = (tmpvar_8.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_86;
    highp vec4 tmpvar_87;
    tmpvar_87 = abs(((
      fract((tmpvar_85 + 0.5))
     * 2.0) - 1.0));
    tmpvar_86 = (((
      (tmpvar_87 * tmpvar_87)
     * 
      (3.0 - (2.0 * tmpvar_87))
    ) - 0.5) * 2.0);
    vPos_81.xz = (FinalPosition_7.xz + (vRotatedWindVector_6.xz * (
      ((_ST_WindGlobal.y * (tmpvar_86.x + (tmpvar_86.y * tmpvar_86.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_82)));
    vPos_81 = (normalize(vPos_81) * fLength_83);
    FinalPosition_7 = vPos_81;
  };
  tmpvar_4.xyz = FinalPosition_7;
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_4).xyz - _LightPositionRange.xyz);
  gl_Position = (glstate_matrix_mvp * tmpvar_4);
  xlv_TEXCOORD1 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _LightPositionRange;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  lowp float x_1;
  x_1 = ((texture2D (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_2;
  tmpvar_2 = fract((vec4(1.0, 255.0, 65025.0, 1.658138e+07) * min (
    (sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w)
  , 0.999)));
  highp vec4 tmpvar_3;
  tmpvar_3 = (tmpvar_2 - (tmpvar_2.yzww * 0.003921569));
  gl_FragData[0] = tmpvar_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
out highp vec3 xlv_TEXCOORD0;
out mediump vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec2 tmpvar_2;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0.xy;
  tmpvar_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_5;
  highp vec3 vRotatedWindVector_6;
  highp vec3 FinalPosition_7;
  FinalPosition_7 = tmpvar_1.xyz;
  highp vec3 tmpvar_8;
  tmpvar_8.x = _Object2World[3].x;
  tmpvar_8.y = _Object2World[3].y;
  tmpvar_8.z = _Object2World[3].z;
  mediump float tmpvar_9;
  tmpvar_9 = (_WindQuality * _WindEnabled);
  if ((tmpvar_9 > 0.0)) {
    highp mat3 tmpvar_10;
    tmpvar_10[0] = _World2Object[0].xyz;
    tmpvar_10[1] = _World2Object[1].xyz;
    tmpvar_10[2] = _World2Object[2].xyz;
    vRotatedWindVector_6 = normalize((tmpvar_10 * _ST_WindVector.xyz));
    highp mat3 tmpvar_11;
    tmpvar_11[0] = _World2Object[0].xyz;
    tmpvar_11[1] = _World2Object[1].xyz;
    tmpvar_11[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_5 = (normalize((tmpvar_11 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_6 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_5 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_12;
  tmpvar_12 = ((_glesVertex.xyz - _glesMultiTexCoord1.xyz) * mix (1.0, _glesMultiTexCoord1.w, unity_LODFade.x));
  highp mat3 tmpvar_13;
  tmpvar_13[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_13[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_13[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = (normalize((tmpvar_12 * tmpvar_13)) * sqrt(dot (tmpvar_12, tmpvar_12)));
  FinalPosition_7 = tmpvar_14;
  if (((tmpvar_9 > 1.0) && (tmpvar_9 < 5.0))) {
    highp float tmpvar_15;
    tmpvar_15 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_16;
    isBestWind_16 = (tmpvar_9 == 4.0);
    bool bLeaf2_17;
    bLeaf2_17 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_18;
    vPos_18 = tmpvar_14;
    highp float tmpvar_19;
    if (bLeaf2_17) {
      tmpvar_19 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_19 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_20;
    if (bLeaf2_17) {
      tmpvar_20 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_20 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_21;
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (tmpvar_19 + tmpvar_15);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_21 = (tmpvar_14 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_20 * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vPos_18 = vPos_21;
    if (isBestWind_16) {
      highp vec3 tmpvar_24;
      tmpvar_24 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_25;
      if (bLeaf2_17) {
        tmpvar_25 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_25 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_26;
      if (bLeaf2_17) {
        tmpvar_26 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_26 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_27;
      if (bLeaf2_17) {
        tmpvar_27 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_27 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_28;
      if (bLeaf2_17) {
        tmpvar_28 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_28 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_29;
      if (bLeaf2_17) {
        tmpvar_29 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_29 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_30;
      if (bLeaf2_17) {
        tmpvar_30 = bool(1);
      } else {
        tmpvar_30 = bool(1);
      };
      highp float fTwitch_31;
      highp vec3 vAxis_32;
      highp vec3 tmpvar_33;
      tmpvar_33 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_34;
      tmpvar_34 = ((tmpvar_33.x + tmpvar_33.y) + tmpvar_33.z);
      highp vec4 tmpvar_35;
      tmpvar_35.x = (tmpvar_25 + tmpvar_34);
      tmpvar_35.y = ((tmpvar_25 * 0.75) - tmpvar_34);
      tmpvar_35.z = ((tmpvar_25 * 0.01) + tmpvar_34);
      tmpvar_35.w = (tmpvar_25 + tmpvar_34);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      highp float tmpvar_38;
      tmpvar_38 = sqrt(dot (vPos_21, vPos_21));
      highp float fAngle_39;
      fAngle_39 = ((_glesMultiTexCoord2.x * tmpvar_27) * (tmpvar_36.x + (tmpvar_36.y * tmpvar_36.y)));
      highp vec2 vSinCos_40;
      vSinCos_40.x = sin(fAngle_39);
      vSinCos_40.y = cos(fAngle_39);
      highp float tmpvar_41;
      tmpvar_41 = (1.0 - vSinCos_40.y);
      highp mat3 tmpvar_42;
      tmpvar_42[0].x = (((tmpvar_41 * tmpvar_24.x) * tmpvar_24.x) + vSinCos_40.y);
      tmpvar_42[0].y = (((tmpvar_41 * tmpvar_24.x) * tmpvar_24.y) + (vSinCos_40.x * tmpvar_24.z));
      tmpvar_42[0].z = (((tmpvar_41 * tmpvar_24.x) * tmpvar_24.z) - (vSinCos_40.x * tmpvar_24.y));
      tmpvar_42[1].x = (((tmpvar_41 * tmpvar_24.x) * tmpvar_24.y) - (vSinCos_40.x * tmpvar_24.z));
      tmpvar_42[1].y = (((tmpvar_41 * tmpvar_24.y) * tmpvar_24.y) + vSinCos_40.y);
      tmpvar_42[1].z = (((tmpvar_41 * tmpvar_24.y) * tmpvar_24.z) + (vSinCos_40.x * tmpvar_24.x));
      tmpvar_42[2].x = (((tmpvar_41 * tmpvar_24.x) * tmpvar_24.z) + (vSinCos_40.x * tmpvar_24.y));
      tmpvar_42[2].y = (((tmpvar_41 * tmpvar_24.y) * tmpvar_24.z) - (vSinCos_40.x * tmpvar_24.x));
      tmpvar_42[2].z = (((tmpvar_41 * tmpvar_24.z) * tmpvar_24.z) + vSinCos_40.y);
      highp vec3 tmpvar_43;
      tmpvar_43 = ((tmpvar_24.yzx * vRotatedWindVector_6.zxy) - (tmpvar_24.zxy * vRotatedWindVector_6.yzx));
      vAxis_32.xz = tmpvar_43.xz;
      highp float tmpvar_44;
      tmpvar_44 = clamp (dot (vRotatedWindVector_6, tmpvar_24), -1.0, 1.0);
      vAxis_32.y = (tmpvar_43.y + tmpvar_44);
      highp vec3 tmpvar_45;
      tmpvar_45 = normalize(vAxis_32);
      vAxis_32 = tmpvar_45;
      highp float tmpvar_46;
      tmpvar_46 = (1.570796 - (sign(tmpvar_44) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_44))) * (1.570796 + (abs(tmpvar_44) * (-0.2146018 + 
          (abs(tmpvar_44) * (0.08656672 + (abs(tmpvar_44) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_47;
      tmpvar_47 = (tmpvar_36.y - (tmpvar_36.x * tmpvar_36.x));
      fTwitch_31 = 0.0;
      if (tmpvar_30) {
        highp float fTime_48;
        fTime_48 = (tmpvar_29.z + tmpvar_34);
        highp vec4 tmpvar_49;
        tmpvar_49.zw = vec2(0.0, 0.0);
        tmpvar_49.x = fTime_48;
        tmpvar_49.y = (0.87 * fTime_48);
        highp vec4 tmpvar_50;
        highp vec4 tmpvar_51;
        tmpvar_51 = abs(((
          fract((tmpvar_49 + 0.5))
         * 2.0) - 1.0));
        tmpvar_50 = (((
          (tmpvar_51 * tmpvar_51)
         * 
          (3.0 - (2.0 * tmpvar_51))
        ) - 0.5) * 2.0);
        fTwitch_31 = (tmpvar_29.x * pow (clamp (
          ((((tmpvar_50.x * tmpvar_50.y) * tmpvar_50.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_29.y));
      };
      highp float fAngle_52;
      fAngle_52 = (_glesMultiTexCoord2.x * ((
        (tmpvar_46 * tmpvar_28)
       + 
        (tmpvar_47 * tmpvar_26)
      ) + fTwitch_31));
      highp vec2 vSinCos_53;
      vSinCos_53.x = sin(fAngle_52);
      vSinCos_53.y = cos(fAngle_52);
      highp float tmpvar_54;
      tmpvar_54 = (1.0 - vSinCos_53.y);
      highp mat3 tmpvar_55;
      tmpvar_55[0].x = (((tmpvar_54 * tmpvar_45.x) * tmpvar_45.x) + vSinCos_53.y);
      tmpvar_55[0].y = (((tmpvar_54 * tmpvar_45.x) * tmpvar_45.y) + (vSinCos_53.x * tmpvar_45.z));
      tmpvar_55[0].z = (((tmpvar_54 * tmpvar_45.x) * tmpvar_45.z) - (vSinCos_53.x * tmpvar_45.y));
      tmpvar_55[1].x = (((tmpvar_54 * tmpvar_45.x) * tmpvar_45.y) - (vSinCos_53.x * tmpvar_45.z));
      tmpvar_55[1].y = (((tmpvar_54 * tmpvar_45.y) * tmpvar_45.y) + vSinCos_53.y);
      tmpvar_55[1].z = (((tmpvar_54 * tmpvar_45.y) * tmpvar_45.z) + (vSinCos_53.x * tmpvar_45.x));
      tmpvar_55[2].x = (((tmpvar_54 * tmpvar_45.x) * tmpvar_45.z) + (vSinCos_53.x * tmpvar_45.y));
      tmpvar_55[2].y = (((tmpvar_54 * tmpvar_45.y) * tmpvar_45.z) - (vSinCos_53.x * tmpvar_45.x));
      tmpvar_55[2].z = (((tmpvar_54 * tmpvar_45.z) * tmpvar_45.z) + vSinCos_53.y);
      vPos_18 = (normalize((
        (tmpvar_42 * tmpvar_55)
       * vPos_21)) * tmpvar_38);
    };
    FinalPosition_7 = vPos_18;
  };
  highp vec3 tmpvar_56;
  tmpvar_56 = (FinalPosition_7 + _glesMultiTexCoord1.xyz);
  FinalPosition_7 = tmpvar_56;
  if ((tmpvar_9 >= 3.0)) {
    highp vec3 vPos_57;
    vPos_57 = tmpvar_56;
    if ((tmpvar_9 == 5.0)) {
      highp vec3 vPos_58;
      vPos_58 = tmpvar_56;
      highp float fAdherenceScale_59;
      highp vec3 tmpvar_60;
      tmpvar_60 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_61;
      tmpvar_61 = (_ST_WindBranch.x + (tmpvar_8.x + tmpvar_8.y));
      highp vec4 vOscillations_62;
      highp float fOscillation_63;
      fOscillation_63 = 1.0;
      highp float fAmount_64;
      highp float fTarget_65;
      highp vec4 tmpvar_66;
      tmpvar_66.x = (tmpvar_61 + _glesMultiTexCoord0.w);
      tmpvar_66.y = ((tmpvar_61 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_66.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_61 + _glesMultiTexCoord0.w));
      tmpvar_66.w = ((tmpvar_61 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_67;
      tmpvar_67 = abs(((
        fract((tmpvar_66 + 0.5))
       * 2.0) - 1.0));
      vOscillations_62 = (((
        (tmpvar_67 * tmpvar_67)
       * 
        (3.0 - (2.0 * tmpvar_67))
      ) - 0.5) * 2.0);
      highp float tmpvar_68;
      tmpvar_68 = (vOscillations_62.y * vOscillations_62.z);
      fTarget_65 = 1.0;
      fAmount_64 = tmpvar_68;
      if ((tmpvar_68 < 0.0)) {
        fTarget_65 = -1.0;
        fAmount_64 = -(tmpvar_68);
      };
      fOscillation_63 = (((
        (mix (mix (tmpvar_68, fTarget_65, fAmount_64), fTarget_65, fAmount_64) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_62.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_62.w * _ST_WindBranchWhip.x)));
      vPos_58 = (tmpvar_56 + ((tmpvar_60 * fOscillation_63) * _ST_WindBranch.y));
      highp vec4 tmpvar_69;
      tmpvar_69.zw = vec2(0.0, 0.0);
      tmpvar_69.x = ((tmpvar_61 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_69.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_70;
      highp vec4 tmpvar_71;
      tmpvar_71 = abs(((
        fract((tmpvar_69 + 0.5))
       * 2.0) - 1.0));
      tmpvar_70 = (((
        (tmpvar_71 * tmpvar_71)
       * 
        (3.0 - (2.0 * tmpvar_71))
      ) - 0.5) * 2.0);
      fAdherenceScale_59 = (1.0 - ((
        ((tmpvar_70.x * tmpvar_70.y) * tmpvar_70.x)
       * tmpvar_70.y) * _ST_WindTurbulences.x));
      fAdherenceScale_59 = (fAdherenceScale_59 + ((vOscillations_62.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_58 = (vPos_58 + ((
        ((vRotatedBranchAnchor_5 - vPos_58) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_59) * _glesMultiTexCoord0.z));
      vPos_57 = vPos_58;
    } else {
      highp vec3 vPos_72;
      vPos_72 = vPos_57;
      highp vec3 tmpvar_73;
      tmpvar_73 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_74;
      tmpvar_74 = (_ST_WindBranch.x + (tmpvar_8.x + tmpvar_8.y));
      highp vec4 vOscillations_75;
      highp float fAmount_76;
      highp float fTarget_77;
      highp vec4 tmpvar_78;
      tmpvar_78.w = 0.0;
      tmpvar_78.x = (tmpvar_74 + _glesMultiTexCoord0.w);
      tmpvar_78.y = ((tmpvar_74 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_78.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_74 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      vOscillations_75 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      highp float tmpvar_80;
      tmpvar_80 = (vOscillations_75.y * vOscillations_75.z);
      fTarget_77 = 1.0;
      fAmount_76 = tmpvar_80;
      if ((tmpvar_80 < 0.0)) {
        fTarget_77 = -1.0;
        fAmount_76 = -(tmpvar_80);
      };
      vPos_72 = (vPos_57 + ((tmpvar_73 * 
        (((mix (
          mix (tmpvar_80, fTarget_77, fAmount_76)
        , fTarget_77, fAmount_76) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_75.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_57 = vPos_72;
    };
    FinalPosition_7 = vPos_57;
  };
  if ((tmpvar_9 > 0.0)) {
    highp vec3 vPos_81;
    vPos_81 = FinalPosition_7;
    highp float fAdjust_82;
    highp float fLength_83;
    fLength_83 = sqrt(dot (FinalPosition_7, FinalPosition_7));
    highp float tmpvar_84;
    tmpvar_84 = (max ((FinalPosition_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_82 = tmpvar_84;
    if ((tmpvar_84 != 0.0)) {
      fAdjust_82 = pow (tmpvar_84, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_85;
    tmpvar_85.zw = vec2(0.0, 0.0);
    tmpvar_85.x = (tmpvar_8.x + _ST_WindGlobal.x);
    tmpvar_85.y = (tmpvar_8.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_86;
    highp vec4 tmpvar_87;
    tmpvar_87 = abs(((
      fract((tmpvar_85 + 0.5))
     * 2.0) - 1.0));
    tmpvar_86 = (((
      (tmpvar_87 * tmpvar_87)
     * 
      (3.0 - (2.0 * tmpvar_87))
    ) - 0.5) * 2.0);
    vPos_81.xz = (FinalPosition_7.xz + (vRotatedWindVector_6.xz * (
      ((_ST_WindGlobal.y * (tmpvar_86.x + (tmpvar_86.y * tmpvar_86.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_82)));
    vPos_81 = (normalize(vPos_81) * fLength_83);
    FinalPosition_7 = vPos_81;
  };
  tmpvar_4.xyz = FinalPosition_7;
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_4).xyz - _LightPositionRange.xyz);
  gl_Position = (glstate_matrix_mvp * tmpvar_4);
  xlv_TEXCOORD1 = tmpvar_2;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _LightPositionRange;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
in highp vec3 xlv_TEXCOORD0;
in mediump vec2 xlv_TEXCOORD1;
void main ()
{
  lowp float x_1;
  x_1 = ((texture (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_2;
  tmpvar_2 = vec4((sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w));
  _glesFragData[0] = tmpvar_2;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_FACING_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_FACING_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FACING_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FACING_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3"
}
}
 }
 Pass {
  Tags { "LIGHTMODE"="Vertex" "QUEUE"="Geometry" "IGNOREPROJECTOR"="true" "DisableBatching"="LodFading" "RenderType"="Opaque" }
  Cull [_Cull]
  GpuProgramID 424063
Program "vp" {
SubProgram "gles " {
Keywords { "GEOM_TYPE_BRANCH" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec4 tmpvar_2;
  lowp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord0.xy;
  tmpvar_4.xy = tmpvar_5;
  tmpvar_3.w = _Color.w;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * _glesColor.x);
  tmpvar_3.xyz = tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_8;
  highp vec3 vRotatedWindVector_9;
  highp vec3 FinalPosition_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = tmpvar_1.xyz;
  FinalPosition_10 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  mediump float tmpvar_13;
  tmpvar_13 = (_WindQuality * _WindEnabled);
  if ((tmpvar_13 > 0.0)) {
    highp mat3 tmpvar_14;
    tmpvar_14[0] = _World2Object[0].xyz;
    tmpvar_14[1] = _World2Object[1].xyz;
    tmpvar_14[2] = _World2Object[2].xyz;
    vRotatedWindVector_9 = normalize((tmpvar_14 * _ST_WindVector.xyz));
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_8 = (normalize((tmpvar_15 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_9 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_8 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_13 >= 3.0)) {
    highp vec3 vPos_16;
    vPos_16 = tmpvar_11;
    if ((tmpvar_13 == 5.0)) {
      highp vec3 vPos_17;
      vPos_17 = tmpvar_11;
      highp float fAdherenceScale_18;
      highp vec3 tmpvar_19;
      tmpvar_19 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_20;
      tmpvar_20 = (_ST_WindBranch.x + (tmpvar_12.x + tmpvar_12.y));
      highp vec4 vOscillations_21;
      highp float fOscillation_22;
      fOscillation_22 = 1.0;
      highp float fAmount_23;
      highp float fTarget_24;
      highp vec4 tmpvar_25;
      tmpvar_25.x = (tmpvar_20 + _glesMultiTexCoord0.w);
      tmpvar_25.y = ((tmpvar_20 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_25.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_20 + _glesMultiTexCoord0.w));
      tmpvar_25.w = ((tmpvar_20 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_26;
      tmpvar_26 = abs(((
        fract((tmpvar_25 + 0.5))
       * 2.0) - 1.0));
      vOscillations_21 = (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0);
      highp float tmpvar_27;
      tmpvar_27 = (vOscillations_21.y * vOscillations_21.z);
      fTarget_24 = 1.0;
      fAmount_23 = tmpvar_27;
      if ((tmpvar_27 < 0.0)) {
        fTarget_24 = -1.0;
        fAmount_23 = -(tmpvar_27);
      };
      fOscillation_22 = (((
        (mix (mix (tmpvar_27, fTarget_24, fAmount_23), fTarget_24, fAmount_23) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_21.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_21.w * _ST_WindBranchWhip.x)));
      vPos_17 = (_glesVertex.xyz + ((tmpvar_19 * fOscillation_22) * _ST_WindBranch.y));
      highp vec4 tmpvar_28;
      tmpvar_28.zw = vec2(0.0, 0.0);
      tmpvar_28.x = ((tmpvar_20 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_28.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_29;
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      tmpvar_29 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      fAdherenceScale_18 = (1.0 - ((
        ((tmpvar_29.x * tmpvar_29.y) * tmpvar_29.x)
       * tmpvar_29.y) * _ST_WindTurbulences.x));
      fAdherenceScale_18 = (fAdherenceScale_18 + ((vOscillations_21.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_17 = (vPos_17 + ((
        ((vRotatedBranchAnchor_8 - vPos_17) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_18) * _glesMultiTexCoord0.z));
      vPos_16 = vPos_17;
    } else {
      highp vec3 vPos_31;
      vPos_31 = vPos_16;
      highp vec3 tmpvar_32;
      tmpvar_32 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_33;
      tmpvar_33 = (_ST_WindBranch.x + (tmpvar_12.x + tmpvar_12.y));
      highp vec4 vOscillations_34;
      highp float fAmount_35;
      highp float fTarget_36;
      highp vec4 tmpvar_37;
      tmpvar_37.w = 0.0;
      tmpvar_37.x = (tmpvar_33 + _glesMultiTexCoord0.w);
      tmpvar_37.y = ((tmpvar_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_37.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      vOscillations_34 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      highp float tmpvar_39;
      tmpvar_39 = (vOscillations_34.y * vOscillations_34.z);
      fTarget_36 = 1.0;
      fAmount_35 = tmpvar_39;
      if ((tmpvar_39 < 0.0)) {
        fTarget_36 = -1.0;
        fAmount_35 = -(tmpvar_39);
      };
      vPos_31 = (vPos_16 + ((tmpvar_32 * 
        (((mix (
          mix (tmpvar_39, fTarget_36, fAmount_35)
        , fTarget_36, fAmount_35) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_34.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_16 = vPos_31;
    };
    FinalPosition_10 = vPos_16;
  };
  if ((tmpvar_13 > 0.0)) {
    highp vec3 vPos_40;
    vPos_40 = FinalPosition_10;
    highp float fAdjust_41;
    highp float fLength_42;
    fLength_42 = sqrt(dot (FinalPosition_10, FinalPosition_10));
    highp float tmpvar_43;
    tmpvar_43 = (max ((FinalPosition_10.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_41 = tmpvar_43;
    if ((tmpvar_43 != 0.0)) {
      fAdjust_41 = pow (tmpvar_43, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_44;
    tmpvar_44.zw = vec2(0.0, 0.0);
    tmpvar_44.x = (tmpvar_12.x + _ST_WindGlobal.x);
    tmpvar_44.y = (tmpvar_12.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_45;
    highp vec4 tmpvar_46;
    tmpvar_46 = abs(((
      fract((tmpvar_44 + 0.5))
     * 2.0) - 1.0));
    tmpvar_45 = (((
      (tmpvar_46 * tmpvar_46)
     * 
      (3.0 - (2.0 * tmpvar_46))
    ) - 0.5) * 2.0);
    vPos_40.xz = (FinalPosition_10.xz + (vRotatedWindVector_9.xz * (
      ((_ST_WindGlobal.y * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_41)));
    vPos_40 = (normalize(vPos_40) * fLength_42);
    FinalPosition_10 = vPos_40;
  };
  tmpvar_7.xyz = FinalPosition_10;
  tmpvar_2.w = tmpvar_3.w;
  highp vec3 lightColor_47;
  highp vec3 viewN_48;
  highp vec3 viewpos_49;
  viewpos_49 = (glstate_matrix_modelview0 * tmpvar_7).xyz;
  highp mat3 tmpvar_50;
  tmpvar_50[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_50[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_50[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_48 = normalize((tmpvar_50 * _glesNormal));
  lowp vec3 tmpvar_51;
  tmpvar_51 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_47 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = (unity_LightPosition[0].xyz - (viewpos_49 * unity_LightPosition[0].w));
  highp float tmpvar_53;
  tmpvar_53 = dot (tmpvar_52, tmpvar_52);
  highp vec3 tmpvar_54;
  tmpvar_54 = (tmpvar_52 * inversesqrt(tmpvar_53));
  lightColor_47 = (lightColor_47 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_48, tmpvar_54))
   * 
    ((1.0/((1.0 + (tmpvar_53 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_54, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_55;
  tmpvar_55 = (unity_LightPosition[1].xyz - (viewpos_49 * unity_LightPosition[1].w));
  highp float tmpvar_56;
  tmpvar_56 = dot (tmpvar_55, tmpvar_55);
  highp vec3 tmpvar_57;
  tmpvar_57 = (tmpvar_55 * inversesqrt(tmpvar_56));
  lightColor_47 = (lightColor_47 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_48, tmpvar_57))
   * 
    ((1.0/((1.0 + (tmpvar_56 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_57, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_58;
  tmpvar_58 = (unity_LightPosition[2].xyz - (viewpos_49 * unity_LightPosition[2].w));
  highp float tmpvar_59;
  tmpvar_59 = dot (tmpvar_58, tmpvar_58);
  highp vec3 tmpvar_60;
  tmpvar_60 = (tmpvar_58 * inversesqrt(tmpvar_59));
  lightColor_47 = (lightColor_47 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_48, tmpvar_60))
   * 
    ((1.0/((1.0 + (tmpvar_59 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_60, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_61;
  tmpvar_61 = (unity_LightPosition[3].xyz - (viewpos_49 * unity_LightPosition[3].w));
  highp float tmpvar_62;
  tmpvar_62 = dot (tmpvar_61, tmpvar_61);
  highp vec3 tmpvar_63;
  tmpvar_63 = (tmpvar_61 * inversesqrt(tmpvar_62));
  lightColor_47 = (lightColor_47 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_48, tmpvar_63))
   * 
    ((1.0/((1.0 + (tmpvar_62 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_63, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_64;
  tmpvar_64 = (tmpvar_3.xyz * lightColor_47);
  tmpvar_2.xyz = tmpvar_64;
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_Input_color = tmpvar_2;
  xlv_Input_interpolator1 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_4;
  mediump float tmpvar_5;
  tmpvar_5 = (diffuseColor_3.w * _Color.w);
  tmpvar_2 = tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7.xyz = tmpvar_1;
  tmpvar_7.w = tmpvar_2;
  gl_FragData[0] = tmpvar_7;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "GEOM_TYPE_BRANCH" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out lowp vec4 xlv_Input_color;
out mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec4 tmpvar_2;
  lowp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord0.xy;
  tmpvar_4.xy = tmpvar_5;
  tmpvar_3.w = _Color.w;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * _glesColor.x);
  tmpvar_3.xyz = tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_8;
  highp vec3 vRotatedWindVector_9;
  highp vec3 FinalPosition_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = tmpvar_1.xyz;
  FinalPosition_10 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  mediump float tmpvar_13;
  tmpvar_13 = (_WindQuality * _WindEnabled);
  if ((tmpvar_13 > 0.0)) {
    highp mat3 tmpvar_14;
    tmpvar_14[0] = _World2Object[0].xyz;
    tmpvar_14[1] = _World2Object[1].xyz;
    tmpvar_14[2] = _World2Object[2].xyz;
    vRotatedWindVector_9 = normalize((tmpvar_14 * _ST_WindVector.xyz));
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_8 = (normalize((tmpvar_15 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_9 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_8 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_13 >= 3.0)) {
    highp vec3 vPos_16;
    vPos_16 = tmpvar_11;
    if ((tmpvar_13 == 5.0)) {
      highp vec3 vPos_17;
      vPos_17 = tmpvar_11;
      highp float fAdherenceScale_18;
      highp vec3 tmpvar_19;
      tmpvar_19 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_20;
      tmpvar_20 = (_ST_WindBranch.x + (tmpvar_12.x + tmpvar_12.y));
      highp vec4 vOscillations_21;
      highp float fOscillation_22;
      fOscillation_22 = 1.0;
      highp float fAmount_23;
      highp float fTarget_24;
      highp vec4 tmpvar_25;
      tmpvar_25.x = (tmpvar_20 + _glesMultiTexCoord0.w);
      tmpvar_25.y = ((tmpvar_20 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_25.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_20 + _glesMultiTexCoord0.w));
      tmpvar_25.w = ((tmpvar_20 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_26;
      tmpvar_26 = abs(((
        fract((tmpvar_25 + 0.5))
       * 2.0) - 1.0));
      vOscillations_21 = (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0);
      highp float tmpvar_27;
      tmpvar_27 = (vOscillations_21.y * vOscillations_21.z);
      fTarget_24 = 1.0;
      fAmount_23 = tmpvar_27;
      if ((tmpvar_27 < 0.0)) {
        fTarget_24 = -1.0;
        fAmount_23 = -(tmpvar_27);
      };
      fOscillation_22 = (((
        (mix (mix (tmpvar_27, fTarget_24, fAmount_23), fTarget_24, fAmount_23) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_21.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_21.w * _ST_WindBranchWhip.x)));
      vPos_17 = (_glesVertex.xyz + ((tmpvar_19 * fOscillation_22) * _ST_WindBranch.y));
      highp vec4 tmpvar_28;
      tmpvar_28.zw = vec2(0.0, 0.0);
      tmpvar_28.x = ((tmpvar_20 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_28.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_29;
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      tmpvar_29 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      fAdherenceScale_18 = (1.0 - ((
        ((tmpvar_29.x * tmpvar_29.y) * tmpvar_29.x)
       * tmpvar_29.y) * _ST_WindTurbulences.x));
      fAdherenceScale_18 = (fAdherenceScale_18 + ((vOscillations_21.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_17 = (vPos_17 + ((
        ((vRotatedBranchAnchor_8 - vPos_17) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_18) * _glesMultiTexCoord0.z));
      vPos_16 = vPos_17;
    } else {
      highp vec3 vPos_31;
      vPos_31 = vPos_16;
      highp vec3 tmpvar_32;
      tmpvar_32 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_33;
      tmpvar_33 = (_ST_WindBranch.x + (tmpvar_12.x + tmpvar_12.y));
      highp vec4 vOscillations_34;
      highp float fAmount_35;
      highp float fTarget_36;
      highp vec4 tmpvar_37;
      tmpvar_37.w = 0.0;
      tmpvar_37.x = (tmpvar_33 + _glesMultiTexCoord0.w);
      tmpvar_37.y = ((tmpvar_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_37.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      vOscillations_34 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      highp float tmpvar_39;
      tmpvar_39 = (vOscillations_34.y * vOscillations_34.z);
      fTarget_36 = 1.0;
      fAmount_35 = tmpvar_39;
      if ((tmpvar_39 < 0.0)) {
        fTarget_36 = -1.0;
        fAmount_35 = -(tmpvar_39);
      };
      vPos_31 = (vPos_16 + ((tmpvar_32 * 
        (((mix (
          mix (tmpvar_39, fTarget_36, fAmount_35)
        , fTarget_36, fAmount_35) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_34.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_16 = vPos_31;
    };
    FinalPosition_10 = vPos_16;
  };
  if ((tmpvar_13 > 0.0)) {
    highp vec3 vPos_40;
    vPos_40 = FinalPosition_10;
    highp float fAdjust_41;
    highp float fLength_42;
    fLength_42 = sqrt(dot (FinalPosition_10, FinalPosition_10));
    highp float tmpvar_43;
    tmpvar_43 = (max ((FinalPosition_10.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_41 = tmpvar_43;
    if ((tmpvar_43 != 0.0)) {
      fAdjust_41 = pow (tmpvar_43, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_44;
    tmpvar_44.zw = vec2(0.0, 0.0);
    tmpvar_44.x = (tmpvar_12.x + _ST_WindGlobal.x);
    tmpvar_44.y = (tmpvar_12.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_45;
    highp vec4 tmpvar_46;
    tmpvar_46 = abs(((
      fract((tmpvar_44 + 0.5))
     * 2.0) - 1.0));
    tmpvar_45 = (((
      (tmpvar_46 * tmpvar_46)
     * 
      (3.0 - (2.0 * tmpvar_46))
    ) - 0.5) * 2.0);
    vPos_40.xz = (FinalPosition_10.xz + (vRotatedWindVector_9.xz * (
      ((_ST_WindGlobal.y * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_41)));
    vPos_40 = (normalize(vPos_40) * fLength_42);
    FinalPosition_10 = vPos_40;
  };
  tmpvar_7.xyz = FinalPosition_10;
  tmpvar_2.w = tmpvar_3.w;
  highp vec3 lightColor_47;
  highp vec3 viewN_48;
  highp vec3 viewpos_49;
  viewpos_49 = (glstate_matrix_modelview0 * tmpvar_7).xyz;
  highp mat3 tmpvar_50;
  tmpvar_50[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_50[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_50[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_48 = normalize((tmpvar_50 * _glesNormal));
  lowp vec3 tmpvar_51;
  tmpvar_51 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_47 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = (unity_LightPosition[0].xyz - (viewpos_49 * unity_LightPosition[0].w));
  highp float tmpvar_53;
  tmpvar_53 = dot (tmpvar_52, tmpvar_52);
  highp vec3 tmpvar_54;
  tmpvar_54 = (tmpvar_52 * inversesqrt(tmpvar_53));
  lightColor_47 = (lightColor_47 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_48, tmpvar_54))
   * 
    ((1.0/((1.0 + (tmpvar_53 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_54, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_55;
  tmpvar_55 = (unity_LightPosition[1].xyz - (viewpos_49 * unity_LightPosition[1].w));
  highp float tmpvar_56;
  tmpvar_56 = dot (tmpvar_55, tmpvar_55);
  highp vec3 tmpvar_57;
  tmpvar_57 = (tmpvar_55 * inversesqrt(tmpvar_56));
  lightColor_47 = (lightColor_47 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_48, tmpvar_57))
   * 
    ((1.0/((1.0 + (tmpvar_56 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_57, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_58;
  tmpvar_58 = (unity_LightPosition[2].xyz - (viewpos_49 * unity_LightPosition[2].w));
  highp float tmpvar_59;
  tmpvar_59 = dot (tmpvar_58, tmpvar_58);
  highp vec3 tmpvar_60;
  tmpvar_60 = (tmpvar_58 * inversesqrt(tmpvar_59));
  lightColor_47 = (lightColor_47 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_48, tmpvar_60))
   * 
    ((1.0/((1.0 + (tmpvar_59 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_60, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_61;
  tmpvar_61 = (unity_LightPosition[3].xyz - (viewpos_49 * unity_LightPosition[3].w));
  highp float tmpvar_62;
  tmpvar_62 = dot (tmpvar_61, tmpvar_61);
  highp vec3 tmpvar_63;
  tmpvar_63 = (tmpvar_61 * inversesqrt(tmpvar_62));
  lightColor_47 = (lightColor_47 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_48, tmpvar_63))
   * 
    ((1.0/((1.0 + (tmpvar_62 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_63, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_64;
  tmpvar_64 = (tmpvar_3.xyz * lightColor_47);
  tmpvar_2.xyz = tmpvar_64;
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_Input_color = tmpvar_2;
  xlv_Input_interpolator1 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
in lowp vec4 xlv_Input_color;
in mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_4;
  mediump float tmpvar_5;
  tmpvar_5 = (diffuseColor_3.w * _Color.w);
  tmpvar_2 = tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7.xyz = tmpvar_1;
  tmpvar_7.w = tmpvar_2;
  _glesFragData[0] = tmpvar_7;
}



#endif"
}
SubProgram "gles " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec4 tmpvar_2;
  lowp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord0.xy;
  tmpvar_4.xy = tmpvar_5;
  tmpvar_3.w = _Color.w;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * _glesColor.x);
  tmpvar_3.xyz = tmpvar_6;
  highp float cse_7;
  cse_7 = _Object2World[3].x;
  highp float cse_8;
  cse_8 = _Object2World[3].y;
  highp float tmpvar_9;
  tmpvar_9 = clamp (((
    fract(((cse_7 + cse_8) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_4.z = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  FinalPosition_13 = tmpvar_14;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_14;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_19;
      vPos_19 = tmpvar_14;
      highp float fAdherenceScale_20;
      highp vec3 tmpvar_21;
      tmpvar_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_22;
      tmpvar_22 = (_ST_WindBranch.x + (cse_7 + cse_8));
      highp vec4 vOscillations_23;
      highp float fOscillation_24;
      fOscillation_24 = 1.0;
      highp float fAmount_25;
      highp float fTarget_26;
      highp vec4 tmpvar_27;
      tmpvar_27.x = (tmpvar_22 + _glesMultiTexCoord0.w);
      tmpvar_27.y = ((tmpvar_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_27.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_22 + _glesMultiTexCoord0.w));
      tmpvar_27.w = ((tmpvar_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_28;
      tmpvar_28 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      vOscillations_23 = (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0);
      highp float tmpvar_29;
      tmpvar_29 = (vOscillations_23.y * vOscillations_23.z);
      fTarget_26 = 1.0;
      fAmount_25 = tmpvar_29;
      if ((tmpvar_29 < 0.0)) {
        fTarget_26 = -1.0;
        fAmount_25 = -(tmpvar_29);
      };
      fOscillation_24 = (((
        (mix (mix (tmpvar_29, fTarget_26, fAmount_25), fTarget_26, fAmount_25) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_23.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_23.w * _ST_WindBranchWhip.x)));
      vPos_19 = (_glesVertex.xyz + ((tmpvar_21 * fOscillation_24) * _ST_WindBranch.y));
      highp vec4 tmpvar_30;
      tmpvar_30.zw = vec2(0.0, 0.0);
      tmpvar_30.x = ((tmpvar_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_30.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_31;
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      tmpvar_31 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((
        ((tmpvar_31.x * tmpvar_31.y) * tmpvar_31.x)
       * tmpvar_31.y) * _ST_WindTurbulences.x));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_23.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_19 = (vPos_19 + ((
        ((vRotatedBranchAnchor_11 - vPos_19) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_18 = vPos_19;
    } else {
      highp vec3 vPos_33;
      vPos_33 = vPos_18;
      highp vec3 tmpvar_34;
      tmpvar_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_35;
      tmpvar_35 = (_ST_WindBranch.x + (cse_7 + cse_8));
      highp vec4 vOscillations_36;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (tmpvar_35 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((tmpvar_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_36 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_36.y * vOscillations_36.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      vPos_33 = (vPos_18 + ((tmpvar_34 * 
        (((mix (
          mix (tmpvar_41, fTarget_38, fAmount_37)
        , fTarget_38, fAmount_37) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_36.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_18 = vPos_33;
    };
    FinalPosition_13 = vPos_18;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_13;
    highp float fAdjust_43;
    highp float fLength_44;
    fLength_44 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_45;
    tmpvar_45 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_43 = tmpvar_45;
    if ((tmpvar_45 != 0.0)) {
      fAdjust_43 = pow (tmpvar_45, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_46;
    tmpvar_46.zw = vec2(0.0, 0.0);
    tmpvar_46.x = (cse_7 + _ST_WindGlobal.x);
    tmpvar_46.y = (cse_8 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_47;
    highp vec4 tmpvar_48;
    tmpvar_48 = abs(((
      fract((tmpvar_46 + 0.5))
     * 2.0) - 1.0));
    tmpvar_47 = (((
      (tmpvar_48 * tmpvar_48)
     * 
      (3.0 - (2.0 * tmpvar_48))
    ) - 0.5) * 2.0);
    vPos_42.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * (
      ((_ST_WindGlobal.y * (tmpvar_47.x + (tmpvar_47.y * tmpvar_47.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_43)));
    vPos_42 = (normalize(vPos_42) * fLength_44);
    FinalPosition_13 = vPos_42;
  };
  tmpvar_10.xyz = FinalPosition_13;
  tmpvar_2.w = tmpvar_3.w;
  highp vec3 lightColor_49;
  highp vec3 viewN_50;
  highp vec3 viewpos_51;
  viewpos_51 = (glstate_matrix_modelview0 * tmpvar_10).xyz;
  highp mat3 tmpvar_52;
  tmpvar_52[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_52[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_52[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_50 = normalize((tmpvar_52 * _glesNormal));
  lowp vec3 tmpvar_53;
  tmpvar_53 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_49 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = (unity_LightPosition[0].xyz - (viewpos_51 * unity_LightPosition[0].w));
  highp float tmpvar_55;
  tmpvar_55 = dot (tmpvar_54, tmpvar_54);
  highp vec3 tmpvar_56;
  tmpvar_56 = (tmpvar_54 * inversesqrt(tmpvar_55));
  lightColor_49 = (lightColor_49 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_50, tmpvar_56))
   * 
    ((1.0/((1.0 + (tmpvar_55 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_56, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_57;
  tmpvar_57 = (unity_LightPosition[1].xyz - (viewpos_51 * unity_LightPosition[1].w));
  highp float tmpvar_58;
  tmpvar_58 = dot (tmpvar_57, tmpvar_57);
  highp vec3 tmpvar_59;
  tmpvar_59 = (tmpvar_57 * inversesqrt(tmpvar_58));
  lightColor_49 = (lightColor_49 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_50, tmpvar_59))
   * 
    ((1.0/((1.0 + (tmpvar_58 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_59, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_60;
  tmpvar_60 = (unity_LightPosition[2].xyz - (viewpos_51 * unity_LightPosition[2].w));
  highp float tmpvar_61;
  tmpvar_61 = dot (tmpvar_60, tmpvar_60);
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_60 * inversesqrt(tmpvar_61));
  lightColor_49 = (lightColor_49 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_50, tmpvar_62))
   * 
    ((1.0/((1.0 + (tmpvar_61 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_62, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_63;
  tmpvar_63 = (unity_LightPosition[3].xyz - (viewpos_51 * unity_LightPosition[3].w));
  highp float tmpvar_64;
  tmpvar_64 = dot (tmpvar_63, tmpvar_63);
  highp vec3 tmpvar_65;
  tmpvar_65 = (tmpvar_63 * inversesqrt(tmpvar_64));
  lightColor_49 = (lightColor_49 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_50, tmpvar_65))
   * 
    ((1.0/((1.0 + (tmpvar_64 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_65, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_66;
  tmpvar_66 = (tmpvar_3.xyz * lightColor_49);
  tmpvar_2.xyz = tmpvar_66;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_Input_color = tmpvar_2;
  xlv_Input_interpolator1 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_4;
  mediump float tmpvar_5;
  tmpvar_5 = (diffuseColor_3.w * _Color.w);
  tmpvar_2 = tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (diffuseColor_3.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  diffuseColor_3.xyz = clamp ((tmpvar_6 * (
    ((max (diffuseColor_3.x, max (diffuseColor_3.y, diffuseColor_3.z)) / max (tmpvar_6.x, max (tmpvar_6.y, tmpvar_6.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_7;
  tmpvar_7 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8.xyz = tmpvar_1;
  tmpvar_8.w = tmpvar_2;
  gl_FragData[0] = tmpvar_8;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out lowp vec4 xlv_Input_color;
out mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec4 tmpvar_2;
  lowp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord0.xy;
  tmpvar_4.xy = tmpvar_5;
  tmpvar_3.w = _Color.w;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * _glesColor.x);
  tmpvar_3.xyz = tmpvar_6;
  highp float cse_7;
  cse_7 = _Object2World[3].x;
  highp float cse_8;
  cse_8 = _Object2World[3].y;
  highp float tmpvar_9;
  tmpvar_9 = clamp (((
    fract(((cse_7 + cse_8) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_4.z = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  FinalPosition_13 = tmpvar_14;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_14;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_19;
      vPos_19 = tmpvar_14;
      highp float fAdherenceScale_20;
      highp vec3 tmpvar_21;
      tmpvar_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_22;
      tmpvar_22 = (_ST_WindBranch.x + (cse_7 + cse_8));
      highp vec4 vOscillations_23;
      highp float fOscillation_24;
      fOscillation_24 = 1.0;
      highp float fAmount_25;
      highp float fTarget_26;
      highp vec4 tmpvar_27;
      tmpvar_27.x = (tmpvar_22 + _glesMultiTexCoord0.w);
      tmpvar_27.y = ((tmpvar_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_27.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_22 + _glesMultiTexCoord0.w));
      tmpvar_27.w = ((tmpvar_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_28;
      tmpvar_28 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      vOscillations_23 = (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0);
      highp float tmpvar_29;
      tmpvar_29 = (vOscillations_23.y * vOscillations_23.z);
      fTarget_26 = 1.0;
      fAmount_25 = tmpvar_29;
      if ((tmpvar_29 < 0.0)) {
        fTarget_26 = -1.0;
        fAmount_25 = -(tmpvar_29);
      };
      fOscillation_24 = (((
        (mix (mix (tmpvar_29, fTarget_26, fAmount_25), fTarget_26, fAmount_25) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_23.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_23.w * _ST_WindBranchWhip.x)));
      vPos_19 = (_glesVertex.xyz + ((tmpvar_21 * fOscillation_24) * _ST_WindBranch.y));
      highp vec4 tmpvar_30;
      tmpvar_30.zw = vec2(0.0, 0.0);
      tmpvar_30.x = ((tmpvar_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_30.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_31;
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      tmpvar_31 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((
        ((tmpvar_31.x * tmpvar_31.y) * tmpvar_31.x)
       * tmpvar_31.y) * _ST_WindTurbulences.x));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_23.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_19 = (vPos_19 + ((
        ((vRotatedBranchAnchor_11 - vPos_19) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_18 = vPos_19;
    } else {
      highp vec3 vPos_33;
      vPos_33 = vPos_18;
      highp vec3 tmpvar_34;
      tmpvar_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_35;
      tmpvar_35 = (_ST_WindBranch.x + (cse_7 + cse_8));
      highp vec4 vOscillations_36;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (tmpvar_35 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((tmpvar_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_36 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_36.y * vOscillations_36.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      vPos_33 = (vPos_18 + ((tmpvar_34 * 
        (((mix (
          mix (tmpvar_41, fTarget_38, fAmount_37)
        , fTarget_38, fAmount_37) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_36.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_18 = vPos_33;
    };
    FinalPosition_13 = vPos_18;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_13;
    highp float fAdjust_43;
    highp float fLength_44;
    fLength_44 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_45;
    tmpvar_45 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_43 = tmpvar_45;
    if ((tmpvar_45 != 0.0)) {
      fAdjust_43 = pow (tmpvar_45, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_46;
    tmpvar_46.zw = vec2(0.0, 0.0);
    tmpvar_46.x = (cse_7 + _ST_WindGlobal.x);
    tmpvar_46.y = (cse_8 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_47;
    highp vec4 tmpvar_48;
    tmpvar_48 = abs(((
      fract((tmpvar_46 + 0.5))
     * 2.0) - 1.0));
    tmpvar_47 = (((
      (tmpvar_48 * tmpvar_48)
     * 
      (3.0 - (2.0 * tmpvar_48))
    ) - 0.5) * 2.0);
    vPos_42.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * (
      ((_ST_WindGlobal.y * (tmpvar_47.x + (tmpvar_47.y * tmpvar_47.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_43)));
    vPos_42 = (normalize(vPos_42) * fLength_44);
    FinalPosition_13 = vPos_42;
  };
  tmpvar_10.xyz = FinalPosition_13;
  tmpvar_2.w = tmpvar_3.w;
  highp vec3 lightColor_49;
  highp vec3 viewN_50;
  highp vec3 viewpos_51;
  viewpos_51 = (glstate_matrix_modelview0 * tmpvar_10).xyz;
  highp mat3 tmpvar_52;
  tmpvar_52[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_52[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_52[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_50 = normalize((tmpvar_52 * _glesNormal));
  lowp vec3 tmpvar_53;
  tmpvar_53 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_49 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = (unity_LightPosition[0].xyz - (viewpos_51 * unity_LightPosition[0].w));
  highp float tmpvar_55;
  tmpvar_55 = dot (tmpvar_54, tmpvar_54);
  highp vec3 tmpvar_56;
  tmpvar_56 = (tmpvar_54 * inversesqrt(tmpvar_55));
  lightColor_49 = (lightColor_49 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_50, tmpvar_56))
   * 
    ((1.0/((1.0 + (tmpvar_55 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_56, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_57;
  tmpvar_57 = (unity_LightPosition[1].xyz - (viewpos_51 * unity_LightPosition[1].w));
  highp float tmpvar_58;
  tmpvar_58 = dot (tmpvar_57, tmpvar_57);
  highp vec3 tmpvar_59;
  tmpvar_59 = (tmpvar_57 * inversesqrt(tmpvar_58));
  lightColor_49 = (lightColor_49 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_50, tmpvar_59))
   * 
    ((1.0/((1.0 + (tmpvar_58 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_59, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_60;
  tmpvar_60 = (unity_LightPosition[2].xyz - (viewpos_51 * unity_LightPosition[2].w));
  highp float tmpvar_61;
  tmpvar_61 = dot (tmpvar_60, tmpvar_60);
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_60 * inversesqrt(tmpvar_61));
  lightColor_49 = (lightColor_49 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_50, tmpvar_62))
   * 
    ((1.0/((1.0 + (tmpvar_61 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_62, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_63;
  tmpvar_63 = (unity_LightPosition[3].xyz - (viewpos_51 * unity_LightPosition[3].w));
  highp float tmpvar_64;
  tmpvar_64 = dot (tmpvar_63, tmpvar_63);
  highp vec3 tmpvar_65;
  tmpvar_65 = (tmpvar_63 * inversesqrt(tmpvar_64));
  lightColor_49 = (lightColor_49 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_50, tmpvar_65))
   * 
    ((1.0/((1.0 + (tmpvar_64 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_65, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_66;
  tmpvar_66 = (tmpvar_3.xyz * lightColor_49);
  tmpvar_2.xyz = tmpvar_66;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_Input_color = tmpvar_2;
  xlv_Input_interpolator1 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
in lowp vec4 xlv_Input_color;
in mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_4;
  mediump float tmpvar_5;
  tmpvar_5 = (diffuseColor_3.w * _Color.w);
  tmpvar_2 = tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (diffuseColor_3.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  diffuseColor_3.xyz = clamp ((tmpvar_6 * (
    ((max (diffuseColor_3.x, max (diffuseColor_3.y, diffuseColor_3.z)) / max (tmpvar_6.x, max (tmpvar_6.y, tmpvar_6.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_7;
  tmpvar_7 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8.xyz = tmpvar_1;
  tmpvar_8.w = tmpvar_2;
  _glesFragData[0] = tmpvar_8;
}



#endif"
}
SubProgram "gles " {
Keywords { "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_interpolator2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec4 tmpvar_2;
  lowp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec2 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord0.xy;
  tmpvar_4.xy = tmpvar_6;
  tmpvar_3.w = _Color.w;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * _glesColor.x);
  tmpvar_3.xyz = tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord2.xy;
  tmpvar_5.xy = tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_10;
  highp vec3 vRotatedWindVector_11;
  highp vec3 FinalPosition_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = tmpvar_1.xyz;
  FinalPosition_12 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_11 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_10 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_13;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_19;
      vPos_19 = tmpvar_13;
      highp float fAdherenceScale_20;
      highp vec3 tmpvar_21;
      tmpvar_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_22;
      tmpvar_22 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_23;
      highp float fOscillation_24;
      fOscillation_24 = 1.0;
      highp float fAmount_25;
      highp float fTarget_26;
      highp vec4 tmpvar_27;
      tmpvar_27.x = (tmpvar_22 + _glesMultiTexCoord0.w);
      tmpvar_27.y = ((tmpvar_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_27.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_22 + _glesMultiTexCoord0.w));
      tmpvar_27.w = ((tmpvar_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_28;
      tmpvar_28 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      vOscillations_23 = (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0);
      highp float tmpvar_29;
      tmpvar_29 = (vOscillations_23.y * vOscillations_23.z);
      fTarget_26 = 1.0;
      fAmount_25 = tmpvar_29;
      if ((tmpvar_29 < 0.0)) {
        fTarget_26 = -1.0;
        fAmount_25 = -(tmpvar_29);
      };
      fOscillation_24 = (((
        (mix (mix (tmpvar_29, fTarget_26, fAmount_25), fTarget_26, fAmount_25) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_23.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_23.w * _ST_WindBranchWhip.x)));
      vPos_19 = (_glesVertex.xyz + ((tmpvar_21 * fOscillation_24) * _ST_WindBranch.y));
      highp vec4 tmpvar_30;
      tmpvar_30.zw = vec2(0.0, 0.0);
      tmpvar_30.x = ((tmpvar_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_30.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_31;
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      tmpvar_31 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((
        ((tmpvar_31.x * tmpvar_31.y) * tmpvar_31.x)
       * tmpvar_31.y) * _ST_WindTurbulences.x));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_23.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_19 = (vPos_19 + ((
        ((vRotatedBranchAnchor_10 - vPos_19) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_18 = vPos_19;
    } else {
      highp vec3 vPos_33;
      vPos_33 = vPos_18;
      highp vec3 tmpvar_34;
      tmpvar_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_35;
      tmpvar_35 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_36;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (tmpvar_35 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((tmpvar_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_36 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_36.y * vOscillations_36.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      vPos_33 = (vPos_18 + ((tmpvar_34 * 
        (((mix (
          mix (tmpvar_41, fTarget_38, fAmount_37)
        , fTarget_38, fAmount_37) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_36.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_18 = vPos_33;
    };
    FinalPosition_12 = vPos_18;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_12;
    highp float fAdjust_43;
    highp float fLength_44;
    fLength_44 = sqrt(dot (FinalPosition_12, FinalPosition_12));
    highp float tmpvar_45;
    tmpvar_45 = (max ((FinalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_43 = tmpvar_45;
    if ((tmpvar_45 != 0.0)) {
      fAdjust_43 = pow (tmpvar_45, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_46;
    tmpvar_46.zw = vec2(0.0, 0.0);
    tmpvar_46.x = (tmpvar_14.x + _ST_WindGlobal.x);
    tmpvar_46.y = (tmpvar_14.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_47;
    highp vec4 tmpvar_48;
    tmpvar_48 = abs(((
      fract((tmpvar_46 + 0.5))
     * 2.0) - 1.0));
    tmpvar_47 = (((
      (tmpvar_48 * tmpvar_48)
     * 
      (3.0 - (2.0 * tmpvar_48))
    ) - 0.5) * 2.0);
    vPos_42.xz = (FinalPosition_12.xz + (vRotatedWindVector_11.xz * (
      ((_ST_WindGlobal.y * (tmpvar_47.x + (tmpvar_47.y * tmpvar_47.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_43)));
    vPos_42 = (normalize(vPos_42) * fLength_44);
    FinalPosition_12 = vPos_42;
  };
  tmpvar_9.xyz = FinalPosition_12;
  tmpvar_2.w = tmpvar_3.w;
  highp vec3 lightColor_49;
  highp vec3 viewN_50;
  highp vec3 viewpos_51;
  viewpos_51 = (glstate_matrix_modelview0 * tmpvar_9).xyz;
  highp mat3 tmpvar_52;
  tmpvar_52[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_52[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_52[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_50 = normalize((tmpvar_52 * _glesNormal));
  lowp vec3 tmpvar_53;
  tmpvar_53 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_49 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = (unity_LightPosition[0].xyz - (viewpos_51 * unity_LightPosition[0].w));
  highp float tmpvar_55;
  tmpvar_55 = dot (tmpvar_54, tmpvar_54);
  highp vec3 tmpvar_56;
  tmpvar_56 = (tmpvar_54 * inversesqrt(tmpvar_55));
  lightColor_49 = (lightColor_49 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_50, tmpvar_56))
   * 
    ((1.0/((1.0 + (tmpvar_55 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_56, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_57;
  tmpvar_57 = (unity_LightPosition[1].xyz - (viewpos_51 * unity_LightPosition[1].w));
  highp float tmpvar_58;
  tmpvar_58 = dot (tmpvar_57, tmpvar_57);
  highp vec3 tmpvar_59;
  tmpvar_59 = (tmpvar_57 * inversesqrt(tmpvar_58));
  lightColor_49 = (lightColor_49 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_50, tmpvar_59))
   * 
    ((1.0/((1.0 + (tmpvar_58 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_59, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_60;
  tmpvar_60 = (unity_LightPosition[2].xyz - (viewpos_51 * unity_LightPosition[2].w));
  highp float tmpvar_61;
  tmpvar_61 = dot (tmpvar_60, tmpvar_60);
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_60 * inversesqrt(tmpvar_61));
  lightColor_49 = (lightColor_49 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_50, tmpvar_62))
   * 
    ((1.0/((1.0 + (tmpvar_61 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_62, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_63;
  tmpvar_63 = (unity_LightPosition[3].xyz - (viewpos_51 * unity_LightPosition[3].w));
  highp float tmpvar_64;
  tmpvar_64 = dot (tmpvar_63, tmpvar_63);
  highp vec3 tmpvar_65;
  tmpvar_65 = (tmpvar_63 * inversesqrt(tmpvar_64));
  lightColor_49 = (lightColor_49 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_50, tmpvar_65))
   * 
    ((1.0/((1.0 + (tmpvar_64 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_65, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_66;
  tmpvar_66 = (tmpvar_3.xyz * lightColor_49);
  tmpvar_2.xyz = tmpvar_66;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_Input_color = tmpvar_2;
  xlv_Input_interpolator1 = tmpvar_4;
  xlv_Input_interpolator2 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_interpolator2;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 detailColor_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_4 = tmpvar_5;
  mediump float tmpvar_6;
  tmpvar_6 = (diffuseColor_4.w * _Color.w);
  tmpvar_2 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_DetailTex, xlv_Input_interpolator2.xy);
  detailColor_3 = tmpvar_7;
  diffuseColor_4.xyz = mix (diffuseColor_4.xyz, detailColor_3.xyz, detailColor_3.www);
  mediump vec3 tmpvar_8;
  tmpvar_8 = (diffuseColor_4.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9.xyz = tmpvar_1;
  tmpvar_9.w = tmpvar_2;
  gl_FragData[0] = tmpvar_9;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out lowp vec4 xlv_Input_color;
out mediump vec3 xlv_Input_interpolator1;
out mediump vec3 xlv_Input_interpolator2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec4 tmpvar_2;
  lowp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec2 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord0.xy;
  tmpvar_4.xy = tmpvar_6;
  tmpvar_3.w = _Color.w;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * _glesColor.x);
  tmpvar_3.xyz = tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord2.xy;
  tmpvar_5.xy = tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_10;
  highp vec3 vRotatedWindVector_11;
  highp vec3 FinalPosition_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = tmpvar_1.xyz;
  FinalPosition_12 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_11 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_10 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_13;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_19;
      vPos_19 = tmpvar_13;
      highp float fAdherenceScale_20;
      highp vec3 tmpvar_21;
      tmpvar_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_22;
      tmpvar_22 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_23;
      highp float fOscillation_24;
      fOscillation_24 = 1.0;
      highp float fAmount_25;
      highp float fTarget_26;
      highp vec4 tmpvar_27;
      tmpvar_27.x = (tmpvar_22 + _glesMultiTexCoord0.w);
      tmpvar_27.y = ((tmpvar_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_27.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_22 + _glesMultiTexCoord0.w));
      tmpvar_27.w = ((tmpvar_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_28;
      tmpvar_28 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      vOscillations_23 = (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0);
      highp float tmpvar_29;
      tmpvar_29 = (vOscillations_23.y * vOscillations_23.z);
      fTarget_26 = 1.0;
      fAmount_25 = tmpvar_29;
      if ((tmpvar_29 < 0.0)) {
        fTarget_26 = -1.0;
        fAmount_25 = -(tmpvar_29);
      };
      fOscillation_24 = (((
        (mix (mix (tmpvar_29, fTarget_26, fAmount_25), fTarget_26, fAmount_25) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_23.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_23.w * _ST_WindBranchWhip.x)));
      vPos_19 = (_glesVertex.xyz + ((tmpvar_21 * fOscillation_24) * _ST_WindBranch.y));
      highp vec4 tmpvar_30;
      tmpvar_30.zw = vec2(0.0, 0.0);
      tmpvar_30.x = ((tmpvar_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_30.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_31;
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      tmpvar_31 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((
        ((tmpvar_31.x * tmpvar_31.y) * tmpvar_31.x)
       * tmpvar_31.y) * _ST_WindTurbulences.x));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_23.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_19 = (vPos_19 + ((
        ((vRotatedBranchAnchor_10 - vPos_19) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_18 = vPos_19;
    } else {
      highp vec3 vPos_33;
      vPos_33 = vPos_18;
      highp vec3 tmpvar_34;
      tmpvar_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_35;
      tmpvar_35 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_36;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (tmpvar_35 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((tmpvar_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_36 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_36.y * vOscillations_36.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      vPos_33 = (vPos_18 + ((tmpvar_34 * 
        (((mix (
          mix (tmpvar_41, fTarget_38, fAmount_37)
        , fTarget_38, fAmount_37) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_36.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_18 = vPos_33;
    };
    FinalPosition_12 = vPos_18;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_12;
    highp float fAdjust_43;
    highp float fLength_44;
    fLength_44 = sqrt(dot (FinalPosition_12, FinalPosition_12));
    highp float tmpvar_45;
    tmpvar_45 = (max ((FinalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_43 = tmpvar_45;
    if ((tmpvar_45 != 0.0)) {
      fAdjust_43 = pow (tmpvar_45, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_46;
    tmpvar_46.zw = vec2(0.0, 0.0);
    tmpvar_46.x = (tmpvar_14.x + _ST_WindGlobal.x);
    tmpvar_46.y = (tmpvar_14.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_47;
    highp vec4 tmpvar_48;
    tmpvar_48 = abs(((
      fract((tmpvar_46 + 0.5))
     * 2.0) - 1.0));
    tmpvar_47 = (((
      (tmpvar_48 * tmpvar_48)
     * 
      (3.0 - (2.0 * tmpvar_48))
    ) - 0.5) * 2.0);
    vPos_42.xz = (FinalPosition_12.xz + (vRotatedWindVector_11.xz * (
      ((_ST_WindGlobal.y * (tmpvar_47.x + (tmpvar_47.y * tmpvar_47.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_43)));
    vPos_42 = (normalize(vPos_42) * fLength_44);
    FinalPosition_12 = vPos_42;
  };
  tmpvar_9.xyz = FinalPosition_12;
  tmpvar_2.w = tmpvar_3.w;
  highp vec3 lightColor_49;
  highp vec3 viewN_50;
  highp vec3 viewpos_51;
  viewpos_51 = (glstate_matrix_modelview0 * tmpvar_9).xyz;
  highp mat3 tmpvar_52;
  tmpvar_52[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_52[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_52[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_50 = normalize((tmpvar_52 * _glesNormal));
  lowp vec3 tmpvar_53;
  tmpvar_53 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_49 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = (unity_LightPosition[0].xyz - (viewpos_51 * unity_LightPosition[0].w));
  highp float tmpvar_55;
  tmpvar_55 = dot (tmpvar_54, tmpvar_54);
  highp vec3 tmpvar_56;
  tmpvar_56 = (tmpvar_54 * inversesqrt(tmpvar_55));
  lightColor_49 = (lightColor_49 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_50, tmpvar_56))
   * 
    ((1.0/((1.0 + (tmpvar_55 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_56, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_57;
  tmpvar_57 = (unity_LightPosition[1].xyz - (viewpos_51 * unity_LightPosition[1].w));
  highp float tmpvar_58;
  tmpvar_58 = dot (tmpvar_57, tmpvar_57);
  highp vec3 tmpvar_59;
  tmpvar_59 = (tmpvar_57 * inversesqrt(tmpvar_58));
  lightColor_49 = (lightColor_49 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_50, tmpvar_59))
   * 
    ((1.0/((1.0 + (tmpvar_58 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_59, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_60;
  tmpvar_60 = (unity_LightPosition[2].xyz - (viewpos_51 * unity_LightPosition[2].w));
  highp float tmpvar_61;
  tmpvar_61 = dot (tmpvar_60, tmpvar_60);
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_60 * inversesqrt(tmpvar_61));
  lightColor_49 = (lightColor_49 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_50, tmpvar_62))
   * 
    ((1.0/((1.0 + (tmpvar_61 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_62, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_63;
  tmpvar_63 = (unity_LightPosition[3].xyz - (viewpos_51 * unity_LightPosition[3].w));
  highp float tmpvar_64;
  tmpvar_64 = dot (tmpvar_63, tmpvar_63);
  highp vec3 tmpvar_65;
  tmpvar_65 = (tmpvar_63 * inversesqrt(tmpvar_64));
  lightColor_49 = (lightColor_49 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_50, tmpvar_65))
   * 
    ((1.0/((1.0 + (tmpvar_64 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_65, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_66;
  tmpvar_66 = (tmpvar_3.xyz * lightColor_49);
  tmpvar_2.xyz = tmpvar_66;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_Input_color = tmpvar_2;
  xlv_Input_interpolator1 = tmpvar_4;
  xlv_Input_interpolator2 = tmpvar_5;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
in lowp vec4 xlv_Input_color;
in mediump vec3 xlv_Input_interpolator1;
in mediump vec3 xlv_Input_interpolator2;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 detailColor_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_4 = tmpvar_5;
  mediump float tmpvar_6;
  tmpvar_6 = (diffuseColor_4.w * _Color.w);
  tmpvar_2 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture (_DetailTex, xlv_Input_interpolator2.xy);
  detailColor_3 = tmpvar_7;
  diffuseColor_4.xyz = mix (diffuseColor_4.xyz, detailColor_3.xyz, detailColor_3.www);
  mediump vec3 tmpvar_8;
  tmpvar_8 = (diffuseColor_4.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9.xyz = tmpvar_1;
  tmpvar_9.w = tmpvar_2;
  _glesFragData[0] = tmpvar_9;
}



#endif"
}
SubProgram "gles " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_interpolator2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec4 tmpvar_2;
  lowp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec2 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord0.xy;
  tmpvar_4.xy = tmpvar_6;
  tmpvar_3.w = _Color.w;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * _glesColor.x);
  tmpvar_3.xyz = tmpvar_7;
  highp float cse_8;
  cse_8 = _Object2World[3].x;
  highp float cse_9;
  cse_9 = _Object2World[3].y;
  highp float tmpvar_10;
  tmpvar_10 = clamp (((
    fract(((cse_8 + cse_9) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_4.z = tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord2.xy;
  tmpvar_5.xy = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_16;
      highp float fAdherenceScale_22;
      highp vec3 tmpvar_23;
      tmpvar_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_24;
      tmpvar_24 = (_ST_WindBranch.x + (cse_8 + cse_9));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (tmpvar_24 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((tmpvar_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_24 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((tmpvar_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        (mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_25.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((tmpvar_23 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((tmpvar_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((
        ((tmpvar_33.x * tmpvar_33.y) * tmpvar_33.x)
       * tmpvar_33.y) * _ST_WindTurbulences.x));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp vec3 tmpvar_36;
      tmpvar_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_37;
      tmpvar_37 = (_ST_WindBranch.x + (cse_8 + cse_9));
      highp vec4 vOscillations_38;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (tmpvar_37 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((tmpvar_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      vPos_35 = (vPos_20 + ((tmpvar_36 * 
        (((mix (
          mix (tmpvar_43, fTarget_40, fAmount_39)
        , fTarget_40, fAmount_39) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_15;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_47;
    tmpvar_47 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (cse_8 + _ST_WindGlobal.x);
    tmpvar_48.y = (cse_9 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    vPos_44.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_45)));
    vPos_44 = (normalize(vPos_44) * fLength_46);
    FinalPosition_15 = vPos_44;
  };
  tmpvar_12.xyz = FinalPosition_15;
  tmpvar_2.w = tmpvar_3.w;
  highp vec3 lightColor_51;
  highp vec3 viewN_52;
  highp vec3 viewpos_53;
  viewpos_53 = (glstate_matrix_modelview0 * tmpvar_12).xyz;
  highp mat3 tmpvar_54;
  tmpvar_54[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_54[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_54[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_52 = normalize((tmpvar_54 * _glesNormal));
  lowp vec3 tmpvar_55;
  tmpvar_55 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_51 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = (unity_LightPosition[0].xyz - (viewpos_53 * unity_LightPosition[0].w));
  highp float tmpvar_57;
  tmpvar_57 = dot (tmpvar_56, tmpvar_56);
  highp vec3 tmpvar_58;
  tmpvar_58 = (tmpvar_56 * inversesqrt(tmpvar_57));
  lightColor_51 = (lightColor_51 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_52, tmpvar_58))
   * 
    ((1.0/((1.0 + (tmpvar_57 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_58, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_59;
  tmpvar_59 = (unity_LightPosition[1].xyz - (viewpos_53 * unity_LightPosition[1].w));
  highp float tmpvar_60;
  tmpvar_60 = dot (tmpvar_59, tmpvar_59);
  highp vec3 tmpvar_61;
  tmpvar_61 = (tmpvar_59 * inversesqrt(tmpvar_60));
  lightColor_51 = (lightColor_51 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_52, tmpvar_61))
   * 
    ((1.0/((1.0 + (tmpvar_60 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_61, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_62;
  tmpvar_62 = (unity_LightPosition[2].xyz - (viewpos_53 * unity_LightPosition[2].w));
  highp float tmpvar_63;
  tmpvar_63 = dot (tmpvar_62, tmpvar_62);
  highp vec3 tmpvar_64;
  tmpvar_64 = (tmpvar_62 * inversesqrt(tmpvar_63));
  lightColor_51 = (lightColor_51 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_52, tmpvar_64))
   * 
    ((1.0/((1.0 + (tmpvar_63 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_64, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_65;
  tmpvar_65 = (unity_LightPosition[3].xyz - (viewpos_53 * unity_LightPosition[3].w));
  highp float tmpvar_66;
  tmpvar_66 = dot (tmpvar_65, tmpvar_65);
  highp vec3 tmpvar_67;
  tmpvar_67 = (tmpvar_65 * inversesqrt(tmpvar_66));
  lightColor_51 = (lightColor_51 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_52, tmpvar_67))
   * 
    ((1.0/((1.0 + (tmpvar_66 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_67, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_3.xyz * lightColor_51);
  tmpvar_2.xyz = tmpvar_68;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_Input_color = tmpvar_2;
  xlv_Input_interpolator1 = tmpvar_4;
  xlv_Input_interpolator2 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_interpolator2;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 detailColor_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_4 = tmpvar_5;
  mediump float tmpvar_6;
  tmpvar_6 = (diffuseColor_4.w * _Color.w);
  tmpvar_2 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_DetailTex, xlv_Input_interpolator2.xy);
  detailColor_3 = tmpvar_7;
  diffuseColor_4.xyz = mix (diffuseColor_4.xyz, detailColor_3.xyz, detailColor_3.www);
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  diffuseColor_4.xyz = clamp ((tmpvar_8 * (
    ((max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_8.x, max (tmpvar_8.y, tmpvar_8.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_9;
  tmpvar_9 = (diffuseColor_4.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10.xyz = tmpvar_1;
  tmpvar_10.w = tmpvar_2;
  gl_FragData[0] = tmpvar_10;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out lowp vec4 xlv_Input_color;
out mediump vec3 xlv_Input_interpolator1;
out mediump vec3 xlv_Input_interpolator2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec4 tmpvar_2;
  lowp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec2 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord0.xy;
  tmpvar_4.xy = tmpvar_6;
  tmpvar_3.w = _Color.w;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * _glesColor.x);
  tmpvar_3.xyz = tmpvar_7;
  highp float cse_8;
  cse_8 = _Object2World[3].x;
  highp float cse_9;
  cse_9 = _Object2World[3].y;
  highp float tmpvar_10;
  tmpvar_10 = clamp (((
    fract(((cse_8 + cse_9) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_4.z = tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord2.xy;
  tmpvar_5.xy = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_16;
      highp float fAdherenceScale_22;
      highp vec3 tmpvar_23;
      tmpvar_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_24;
      tmpvar_24 = (_ST_WindBranch.x + (cse_8 + cse_9));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (tmpvar_24 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((tmpvar_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_24 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((tmpvar_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        (mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_25.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((tmpvar_23 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((tmpvar_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((
        ((tmpvar_33.x * tmpvar_33.y) * tmpvar_33.x)
       * tmpvar_33.y) * _ST_WindTurbulences.x));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp vec3 tmpvar_36;
      tmpvar_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_37;
      tmpvar_37 = (_ST_WindBranch.x + (cse_8 + cse_9));
      highp vec4 vOscillations_38;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (tmpvar_37 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((tmpvar_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      vPos_35 = (vPos_20 + ((tmpvar_36 * 
        (((mix (
          mix (tmpvar_43, fTarget_40, fAmount_39)
        , fTarget_40, fAmount_39) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_15;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_47;
    tmpvar_47 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (cse_8 + _ST_WindGlobal.x);
    tmpvar_48.y = (cse_9 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    vPos_44.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_45)));
    vPos_44 = (normalize(vPos_44) * fLength_46);
    FinalPosition_15 = vPos_44;
  };
  tmpvar_12.xyz = FinalPosition_15;
  tmpvar_2.w = tmpvar_3.w;
  highp vec3 lightColor_51;
  highp vec3 viewN_52;
  highp vec3 viewpos_53;
  viewpos_53 = (glstate_matrix_modelview0 * tmpvar_12).xyz;
  highp mat3 tmpvar_54;
  tmpvar_54[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_54[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_54[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_52 = normalize((tmpvar_54 * _glesNormal));
  lowp vec3 tmpvar_55;
  tmpvar_55 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_51 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = (unity_LightPosition[0].xyz - (viewpos_53 * unity_LightPosition[0].w));
  highp float tmpvar_57;
  tmpvar_57 = dot (tmpvar_56, tmpvar_56);
  highp vec3 tmpvar_58;
  tmpvar_58 = (tmpvar_56 * inversesqrt(tmpvar_57));
  lightColor_51 = (lightColor_51 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_52, tmpvar_58))
   * 
    ((1.0/((1.0 + (tmpvar_57 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_58, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_59;
  tmpvar_59 = (unity_LightPosition[1].xyz - (viewpos_53 * unity_LightPosition[1].w));
  highp float tmpvar_60;
  tmpvar_60 = dot (tmpvar_59, tmpvar_59);
  highp vec3 tmpvar_61;
  tmpvar_61 = (tmpvar_59 * inversesqrt(tmpvar_60));
  lightColor_51 = (lightColor_51 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_52, tmpvar_61))
   * 
    ((1.0/((1.0 + (tmpvar_60 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_61, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_62;
  tmpvar_62 = (unity_LightPosition[2].xyz - (viewpos_53 * unity_LightPosition[2].w));
  highp float tmpvar_63;
  tmpvar_63 = dot (tmpvar_62, tmpvar_62);
  highp vec3 tmpvar_64;
  tmpvar_64 = (tmpvar_62 * inversesqrt(tmpvar_63));
  lightColor_51 = (lightColor_51 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_52, tmpvar_64))
   * 
    ((1.0/((1.0 + (tmpvar_63 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_64, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_65;
  tmpvar_65 = (unity_LightPosition[3].xyz - (viewpos_53 * unity_LightPosition[3].w));
  highp float tmpvar_66;
  tmpvar_66 = dot (tmpvar_65, tmpvar_65);
  highp vec3 tmpvar_67;
  tmpvar_67 = (tmpvar_65 * inversesqrt(tmpvar_66));
  lightColor_51 = (lightColor_51 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_52, tmpvar_67))
   * 
    ((1.0/((1.0 + (tmpvar_66 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_67, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_3.xyz * lightColor_51);
  tmpvar_2.xyz = tmpvar_68;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_Input_color = tmpvar_2;
  xlv_Input_interpolator1 = tmpvar_4;
  xlv_Input_interpolator2 = tmpvar_5;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
in lowp vec4 xlv_Input_color;
in mediump vec3 xlv_Input_interpolator1;
in mediump vec3 xlv_Input_interpolator2;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 detailColor_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_4 = tmpvar_5;
  mediump float tmpvar_6;
  tmpvar_6 = (diffuseColor_4.w * _Color.w);
  tmpvar_2 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture (_DetailTex, xlv_Input_interpolator2.xy);
  detailColor_3 = tmpvar_7;
  diffuseColor_4.xyz = mix (diffuseColor_4.xyz, detailColor_3.xyz, detailColor_3.www);
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  diffuseColor_4.xyz = clamp ((tmpvar_8 * (
    ((max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_8.x, max (tmpvar_8.y, tmpvar_8.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_9;
  tmpvar_9 = (diffuseColor_4.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10.xyz = tmpvar_1;
  tmpvar_10.w = tmpvar_2;
  _glesFragData[0] = tmpvar_10;
}



#endif"
}
SubProgram "gles " {
Keywords { "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_interpolator2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec4 tmpvar_2;
  lowp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec2 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord0.xy;
  tmpvar_4.xy = tmpvar_6;
  tmpvar_3.w = _Color.w;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * _glesColor.x);
  tmpvar_3.xyz = tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_8.xy = _glesMultiTexCoord2.zw;
  tmpvar_8.z = _glesMultiTexCoord1.w;
  tmpvar_5 = tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_10;
  highp vec3 vRotatedWindVector_11;
  highp vec3 FinalPosition_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = tmpvar_1.xyz;
  FinalPosition_12 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_11 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_10 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_13;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_19;
      vPos_19 = tmpvar_13;
      highp float fAdherenceScale_20;
      highp vec3 tmpvar_21;
      tmpvar_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_22;
      tmpvar_22 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_23;
      highp float fOscillation_24;
      fOscillation_24 = 1.0;
      highp float fAmount_25;
      highp float fTarget_26;
      highp vec4 tmpvar_27;
      tmpvar_27.x = (tmpvar_22 + _glesMultiTexCoord0.w);
      tmpvar_27.y = ((tmpvar_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_27.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_22 + _glesMultiTexCoord0.w));
      tmpvar_27.w = ((tmpvar_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_28;
      tmpvar_28 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      vOscillations_23 = (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0);
      highp float tmpvar_29;
      tmpvar_29 = (vOscillations_23.y * vOscillations_23.z);
      fTarget_26 = 1.0;
      fAmount_25 = tmpvar_29;
      if ((tmpvar_29 < 0.0)) {
        fTarget_26 = -1.0;
        fAmount_25 = -(tmpvar_29);
      };
      fOscillation_24 = (((
        (mix (mix (tmpvar_29, fTarget_26, fAmount_25), fTarget_26, fAmount_25) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_23.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_23.w * _ST_WindBranchWhip.x)));
      vPos_19 = (_glesVertex.xyz + ((tmpvar_21 * fOscillation_24) * _ST_WindBranch.y));
      highp vec4 tmpvar_30;
      tmpvar_30.zw = vec2(0.0, 0.0);
      tmpvar_30.x = ((tmpvar_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_30.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_31;
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      tmpvar_31 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((
        ((tmpvar_31.x * tmpvar_31.y) * tmpvar_31.x)
       * tmpvar_31.y) * _ST_WindTurbulences.x));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_23.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_19 = (vPos_19 + ((
        ((vRotatedBranchAnchor_10 - vPos_19) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_18 = vPos_19;
    } else {
      highp vec3 vPos_33;
      vPos_33 = vPos_18;
      highp vec3 tmpvar_34;
      tmpvar_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_35;
      tmpvar_35 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_36;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (tmpvar_35 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((tmpvar_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_36 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_36.y * vOscillations_36.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      vPos_33 = (vPos_18 + ((tmpvar_34 * 
        (((mix (
          mix (tmpvar_41, fTarget_38, fAmount_37)
        , fTarget_38, fAmount_37) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_36.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_18 = vPos_33;
    };
    FinalPosition_12 = vPos_18;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_12;
    highp float fAdjust_43;
    highp float fLength_44;
    fLength_44 = sqrt(dot (FinalPosition_12, FinalPosition_12));
    highp float tmpvar_45;
    tmpvar_45 = (max ((FinalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_43 = tmpvar_45;
    if ((tmpvar_45 != 0.0)) {
      fAdjust_43 = pow (tmpvar_45, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_46;
    tmpvar_46.zw = vec2(0.0, 0.0);
    tmpvar_46.x = (tmpvar_14.x + _ST_WindGlobal.x);
    tmpvar_46.y = (tmpvar_14.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_47;
    highp vec4 tmpvar_48;
    tmpvar_48 = abs(((
      fract((tmpvar_46 + 0.5))
     * 2.0) - 1.0));
    tmpvar_47 = (((
      (tmpvar_48 * tmpvar_48)
     * 
      (3.0 - (2.0 * tmpvar_48))
    ) - 0.5) * 2.0);
    vPos_42.xz = (FinalPosition_12.xz + (vRotatedWindVector_11.xz * (
      ((_ST_WindGlobal.y * (tmpvar_47.x + (tmpvar_47.y * tmpvar_47.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_43)));
    vPos_42 = (normalize(vPos_42) * fLength_44);
    FinalPosition_12 = vPos_42;
  };
  tmpvar_9.xyz = FinalPosition_12;
  tmpvar_2.w = tmpvar_3.w;
  highp vec3 lightColor_49;
  highp vec3 viewN_50;
  highp vec3 viewpos_51;
  viewpos_51 = (glstate_matrix_modelview0 * tmpvar_9).xyz;
  highp mat3 tmpvar_52;
  tmpvar_52[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_52[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_52[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_50 = normalize((tmpvar_52 * _glesNormal));
  lowp vec3 tmpvar_53;
  tmpvar_53 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_49 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = (unity_LightPosition[0].xyz - (viewpos_51 * unity_LightPosition[0].w));
  highp float tmpvar_55;
  tmpvar_55 = dot (tmpvar_54, tmpvar_54);
  highp vec3 tmpvar_56;
  tmpvar_56 = (tmpvar_54 * inversesqrt(tmpvar_55));
  lightColor_49 = (lightColor_49 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_50, tmpvar_56))
   * 
    ((1.0/((1.0 + (tmpvar_55 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_56, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_57;
  tmpvar_57 = (unity_LightPosition[1].xyz - (viewpos_51 * unity_LightPosition[1].w));
  highp float tmpvar_58;
  tmpvar_58 = dot (tmpvar_57, tmpvar_57);
  highp vec3 tmpvar_59;
  tmpvar_59 = (tmpvar_57 * inversesqrt(tmpvar_58));
  lightColor_49 = (lightColor_49 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_50, tmpvar_59))
   * 
    ((1.0/((1.0 + (tmpvar_58 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_59, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_60;
  tmpvar_60 = (unity_LightPosition[2].xyz - (viewpos_51 * unity_LightPosition[2].w));
  highp float tmpvar_61;
  tmpvar_61 = dot (tmpvar_60, tmpvar_60);
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_60 * inversesqrt(tmpvar_61));
  lightColor_49 = (lightColor_49 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_50, tmpvar_62))
   * 
    ((1.0/((1.0 + (tmpvar_61 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_62, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_63;
  tmpvar_63 = (unity_LightPosition[3].xyz - (viewpos_51 * unity_LightPosition[3].w));
  highp float tmpvar_64;
  tmpvar_64 = dot (tmpvar_63, tmpvar_63);
  highp vec3 tmpvar_65;
  tmpvar_65 = (tmpvar_63 * inversesqrt(tmpvar_64));
  lightColor_49 = (lightColor_49 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_50, tmpvar_65))
   * 
    ((1.0/((1.0 + (tmpvar_64 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_65, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_66;
  tmpvar_66 = (tmpvar_3.xyz * lightColor_49);
  tmpvar_2.xyz = tmpvar_66;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_Input_color = tmpvar_2;
  xlv_Input_interpolator1 = tmpvar_4;
  xlv_Input_interpolator2 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_interpolator2;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 blendColor_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_4 = tmpvar_5;
  mediump float tmpvar_6;
  tmpvar_6 = (diffuseColor_4.w * _Color.w);
  tmpvar_2 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_Input_interpolator2.xy);
  blendColor_3 = tmpvar_7;
  diffuseColor_4.xyz = mix (blendColor_3.xyz, diffuseColor_4.xyz, vec3(clamp (xlv_Input_interpolator2.z, 0.0, 1.0)));
  mediump vec3 tmpvar_8;
  tmpvar_8 = (diffuseColor_4.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9.xyz = tmpvar_1;
  tmpvar_9.w = tmpvar_2;
  gl_FragData[0] = tmpvar_9;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out lowp vec4 xlv_Input_color;
out mediump vec3 xlv_Input_interpolator1;
out mediump vec3 xlv_Input_interpolator2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec4 tmpvar_2;
  lowp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec2 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord0.xy;
  tmpvar_4.xy = tmpvar_6;
  tmpvar_3.w = _Color.w;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * _glesColor.x);
  tmpvar_3.xyz = tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_8.xy = _glesMultiTexCoord2.zw;
  tmpvar_8.z = _glesMultiTexCoord1.w;
  tmpvar_5 = tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_10;
  highp vec3 vRotatedWindVector_11;
  highp vec3 FinalPosition_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = tmpvar_1.xyz;
  FinalPosition_12 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_11 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_10 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_13;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_19;
      vPos_19 = tmpvar_13;
      highp float fAdherenceScale_20;
      highp vec3 tmpvar_21;
      tmpvar_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_22;
      tmpvar_22 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_23;
      highp float fOscillation_24;
      fOscillation_24 = 1.0;
      highp float fAmount_25;
      highp float fTarget_26;
      highp vec4 tmpvar_27;
      tmpvar_27.x = (tmpvar_22 + _glesMultiTexCoord0.w);
      tmpvar_27.y = ((tmpvar_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_27.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_22 + _glesMultiTexCoord0.w));
      tmpvar_27.w = ((tmpvar_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_28;
      tmpvar_28 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      vOscillations_23 = (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0);
      highp float tmpvar_29;
      tmpvar_29 = (vOscillations_23.y * vOscillations_23.z);
      fTarget_26 = 1.0;
      fAmount_25 = tmpvar_29;
      if ((tmpvar_29 < 0.0)) {
        fTarget_26 = -1.0;
        fAmount_25 = -(tmpvar_29);
      };
      fOscillation_24 = (((
        (mix (mix (tmpvar_29, fTarget_26, fAmount_25), fTarget_26, fAmount_25) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_23.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_23.w * _ST_WindBranchWhip.x)));
      vPos_19 = (_glesVertex.xyz + ((tmpvar_21 * fOscillation_24) * _ST_WindBranch.y));
      highp vec4 tmpvar_30;
      tmpvar_30.zw = vec2(0.0, 0.0);
      tmpvar_30.x = ((tmpvar_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_30.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_31;
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      tmpvar_31 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((
        ((tmpvar_31.x * tmpvar_31.y) * tmpvar_31.x)
       * tmpvar_31.y) * _ST_WindTurbulences.x));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_23.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_19 = (vPos_19 + ((
        ((vRotatedBranchAnchor_10 - vPos_19) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_18 = vPos_19;
    } else {
      highp vec3 vPos_33;
      vPos_33 = vPos_18;
      highp vec3 tmpvar_34;
      tmpvar_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_35;
      tmpvar_35 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_36;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (tmpvar_35 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((tmpvar_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_36 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_36.y * vOscillations_36.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      vPos_33 = (vPos_18 + ((tmpvar_34 * 
        (((mix (
          mix (tmpvar_41, fTarget_38, fAmount_37)
        , fTarget_38, fAmount_37) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_36.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_18 = vPos_33;
    };
    FinalPosition_12 = vPos_18;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_12;
    highp float fAdjust_43;
    highp float fLength_44;
    fLength_44 = sqrt(dot (FinalPosition_12, FinalPosition_12));
    highp float tmpvar_45;
    tmpvar_45 = (max ((FinalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_43 = tmpvar_45;
    if ((tmpvar_45 != 0.0)) {
      fAdjust_43 = pow (tmpvar_45, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_46;
    tmpvar_46.zw = vec2(0.0, 0.0);
    tmpvar_46.x = (tmpvar_14.x + _ST_WindGlobal.x);
    tmpvar_46.y = (tmpvar_14.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_47;
    highp vec4 tmpvar_48;
    tmpvar_48 = abs(((
      fract((tmpvar_46 + 0.5))
     * 2.0) - 1.0));
    tmpvar_47 = (((
      (tmpvar_48 * tmpvar_48)
     * 
      (3.0 - (2.0 * tmpvar_48))
    ) - 0.5) * 2.0);
    vPos_42.xz = (FinalPosition_12.xz + (vRotatedWindVector_11.xz * (
      ((_ST_WindGlobal.y * (tmpvar_47.x + (tmpvar_47.y * tmpvar_47.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_43)));
    vPos_42 = (normalize(vPos_42) * fLength_44);
    FinalPosition_12 = vPos_42;
  };
  tmpvar_9.xyz = FinalPosition_12;
  tmpvar_2.w = tmpvar_3.w;
  highp vec3 lightColor_49;
  highp vec3 viewN_50;
  highp vec3 viewpos_51;
  viewpos_51 = (glstate_matrix_modelview0 * tmpvar_9).xyz;
  highp mat3 tmpvar_52;
  tmpvar_52[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_52[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_52[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_50 = normalize((tmpvar_52 * _glesNormal));
  lowp vec3 tmpvar_53;
  tmpvar_53 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_49 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = (unity_LightPosition[0].xyz - (viewpos_51 * unity_LightPosition[0].w));
  highp float tmpvar_55;
  tmpvar_55 = dot (tmpvar_54, tmpvar_54);
  highp vec3 tmpvar_56;
  tmpvar_56 = (tmpvar_54 * inversesqrt(tmpvar_55));
  lightColor_49 = (lightColor_49 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_50, tmpvar_56))
   * 
    ((1.0/((1.0 + (tmpvar_55 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_56, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_57;
  tmpvar_57 = (unity_LightPosition[1].xyz - (viewpos_51 * unity_LightPosition[1].w));
  highp float tmpvar_58;
  tmpvar_58 = dot (tmpvar_57, tmpvar_57);
  highp vec3 tmpvar_59;
  tmpvar_59 = (tmpvar_57 * inversesqrt(tmpvar_58));
  lightColor_49 = (lightColor_49 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_50, tmpvar_59))
   * 
    ((1.0/((1.0 + (tmpvar_58 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_59, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_60;
  tmpvar_60 = (unity_LightPosition[2].xyz - (viewpos_51 * unity_LightPosition[2].w));
  highp float tmpvar_61;
  tmpvar_61 = dot (tmpvar_60, tmpvar_60);
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_60 * inversesqrt(tmpvar_61));
  lightColor_49 = (lightColor_49 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_50, tmpvar_62))
   * 
    ((1.0/((1.0 + (tmpvar_61 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_62, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_63;
  tmpvar_63 = (unity_LightPosition[3].xyz - (viewpos_51 * unity_LightPosition[3].w));
  highp float tmpvar_64;
  tmpvar_64 = dot (tmpvar_63, tmpvar_63);
  highp vec3 tmpvar_65;
  tmpvar_65 = (tmpvar_63 * inversesqrt(tmpvar_64));
  lightColor_49 = (lightColor_49 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_50, tmpvar_65))
   * 
    ((1.0/((1.0 + (tmpvar_64 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_65, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_66;
  tmpvar_66 = (tmpvar_3.xyz * lightColor_49);
  tmpvar_2.xyz = tmpvar_66;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_Input_color = tmpvar_2;
  xlv_Input_interpolator1 = tmpvar_4;
  xlv_Input_interpolator2 = tmpvar_5;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
in lowp vec4 xlv_Input_color;
in mediump vec3 xlv_Input_interpolator1;
in mediump vec3 xlv_Input_interpolator2;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 blendColor_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_4 = tmpvar_5;
  mediump float tmpvar_6;
  tmpvar_6 = (diffuseColor_4.w * _Color.w);
  tmpvar_2 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture (_MainTex, xlv_Input_interpolator2.xy);
  blendColor_3 = tmpvar_7;
  diffuseColor_4.xyz = mix (blendColor_3.xyz, diffuseColor_4.xyz, vec3(clamp (xlv_Input_interpolator2.z, 0.0, 1.0)));
  mediump vec3 tmpvar_8;
  tmpvar_8 = (diffuseColor_4.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9.xyz = tmpvar_1;
  tmpvar_9.w = tmpvar_2;
  _glesFragData[0] = tmpvar_9;
}



#endif"
}
SubProgram "gles " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_interpolator2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec4 tmpvar_2;
  lowp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec2 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord0.xy;
  tmpvar_4.xy = tmpvar_6;
  tmpvar_3.w = _Color.w;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * _glesColor.x);
  tmpvar_3.xyz = tmpvar_7;
  highp float cse_8;
  cse_8 = _Object2World[3].x;
  highp float cse_9;
  cse_9 = _Object2World[3].y;
  highp float tmpvar_10;
  tmpvar_10 = clamp (((
    fract(((cse_8 + cse_9) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_4.z = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11.xy = _glesMultiTexCoord2.zw;
  tmpvar_11.z = _glesMultiTexCoord1.w;
  tmpvar_5 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_16;
      highp float fAdherenceScale_22;
      highp vec3 tmpvar_23;
      tmpvar_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_24;
      tmpvar_24 = (_ST_WindBranch.x + (cse_8 + cse_9));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (tmpvar_24 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((tmpvar_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_24 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((tmpvar_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        (mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_25.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((tmpvar_23 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((tmpvar_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((
        ((tmpvar_33.x * tmpvar_33.y) * tmpvar_33.x)
       * tmpvar_33.y) * _ST_WindTurbulences.x));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp vec3 tmpvar_36;
      tmpvar_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_37;
      tmpvar_37 = (_ST_WindBranch.x + (cse_8 + cse_9));
      highp vec4 vOscillations_38;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (tmpvar_37 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((tmpvar_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      vPos_35 = (vPos_20 + ((tmpvar_36 * 
        (((mix (
          mix (tmpvar_43, fTarget_40, fAmount_39)
        , fTarget_40, fAmount_39) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_15;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_47;
    tmpvar_47 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (cse_8 + _ST_WindGlobal.x);
    tmpvar_48.y = (cse_9 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    vPos_44.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_45)));
    vPos_44 = (normalize(vPos_44) * fLength_46);
    FinalPosition_15 = vPos_44;
  };
  tmpvar_12.xyz = FinalPosition_15;
  tmpvar_2.w = tmpvar_3.w;
  highp vec3 lightColor_51;
  highp vec3 viewN_52;
  highp vec3 viewpos_53;
  viewpos_53 = (glstate_matrix_modelview0 * tmpvar_12).xyz;
  highp mat3 tmpvar_54;
  tmpvar_54[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_54[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_54[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_52 = normalize((tmpvar_54 * _glesNormal));
  lowp vec3 tmpvar_55;
  tmpvar_55 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_51 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = (unity_LightPosition[0].xyz - (viewpos_53 * unity_LightPosition[0].w));
  highp float tmpvar_57;
  tmpvar_57 = dot (tmpvar_56, tmpvar_56);
  highp vec3 tmpvar_58;
  tmpvar_58 = (tmpvar_56 * inversesqrt(tmpvar_57));
  lightColor_51 = (lightColor_51 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_52, tmpvar_58))
   * 
    ((1.0/((1.0 + (tmpvar_57 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_58, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_59;
  tmpvar_59 = (unity_LightPosition[1].xyz - (viewpos_53 * unity_LightPosition[1].w));
  highp float tmpvar_60;
  tmpvar_60 = dot (tmpvar_59, tmpvar_59);
  highp vec3 tmpvar_61;
  tmpvar_61 = (tmpvar_59 * inversesqrt(tmpvar_60));
  lightColor_51 = (lightColor_51 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_52, tmpvar_61))
   * 
    ((1.0/((1.0 + (tmpvar_60 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_61, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_62;
  tmpvar_62 = (unity_LightPosition[2].xyz - (viewpos_53 * unity_LightPosition[2].w));
  highp float tmpvar_63;
  tmpvar_63 = dot (tmpvar_62, tmpvar_62);
  highp vec3 tmpvar_64;
  tmpvar_64 = (tmpvar_62 * inversesqrt(tmpvar_63));
  lightColor_51 = (lightColor_51 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_52, tmpvar_64))
   * 
    ((1.0/((1.0 + (tmpvar_63 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_64, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_65;
  tmpvar_65 = (unity_LightPosition[3].xyz - (viewpos_53 * unity_LightPosition[3].w));
  highp float tmpvar_66;
  tmpvar_66 = dot (tmpvar_65, tmpvar_65);
  highp vec3 tmpvar_67;
  tmpvar_67 = (tmpvar_65 * inversesqrt(tmpvar_66));
  lightColor_51 = (lightColor_51 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_52, tmpvar_67))
   * 
    ((1.0/((1.0 + (tmpvar_66 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_67, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_3.xyz * lightColor_51);
  tmpvar_2.xyz = tmpvar_68;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_Input_color = tmpvar_2;
  xlv_Input_interpolator1 = tmpvar_4;
  xlv_Input_interpolator2 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_interpolator2;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 blendColor_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_4 = tmpvar_5;
  mediump float tmpvar_6;
  tmpvar_6 = (diffuseColor_4.w * _Color.w);
  tmpvar_2 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_Input_interpolator2.xy);
  blendColor_3 = tmpvar_7;
  diffuseColor_4.xyz = mix (blendColor_3.xyz, diffuseColor_4.xyz, vec3(clamp (xlv_Input_interpolator2.z, 0.0, 1.0)));
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  diffuseColor_4.xyz = clamp ((tmpvar_8 * (
    ((max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_8.x, max (tmpvar_8.y, tmpvar_8.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_9;
  tmpvar_9 = (diffuseColor_4.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10.xyz = tmpvar_1;
  tmpvar_10.w = tmpvar_2;
  gl_FragData[0] = tmpvar_10;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out lowp vec4 xlv_Input_color;
out mediump vec3 xlv_Input_interpolator1;
out mediump vec3 xlv_Input_interpolator2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec4 tmpvar_2;
  lowp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec2 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord0.xy;
  tmpvar_4.xy = tmpvar_6;
  tmpvar_3.w = _Color.w;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * _glesColor.x);
  tmpvar_3.xyz = tmpvar_7;
  highp float cse_8;
  cse_8 = _Object2World[3].x;
  highp float cse_9;
  cse_9 = _Object2World[3].y;
  highp float tmpvar_10;
  tmpvar_10 = clamp (((
    fract(((cse_8 + cse_9) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_4.z = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11.xy = _glesMultiTexCoord2.zw;
  tmpvar_11.z = _glesMultiTexCoord1.w;
  tmpvar_5 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_16;
      highp float fAdherenceScale_22;
      highp vec3 tmpvar_23;
      tmpvar_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_24;
      tmpvar_24 = (_ST_WindBranch.x + (cse_8 + cse_9));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (tmpvar_24 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((tmpvar_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_24 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((tmpvar_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        (mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_25.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((tmpvar_23 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((tmpvar_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((
        ((tmpvar_33.x * tmpvar_33.y) * tmpvar_33.x)
       * tmpvar_33.y) * _ST_WindTurbulences.x));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp vec3 tmpvar_36;
      tmpvar_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_37;
      tmpvar_37 = (_ST_WindBranch.x + (cse_8 + cse_9));
      highp vec4 vOscillations_38;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (tmpvar_37 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((tmpvar_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      vPos_35 = (vPos_20 + ((tmpvar_36 * 
        (((mix (
          mix (tmpvar_43, fTarget_40, fAmount_39)
        , fTarget_40, fAmount_39) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_15;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_47;
    tmpvar_47 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (cse_8 + _ST_WindGlobal.x);
    tmpvar_48.y = (cse_9 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    vPos_44.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_45)));
    vPos_44 = (normalize(vPos_44) * fLength_46);
    FinalPosition_15 = vPos_44;
  };
  tmpvar_12.xyz = FinalPosition_15;
  tmpvar_2.w = tmpvar_3.w;
  highp vec3 lightColor_51;
  highp vec3 viewN_52;
  highp vec3 viewpos_53;
  viewpos_53 = (glstate_matrix_modelview0 * tmpvar_12).xyz;
  highp mat3 tmpvar_54;
  tmpvar_54[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_54[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_54[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_52 = normalize((tmpvar_54 * _glesNormal));
  lowp vec3 tmpvar_55;
  tmpvar_55 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_51 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = (unity_LightPosition[0].xyz - (viewpos_53 * unity_LightPosition[0].w));
  highp float tmpvar_57;
  tmpvar_57 = dot (tmpvar_56, tmpvar_56);
  highp vec3 tmpvar_58;
  tmpvar_58 = (tmpvar_56 * inversesqrt(tmpvar_57));
  lightColor_51 = (lightColor_51 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_52, tmpvar_58))
   * 
    ((1.0/((1.0 + (tmpvar_57 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_58, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_59;
  tmpvar_59 = (unity_LightPosition[1].xyz - (viewpos_53 * unity_LightPosition[1].w));
  highp float tmpvar_60;
  tmpvar_60 = dot (tmpvar_59, tmpvar_59);
  highp vec3 tmpvar_61;
  tmpvar_61 = (tmpvar_59 * inversesqrt(tmpvar_60));
  lightColor_51 = (lightColor_51 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_52, tmpvar_61))
   * 
    ((1.0/((1.0 + (tmpvar_60 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_61, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_62;
  tmpvar_62 = (unity_LightPosition[2].xyz - (viewpos_53 * unity_LightPosition[2].w));
  highp float tmpvar_63;
  tmpvar_63 = dot (tmpvar_62, tmpvar_62);
  highp vec3 tmpvar_64;
  tmpvar_64 = (tmpvar_62 * inversesqrt(tmpvar_63));
  lightColor_51 = (lightColor_51 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_52, tmpvar_64))
   * 
    ((1.0/((1.0 + (tmpvar_63 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_64, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_65;
  tmpvar_65 = (unity_LightPosition[3].xyz - (viewpos_53 * unity_LightPosition[3].w));
  highp float tmpvar_66;
  tmpvar_66 = dot (tmpvar_65, tmpvar_65);
  highp vec3 tmpvar_67;
  tmpvar_67 = (tmpvar_65 * inversesqrt(tmpvar_66));
  lightColor_51 = (lightColor_51 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_52, tmpvar_67))
   * 
    ((1.0/((1.0 + (tmpvar_66 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_67, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_3.xyz * lightColor_51);
  tmpvar_2.xyz = tmpvar_68;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_Input_color = tmpvar_2;
  xlv_Input_interpolator1 = tmpvar_4;
  xlv_Input_interpolator2 = tmpvar_5;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
in lowp vec4 xlv_Input_color;
in mediump vec3 xlv_Input_interpolator1;
in mediump vec3 xlv_Input_interpolator2;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 blendColor_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_4 = tmpvar_5;
  mediump float tmpvar_6;
  tmpvar_6 = (diffuseColor_4.w * _Color.w);
  tmpvar_2 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture (_MainTex, xlv_Input_interpolator2.xy);
  blendColor_3 = tmpvar_7;
  diffuseColor_4.xyz = mix (blendColor_3.xyz, diffuseColor_4.xyz, vec3(clamp (xlv_Input_interpolator2.z, 0.0, 1.0)));
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  diffuseColor_4.xyz = clamp ((tmpvar_8 * (
    ((max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_8.x, max (tmpvar_8.y, tmpvar_8.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_9;
  tmpvar_9 = (diffuseColor_4.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10.xyz = tmpvar_1;
  tmpvar_10.w = tmpvar_2;
  _glesFragData[0] = tmpvar_10;
}



#endif"
}
SubProgram "gles " {
Keywords { "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec2 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord0.xy;
  tmpvar_5.xy = tmpvar_6;
  tmpvar_4.w = _Color.w;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * _glesColor.x);
  tmpvar_4.xyz = tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_8 = tmpvar_1;
  tmpvar_9 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_10;
  highp vec3 vRotatedWindVector_11;
  highp vec3 FinalPosition_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = tmpvar_1.xyz;
  FinalPosition_12 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_11 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_10 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_15 == 5.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_13;
    highp float fOffset_19;
    fOffset_19 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_19 = 0.75;
    };
    highp vec4 tmpvar_20;
    tmpvar_20.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_20.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_19);
    highp vec4 tmpvar_21;
    tmpvar_21 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    vPos_18 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_9 = tmpvar_2;
    FinalPosition_12 = vPos_18;
  };
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = FinalPosition_12;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = FinalPosition_12;
      highp float fAdherenceScale_24;
      highp vec3 tmpvar_25;
      tmpvar_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_26;
      tmpvar_26 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (tmpvar_26 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((tmpvar_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_26 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((tmpvar_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        (mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_27.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (FinalPosition_12 + ((tmpvar_25 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((tmpvar_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((
        ((tmpvar_35.x * tmpvar_35.y) * tmpvar_35.x)
       * tmpvar_35.y) * _ST_WindTurbulences.x));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_10 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp vec3 tmpvar_38;
      tmpvar_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_39;
      tmpvar_39 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_40;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (tmpvar_39 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((tmpvar_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      vPos_37 = (vPos_22 + ((tmpvar_38 * 
        (((mix (
          mix (tmpvar_45, fTarget_42, fAmount_41)
        , fTarget_42, fAmount_41) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_12 = vPos_22;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_12;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_12, FinalPosition_12));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_14.x + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_14.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    vPos_46.xz = (FinalPosition_12.xz + (vRotatedWindVector_11.xz * (
      ((_ST_WindGlobal.y * (tmpvar_51.x + (tmpvar_51.y * tmpvar_51.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_47)));
    vPos_46 = (normalize(vPos_46) * fLength_48);
    FinalPosition_12 = vPos_46;
  };
  tmpvar_8.xyz = FinalPosition_12;
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_53;
  highp vec3 viewN_54;
  highp vec3 viewpos_55;
  viewpos_55 = (glstate_matrix_modelview0 * tmpvar_8).xyz;
  highp mat3 tmpvar_56;
  tmpvar_56[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_56[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_56[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_54 = normalize((tmpvar_56 * tmpvar_9));
  lowp vec3 tmpvar_57;
  tmpvar_57 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_53 = tmpvar_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = (unity_LightPosition[0].xyz - (viewpos_55 * unity_LightPosition[0].w));
  highp float tmpvar_59;
  tmpvar_59 = dot (tmpvar_58, tmpvar_58);
  highp vec3 tmpvar_60;
  tmpvar_60 = (tmpvar_58 * inversesqrt(tmpvar_59));
  lightColor_53 = (lightColor_53 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_54, tmpvar_60))
   * 
    ((1.0/((1.0 + (tmpvar_59 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_60, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_61;
  tmpvar_61 = (unity_LightPosition[1].xyz - (viewpos_55 * unity_LightPosition[1].w));
  highp float tmpvar_62;
  tmpvar_62 = dot (tmpvar_61, tmpvar_61);
  highp vec3 tmpvar_63;
  tmpvar_63 = (tmpvar_61 * inversesqrt(tmpvar_62));
  lightColor_53 = (lightColor_53 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_54, tmpvar_63))
   * 
    ((1.0/((1.0 + (tmpvar_62 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_63, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_64;
  tmpvar_64 = (unity_LightPosition[2].xyz - (viewpos_55 * unity_LightPosition[2].w));
  highp float tmpvar_65;
  tmpvar_65 = dot (tmpvar_64, tmpvar_64);
  highp vec3 tmpvar_66;
  tmpvar_66 = (tmpvar_64 * inversesqrt(tmpvar_65));
  lightColor_53 = (lightColor_53 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_54, tmpvar_66))
   * 
    ((1.0/((1.0 + (tmpvar_65 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_66, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_67;
  tmpvar_67 = (unity_LightPosition[3].xyz - (viewpos_55 * unity_LightPosition[3].w));
  highp float tmpvar_68;
  tmpvar_68 = dot (tmpvar_67, tmpvar_67);
  highp vec3 tmpvar_69;
  tmpvar_69 = (tmpvar_67 * inversesqrt(tmpvar_68));
  lightColor_53 = (lightColor_53 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_54, tmpvar_69))
   * 
    ((1.0/((1.0 + (tmpvar_68 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_69, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_70;
  tmpvar_70 = (tmpvar_4.xyz * lightColor_53);
  tmpvar_3.xyz = tmpvar_70;
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_4;
  mediump float tmpvar_5;
  tmpvar_5 = (diffuseColor_3.w * _Color.w);
  tmpvar_2 = tmpvar_5;
  lowp float x_6;
  x_6 = (tmpvar_2 - _Cutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_7;
  tmpvar_7 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8.xyz = tmpvar_1;
  tmpvar_8.w = tmpvar_2;
  gl_FragData[0] = tmpvar_8;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "GEOM_TYPE_FROND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out lowp vec4 xlv_Input_color;
out mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec2 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord0.xy;
  tmpvar_5.xy = tmpvar_6;
  tmpvar_4.w = _Color.w;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * _glesColor.x);
  tmpvar_4.xyz = tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_8 = tmpvar_1;
  tmpvar_9 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_10;
  highp vec3 vRotatedWindVector_11;
  highp vec3 FinalPosition_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = tmpvar_1.xyz;
  FinalPosition_12 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_11 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_10 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_15 == 5.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_13;
    highp float fOffset_19;
    fOffset_19 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_19 = 0.75;
    };
    highp vec4 tmpvar_20;
    tmpvar_20.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_20.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_19);
    highp vec4 tmpvar_21;
    tmpvar_21 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    vPos_18 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_9 = tmpvar_2;
    FinalPosition_12 = vPos_18;
  };
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = FinalPosition_12;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = FinalPosition_12;
      highp float fAdherenceScale_24;
      highp vec3 tmpvar_25;
      tmpvar_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_26;
      tmpvar_26 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (tmpvar_26 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((tmpvar_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_26 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((tmpvar_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        (mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_27.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (FinalPosition_12 + ((tmpvar_25 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((tmpvar_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((
        ((tmpvar_35.x * tmpvar_35.y) * tmpvar_35.x)
       * tmpvar_35.y) * _ST_WindTurbulences.x));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_10 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp vec3 tmpvar_38;
      tmpvar_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_39;
      tmpvar_39 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_40;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (tmpvar_39 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((tmpvar_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      vPos_37 = (vPos_22 + ((tmpvar_38 * 
        (((mix (
          mix (tmpvar_45, fTarget_42, fAmount_41)
        , fTarget_42, fAmount_41) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_12 = vPos_22;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_12;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_12, FinalPosition_12));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_14.x + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_14.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    vPos_46.xz = (FinalPosition_12.xz + (vRotatedWindVector_11.xz * (
      ((_ST_WindGlobal.y * (tmpvar_51.x + (tmpvar_51.y * tmpvar_51.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_47)));
    vPos_46 = (normalize(vPos_46) * fLength_48);
    FinalPosition_12 = vPos_46;
  };
  tmpvar_8.xyz = FinalPosition_12;
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_53;
  highp vec3 viewN_54;
  highp vec3 viewpos_55;
  viewpos_55 = (glstate_matrix_modelview0 * tmpvar_8).xyz;
  highp mat3 tmpvar_56;
  tmpvar_56[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_56[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_56[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_54 = normalize((tmpvar_56 * tmpvar_9));
  lowp vec3 tmpvar_57;
  tmpvar_57 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_53 = tmpvar_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = (unity_LightPosition[0].xyz - (viewpos_55 * unity_LightPosition[0].w));
  highp float tmpvar_59;
  tmpvar_59 = dot (tmpvar_58, tmpvar_58);
  highp vec3 tmpvar_60;
  tmpvar_60 = (tmpvar_58 * inversesqrt(tmpvar_59));
  lightColor_53 = (lightColor_53 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_54, tmpvar_60))
   * 
    ((1.0/((1.0 + (tmpvar_59 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_60, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_61;
  tmpvar_61 = (unity_LightPosition[1].xyz - (viewpos_55 * unity_LightPosition[1].w));
  highp float tmpvar_62;
  tmpvar_62 = dot (tmpvar_61, tmpvar_61);
  highp vec3 tmpvar_63;
  tmpvar_63 = (tmpvar_61 * inversesqrt(tmpvar_62));
  lightColor_53 = (lightColor_53 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_54, tmpvar_63))
   * 
    ((1.0/((1.0 + (tmpvar_62 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_63, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_64;
  tmpvar_64 = (unity_LightPosition[2].xyz - (viewpos_55 * unity_LightPosition[2].w));
  highp float tmpvar_65;
  tmpvar_65 = dot (tmpvar_64, tmpvar_64);
  highp vec3 tmpvar_66;
  tmpvar_66 = (tmpvar_64 * inversesqrt(tmpvar_65));
  lightColor_53 = (lightColor_53 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_54, tmpvar_66))
   * 
    ((1.0/((1.0 + (tmpvar_65 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_66, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_67;
  tmpvar_67 = (unity_LightPosition[3].xyz - (viewpos_55 * unity_LightPosition[3].w));
  highp float tmpvar_68;
  tmpvar_68 = dot (tmpvar_67, tmpvar_67);
  highp vec3 tmpvar_69;
  tmpvar_69 = (tmpvar_67 * inversesqrt(tmpvar_68));
  lightColor_53 = (lightColor_53 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_54, tmpvar_69))
   * 
    ((1.0/((1.0 + (tmpvar_68 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_69, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_70;
  tmpvar_70 = (tmpvar_4.xyz * lightColor_53);
  tmpvar_3.xyz = tmpvar_70;
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
in lowp vec4 xlv_Input_color;
in mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_4;
  mediump float tmpvar_5;
  tmpvar_5 = (diffuseColor_3.w * _Color.w);
  tmpvar_2 = tmpvar_5;
  lowp float x_6;
  x_6 = (tmpvar_2 - _Cutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_7;
  tmpvar_7 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8.xyz = tmpvar_1;
  tmpvar_8.w = tmpvar_2;
  _glesFragData[0] = tmpvar_8;
}



#endif"
}
SubProgram "gles " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec2 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord0.xy;
  tmpvar_5.xy = tmpvar_6;
  tmpvar_4.w = _Color.w;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * _glesColor.x);
  tmpvar_4.xyz = tmpvar_7;
  highp float cse_8;
  cse_8 = _Object2World[3].x;
  highp float cse_9;
  cse_9 = _Object2World[3].y;
  highp float tmpvar_10;
  tmpvar_10 = clamp (((
    fract(((cse_8 + cse_9) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_5.z = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 == 5.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    highp float fOffset_21;
    fOffset_21 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_21 = 0.75;
    };
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_21);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_20 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_12 = tmpvar_2;
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = FinalPosition_15;
      highp float fAdherenceScale_26;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (cse_8 + cse_9));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((tmpvar_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        (mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_29.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (FinalPosition_15 + ((tmpvar_27 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((tmpvar_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((
        ((tmpvar_37.x * tmpvar_37.y) * tmpvar_37.x)
       * tmpvar_37.y) * _ST_WindTurbulences.x));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_13 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp vec3 tmpvar_40;
      tmpvar_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_41;
      tmpvar_41 = (_ST_WindBranch.x + (cse_8 + cse_9));
      highp vec4 vOscillations_42;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (tmpvar_41 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((tmpvar_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      vPos_39 = (vPos_24 + ((tmpvar_40 * 
        (((mix (
          mix (tmpvar_47, fTarget_44, fAmount_43)
        , fTarget_44, fAmount_43) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_15 = vPos_24;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_15;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (cse_8 + _ST_WindGlobal.x);
    tmpvar_52.y = (cse_9 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    vPos_48.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_53.x + (tmpvar_53.y * tmpvar_53.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_49)));
    vPos_48 = (normalize(vPos_48) * fLength_50);
    FinalPosition_15 = vPos_48;
  };
  tmpvar_11.xyz = FinalPosition_15;
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_55;
  highp vec3 viewN_56;
  highp vec3 viewpos_57;
  viewpos_57 = (glstate_matrix_modelview0 * tmpvar_11).xyz;
  highp mat3 tmpvar_58;
  tmpvar_58[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_58[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_58[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_56 = normalize((tmpvar_58 * tmpvar_12));
  lowp vec3 tmpvar_59;
  tmpvar_59 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_55 = tmpvar_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (unity_LightPosition[0].xyz - (viewpos_57 * unity_LightPosition[0].w));
  highp float tmpvar_61;
  tmpvar_61 = dot (tmpvar_60, tmpvar_60);
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_60 * inversesqrt(tmpvar_61));
  lightColor_55 = (lightColor_55 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_56, tmpvar_62))
   * 
    ((1.0/((1.0 + (tmpvar_61 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_62, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_63;
  tmpvar_63 = (unity_LightPosition[1].xyz - (viewpos_57 * unity_LightPosition[1].w));
  highp float tmpvar_64;
  tmpvar_64 = dot (tmpvar_63, tmpvar_63);
  highp vec3 tmpvar_65;
  tmpvar_65 = (tmpvar_63 * inversesqrt(tmpvar_64));
  lightColor_55 = (lightColor_55 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_56, tmpvar_65))
   * 
    ((1.0/((1.0 + (tmpvar_64 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_65, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_66;
  tmpvar_66 = (unity_LightPosition[2].xyz - (viewpos_57 * unity_LightPosition[2].w));
  highp float tmpvar_67;
  tmpvar_67 = dot (tmpvar_66, tmpvar_66);
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_66 * inversesqrt(tmpvar_67));
  lightColor_55 = (lightColor_55 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_56, tmpvar_68))
   * 
    ((1.0/((1.0 + (tmpvar_67 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_68, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_69;
  tmpvar_69 = (unity_LightPosition[3].xyz - (viewpos_57 * unity_LightPosition[3].w));
  highp float tmpvar_70;
  tmpvar_70 = dot (tmpvar_69, tmpvar_69);
  highp vec3 tmpvar_71;
  tmpvar_71 = (tmpvar_69 * inversesqrt(tmpvar_70));
  lightColor_55 = (lightColor_55 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_56, tmpvar_71))
   * 
    ((1.0/((1.0 + (tmpvar_70 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_71, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_72;
  tmpvar_72 = (tmpvar_4.xyz * lightColor_55);
  tmpvar_3.xyz = tmpvar_72;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_4;
  mediump float tmpvar_5;
  tmpvar_5 = (diffuseColor_3.w * _Color.w);
  tmpvar_2 = tmpvar_5;
  lowp float x_6;
  x_6 = (tmpvar_2 - _Cutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (diffuseColor_3.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  diffuseColor_3.xyz = clamp ((tmpvar_7 * (
    ((max (diffuseColor_3.x, max (diffuseColor_3.y, diffuseColor_3.z)) / max (tmpvar_7.x, max (tmpvar_7.y, tmpvar_7.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_8;
  tmpvar_8 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9.xyz = tmpvar_1;
  tmpvar_9.w = tmpvar_2;
  gl_FragData[0] = tmpvar_9;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out lowp vec4 xlv_Input_color;
out mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec2 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord0.xy;
  tmpvar_5.xy = tmpvar_6;
  tmpvar_4.w = _Color.w;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * _glesColor.x);
  tmpvar_4.xyz = tmpvar_7;
  highp float cse_8;
  cse_8 = _Object2World[3].x;
  highp float cse_9;
  cse_9 = _Object2World[3].y;
  highp float tmpvar_10;
  tmpvar_10 = clamp (((
    fract(((cse_8 + cse_9) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_5.z = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 == 5.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    highp float fOffset_21;
    fOffset_21 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_21 = 0.75;
    };
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_21);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_20 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_12 = tmpvar_2;
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = FinalPosition_15;
      highp float fAdherenceScale_26;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (cse_8 + cse_9));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((tmpvar_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        (mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_29.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (FinalPosition_15 + ((tmpvar_27 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((tmpvar_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((
        ((tmpvar_37.x * tmpvar_37.y) * tmpvar_37.x)
       * tmpvar_37.y) * _ST_WindTurbulences.x));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_13 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp vec3 tmpvar_40;
      tmpvar_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_41;
      tmpvar_41 = (_ST_WindBranch.x + (cse_8 + cse_9));
      highp vec4 vOscillations_42;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (tmpvar_41 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((tmpvar_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      vPos_39 = (vPos_24 + ((tmpvar_40 * 
        (((mix (
          mix (tmpvar_47, fTarget_44, fAmount_43)
        , fTarget_44, fAmount_43) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_15 = vPos_24;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_15;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (cse_8 + _ST_WindGlobal.x);
    tmpvar_52.y = (cse_9 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    vPos_48.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_53.x + (tmpvar_53.y * tmpvar_53.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_49)));
    vPos_48 = (normalize(vPos_48) * fLength_50);
    FinalPosition_15 = vPos_48;
  };
  tmpvar_11.xyz = FinalPosition_15;
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_55;
  highp vec3 viewN_56;
  highp vec3 viewpos_57;
  viewpos_57 = (glstate_matrix_modelview0 * tmpvar_11).xyz;
  highp mat3 tmpvar_58;
  tmpvar_58[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_58[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_58[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_56 = normalize((tmpvar_58 * tmpvar_12));
  lowp vec3 tmpvar_59;
  tmpvar_59 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_55 = tmpvar_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (unity_LightPosition[0].xyz - (viewpos_57 * unity_LightPosition[0].w));
  highp float tmpvar_61;
  tmpvar_61 = dot (tmpvar_60, tmpvar_60);
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_60 * inversesqrt(tmpvar_61));
  lightColor_55 = (lightColor_55 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_56, tmpvar_62))
   * 
    ((1.0/((1.0 + (tmpvar_61 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_62, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_63;
  tmpvar_63 = (unity_LightPosition[1].xyz - (viewpos_57 * unity_LightPosition[1].w));
  highp float tmpvar_64;
  tmpvar_64 = dot (tmpvar_63, tmpvar_63);
  highp vec3 tmpvar_65;
  tmpvar_65 = (tmpvar_63 * inversesqrt(tmpvar_64));
  lightColor_55 = (lightColor_55 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_56, tmpvar_65))
   * 
    ((1.0/((1.0 + (tmpvar_64 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_65, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_66;
  tmpvar_66 = (unity_LightPosition[2].xyz - (viewpos_57 * unity_LightPosition[2].w));
  highp float tmpvar_67;
  tmpvar_67 = dot (tmpvar_66, tmpvar_66);
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_66 * inversesqrt(tmpvar_67));
  lightColor_55 = (lightColor_55 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_56, tmpvar_68))
   * 
    ((1.0/((1.0 + (tmpvar_67 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_68, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_69;
  tmpvar_69 = (unity_LightPosition[3].xyz - (viewpos_57 * unity_LightPosition[3].w));
  highp float tmpvar_70;
  tmpvar_70 = dot (tmpvar_69, tmpvar_69);
  highp vec3 tmpvar_71;
  tmpvar_71 = (tmpvar_69 * inversesqrt(tmpvar_70));
  lightColor_55 = (lightColor_55 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_56, tmpvar_71))
   * 
    ((1.0/((1.0 + (tmpvar_70 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_71, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_72;
  tmpvar_72 = (tmpvar_4.xyz * lightColor_55);
  tmpvar_3.xyz = tmpvar_72;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
in lowp vec4 xlv_Input_color;
in mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_4;
  mediump float tmpvar_5;
  tmpvar_5 = (diffuseColor_3.w * _Color.w);
  tmpvar_2 = tmpvar_5;
  lowp float x_6;
  x_6 = (tmpvar_2 - _Cutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (diffuseColor_3.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  diffuseColor_3.xyz = clamp ((tmpvar_7 * (
    ((max (diffuseColor_3.x, max (diffuseColor_3.y, diffuseColor_3.z)) / max (tmpvar_7.x, max (tmpvar_7.y, tmpvar_7.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_8;
  tmpvar_8 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9.xyz = tmpvar_1;
  tmpvar_9.w = tmpvar_2;
  _glesFragData[0] = tmpvar_9;
}



#endif"
}
SubProgram "gles " {
Keywords { "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec2 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord0.xy;
  tmpvar_5.xy = tmpvar_6;
  tmpvar_4.w = _Color.w;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * _glesColor.x);
  tmpvar_4.xyz = tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_8 = tmpvar_1;
  tmpvar_9 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_10;
  highp vec3 vRotatedWindVector_11;
  highp vec3 FinalPosition_12;
  FinalPosition_12 = tmpvar_1.xyz;
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_11 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_10 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_12 = tmpvar_17;
  if (((tmpvar_14 > 1.0) && (tmpvar_14 < 5.0))) {
    highp float tmpvar_18;
    tmpvar_18 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_19;
    isBestWind_19 = (tmpvar_14 == 4.0);
    bool bLeaf2_20;
    bLeaf2_20 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    highp vec3 vDirection_22;
    vDirection_22 = tmpvar_2;
    highp float tmpvar_23;
    if (bLeaf2_20) {
      tmpvar_23 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_23 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_24;
    if (bLeaf2_20) {
      tmpvar_24 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_24 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_25;
    highp vec4 tmpvar_26;
    tmpvar_26.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_26.x = (tmpvar_23 + tmpvar_18);
    highp vec4 tmpvar_27;
    tmpvar_27 = abs(((
      fract((tmpvar_26 + 0.5))
     * 2.0) - 1.0));
    vPos_25 = (tmpvar_17 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_24 * (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_22 = tmpvar_2;
    vPos_21 = vPos_25;
    if (isBestWind_19) {
      highp vec3 tmpvar_28;
      tmpvar_28 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_29;
      if (bLeaf2_20) {
        tmpvar_29 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_29 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_30;
      if (bLeaf2_20) {
        tmpvar_30 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_30 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_31;
      if (bLeaf2_20) {
        tmpvar_31 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_32;
      if (bLeaf2_20) {
        tmpvar_32 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_33;
      if (bLeaf2_20) {
        tmpvar_33 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_33 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_34;
      if (bLeaf2_20) {
        tmpvar_34 = bool(1);
      } else {
        tmpvar_34 = bool(1);
      };
      highp float fTwitch_35;
      highp vec3 vAxis_36;
      highp vec3 tmpvar_37;
      tmpvar_37 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_38;
      tmpvar_38 = ((tmpvar_37.x + tmpvar_37.y) + tmpvar_37.z);
      highp vec4 tmpvar_39;
      tmpvar_39.x = (tmpvar_29 + tmpvar_38);
      tmpvar_39.y = ((tmpvar_29 * 0.75) - tmpvar_38);
      tmpvar_39.z = ((tmpvar_29 * 0.01) + tmpvar_38);
      tmpvar_39.w = (tmpvar_29 + tmpvar_38);
      highp vec4 tmpvar_40;
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      tmpvar_40 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = sqrt(dot (vPos_25, vPos_25));
      highp float fAngle_43;
      fAngle_43 = ((_glesMultiTexCoord2.x * tmpvar_31) * (tmpvar_40.x + (tmpvar_40.y * tmpvar_40.y)));
      highp vec2 vSinCos_44;
      vSinCos_44.x = sin(fAngle_43);
      vSinCos_44.y = cos(fAngle_43);
      highp float tmpvar_45;
      tmpvar_45 = (1.0 - vSinCos_44.y);
      highp mat3 tmpvar_46;
      tmpvar_46[0].x = (((tmpvar_45 * tmpvar_28.x) * tmpvar_28.x) + vSinCos_44.y);
      tmpvar_46[0].y = (((tmpvar_45 * tmpvar_28.x) * tmpvar_28.y) + (vSinCos_44.x * tmpvar_28.z));
      tmpvar_46[0].z = (((tmpvar_45 * tmpvar_28.x) * tmpvar_28.z) - (vSinCos_44.x * tmpvar_28.y));
      tmpvar_46[1].x = (((tmpvar_45 * tmpvar_28.x) * tmpvar_28.y) - (vSinCos_44.x * tmpvar_28.z));
      tmpvar_46[1].y = (((tmpvar_45 * tmpvar_28.y) * tmpvar_28.y) + vSinCos_44.y);
      tmpvar_46[1].z = (((tmpvar_45 * tmpvar_28.y) * tmpvar_28.z) + (vSinCos_44.x * tmpvar_28.x));
      tmpvar_46[2].x = (((tmpvar_45 * tmpvar_28.x) * tmpvar_28.z) + (vSinCos_44.x * tmpvar_28.y));
      tmpvar_46[2].y = (((tmpvar_45 * tmpvar_28.y) * tmpvar_28.z) - (vSinCos_44.x * tmpvar_28.x));
      tmpvar_46[2].z = (((tmpvar_45 * tmpvar_28.z) * tmpvar_28.z) + vSinCos_44.y);
      highp vec3 tmpvar_47;
      tmpvar_47 = ((tmpvar_28.yzx * vRotatedWindVector_11.zxy) - (tmpvar_28.zxy * vRotatedWindVector_11.yzx));
      vAxis_36.xz = tmpvar_47.xz;
      highp float tmpvar_48;
      tmpvar_48 = clamp (dot (vRotatedWindVector_11, tmpvar_28), -1.0, 1.0);
      vAxis_36.y = (tmpvar_47.y + tmpvar_48);
      highp vec3 tmpvar_49;
      tmpvar_49 = normalize(vAxis_36);
      vAxis_36 = tmpvar_49;
      highp float tmpvar_50;
      tmpvar_50 = (1.570796 - (sign(tmpvar_48) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_48))) * (1.570796 + (abs(tmpvar_48) * (-0.2146018 + 
          (abs(tmpvar_48) * (0.08656672 + (abs(tmpvar_48) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_51;
      tmpvar_51 = (tmpvar_40.y - (tmpvar_40.x * tmpvar_40.x));
      fTwitch_35 = 0.0;
      if (tmpvar_34) {
        highp float fTime_52;
        fTime_52 = (tmpvar_33.z + tmpvar_38);
        highp vec4 tmpvar_53;
        tmpvar_53.zw = vec2(0.0, 0.0);
        tmpvar_53.x = fTime_52;
        tmpvar_53.y = (0.87 * fTime_52);
        highp vec4 tmpvar_54;
        highp vec4 tmpvar_55;
        tmpvar_55 = abs(((
          fract((tmpvar_53 + 0.5))
         * 2.0) - 1.0));
        tmpvar_54 = (((
          (tmpvar_55 * tmpvar_55)
         * 
          (3.0 - (2.0 * tmpvar_55))
        ) - 0.5) * 2.0);
        fTwitch_35 = (tmpvar_33.x * pow (clamp (
          ((((tmpvar_54.x * tmpvar_54.y) * tmpvar_54.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_33.y));
      };
      highp float fAngle_56;
      fAngle_56 = (_glesMultiTexCoord2.x * ((
        (tmpvar_50 * tmpvar_32)
       + 
        (tmpvar_51 * tmpvar_30)
      ) + fTwitch_35));
      highp vec2 vSinCos_57;
      vSinCos_57.x = sin(fAngle_56);
      vSinCos_57.y = cos(fAngle_56);
      highp float tmpvar_58;
      tmpvar_58 = (1.0 - vSinCos_57.y);
      highp mat3 tmpvar_59;
      tmpvar_59[0].x = (((tmpvar_58 * tmpvar_49.x) * tmpvar_49.x) + vSinCos_57.y);
      tmpvar_59[0].y = (((tmpvar_58 * tmpvar_49.x) * tmpvar_49.y) + (vSinCos_57.x * tmpvar_49.z));
      tmpvar_59[0].z = (((tmpvar_58 * tmpvar_49.x) * tmpvar_49.z) - (vSinCos_57.x * tmpvar_49.y));
      tmpvar_59[1].x = (((tmpvar_58 * tmpvar_49.x) * tmpvar_49.y) - (vSinCos_57.x * tmpvar_49.z));
      tmpvar_59[1].y = (((tmpvar_58 * tmpvar_49.y) * tmpvar_49.y) + vSinCos_57.y);
      tmpvar_59[1].z = (((tmpvar_58 * tmpvar_49.y) * tmpvar_49.z) + (vSinCos_57.x * tmpvar_49.x));
      tmpvar_59[2].x = (((tmpvar_58 * tmpvar_49.x) * tmpvar_49.z) + (vSinCos_57.x * tmpvar_49.y));
      tmpvar_59[2].y = (((tmpvar_58 * tmpvar_49.y) * tmpvar_49.z) - (vSinCos_57.x * tmpvar_49.x));
      tmpvar_59[2].z = (((tmpvar_58 * tmpvar_49.z) * tmpvar_49.z) + vSinCos_57.y);
      highp mat3 tmpvar_60;
      tmpvar_60 = (tmpvar_46 * tmpvar_59);
      vDirection_22 = (tmpvar_60 * _glesNormal);
      vPos_21 = (normalize((tmpvar_60 * vPos_25)) * tmpvar_42);
    };
    tmpvar_9 = vDirection_22;
    FinalPosition_12 = vPos_21;
  };
  highp vec3 tmpvar_61;
  tmpvar_61 = (FinalPosition_12 + _glesMultiTexCoord1.xyz);
  FinalPosition_12 = tmpvar_61;
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_62;
    vPos_62 = tmpvar_61;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_63;
      vPos_63 = tmpvar_61;
      highp float fAdherenceScale_64;
      highp vec3 tmpvar_65;
      tmpvar_65 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_66;
      tmpvar_66 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_67;
      highp float fOscillation_68;
      fOscillation_68 = 1.0;
      highp float fAmount_69;
      highp float fTarget_70;
      highp vec4 tmpvar_71;
      tmpvar_71.x = (tmpvar_66 + _glesMultiTexCoord0.w);
      tmpvar_71.y = ((tmpvar_66 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_71.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_66 + _glesMultiTexCoord0.w));
      tmpvar_71.w = ((tmpvar_66 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_72;
      tmpvar_72 = abs(((
        fract((tmpvar_71 + 0.5))
       * 2.0) - 1.0));
      vOscillations_67 = (((
        (tmpvar_72 * tmpvar_72)
       * 
        (3.0 - (2.0 * tmpvar_72))
      ) - 0.5) * 2.0);
      highp float tmpvar_73;
      tmpvar_73 = (vOscillations_67.y * vOscillations_67.z);
      fTarget_70 = 1.0;
      fAmount_69 = tmpvar_73;
      if ((tmpvar_73 < 0.0)) {
        fTarget_70 = -1.0;
        fAmount_69 = -(tmpvar_73);
      };
      fOscillation_68 = (((
        (mix (mix (tmpvar_73, fTarget_70, fAmount_69), fTarget_70, fAmount_69) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_67.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_67.w * _ST_WindBranchWhip.x)));
      vPos_63 = (tmpvar_61 + ((tmpvar_65 * fOscillation_68) * _ST_WindBranch.y));
      highp vec4 tmpvar_74;
      tmpvar_74.zw = vec2(0.0, 0.0);
      tmpvar_74.x = ((tmpvar_66 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_74.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_75;
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      tmpvar_75 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      fAdherenceScale_64 = (1.0 - ((
        ((tmpvar_75.x * tmpvar_75.y) * tmpvar_75.x)
       * tmpvar_75.y) * _ST_WindTurbulences.x));
      fAdherenceScale_64 = (fAdherenceScale_64 + ((vOscillations_67.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_63 = (vPos_63 + ((
        ((vRotatedBranchAnchor_10 - vPos_63) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_64) * _glesMultiTexCoord0.z));
      vPos_62 = vPos_63;
    } else {
      highp vec3 vPos_77;
      vPos_77 = vPos_62;
      highp vec3 tmpvar_78;
      tmpvar_78 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_79;
      tmpvar_79 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_80;
      highp float fAmount_81;
      highp float fTarget_82;
      highp vec4 tmpvar_83;
      tmpvar_83.w = 0.0;
      tmpvar_83.x = (tmpvar_79 + _glesMultiTexCoord0.w);
      tmpvar_83.y = ((tmpvar_79 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_83.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_79 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_84;
      tmpvar_84 = abs(((
        fract((tmpvar_83 + 0.5))
       * 2.0) - 1.0));
      vOscillations_80 = (((
        (tmpvar_84 * tmpvar_84)
       * 
        (3.0 - (2.0 * tmpvar_84))
      ) - 0.5) * 2.0);
      highp float tmpvar_85;
      tmpvar_85 = (vOscillations_80.y * vOscillations_80.z);
      fTarget_82 = 1.0;
      fAmount_81 = tmpvar_85;
      if ((tmpvar_85 < 0.0)) {
        fTarget_82 = -1.0;
        fAmount_81 = -(tmpvar_85);
      };
      vPos_77 = (vPos_62 + ((tmpvar_78 * 
        (((mix (
          mix (tmpvar_85, fTarget_82, fAmount_81)
        , fTarget_82, fAmount_81) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_80.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_62 = vPos_77;
    };
    FinalPosition_12 = vPos_62;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_86;
    vPos_86 = FinalPosition_12;
    highp float fAdjust_87;
    highp float fLength_88;
    fLength_88 = sqrt(dot (FinalPosition_12, FinalPosition_12));
    highp float tmpvar_89;
    tmpvar_89 = (max ((FinalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_87 = tmpvar_89;
    if ((tmpvar_89 != 0.0)) {
      fAdjust_87 = pow (tmpvar_89, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_90;
    tmpvar_90.zw = vec2(0.0, 0.0);
    tmpvar_90.x = (tmpvar_13.x + _ST_WindGlobal.x);
    tmpvar_90.y = (tmpvar_13.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_91;
    highp vec4 tmpvar_92;
    tmpvar_92 = abs(((
      fract((tmpvar_90 + 0.5))
     * 2.0) - 1.0));
    tmpvar_91 = (((
      (tmpvar_92 * tmpvar_92)
     * 
      (3.0 - (2.0 * tmpvar_92))
    ) - 0.5) * 2.0);
    vPos_86.xz = (FinalPosition_12.xz + (vRotatedWindVector_11.xz * (
      ((_ST_WindGlobal.y * (tmpvar_91.x + (tmpvar_91.y * tmpvar_91.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_87)));
    vPos_86 = (normalize(vPos_86) * fLength_88);
    FinalPosition_12 = vPos_86;
  };
  tmpvar_8.xyz = FinalPosition_12;
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_93;
  highp vec3 viewN_94;
  highp vec3 viewpos_95;
  viewpos_95 = (glstate_matrix_modelview0 * tmpvar_8).xyz;
  highp mat3 tmpvar_96;
  tmpvar_96[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_96[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_96[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_94 = normalize((tmpvar_96 * tmpvar_9));
  lowp vec3 tmpvar_97;
  tmpvar_97 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_93 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = (unity_LightPosition[0].xyz - (viewpos_95 * unity_LightPosition[0].w));
  highp float tmpvar_99;
  tmpvar_99 = dot (tmpvar_98, tmpvar_98);
  highp vec3 tmpvar_100;
  tmpvar_100 = (tmpvar_98 * inversesqrt(tmpvar_99));
  lightColor_93 = (lightColor_93 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_94, tmpvar_100))
   * 
    ((1.0/((1.0 + (tmpvar_99 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_100, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_101;
  tmpvar_101 = (unity_LightPosition[1].xyz - (viewpos_95 * unity_LightPosition[1].w));
  highp float tmpvar_102;
  tmpvar_102 = dot (tmpvar_101, tmpvar_101);
  highp vec3 tmpvar_103;
  tmpvar_103 = (tmpvar_101 * inversesqrt(tmpvar_102));
  lightColor_93 = (lightColor_93 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_94, tmpvar_103))
   * 
    ((1.0/((1.0 + (tmpvar_102 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_103, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_104;
  tmpvar_104 = (unity_LightPosition[2].xyz - (viewpos_95 * unity_LightPosition[2].w));
  highp float tmpvar_105;
  tmpvar_105 = dot (tmpvar_104, tmpvar_104);
  highp vec3 tmpvar_106;
  tmpvar_106 = (tmpvar_104 * inversesqrt(tmpvar_105));
  lightColor_93 = (lightColor_93 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_94, tmpvar_106))
   * 
    ((1.0/((1.0 + (tmpvar_105 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_106, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_107;
  tmpvar_107 = (unity_LightPosition[3].xyz - (viewpos_95 * unity_LightPosition[3].w));
  highp float tmpvar_108;
  tmpvar_108 = dot (tmpvar_107, tmpvar_107);
  highp vec3 tmpvar_109;
  tmpvar_109 = (tmpvar_107 * inversesqrt(tmpvar_108));
  lightColor_93 = (lightColor_93 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_94, tmpvar_109))
   * 
    ((1.0/((1.0 + (tmpvar_108 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_109, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_110;
  tmpvar_110 = (tmpvar_4.xyz * lightColor_93);
  tmpvar_3.xyz = tmpvar_110;
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_4;
  mediump float tmpvar_5;
  tmpvar_5 = (diffuseColor_3.w * _Color.w);
  tmpvar_2 = tmpvar_5;
  lowp float x_6;
  x_6 = (tmpvar_2 - _Cutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_7;
  tmpvar_7 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8.xyz = tmpvar_1;
  tmpvar_8.w = tmpvar_2;
  gl_FragData[0] = tmpvar_8;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "GEOM_TYPE_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out lowp vec4 xlv_Input_color;
out mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec2 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord0.xy;
  tmpvar_5.xy = tmpvar_6;
  tmpvar_4.w = _Color.w;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * _glesColor.x);
  tmpvar_4.xyz = tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_8 = tmpvar_1;
  tmpvar_9 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_10;
  highp vec3 vRotatedWindVector_11;
  highp vec3 FinalPosition_12;
  FinalPosition_12 = tmpvar_1.xyz;
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_11 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_10 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_12 = tmpvar_17;
  if (((tmpvar_14 > 1.0) && (tmpvar_14 < 5.0))) {
    highp float tmpvar_18;
    tmpvar_18 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_19;
    isBestWind_19 = (tmpvar_14 == 4.0);
    bool bLeaf2_20;
    bLeaf2_20 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    highp vec3 vDirection_22;
    vDirection_22 = tmpvar_2;
    highp float tmpvar_23;
    if (bLeaf2_20) {
      tmpvar_23 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_23 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_24;
    if (bLeaf2_20) {
      tmpvar_24 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_24 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_25;
    highp vec4 tmpvar_26;
    tmpvar_26.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_26.x = (tmpvar_23 + tmpvar_18);
    highp vec4 tmpvar_27;
    tmpvar_27 = abs(((
      fract((tmpvar_26 + 0.5))
     * 2.0) - 1.0));
    vPos_25 = (tmpvar_17 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_24 * (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_22 = tmpvar_2;
    vPos_21 = vPos_25;
    if (isBestWind_19) {
      highp vec3 tmpvar_28;
      tmpvar_28 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_29;
      if (bLeaf2_20) {
        tmpvar_29 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_29 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_30;
      if (bLeaf2_20) {
        tmpvar_30 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_30 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_31;
      if (bLeaf2_20) {
        tmpvar_31 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_32;
      if (bLeaf2_20) {
        tmpvar_32 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_33;
      if (bLeaf2_20) {
        tmpvar_33 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_33 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_34;
      if (bLeaf2_20) {
        tmpvar_34 = bool(1);
      } else {
        tmpvar_34 = bool(1);
      };
      highp float fTwitch_35;
      highp vec3 vAxis_36;
      highp vec3 tmpvar_37;
      tmpvar_37 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_38;
      tmpvar_38 = ((tmpvar_37.x + tmpvar_37.y) + tmpvar_37.z);
      highp vec4 tmpvar_39;
      tmpvar_39.x = (tmpvar_29 + tmpvar_38);
      tmpvar_39.y = ((tmpvar_29 * 0.75) - tmpvar_38);
      tmpvar_39.z = ((tmpvar_29 * 0.01) + tmpvar_38);
      tmpvar_39.w = (tmpvar_29 + tmpvar_38);
      highp vec4 tmpvar_40;
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      tmpvar_40 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = sqrt(dot (vPos_25, vPos_25));
      highp float fAngle_43;
      fAngle_43 = ((_glesMultiTexCoord2.x * tmpvar_31) * (tmpvar_40.x + (tmpvar_40.y * tmpvar_40.y)));
      highp vec2 vSinCos_44;
      vSinCos_44.x = sin(fAngle_43);
      vSinCos_44.y = cos(fAngle_43);
      highp float tmpvar_45;
      tmpvar_45 = (1.0 - vSinCos_44.y);
      highp mat3 tmpvar_46;
      tmpvar_46[0].x = (((tmpvar_45 * tmpvar_28.x) * tmpvar_28.x) + vSinCos_44.y);
      tmpvar_46[0].y = (((tmpvar_45 * tmpvar_28.x) * tmpvar_28.y) + (vSinCos_44.x * tmpvar_28.z));
      tmpvar_46[0].z = (((tmpvar_45 * tmpvar_28.x) * tmpvar_28.z) - (vSinCos_44.x * tmpvar_28.y));
      tmpvar_46[1].x = (((tmpvar_45 * tmpvar_28.x) * tmpvar_28.y) - (vSinCos_44.x * tmpvar_28.z));
      tmpvar_46[1].y = (((tmpvar_45 * tmpvar_28.y) * tmpvar_28.y) + vSinCos_44.y);
      tmpvar_46[1].z = (((tmpvar_45 * tmpvar_28.y) * tmpvar_28.z) + (vSinCos_44.x * tmpvar_28.x));
      tmpvar_46[2].x = (((tmpvar_45 * tmpvar_28.x) * tmpvar_28.z) + (vSinCos_44.x * tmpvar_28.y));
      tmpvar_46[2].y = (((tmpvar_45 * tmpvar_28.y) * tmpvar_28.z) - (vSinCos_44.x * tmpvar_28.x));
      tmpvar_46[2].z = (((tmpvar_45 * tmpvar_28.z) * tmpvar_28.z) + vSinCos_44.y);
      highp vec3 tmpvar_47;
      tmpvar_47 = ((tmpvar_28.yzx * vRotatedWindVector_11.zxy) - (tmpvar_28.zxy * vRotatedWindVector_11.yzx));
      vAxis_36.xz = tmpvar_47.xz;
      highp float tmpvar_48;
      tmpvar_48 = clamp (dot (vRotatedWindVector_11, tmpvar_28), -1.0, 1.0);
      vAxis_36.y = (tmpvar_47.y + tmpvar_48);
      highp vec3 tmpvar_49;
      tmpvar_49 = normalize(vAxis_36);
      vAxis_36 = tmpvar_49;
      highp float tmpvar_50;
      tmpvar_50 = (1.570796 - (sign(tmpvar_48) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_48))) * (1.570796 + (abs(tmpvar_48) * (-0.2146018 + 
          (abs(tmpvar_48) * (0.08656672 + (abs(tmpvar_48) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_51;
      tmpvar_51 = (tmpvar_40.y - (tmpvar_40.x * tmpvar_40.x));
      fTwitch_35 = 0.0;
      if (tmpvar_34) {
        highp float fTime_52;
        fTime_52 = (tmpvar_33.z + tmpvar_38);
        highp vec4 tmpvar_53;
        tmpvar_53.zw = vec2(0.0, 0.0);
        tmpvar_53.x = fTime_52;
        tmpvar_53.y = (0.87 * fTime_52);
        highp vec4 tmpvar_54;
        highp vec4 tmpvar_55;
        tmpvar_55 = abs(((
          fract((tmpvar_53 + 0.5))
         * 2.0) - 1.0));
        tmpvar_54 = (((
          (tmpvar_55 * tmpvar_55)
         * 
          (3.0 - (2.0 * tmpvar_55))
        ) - 0.5) * 2.0);
        fTwitch_35 = (tmpvar_33.x * pow (clamp (
          ((((tmpvar_54.x * tmpvar_54.y) * tmpvar_54.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_33.y));
      };
      highp float fAngle_56;
      fAngle_56 = (_glesMultiTexCoord2.x * ((
        (tmpvar_50 * tmpvar_32)
       + 
        (tmpvar_51 * tmpvar_30)
      ) + fTwitch_35));
      highp vec2 vSinCos_57;
      vSinCos_57.x = sin(fAngle_56);
      vSinCos_57.y = cos(fAngle_56);
      highp float tmpvar_58;
      tmpvar_58 = (1.0 - vSinCos_57.y);
      highp mat3 tmpvar_59;
      tmpvar_59[0].x = (((tmpvar_58 * tmpvar_49.x) * tmpvar_49.x) + vSinCos_57.y);
      tmpvar_59[0].y = (((tmpvar_58 * tmpvar_49.x) * tmpvar_49.y) + (vSinCos_57.x * tmpvar_49.z));
      tmpvar_59[0].z = (((tmpvar_58 * tmpvar_49.x) * tmpvar_49.z) - (vSinCos_57.x * tmpvar_49.y));
      tmpvar_59[1].x = (((tmpvar_58 * tmpvar_49.x) * tmpvar_49.y) - (vSinCos_57.x * tmpvar_49.z));
      tmpvar_59[1].y = (((tmpvar_58 * tmpvar_49.y) * tmpvar_49.y) + vSinCos_57.y);
      tmpvar_59[1].z = (((tmpvar_58 * tmpvar_49.y) * tmpvar_49.z) + (vSinCos_57.x * tmpvar_49.x));
      tmpvar_59[2].x = (((tmpvar_58 * tmpvar_49.x) * tmpvar_49.z) + (vSinCos_57.x * tmpvar_49.y));
      tmpvar_59[2].y = (((tmpvar_58 * tmpvar_49.y) * tmpvar_49.z) - (vSinCos_57.x * tmpvar_49.x));
      tmpvar_59[2].z = (((tmpvar_58 * tmpvar_49.z) * tmpvar_49.z) + vSinCos_57.y);
      highp mat3 tmpvar_60;
      tmpvar_60 = (tmpvar_46 * tmpvar_59);
      vDirection_22 = (tmpvar_60 * _glesNormal);
      vPos_21 = (normalize((tmpvar_60 * vPos_25)) * tmpvar_42);
    };
    tmpvar_9 = vDirection_22;
    FinalPosition_12 = vPos_21;
  };
  highp vec3 tmpvar_61;
  tmpvar_61 = (FinalPosition_12 + _glesMultiTexCoord1.xyz);
  FinalPosition_12 = tmpvar_61;
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_62;
    vPos_62 = tmpvar_61;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_63;
      vPos_63 = tmpvar_61;
      highp float fAdherenceScale_64;
      highp vec3 tmpvar_65;
      tmpvar_65 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_66;
      tmpvar_66 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_67;
      highp float fOscillation_68;
      fOscillation_68 = 1.0;
      highp float fAmount_69;
      highp float fTarget_70;
      highp vec4 tmpvar_71;
      tmpvar_71.x = (tmpvar_66 + _glesMultiTexCoord0.w);
      tmpvar_71.y = ((tmpvar_66 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_71.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_66 + _glesMultiTexCoord0.w));
      tmpvar_71.w = ((tmpvar_66 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_72;
      tmpvar_72 = abs(((
        fract((tmpvar_71 + 0.5))
       * 2.0) - 1.0));
      vOscillations_67 = (((
        (tmpvar_72 * tmpvar_72)
       * 
        (3.0 - (2.0 * tmpvar_72))
      ) - 0.5) * 2.0);
      highp float tmpvar_73;
      tmpvar_73 = (vOscillations_67.y * vOscillations_67.z);
      fTarget_70 = 1.0;
      fAmount_69 = tmpvar_73;
      if ((tmpvar_73 < 0.0)) {
        fTarget_70 = -1.0;
        fAmount_69 = -(tmpvar_73);
      };
      fOscillation_68 = (((
        (mix (mix (tmpvar_73, fTarget_70, fAmount_69), fTarget_70, fAmount_69) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_67.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_67.w * _ST_WindBranchWhip.x)));
      vPos_63 = (tmpvar_61 + ((tmpvar_65 * fOscillation_68) * _ST_WindBranch.y));
      highp vec4 tmpvar_74;
      tmpvar_74.zw = vec2(0.0, 0.0);
      tmpvar_74.x = ((tmpvar_66 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_74.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_75;
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      tmpvar_75 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      fAdherenceScale_64 = (1.0 - ((
        ((tmpvar_75.x * tmpvar_75.y) * tmpvar_75.x)
       * tmpvar_75.y) * _ST_WindTurbulences.x));
      fAdherenceScale_64 = (fAdherenceScale_64 + ((vOscillations_67.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_63 = (vPos_63 + ((
        ((vRotatedBranchAnchor_10 - vPos_63) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_64) * _glesMultiTexCoord0.z));
      vPos_62 = vPos_63;
    } else {
      highp vec3 vPos_77;
      vPos_77 = vPos_62;
      highp vec3 tmpvar_78;
      tmpvar_78 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_79;
      tmpvar_79 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_80;
      highp float fAmount_81;
      highp float fTarget_82;
      highp vec4 tmpvar_83;
      tmpvar_83.w = 0.0;
      tmpvar_83.x = (tmpvar_79 + _glesMultiTexCoord0.w);
      tmpvar_83.y = ((tmpvar_79 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_83.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_79 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_84;
      tmpvar_84 = abs(((
        fract((tmpvar_83 + 0.5))
       * 2.0) - 1.0));
      vOscillations_80 = (((
        (tmpvar_84 * tmpvar_84)
       * 
        (3.0 - (2.0 * tmpvar_84))
      ) - 0.5) * 2.0);
      highp float tmpvar_85;
      tmpvar_85 = (vOscillations_80.y * vOscillations_80.z);
      fTarget_82 = 1.0;
      fAmount_81 = tmpvar_85;
      if ((tmpvar_85 < 0.0)) {
        fTarget_82 = -1.0;
        fAmount_81 = -(tmpvar_85);
      };
      vPos_77 = (vPos_62 + ((tmpvar_78 * 
        (((mix (
          mix (tmpvar_85, fTarget_82, fAmount_81)
        , fTarget_82, fAmount_81) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_80.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_62 = vPos_77;
    };
    FinalPosition_12 = vPos_62;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_86;
    vPos_86 = FinalPosition_12;
    highp float fAdjust_87;
    highp float fLength_88;
    fLength_88 = sqrt(dot (FinalPosition_12, FinalPosition_12));
    highp float tmpvar_89;
    tmpvar_89 = (max ((FinalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_87 = tmpvar_89;
    if ((tmpvar_89 != 0.0)) {
      fAdjust_87 = pow (tmpvar_89, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_90;
    tmpvar_90.zw = vec2(0.0, 0.0);
    tmpvar_90.x = (tmpvar_13.x + _ST_WindGlobal.x);
    tmpvar_90.y = (tmpvar_13.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_91;
    highp vec4 tmpvar_92;
    tmpvar_92 = abs(((
      fract((tmpvar_90 + 0.5))
     * 2.0) - 1.0));
    tmpvar_91 = (((
      (tmpvar_92 * tmpvar_92)
     * 
      (3.0 - (2.0 * tmpvar_92))
    ) - 0.5) * 2.0);
    vPos_86.xz = (FinalPosition_12.xz + (vRotatedWindVector_11.xz * (
      ((_ST_WindGlobal.y * (tmpvar_91.x + (tmpvar_91.y * tmpvar_91.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_87)));
    vPos_86 = (normalize(vPos_86) * fLength_88);
    FinalPosition_12 = vPos_86;
  };
  tmpvar_8.xyz = FinalPosition_12;
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_93;
  highp vec3 viewN_94;
  highp vec3 viewpos_95;
  viewpos_95 = (glstate_matrix_modelview0 * tmpvar_8).xyz;
  highp mat3 tmpvar_96;
  tmpvar_96[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_96[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_96[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_94 = normalize((tmpvar_96 * tmpvar_9));
  lowp vec3 tmpvar_97;
  tmpvar_97 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_93 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = (unity_LightPosition[0].xyz - (viewpos_95 * unity_LightPosition[0].w));
  highp float tmpvar_99;
  tmpvar_99 = dot (tmpvar_98, tmpvar_98);
  highp vec3 tmpvar_100;
  tmpvar_100 = (tmpvar_98 * inversesqrt(tmpvar_99));
  lightColor_93 = (lightColor_93 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_94, tmpvar_100))
   * 
    ((1.0/((1.0 + (tmpvar_99 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_100, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_101;
  tmpvar_101 = (unity_LightPosition[1].xyz - (viewpos_95 * unity_LightPosition[1].w));
  highp float tmpvar_102;
  tmpvar_102 = dot (tmpvar_101, tmpvar_101);
  highp vec3 tmpvar_103;
  tmpvar_103 = (tmpvar_101 * inversesqrt(tmpvar_102));
  lightColor_93 = (lightColor_93 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_94, tmpvar_103))
   * 
    ((1.0/((1.0 + (tmpvar_102 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_103, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_104;
  tmpvar_104 = (unity_LightPosition[2].xyz - (viewpos_95 * unity_LightPosition[2].w));
  highp float tmpvar_105;
  tmpvar_105 = dot (tmpvar_104, tmpvar_104);
  highp vec3 tmpvar_106;
  tmpvar_106 = (tmpvar_104 * inversesqrt(tmpvar_105));
  lightColor_93 = (lightColor_93 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_94, tmpvar_106))
   * 
    ((1.0/((1.0 + (tmpvar_105 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_106, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_107;
  tmpvar_107 = (unity_LightPosition[3].xyz - (viewpos_95 * unity_LightPosition[3].w));
  highp float tmpvar_108;
  tmpvar_108 = dot (tmpvar_107, tmpvar_107);
  highp vec3 tmpvar_109;
  tmpvar_109 = (tmpvar_107 * inversesqrt(tmpvar_108));
  lightColor_93 = (lightColor_93 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_94, tmpvar_109))
   * 
    ((1.0/((1.0 + (tmpvar_108 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_109, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_110;
  tmpvar_110 = (tmpvar_4.xyz * lightColor_93);
  tmpvar_3.xyz = tmpvar_110;
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
in lowp vec4 xlv_Input_color;
in mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_4;
  mediump float tmpvar_5;
  tmpvar_5 = (diffuseColor_3.w * _Color.w);
  tmpvar_2 = tmpvar_5;
  lowp float x_6;
  x_6 = (tmpvar_2 - _Cutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_7;
  tmpvar_7 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8.xyz = tmpvar_1;
  tmpvar_8.w = tmpvar_2;
  _glesFragData[0] = tmpvar_8;
}



#endif"
}
SubProgram "gles " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec2 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord0.xy;
  tmpvar_5.xy = tmpvar_6;
  tmpvar_4.w = _Color.w;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * _glesColor.x);
  tmpvar_4.xyz = tmpvar_7;
  highp float cse_8;
  cse_8 = _Object2World[3].x;
  highp float cse_9;
  cse_9 = _Object2World[3].y;
  highp float tmpvar_10;
  tmpvar_10 = clamp (((
    fract(((cse_8 + cse_9) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_5.z = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_15 = tmpvar_19;
  if (((tmpvar_16 > 1.0) && (tmpvar_16 < 5.0))) {
    highp float tmpvar_20;
    tmpvar_20 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_21;
    isBestWind_21 = (tmpvar_16 == 4.0);
    bool bLeaf2_22;
    bLeaf2_22 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    highp vec3 vDirection_24;
    vDirection_24 = tmpvar_2;
    highp float tmpvar_25;
    if (bLeaf2_22) {
      tmpvar_25 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_26;
    if (bLeaf2_22) {
      tmpvar_26 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_27;
    highp vec4 tmpvar_28;
    tmpvar_28.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_28.x = (tmpvar_25 + tmpvar_20);
    highp vec4 tmpvar_29;
    tmpvar_29 = abs(((
      fract((tmpvar_28 + 0.5))
     * 2.0) - 1.0));
    vPos_27 = (tmpvar_19 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_26 * (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_24 = tmpvar_2;
    vPos_23 = vPos_27;
    if (isBestWind_21) {
      highp vec3 tmpvar_30;
      tmpvar_30 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_31;
      if (bLeaf2_22) {
        tmpvar_31 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_32;
      if (bLeaf2_22) {
        tmpvar_32 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_33;
      if (bLeaf2_22) {
        tmpvar_33 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_34;
      if (bLeaf2_22) {
        tmpvar_34 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_35;
      if (bLeaf2_22) {
        tmpvar_35 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_35 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_36;
      if (bLeaf2_22) {
        tmpvar_36 = bool(1);
      } else {
        tmpvar_36 = bool(1);
      };
      highp float fTwitch_37;
      highp vec3 vAxis_38;
      highp vec3 tmpvar_39;
      tmpvar_39 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_40;
      tmpvar_40 = ((tmpvar_39.x + tmpvar_39.y) + tmpvar_39.z);
      highp vec4 tmpvar_41;
      tmpvar_41.x = (tmpvar_31 + tmpvar_40);
      tmpvar_41.y = ((tmpvar_31 * 0.75) - tmpvar_40);
      tmpvar_41.z = ((tmpvar_31 * 0.01) + tmpvar_40);
      tmpvar_41.w = (tmpvar_31 + tmpvar_40);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = sqrt(dot (vPos_27, vPos_27));
      highp float fAngle_45;
      fAngle_45 = ((_glesMultiTexCoord2.x * tmpvar_33) * (tmpvar_42.x + (tmpvar_42.y * tmpvar_42.y)));
      highp vec2 vSinCos_46;
      vSinCos_46.x = sin(fAngle_45);
      vSinCos_46.y = cos(fAngle_45);
      highp float tmpvar_47;
      tmpvar_47 = (1.0 - vSinCos_46.y);
      highp mat3 tmpvar_48;
      tmpvar_48[0].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.x) + vSinCos_46.y);
      tmpvar_48[0].y = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.y) + (vSinCos_46.x * tmpvar_30.z));
      tmpvar_48[0].z = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.z) - (vSinCos_46.x * tmpvar_30.y));
      tmpvar_48[1].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.y) - (vSinCos_46.x * tmpvar_30.z));
      tmpvar_48[1].y = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.y) + vSinCos_46.y);
      tmpvar_48[1].z = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.z) + (vSinCos_46.x * tmpvar_30.x));
      tmpvar_48[2].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.z) + (vSinCos_46.x * tmpvar_30.y));
      tmpvar_48[2].y = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.z) - (vSinCos_46.x * tmpvar_30.x));
      tmpvar_48[2].z = (((tmpvar_47 * tmpvar_30.z) * tmpvar_30.z) + vSinCos_46.y);
      highp vec3 tmpvar_49;
      tmpvar_49 = ((tmpvar_30.yzx * vRotatedWindVector_14.zxy) - (tmpvar_30.zxy * vRotatedWindVector_14.yzx));
      vAxis_38.xz = tmpvar_49.xz;
      highp float tmpvar_50;
      tmpvar_50 = clamp (dot (vRotatedWindVector_14, tmpvar_30), -1.0, 1.0);
      vAxis_38.y = (tmpvar_49.y + tmpvar_50);
      highp vec3 tmpvar_51;
      tmpvar_51 = normalize(vAxis_38);
      vAxis_38 = tmpvar_51;
      highp float tmpvar_52;
      tmpvar_52 = (1.570796 - (sign(tmpvar_50) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_50))) * (1.570796 + (abs(tmpvar_50) * (-0.2146018 + 
          (abs(tmpvar_50) * (0.08656672 + (abs(tmpvar_50) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_53;
      tmpvar_53 = (tmpvar_42.y - (tmpvar_42.x * tmpvar_42.x));
      fTwitch_37 = 0.0;
      if (tmpvar_36) {
        highp float fTime_54;
        fTime_54 = (tmpvar_35.z + tmpvar_40);
        highp vec4 tmpvar_55;
        tmpvar_55.zw = vec2(0.0, 0.0);
        tmpvar_55.x = fTime_54;
        tmpvar_55.y = (0.87 * fTime_54);
        highp vec4 tmpvar_56;
        highp vec4 tmpvar_57;
        tmpvar_57 = abs(((
          fract((tmpvar_55 + 0.5))
         * 2.0) - 1.0));
        tmpvar_56 = (((
          (tmpvar_57 * tmpvar_57)
         * 
          (3.0 - (2.0 * tmpvar_57))
        ) - 0.5) * 2.0);
        fTwitch_37 = (tmpvar_35.x * pow (clamp (
          ((((tmpvar_56.x * tmpvar_56.y) * tmpvar_56.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_35.y));
      };
      highp float fAngle_58;
      fAngle_58 = (_glesMultiTexCoord2.x * ((
        (tmpvar_52 * tmpvar_34)
       + 
        (tmpvar_53 * tmpvar_32)
      ) + fTwitch_37));
      highp vec2 vSinCos_59;
      vSinCos_59.x = sin(fAngle_58);
      vSinCos_59.y = cos(fAngle_58);
      highp float tmpvar_60;
      tmpvar_60 = (1.0 - vSinCos_59.y);
      highp mat3 tmpvar_61;
      tmpvar_61[0].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.x) + vSinCos_59.y);
      tmpvar_61[0].y = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.y) + (vSinCos_59.x * tmpvar_51.z));
      tmpvar_61[0].z = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.z) - (vSinCos_59.x * tmpvar_51.y));
      tmpvar_61[1].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.y) - (vSinCos_59.x * tmpvar_51.z));
      tmpvar_61[1].y = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.y) + vSinCos_59.y);
      tmpvar_61[1].z = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.z) + (vSinCos_59.x * tmpvar_51.x));
      tmpvar_61[2].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.z) + (vSinCos_59.x * tmpvar_51.y));
      tmpvar_61[2].y = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.z) - (vSinCos_59.x * tmpvar_51.x));
      tmpvar_61[2].z = (((tmpvar_60 * tmpvar_51.z) * tmpvar_51.z) + vSinCos_59.y);
      highp mat3 tmpvar_62;
      tmpvar_62 = (tmpvar_48 * tmpvar_61);
      vDirection_24 = (tmpvar_62 * _glesNormal);
      vPos_23 = (normalize((tmpvar_62 * vPos_27)) * tmpvar_44);
    };
    tmpvar_12 = vDirection_24;
    FinalPosition_15 = vPos_23;
  };
  highp vec3 tmpvar_63;
  tmpvar_63 = (FinalPosition_15 + _glesMultiTexCoord1.xyz);
  FinalPosition_15 = tmpvar_63;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_64;
    vPos_64 = tmpvar_63;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_65;
      vPos_65 = tmpvar_63;
      highp float fAdherenceScale_66;
      highp vec3 tmpvar_67;
      tmpvar_67 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_68;
      tmpvar_68 = (_ST_WindBranch.x + (cse_8 + cse_9));
      highp vec4 vOscillations_69;
      highp float fOscillation_70;
      fOscillation_70 = 1.0;
      highp float fAmount_71;
      highp float fTarget_72;
      highp vec4 tmpvar_73;
      tmpvar_73.x = (tmpvar_68 + _glesMultiTexCoord0.w);
      tmpvar_73.y = ((tmpvar_68 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_73.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_68 + _glesMultiTexCoord0.w));
      tmpvar_73.w = ((tmpvar_68 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_74;
      tmpvar_74 = abs(((
        fract((tmpvar_73 + 0.5))
       * 2.0) - 1.0));
      vOscillations_69 = (((
        (tmpvar_74 * tmpvar_74)
       * 
        (3.0 - (2.0 * tmpvar_74))
      ) - 0.5) * 2.0);
      highp float tmpvar_75;
      tmpvar_75 = (vOscillations_69.y * vOscillations_69.z);
      fTarget_72 = 1.0;
      fAmount_71 = tmpvar_75;
      if ((tmpvar_75 < 0.0)) {
        fTarget_72 = -1.0;
        fAmount_71 = -(tmpvar_75);
      };
      fOscillation_70 = (((
        (mix (mix (tmpvar_75, fTarget_72, fAmount_71), fTarget_72, fAmount_71) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_69.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_69.w * _ST_WindBranchWhip.x)));
      vPos_65 = (tmpvar_63 + ((tmpvar_67 * fOscillation_70) * _ST_WindBranch.y));
      highp vec4 tmpvar_76;
      tmpvar_76.zw = vec2(0.0, 0.0);
      tmpvar_76.x = ((tmpvar_68 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_76.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_77;
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      tmpvar_77 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      fAdherenceScale_66 = (1.0 - ((
        ((tmpvar_77.x * tmpvar_77.y) * tmpvar_77.x)
       * tmpvar_77.y) * _ST_WindTurbulences.x));
      fAdherenceScale_66 = (fAdherenceScale_66 + ((vOscillations_69.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_65 = (vPos_65 + ((
        ((vRotatedBranchAnchor_13 - vPos_65) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_66) * _glesMultiTexCoord0.z));
      vPos_64 = vPos_65;
    } else {
      highp vec3 vPos_79;
      vPos_79 = vPos_64;
      highp vec3 tmpvar_80;
      tmpvar_80 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_81;
      tmpvar_81 = (_ST_WindBranch.x + (cse_8 + cse_9));
      highp vec4 vOscillations_82;
      highp float fAmount_83;
      highp float fTarget_84;
      highp vec4 tmpvar_85;
      tmpvar_85.w = 0.0;
      tmpvar_85.x = (tmpvar_81 + _glesMultiTexCoord0.w);
      tmpvar_85.y = ((tmpvar_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_85.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_86;
      tmpvar_86 = abs(((
        fract((tmpvar_85 + 0.5))
       * 2.0) - 1.0));
      vOscillations_82 = (((
        (tmpvar_86 * tmpvar_86)
       * 
        (3.0 - (2.0 * tmpvar_86))
      ) - 0.5) * 2.0);
      highp float tmpvar_87;
      tmpvar_87 = (vOscillations_82.y * vOscillations_82.z);
      fTarget_84 = 1.0;
      fAmount_83 = tmpvar_87;
      if ((tmpvar_87 < 0.0)) {
        fTarget_84 = -1.0;
        fAmount_83 = -(tmpvar_87);
      };
      vPos_79 = (vPos_64 + ((tmpvar_80 * 
        (((mix (
          mix (tmpvar_87, fTarget_84, fAmount_83)
        , fTarget_84, fAmount_83) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_82.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_64 = vPos_79;
    };
    FinalPosition_15 = vPos_64;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_88;
    vPos_88 = FinalPosition_15;
    highp float fAdjust_89;
    highp float fLength_90;
    fLength_90 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_91;
    tmpvar_91 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_89 = tmpvar_91;
    if ((tmpvar_91 != 0.0)) {
      fAdjust_89 = pow (tmpvar_91, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_92;
    tmpvar_92.zw = vec2(0.0, 0.0);
    tmpvar_92.x = (cse_8 + _ST_WindGlobal.x);
    tmpvar_92.y = (cse_9 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_93;
    highp vec4 tmpvar_94;
    tmpvar_94 = abs(((
      fract((tmpvar_92 + 0.5))
     * 2.0) - 1.0));
    tmpvar_93 = (((
      (tmpvar_94 * tmpvar_94)
     * 
      (3.0 - (2.0 * tmpvar_94))
    ) - 0.5) * 2.0);
    vPos_88.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_93.x + (tmpvar_93.y * tmpvar_93.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_89)));
    vPos_88 = (normalize(vPos_88) * fLength_90);
    FinalPosition_15 = vPos_88;
  };
  tmpvar_11.xyz = FinalPosition_15;
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_95;
  highp vec3 viewN_96;
  highp vec3 viewpos_97;
  viewpos_97 = (glstate_matrix_modelview0 * tmpvar_11).xyz;
  highp mat3 tmpvar_98;
  tmpvar_98[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_98[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_98[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_96 = normalize((tmpvar_98 * tmpvar_12));
  lowp vec3 tmpvar_99;
  tmpvar_99 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_95 = tmpvar_99;
  highp vec3 tmpvar_100;
  tmpvar_100 = (unity_LightPosition[0].xyz - (viewpos_97 * unity_LightPosition[0].w));
  highp float tmpvar_101;
  tmpvar_101 = dot (tmpvar_100, tmpvar_100);
  highp vec3 tmpvar_102;
  tmpvar_102 = (tmpvar_100 * inversesqrt(tmpvar_101));
  lightColor_95 = (lightColor_95 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_96, tmpvar_102))
   * 
    ((1.0/((1.0 + (tmpvar_101 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_102, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_103;
  tmpvar_103 = (unity_LightPosition[1].xyz - (viewpos_97 * unity_LightPosition[1].w));
  highp float tmpvar_104;
  tmpvar_104 = dot (tmpvar_103, tmpvar_103);
  highp vec3 tmpvar_105;
  tmpvar_105 = (tmpvar_103 * inversesqrt(tmpvar_104));
  lightColor_95 = (lightColor_95 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_96, tmpvar_105))
   * 
    ((1.0/((1.0 + (tmpvar_104 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_105, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_106;
  tmpvar_106 = (unity_LightPosition[2].xyz - (viewpos_97 * unity_LightPosition[2].w));
  highp float tmpvar_107;
  tmpvar_107 = dot (tmpvar_106, tmpvar_106);
  highp vec3 tmpvar_108;
  tmpvar_108 = (tmpvar_106 * inversesqrt(tmpvar_107));
  lightColor_95 = (lightColor_95 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_96, tmpvar_108))
   * 
    ((1.0/((1.0 + (tmpvar_107 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_108, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_109;
  tmpvar_109 = (unity_LightPosition[3].xyz - (viewpos_97 * unity_LightPosition[3].w));
  highp float tmpvar_110;
  tmpvar_110 = dot (tmpvar_109, tmpvar_109);
  highp vec3 tmpvar_111;
  tmpvar_111 = (tmpvar_109 * inversesqrt(tmpvar_110));
  lightColor_95 = (lightColor_95 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_96, tmpvar_111))
   * 
    ((1.0/((1.0 + (tmpvar_110 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_111, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_112;
  tmpvar_112 = (tmpvar_4.xyz * lightColor_95);
  tmpvar_3.xyz = tmpvar_112;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_4;
  mediump float tmpvar_5;
  tmpvar_5 = (diffuseColor_3.w * _Color.w);
  tmpvar_2 = tmpvar_5;
  lowp float x_6;
  x_6 = (tmpvar_2 - _Cutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (diffuseColor_3.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  diffuseColor_3.xyz = clamp ((tmpvar_7 * (
    ((max (diffuseColor_3.x, max (diffuseColor_3.y, diffuseColor_3.z)) / max (tmpvar_7.x, max (tmpvar_7.y, tmpvar_7.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_8;
  tmpvar_8 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9.xyz = tmpvar_1;
  tmpvar_9.w = tmpvar_2;
  gl_FragData[0] = tmpvar_9;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out lowp vec4 xlv_Input_color;
out mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec2 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord0.xy;
  tmpvar_5.xy = tmpvar_6;
  tmpvar_4.w = _Color.w;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * _glesColor.x);
  tmpvar_4.xyz = tmpvar_7;
  highp float cse_8;
  cse_8 = _Object2World[3].x;
  highp float cse_9;
  cse_9 = _Object2World[3].y;
  highp float tmpvar_10;
  tmpvar_10 = clamp (((
    fract(((cse_8 + cse_9) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_5.z = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_15 = tmpvar_19;
  if (((tmpvar_16 > 1.0) && (tmpvar_16 < 5.0))) {
    highp float tmpvar_20;
    tmpvar_20 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_21;
    isBestWind_21 = (tmpvar_16 == 4.0);
    bool bLeaf2_22;
    bLeaf2_22 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    highp vec3 vDirection_24;
    vDirection_24 = tmpvar_2;
    highp float tmpvar_25;
    if (bLeaf2_22) {
      tmpvar_25 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_26;
    if (bLeaf2_22) {
      tmpvar_26 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_27;
    highp vec4 tmpvar_28;
    tmpvar_28.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_28.x = (tmpvar_25 + tmpvar_20);
    highp vec4 tmpvar_29;
    tmpvar_29 = abs(((
      fract((tmpvar_28 + 0.5))
     * 2.0) - 1.0));
    vPos_27 = (tmpvar_19 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_26 * (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_24 = tmpvar_2;
    vPos_23 = vPos_27;
    if (isBestWind_21) {
      highp vec3 tmpvar_30;
      tmpvar_30 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_31;
      if (bLeaf2_22) {
        tmpvar_31 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_32;
      if (bLeaf2_22) {
        tmpvar_32 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_33;
      if (bLeaf2_22) {
        tmpvar_33 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_34;
      if (bLeaf2_22) {
        tmpvar_34 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_35;
      if (bLeaf2_22) {
        tmpvar_35 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_35 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_36;
      if (bLeaf2_22) {
        tmpvar_36 = bool(1);
      } else {
        tmpvar_36 = bool(1);
      };
      highp float fTwitch_37;
      highp vec3 vAxis_38;
      highp vec3 tmpvar_39;
      tmpvar_39 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_40;
      tmpvar_40 = ((tmpvar_39.x + tmpvar_39.y) + tmpvar_39.z);
      highp vec4 tmpvar_41;
      tmpvar_41.x = (tmpvar_31 + tmpvar_40);
      tmpvar_41.y = ((tmpvar_31 * 0.75) - tmpvar_40);
      tmpvar_41.z = ((tmpvar_31 * 0.01) + tmpvar_40);
      tmpvar_41.w = (tmpvar_31 + tmpvar_40);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = sqrt(dot (vPos_27, vPos_27));
      highp float fAngle_45;
      fAngle_45 = ((_glesMultiTexCoord2.x * tmpvar_33) * (tmpvar_42.x + (tmpvar_42.y * tmpvar_42.y)));
      highp vec2 vSinCos_46;
      vSinCos_46.x = sin(fAngle_45);
      vSinCos_46.y = cos(fAngle_45);
      highp float tmpvar_47;
      tmpvar_47 = (1.0 - vSinCos_46.y);
      highp mat3 tmpvar_48;
      tmpvar_48[0].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.x) + vSinCos_46.y);
      tmpvar_48[0].y = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.y) + (vSinCos_46.x * tmpvar_30.z));
      tmpvar_48[0].z = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.z) - (vSinCos_46.x * tmpvar_30.y));
      tmpvar_48[1].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.y) - (vSinCos_46.x * tmpvar_30.z));
      tmpvar_48[1].y = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.y) + vSinCos_46.y);
      tmpvar_48[1].z = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.z) + (vSinCos_46.x * tmpvar_30.x));
      tmpvar_48[2].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.z) + (vSinCos_46.x * tmpvar_30.y));
      tmpvar_48[2].y = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.z) - (vSinCos_46.x * tmpvar_30.x));
      tmpvar_48[2].z = (((tmpvar_47 * tmpvar_30.z) * tmpvar_30.z) + vSinCos_46.y);
      highp vec3 tmpvar_49;
      tmpvar_49 = ((tmpvar_30.yzx * vRotatedWindVector_14.zxy) - (tmpvar_30.zxy * vRotatedWindVector_14.yzx));
      vAxis_38.xz = tmpvar_49.xz;
      highp float tmpvar_50;
      tmpvar_50 = clamp (dot (vRotatedWindVector_14, tmpvar_30), -1.0, 1.0);
      vAxis_38.y = (tmpvar_49.y + tmpvar_50);
      highp vec3 tmpvar_51;
      tmpvar_51 = normalize(vAxis_38);
      vAxis_38 = tmpvar_51;
      highp float tmpvar_52;
      tmpvar_52 = (1.570796 - (sign(tmpvar_50) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_50))) * (1.570796 + (abs(tmpvar_50) * (-0.2146018 + 
          (abs(tmpvar_50) * (0.08656672 + (abs(tmpvar_50) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_53;
      tmpvar_53 = (tmpvar_42.y - (tmpvar_42.x * tmpvar_42.x));
      fTwitch_37 = 0.0;
      if (tmpvar_36) {
        highp float fTime_54;
        fTime_54 = (tmpvar_35.z + tmpvar_40);
        highp vec4 tmpvar_55;
        tmpvar_55.zw = vec2(0.0, 0.0);
        tmpvar_55.x = fTime_54;
        tmpvar_55.y = (0.87 * fTime_54);
        highp vec4 tmpvar_56;
        highp vec4 tmpvar_57;
        tmpvar_57 = abs(((
          fract((tmpvar_55 + 0.5))
         * 2.0) - 1.0));
        tmpvar_56 = (((
          (tmpvar_57 * tmpvar_57)
         * 
          (3.0 - (2.0 * tmpvar_57))
        ) - 0.5) * 2.0);
        fTwitch_37 = (tmpvar_35.x * pow (clamp (
          ((((tmpvar_56.x * tmpvar_56.y) * tmpvar_56.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_35.y));
      };
      highp float fAngle_58;
      fAngle_58 = (_glesMultiTexCoord2.x * ((
        (tmpvar_52 * tmpvar_34)
       + 
        (tmpvar_53 * tmpvar_32)
      ) + fTwitch_37));
      highp vec2 vSinCos_59;
      vSinCos_59.x = sin(fAngle_58);
      vSinCos_59.y = cos(fAngle_58);
      highp float tmpvar_60;
      tmpvar_60 = (1.0 - vSinCos_59.y);
      highp mat3 tmpvar_61;
      tmpvar_61[0].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.x) + vSinCos_59.y);
      tmpvar_61[0].y = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.y) + (vSinCos_59.x * tmpvar_51.z));
      tmpvar_61[0].z = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.z) - (vSinCos_59.x * tmpvar_51.y));
      tmpvar_61[1].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.y) - (vSinCos_59.x * tmpvar_51.z));
      tmpvar_61[1].y = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.y) + vSinCos_59.y);
      tmpvar_61[1].z = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.z) + (vSinCos_59.x * tmpvar_51.x));
      tmpvar_61[2].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.z) + (vSinCos_59.x * tmpvar_51.y));
      tmpvar_61[2].y = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.z) - (vSinCos_59.x * tmpvar_51.x));
      tmpvar_61[2].z = (((tmpvar_60 * tmpvar_51.z) * tmpvar_51.z) + vSinCos_59.y);
      highp mat3 tmpvar_62;
      tmpvar_62 = (tmpvar_48 * tmpvar_61);
      vDirection_24 = (tmpvar_62 * _glesNormal);
      vPos_23 = (normalize((tmpvar_62 * vPos_27)) * tmpvar_44);
    };
    tmpvar_12 = vDirection_24;
    FinalPosition_15 = vPos_23;
  };
  highp vec3 tmpvar_63;
  tmpvar_63 = (FinalPosition_15 + _glesMultiTexCoord1.xyz);
  FinalPosition_15 = tmpvar_63;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_64;
    vPos_64 = tmpvar_63;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_65;
      vPos_65 = tmpvar_63;
      highp float fAdherenceScale_66;
      highp vec3 tmpvar_67;
      tmpvar_67 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_68;
      tmpvar_68 = (_ST_WindBranch.x + (cse_8 + cse_9));
      highp vec4 vOscillations_69;
      highp float fOscillation_70;
      fOscillation_70 = 1.0;
      highp float fAmount_71;
      highp float fTarget_72;
      highp vec4 tmpvar_73;
      tmpvar_73.x = (tmpvar_68 + _glesMultiTexCoord0.w);
      tmpvar_73.y = ((tmpvar_68 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_73.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_68 + _glesMultiTexCoord0.w));
      tmpvar_73.w = ((tmpvar_68 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_74;
      tmpvar_74 = abs(((
        fract((tmpvar_73 + 0.5))
       * 2.0) - 1.0));
      vOscillations_69 = (((
        (tmpvar_74 * tmpvar_74)
       * 
        (3.0 - (2.0 * tmpvar_74))
      ) - 0.5) * 2.0);
      highp float tmpvar_75;
      tmpvar_75 = (vOscillations_69.y * vOscillations_69.z);
      fTarget_72 = 1.0;
      fAmount_71 = tmpvar_75;
      if ((tmpvar_75 < 0.0)) {
        fTarget_72 = -1.0;
        fAmount_71 = -(tmpvar_75);
      };
      fOscillation_70 = (((
        (mix (mix (tmpvar_75, fTarget_72, fAmount_71), fTarget_72, fAmount_71) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_69.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_69.w * _ST_WindBranchWhip.x)));
      vPos_65 = (tmpvar_63 + ((tmpvar_67 * fOscillation_70) * _ST_WindBranch.y));
      highp vec4 tmpvar_76;
      tmpvar_76.zw = vec2(0.0, 0.0);
      tmpvar_76.x = ((tmpvar_68 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_76.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_77;
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      tmpvar_77 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      fAdherenceScale_66 = (1.0 - ((
        ((tmpvar_77.x * tmpvar_77.y) * tmpvar_77.x)
       * tmpvar_77.y) * _ST_WindTurbulences.x));
      fAdherenceScale_66 = (fAdherenceScale_66 + ((vOscillations_69.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_65 = (vPos_65 + ((
        ((vRotatedBranchAnchor_13 - vPos_65) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_66) * _glesMultiTexCoord0.z));
      vPos_64 = vPos_65;
    } else {
      highp vec3 vPos_79;
      vPos_79 = vPos_64;
      highp vec3 tmpvar_80;
      tmpvar_80 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_81;
      tmpvar_81 = (_ST_WindBranch.x + (cse_8 + cse_9));
      highp vec4 vOscillations_82;
      highp float fAmount_83;
      highp float fTarget_84;
      highp vec4 tmpvar_85;
      tmpvar_85.w = 0.0;
      tmpvar_85.x = (tmpvar_81 + _glesMultiTexCoord0.w);
      tmpvar_85.y = ((tmpvar_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_85.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_86;
      tmpvar_86 = abs(((
        fract((tmpvar_85 + 0.5))
       * 2.0) - 1.0));
      vOscillations_82 = (((
        (tmpvar_86 * tmpvar_86)
       * 
        (3.0 - (2.0 * tmpvar_86))
      ) - 0.5) * 2.0);
      highp float tmpvar_87;
      tmpvar_87 = (vOscillations_82.y * vOscillations_82.z);
      fTarget_84 = 1.0;
      fAmount_83 = tmpvar_87;
      if ((tmpvar_87 < 0.0)) {
        fTarget_84 = -1.0;
        fAmount_83 = -(tmpvar_87);
      };
      vPos_79 = (vPos_64 + ((tmpvar_80 * 
        (((mix (
          mix (tmpvar_87, fTarget_84, fAmount_83)
        , fTarget_84, fAmount_83) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_82.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_64 = vPos_79;
    };
    FinalPosition_15 = vPos_64;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_88;
    vPos_88 = FinalPosition_15;
    highp float fAdjust_89;
    highp float fLength_90;
    fLength_90 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_91;
    tmpvar_91 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_89 = tmpvar_91;
    if ((tmpvar_91 != 0.0)) {
      fAdjust_89 = pow (tmpvar_91, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_92;
    tmpvar_92.zw = vec2(0.0, 0.0);
    tmpvar_92.x = (cse_8 + _ST_WindGlobal.x);
    tmpvar_92.y = (cse_9 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_93;
    highp vec4 tmpvar_94;
    tmpvar_94 = abs(((
      fract((tmpvar_92 + 0.5))
     * 2.0) - 1.0));
    tmpvar_93 = (((
      (tmpvar_94 * tmpvar_94)
     * 
      (3.0 - (2.0 * tmpvar_94))
    ) - 0.5) * 2.0);
    vPos_88.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_93.x + (tmpvar_93.y * tmpvar_93.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_89)));
    vPos_88 = (normalize(vPos_88) * fLength_90);
    FinalPosition_15 = vPos_88;
  };
  tmpvar_11.xyz = FinalPosition_15;
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_95;
  highp vec3 viewN_96;
  highp vec3 viewpos_97;
  viewpos_97 = (glstate_matrix_modelview0 * tmpvar_11).xyz;
  highp mat3 tmpvar_98;
  tmpvar_98[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_98[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_98[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_96 = normalize((tmpvar_98 * tmpvar_12));
  lowp vec3 tmpvar_99;
  tmpvar_99 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_95 = tmpvar_99;
  highp vec3 tmpvar_100;
  tmpvar_100 = (unity_LightPosition[0].xyz - (viewpos_97 * unity_LightPosition[0].w));
  highp float tmpvar_101;
  tmpvar_101 = dot (tmpvar_100, tmpvar_100);
  highp vec3 tmpvar_102;
  tmpvar_102 = (tmpvar_100 * inversesqrt(tmpvar_101));
  lightColor_95 = (lightColor_95 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_96, tmpvar_102))
   * 
    ((1.0/((1.0 + (tmpvar_101 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_102, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_103;
  tmpvar_103 = (unity_LightPosition[1].xyz - (viewpos_97 * unity_LightPosition[1].w));
  highp float tmpvar_104;
  tmpvar_104 = dot (tmpvar_103, tmpvar_103);
  highp vec3 tmpvar_105;
  tmpvar_105 = (tmpvar_103 * inversesqrt(tmpvar_104));
  lightColor_95 = (lightColor_95 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_96, tmpvar_105))
   * 
    ((1.0/((1.0 + (tmpvar_104 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_105, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_106;
  tmpvar_106 = (unity_LightPosition[2].xyz - (viewpos_97 * unity_LightPosition[2].w));
  highp float tmpvar_107;
  tmpvar_107 = dot (tmpvar_106, tmpvar_106);
  highp vec3 tmpvar_108;
  tmpvar_108 = (tmpvar_106 * inversesqrt(tmpvar_107));
  lightColor_95 = (lightColor_95 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_96, tmpvar_108))
   * 
    ((1.0/((1.0 + (tmpvar_107 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_108, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_109;
  tmpvar_109 = (unity_LightPosition[3].xyz - (viewpos_97 * unity_LightPosition[3].w));
  highp float tmpvar_110;
  tmpvar_110 = dot (tmpvar_109, tmpvar_109);
  highp vec3 tmpvar_111;
  tmpvar_111 = (tmpvar_109 * inversesqrt(tmpvar_110));
  lightColor_95 = (lightColor_95 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_96, tmpvar_111))
   * 
    ((1.0/((1.0 + (tmpvar_110 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_111, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_112;
  tmpvar_112 = (tmpvar_4.xyz * lightColor_95);
  tmpvar_3.xyz = tmpvar_112;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
in lowp vec4 xlv_Input_color;
in mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_4;
  mediump float tmpvar_5;
  tmpvar_5 = (diffuseColor_3.w * _Color.w);
  tmpvar_2 = tmpvar_5;
  lowp float x_6;
  x_6 = (tmpvar_2 - _Cutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (diffuseColor_3.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  diffuseColor_3.xyz = clamp ((tmpvar_7 * (
    ((max (diffuseColor_3.x, max (diffuseColor_3.y, diffuseColor_3.z)) / max (tmpvar_7.x, max (tmpvar_7.y, tmpvar_7.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_8;
  tmpvar_8 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9.xyz = tmpvar_1;
  tmpvar_9.w = tmpvar_2;
  _glesFragData[0] = tmpvar_9;
}



#endif"
}
SubProgram "gles " {
Keywords { "GEOM_TYPE_FACING_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec2 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord0.xy;
  tmpvar_5.xy = tmpvar_6;
  tmpvar_4.w = _Color.w;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * _glesColor.x);
  tmpvar_4.xyz = tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_8 = tmpvar_1;
  tmpvar_9 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_10;
  highp vec3 vRotatedWindVector_11;
  highp vec3 FinalPosition_12;
  FinalPosition_12 = tmpvar_1.xyz;
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_11 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_10 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_18;
  tmpvar_18[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_18[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_18[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_19;
  tmpvar_19 = (normalize((tmpvar_17 * tmpvar_18)) * sqrt(dot (tmpvar_17, tmpvar_17)));
  FinalPosition_12 = tmpvar_19;
  if (((tmpvar_14 > 1.0) && (tmpvar_14 < 5.0))) {
    highp float tmpvar_20;
    tmpvar_20 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_21;
    isBestWind_21 = (tmpvar_14 == 4.0);
    bool bLeaf2_22;
    bLeaf2_22 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    highp vec3 vDirection_24;
    vDirection_24 = tmpvar_2;
    highp float tmpvar_25;
    if (bLeaf2_22) {
      tmpvar_25 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_26;
    if (bLeaf2_22) {
      tmpvar_26 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_27;
    highp vec4 tmpvar_28;
    tmpvar_28.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_28.x = (tmpvar_25 + tmpvar_20);
    highp vec4 tmpvar_29;
    tmpvar_29 = abs(((
      fract((tmpvar_28 + 0.5))
     * 2.0) - 1.0));
    vPos_27 = (tmpvar_19 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_26 * (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_24 = tmpvar_2;
    vPos_23 = vPos_27;
    if (isBestWind_21) {
      highp vec3 tmpvar_30;
      tmpvar_30 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_31;
      if (bLeaf2_22) {
        tmpvar_31 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_32;
      if (bLeaf2_22) {
        tmpvar_32 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_33;
      if (bLeaf2_22) {
        tmpvar_33 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_34;
      if (bLeaf2_22) {
        tmpvar_34 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_35;
      if (bLeaf2_22) {
        tmpvar_35 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_35 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_36;
      if (bLeaf2_22) {
        tmpvar_36 = bool(1);
      } else {
        tmpvar_36 = bool(1);
      };
      highp float fTwitch_37;
      highp vec3 vAxis_38;
      highp vec3 tmpvar_39;
      tmpvar_39 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_40;
      tmpvar_40 = ((tmpvar_39.x + tmpvar_39.y) + tmpvar_39.z);
      highp vec4 tmpvar_41;
      tmpvar_41.x = (tmpvar_31 + tmpvar_40);
      tmpvar_41.y = ((tmpvar_31 * 0.75) - tmpvar_40);
      tmpvar_41.z = ((tmpvar_31 * 0.01) + tmpvar_40);
      tmpvar_41.w = (tmpvar_31 + tmpvar_40);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = sqrt(dot (vPos_27, vPos_27));
      highp float fAngle_45;
      fAngle_45 = ((_glesMultiTexCoord2.x * tmpvar_33) * (tmpvar_42.x + (tmpvar_42.y * tmpvar_42.y)));
      highp vec2 vSinCos_46;
      vSinCos_46.x = sin(fAngle_45);
      vSinCos_46.y = cos(fAngle_45);
      highp float tmpvar_47;
      tmpvar_47 = (1.0 - vSinCos_46.y);
      highp mat3 tmpvar_48;
      tmpvar_48[0].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.x) + vSinCos_46.y);
      tmpvar_48[0].y = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.y) + (vSinCos_46.x * tmpvar_30.z));
      tmpvar_48[0].z = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.z) - (vSinCos_46.x * tmpvar_30.y));
      tmpvar_48[1].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.y) - (vSinCos_46.x * tmpvar_30.z));
      tmpvar_48[1].y = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.y) + vSinCos_46.y);
      tmpvar_48[1].z = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.z) + (vSinCos_46.x * tmpvar_30.x));
      tmpvar_48[2].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.z) + (vSinCos_46.x * tmpvar_30.y));
      tmpvar_48[2].y = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.z) - (vSinCos_46.x * tmpvar_30.x));
      tmpvar_48[2].z = (((tmpvar_47 * tmpvar_30.z) * tmpvar_30.z) + vSinCos_46.y);
      highp vec3 tmpvar_49;
      tmpvar_49 = ((tmpvar_30.yzx * vRotatedWindVector_11.zxy) - (tmpvar_30.zxy * vRotatedWindVector_11.yzx));
      vAxis_38.xz = tmpvar_49.xz;
      highp float tmpvar_50;
      tmpvar_50 = clamp (dot (vRotatedWindVector_11, tmpvar_30), -1.0, 1.0);
      vAxis_38.y = (tmpvar_49.y + tmpvar_50);
      highp vec3 tmpvar_51;
      tmpvar_51 = normalize(vAxis_38);
      vAxis_38 = tmpvar_51;
      highp float tmpvar_52;
      tmpvar_52 = (1.570796 - (sign(tmpvar_50) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_50))) * (1.570796 + (abs(tmpvar_50) * (-0.2146018 + 
          (abs(tmpvar_50) * (0.08656672 + (abs(tmpvar_50) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_53;
      tmpvar_53 = (tmpvar_42.y - (tmpvar_42.x * tmpvar_42.x));
      fTwitch_37 = 0.0;
      if (tmpvar_36) {
        highp float fTime_54;
        fTime_54 = (tmpvar_35.z + tmpvar_40);
        highp vec4 tmpvar_55;
        tmpvar_55.zw = vec2(0.0, 0.0);
        tmpvar_55.x = fTime_54;
        tmpvar_55.y = (0.87 * fTime_54);
        highp vec4 tmpvar_56;
        highp vec4 tmpvar_57;
        tmpvar_57 = abs(((
          fract((tmpvar_55 + 0.5))
         * 2.0) - 1.0));
        tmpvar_56 = (((
          (tmpvar_57 * tmpvar_57)
         * 
          (3.0 - (2.0 * tmpvar_57))
        ) - 0.5) * 2.0);
        fTwitch_37 = (tmpvar_35.x * pow (clamp (
          ((((tmpvar_56.x * tmpvar_56.y) * tmpvar_56.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_35.y));
      };
      highp float fAngle_58;
      fAngle_58 = (_glesMultiTexCoord2.x * ((
        (tmpvar_52 * tmpvar_34)
       + 
        (tmpvar_53 * tmpvar_32)
      ) + fTwitch_37));
      highp vec2 vSinCos_59;
      vSinCos_59.x = sin(fAngle_58);
      vSinCos_59.y = cos(fAngle_58);
      highp float tmpvar_60;
      tmpvar_60 = (1.0 - vSinCos_59.y);
      highp mat3 tmpvar_61;
      tmpvar_61[0].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.x) + vSinCos_59.y);
      tmpvar_61[0].y = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.y) + (vSinCos_59.x * tmpvar_51.z));
      tmpvar_61[0].z = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.z) - (vSinCos_59.x * tmpvar_51.y));
      tmpvar_61[1].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.y) - (vSinCos_59.x * tmpvar_51.z));
      tmpvar_61[1].y = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.y) + vSinCos_59.y);
      tmpvar_61[1].z = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.z) + (vSinCos_59.x * tmpvar_51.x));
      tmpvar_61[2].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.z) + (vSinCos_59.x * tmpvar_51.y));
      tmpvar_61[2].y = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.z) - (vSinCos_59.x * tmpvar_51.x));
      tmpvar_61[2].z = (((tmpvar_60 * tmpvar_51.z) * tmpvar_51.z) + vSinCos_59.y);
      highp mat3 tmpvar_62;
      tmpvar_62 = (tmpvar_48 * tmpvar_61);
      vDirection_24 = (tmpvar_62 * _glesNormal);
      vPos_23 = (normalize((tmpvar_62 * vPos_27)) * tmpvar_44);
    };
    tmpvar_9 = vDirection_24;
    FinalPosition_12 = vPos_23;
  };
  highp vec3 tmpvar_63;
  tmpvar_63 = (FinalPosition_12 + _glesMultiTexCoord1.xyz);
  FinalPosition_12 = tmpvar_63;
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_64;
    vPos_64 = tmpvar_63;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_65;
      vPos_65 = tmpvar_63;
      highp float fAdherenceScale_66;
      highp vec3 tmpvar_67;
      tmpvar_67 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_68;
      tmpvar_68 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_69;
      highp float fOscillation_70;
      fOscillation_70 = 1.0;
      highp float fAmount_71;
      highp float fTarget_72;
      highp vec4 tmpvar_73;
      tmpvar_73.x = (tmpvar_68 + _glesMultiTexCoord0.w);
      tmpvar_73.y = ((tmpvar_68 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_73.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_68 + _glesMultiTexCoord0.w));
      tmpvar_73.w = ((tmpvar_68 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_74;
      tmpvar_74 = abs(((
        fract((tmpvar_73 + 0.5))
       * 2.0) - 1.0));
      vOscillations_69 = (((
        (tmpvar_74 * tmpvar_74)
       * 
        (3.0 - (2.0 * tmpvar_74))
      ) - 0.5) * 2.0);
      highp float tmpvar_75;
      tmpvar_75 = (vOscillations_69.y * vOscillations_69.z);
      fTarget_72 = 1.0;
      fAmount_71 = tmpvar_75;
      if ((tmpvar_75 < 0.0)) {
        fTarget_72 = -1.0;
        fAmount_71 = -(tmpvar_75);
      };
      fOscillation_70 = (((
        (mix (mix (tmpvar_75, fTarget_72, fAmount_71), fTarget_72, fAmount_71) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_69.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_69.w * _ST_WindBranchWhip.x)));
      vPos_65 = (tmpvar_63 + ((tmpvar_67 * fOscillation_70) * _ST_WindBranch.y));
      highp vec4 tmpvar_76;
      tmpvar_76.zw = vec2(0.0, 0.0);
      tmpvar_76.x = ((tmpvar_68 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_76.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_77;
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      tmpvar_77 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      fAdherenceScale_66 = (1.0 - ((
        ((tmpvar_77.x * tmpvar_77.y) * tmpvar_77.x)
       * tmpvar_77.y) * _ST_WindTurbulences.x));
      fAdherenceScale_66 = (fAdherenceScale_66 + ((vOscillations_69.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_65 = (vPos_65 + ((
        ((vRotatedBranchAnchor_10 - vPos_65) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_66) * _glesMultiTexCoord0.z));
      vPos_64 = vPos_65;
    } else {
      highp vec3 vPos_79;
      vPos_79 = vPos_64;
      highp vec3 tmpvar_80;
      tmpvar_80 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_81;
      tmpvar_81 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_82;
      highp float fAmount_83;
      highp float fTarget_84;
      highp vec4 tmpvar_85;
      tmpvar_85.w = 0.0;
      tmpvar_85.x = (tmpvar_81 + _glesMultiTexCoord0.w);
      tmpvar_85.y = ((tmpvar_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_85.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_86;
      tmpvar_86 = abs(((
        fract((tmpvar_85 + 0.5))
       * 2.0) - 1.0));
      vOscillations_82 = (((
        (tmpvar_86 * tmpvar_86)
       * 
        (3.0 - (2.0 * tmpvar_86))
      ) - 0.5) * 2.0);
      highp float tmpvar_87;
      tmpvar_87 = (vOscillations_82.y * vOscillations_82.z);
      fTarget_84 = 1.0;
      fAmount_83 = tmpvar_87;
      if ((tmpvar_87 < 0.0)) {
        fTarget_84 = -1.0;
        fAmount_83 = -(tmpvar_87);
      };
      vPos_79 = (vPos_64 + ((tmpvar_80 * 
        (((mix (
          mix (tmpvar_87, fTarget_84, fAmount_83)
        , fTarget_84, fAmount_83) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_82.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_64 = vPos_79;
    };
    FinalPosition_12 = vPos_64;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_88;
    vPos_88 = FinalPosition_12;
    highp float fAdjust_89;
    highp float fLength_90;
    fLength_90 = sqrt(dot (FinalPosition_12, FinalPosition_12));
    highp float tmpvar_91;
    tmpvar_91 = (max ((FinalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_89 = tmpvar_91;
    if ((tmpvar_91 != 0.0)) {
      fAdjust_89 = pow (tmpvar_91, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_92;
    tmpvar_92.zw = vec2(0.0, 0.0);
    tmpvar_92.x = (tmpvar_13.x + _ST_WindGlobal.x);
    tmpvar_92.y = (tmpvar_13.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_93;
    highp vec4 tmpvar_94;
    tmpvar_94 = abs(((
      fract((tmpvar_92 + 0.5))
     * 2.0) - 1.0));
    tmpvar_93 = (((
      (tmpvar_94 * tmpvar_94)
     * 
      (3.0 - (2.0 * tmpvar_94))
    ) - 0.5) * 2.0);
    vPos_88.xz = (FinalPosition_12.xz + (vRotatedWindVector_11.xz * (
      ((_ST_WindGlobal.y * (tmpvar_93.x + (tmpvar_93.y * tmpvar_93.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_89)));
    vPos_88 = (normalize(vPos_88) * fLength_90);
    FinalPosition_12 = vPos_88;
  };
  tmpvar_8.xyz = FinalPosition_12;
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_95;
  highp vec3 viewN_96;
  highp vec3 viewpos_97;
  viewpos_97 = (glstate_matrix_modelview0 * tmpvar_8).xyz;
  highp mat3 tmpvar_98;
  tmpvar_98[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_98[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_98[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_96 = normalize((tmpvar_98 * tmpvar_9));
  lowp vec3 tmpvar_99;
  tmpvar_99 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_95 = tmpvar_99;
  highp vec3 tmpvar_100;
  tmpvar_100 = (unity_LightPosition[0].xyz - (viewpos_97 * unity_LightPosition[0].w));
  highp float tmpvar_101;
  tmpvar_101 = dot (tmpvar_100, tmpvar_100);
  highp vec3 tmpvar_102;
  tmpvar_102 = (tmpvar_100 * inversesqrt(tmpvar_101));
  lightColor_95 = (lightColor_95 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_96, tmpvar_102))
   * 
    ((1.0/((1.0 + (tmpvar_101 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_102, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_103;
  tmpvar_103 = (unity_LightPosition[1].xyz - (viewpos_97 * unity_LightPosition[1].w));
  highp float tmpvar_104;
  tmpvar_104 = dot (tmpvar_103, tmpvar_103);
  highp vec3 tmpvar_105;
  tmpvar_105 = (tmpvar_103 * inversesqrt(tmpvar_104));
  lightColor_95 = (lightColor_95 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_96, tmpvar_105))
   * 
    ((1.0/((1.0 + (tmpvar_104 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_105, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_106;
  tmpvar_106 = (unity_LightPosition[2].xyz - (viewpos_97 * unity_LightPosition[2].w));
  highp float tmpvar_107;
  tmpvar_107 = dot (tmpvar_106, tmpvar_106);
  highp vec3 tmpvar_108;
  tmpvar_108 = (tmpvar_106 * inversesqrt(tmpvar_107));
  lightColor_95 = (lightColor_95 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_96, tmpvar_108))
   * 
    ((1.0/((1.0 + (tmpvar_107 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_108, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_109;
  tmpvar_109 = (unity_LightPosition[3].xyz - (viewpos_97 * unity_LightPosition[3].w));
  highp float tmpvar_110;
  tmpvar_110 = dot (tmpvar_109, tmpvar_109);
  highp vec3 tmpvar_111;
  tmpvar_111 = (tmpvar_109 * inversesqrt(tmpvar_110));
  lightColor_95 = (lightColor_95 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_96, tmpvar_111))
   * 
    ((1.0/((1.0 + (tmpvar_110 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_111, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_112;
  tmpvar_112 = (tmpvar_4.xyz * lightColor_95);
  tmpvar_3.xyz = tmpvar_112;
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_4;
  mediump float tmpvar_5;
  tmpvar_5 = (diffuseColor_3.w * _Color.w);
  tmpvar_2 = tmpvar_5;
  lowp float x_6;
  x_6 = (tmpvar_2 - _Cutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_7;
  tmpvar_7 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8.xyz = tmpvar_1;
  tmpvar_8.w = tmpvar_2;
  gl_FragData[0] = tmpvar_8;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "GEOM_TYPE_FACING_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out lowp vec4 xlv_Input_color;
out mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec2 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord0.xy;
  tmpvar_5.xy = tmpvar_6;
  tmpvar_4.w = _Color.w;
  