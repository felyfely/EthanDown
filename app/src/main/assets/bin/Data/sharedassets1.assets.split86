
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_40;
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_41;
  tmpvar_5 = _Color;
  highp vec4 v_42;
  v_42.x = _World2Object[0].x;
  v_42.y = _World2Object[1].x;
  v_42.z = _World2Object[2].x;
  v_42.w = _World2Object[3].x;
  highp vec4 v_43;
  v_43.x = _World2Object[0].z;
  v_43.y = _World2Object[1].z;
  v_43.z = _World2Object[2].z;
  v_43.w = _World2Object[3].z;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(((v_42.xyz * tmpvar_16.z) + (v_43.xyz * tmpvar_17.z)));
  worldNormal_4 = tmpvar_44;
  highp mat3 tmpvar_45;
  tmpvar_45[0] = _Object2World[0].xyz;
  tmpvar_45[1] = _Object2World[1].xyz;
  tmpvar_45[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_46;
  tmpvar_46 = normalize((tmpvar_45 * tmpvar_16));
  worldTangent_3 = tmpvar_46;
  lowp vec3 tmpvar_47;
  tmpvar_47 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_48;
  tmpvar_48 = -(tmpvar_47);
  worldBinormal_2 = tmpvar_48;
  lowp vec3 tmpvar_49;
  tmpvar_49.x = worldTangent_3.x;
  tmpvar_49.y = worldBinormal_2.x;
  tmpvar_49.z = worldNormal_4.x;
  lowp vec3 tmpvar_50;
  tmpvar_50.x = worldTangent_3.y;
  tmpvar_50.y = worldBinormal_2.y;
  tmpvar_50.z = worldNormal_4.y;
  lowp vec3 tmpvar_51;
  tmpvar_51.x = worldTangent_3.z;
  tmpvar_51.y = worldBinormal_2.z;
  tmpvar_51.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_49;
  xlv_TEXCOORD1 = tmpvar_50;
  xlv_TEXCOORD2 = tmpvar_51;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec3 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18).xyz;
  lightCoord_5 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = dot (lightCoord_5, lightCoord_5);
  lowp float tmpvar_21;
  tmpvar_21 = (texture2D (_LightTextureB0, vec2(tmpvar_20)).w * textureCube (_LightTexture0, lightCoord_5).w);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_17);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_17);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_17);
  lowp vec3 tmpvar_22;
  tmpvar_22 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_22;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_21);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_25 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_9 * tmpvar_1) * diff_25);
  c_24.xyz = tmpvar_27;
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  mediump vec3 tmpvar_28;
  tmpvar_28 = c_24.xyz;
  c_23.xyz = tmpvar_28;
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out lowp vec3 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out mediump vec4 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_40;
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_41;
  tmpvar_5 = _Color;
  highp vec4 v_42;
  v_42.x = _World2Object[0].x;
  v_42.y = _World2Object[1].x;
  v_42.z = _World2Object[2].x;
  v_42.w = _World2Object[3].x;
  highp vec4 v_43;
  v_43.x = _World2Object[0].z;
  v_43.y = _World2Object[1].z;
  v_43.z = _World2Object[2].z;
  v_43.w = _World2Object[3].z;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(((v_42.xyz * tmpvar_16.z) + (v_43.xyz * tmpvar_17.z)));
  worldNormal_4 = tmpvar_44;
  highp mat3 tmpvar_45;
  tmpvar_45[0] = _Object2World[0].xyz;
  tmpvar_45[1] = _Object2World[1].xyz;
  tmpvar_45[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_46;
  tmpvar_46 = normalize((tmpvar_45 * tmpvar_16));
  worldTangent_3 = tmpvar_46;
  lowp vec3 tmpvar_47;
  tmpvar_47 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_48;
  tmpvar_48 = -(tmpvar_47);
  worldBinormal_2 = tmpvar_48;
  lowp vec3 tmpvar_49;
  tmpvar_49.x = worldTangent_3.x;
  tmpvar_49.y = worldBinormal_2.x;
  tmpvar_49.z = worldNormal_4.x;
  lowp vec3 tmpvar_50;
  tmpvar_50.x = worldTangent_3.y;
  tmpvar_50.y = worldBinormal_2.y;
  tmpvar_50.z = worldNormal_4.y;
  lowp vec3 tmpvar_51;
  tmpvar_51.x = worldTangent_3.z;
  tmpvar_51.y = worldBinormal_2.z;
  tmpvar_51.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_49;
  xlv_TEXCOORD1 = tmpvar_50;
  xlv_TEXCOORD2 = tmpvar_51;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
in lowp vec3 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in mediump vec4 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec3 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18).xyz;
  lightCoord_5 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = dot (lightCoord_5, lightCoord_5);
  lowp float tmpvar_21;
  tmpvar_21 = (texture (_LightTextureB0, vec2(tmpvar_20)).w * texture (_LightTexture0, lightCoord_5).w);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_17);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_17);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_17);
  lowp vec3 tmpvar_22;
  tmpvar_22 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_22;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_21);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_25 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_9 * tmpvar_1) * diff_25);
  c_24.xyz = tmpvar_27;
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  mediump vec3 tmpvar_28;
  tmpvar_28 = c_24.xyz;
  c_23.xyz = tmpvar_28;
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_40;
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_41;
  tmpvar_5 = _Color;
  highp vec4 v_42;
  v_42.x = _World2Object[0].x;
  v_42.y = _World2Object[1].x;
  v_42.z = _World2Object[2].x;
  v_42.w = _World2Object[3].x;
  highp vec4 v_43;
  v_43.x = _World2Object[0].z;
  v_43.y = _World2Object[1].z;
  v_43.z = _World2Object[2].z;
  v_43.w = _World2Object[3].z;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(((v_42.xyz * tmpvar_16.z) + (v_43.xyz * tmpvar_17.z)));
  worldNormal_4 = tmpvar_44;
  highp mat3 tmpvar_45;
  tmpvar_45[0] = _Object2World[0].xyz;
  tmpvar_45[1] = _Object2World[1].xyz;
  tmpvar_45[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_46;
  tmpvar_46 = normalize((tmpvar_45 * tmpvar_16));
  worldTangent_3 = tmpvar_46;
  lowp vec3 tmpvar_47;
  tmpvar_47 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_48;
  tmpvar_48 = -(tmpvar_47);
  worldBinormal_2 = tmpvar_48;
  lowp vec3 tmpvar_49;
  tmpvar_49.x = worldTangent_3.x;
  tmpvar_49.y = worldBinormal_2.x;
  tmpvar_49.z = worldNormal_4.x;
  lowp vec3 tmpvar_50;
  tmpvar_50.x = worldTangent_3.y;
  tmpvar_50.y = worldBinormal_2.y;
  tmpvar_50.z = worldNormal_4.y;
  lowp vec3 tmpvar_51;
  tmpvar_51.x = worldTangent_3.z;
  tmpvar_51.y = worldBinormal_2.z;
  tmpvar_51.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_49;
  xlv_TEXCOORD1 = tmpvar_50;
  xlv_TEXCOORD2 = tmpvar_51;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec2 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD3;
  highp vec2 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18).xy;
  lightCoord_5 = tmpvar_19;
  lowp float tmpvar_20;
  tmpvar_20 = texture2D (_LightTexture0, lightCoord_5).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_17);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_17);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_17);
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_21;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_20);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_24 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tmpvar_9 * tmpvar_1) * diff_24);
  c_23.xyz = tmpvar_26;
  c_23.w = tmpvar_10;
  c_22.w = c_23.w;
  mediump vec3 tmpvar_27;
  tmpvar_27 = c_23.xyz;
  c_22.xyz = tmpvar_27;
  c_4.xyz = c_22.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out lowp vec3 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out mediump vec4 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_40;
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_41;
  tmpvar_5 = _Color;
  highp vec4 v_42;
  v_42.x = _World2Object[0].x;
  v_42.y = _World2Object[1].x;
  v_42.z = _World2Object[2].x;
  v_42.w = _World2Object[3].x;
  highp vec4 v_43;
  v_43.x = _World2Object[0].z;
  v_43.y = _World2Object[1].z;
  v_43.z = _World2Object[2].z;
  v_43.w = _World2Object[3].z;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(((v_42.xyz * tmpvar_16.z) + (v_43.xyz * tmpvar_17.z)));
  worldNormal_4 = tmpvar_44;
  highp mat3 tmpvar_45;
  tmpvar_45[0] = _Object2World[0].xyz;
  tmpvar_45[1] = _Object2World[1].xyz;
  tmpvar_45[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_46;
  tmpvar_46 = normalize((tmpvar_45 * tmpvar_16));
  worldTangent_3 = tmpvar_46;
  lowp vec3 tmpvar_47;
  tmpvar_47 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_48;
  tmpvar_48 = -(tmpvar_47);
  worldBinormal_2 = tmpvar_48;
  lowp vec3 tmpvar_49;
  tmpvar_49.x = worldTangent_3.x;
  tmpvar_49.y = worldBinormal_2.x;
  tmpvar_49.z = worldNormal_4.x;
  lowp vec3 tmpvar_50;
  tmpvar_50.x = worldTangent_3.y;
  tmpvar_50.y = worldBinormal_2.y;
  tmpvar_50.z = worldNormal_4.y;
  lowp vec3 tmpvar_51;
  tmpvar_51.x = worldTangent_3.z;
  tmpvar_51.y = worldBinormal_2.z;
  tmpvar_51.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_49;
  xlv_TEXCOORD1 = tmpvar_50;
  xlv_TEXCOORD2 = tmpvar_51;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
in lowp vec3 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in mediump vec4 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec2 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD3;
  highp vec2 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18).xy;
  lightCoord_5 = tmpvar_19;
  lowp float tmpvar_20;
  tmpvar_20 = texture (_LightTexture0, lightCoord_5).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_17);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_17);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_17);
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_21;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_20);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_24 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tmpvar_9 * tmpvar_1) * diff_24);
  c_23.xyz = tmpvar_26;
  c_23.w = tmpvar_10;
  c_22.w = c_23.w;
  mediump vec3 tmpvar_27;
  tmpvar_27 = c_23.xyz;
  c_22.xyz = tmpvar_27;
  c_4.xyz = c_22.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_28;
  };
  highp vec4 tmpvar_29;
  tmpvar_29 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (tmpvar_29 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = tmpvar_29.zw;
  highp vec3 tmpvar_33;
  tmpvar_33 = o_30.xyw;
  tmpvar_7 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_34;
  tmpvar_4 = _Color;
  highp vec4 v_35;
  v_35.x = _World2Object[0].x;
  v_35.y = _World2Object[1].x;
  v_35.z = _World2Object[2].x;
  v_35.w = _World2Object[3].x;
  highp vec4 v_36;
  v_36.x = _World2Object[0].y;
  v_36.y = _World2Object[1].y;
  v_36.z = _World2Object[2].y;
  v_36.w = _World2Object[3].y;
  highp vec4 v_37;
  v_37.x = _World2Object[0].z;
  v_37.y = _World2Object[1].z;
  v_37.z = _World2Object[2].z;
  v_37.w = _World2Object[3].z;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize(((
    (v_35.xyz * _BillboardNormal.x)
   + 
    (v_36.xyz * _BillboardNormal.y)
  ) + (v_37.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_38;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_22;
  tmpvar_22 = (_LightMatrix0 * tmpvar_21).xyz;
  lightCoord_4 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_24;
  tmpvar_24 = texture2D (_LightTexture0, vec2(tmpvar_23)).w;
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_25;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_24);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_28 = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tmpvar_9 * tmpvar_1) * diff_28);
  c_27.xyz = tmpvar_30;
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  mediump vec3 tmpvar_31;
  tmpvar_31 = c_27.xyz;
  c_26.xyz = tmpvar_31;
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_28;
  };
  highp vec4 tmpvar_29;
  tmpvar_29 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (tmpvar_29 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = tmpvar_29.zw;
  highp vec3 tmpvar_33;
  tmpvar_33 = o_30.xyw;
  tmpvar_7 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_34;
  tmpvar_4 = _Color;
  highp vec4 v_35;
  v_35.x = _World2Object[0].x;
  v_35.y = _World2Object[1].x;
  v_35.z = _World2Object[2].x;
  v_35.w = _World2Object[3].x;
  highp vec4 v_36;
  v_36.x = _World2Object[0].y;
  v_36.y = _World2Object[1].y;
  v_36.z = _World2Object[2].y;
  v_36.w = _World2Object[3].y;
  highp vec4 v_37;
  v_37.x = _World2Object[0].z;
  v_37.y = _World2Object[1].z;
  v_37.z = _World2Object[2].z;
  v_37.w = _World2Object[3].z;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize(((
    (v_35.xyz * _BillboardNormal.x)
   + 
    (v_36.xyz * _BillboardNormal.y)
  ) + (v_37.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_38;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_22;
  tmpvar_22 = (_LightMatrix0 * tmpvar_21).xyz;
  lightCoord_4 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_24;
  tmpvar_24 = texture (_LightTexture0, vec2(tmpvar_23)).w;
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_25;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_24);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_28 = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tmpvar_9 * tmpvar_1) * diff_28);
  c_27.xyz = tmpvar_30;
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  mediump vec3 tmpvar_31;
  tmpvar_31 = c_27.xyz;
  c_26.xyz = tmpvar_31;
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_28;
  };
  highp vec4 tmpvar_29;
  tmpvar_29 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (tmpvar_29 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = tmpvar_29.zw;
  highp vec3 tmpvar_33;
  tmpvar_33 = o_30.xyw;
  tmpvar_7 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_34;
  tmpvar_4 = _Color;
  highp vec4 v_35;
  v_35.x = _World2Object[0].x;
  v_35.y = _World2Object[1].x;
  v_35.z = _World2Object[2].x;
  v_35.w = _World2Object[3].x;
  highp vec4 v_36;
  v_36.x = _World2Object[0].y;
  v_36.y = _World2Object[1].y;
  v_36.z = _World2Object[2].y;
  v_36.w = _World2Object[3].y;
  highp vec4 v_37;
  v_37.x = _World2Object[0].z;
  v_37.y = _World2Object[1].z;
  v_37.z = _World2Object[2].z;
  v_37.w = _World2Object[3].z;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize(((
    (v_35.xyz * _BillboardNormal.x)
   + 
    (v_36.xyz * _BillboardNormal.y)
  ) + (v_37.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_38;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  mediump float tmpvar_13;
  tmpvar_13 = fract(tmpvar_12.y);
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_13 * 0.0625) + unity_LODFade.y);
  projUV_11.y = tmpvar_14;
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_17;
  lowp float x_18;
  x_18 = (tmpvar_9 - _Cutoff);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_20;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_23 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tmpvar_8 * tmpvar_1) * diff_23);
  c_22.xyz = tmpvar_25;
  c_22.w = tmpvar_9;
  c_21.w = c_22.w;
  mediump vec3 tmpvar_26;
  tmpvar_26 = c_22.xyz;
  c_21.xyz = tmpvar_26;
  c_3.xyz = c_21.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_28;
  };
  highp vec4 tmpvar_29;
  tmpvar_29 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (tmpvar_29 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = tmpvar_29.zw;
  highp vec3 tmpvar_33;
  tmpvar_33 = o_30.xyw;
  tmpvar_7 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_34;
  tmpvar_4 = _Color;
  highp vec4 v_35;
  v_35.x = _World2Object[0].x;
  v_35.y = _World2Object[1].x;
  v_35.z = _World2Object[2].x;
  v_35.w = _World2Object[3].x;
  highp vec4 v_36;
  v_36.x = _World2Object[0].y;
  v_36.y = _World2Object[1].y;
  v_36.z = _World2Object[2].y;
  v_36.w = _World2Object[3].y;
  highp vec4 v_37;
  v_37.x = _World2Object[0].z;
  v_37.y = _World2Object[1].z;
  v_37.z = _World2Object[2].z;
  v_37.w = _World2Object[3].z;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize(((
    (v_35.xyz * _BillboardNormal.x)
   + 
    (v_36.xyz * _BillboardNormal.y)
  ) + (v_37.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_38;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  mediump float tmpvar_13;
  tmpvar_13 = fract(tmpvar_12.y);
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_13 * 0.0625) + unity_LODFade.y);
  projUV_11.y = tmpvar_14;
  lowp float x_15;
  x_15 = (texture (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_17;
  lowp float x_18;
  x_18 = (tmpvar_9 - _Cutoff);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_20;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_23 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tmpvar_8 * tmpvar_1) * diff_23);
  c_22.xyz = tmpvar_25;
  c_22.w = tmpvar_9;
  c_21.w = c_22.w;
  mediump vec3 tmpvar_26;
  tmpvar_26 = c_22.xyz;
  c_21.xyz = tmpvar_26;
  c_3.xyz = c_21.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_28;
  };
  highp vec4 tmpvar_29;
  tmpvar_29 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (tmpvar_29 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = tmpvar_29.zw;
  highp vec3 tmpvar_33;
  tmpvar_33 = o_30.xyw;
  tmpvar_7 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_34;
  tmpvar_4 = _Color;
  highp vec4 v_35;
  v_35.x = _World2Object[0].x;
  v_35.y = _World2Object[1].x;
  v_35.z = _World2Object[2].x;
  v_35.w = _World2Object[3].x;
  highp vec4 v_36;
  v_36.x = _World2Object[0].y;
  v_36.y = _World2Object[1].y;
  v_36.z = _World2Object[2].y;
  v_36.w = _World2Object[3].y;
  highp vec4 v_37;
  v_37.x = _World2Object[0].z;
  v_37.y = _World2Object[1].z;
  v_37.z = _World2Object[2].z;
  v_37.w = _World2Object[3].z;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize(((
    (v_35.xyz * _BillboardNormal.x)
   + 
    (v_36.xyz * _BillboardNormal.y)
  ) + (v_37.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_38;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_11 = tmpvar_19;
  lowp float x_20;
  x_20 = (tmpvar_11 - _Cutoff);
  if ((x_20 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  tmpvar_10 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_LightMatrix0 * tmpvar_22);
  lightCoord_5 = tmpvar_23;
  lowp vec4 tmpvar_24;
  mediump vec2 P_25;
  P_25 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_24 = texture2D (_LightTexture0, P_25);
  mediump float tmpvar_26;
  tmpvar_26 = dot (lightCoord_5.xyz, lightCoord_5.xyz);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_LightTextureB0, vec2(tmpvar_26));
  mediump float tmpvar_28;
  tmpvar_28 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_24.w) * tmpvar_27.w);
  atten_4 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_29;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_32 = tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_10 * tmpvar_1) * diff_32);
  c_31.xyz = tmpvar_34;
  c_31.w = tmpvar_11;
  c_30.w = c_31.w;
  mediump vec3 tmpvar_35;
  tmpvar_35 = c_31.xyz;
  c_30.xyz = tmpvar_35;
  c_3.xyz = c_30.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_28;
  };
  highp vec4 tmpvar_29;
  tmpvar_29 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (tmpvar_29 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = tmpvar_29.zw;
  highp vec3 tmpvar_33;
  tmpvar_33 = o_30.xyw;
  tmpvar_7 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_34;
  tmpvar_4 = _Color;
  highp vec4 v_35;
  v_35.x = _World2Object[0].x;
  v_35.y = _World2Object[1].x;
  v_35.z = _World2Object[2].x;
  v_35.w = _World2Object[3].x;
  highp vec4 v_36;
  v_36.x = _World2Object[0].y;
  v_36.y = _World2Object[1].y;
  v_36.z = _World2Object[2].y;
  v_36.w = _World2Object[3].y;
  highp vec4 v_37;
  v_37.x = _World2Object[0].z;
  v_37.y = _World2Object[1].z;
  v_37.z = _World2Object[2].z;
  v_37.w = _World2Object[3].z;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize(((
    (v_35.xyz * _BillboardNormal.x)
   + 
    (v_36.xyz * _BillboardNormal.y)
  ) + (v_37.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_38;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_11 = tmpvar_19;
  lowp float x_20;
  x_20 = (tmpvar_11 - _Cutoff);
  if ((x_20 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  tmpvar_10 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_LightMatrix0 * tmpvar_22);
  lightCoord_5 = tmpvar_23;
  lowp vec4 tmpvar_24;
  mediump vec2 P_25;
  P_25 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_24 = texture (_LightTexture0, P_25);
  mediump float tmpvar_26;
  tmpvar_26 = dot (lightCoord_5.xyz, lightCoord_5.xyz);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture (_LightTextureB0, vec2(tmpvar_26));
  mediump float tmpvar_28;
  tmpvar_28 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_24.w) * tmpvar_27.w);
  atten_4 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_29;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_32 = tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_10 * tmpvar_1) * diff_32);
  c_31.xyz = tmpvar_34;
  c_31.w = tmpvar_11;
  c_30.w = c_31.w;
  mediump vec3 tmpvar_35;
  tmpvar_35 = c_31.xyz;
  c_30.xyz = tmpvar_35;
  c_3.xyz = c_30.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_28;
  };
  highp vec4 tmpvar_29;
  tmpvar_29 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (tmpvar_29 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = tmpvar_29.zw;
  highp vec3 tmpvar_33;
  tmpvar_33 = o_30.xyw;
  tmpvar_7 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_34;
  tmpvar_4 = _Color;
  highp vec4 v_35;
  v_35.x = _World2Object[0].x;
  v_35.y = _World2Object[1].x;
  v_35.z = _World2Object[2].x;
  v_35.w = _World2Object[3].x;
  highp vec4 v_36;
  v_36.x = _World2Object[0].y;
  v_36.y = _World2Object[1].y;
  v_36.z = _World2Object[2].y;
  v_36.w = _World2Object[3].y;
  highp vec4 v_37;
  v_37.x = _World2Object[0].z;
  v_37.y = _World2Object[1].z;
  v_37.z = _World2Object[2].z;
  v_37.w = _World2Object[3].z;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize(((
    (v_35.xyz * _BillboardNormal.x)
   + 
    (v_36.xyz * _BillboardNormal.y)
  ) + (v_37.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_38;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_22;
  tmpvar_22 = (_LightMatrix0 * tmpvar_21).xyz;
  lightCoord_4 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_24;
  tmpvar_24 = (texture2D (_LightTextureB0, vec2(tmpvar_23)).w * textureCube (_LightTexture0, lightCoord_4).w);
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_25;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_24);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_28 = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tmpvar_9 * tmpvar_1) * diff_28);
  c_27.xyz = tmpvar_30;
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  mediump vec3 tmpvar_31;
  tmpvar_31 = c_27.xyz;
  c_26.xyz = tmpvar_31;
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_28;
  };
  highp vec4 tmpvar_29;
  tmpvar_29 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (tmpvar_29 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = tmpvar_29.zw;
  highp vec3 tmpvar_33;
  tmpvar_33 = o_30.xyw;
  tmpvar_7 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_34;
  tmpvar_4 = _Color;
  highp vec4 v_35;
  v_35.x = _World2Object[0].x;
  v_35.y = _World2Object[1].x;
  v_35.z = _World2Object[2].x;
  v_35.w = _World2Object[3].x;
  highp vec4 v_36;
  v_36.x = _World2Object[0].y;
  v_36.y = _World2Object[1].y;
  v_36.z = _World2Object[2].y;
  v_36.w = _World2Object[3].y;
  highp vec4 v_37;
  v_37.x = _World2Object[0].z;
  v_37.y = _World2Object[1].z;
  v_37.z = _World2Object[2].z;
  v_37.w = _World2Object[3].z;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize(((
    (v_35.xyz * _BillboardNormal.x)
   + 
    (v_36.xyz * _BillboardNormal.y)
  ) + (v_37.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_38;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_22;
  tmpvar_22 = (_LightMatrix0 * tmpvar_21).xyz;
  lightCoord_4 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_24;
  tmpvar_24 = (texture (_LightTextureB0, vec2(tmpvar_23)).w * texture (_LightTexture0, lightCoord_4).w);
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_25;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_24);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_28 = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tmpvar_9 * tmpvar_1) * diff_28);
  c_27.xyz = tmpvar_30;
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  mediump vec3 tmpvar_31;
  tmpvar_31 = c_27.xyz;
  c_26.xyz = tmpvar_31;
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_28;
  };
  highp vec4 tmpvar_29;
  tmpvar_29 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (tmpvar_29 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = tmpvar_29.zw;
  highp vec3 tmpvar_33;
  tmpvar_33 = o_30.xyw;
  tmpvar_7 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_34;
  tmpvar_4 = _Color;
  highp vec4 v_35;
  v_35.x = _World2Object[0].x;
  v_35.y = _World2Object[1].x;
  v_35.z = _World2Object[2].x;
  v_35.w = _World2Object[3].x;
  highp vec4 v_36;
  v_36.x = _World2Object[0].y;
  v_36.y = _World2Object[1].y;
  v_36.z = _World2Object[2].y;
  v_36.w = _World2Object[3].y;
  highp vec4 v_37;
  v_37.x = _World2Object[0].z;
  v_37.y = _World2Object[1].z;
  v_37.z = _World2Object[2].z;
  v_37.w = _World2Object[3].z;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize(((
    (v_35.xyz * _BillboardNormal.x)
   + 
    (v_36.xyz * _BillboardNormal.y)
  ) + (v_37.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_38;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec2 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_22;
  tmpvar_22 = (_LightMatrix0 * tmpvar_21).xy;
  lightCoord_4 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = texture2D (_LightTexture0, lightCoord_4).w;
  lowp vec3 tmpvar_24;
  tmpvar_24 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_24;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_23);
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_27 = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_9 * tmpvar_1) * diff_27);
  c_26.xyz = tmpvar_29;
  c_26.w = tmpvar_10;
  c_25.w = c_26.w;
  mediump vec3 tmpvar_30;
  tmpvar_30 = c_26.xyz;
  c_25.xyz = tmpvar_30;
  c_3.xyz = c_25.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_28;
  };
  highp vec4 tmpvar_29;
  tmpvar_29 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (tmpvar_29 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = tmpvar_29.zw;
  highp vec3 tmpvar_33;
  tmpvar_33 = o_30.xyw;
  tmpvar_7 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_34;
  tmpvar_4 = _Color;
  highp vec4 v_35;
  v_35.x = _World2Object[0].x;
  v_35.y = _World2Object[1].x;
  v_35.z = _World2Object[2].x;
  v_35.w = _World2Object[3].x;
  highp vec4 v_36;
  v_36.x = _World2Object[0].y;
  v_36.y = _World2Object[1].y;
  v_36.z = _World2Object[2].y;
  v_36.w = _World2Object[3].y;
  highp vec4 v_37;
  v_37.x = _World2Object[0].z;
  v_37.y = _World2Object[1].z;
  v_37.z = _World2Object[2].z;
  v_37.w = _World2Object[3].z;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize(((
    (v_35.xyz * _BillboardNormal.x)
   + 
    (v_36.xyz * _BillboardNormal.y)
  ) + (v_37.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_38;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec2 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_22;
  tmpvar_22 = (_LightMatrix0 * tmpvar_21).xy;
  lightCoord_4 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = texture (_LightTexture0, lightCoord_4).w;
  lowp vec3 tmpvar_24;
  tmpvar_24 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_24;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_23);
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_27 = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_9 * tmpvar_1) * diff_27);
  c_26.xyz = tmpvar_29;
  c_26.w = tmpvar_10;
  c_25.w = c_26.w;
  mediump vec3 tmpvar_30;
  tmpvar_30 = c_26.xyz;
  c_25.xyz = tmpvar_30;
  c_3.xyz = c_25.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_28;
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = tmpvar_30.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  tmpvar_7 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_35;
  tmpvar_4 = _Color;
  highp vec4 v_36;
  v_36.x = _World2Object[0].x;
  v_36.y = _World2Object[1].x;
  v_36.z = _World2Object[2].x;
  v_36.w = _World2Object[3].x;
  highp vec4 v_37;
  v_37.x = _World2Object[0].y;
  v_37.y = _World2Object[1].y;
  v_37.z = _World2Object[2].y;
  v_37.w = _World2Object[3].y;
  highp vec4 v_38;
  v_38.x = _World2Object[0].z;
  v_38.y = _World2Object[1].z;
  v_38.z = _World2Object[2].z;
  v_38.w = _World2Object[3].z;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(((
    (v_36.xyz * _BillboardNormal.x)
   + 
    (v_37.xyz * _BillboardNormal.y)
  ) + (v_38.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_39;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_23;
  tmpvar_23 = (_LightMatrix0 * tmpvar_22).xyz;
  lightCoord_4 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_25;
  tmpvar_25 = texture2D (_LightTexture0, vec2(tmpvar_24)).w;
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_26;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_25);
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_29 = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tmpvar_9 * tmpvar_1) * diff_29);
  c_28.xyz = tmpvar_31;
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  mediump vec3 tmpvar_32;
  tmpvar_32 = c_28.xyz;
  c_27.xyz = tmpvar_32;
  c_3.xyz = c_27.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_28;
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = tmpvar_30.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  tmpvar_7 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_35;
  tmpvar_4 = _Color;
  highp vec4 v_36;
  v_36.x = _World2Object[0].x;
  v_36.y = _World2Object[1].x;
  v_36.z = _World2Object[2].x;
  v_36.w = _World2Object[3].x;
  highp vec4 v_37;
  v_37.x = _World2Object[0].y;
  v_37.y = _World2Object[1].y;
  v_37.z = _World2Object[2].y;
  v_37.w = _World2Object[3].y;
  highp vec4 v_38;
  v_38.x = _World2Object[0].z;
  v_38.y = _World2Object[1].z;
  v_38.z = _World2Object[2].z;
  v_38.w = _World2Object[3].z;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(((
    (v_36.xyz * _BillboardNormal.x)
   + 
    (v_37.xyz * _BillboardNormal.y)
  ) + (v_38.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_39;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_23;
  tmpvar_23 = (_LightMatrix0 * tmpvar_22).xyz;
  lightCoord_4 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_25;
  tmpvar_25 = texture (_LightTexture0, vec2(tmpvar_24)).w;
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_26;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_25);
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_29 = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tmpvar_9 * tmpvar_1) * diff_29);
  c_28.xyz = tmpvar_31;
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  mediump vec3 tmpvar_32;
  tmpvar_32 = c_28.xyz;
  c_27.xyz = tmpvar_32;
  c_3.xyz = c_27.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_28;
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = tmpvar_30.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  tmpvar_7 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_35;
  tmpvar_4 = _Color;
  highp vec4 v_36;
  v_36.x = _World2Object[0].x;
  v_36.y = _World2Object[1].x;
  v_36.z = _World2Object[2].x;
  v_36.w = _World2Object[3].x;
  highp vec4 v_37;
  v_37.x = _World2Object[0].y;
  v_37.y = _World2Object[1].y;
  v_37.z = _World2Object[2].y;
  v_37.w = _World2Object[3].y;
  highp vec4 v_38;
  v_38.x = _World2Object[0].z;
  v_38.y = _World2Object[1].z;
  v_38.z = _World2Object[2].z;
  v_38.w = _World2Object[3].z;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(((
    (v_36.xyz * _BillboardNormal.x)
   + 
    (v_37.xyz * _BillboardNormal.y)
  ) + (v_38.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_39;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  mediump float tmpvar_13;
  tmpvar_13 = fract(tmpvar_12.y);
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_13 * 0.0625) + unity_LODFade.y);
  projUV_11.y = tmpvar_14;
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_17;
  lowp float x_18;
  x_18 = (tmpvar_9 - _Cutoff);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_19 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_21;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_24 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.xyz = tmpvar_26;
  c_23.w = tmpvar_9;
  c_22.w = c_23.w;
  mediump vec3 tmpvar_27;
  tmpvar_27 = c_23.xyz;
  c_22.xyz = tmpvar_27;
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_28;
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = tmpvar_30.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  tmpvar_7 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_35;
  tmpvar_4 = _Color;
  highp vec4 v_36;
  v_36.x = _World2Object[0].x;
  v_36.y = _World2Object[1].x;
  v_36.z = _World2Object[2].x;
  v_36.w = _World2Object[3].x;
  highp vec4 v_37;
  v_37.x = _World2Object[0].y;
  v_37.y = _World2Object[1].y;
  v_37.z = _World2Object[2].y;
  v_37.w = _World2Object[3].y;
  highp vec4 v_38;
  v_38.x = _World2Object[0].z;
  v_38.y = _World2Object[1].z;
  v_38.z = _World2Object[2].z;
  v_38.w = _World2Object[3].z;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(((
    (v_36.xyz * _BillboardNormal.x)
   + 
    (v_37.xyz * _BillboardNormal.y)
  ) + (v_38.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_39;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  mediump float tmpvar_13;
  tmpvar_13 = fract(tmpvar_12.y);
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_13 * 0.0625) + unity_LODFade.y);
  projUV_11.y = tmpvar_14;
  lowp float x_15;
  x_15 = (texture (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_17;
  lowp float x_18;
  x_18 = (tmpvar_9 - _Cutoff);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_19 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_21;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_24 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.xyz = tmpvar_26;
  c_23.w = tmpvar_9;
  c_22.w = c_23.w;
  mediump vec3 tmpvar_27;
  tmpvar_27 = c_23.xyz;
  c_22.xyz = tmpvar_27;
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_28;
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = tmpvar_30.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  tmpvar_7 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_35;
  tmpvar_4 = _Color;
  highp vec4 v_36;
  v_36.x = _World2Object[0].x;
  v_36.y = _World2Object[1].x;
  v_36.z = _World2Object[2].x;
  v_36.w = _World2Object[3].x;
  highp vec4 v_37;
  v_37.x = _World2Object[0].y;
  v_37.y = _World2Object[1].y;
  v_37.z = _World2Object[2].y;
  v_37.w = _World2Object[3].y;
  highp vec4 v_38;
  v_38.x = _World2Object[0].z;
  v_38.y = _World2Object[1].z;
  v_38.z = _World2Object[2].z;
  v_38.w = _World2Object[3].z;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(((
    (v_36.xyz * _BillboardNormal.x)
   + 
    (v_37.xyz * _BillboardNormal.y)
  ) + (v_38.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_39;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_11 = tmpvar_19;
  lowp float x_20;
  x_20 = (tmpvar_11 - _Cutoff);
  if ((x_20 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_21 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_21.x, max (tmpvar_21.y, tmpvar_21.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_22;
  tmpvar_22 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  tmpvar_10 = tmpvar_22;
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_24;
  tmpvar_24 = (_LightMatrix0 * tmpvar_23);
  lightCoord_5 = tmpvar_24;
  lowp vec4 tmpvar_25;
  mediump vec2 P_26;
  P_26 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_25 = texture2D (_LightTexture0, P_26);
  mediump float tmpvar_27;
  tmpvar_27 = dot (lightCoord_5.xyz, lightCoord_5.xyz);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_LightTextureB0, vec2(tmpvar_27));
  mediump float tmpvar_29;
  tmpvar_29 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_25.w) * tmpvar_28.w);
  atten_4 = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_30;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_33 = tmpvar_34;
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tmpvar_10 * tmpvar_1) * diff_33);
  c_32.xyz = tmpvar_35;
  c_32.w = tmpvar_11;
  c_31.w = c_32.w;
  mediump vec3 tmpvar_36;
  tmpvar_36 = c_32.xyz;
  c_31.xyz = tmpvar_36;
  c_3.xyz = c_31.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_28;
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = tmpvar_30.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  tmpvar_7 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_35;
  tmpvar_4 = _Color;
  highp vec4 v_36;
  v_36.x = _World2Object[0].x;
  v_36.y = _World2Object[1].x;
  v_36.z = _World2Object[2].x;
  v_36.w = _World2Object[3].x;
  highp vec4 v_37;
  v_37.x = _World2Object[0].y;
  v_37.y = _World2Object[1].y;
  v_37.z = _World2Object[2].y;
  v_37.w = _World2Object[3].y;
  highp vec4 v_38;
  v_38.x = _World2Object[0].z;
  v_38.y = _World2Object[1].z;
  v_38.z = _World2Object[2].z;
  v_38.w = _World2Object[3].z;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(((
    (v_36.xyz * _BillboardNormal.x)
   + 
    (v_37.xyz * _BillboardNormal.y)
  ) + (v_38.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_39;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_11 = tmpvar_19;
  lowp float x_20;
  x_20 = (tmpvar_11 - _Cutoff);
  if ((x_20 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_21 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_21.x, max (tmpvar_21.y, tmpvar_21.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_22;
  tmpvar_22 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  tmpvar_10 = tmpvar_22;
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_24;
  tmpvar_24 = (_LightMatrix0 * tmpvar_23);
  lightCoord_5 = tmpvar_24;
  lowp vec4 tmpvar_25;
  mediump vec2 P_26;
  P_26 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_25 = texture (_LightTexture0, P_26);
  mediump float tmpvar_27;
  tmpvar_27 = dot (lightCoord_5.xyz, lightCoord_5.xyz);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture (_LightTextureB0, vec2(tmpvar_27));
  mediump float tmpvar_29;
  tmpvar_29 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_25.w) * tmpvar_28.w);
  atten_4 = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_30;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_33 = tmpvar_34;
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tmpvar_10 * tmpvar_1) * diff_33);
  c_32.xyz = tmpvar_35;
  c_32.w = tmpvar_11;
  c_31.w = c_32.w;
  mediump vec3 tmpvar_36;
  tmpvar_36 = c_32.xyz;
  c_31.xyz = tmpvar_36;
  c_3.xyz = c_31.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_28;
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = tmpvar_30.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  tmpvar_7 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_35;
  tmpvar_4 = _Color;
  highp vec4 v_36;
  v_36.x = _World2Object[0].x;
  v_36.y = _World2Object[1].x;
  v_36.z = _World2Object[2].x;
  v_36.w = _World2Object[3].x;
  highp vec4 v_37;
  v_37.x = _World2Object[0].y;
  v_37.y = _World2Object[1].y;
  v_37.z = _World2Object[2].y;
  v_37.w = _World2Object[3].y;
  highp vec4 v_38;
  v_38.x = _World2Object[0].z;
  v_38.y = _World2Object[1].z;
  v_38.z = _World2Object[2].z;
  v_38.w = _World2Object[3].z;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(((
    (v_36.xyz * _BillboardNormal.x)
   + 
    (v_37.xyz * _BillboardNormal.y)
  ) + (v_38.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_39;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_23;
  tmpvar_23 = (_LightMatrix0 * tmpvar_22).xyz;
  lightCoord_4 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_25;
  tmpvar_25 = (texture2D (_LightTextureB0, vec2(tmpvar_24)).w * textureCube (_LightTexture0, lightCoord_4).w);
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_26;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_25);
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_29 = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tmpvar_9 * tmpvar_1) * diff_29);
  c_28.xyz = tmpvar_31;
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  mediump vec3 tmpvar_32;
  tmpvar_32 = c_28.xyz;
  c_27.xyz = tmpvar_32;
  c_3.xyz = c_27.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_28;
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = tmpvar_30.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  tmpvar_7 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_35;
  tmpvar_4 = _Color;
  highp vec4 v_36;
  v_36.x = _World2Object[0].x;
  v_36.y = _World2Object[1].x;
  v_36.z = _World2Object[2].x;
  v_36.w = _World2Object[3].x;
  highp vec4 v_37;
  v_37.x = _World2Object[0].y;
  v_37.y = _World2Object[1].y;
  v_37.z = _World2Object[2].y;
  v_37.w = _World2Object[3].y;
  highp vec4 v_38;
  v_38.x = _World2Object[0].z;
  v_38.y = _World2Object[1].z;
  v_38.z = _World2Object[2].z;
  v_38.w = _World2Object[3].z;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(((
    (v_36.xyz * _BillboardNormal.x)
   + 
    (v_37.xyz * _BillboardNormal.y)
  ) + (v_38.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_39;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_23;
  tmpvar_23 = (_LightMatrix0 * tmpvar_22).xyz;
  lightCoord_4 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_25;
  tmpvar_25 = (texture (_LightTextureB0, vec2(tmpvar_24)).w * texture (_LightTexture0, lightCoord_4).w);
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_26;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_25);
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_29 = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tmpvar_9 * tmpvar_1) * diff_29);
  c_28.xyz = tmpvar_31;
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  mediump vec3 tmpvar_32;
  tmpvar_32 = c_28.xyz;
  c_27.xyz = tmpvar_32;
  c_3.xyz = c_27.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_28;
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = tmpvar_30.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  tmpvar_7 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_35;
  tmpvar_4 = _Color;
  highp vec4 v_36;
  v_36.x = _World2Object[0].x;
  v_36.y = _World2Object[1].x;
  v_36.z = _World2Object[2].x;
  v_36.w = _World2Object[3].x;
  highp vec4 v_37;
  v_37.x = _World2Object[0].y;
  v_37.y = _World2Object[1].y;
  v_37.z = _World2Object[2].y;
  v_37.w = _World2Object[3].y;
  highp vec4 v_38;
  v_38.x = _World2Object[0].z;
  v_38.y = _World2Object[1].z;
  v_38.z = _World2Object[2].z;
  v_38.w = _World2Object[3].z;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(((
    (v_36.xyz * _BillboardNormal.x)
   + 
    (v_37.xyz * _BillboardNormal.y)
  ) + (v_38.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_39;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec2 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_23;
  tmpvar_23 = (_LightMatrix0 * tmpvar_22).xy;
  lightCoord_4 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = texture2D (_LightTexture0, lightCoord_4).w;
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_25;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_24);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_28 = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tmpvar_9 * tmpvar_1) * diff_28);
  c_27.xyz = tmpvar_30;
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  mediump vec3 tmpvar_31;
  tmpvar_31 = c_27.xyz;
  c_26.xyz = tmpvar_31;
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_28;
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = tmpvar_30.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  tmpvar_7 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_35;
  tmpvar_4 = _Color;
  highp vec4 v_36;
  v_36.x = _World2Object[0].x;
  v_36.y = _World2Object[1].x;
  v_36.z = _World2Object[2].x;
  v_36.w = _World2Object[3].x;
  highp vec4 v_37;
  v_37.x = _World2Object[0].y;
  v_37.y = _World2Object[1].y;
  v_37.z = _World2Object[2].y;
  v_37.w = _World2Object[3].y;
  highp vec4 v_38;
  v_38.x = _World2Object[0].z;
  v_38.y = _World2Object[1].z;
  v_38.z = _World2Object[2].z;
  v_38.w = _World2Object[3].z;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(((
    (v_36.xyz * _BillboardNormal.x)
   + 
    (v_37.xyz * _BillboardNormal.y)
  ) + (v_38.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_39;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec2 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_23;
  tmpvar_23 = (_LightMatrix0 * tmpvar_22).xy;
  lightCoord_4 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = texture (_LightTexture0, lightCoord_4).w;
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_25;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_24);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_28 = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tmpvar_9 * tmpvar_1) * diff_28);
  c_27.xyz = tmpvar_30;
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  mediump vec3 tmpvar_31;
  tmpvar_31 = c_27.xyz;
  c_26.xyz = tmpvar_31;
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_16.xz;
  billboardPos_9.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_9;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_21.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_22.x + (tmpvar_22.y * tmpvar_22.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_18)));
    vPos_17 = (normalize(vPos_17) * fLength_19);
    billboardPos_9 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    ((_CameraXZAngle + tmpvar_15.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_28;
  } else {
    highp vec2 tmpvar_29;
    tmpvar_29 = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_29;
  };
  highp vec4 tmpvar_30;
  tmpvar_30 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = tmpvar_30.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  tmpvar_8 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_35;
  tmpvar_5 = _Color;
  highp vec4 v_36;
  v_36.x = _World2Object[0].x;
  v_36.y = _World2Object[1].x;
  v_36.z = _World2Object[2].x;
  v_36.w = _World2Object[3].x;
  highp vec4 v_37;
  v_37.x = _World2Object[0].y;
  v_37.y = _World2Object[1].y;
  v_37.z = _World2Object[2].y;
  v_37.w = _World2Object[3].y;
  highp vec4 v_38;
  v_38.x = _World2Object[0].z;
  v_38.y = _World2Object[1].z;
  v_38.z = _World2Object[2].z;
  v_38.w = _World2Object[3].z;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(((
    (v_36.xyz * _BillboardNormal.x)
   + 
    (v_37.xyz * _BillboardNormal.y)
  ) + (v_38.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_39;
  highp mat3 tmpvar_40;
  tmpvar_40[0] = _Object2World[0].xyz;
  tmpvar_40[1] = _Object2World[1].xyz;
  tmpvar_40[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize((tmpvar_40 * _BillboardTangent));
  worldTangent_3 = tmpvar_41;
  lowp vec3 tmpvar_42;
  tmpvar_42 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_43;
  tmpvar_43 = -(tmpvar_42);
  worldBinormal_2 = tmpvar_43;
  lowp vec3 tmpvar_44;
  tmpvar_44.x = worldTangent_3.x;
  tmpvar_44.y = worldBinormal_2.x;
  tmpvar_44.z = worldNormal_4.x;
  lowp vec3 tmpvar_45;
  tmpvar_45.x = worldTangent_3.y;
  tmpvar_45.y = worldBinormal_2.y;
  tmpvar_45.z = worldNormal_4.y;
  lowp vec3 tmpvar_46;
  tmpvar_46.x = worldTangent_3.z;
  tmpvar_46.y = worldBinormal_2.z;
  tmpvar_46.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_44;
  xlv_TEXCOORD1 = tmpvar_45;
  xlv_TEXCOORD2 = tmpvar_46;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec3 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_23;
  tmpvar_23 = (_LightMatrix0 * tmpvar_22).xyz;
  lightCoord_5 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (lightCoord_5, lightCoord_5);
  lowp float tmpvar_25;
  tmpvar_25 = texture2D (_LightTexture0, vec2(tmpvar_24)).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_21);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_21);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_21);
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_26;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_25);
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_29 = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tmpvar_9 * tmpvar_1) * diff_29);
  c_28.xyz = tmpvar_31;
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  mediump vec3 tmpvar_32;
  tmpvar_32 = c_28.xyz;
  c_27.xyz = tmpvar_32;
  c_4.xyz = c_27.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out lowp vec3 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out mediump vec4 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_16.xz;
  billboardPos_9.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_9;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_21.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_22.x + (tmpvar_22.y * tmpvar_22.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_18)));
    vPos_17 = (normalize(vPos_17) * fLength_19);
    billboardPos_9 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    ((_CameraXZAngle + tmpvar_15.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_28;
  } else {
    highp vec2 tmpvar_29;
    tmpvar_29 = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_29;
  };
  highp vec4 tmpvar_30;
  tmpvar_30 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = tmpvar_30.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  tmpvar_8 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_35;
  tmpvar_5 = _Color;
  highp vec4 v_36;
  v_36.x = _World2Object[0].x;
  v_36.y = _World2Object[1].x;
  v_36.z = _World2Object[2].x;
  v_36.w = _World2Object[3].x;
  highp vec4 v_37;
  v_37.x = _World2Object[0].y;
  v_37.y = _World2Object[1].y;
  v_37.z = _World2Object[2].y;
  v_37.w = _World2Object[3].y;
  highp vec4 v_38;
  v_38.x = _World2Object[0].z;
  v_38.y = _World2Object[1].z;
  v_38.z = _World2Object[2].z;
  v_38.w = _World2Object[3].z;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(((
    (v_36.xyz * _BillboardNormal.x)
   + 
    (v_37.xyz * _BillboardNormal.y)
  ) + (v_38.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_39;
  highp mat3 tmpvar_40;
  tmpvar_40[0] = _Object2World[0].xyz;
  tmpvar_40[1] = _Object2World[1].xyz;
  tmpvar_40[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize((tmpvar_40 * _BillboardTangent));
  worldTangent_3 = tmpvar_41;
  lowp vec3 tmpvar_42;
  tmpvar_42 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_43;
  tmpvar_43 = -(tmpvar_42);
  worldBinormal_2 = tmpvar_43;
  lowp vec3 tmpvar_44;
  tmpvar_44.x = worldTangent_3.x;
  tmpvar_44.y = worldBinormal_2.x;
  tmpvar_44.z = worldNormal_4.x;
  lowp vec3 tmpvar_45;
  tmpvar_45.x = worldTangent_3.y;
  tmpvar_45.y = worldBinormal_2.y;
  tmpvar_45.z = worldNormal_4.y;
  lowp vec3 tmpvar_46;
  tmpvar_46.x = worldTangent_3.z;
  tmpvar_46.y = worldBinormal_2.z;
  tmpvar_46.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_44;
  xlv_TEXCOORD1 = tmpvar_45;
  xlv_TEXCOORD2 = tmpvar_46;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in lowp vec3 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in mediump vec4 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec3 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((texture (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_23;
  tmpvar_23 = (_LightMatrix0 * tmpvar_22).xyz;
  lightCoord_5 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (lightCoord_5, lightCoord_5);
  lowp float tmpvar_25;
  tmpvar_25 = texture (_LightTexture0, vec2(tmpvar_24)).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_21);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_21);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_21);
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_26;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_25);
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_29 = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tmpvar_9 * tmpvar_1) * diff_29);
  c_28.xyz = tmpvar_31;
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  mediump vec3 tmpvar_32;
  tmpvar_32 = c_28.xyz;
  c_27.xyz = tmpvar_32;
  c_4.xyz = c_27.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_16.xz;
  billboardPos_9.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_9;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_21.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_22.x + (tmpvar_22.y * tmpvar_22.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_18)));
    vPos_17 = (normalize(vPos_17) * fLength_19);
    billboardPos_9 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    ((_CameraXZAngle + tmpvar_15.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_28;
  } else {
    highp vec2 tmpvar_29;
    tmpvar_29 = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_29;
  };
  highp vec4 tmpvar_30;
  tmpvar_30 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = tmpvar_30.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  tmpvar_8 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_35;
  tmpvar_5 = _Color;
  highp vec4 v_36;
  v_36.x = _World2Object[0].x;
  v_36.y = _World2Object[1].x;
  v_36.z = _World2Object[2].x;
  v_36.w = _World2Object[3].x;
  highp vec4 v_37;
  v_37.x = _World2Object[0].y;
  v_37.y = _World2Object[1].y;
  v_37.z = _World2Object[2].y;
  v_37.w = _World2Object[3].y;
  highp vec4 v_38;
  v_38.x = _World2Object[0].z;
  v_38.y = _World2Object[1].z;
  v_38.z = _World2Object[2].z;
  v_38.w = _World2Object[3].z;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(((
    (v_36.xyz * _BillboardNormal.x)
   + 
    (v_37.xyz * _BillboardNormal.y)
  ) + (v_38.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_39;
  highp mat3 tmpvar_40;
  tmpvar_40[0] = _Object2World[0].xyz;
  tmpvar_40[1] = _Object2World[1].xyz;
  tmpvar_40[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize((tmpvar_40 * _BillboardTangent));
  worldTangent_3 = tmpvar_41;
  lowp vec3 tmpvar_42;
  tmpvar_42 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_43;
  tmpvar_43 = -(tmpvar_42);
  worldBinormal_2 = tmpvar_43;
  lowp vec3 tmpvar_44;
  tmpvar_44.x = worldTangent_3.x;
  tmpvar_44.y = worldBinormal_2.x;
  tmpvar_44.z = worldNormal_4.x;
  lowp vec3 tmpvar_45;
  tmpvar_45.x = worldTangent_3.y;
  tmpvar_45.y = worldBinormal_2.y;
  tmpvar_45.z = worldNormal_4.y;
  lowp vec3 tmpvar_46;
  tmpvar_46.x = worldTangent_3.z;
  tmpvar_46.y = worldBinormal_2.z;
  tmpvar_46.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_44;
  xlv_TEXCOORD1 = tmpvar_45;
  xlv_TEXCOORD2 = tmpvar_46;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_11.x = tmpvar_12.x;
  mediump float tmpvar_13;
  tmpvar_13 = fract(tmpvar_12.y);
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_13 * 0.0625) + unity_LODFade.y);
  projUV_11.y = tmpvar_14;
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_17;
  lowp float x_18;
  x_18 = (tmpvar_9 - _Cutoff);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_20);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_20);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_20);
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_21;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_24 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.xyz = tmpvar_26;
  c_23.w = tmpvar_9;
  c_22.w = c_23.w;
  mediump vec3 tmpvar_27;
  tmpvar_27 = c_23.xyz;
  c_22.xyz = tmpvar_27;
  c_4.xyz = c_22.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out lowp vec3 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out mediump vec4 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_16.xz;
  billboardPos_9.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_9;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_21.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_22.x + (tmpvar_22.y * tmpvar_22.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_18)));
    vPos_17 = (normalize(vPos_17) * fLength_19);
    billboardPos_9 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    ((_CameraXZAngle + tmpvar_15.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_28;
  } else {
    highp vec2 tmpvar_29;
    tmpvar_29 = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_29;
  };
  highp vec4 tmpvar_30;
  tmpvar_30 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = tmpvar_30.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  tmpvar_8 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_35;
  tmpvar_5 = _Color;
  highp vec4 v_36;
  v_36.x = _World2Object[0].x;
  v_36.y = _World2Object[1].x;
  v_36.z = _World2Object[2].x;
  v_36.w = _World2Object[3].x;
  highp vec4 v_37;
  v_37.x = _World2Object[0].y;
  v_37.y = _World2Object[1].y;
  v_37.z = _World2Object[2].y;
  v_37.w = _World2Object[3].y;
  highp vec4 v_38;
  v_38.x = _World2Object[0].z;
  v_38.y = _World2Object[1].z;
  v_38.z = _World2Object[2].z;
  v_38.w = _World2Object[3].z;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(((
    (v_36.xyz * _BillboardNormal.x)
   + 
    (v_37.xyz * _BillboardNormal.y)
  ) + (v_38.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_39;
  highp mat3 tmpvar_40;
  tmpvar_40[0] = _Object2World[0].xyz;
  tmpvar_40[1] = _Object2World[1].xyz;
  tmpvar_40[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize((tmpvar_40 * _BillboardTangent));
  worldTangent_3 = tmpvar_41;
  lowp vec3 tmpvar_42;
  tmpvar_42 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_43;
  tmpvar_43 = -(tmpvar_42);
  worldBinormal_2 = tmpvar_43;
  lowp vec3 tmpvar_44;
  tmpvar_44.x = worldTangent_3.x;
  tmpvar_44.y = worldBinormal_2.x;
  tmpvar_44.z = worldNormal_4.x;
  lowp vec3 tmpvar_45;
  tmpvar_45.x = worldTangent_3.y;
  tmpvar_45.y = worldBinormal_2.y;
  tmpvar_45.z = worldNormal_4.y;
  lowp vec3 tmpvar_46;
  tmpvar_46.x = worldTangent_3.z;
  tmpvar_46.y = worldBinormal_2.z;
  tmpvar_46.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_44;
  xlv_TEXCOORD1 = tmpvar_45;
  xlv_TEXCOORD2 = tmpvar_46;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in lowp vec3 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_11.x = tmpvar_12.x;
  mediump float tmpvar_13;
  tmpvar_13 = fract(tmpvar_12.y);
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_13 * 0.0625) + unity_LODFade.y);
  projUV_11.y = tmpvar_14;
  lowp float x_15;
  x_15 = (texture (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_17;
  lowp float x_18;
  x_18 = (tmpvar_9 - _Cutoff);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = ((texture (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_20);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_20);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_20);
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_21;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_24 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.xyz = tmpvar_26;
  c_23.w = tmpvar_9;
  c_22.w = c_23.w;
  mediump vec3 tmpvar_27;
  tmpvar_27 = c_23.xyz;
  c_22.xyz = tmpvar_27;
  c_4.xyz = c_22.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_16.xz;
  billboardPos_9.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_9;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_21.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_22.x + (tmpvar_22.y * tmpvar_22.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_18)));
    vPos_17 = (normalize(vPos_17) * fLength_19);
    billboardPos_9 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    ((_CameraXZAngle + tmpvar_15.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_28;
  } else {
    highp vec2 tmpvar_29;
    tmpvar_29 = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_29;
  };
  highp vec4 tmpvar_30;
  tmpvar_30 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = tmpvar_30.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  tmpvar_8 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_35;
  tmpvar_5 = _Color;
  highp vec4 v_36;
  v_36.x = _World2Object[0].x;
  v_36.y = _World2Object[1].x;
  v_36.z = _World2Object[2].x;
  v_36.w = _World2Object[3].x;
  highp vec4 v_37;
  v_37.x = _World2Object[0].y;
  v_37.y = _World2Object[1].y;
  v_37.z = _World2Object[2].y;
  v_37.w = _World2Object[3].y;
  highp vec4 v_38;
  v_38.x = _World2Object[0].z;
  v_38.y = _World2Object[1].z;
  v_38.z = _World2Object[2].z;
  v_38.w = _World2Object[3].z;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(((
    (v_36.xyz * _BillboardNormal.x)
   + 
    (v_37.xyz * _BillboardNormal.y)
  ) + (v_38.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_39;
  highp mat3 tmpvar_40;
  tmpvar_40[0] = _Object2World[0].xyz;
  tmpvar_40[1] = _Object2World[1].xyz;
  tmpvar_40[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize((tmpvar_40 * _BillboardTangent));
  worldTangent_3 = tmpvar_41;
  lowp vec3 tmpvar_42;
  tmpvar_42 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_43;
  tmpvar_43 = -(tmpvar_42);
  worldBinormal_2 = tmpvar_43;
  lowp vec3 tmpvar_44;
  tmpvar_44.x = worldTangent_3.x;
  tmpvar_44.y = worldBinormal_2.x;
  tmpvar_44.z = worldNormal_4.x;
  lowp vec3 tmpvar_45;
  tmpvar_45.x = worldTangent_3.y;
  tmpvar_45.y = worldBinormal_2.y;
  tmpvar_45.z = worldNormal_4.y;
  lowp vec3 tmpvar_46;
  tmpvar_46.x = worldTangent_3.z;
  tmpvar_46.y = worldBinormal_2.z;
  tmpvar_46.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_44;
  xlv_TEXCOORD1 = tmpvar_45;
  xlv_TEXCOORD2 = tmpvar_46;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp float atten_5;
  mediump vec4 lightCoord_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD4;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_7 = tmpvar_9;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_11 = tmpvar_19;
  lowp float x_20;
  x_20 = (tmpvar_11 - _Cutoff);
  if ((x_20 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  tmpvar_10 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = xlv_TEXCOORD3;
  highp vec4 tmpvar_24;
  tmpvar_24 = (_LightMatrix0 * tmpvar_23);
  lightCoord_6 = tmpvar_24;
  lowp vec4 tmpvar_25;
  mediump vec2 P_26;
  P_26 = ((lightCoord_6.xy / lightCoord_6.w) + 0.5);
  tmpvar_25 = texture2D (_LightTexture0, P_26);
  mediump float tmpvar_27;
  tmpvar_27 = dot (lightCoord_6.xyz, lightCoord_6.xyz);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_LightTextureB0, vec2(tmpvar_27));
  mediump float tmpvar_29;
  tmpvar_29 = ((float(
    (lightCoord_6.z > 0.0)
  ) * tmpvar_25.w) * tmpvar_28.w);
  atten_5 = tmpvar_29;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_22);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_22);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_22);
  lowp vec3 tmpvar_30;
  tmpvar_30 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_30;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_5);
  lowp vec4 c_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_33 = tmpvar_34;
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tmpvar_10 * tmpvar_1) * diff_33);
  c_32.xyz = tmpvar_35;
  c_32.w = tmpvar_11;
  c_31.w = c_32.w;
  mediump vec3 tmpvar_36;
  tmpvar_36 = c_32.xyz;
  c_31.xyz = tmpvar_36;
  c_4.xyz = c_31.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out lowp vec3 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out mediump vec4 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_16.xz;
  billboardPos_9.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_9;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_21.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_22.x + (tmpvar_22.y * tmpvar_22.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_18)));
    vPos_17 = (normalize(vPos_17) * fLength_19);
    billboardPos_9 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    ((_CameraXZAngle + tmpvar_15.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_28;
  } else {
    highp vec2 tmpvar_29;
    tmpvar_29 = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_29;
  };
  highp vec4 tmpvar_30;
  tmpvar_30 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = tmpvar_30.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  tmpvar_8 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_35;
  tmpvar_5 = _Color;
  highp vec4 v_36;
  v_36.x = _World2Object[0].x;
  v_36.y = _World2Object[1].x;
  v_36.z = _World2Object[2].x;
  v_36.w = _World2Object[3].x;
  highp vec4 v_37;
  v_37.x = _World2Object[0].y;
  v_37.y = _World2Object[1].y;
  v_37.z = _World2Object[2].y;
  v_37.w = _World2Object[3].y;
  highp vec4 v_38;
  v_38.x = _World2Object[0].z;
  v_38.y = _World2Object[1].z;
  v_38.z = _World2Object[2].z;
  v_38.w = _World2Object[3].z;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(((
    (v_36.xyz * _BillboardNormal.x)
   + 
    (v_37.xyz * _BillboardNormal.y)
  ) + (v_38.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_39;
  highp mat3 tmpvar_40;
  tmpvar_40[0] = _Object2World[0].xyz;
  tmpvar_40[1] = _Object2World[1].xyz;
  tmpvar_40[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize((tmpvar_40 * _BillboardTangent));
  worldTangent_3 = tmpvar_41;
  lowp vec3 tmpvar_42;
  tmpvar_42 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_43;
  tmpvar_43 = -(tmpvar_42);
  worldBinormal_2 = tmpvar_43;
  lowp vec3 tmpvar_44;
  tmpvar_44.x = worldTangent_3.x;
  tmpvar_44.y = worldBinormal_2.x;
  tmpvar_44.z = worldNormal_4.x;
  lowp vec3 tmpvar_45;
  tmpvar_45.x = worldTangent_3.y;
  tmpvar_45.y = worldBinormal_2.y;
  tmpvar_45.z = worldNormal_4.y;
  lowp vec3 tmpvar_46;
  tmpvar_46.x = worldTangent_3.z;
  tmpvar_46.y = worldBinormal_2.z;
  tmpvar_46.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_44;
  xlv_TEXCOORD1 = tmpvar_45;
  xlv_TEXCOORD2 = tmpvar_46;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in lowp vec3 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in mediump vec4 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp float atten_5;
  mediump vec4 lightCoord_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD4;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_7 = tmpvar_9;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_11 = tmpvar_19;
  lowp float x_20;
  x_20 = (tmpvar_11 - _Cutoff);
  if ((x_20 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  tmpvar_10 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = xlv_TEXCOORD3;
  highp vec4 tmpvar_24;
  tmpvar_24 = (_LightMatrix0 * tmpvar_23);
  lightCoord_6 = tmpvar_24;
  lowp vec4 tmpvar_25;
  mediump vec2 P_26;
  P_26 = ((lightCoord_6.xy / lightCoord_6.w) + 0.5);
  tmpvar_25 = texture (_LightTexture0, P_26);
  mediump float tmpvar_27;
  tmpvar_27 = dot (lightCoord_6.xyz, lightCoord_6.xyz);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture (_LightTextureB0, vec2(tmpvar_27));
  mediump float tmpvar_29;
  tmpvar_29 = ((float(
    (lightCoord_6.z > 0.0)
  ) * tmpvar_25.w) * tmpvar_28.w);
  atten_5 = tmpvar_29;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_22);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_22);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_22);
  lowp vec3 tmpvar_30;
  tmpvar_30 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_30;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_5);
  lowp vec4 c_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_33 = tmpvar_34;
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tmpvar_10 * tmpvar_1) * diff_33);
  c_32.xyz = tmpvar_35;
  c_32.w = tmpvar_11;
  c_31.w = c_32.w;
  mediump vec3 tmpvar_36;
  tmpvar_36 = c_32.xyz;
  c_31.xyz = tmpvar_36;
  c_4.xyz = c_31.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_16.xz;
  billboardPos_9.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_9;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_21.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_22.x + (tmpvar_22.y * tmpvar_22.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_18)));
    vPos_17 = (normalize(vPos_17) * fLength_19);
    billboardPos_9 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    ((_CameraXZAngle + tmpvar_15.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_28;
  } else {
    highp vec2 tmpvar_29;
    tmpvar_29 = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_29;
  };
  highp vec4 tmpvar_30;
  tmpvar_30 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = tmpvar_30.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  tmpvar_8 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_35;
  tmpvar_5 = _Color;
  highp vec4 v_36;
  v_36.x = _World2Object[0].x;
  v_36.y = _World2Object[1].x;
  v_36.z = _World2Object[2].x;
  v_36.w = _World2Object[3].x;
  highp vec4 v_37;
  v_37.x = _World2Object[0].y;
  v_37.y = _World2Object[1].y;
  v_37.z = _World2Object[2].y;
  v_37.w = _World2Object[3].y;
  highp vec4 v_38;
  v_38.x = _World2Object[0].z;
  v_38.y = _World2Object[1].z;
  v_38.z = _World2Object[2].z;
  v_38.w = _World2Object[3].z;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(((
    (v_36.xyz * _BillboardNormal.x)
   + 
    (v_37.xyz * _BillboardNormal.y)
  ) + (v_38.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_39;
  highp mat3 tmpvar_40;
  tmpvar_40[0] = _Object2World[0].xyz;
  tmpvar_40[1] = _Object2World[1].xyz;
  tmpvar_40[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize((tmpvar_40 * _BillboardTangent));
  worldTangent_3 = tmpvar_41;
  lowp vec3 tmpvar_42;
  tmpvar_42 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_43;
  tmpvar_43 = -(tmpvar_42);
  worldBinormal_2 = tmpvar_43;
  lowp vec3 tmpvar_44;
  tmpvar_44.x = worldTangent_3.x;
  tmpvar_44.y = worldBinormal_2.x;
  tmpvar_44.z = worldNormal_4.x;
  lowp vec3 tmpvar_45;
  tmpvar_45.x = worldTangent_3.y;
  tmpvar_45.y = worldBinormal_2.y;
  tmpvar_45.z = worldNormal_4.y;
  lowp vec3 tmpvar_46;
  tmpvar_46.x = worldTangent_3.z;
  tmpvar_46.y = worldBinormal_2.z;
  tmpvar_46.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_44;
  xlv_TEXCOORD1 = tmpvar_45;
  xlv_TEXCOORD2 = tmpvar_46;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec3 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_23;
  tmpvar_23 = (_LightMatrix0 * tmpvar_22).xyz;
  lightCoord_5 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (lightCoord_5, lightCoord_5);
  lowp float tmpvar_25;
  tmpvar_25 = (texture2D (_LightTextureB0, vec2(tmpvar_24)).w * textureCube (_LightTexture0, lightCoord_5).w);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_21);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_21);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_21);
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_26;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_25);
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_29 = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tmpvar_9 * tmpvar_1) * diff_29);
  c_28.xyz = tmpvar_31;
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  mediump vec3 tmpvar_32;
  tmpvar_32 = c_28.xyz;
  c_27.xyz = tmpvar_32;
  c_4.xyz = c_27.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out lowp vec3 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out mediump vec4 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_16.xz;
  billboardPos_9.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_9;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_21.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_22.x + (tmpvar_22.y * tmpvar_22.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_18)));
    vPos_17 = (normalize(vPos_17) * fLength_19);
    billboardPos_9 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    ((_CameraXZAngle + tmpvar_15.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_28;
  } else {
    highp vec2 tmpvar_29;
    tmpvar_29 = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_29;
  };
  highp vec4 tmpvar_30;
  tmpvar_30 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = tmpvar_30.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  tmpvar_8 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_35;
  tmpvar_5 = _Color;
  highp vec4 v_36;
  v_36.x = _World2Object[0].x;
  v_36.y = _World2Object[1].x;
  v_36.z = _World2Object[2].x;
  v_36.w = _World2Object[3].x;
  highp vec4 v_37;
  v_37.x = _World2Object[0].y;
  v_37.y = _World2Object[1].y;
  v_37.z = _World2Object[2].y;
  v_37.w = _World2Object[3].y;
  highp vec4 v_38;
  v_38.x = _World2Object[0].z;
  v_38.y = _World2Object[1].z;
  v_38.z = _World2Object[2].z;
  v_38.w = _World2Object[3].z;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(((
    (v_36.xyz * _BillboardNormal.x)
   + 
    (v_37.xyz * _BillboardNormal.y)
  ) + (v_38.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_39;
  highp mat3 tmpvar_40;
  tmpvar_40[0] = _Object2World[0].xyz;
  tmpvar_40[1] = _Object2World[1].xyz;
  tmpvar_40[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize((tmpvar_40 * _BillboardTangent));
  worldTangent_3 = tmpvar_41;
  lowp vec3 tmpvar_42;
  tmpvar_42 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_43;
  tmpvar_43 = -(tmpvar_42);
  worldBinormal_2 = tmpvar_43;
  lowp vec3 tmpvar_44;
  tmpvar_44.x = worldTangent_3.x;
  tmpvar_44.y = worldBinormal_2.x;
  tmpvar_44.z = worldNormal_4.x;
  lowp vec3 tmpvar_45;
  tmpvar_45.x = worldTangent_3.y;
  tmpvar_45.y = worldBinormal_2.y;
  tmpvar_45.z = worldNormal_4.y;
  lowp vec3 tmpvar_46;
  tmpvar_46.x = worldTangent_3.z;
  tmpvar_46.y = worldBinormal_2.z;
  tmpvar_46.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_44;
  xlv_TEXCOORD1 = tmpvar_45;
  xlv_TEXCOORD2 = tmpvar_46;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in lowp vec3 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in mediump vec4 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec3 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((texture (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_23;
  tmpvar_23 = (_LightMatrix0 * tmpvar_22).xyz;
  lightCoord_5 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (lightCoord_5, lightCoord_5);
  lowp float tmpvar_25;
  tmpvar_25 = (texture (_LightTextureB0, vec2(tmpvar_24)).w * texture (_LightTexture0, lightCoord_5).w);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_21);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_21);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_21);
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_26;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_25);
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_29 = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tmpvar_9 * tmpvar_1) * diff_29);
  c_28.xyz = tmpvar_31;
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  mediump vec3 tmpvar_32;
  tmpvar_32 = c_28.xyz;
  c_27.xyz = tmpvar_32;
  c_4.xyz = c_27.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_16.xz;
  billboardPos_9.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_9;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_21.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_22.x + (tmpvar_22.y * tmpvar_22.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_18)));
    vPos_17 = (normalize(vPos_17) * fLength_19);
    billboardPos_9 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    ((_CameraXZAngle + tmpvar_15.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_28;
  } else {
    highp vec2 tmpvar_29;
    tmpvar_29 = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_29;
  };
  highp vec4 tmpvar_30;
  tmpvar_30 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = tmpvar_30.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  tmpvar_8 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_35;
  tmpvar_5 = _Color;
  highp vec4 v_36;
  v_36.x = _World2Object[0].x;
  v_36.y = _World2Object[1].x;
  v_36.z = _World2Object[2].x;
  v_36.w = _World2Object[3].x;
  highp vec4 v_37;
  v_37.x = _World2Object[0].y;
  v_37.y = _World2Object[1].y;
  v_37.z = _World2Object[2].y;
  v_37.w = _World2Object[3].y;
  highp vec4 v_38;
  v_38.x = _World2Object[0].z;
  v_38.y = _World2Object[1].z;
  v_38.z = _World2Object[2].z;
  v_38.w = _World2Object[3].z;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(((
    (v_36.xyz * _BillboardNormal.x)
   + 
    (v_37.xyz * _BillboardNormal.y)
  ) + (v_38.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_39;
  highp mat3 tmpvar_40;
  tmpvar_40[0] = _Object2World[0].xyz;
  tmpvar_40[1] = _Object2World[1].xyz;
  tmpvar_40[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize((tmpvar_40 * _BillboardTangent));
  worldTangent_3 = tmpvar_41;
  lowp vec3 tmpvar_42;
  tmpvar_42 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_43;
  tmpvar_43 = -(tmpvar_42);
  worldBinormal_2 = tmpvar_43;
  lowp vec3 tmpvar_44;
  tmpvar_44.x = worldTangent_3.x;
  tmpvar_44.y = worldBinormal_2.x;
  tmpvar_44.z = worldNormal_4.x;
  lowp vec3 tmpvar_45;
  tmpvar_45.x = worldTangent_3.y;
  tmpvar_45.y = worldBinormal_2.y;
  tmpvar_45.z = worldNormal_4.y;
  lowp vec3 tmpvar_46;
  tmpvar_46.x = worldTangent_3.z;
  tmpvar_46.y = worldBinormal_2.z;
  tmpvar_46.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_44;
  xlv_TEXCOORD1 = tmpvar_45;
  xlv_TEXCOORD2 = tmpvar_46;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec2 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD3;
  highp vec2 tmpvar_23;
  tmpvar_23 = (_LightMatrix0 * tmpvar_22).xy;
  lightCoord_5 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = texture2D (_LightTexture0, lightCoord_5).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_21);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_21);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_21);
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_25;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_24);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_28 = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tmpvar_9 * tmpvar_1) * diff_28);
  c_27.xyz = tmpvar_30;
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  mediump vec3 tmpvar_31;
  tmpvar_31 = c_27.xyz;
  c_26.xyz = tmpvar_31;
  c_4.xyz = c_26.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out lowp vec3 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out mediump vec4 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_16.xz;
  billboardPos_9.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_9;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_21.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_22.x + (tmpvar_22.y * tmpvar_22.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_18)));
    vPos_17 = (normalize(vPos_17) * fLength_19);
    billboardPos_9 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    ((_CameraXZAngle + tmpvar_15.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_28;
  } else {
    highp vec2 tmpvar_29;
    tmpvar_29 = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_29;
  };
  highp vec4 tmpvar_30;
  tmpvar_30 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = tmpvar_30.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  tmpvar_8 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_35;
  tmpvar_5 = _Color;
  highp vec4 v_36;
  v_36.x = _World2Object[0].x;
  v_36.y = _World2Object[1].x;
  v_36.z = _World2Object[2].x;
  v_36.w = _World2Object[3].x;
  highp vec4 v_37;
  v_37.x = _World2Object[0].y;
  v_37.y = _World2Object[1].y;
  v_37.z = _World2Object[2].y;
  v_37.w = _World2Object[3].y;
  highp vec4 v_38;
  v_38.x = _World2Object[0].z;
  v_38.y = _World2Object[1].z;
  v_38.z = _World2Object[2].z;
  v_38.w = _World2Object[3].z;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(((
    (v_36.xyz * _BillboardNormal.x)
   + 
    (v_37.xyz * _BillboardNormal.y)
  ) + (v_38.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_39;
  highp mat3 tmpvar_40;
  tmpvar_40[0] = _Object2World[0].xyz;
  tmpvar_40[1] = _Object2World[1].xyz;
  tmpvar_40[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize((tmpvar_40 * _BillboardTangent));
  worldTangent_3 = tmpvar_41;
  lowp vec3 tmpvar_42;
  tmpvar_42 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_43;
  tmpvar_43 = -(tmpvar_42);
  worldBinormal_2 = tmpvar_43;
  lowp vec3 tmpvar_44;
  tmpvar_44.x = worldTangent_3.x;
  tmpvar_44.y = worldBinormal_2.x;
  tmpvar_44.z = worldNormal_4.x;
  lowp vec3 tmpvar_45;
  tmpvar_45.x = worldTangent_3.y;
  tmpvar_45.y = worldBinormal_2.y;
  tmpvar_45.z = worldNormal_4.y;
  lowp vec3 tmpvar_46;
  tmpvar_46.x = worldTangent_3.z;
  tmpvar_46.y = worldBinormal_2.z;
  tmpvar_46.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_44;
  xlv_TEXCOORD1 = tmpvar_45;
  xlv_TEXCOORD2 = tmpvar_46;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in lowp vec3 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in mediump vec4 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec2 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((texture (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD3;
  highp vec2 tmpvar_23;
  tmpvar_23 = (_LightMatrix0 * tmpvar_22).xy;
  lightCoord_5 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = texture (_LightTexture0, lightCoord_5).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_21);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_21);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_21);
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_25;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_24);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_28 = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tmpvar_9 * tmpvar_1) * diff_28);
  c_27.xyz = tmpvar_30;
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  mediump vec3 tmpvar_31;
  tmpvar_31 = c_27.xyz;
  c_26.xyz = tmpvar_31;
  c_4.xyz = c_26.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_16.xz;
  billboardPos_9.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_9;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_21.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_22.x + (tmpvar_22.y * tmpvar_22.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_18)));
    vPos_17 = (normalize(vPos_17) * fLength_19);
    billboardPos_9 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    ((_CameraXZAngle + tmpvar_15.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_28;
  } else {
    highp vec2 tmpvar_29;
    tmpvar_29 = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_29;
  };
  highp float tmpvar_30;
  tmpvar_30 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (tmpvar_31 * 0.5);
  highp vec2 tmpvar_34;
  tmpvar_34.x = tmpvar_33.x;
  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
  o_32.xy = (tmpvar_34 + tmpvar_33.w);
  o_32.zw = tmpvar_31.zw;
  highp vec3 tmpvar_35;
  tmpvar_35 = o_32.xyw;
  tmpvar_8 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_36;
  tmpvar_5 = _Color;
  highp vec4 v_37;
  v_37.x = _World2Object[0].x;
  v_37.y = _World2Object[1].x;
  v_37.z = _World2Object[2].x;
  v_37.w = _World2Object[3].x;
  highp vec4 v_38;
  v_38.x = _World2Object[0].y;
  v_38.y = _World2Object[1].y;
  v_38.z = _World2Object[2].y;
  v_38.w = _World2Object[3].y;
  highp vec4 v_39;
  v_39.x = _World2Object[0].z;
  v_39.y = _World2Object[1].z;
  v_39.z = _World2Object[2].z;
  v_39.w = _World2Object[3].z;
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize(((
    (v_37.xyz * _BillboardNormal.x)
   + 
    (v_38.xyz * _BillboardNormal.y)
  ) + (v_39.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_40;
  highp mat3 tmpvar_41;
  tmpvar_41[0] = _Object2World[0].xyz;
  tmpvar_41[1] = _Object2World[1].xyz;
  tmpvar_41[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize((tmpvar_41 * _BillboardTangent));
  worldTangent_3 = tmpvar_42;
  lowp vec3 tmpvar_43;
  tmpvar_43 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_44;
  tmpvar_44 = -(tmpvar_43);
  worldBinormal_2 = tmpvar_44;
  lowp vec3 tmpvar_45;
  tmpvar_45.x = worldTangent_3.x;
  tmpvar_45.y = worldBinormal_2.x;
  tmpvar_45.z = worldNormal_4.x;
  lowp vec3 tmpvar_46;
  tmpvar_46.x = worldTangent_3.y;
  tmpvar_46.y = worldBinormal_2.y;
  tmpvar_46.z = worldNormal_4.y;
  lowp vec3 tmpvar_47;
  tmpvar_47.x = worldTangent_3.z;
  tmpvar_47.y = worldBinormal_2.z;
  tmpvar_47.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_45;
  xlv_TEXCOORD1 = tmpvar_46;
  xlv_TEXCOORD2 = tmpvar_47;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec3 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_24;
  tmpvar_24 = (_LightMatrix0 * tmpvar_23).xyz;
  lightCoord_5 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (lightCoord_5, lightCoord_5);
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_LightTexture0, vec2(tmpvar_25)).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_22);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_22);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_22);
  lowp vec3 tmpvar_27;
  tmpvar_27 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_27;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_26);
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_30 = tmpvar_31;
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tmpvar_9 * tmpvar_1) * diff_30);
  c_29.xyz = tmpvar_32;
  c_29.w = tmpvar_10;
  c_28.w = c_29.w;
  mediump vec3 tmpvar_33;
  tmpvar_33 = c_29.xyz;
  c_28.xyz = tmpvar_33;
  c_4.xyz = c_28.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out lowp vec3 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out mediump vec4 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_16.xz;
  billboardPos_9.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_9;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_21.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_22.x + (tmpvar_22.y * tmpvar_22.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_18)));
    vPos_17 = (normalize(vPos_17) * fLength_19);
    billboardPos_9 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    ((_CameraXZAngle + tmpvar_15.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_28;
  } else {
    highp vec2 tmpvar_29;
    tmpvar_29 = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_29;
  };
  highp float tmpvar_30;
  tmpvar_30 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (tmpvar_31 * 0.5);
  highp vec2 tmpvar_34;
  tmpvar_34.x = tmpvar_33.x;
  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
  o_32.xy = (tmpvar_34 + tmpvar_33.w);
  o_32.zw = tmpvar_31.zw;
  highp vec3 tmpvar_35;
  tmpvar_35 = o_32.xyw;
  tmpvar_8 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_36;
  tmpvar_5 = _Color;
  highp vec4 v_37;
  v_37.x = _World2Object[0].x;
  v_37.y = _World2Object[1].x;
  v_37.z = _World2Object[2].x;
  v_37.w = _World2Object[3].x;
  highp vec4 v_38;
  v_38.x = _World2Object[0].y;
  v_38.y = _World2Object[1].y;
  v_38.z = _World2Object[2].y;
  v_38.w = _World2Object[3].y;
  highp vec4 v_39;
  v_39.x = _World2Object[0].z;
  v_39.y = _World2Object[1].z;
  v_39.z = _World2Object[2].z;
  v_39.w = _World2Object[3].z;
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize(((
    (v_37.xyz * _BillboardNormal.x)
   + 
    (v_38.xyz * _BillboardNormal.y)
  ) + (v_39.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_40;
  highp mat3 tmpvar_41;
  tmpvar_41[0] = _Object2World[0].xyz;
  tmpvar_41[1] = _Object2World[1].xyz;
  tmpvar_41[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize((tmpvar_41 * _BillboardTangent));
  worldTangent_3 = tmpvar_42;
  lowp vec3 tmpvar_43;
  tmpvar_43 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_44;
  tmpvar_44 = -(tmpvar_43);
  worldBinormal_2 = tmpvar_44;
  lowp vec3 tmpvar_45;
  tmpvar_45.x = worldTangent_3.x;
  tmpvar_45.y = worldBinormal_2.x;
  tmpvar_45.z = worldNormal_4.x;
  lowp vec3 tmpvar_46;
  tmpvar_46.x = worldTangent_3.y;
  tmpvar_46.y = worldBinormal_2.y;
  tmpvar_46.z = worldNormal_4.y;
  lowp vec3 tmpvar_47;
  tmpvar_47.x = worldTangent_3.z;
  tmpvar_47.y = worldBinormal_2.z;
  tmpvar_47.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_45;
  xlv_TEXCOORD1 = tmpvar_46;
  xlv_TEXCOORD2 = tmpvar_47;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in lowp vec3 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in mediump vec4 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec3 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_24;
  tmpvar_24 = (_LightMatrix0 * tmpvar_23).xyz;
  lightCoord_5 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (lightCoord_5, lightCoord_5);
  lowp float tmpvar_26;
  tmpvar_26 = texture (_LightTexture0, vec2(tmpvar_25)).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_22);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_22);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_22);
  lowp vec3 tmpvar_27;
  tmpvar_27 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_27;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_26);
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_30 = tmpvar_31;
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tmpvar_9 * tmpvar_1) * diff_30);
  c_29.xyz = tmpvar_32;
  c_29.w = tmpvar_10;
  c_28.w = c_29.w;
  mediump vec3 tmpvar_33;
  tmpvar_33 = c_29.xyz;
  c_28.xyz = tmpvar_33;
  c_4.xyz = c_28.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_16.xz;
  billboardPos_9.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_9;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_21.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_22.x + (tmpvar_22.y * tmpvar_22.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_18)));
    vPos_17 = (normalize(vPos_17) * fLength_19);
    billboardPos_9 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    ((_CameraXZAngle + tmpvar_15.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_28;
  } else {
    highp vec2 tmpvar_29;
    tmpvar_29 = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_29;
  };
  highp float tmpvar_30;
  tmpvar_30 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (tmpvar_31 * 0.5);
  highp vec2 tmpvar_34;
  tmpvar_34.x = tmpvar_33.x;
  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
  o_32.xy = (tmpvar_34 + tmpvar_33.w);
  o_32.zw = tmpvar_31.zw;
  highp vec3 tmpvar_35;
  tmpvar_35 = o_32.xyw;
  tmpvar_8 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_36;
  tmpvar_5 = _Color;
  highp vec4 v_37;
  v_37.x = _World2Object[0].x;
  v_37.y = _World2Object[1].x;
  v_37.z = _World2Object[2].x;
  v_37.w = _World2Object[3].x;
  highp vec4 v_38;
  v_38.x = _World2Object[0].y;
  v_38.y = _World2Object[1].y;
  v_38.z = _World2Object[2].y;
  v_38.w = _World2Object[3].y;
  highp vec4 v_39;
  v_39.x = _World2Object[0].z;
  v_39.y = _World2Object[1].z;
  v_39.z = _World2Object[2].z;
  v_39.w = _World2Object[3].z;
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize(((
    (v_37.xyz * _BillboardNormal.x)
   + 
    (v_38.xyz * _BillboardNormal.y)
  ) + (v_39.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_40;
  highp mat3 tmpvar_41;
  tmpvar_41[0] = _Object2World[0].xyz;
  tmpvar_41[1] = _Object2World[1].xyz;
  tmpvar_41[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize((tmpvar_41 * _BillboardTangent));
  worldTangent_3 = tmpvar_42;
  lowp vec3 tmpvar_43;
  tmpvar_43 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_44;
  tmpvar_44 = -(tmpvar_43);
  worldBinormal_2 = tmpvar_44;
  lowp vec3 tmpvar_45;
  tmpvar_45.x = worldTangent_3.x;
  tmpvar_45.y = worldBinormal_2.x;
  tmpvar_45.z = worldNormal_4.x;
  lowp vec3 tmpvar_46;
  tmpvar_46.x = worldTangent_3.y;
  tmpvar_46.y = worldBinormal_2.y;
  tmpvar_46.z = worldNormal_4.y;
  lowp vec3 tmpvar_47;
  tmpvar_47.x = worldTangent_3.z;
  tmpvar_47.y = worldBinormal_2.z;
  tmpvar_47.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_45;
  xlv_TEXCOORD1 = tmpvar_46;
  xlv_TEXCOORD2 = tmpvar_47;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_11.x = tmpvar_12.x;
  mediump float tmpvar_13;
  tmpvar_13 = fract(tmpvar_12.y);
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_13 * 0.0625) + unity_LODFade.y);
  projUV_11.y = tmpvar_14;
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_17;
  lowp float x_18;
  x_18 = (tmpvar_9 - _Cutoff);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_19 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_21);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_21);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_21);
  lowp vec3 tmpvar_22;
  tmpvar_22 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_22;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_25 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.xyz = tmpvar_27;
  c_24.w = tmpvar_9;
  c_23.w = c_24.w;
  mediump vec3 tmpvar_28;
  tmpvar_28 = c_24.xyz;
  c_23.xyz = tmpvar_28;
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out lowp vec3 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out mediump vec4 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_16.xz;
  billboardPos_9.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_9;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_21.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_22.x + (tmpvar_22.y * tmpvar_22.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_18)));
    vPos_17 = (normalize(vPos_17) * fLength_19);
    billboardPos_9 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    ((_CameraXZAngle + tmpvar_15.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_28;
  } else {
    highp vec2 tmpvar_29;
    tmpvar_29 = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_29;
  };
  highp float tmpvar_30;
  tmpvar_30 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (tmpvar_31 * 0.5);
  highp vec2 tmpvar_34;
  tmpvar_34.x = tmpvar_33.x;
  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
  o_32.xy = (tmpvar_34 + tmpvar_33.w);
  o_32.zw = tmpvar_31.zw;
  highp vec3 tmpvar_35;
  tmpvar_35 = o_32.xyw;
  tmpvar_8 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_36;
  tmpvar_5 = _Color;
  highp vec4 v_37;
  v_37.x = _World2Object[0].x;
  v_37.y = _World2Object[1].x;
  v_37.z = _World2Object[2].x;
  v_37.w = _World2Object[3].x;
  highp vec4 v_38;
  v_38.x = _World2Object[0].y;
  v_38.y = _World2Object[1].y;
  v_38.z = _World2Object[2].y;
  v_38.w = _World2Object[3].y;
  highp vec4 v_39;
  v_39.x = _World2Object[0].z;
  v_39.y = _World2Object[1].z;
  v_39.z = _World2Object[2].z;
  v_39.w = _World2Object[3].z;
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize(((
    (v_37.xyz * _BillboardNormal.x)
   + 
    (v_38.xyz * _BillboardNormal.y)
  ) + (v_39.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_40;
  highp mat3 tmpvar_41;
  tmpvar_41[0] = _Object2World[0].xyz;
  tmpvar_41[1] = _Object2World[1].xyz;
  tmpvar_41[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize((tmpvar_41 * _BillboardTangent));
  worldTangent_3 = tmpvar_42;
  lowp vec3 tmpvar_43;
  tmpvar_43 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_44;
  tmpvar_44 = -(tmpvar_43);
  worldBinormal_2 = tmpvar_44;
  lowp vec3 tmpvar_45;
  tmpvar_45.x = worldTangent_3.x;
  tmpvar_45.y = worldBinormal_2.x;
  tmpvar_45.z = worldNormal_4.x;
  lowp vec3 tmpvar_46;
  tmpvar_46.x = worldTangent_3.y;
  tmpvar_46.y = worldBinormal_2.y;
  tmpvar_46.z = worldNormal_4.y;
  lowp vec3 tmpvar_47;
  tmpvar_47.x = worldTangent_3.z;
  tmpvar_47.y = worldBinormal_2.z;
  tmpvar_47.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_45;
  xlv_TEXCOORD1 = tmpvar_46;
  xlv_TEXCOORD2 = tmpvar_47;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in lowp vec3 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_11.x = tmpvar_12.x;
  mediump float tmpvar_13;
  tmpvar_13 = fract(tmpvar_12.y);
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_13 * 0.0625) + unity_LODFade.y);
  projUV_11.y = tmpvar_14;
  lowp float x_15;
  x_15 = (texture (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_17;
  lowp float x_18;
  x_18 = (tmpvar_9 - _Cutoff);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_19 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((texture (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_21);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_21);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_21);
  lowp vec3 tmpvar_22;
  tmpvar_22 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_22;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_25 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.xyz = tmpvar_27;
  c_24.w = tmpvar_9;
  c_23.w = c_24.w;
  mediump vec3 tmpvar_28;
  tmpvar_28 = c_24.xyz;
  c_23.xyz = tmpvar_28;
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_16.xz;
  billboardPos_9.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_9;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_21.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_22.x + (tmpvar_22.y * tmpvar_22.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_18)));
    vPos_17 = (normalize(vPos_17) * fLength_19);
    billboardPos_9 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    ((_CameraXZAngle + tmpvar_15.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_28;
  } else {
    highp vec2 tmpvar_29;
    tmpvar_29 = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_29;
  };
  highp float tmpvar_30;
  tmpvar_30 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (tmpvar_31 * 0.5);
  highp vec2 tmpvar_34;
  tmpvar_34.x = tmpvar_33.x;
  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
  o_32.xy = (tmpvar_34 + tmpvar_33.w);
  o_32.zw = tmpvar_31.zw;
  highp vec3 tmpvar_35;
  tmpvar_35 = o_32.xyw;
  tmpvar_8 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_36;
  tmpvar_5 = _Color;
  highp vec4 v_37;
  v_37.x = _World2Object[0].x;
  v_37.y = _World2Object[1].x;
  v_37.z = _World2Object[2].x;
  v_37.w = _World2Object[3].x;
  highp vec4 v_38;
  v_38.x = _World2Object[0].y;
  v_38.y = _World2Object[1].y;
  v_38.z = _World2Object[2].y;
  v_38.w = _World2Object[3].y;
  highp vec4 v_39;
  v_39.x = _World2Object[0].z;
  v_39.y = _World2Object[1].z;
  v_39.z = _World2Object[2].z;
  v_39.w = _World2Object[3].z;
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize(((
    (v_37.xyz * _BillboardNormal.x)
   + 
    (v_38.xyz * _BillboardNormal.y)
  ) + (v_39.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_40;
  highp mat3 tmpvar_41;
  tmpvar_41[0] = _Object2World[0].xyz;
  tmpvar_41[1] = _Object2World[1].xyz;
  tmpvar_41[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize((tmpvar_41 * _BillboardTangent));
  worldTangent_3 = tmpvar_42;
  lowp vec3 tmpvar_43;
  tmpvar_43 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_44;
  tmpvar_44 = -(tmpvar_43);
  worldBinormal_2 = tmpvar_44;
  lowp vec3 tmpvar_45;
  tmpvar_45.x = worldTangent_3.x;
  tmpvar_45.y = worldBinormal_2.x;
  tmpvar_45.z = worldNormal_4.x;
  lowp vec3 tmpvar_46;
  tmpvar_46.x = worldTangent_3.y;
  tmpvar_46.y = worldBinormal_2.y;
  tmpvar_46.z = worldNormal_4.y;
  lowp vec3 tmpvar_47;
  tmpvar_47.x = worldTangent_3.z;
  tmpvar_47.y = worldBinormal_2.z;
  tmpvar_47.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_45;
  xlv_TEXCOORD1 = tmpvar_46;
  xlv_TEXCOORD2 = tmpvar_47;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp float atten_5;
  mediump vec4 lightCoord_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD4;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_7 = tmpvar_9;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_11 = tmpvar_19;
  lowp float x_20;
  x_20 = (tmpvar_11 - _Cutoff);
  if ((x_20 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_21 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_21.x, max (tmpvar_21.y, tmpvar_21.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_22;
  tmpvar_22 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  tmpvar_10 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD3;
  highp vec4 tmpvar_25;
  tmpvar_25 = (_LightMatrix0 * tmpvar_24);
  lightCoord_6 = tmpvar_25;
  lowp vec4 tmpvar_26;
  mediump vec2 P_27;
  P_27 = ((lightCoord_6.xy / lightCoord_6.w) + 0.5);
  tmpvar_26 = texture2D (_LightTexture0, P_27);
  mediump float tmpvar_28;
  tmpvar_28 = dot (lightCoord_6.xyz, lightCoord_6.xyz);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_LightTextureB0, vec2(tmpvar_28));
  mediump float tmpvar_30;
  tmpvar_30 = ((float(
    (lightCoord_6.z > 0.0)
  ) * tmpvar_26.w) * tmpvar_29.w);
  atten_5 = tmpvar_30;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_23);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_23);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_23);
  lowp vec3 tmpvar_31;
  tmpvar_31 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_31;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_5);
  lowp vec4 c_32;
  lowp vec4 c_33;
  lowp float diff_34;
  mediump float tmpvar_35;
  tmpvar_35 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_34 = tmpvar_35;
  mediump vec3 tmpvar_36;
  tmpvar_36 = ((tmpvar_10 * tmpvar_1) * diff_34);
  c_33.xyz = tmpvar_36;
  c_33.w = tmpvar_11;
  c_32.w = c_33.w;
  mediump vec3 tmpvar_37;
  tmpvar_37 = c_33.xyz;
  c_32.xyz = tmpvar_37;
  c_4.xyz = c_32.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out lowp vec3 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out mediump vec4 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_16.xz;
  billboardPos_9.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_9;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_21.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_22.x + (tmpvar_22.y * tmpvar_22.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_18)));
    vPos_17 = (normalize(vPos_17) * fLength_19);
    billboardPos_9 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    ((_CameraXZAngle + tmpvar_15.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_28;
  } else {
    highp vec2 tmpvar_29;
    tmpvar_29 = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_29;
  };
  highp float tmpvar_30;
  tmpvar_30 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (tmpvar_31 * 0.5);
  highp vec2 tmpvar_34;
  tmpvar_34.x = tmpvar_33.x;
  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
  o_32.xy = (tmpvar_34 + tmpvar_33.w);
  o_32.zw = tmpvar_31.zw;
  highp vec3 tmpvar_35;
  tmpvar_35 = o_32.xyw;
  tmpvar_8 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_36;
  tmpvar_5 = _Color;
  highp vec4 v_37;
  v_37.x = _World2Object[0].x;
  v_37.y = _World2Object[1].x;
  v_37.z = _World2Object[2].x;
  v_37.w = _World2Object[3].x;
  highp vec4 v_38;
  v_38.x = _World2Object[0].y;
  v_38.y = _World2Object[1].y;
  v_38.z = _World2Object[2].y;
  v_38.w = _World2Object[3].y;
  highp vec4 v_39;
  v_39.x = _World2Object[0].z;
  v_39.y = _World2Object[1].z;
  v_39.z = _World2Object[2].z;
  v_39.w = _World2Object[3].z;
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize(((
    (v_37.xyz * _BillboardNormal.x)
   + 
    (v_38.xyz * _BillboardNormal.y)
  ) + (v_39.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_40;
  highp mat3 tmpvar_41;
  tmpvar_41[0] = _Object2World[0].xyz;
  tmpvar_41[1] = _Object2World[1].xyz;
  tmpvar_41[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize((tmpvar_41 * _BillboardTangent));
  worldTangent_3 = tmpvar_42;
  lowp vec3 tmpvar_43;
  tmpvar_43 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_44;
  tmpvar_44 = -(tmpvar_43);
  worldBinormal_2 = tmpvar_44;
  lowp vec3 tmpvar_45;
  tmpvar_45.x = worldTangent_3.x;
  tmpvar_45.y = worldBinormal_2.x;
  tmpvar_45.z = worldNormal_4.x;
  lowp vec3 tmpvar_46;
  tmpvar_46.x = worldTangent_3.y;
  tmpvar_46.y = worldBinormal_2.y;
  tmpvar_46.z = worldNormal_4.y;
  lowp vec3 tmpvar_47;
  tmpvar_47.x = worldTangent_3.z;
  tmpvar_47.y = worldBinormal_2.z;
  tmpvar_47.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_45;
  xlv_TEXCOORD1 = tmpvar_46;
  xlv_TEXCOORD2 = tmpvar_47;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in lowp vec3 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in mediump vec4 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp float atten_5;
  mediump vec4 lightCoord_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD4;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_7 = tmpvar_9;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_11 = tmpvar_19;
  lowp float x_20;
  x_20 = (tmpvar_11 - _Cutoff);
  if ((x_20 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_21 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_21.x, max (tmpvar_21.y, tmpvar_21.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_22;
  tmpvar_22 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  tmpvar_10 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = ((texture (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD3;
  highp vec4 tmpvar_25;
  tmpvar_25 = (_LightMatrix0 * tmpvar_24);
  lightCoord_6 = tmpvar_25;
  lowp vec4 tmpvar_26;
  mediump vec2 P_27;
  P_27 = ((lightCoord_6.xy / lightCoord_6.w) + 0.5);
  tmpvar_26 = texture (_LightTexture0, P_27);
  mediump float tmpvar_28;
  tmpvar_28 = dot (lightCoord_6.xyz, lightCoord_6.xyz);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture (_LightTextureB0, vec2(tmpvar_28));
  mediump float tmpvar_30;
  tmpvar_30 = ((float(
    (lightCoord_6.z > 0.0)
  ) * tmpvar_26.w) * tmpvar_29.w);
  atten_5 = tmpvar_30;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_23);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_23);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_23);
  lowp vec3 tmpvar_31;
  tmpvar_31 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_31;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_5);
  lowp vec4 c_32;
  lowp vec4 c_33;
  lowp float diff_34;
  mediump float tmpvar_35;
  tmpvar_35 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_34 = tmpvar_35;
  mediump vec3 tmpvar_36;
  tmpvar_36 = ((tmpvar_10 * tmpvar_1) * diff_34);
  c_33.xyz = tmpvar_36;
  c_33.w = tmpvar_11;
  c_32.w = c_33.w;
  mediump vec3 tmpvar_37;
  tmpvar_37 = c_33.xyz;
  c_32.xyz = tmpvar_37;
  c_4.xyz = c_32.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_16.xz;
  billboardPos_9.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_9;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_21.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_22.x + (tmpvar_22.y * tmpvar_22.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_18)));
    vPos_17 = (normalize(vPos_17) * fLength_19);
    billboardPos_9 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    ((_CameraXZAngle + tmpvar_15.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_28;
  } else {
    highp vec2 tmpvar_29;
    tmpvar_29 = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_29;
  };
  highp float tmpvar_30;
  tmpvar_30 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (tmpvar_31 * 0.5);
  highp vec2 tmpvar_34;
  tmpvar_34.x = tmpvar_33.x;
  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
  o_32.xy = (tmpvar_34 + tmpvar_33.w);
  o_32.zw = tmpvar_31.zw;
  highp vec3 tmpvar_35;
  tmpvar_35 = o_32.xyw;
  tmpvar_8 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_36;
  tmpvar_5 = _Color;
  highp vec4 v_37;
  v_37.x = _World2Object[0].x;
  v_37.y = _World2Object[1].x;
  v_37.z = _World2Object[2].x;
  v_37.w = _World2Object[3].x;
  highp vec4 v_38;
  v_38.x = _World2Object[0].y;
  v_38.y = _World2Object[1].y;
  v_38.z = _World2Object[2].y;
  v_38.w = _World2Object[3].y;
  highp vec4 v_39;
  v_39.x = _World2Object[0].z;
  v_39.y = _World2Object[1].z;
  v_39.z = _World2Object[2].z;
  v_39.w = _World2Object[3].z;
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize(((
    (v_37.xyz * _BillboardNormal.x)
   + 
    (v_38.xyz * _BillboardNormal.y)
  ) + (v_39.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_40;
  highp mat3 tmpvar_41;
  tmpvar_41[0] = _Object2World[0].xyz;
  tmpvar_41[1] = _Object2World[1].xyz;
  tmpvar_41[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize((tmpvar_41 * _BillboardTangent));
  worldTangent_3 = tmpvar_42;
  lowp vec3 tmpvar_43;
  tmpvar_43 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_44;
  tmpvar_44 = -(tmpvar_43);
  worldBinormal_2 = tmpvar_44;
  lowp vec3 tmpvar_45;
  tmpvar_45.x = worldTangent_3.x;
  tmpvar_45.y = worldBinormal_2.x;
  tmpvar_45.z = worldNormal_4.x;
  lowp vec3 tmpvar_46;
  tmpvar_46.x = worldTangent_3.y;
  tmpvar_46.y = worldBinormal_2.y;
  tmpvar_46.z = worldNormal_4.y;
  lowp vec3 tmpvar_47;
  tmpvar_47.x = worldTangent_3.z;
  tmpvar_47.y = worldBinormal_2.z;
  tmpvar_47.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_45;
  xlv_TEXCOORD1 = tmpvar_46;
  xlv_TEXCOORD2 = tmpvar_47;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec3 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_24;
  tmpvar_24 = (_LightMatrix0 * tmpvar_23).xyz;
  lightCoord_5 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (lightCoord_5, lightCoord_5);
  lowp float tmpvar_26;
  tmpvar_26 = (texture2D (_LightTextureB0, vec2(tmpvar_25)).w * textureCube (_LightTexture0, lightCoord_5).w);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_22);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_22);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_22);
  lowp vec3 tmpvar_27;
  tmpvar_27 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_27;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_26);
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_30 = tmpvar_31;
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tmpvar_9 * tmpvar_1) * diff_30);
  c_29.xyz = tmpvar_32;
  c_29.w = tmpvar_10;
  c_28.w = c_29.w;
  mediump vec3 tmpvar_33;
  tmpvar_33 = c_29.xyz;
  c_28.xyz = tmpvar_33;
  c_4.xyz = c_28.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out lowp vec3 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out mediump vec4 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_16.xz;
  billboardPos_9.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_9;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_21.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_22.x + (tmpvar_22.y * tmpvar_22.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_18)));
    vPos_17 = (normalize(vPos_17) * fLength_19);
    billboardPos_9 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    ((_CameraXZAngle + tmpvar_15.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_28;
  } else {
    highp vec2 tmpvar_29;
    tmpvar_29 = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_29;
  };
  highp float tmpvar_30;
  tmpvar_30 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (tmpvar_31 * 0.5);
  highp vec2 tmpvar_34;
  tmpvar_34.x = tmpvar_33.x;
  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
  o_32.xy = (tmpvar_34 + tmpvar_33.w);
  o_32.zw = tmpvar_31.zw;
  highp vec3 tmpvar_35;
  tmpvar_35 = o_32.xyw;
  tmpvar_8 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_36;
  tmpvar_5 = _Color;
  highp vec4 v_37;
  v_37.x = _World2Object[0].x;
  v_37.y = _World2Object[1].x;
  v_37.z = _World2Object[2].x;
  v_37.w = _World2Object[3].x;
  highp vec4 v_38;
  v_38.x = _World2Object[0].y;
  v_38.y = _World2Object[1].y;
  v_38.z = _World2Object[2].y;
  v_38.w = _World2Object[3].y;
  highp vec4 v_39;
  v_39.x = _World2Object[0].z;
  v_39.y = _World2Object[1].z;
  v_39.z = _World2Object[2].z;
  v_39.w = _World2Object[3].z;
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize(((
    (v_37.xyz * _BillboardNormal.x)
   + 
    (v_38.xyz * _BillboardNormal.y)
  ) + (v_39.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_40;
  highp mat3 tmpvar_41;
  tmpvar_41[0] = _Object2World[0].xyz;
  tmpvar_41[1] = _Object2World[1].xyz;
  tmpvar_41[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize((tmpvar_41 * _BillboardTangent));
  worldTangent_3 = tmpvar_42;
  lowp vec3 tmpvar_43;
  tmpvar_43 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_44;
  tmpvar_44 = -(tmpvar_43);
  worldBinormal_2 = tmpvar_44;
  lowp vec3 tmpvar_45;
  tmpvar_45.x = worldTangent_3.x;
  tmpvar_45.y = worldBinormal_2.x;
  tmpvar_45.z = worldNormal_4.x;
  lowp vec3 tmpvar_46;
  tmpvar_46.x = worldTangent_3.y;
  tmpvar_46.y = worldBinormal_2.y;
  tmpvar_46.z = worldNormal_4.y;
  lowp vec3 tmpvar_47;
  tmpvar_47.x = worldTangent_3.z;
  tmpvar_47.y = worldBinormal_2.z;
  tmpvar_47.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_45;
  xlv_TEXCOORD1 = tmpvar_46;
  xlv_TEXCOORD2 = tmpvar_47;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in lowp vec3 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in mediump vec4 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec3 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_24;
  tmpvar_24 = (_LightMatrix0 * tmpvar_23).xyz;
  lightCoord_5 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (lightCoord_5, lightCoord_5);
  lowp float tmpvar_26;
  tmpvar_26 = (texture (_LightTextureB0, vec2(tmpvar_25)).w * texture (_LightTexture0, lightCoord_5).w);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_22);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_22);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_22);
  lowp vec3 tmpvar_27;
  tmpvar_27 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_27;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_26);
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_30 = tmpvar_31;
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tmpvar_9 * tmpvar_1) * diff_30);
  c_29.xyz = tmpvar_32;
  c_29.w = tmpvar_10;
  c_28.w = c_29.w;
  mediump vec3 tmpvar_33;
  tmpvar_33 = c_29.xyz;
  c_28.xyz = tmpvar_33;
  c_4.xyz = c_28.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_16.xz;
  billboardPos_9.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_9;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_21.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_22.x + (tmpvar_22.y * tmpvar_22.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_18)));
    vPos_17 = (normalize(vPos_17) * fLength_19);
    billboardPos_9 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    ((_CameraXZAngle + tmpvar_15.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_28;
  } else {
    highp vec2 tmpvar_29;
    tmpvar_29 = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_29;
  };
  highp float tmpvar_30;
  tmpvar_30 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (tmpvar_31 * 0.5);
  highp vec2 tmpvar_34;
  tmpvar_34.x = tmpvar_33.x;
  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
  o_32.xy = (tmpvar_34 + tmpvar_33.w);
  o_32.zw = tmpvar_31.zw;
  highp vec3 tmpvar_35;
  tmpvar_35 = o_32.xyw;
  tmpvar_8 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_36;
  tmpvar_5 = _Color;
  highp vec4 v_37;
  v_37.x = _World2Object[0].x;
  v_37.y = _World2Object[1].x;
  v_37.z = _World2Object[2].x;
  v_37.w = _World2Object[3].x;
  highp vec4 v_38;
  v_38.x = _World2Object[0].y;
  v_38.y = _World2Object[1].y;
  v_38.z = _World2Object[2].y;
  v_38.w = _World2Object[3].y;
  highp vec4 v_39;
  v_39.x = _World2Object[0].z;
  v_39.y = _World2Object[1].z;
  v_39.z = _World2Object[2].z;
  v_39.w = _World2Object[3].z;
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize(((
    (v_37.xyz * _BillboardNormal.x)
   + 
    (v_38.xyz * _BillboardNormal.y)
  ) + (v_39.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_40;
  highp mat3 tmpvar_41;
  tmpvar_41[0] = _Object2World[0].xyz;
  tmpvar_41[1] = _Object2World[1].xyz;
  tmpvar_41[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize((tmpvar_41 * _BillboardTangent));
  worldTangent_3 = tmpvar_42;
  lowp vec3 tmpvar_43;
  tmpvar_43 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_44;
  tmpvar_44 = -(tmpvar_43);
  worldBinormal_2 = tmpvar_44;
  lowp vec3 tmpvar_45;
  tmpvar_45.x = worldTangent_3.x;
  tmpvar_45.y = worldBinormal_2.x;
  tmpvar_45.z = worldNormal_4.x;
  lowp vec3 tmpvar_46;
  tmpvar_46.x = worldTangent_3.y;
  tmpvar_46.y = worldBinormal_2.y;
  tmpvar_46.z = worldNormal_4.y;
  lowp vec3 tmpvar_47;
  tmpvar_47.x = worldTangent_3.z;
  tmpvar_47.y = worldBinormal_2.z;
  tmpvar_47.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_45;
  xlv_TEXCOORD1 = tmpvar_46;
  xlv_TEXCOORD2 = tmpvar_47;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec2 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = xlv_TEXCOORD3;
  highp vec2 tmpvar_24;
  tmpvar_24 = (_LightMatrix0 * tmpvar_23).xy;
  lightCoord_5 = tmpvar_24;
  lowp float tmpvar_25;
  tmpvar_25 = texture2D (_LightTexture0, lightCoord_5).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_22);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_22);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_22);
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_26;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_25);
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_29 = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tmpvar_9 * tmpvar_1) * diff_29);
  c_28.xyz = tmpvar_31;
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  mediump vec3 tmpvar_32;
  tmpvar_32 = c_28.xyz;
  c_27.xyz = tmpvar_32;
  c_4.xyz = c_27.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out lowp vec3 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out mediump vec4 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_16.xz;
  billboardPos_9.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_9;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_21.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_22.x + (tmpvar_22.y * tmpvar_22.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_18)));
    vPos_17 = (normalize(vPos_17) * fLength_19);
    billboardPos_9 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    ((_CameraXZAngle + tmpvar_15.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_28;
  } else {
    highp vec2 tmpvar_29;
    tmpvar_29 = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_29;
  };
  highp float tmpvar_30;
  tmpvar_30 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (tmpvar_31 * 0.5);
  highp vec2 tmpvar_34;
  tmpvar_34.x = tmpvar_33.x;
  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
  o_32.xy = (tmpvar_34 + tmpvar_33.w);
  o_32.zw = tmpvar_31.zw;
  highp vec3 tmpvar_35;
  tmpvar_35 = o_32.xyw;
  tmpvar_8 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_36;
  tmpvar_5 = _Color;
  highp vec4 v_37;
  v_37.x = _World2Object[0].x;
  v_37.y = _World2Object[1].x;
  v_37.z = _World2Object[2].x;
  v_37.w = _World2Object[3].x;
  highp vec4 v_38;
  v_38.x = _World2Object[0].y;
  v_38.y = _World2Object[1].y;
  v_38.z = _World2Object[2].y;
  v_38.w = _World2Object[3].y;
  highp vec4 v_39;
  v_39.x = _World2Object[0].z;
  v_39.y = _World2Object[1].z;
  v_39.z = _World2Object[2].z;
  v_39.w = _World2Object[3].z;
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize(((
    (v_37.xyz * _BillboardNormal.x)
   + 
    (v_38.xyz * _BillboardNormal.y)
  ) + (v_39.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_40;
  highp mat3 tmpvar_41;
  tmpvar_41[0] = _Object2World[0].xyz;
  tmpvar_41[1] = _Object2World[1].xyz;
  tmpvar_41[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize((tmpvar_41 * _BillboardTangent));
  worldTangent_3 = tmpvar_42;
  lowp vec3 tmpvar_43;
  tmpvar_43 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_44;
  tmpvar_44 = -(tmpvar_43);
  worldBinormal_2 = tmpvar_44;
  lowp vec3 tmpvar_45;
  tmpvar_45.x = worldTangent_3.x;
  tmpvar_45.y = worldBinormal_2.x;
  tmpvar_45.z = worldNormal_4.x;
  lowp vec3 tmpvar_46;
  tmpvar_46.x = worldTangent_3.y;
  tmpvar_46.y = worldBinormal_2.y;
  tmpvar_46.z = worldNormal_4.y;
  lowp vec3 tmpvar_47;
  tmpvar_47.x = worldTangent_3.z;
  tmpvar_47.y = worldBinormal_2.z;
  tmpvar_47.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_45;
  xlv_TEXCOORD1 = tmpvar_46;
  xlv_TEXCOORD2 = tmpvar_47;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in lowp vec3 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in mediump vec4 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec2 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = xlv_TEXCOORD3;
  highp vec2 tmpvar_24;
  tmpvar_24 = (_LightMatrix0 * tmpvar_23).xy;
  lightCoord_5 = tmpvar_24;
  lowp float tmpvar_25;
  tmpvar_25 = texture (_LightTexture0, lightCoord_5).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_22);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_22);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_22);
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_26;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_25);
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_29 = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tmpvar_9 * tmpvar_1) * diff_29);
  c_28.xyz = tmpvar_31;
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  mediump vec3 tmpvar_32;
  tmpvar_32 = c_28.xyz;
  c_27.xyz = tmpvar_32;
  c_4.xyz = c_27.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_40;
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * 0.5);
  highp vec2 tmpvar_44;
  tmpvar_44.x = tmpvar_43.x;
  tmpvar_44.y = (tmpvar_43.y * _ProjectionParams.x);
  o_42.xy = (tmpvar_44 + tmpvar_43.w);
  o_42.zw = tmpvar_41.zw;
  highp vec3 tmpvar_45;
  tmpvar_45 = o_42.xyw;
  tmpvar_7 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_46;
  tmpvar_4 = _Color;
  highp vec4 v_47;
  v_47.x = _World2Object[0].x;
  v_47.y = _World2Object[1].x;
  v_47.z = _World2Object[2].x;
  v_47.w = _World2Object[3].x;
  highp vec4 v_48;
  v_48.x = _World2Object[0].z;
  v_48.y = _World2Object[1].z;
  v_48.z = _World2Object[2].z;
  v_48.w = _World2Object[3].z;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(((v_47.xyz * tmpvar_16.z) + (v_48.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_49;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_22;
  tmpvar_22 = (_LightMatrix0 * tmpvar_21).xyz;
  lightCoord_4 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_24;
  tmpvar_24 = texture2D (_LightTexture0, vec2(tmpvar_23)).w;
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_25;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_24);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_28 = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tmpvar_9 * tmpvar_1) * diff_28);
  c_27.xyz = tmpvar_30;
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  mediump vec3 tmpvar_31;
  tmpvar_31 = c_27.xyz;
  c_26.xyz = tmpvar_31;
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_40;
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * 0.5);
  highp vec2 tmpvar_44;
  tmpvar_44.x = tmpvar_43.x;
  tmpvar_44.y = (tmpvar_43.y * _ProjectionParams.x);
  o_42.xy = (tmpvar_44 + tmpvar_43.w);
  o_42.zw = tmpvar_41.zw;
  highp vec3 tmpvar_45;
  tmpvar_45 = o_42.xyw;
  tmpvar_7 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_46;
  tmpvar_4 = _Color;
  highp vec4 v_47;
  v_47.x = _World2Object[0].x;
  v_47.y = _World2Object[1].x;
  v_47.z = _World2Object[2].x;
  v_47.w = _World2Object[3].x;
  highp vec4 v_48;
  v_48.x = _World2Object[0].z;
  v_48.y = _World2Object[1].z;
  v_48.z = _World2Object[2].z;
  v_48.w = _World2Object[3].z;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(((v_47.xyz * tmpvar_16.z) + (v_48.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_49;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_22;
  tmpvar_22 = (_LightMatrix0 * tmpvar_21).xyz;
  lightCoord_4 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_24;
  tmpvar_24 = texture (_LightTexture0, vec2(tmpvar_23)).w;
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_25;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_24);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_28 = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tmpvar_9 * tmpvar_1) * diff_28);
  c_27.xyz = tmpvar_30;
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  mediump vec3 tmpvar_31;
  tmpvar_31 = c_27.xyz;
  c_26.xyz = tmpvar_31;
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_40;
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * 0.5);
  highp vec2 tmpvar_44;
  tmpvar_44.x = tmpvar_43.x;
  tmpvar_44.y = (tmpvar_43.y * _ProjectionParams.x);
  o_42.xy = (tmpvar_44 + tmpvar_43.w);
  o_42.zw = tmpvar_41.zw;
  highp vec3 tmpvar_45;
  tmpvar_45 = o_42.xyw;
  tmpvar_7 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_46;
  tmpvar_4 = _Color;
  highp vec4 v_47;
  v_47.x = _World2Object[0].x;
  v_47.y = _World2Object[1].x;
  v_47.z = _World2Object[2].x;
  v_47.w = _World2Object[3].x;
  highp vec4 v_48;
  v_48.x = _World2Object[0].z;
  v_48.y = _World2Object[1].z;
  v_48.z = _World2Object[2].z;
  v_48.w = _World2Object[3].z;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(((v_47.xyz * tmpvar_16.z) + (v_48.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_49;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  mediump float tmpvar_13;
  tmpvar_13 = fract(tmpvar_12.y);
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_13 * 0.0625) + unity_LODFade.y);
  projUV_11.y = tmpvar_14;
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_17;
  lowp float x_18;
  x_18 = (tmpvar_9 - _Cutoff);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_20;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_23 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tmpvar_8 * tmpvar_1) * diff_23);
  c_22.xyz = tmpvar_25;
  c_22.w = tmpvar_9;
  c_21.w = c_22.w;
  mediump vec3 tmpvar_26;
  tmpvar_26 = c_22.xyz;
  c_21.xyz = tmpvar_26;
  c_3.xyz = c_21.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_40;
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * 0.5);
  highp vec2 tmpvar_44;
  tmpvar_44.x = tmpvar_43.x;
  tmpvar_44.y = (tmpvar_43.y * _ProjectionParams.x);
  o_42.xy = (tmpvar_44 + tmpvar_43.w);
  o_42.zw = tmpvar_41.zw;
  highp vec3 tmpvar_45;
  tmpvar_45 = o_42.xyw;
  tmpvar_7 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_46;
  tmpvar_4 = _Color;
  highp vec4 v_47;
  v_47.x = _World2Object[0].x;
  v_47.y = _World2Object[1].x;
  v_47.z = _World2Object[2].x;
  v_47.w = _World2Object[3].x;
  highp vec4 v_48;
  v_48.x = _World2Object[0].z;
  v_48.y = _World2Object[1].z;
  v_48.z = _World2Object[2].z;
  v_48.w = _World2Object[3].z;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(((v_47.xyz * tmpvar_16.z) + (v_48.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_49;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  mediump float tmpvar_13;
  tmpvar_13 = fract(tmpvar_12.y);
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_13 * 0.0625) + unity_LODFade.y);
  projUV_11.y = tmpvar_14;
  lowp float x_15;
  x_15 = (texture (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_17;
  lowp float x_18;
  x_18 = (tmpvar_9 - _Cutoff);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_20;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_23 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tmpvar_8 * tmpvar_1) * diff_23);
  c_22.xyz = tmpvar_25;
  c_22.w = tmpvar_9;
  c_21.w = c_22.w;
  mediump vec3 tmpvar_26;
  tmpvar_26 = c_22.xyz;
  c_21.xyz = tmpvar_26;
  c_3.xyz = c_21.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_40;
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * 0.5);
  highp vec2 tmpvar_44;
  tmpvar_44.x = tmpvar_43.x;
  tmpvar_44.y = (tmpvar_43.y * _ProjectionParams.x);
  o_42.xy = (tmpvar_44 + tmpvar_43.w);
  o_42.zw = tmpvar_41.zw;
  highp vec3 tmpvar_45;
  tmpvar_45 = o_42.xyw;
  tmpvar_7 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_46;
  tmpvar_4 = _Color;
  highp vec4 v_47;
  v_47.x = _World2Object[0].x;
  v_47.y = _World2Object[1].x;
  v_47.z = _World2Object[2].x;
  v_47.w = _World2Object[3].x;
  highp vec4 v_48;
  v_48.x = _World2Object[0].z;
  v_48.y = _World2Object[1].z;
  v_48.z = _World2Object[2].z;
  v_48.w = _World2Object[3].z;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(((v_47.xyz * tmpvar_16.z) + (v_48.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_49;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_11 = tmpvar_19;
  lowp float x_20;
  x_20 = (tmpvar_11 - _Cutoff);
  if ((x_20 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  tmpvar_10 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_LightMatrix0 * tmpvar_22);
  lightCoord_5 = tmpvar_23;
  lowp vec4 tmpvar_24;
  mediump vec2 P_25;
  P_25 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_24 = texture2D (_LightTexture0, P_25);
  mediump float tmpvar_26;
  tmpvar_26 = dot (lightCoord_5.xyz, lightCoord_5.xyz);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_LightTextureB0, vec2(tmpvar_26));
  mediump float tmpvar_28;
  tmpvar_28 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_24.w) * tmpvar_27.w);
  atten_4 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_29;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_32 = tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_10 * tmpvar_1) * diff_32);
  c_31.xyz = tmpvar_34;
  c_31.w = tmpvar_11;
  c_30.w = c_31.w;
  mediump vec3 tmpvar_35;
  tmpvar_35 = c_31.xyz;
  c_30.xyz = tmpvar_35;
  c_3.xyz = c_30.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_40;
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * 0.5);
  highp vec2 tmpvar_44;
  tmpvar_44.x = tmpvar_43.x;
  tmpvar_44.y = (tmpvar_43.y * _ProjectionParams.x);
  o_42.xy = (tmpvar_44 + tmpvar_43.w);
  o_42.zw = tmpvar_41.zw;
  highp vec3 tmpvar_45;
  tmpvar_45 = o_42.xyw;
  tmpvar_7 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_46;
  tmpvar_4 = _Color;
  highp vec4 v_47;
  v_47.x = _World2Object[0].x;
  v_47.y = _World2Object[1].x;
  v_47.z = _World2Object[2].x;
  v_47.w = _World2Object[3].x;
  highp vec4 v_48;
  v_48.x = _World2Object[0].z;
  v_48.y = _World2Object[1].z;
  v_48.z = _World2Object[2].z;
  v_48.w = _World2Object[3].z;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(((v_47.xyz * tmpvar_16.z) + (v_48.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_49;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_11 = tmpvar_19;
  lowp float x_20;
  x_20 = (tmpvar_11 - _Cutoff);
  if ((x_20 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  tmpvar_10 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_LightMatrix0 * tmpvar_22);
  lightCoord_5 = tmpvar_23;
  lowp vec4 tmpvar_24;
  mediump vec2 P_25;
  P_25 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_24 = texture (_LightTexture0, P_25);
  mediump float tmpvar_26;
  tmpvar_26 = dot (lightCoord_5.xyz, lightCoord_5.xyz);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture (_LightTextureB0, vec2(tmpvar_26));
  mediump float tmpvar_28;
  tmpvar_28 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_24.w) * tmpvar_27.w);
  atten_4 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_29;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_32 = tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_10 * tmpvar_1) * diff_32);
  c_31.xyz = tmpvar_34;
  c_31.w = tmpvar_11;
  c_30.w = c_31.w;
  mediump vec3 tmpvar_35;
  tmpvar_35 = c_31.xyz;
  c_30.xyz = tmpvar_35;
  c_3.xyz = c_30.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_40;
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * 0.5);
  highp vec2 tmpvar_44;
  tmpvar_44.x = tmpvar_43.x;
  tmpvar_44.y = (tmpvar_43.y * _ProjectionParams.x);
  o_42.xy = (tmpvar_44 + tmpvar_43.w);
  o_42.zw = tmpvar_41.zw;
  highp vec3 tmpvar_45;
  tmpvar_45 = o_42.xyw;
  tmpvar_7 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_46;
  tmpvar_4 = _Color;
  highp vec4 v_47;
  v_47.x = _World2Object[0].x;
  v_47.y = _World2Object[1].x;
  v_47.z = _World2Object[2].x;
  v_47.w = _World2Object[3].x;
  highp vec4 v_48;
  v_48.x = _World2Object[0].z;
  v_48.y = _World2Object[1].z;
  v_48.z = _World2Object[2].z;
  v_48.w = _World2Object[3].z;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(((v_47.xyz * tmpvar_16.z) + (v_48.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_49;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_22;
  tmpvar_22 = (_LightMatrix0 * tmpvar_21).xyz;
  lightCoord_4 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_24;
  tmpvar_24 = (texture2D (_LightTextureB0, vec2(tmpvar_23)).w * textureCube (_LightTexture0, lightCoord_4).w);
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_25;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_24);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_28 = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tmpvar_9 * tmpvar_1) * diff_28);
  c_27.xyz = tmpvar_30;
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  mediump vec3 tmpvar_31;
  tmpvar_31 = c_27.xyz;
  c_26.xyz = tmpvar_31;
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_40;
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * 0.5);
  highp vec2 tmpvar_44;
  tmpvar_44.x = tmpvar_43.x;
  tmpvar_44.y = (tmpvar_43.y * _ProjectionParams.x);
  o_42.xy = (tmpvar_44 + tmpvar_43.w);
  o_42.zw = tmpvar_41.zw;
  highp vec3 tmpvar_45;
  tmpvar_45 = o_42.xyw;
  tmpvar_7 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_46;
  tmpvar_4 = _Color;
  highp vec4 v_47;
  v_47.x = _World2Object[0].x;
  v_47.y = _World2Object[1].x;
  v_47.z = _World2Object[2].x;
  v_47.w = _World2Object[3].x;
  highp vec4 v_48;
  v_48.x = _World2Object[0].z;
  v_48.y = _World2Object[1].z;
  v_48.z = _World2Object[2].z;
  v_48.w = _World2Object[3].z;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(((v_47.xyz * tmpvar_16.z) + (v_48.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_49;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_22;
  tmpvar_22 = (_LightMatrix0 * tmpvar_21).xyz;
  lightCoord_4 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_24;
  tmpvar_24 = (texture (_LightTextureB0, vec2(tmpvar_23)).w * texture (_LightTexture0, lightCoord_4).w);
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_25;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_24);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_28 = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tmpvar_9 * tmpvar_1) * diff_28);
  c_27.xyz = tmpvar_30;
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  mediump vec3 tmpvar_31;
  tmpvar_31 = c_27.xyz;
  c_26.xyz = tmpvar_31;
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_40;
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * 0.5);
  highp vec2 tmpvar_44;
  tmpvar_44.x = tmpvar_43.x;
  tmpvar_44.y = (tmpvar_43.y * _ProjectionParams.x);
  o_42.xy = (tmpvar_44 + tmpvar_43.w);
  o_42.zw = tmpvar_41.zw;
  highp vec3 tmpvar_45;
  tmpvar_45 = o_42.xyw;
  tmpvar_7 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_46;
  tmpvar_4 = _Color;
  highp vec4 v_47;
  v_47.x = _World2Object[0].x;
  v_47.y = _World2Object[1].x;
  v_47.z = _World2Object[2].x;
  v_47.w = _World2Object[3].x;
  highp vec4 v_48;
  v_48.x = _World2Object[0].z;
  v_48.y = _World2Object[1].z;
  v_48.z = _World2Object[2].z;
  v_48.w = _World2Object[3].z;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(((v_47.xyz * tmpvar_16.z) + (v_48.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_49;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec2 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_22;
  tmpvar_22 = (_LightMatrix0 * tmpvar_21).xy;
  lightCoord_4 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = texture2D (_LightTexture0, lightCoord_4).w;
  lowp vec3 tmpvar_24;
  tmpvar_24 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_24;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_23);
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_27 = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_9 * tmpvar_1) * diff_27);
  c_26.xyz = tmpvar_29;
  c_26.w = tmpvar_10;
  c_25.w = c_26.w;
  mediump vec3 tmpvar_30;
  tmpvar_30 = c_26.xyz;
  c_25.xyz = tmpvar_30;
  c_3.xyz = c_25.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_40;
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * 0.5);
  highp vec2 tmpvar_44;
  tmpvar_44.x = tmpvar_43.x;
  tmpvar_44.y = (tmpvar_43.y * _ProjectionParams.x);
  o_42.xy = (tmpvar_44 + tmpvar_43.w);
  o_42.zw = tmpvar_41.zw;
  highp vec3 tmpvar_45;
  tmpvar_45 = o_42.xyw;
  tmpvar_7 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_46;
  tmpvar_4 = _Color;
  highp vec4 v_47;
  v_47.x = _World2Object[0].x;
  v_47.y = _World2Object[1].x;
  v_47.z = _World2Object[2].x;
  v_47.w = _World2Object[3].x;
  highp vec4 v_48;
  v_48.x = _World2Object[0].z;
  v_48.y = _World2Object[1].z;
  v_48.z = _World2Object[2].z;
  v_48.w = _World2Object[3].z;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(((v_47.xyz * tmpvar_16.z) + (v_48.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_49;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec2 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_22;
  tmpvar_22 = (_LightMatrix0 * tmpvar_21).xy;
  lightCoord_4 = tmpvar_22;
  lowp float tmpvar_23;
  tmpvar_23 = texture (_LightTexture0, lightCoord_4).w;
  lowp vec3 tmpvar_24;
  tmpvar_24 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_24;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_23);
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_27 = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_9 * tmpvar_1) * diff_27);
  c_26.xyz = tmpvar_29;
  c_26.w = tmpvar_10;
  c_25.w = c_26.w;
  mediump vec3 tmpvar_30;
  tmpvar_30 = c_26.xyz;
  c_25.xyz = tmpvar_30;
  c_3.xyz = c_25.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_40;
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_41;
  highp vec4 tmpvar_42;
  tmpvar_42 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_42 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = tmpvar_42.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  tmpvar_7 = tmpvar_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_47;
  tmpvar_4 = _Color;
  highp vec4 v_48;
  v_48.x = _World2Object[0].x;
  v_48.y = _World2Object[1].x;
  v_48.z = _World2Object[2].x;
  v_48.w = _World2Object[3].x;
  highp vec4 v_49;
  v_49.x = _World2Object[0].z;
  v_49.y = _World2Object[1].z;
  v_49.z = _World2Object[2].z;
  v_49.w = _World2Object[3].z;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(((v_48.xyz * tmpvar_16.z) + (v_49.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_50;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_23;
  tmpvar_23 = (_LightMatrix0 * tmpvar_22).xyz;
  lightCoord_4 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_25;
  tmpvar_25 = texture2D (_LightTexture0, vec2(tmpvar_24)).w;
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_26;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_25);
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_29 = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tmpvar_9 * tmpvar_1) * diff_29);
  c_28.xyz = tmpvar_31;
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  mediump vec3 tmpvar_32;
  tmpvar_32 = c_28.xyz;
  c_27.xyz = tmpvar_32;
  c_3.xyz = c_27.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_40;
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_41;
  highp vec4 tmpvar_42;
  tmpvar_42 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_42 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = tmpvar_42.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  tmpvar_7 = tmpvar_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_47;
  tmpvar_4 = _Color;
  highp vec4 v_48;
  v_48.x = _World2Object[0].x;
  v_48.y = _World2Object[1].x;
  v_48.z = _World2Object[2].x;
  v_48.w = _World2Object[3].x;
  highp vec4 v_49;
  v_49.x = _World2Object[0].z;
  v_49.y = _World2Object[1].z;
  v_49.z = _World2Object[2].z;
  v_49.w = _World2Object[3].z;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(((v_48.xyz * tmpvar_16.z) + (v_49.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_50;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_23;
  tmpvar_23 = (_LightMatrix0 * tmpvar_22).xyz;
  lightCoord_4 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_25;
  tmpvar_25 = texture (_LightTexture0, vec2(tmpvar_24)).w;
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_26;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_25);
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_29 = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tmpvar_9 * tmpvar_1) * diff_29);
  c_28.xyz = tmpvar_31;
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  mediump vec3 tmpvar_32;
  tmpvar_32 = c_28.xyz;
  c_27.xyz = tmpvar_32;
  c_3.xyz = c_27.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_40;
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_41;
  highp vec4 tmpvar_42;
  tmpvar_42 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_42 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = tmpvar_42.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  tmpvar_7 = tmpvar_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_47;
  tmpvar_4 = _Color;
  highp vec4 v_48;
  v_48.x = _World2Object[0].x;
  v_48.y = _World2Object[1].x;
  v_48.z = _World2Object[2].x;
  v_48.w = _World2Object[3].x;
  highp vec4 v_49;
  v_49.x = _World2Object[0].z;
  v_49.y = _World2Object[1].z;
  v_49.z = _World2Object[2].z;
  v_49.w = _World2Object[3].z;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(((v_48.xyz * tmpvar_16.z) + (v_49.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_50;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  mediump float tmpvar_13;
  tmpvar_13 = fract(tmpvar_12.y);
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_13 * 0.0625) + unity_LODFade.y);
  projUV_11.y = tmpvar_14;
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_17;
  lowp float x_18;
  x_18 = (tmpvar_9 - _Cutoff);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_19 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_21;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_24 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.xyz = tmpvar_26;
  c_23.w = tmpvar_9;
  c_22.w = c_23.w;
  mediump vec3 tmpvar_27;
  tmpvar_27 = c_23.xyz;
  c_22.xyz = tmpvar_27;
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_40;
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_41;
  highp vec4 tmpvar_42;
  tmpvar_42 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_42 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = tmpvar_42.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  tmpvar_7 = tmpvar_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_47;
  tmpvar_4 = _Color;
  highp vec4 v_48;
  v_48.x = _World2Object[0].x;
  v_48.y = _World2Object[1].x;
  v_48.z = _World2Object[2].x;
  v_48.w = _World2Object[3].x;
  highp vec4 v_49;
  v_49.x = _World2Object[0].z;
  v_49.y = _World2Object[1].z;
  v_49.z = _World2Object[2].z;
  v_49.w = _World2Object[3].z;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(((v_48.xyz * tmpvar_16.z) + (v_49.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_50;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  mediump float tmpvar_13;
  tmpvar_13 = fract(tmpvar_12.y);
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_13 * 0.0625) + unity_LODFade.y);
  projUV_11.y = tmpvar_14;
  lowp float x_15;
  x_15 = (texture (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_17;
  lowp float x_18;
  x_18 = (tmpvar_9 - _Cutoff);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_19 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_21;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_24 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.xyz = tmpvar_26;
  c_23.w = tmpvar_9;
  c_22.w = c_23.w;
  mediump vec3 tmpvar_27;
  tmpvar_27 = c_23.xyz;
  c_22.xyz = tmpvar_27;
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_40;
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_41;
  highp vec4 tmpvar_42;
  tmpvar_42 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_42 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = tmpvar_42.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  tmpvar_7 = tmpvar_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_47;
  tmpvar_4 = _Color;
  highp vec4 v_48;
  v_48.x = _World2Object[0].x;
  v_48.y = _World2Object[1].x;
  v_48.z = _World2Object[2].x;
  v_48.w = _World2Object[3].x;
  highp vec4 v_49;
  v_49.x = _World2Object[0].z;
  v_49.y = _World2Object[1].z;
  v_49.z = _World2Object[2].z;
  v_49.w = _World2Object[3].z;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(((v_48.xyz * tmpvar_16.z) + (v_49.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_50;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_11 = tmpvar_19;
  lowp float x_20;
  x_20 = (tmpvar_11 - _Cutoff);
  if ((x_20 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_21 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_21.x, max (tmpvar_21.y, tmpvar_21.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_22;
  tmpvar_22 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  tmpvar_10 = tmpvar_22;
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_24;
  tmpvar_24 = (_LightMatrix0 * tmpvar_23);
  lightCoord_5 = tmpvar_24;
  lowp vec4 tmpvar_25;
  mediump vec2 P_26;
  P_26 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_25 = texture2D (_LightTexture0, P_26);
  mediump float tmpvar_27;
  tmpvar_27 = dot (lightCoord_5.xyz, lightCoord_5.xyz);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_LightTextureB0, vec2(tmpvar_27));
  mediump float tmpvar_29;
  tmpvar_29 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_25.w) * tmpvar_28.w);
  atten_4 = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_30;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_33 = tmpvar_34;
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tmpvar_10 * tmpvar_1) * diff_33);
  c_32.xyz = tmpvar_35;
  c_32.w = tmpvar_11;
  c_31.w = c_32.w;
  mediump vec3 tmpvar_36;
  tmpvar_36 = c_32.xyz;
  c_31.xyz = tmpvar_36;
  c_3.xyz = c_31.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_40;
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_41;
  highp vec4 tmpvar_42;
  tmpvar_42 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_42 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = tmpvar_42.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  tmpvar_7 = tmpvar_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_47;
  tmpvar_4 = _Color;
  highp vec4 v_48;
  v_48.x = _World2Object[0].x;
  v_48.y = _World2Object[1].x;
  v_48.z = _World2Object[2].x;
  v_48.w = _World2Object[3].x;
  highp vec4 v_49;
  v_49.x = _World2Object[0].z;
  v_49.y = _World2Object[1].z;
  v_49.z = _World2Object[2].z;
  v_49.w = _World2Object[3].z;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(((v_48.xyz * tmpvar_16.z) + (v_49.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_50;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_11 = tmpvar_19;
  lowp float x_20;
  x_20 = (tmpvar_11 - _Cutoff);
  if ((x_20 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_21 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_21.x, max (tmpvar_21.y, tmpvar_21.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_22;
  tmpvar_22 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  tmpvar_10 = tmpvar_22;
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_24;
  tmpvar_24 = (_LightMatrix0 * tmpvar_23);
  lightCoord_5 = tmpvar_24;
  lowp vec4 tmpvar_25;
  mediump vec2 P_26;
  P_26 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_25 = texture (_LightTexture0, P_26);
  mediump float tmpvar_27;
  tmpvar_27 = dot (lightCoord_5.xyz, lightCoord_5.xyz);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture (_LightTextureB0, vec2(tmpvar_27));
  mediump float tmpvar_29;
  tmpvar_29 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_25.w) * tmpvar_28.w);
  atten_4 = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_30;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_33 = tmpvar_34;
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tmpvar_10 * tmpvar_1) * diff_33);
  c_32.xyz = tmpvar_35;
  c_32.w = tmpvar_11;
  c_31.w = c_32.w;
  mediump vec3 tmpvar_36;
  tmpvar_36 = c_32.xyz;
  c_31.xyz = tmpvar_36;
  c_3.xyz = c_31.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_40;
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_41;
  highp vec4 tmpvar_42;
  tmpvar_42 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_42 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = tmpvar_42.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  tmpvar_7 = tmpvar_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_47;
  tmpvar_4 = _Color;
  highp vec4 v_48;
  v_48.x = _World2Object[0].x;
  v_48.y = _World2Object[1].x;
  v_48.z = _World2Object[2].x;
  v_48.w = _World2Object[3].x;
  highp vec4 v_49;
  v_49.x = _World2Object[0].z;
  v_49.y = _World2Object[1].z;
  v_49.z = _World2Object[2].z;
  v_49.w = _World2Object[3].z;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(((v_48.xyz * tmpvar_16.z) + (v_49.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_50;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_23;
  tmpvar_23 = (_LightMatrix0 * tmpvar_22).xyz;
  lightCoord_4 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_25;
  tmpvar_25 = (texture2D (_LightTextureB0, vec2(tmpvar_24)).w * textureCube (_LightTexture0, lightCoord_4).w);
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_26;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_25);
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_29 = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tmpvar_9 * tmpvar_1) * diff_29);
  c_28.xyz = tmpvar_31;
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  mediump vec3 tmpvar_32;
  tmpvar_32 = c_28.xyz;
  c_27.xyz = tmpvar_32;
  c_3.xyz = c_27.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_40;
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_41;
  highp vec4 tmpvar_42;
  tmpvar_42 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_42 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = tmpvar_42.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  tmpvar_7 = tmpvar_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_47;
  tmpvar_4 = _Color;
  highp vec4 v_48;
  v_48.x = _World2Object[0].x;
  v_48.y = _World2Object[1].x;
  v_48.z = _World2Object[2].x;
  v_48.w = _World2Object[3].x;
  highp vec4 v_49;
  v_49.x = _World2Object[0].z;
  v_49.y = _World2Object[1].z;
  v_49.z = _World2Object[2].z;
  v_49.w = _World2Object[3].z;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(((v_48.xyz * tmpvar_16.z) + (v_49.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_50;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_23;
  tmpvar_23 = (_LightMatrix0 * tmpvar_22).xyz;
  lightCoord_4 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_25;
  tmpvar_25 = (texture (_LightTextureB0, vec2(tmpvar_24)).w * texture (_LightTexture0, lightCoord_4).w);
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_26;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_25);
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_29 = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tmpvar_9 * tmpvar_1) * diff_29);
  c_28.xyz = tmpvar_31;
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  mediump vec3 tmpvar_32;
  tmpvar_32 = c_28.xyz;
  c_27.xyz = tmpvar_32;
  c_3.xyz = c_27.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_40;
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_41;
  highp vec4 tmpvar_42;
  tmpvar_42 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_42 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = tmpvar_42.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  tmpvar_7 = tmpvar_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_47;
  tmpvar_4 = _Color;
  highp vec4 v_48;
  v_48.x = _World2Object[0].x;
  v_48.y = _World2Object[1].x;
  v_48.z = _World2Object[2].x;
  v_48.w = _World2Object[3].x;
  highp vec4 v_49;
  v_49.x = _World2Object[0].z;
  v_49.y = _World2Object[1].z;
  v_49.z = _World2Object[2].z;
  v_49.w = _World2Object[3].z;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(((v_48.xyz * tmpvar_16.z) + (v_49.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_50;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec2 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_23;
  tmpvar_23 = (_LightMatrix0 * tmpvar_22).xy;
  lightCoord_4 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = texture2D (_LightTexture0, lightCoord_4).w;
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_25;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_24);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_28 = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tmpvar_9 * tmpvar_1) * diff_28);
  c_27.xyz = tmpvar_30;
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  mediump vec3 tmpvar_31;
  tmpvar_31 = c_27.xyz;
  c_26.xyz = tmpvar_31;
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_40;
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_41;
  highp vec4 tmpvar_42;
  tmpvar_42 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_42 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = tmpvar_42.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  tmpvar_7 = tmpvar_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_47;
  tmpvar_4 = _Color;
  highp vec4 v_48;
  v_48.x = _World2Object[0].x;
  v_48.y = _World2Object[1].x;
  v_48.z = _World2Object[2].x;
  v_48.w = _World2Object[3].x;
  highp vec4 v_49;
  v_49.x = _World2Object[0].z;
  v_49.y = _World2Object[1].z;
  v_49.z = _World2Object[2].z;
  v_49.w = _World2Object[3].z;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(((v_48.xyz * tmpvar_16.z) + (v_49.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_50;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec2 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_23;
  tmpvar_23 = (_LightMatrix0 * tmpvar_22).xy;
  lightCoord_4 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = texture (_LightTexture0, lightCoord_4).w;
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_25;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_24);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_28 = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tmpvar_9 * tmpvar_1) * diff_28);
  c_27.xyz = tmpvar_30;
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  mediump vec3 tmpvar_31;
  tmpvar_31 = c_27.xyz;
  c_26.xyz = tmpvar_31;
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_18.z / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.570796 + (abs(tmpvar_19) * (-0.2146018 + (
        abs(tmpvar_19)
       * 
        (0.08656672 + (abs(tmpvar_19) * -0.03102955))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  highp vec3 tmpvar_26;
  tmpvar_26 = (vec3(tmpvar_19) + tmpvar_25);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_9.xz = tmpvar_28.xz;
  billboardPos_9.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_9;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_33.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_34.x + (tmpvar_34.y * tmpvar_34.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_30)));
    vPos_29 = (normalize(vPos_29) * fLength_31);
    billboardPos_9 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    ((tmpvar_26 + tmpvar_27.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_11.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_40;
  } else {
    highp vec2 tmpvar_41;
    tmpvar_41 = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_41;
  };
  highp vec4 tmpvar_42;
  tmpvar_42 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_42 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = tmpvar_42.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  tmpvar_8 = tmpvar_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_47;
  tmpvar_5 = _Color;
  highp vec4 v_48;
  v_48.x = _World2Object[0].x;
  v_48.y = _World2Object[1].x;
  v_48.z = _World2Object[2].x;
  v_48.w = _World2Object[3].x;
  highp vec4 v_49;
  v_49.x = _World2Object[0].z;
  v_49.y = _World2Object[1].z;
  v_49.z = _World2Object[2].z;
  v_49.w = _World2Object[3].z;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(((v_48.xyz * tmpvar_17.z) + (v_49.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_50;
  highp mat3 tmpvar_51;
  tmpvar_51[0] = _Object2World[0].xyz;
  tmpvar_51[1] = _Object2World[1].xyz;
  tmpvar_51[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_52;
  tmpvar_52 = normalize((tmpvar_51 * tmpvar_17));
  worldTangent_3 = tmpvar_52;
  lowp vec3 tmpvar_53;
  tmpvar_53 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_54;
  tmpvar_54 = -(tmpvar_53);
  worldBinormal_2 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55.x = worldTangent_3.x;
  tmpvar_55.y = worldBinormal_2.x;
  tmpvar_55.z = worldNormal_4.x;
  lowp vec3 tmpvar_56;
  tmpvar_56.x = worldTangent_3.y;
  tmpvar_56.y = worldBinormal_2.y;
  tmpvar_56.z = worldNormal_4.y;
  lowp vec3 tmpvar_57;
  tmpvar_57.x = worldTangent_3.z;
  tmpvar_57.y = worldBinormal_2.z;
  tmpvar_57.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_55;
  xlv_TEXCOORD1 = tmpvar_56;
  xlv_TEXCOORD2 = tmpvar_57;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec3 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_23;
  tmpvar_23 = (_LightMatrix0 * tmpvar_22).xyz;
  lightCoord_5 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (lightCoord_5, lightCoord_5);
  lowp float tmpvar_25;
  tmpvar_25 = texture2D (_LightTexture0, vec2(tmpvar_24)).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_21);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_21);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_21);
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_26;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_25);
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_29 = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tmpvar_9 * tmpvar_1) * diff_29);
  c_28.xyz = tmpvar_31;
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  mediump vec3 tmpvar_32;
  tmpvar_32 = c_28.xyz;
  c_27.xyz = tmpvar_32;
  c_4.xyz = c_27.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out lowp vec3 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out mediump vec4 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_18.z / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.570796 + (abs(tmpvar_19) * (-0.2146018 + (
        abs(tmpvar_19)
       * 
        (0.08656672 + (abs(tmpvar_19) * -0.03102955))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  highp vec3 tmpvar_26;
  tmpvar_26 = (vec3(tmpvar_19) + tmpvar_25);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_9.xz = tmpvar_28.xz;
  billboardPos_9.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_9;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_33.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_34.x + (tmpvar_34.y * tmpvar_34.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_30)));
    vPos_29 = (normalize(vPos_29) * fLength_31);
    billboardPos_9 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    ((tmpvar_26 + tmpvar_27.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_11.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_40;
  } else {
    highp vec2 tmpvar_41;
    tmpvar_41 = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_41;
  };
  highp vec4 tmpvar_42;
  tmpvar_42 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_42 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = tmpvar_42.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  tmpvar_8 = tmpvar_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_47;
  tmpvar_5 = _Color;
  highp vec4 v_48;
  v_48.x = _World2Object[0].x;
  v_48.y = _World2Object[1].x;
  v_48.z = _World2Object[2].x;
  v_48.w = _World2Object[3].x;
  highp vec4 v_49;
  v_49.x = _World2Object[0].z;
  v_49.y = _World2Object[1].z;
  v_49.z = _World2Object[2].z;
  v_49.w = _World2Object[3].z;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(((v_48.xyz * tmpvar_17.z) + (v_49.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_50;
  highp mat3 tmpvar_51;
  tmpvar_51[0] = _Object2World[0].xyz;
  tmpvar_51[1] = _Object2World[1].xyz;
  tmpvar_51[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_52;
  tmpvar_52 = normalize((tmpvar_51 * tmpvar_17));
  worldTangent_3 = tmpvar_52;
  lowp vec3 tmpvar_53;
  tmpvar_53 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_54;
  tmpvar_54 = -(tmpvar_53);
  worldBinormal_2 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55.x = worldTangent_3.x;
  tmpvar_55.y = worldBinormal_2.x;
  tmpvar_55.z = worldNormal_4.x;
  lowp vec3 tmpvar_56;
  tmpvar_56.x = worldTangent_3.y;
  tmpvar_56.y = worldBinormal_2.y;
  tmpvar_56.z = worldNormal_4.y;
  lowp vec3 tmpvar_57;
  tmpvar_57.x = worldTangent_3.z;
  tmpvar_57.y = worldBinormal_2.z;
  tmpvar_57.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_55;
  xlv_TEXCOORD1 = tmpvar_56;
  xlv_TEXCOORD2 = tmpvar_57;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in lowp vec3 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in mediump vec4 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec3 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((texture (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_23;
  tmpvar_23 = (_LightMatrix0 * tmpvar_22).xyz;
  lightCoord_5 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (lightCoord_5, lightCoord_5);
  lowp float tmpvar_25;
  tmpvar_25 = texture (_LightTexture0, vec2(tmpvar_24)).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_21);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_21);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_21);
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_26;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_25);
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_29 = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tmpvar_9 * tmpvar_1) * diff_29);
  c_28.xyz = tmpvar_31;
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  mediump vec3 tmpvar_32;
  tmpvar_32 = c_28.xyz;
  c_27.xyz = tmpvar_32;
  c_4.xyz = c_27.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_18.z / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.570796 + (abs(tmpvar_19) * (-0.2146018 + (
        abs(tmpvar_19)
       * 
        (0.08656672 + (abs(tmpvar_19) * -0.03102955))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  highp vec3 tmpvar_26;
  tmpvar_26 = (vec3(tmpvar_19) + tmpvar_25);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_9.xz = tmpvar_28.xz;
  billboardPos_9.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_9;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_33.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_34.x + (tmpvar_34.y * tmpvar_34.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_30)));
    vPos_29 = (normalize(vPos_29) * fLength_31);
    billboardPos_9 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    ((tmpvar_26 + tmpvar_27.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_11.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_40;
  } else {
    highp vec2 tmpvar_41;
    tmpvar_41 = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_41;
  };
  highp vec4 tmpvar_42;
  tmpvar_42 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_42 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = tmpvar_42.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  tmpvar_8 = tmpvar_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_47;
  tmpvar_5 = _Color;
  highp vec4 v_48;
  v_48.x = _World2Object[0].x;
  v_48.y = _World2Object[1].x;
  v_48.z = _World2Object[2].x;
  v_48.w = _World2Object[3].x;
  highp vec4 v_49;
  v_49.x = _World2Object[0].z;
  v_49.y = _World2Object[1].z;
  v_49.z = _World2Object[2].z;
  v_49.w = _World2Object[3].z;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(((v_48.xyz * tmpvar_17.z) + (v_49.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_50;
  highp mat3 tmpvar_51;
  tmpvar_51[0] = _Object2World[0].xyz;
  tmpvar_51[1] = _Object2World[1].xyz;
  tmpvar_51[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_52;
  tmpvar_52 = normalize((tmpvar_51 * tmpvar_17));
  worldTangent_3 = tmpvar_52;
  lowp vec3 tmpvar_53;
  tmpvar_53 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_54;
  tmpvar_54 = -(tmpvar_53);
  worldBinormal_2 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55.x = worldTangent_3.x;
  tmpvar_55.y = worldBinormal_2.x;
  tmpvar_55.z = worldNormal_4.x;
  lowp vec3 tmpvar_56;
  tmpvar_56.x = worldTangent_3.y;
  tmpvar_56.y = worldBinormal_2.y;
  tmpvar_56.z = worldNormal_4.y;
  lowp vec3 tmpvar_57;
  tmpvar_57.x = worldTangent_3.z;
  tmpvar_57.y = worldBinormal_2.z;
  tmpvar_57.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_55;
  xlv_TEXCOORD1 = tmpvar_56;
  xlv_TEXCOORD2 = tmpvar_57;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_11.x = tmpvar_12.x;
  mediump float tmpvar_13;
  tmpvar_13 = fract(tmpvar_12.y);
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_13 * 0.0625) + unity_LODFade.y);
  projUV_11.y = tmpvar_14;
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_17;
  lowp float x_18;
  x_18 = (tmpvar_9 - _Cutoff);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_20);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_20);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_20);
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_21;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_24 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.xyz = tmpvar_26;
  c_23.w = tmpvar_9;
  c_22.w = c_23.w;
  mediump vec3 tmpvar_27;
  tmpvar_27 = c_23.xyz;
  c_22.xyz = tmpvar_27;
  c_4.xyz = c_22.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out lowp vec3 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out mediump vec4 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_18.z / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.570796 + (abs(tmpvar_19) * (-0.2146018 + (
        abs(tmpvar_19)
       * 
        (0.08656672 + (abs(tmpvar_19) * -0.03102955))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  highp vec3 tmpvar_26;
  tmpvar_26 = (vec3(tmpvar_19) + tmpvar_25);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_9.xz = tmpvar_28.xz;
  billboardPos_9.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_9;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_33.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_34.x + (tmpvar_34.y * tmpvar_34.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_30)));
    vPos_29 = (normalize(vPos_29) * fLength_31);
    billboardPos_9 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    ((tmpvar_26 + tmpvar_27.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_11.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_40;
  } else {
    highp vec2 tmpvar_41;
    tmpvar_41 = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_41;
  };
  highp vec4 tmpvar_42;
  tmpvar_42 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_42 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = tmpvar_42.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  tmpvar_8 = tmpvar_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_47;
  tmpvar_5 = _Color;
  highp vec4 v_48;
  v_48.x = _World2Object[0].x;
  v_48.y = _World2Object[1].x;
  v_48.z = _World2Object[2].x;
  v_48.w = _World2Object[3].x;
  highp vec4 v_49;
  v_49.x = _World2Object[0].z;
  v_49.y = _World2Object[1].z;
  v_49.z = _World2Object[2].z;
  v_49.w = _World2Object[3].z;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(((v_48.xyz * tmpvar_17.z) + (v_49.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_50;
  highp mat3 tmpvar_51;
  tmpvar_51[0] = _Object2World[0].xyz;
  tmpvar_51[1] = _Object2World[1].xyz;
  tmpvar_51[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_52;
  tmpvar_52 = normalize((tmpvar_51 * tmpvar_17));
  worldTangent_3 = tmpvar_52;
  lowp vec3 tmpvar_53;
  tmpvar_53 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_54;
  tmpvar_54 = -(tmpvar_53);
  worldBinormal_2 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55.x = worldTangent_3.x;
  tmpvar_55.y = worldBinormal_2.x;
  tmpvar_55.z = worldNormal_4.x;
  lowp vec3 tmpvar_56;
  tmpvar_56.x = worldTangent_3.y;
  tmpvar_56.y = worldBinormal_2.y;
  tmpvar_56.z = worldNormal_4.y;
  lowp vec3 tmpvar_57;
  tmpvar_57.x = worldTangent_3.z;
  tmpvar_57.y = worldBinormal_2.z;
  tmpvar_57.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_55;
  xlv_TEXCOORD1 = tmpvar_56;
  xlv_TEXCOORD2 = tmpvar_57;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in lowp vec3 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_11.x = tmpvar_12.x;
  mediump float tmpvar_13;
  tmpvar_13 = fract(tmpvar_12.y);
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_13 * 0.0625) + unity_LODFade.y);
  projUV_11.y = tmpvar_14;
  lowp float x_15;
  x_15 = (texture (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_17;
  lowp float x_18;
  x_18 = (tmpvar_9 - _Cutoff);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = ((texture (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_20);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_20);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_20);
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_21;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_24 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.xyz = tmpvar_26;
  c_23.w = tmpvar_9;
  c_22.w = c_23.w;
  mediump vec3 tmpvar_27;
  tmpvar_27 = c_23.xyz;
  c_22.xyz = tmpvar_27;
  c_4.xyz = c_22.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_18.z / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.570796 + (abs(tmpvar_19) * (-0.2146018 + (
        abs(tmpvar_19)
       * 
        (0.08656672 + (abs(tmpvar_19) * -0.03102955))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  highp vec3 tmpvar_26;
  tmpvar_26 = (vec3(tmpvar_19) + tmpvar_25);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_9.xz = tmpvar_28.xz;
  billboardPos_9.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_9;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_33.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_34.x + (tmpvar_34.y * tmpvar_34.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_30)));
    vPos_29 = (normalize(vPos_29) * fLength_31);
    billboardPos_9 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    ((tmpvar_26 + tmpvar_27.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_11.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_40;
  } else {
    highp vec2 tmpvar_41;
    tmpvar_41 = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_41;
  };
  highp vec4 tmpvar_42;
  tmpvar_42 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_42 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = tmpvar_42.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  tmpvar_8 = tmpvar_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_47;
  tmpvar_5 = _Color;
  highp vec4 v_48;
  v_48.x = _World2Object[0].x;
  v_48.y = _World2Object[1].x;
  v_48.z = _World2Object[2].x;
  v_48.w = _World2Object[3].x;
  highp vec4 v_49;
  v_49.x = _World2Object[0].z;
  v_49.y = _World2Object[1].z;
  v_49.z = _World2Object[2].z;
  v_49.w = _World2Object[3].z;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(((v_48.xyz * tmpvar_17.z) + (v_49.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_50;
  highp mat3 tmpvar_51;
  tmpvar_51[0] = _Object2World[0].xyz;
  tmpvar_51[1] = _Object2World[1].xyz;
  tmpvar_51[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_52;
  tmpvar_52 = normalize((tmpvar_51 * tmpvar_17));
  worldTangent_3 = tmpvar_52;
  lowp vec3 tmpvar_53;
  tmpvar_53 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_54;
  tmpvar_54 = -(tmpvar_53);
  worldBinormal_2 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55.x = worldTangent_3.x;
  tmpvar_55.y = worldBinormal_2.x;
  tmpvar_55.z = worldNormal_4.x;
  lowp vec3 tmpvar_56;
  tmpvar_56.x = worldTangent_3.y;
  tmpvar_56.y = worldBinormal_2.y;
  tmpvar_56.z = worldNormal_4.y;
  lowp vec3 tmpvar_57;
  tmpvar_57.x = worldTangent_3.z;
  tmpvar_57.y = worldBinormal_2.z;
  tmpvar_57.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_55;
  xlv_TEXCOORD1 = tmpvar_56;
  xlv_TEXCOORD2 = tmpvar_57;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp float atten_5;
  mediump vec4 lightCoord_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD4;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_7 = tmpvar_9;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_11 = tmpvar_19;
  lowp float x_20;
  x_20 = (tmpvar_11 - _Cutoff);
  if ((x_20 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  tmpvar_10 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = xlv_TEXCOORD3;
  highp vec4 tmpvar_24;
  tmpvar_24 = (_LightMatrix0 * tmpvar_23);
  lightCoord_6 = tmpvar_24;
  lowp vec4 tmpvar_25;
  mediump vec2 P_26;
  P_26 = ((lightCoord_6.xy / lightCoord_6.w) + 0.5);
  tmpvar_25 = texture2D (_LightTexture0, P_26);
  mediump float tmpvar_27;
  tmpvar_27 = dot (lightCoord_6.xyz, lightCoord_6.xyz);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_LightTextureB0, vec2(tmpvar_27));
  mediump float tmpvar_29;
  tmpvar_29 = ((float(
    (lightCoord_6.z > 0.0)
  ) * tmpvar_25.w) * tmpvar_28.w);
  atten_5 = tmpvar_29;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_22);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_22);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_22);
  lowp vec3 tmpvar_30;
  tmpvar_30 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_30;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_5);
  lowp vec4 c_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_33 = tmpvar_34;
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tmpvar_10 * tmpvar_1) * diff_33);
  c_32.xyz = tmpvar_35;
  c_32.w = tmpvar_11;
  c_31.w = c_32.w;
  mediump vec3 tmpvar_36;
  tmpvar_36 = c_32.xyz;
  c_31.xyz = tmpvar_36;
  c_4.xyz = c_31.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out lowp vec3 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out mediump vec4 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_18.z / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.570796 + (abs(tmpvar_19) * (-0.2146018 + (
        abs(tmpvar_19)
       * 
        (0.08656672 + (abs(tmpvar_19) * -0.03102955))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  highp vec3 tmpvar_26;
  tmpvar_26 = (vec3(tmpvar_19) + tmpvar_25);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_9.xz = tmpvar_28.xz;
  billboardPos_9.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_9;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_33.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_34.x + (tmpvar_34.y * tmpvar_34.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_30)));
    vPos_29 = (normalize(vPos_29) * fLength_31);
    billboardPos_9 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    ((tmpvar_26 + tmpvar_27.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_11.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_40;
  } else {
    highp vec2 tmpvar_41;
    tmpvar_41 = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_41;
  };
  highp vec4 tmpvar_42;
  tmpvar_42 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_42 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = tmpvar_42.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  tmpvar_8 = tmpvar_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_47;
  tmpvar_5 = _Color;
  highp vec4 v_48;
  v_48.x = _World2Object[0].x;
  v_48.y = _World2Object[1].x;
  v_48.z = _World2Object[2].x;
  v_48.w = _World2Object[3].x;
  highp vec4 v_49;
  v_49.x = _World2Object[0].z;
  v_49.y = _World2Object[1].z;
  v_49.z = _World2Object[2].z;
  v_49.w = _World2Object[3].z;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(((v_48.xyz * tmpvar_17.z) + (v_49.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_50;
  highp mat3 tmpvar_51;
  tmpvar_51[0] = _Object2World[0].xyz;
  tmpvar_51[1] = _Object2World[1].xyz;
  tmpvar_51[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_52;
  tmpvar_52 = normalize((tmpvar_51 * tmpvar_17));
  worldTangent_3 = tmpvar_52;
  lowp vec3 tmpvar_53;
  tmpvar_53 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_54;
  tmpvar_54 = -(tmpvar_53);
  worldBinormal_2 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55.x = worldTangent_3.x;
  tmpvar_55.y = worldBinormal_2.x;
  tmpvar_55.z = worldNormal_4.x;
  lowp vec3 tmpvar_56;
  tmpvar_56.x = worldTangent_3.y;
  tmpvar_56.y = worldBinormal_2.y;
  tmpvar_56.z = worldNormal_4.y;
  lowp vec3 tmpvar_57;
  tmpvar_57.x = worldTangent_3.z;
  tmpvar_57.y = worldBinormal_2.z;
  tmpvar_57.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_55;
  xlv_TEXCOORD1 = tmpvar_56;
  xlv_TEXCOORD2 = tmpvar_57;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in lowp vec3 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in mediump vec4 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp float atten_5;
  mediump vec4 lightCoord_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD4;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_7 = tmpvar_9;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_11 = tmpvar_19;
  lowp float x_20;
  x_20 = (tmpvar_11 - _Cutoff);
  if ((x_20 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  tmpvar_10 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = xlv_TEXCOORD3;
  highp vec4 tmpvar_24;
  tmpvar_24 = (_LightMatrix0 * tmpvar_23);
  lightCoord_6 = tmpvar_24;
  lowp vec4 tmpvar_25;
  mediump vec2 P_26;
  P_26 = ((lightCoord_6.xy / lightCoord_6.w) + 0.5);
  tmpvar_25 = texture (_LightTexture0, P_26);
  mediump float tmpvar_27;
  tmpvar_27 = dot (lightCoord_6.xyz, lightCoord_6.xyz);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture (_LightTextureB0, vec2(tmpvar_27));
  mediump float tmpvar_29;
  tmpvar_29 = ((float(
    (lightCoord_6.z > 0.0)
  ) * tmpvar_25.w) * tmpvar_28.w);
  atten_5 = tmpvar_29;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_22);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_22);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_22);
  lowp vec3 tmpvar_30;
  tmpvar_30 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_30;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_5);
  lowp vec4 c_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_33 = tmpvar_34;
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tmpvar_10 * tmpvar_1) * diff_33);
  c_32.xyz = tmpvar_35;
  c_32.w = tmpvar_11;
  c_31.w = c_32.w;
  mediump vec3 tmpvar_36;
  tmpvar_36 = c_32.xyz;
  c_31.xyz = tmpvar_36;
  c_4.xyz = c_31.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_18.z / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.570796 + (abs(tmpvar_19) * (-0.2146018 + (
        abs(tmpvar_19)
       * 
        (0.08656672 + (abs(tmpvar_19) * -0.03102955))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  highp vec3 tmpvar_26;
  tmpvar_26 = (vec3(tmpvar_19) + tmpvar_25);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_9.xz = tmpvar_28.xz;
  billboardPos_9.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_9;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_33.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_34.x + (tmpvar_34.y * tmpvar_34.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_30)));
    vPos_29 = (normalize(vPos_29) * fLength_31);
    billboardPos_9 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    ((tmpvar_26 + tmpvar_27.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_11.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_40;
  } else {
    highp vec2 tmpvar_41;
    tmpvar_41 = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_41;
  };
  highp vec4 tmpvar_42;
  tmpvar_42 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_42 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = tmpvar_42.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  tmpvar_8 = tmpvar_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_47;
  tmpvar_5 = _Color;
  highp vec4 v_48;
  v_48.x = _World2Object[0].x;
  v_48.y = _World2Object[1].x;
  v_48.z = _World2Object[2].x;
  v_48.w = _World2Object[3].x;
  highp vec4 v_49;
  v_49.x = _World2Object[0].z;
  v_49.y = _World2Object[1].z;
  v_49.z = _World2Object[2].z;
  v_49.w = _World2Object[3].z;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(((v_48.xyz * tmpvar_17.z) + (v_49.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_50;
  highp mat3 tmpvar_51;
  tmpvar_51[0] = _Object2World[0].xyz;
  tmpvar_51[1] = _Object2World[1].xyz;
  tmpvar_51[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_52;
  tmpvar_52 = normalize((tmpvar_51 * tmpvar_17));
  worldTangent_3 = tmpvar_52;
  lowp vec3 tmpvar_53;
  tmpvar_53 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_54;
  tmpvar_54 = -(tmpvar_53);
  worldBinormal_2 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55.x = worldTangent_3.x;
  tmpvar_55.y = worldBinormal_2.x;
  tmpvar_55.z = worldNormal_4.x;
  lowp vec3 tmpvar_56;
  tmpvar_56.x = worldTangent_3.y;
  tmpvar_56.y = worldBinormal_2.y;
  tmpvar_56.z = worldNormal_4.y;
  lowp vec3 tmpvar_57;
  tmpvar_57.x = worldTangent_3.z;
  tmpvar_57.y = worldBinormal_2.z;
  tmpvar_57.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_55;
  xlv_TEXCOORD1 = tmpvar_56;
  xlv_TEXCOORD2 = tmpvar_57;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec3 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_23;
  tmpvar_23 = (_LightMatrix0 * tmpvar_22).xyz;
  lightCoord_5 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (lightCoord_5, lightCoord_5);
  lowp float tmpvar_25;
  tmpvar_25 = (texture2D (_LightTextureB0, vec2(tmpvar_24)).w * textureCube (_LightTexture0, lightCoord_5).w);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_21);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_21);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_21);
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_26;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_25);
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_29 = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tmpvar_9 * tmpvar_1) * diff_29);
  c_28.xyz = tmpvar_31;
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  mediump vec3 tmpvar_32;
  tmpvar_32 = c_28.xyz;
  c_27.xyz = tmpvar_32;
  c_4.xyz = c_27.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out lowp vec3 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out mediump vec4 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_18.z / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.570796 + (abs(tmpvar_19) * (-0.2146018 + (
        abs(tmpvar_19)
       * 
        (0.08656672 + (abs(tmpvar_19) * -0.03102955))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  highp vec3 tmpvar_26;
  tmpvar_26 = (vec3(tmpvar_19) + tmpvar_25);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_9.xz = tmpvar_28.xz;
  billboardPos_9.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_9;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_33.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_34.x + (tmpvar_34.y * tmpvar_34.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_30)));
    vPos_29 = (normalize(vPos_29) * fLength_31);
    billboardPos_9 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    ((tmpvar_26 + tmpvar_27.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_11.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_40;
  } else {
    highp vec2 tmpvar_41;
    tmpvar_41 = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_41;
  };
  highp vec4 tmpvar_42;
  tmpvar_42 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_42 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = tmpvar_42.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  tmpvar_8 = tmpvar_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_47;
  tmpvar_5 = _Color;
  highp vec4 v_48;
  v_48.x = _World2Object[0].x;
  v_48.y = _World2Object[1].x;
  v_48.z = _World2Object[2].x;
  v_48.w = _World2Object[3].x;
  highp vec4 v_49;
  v_49.x = _World2Object[0].z;
  v_49.y = _World2Object[1].z;
  v_49.z = _World2Object[2].z;
  v_49.w = _World2Object[3].z;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(((v_48.xyz * tmpvar_17.z) + (v_49.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_50;
  highp mat3 tmpvar_51;
  tmpvar_51[0] = _Object2World[0].xyz;
  tmpvar_51[1] = _Object2World[1].xyz;
  tmpvar_51[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_52;
  tmpvar_52 = normalize((tmpvar_51 * tmpvar_17));
  worldTangent_3 = tmpvar_52;
  lowp vec3 tmpvar_53;
  tmpvar_53 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_54;
  tmpvar_54 = -(tmpvar_53);
  worldBinormal_2 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55.x = worldTangent_3.x;
  tmpvar_55.y = worldBinormal_2.x;
  tmpvar_55.z = worldNormal_4.x;
  lowp vec3 tmpvar_56;
  tmpvar_56.x = worldTangent_3.y;
  tmpvar_56.y = worldBinormal_2.y;
  tmpvar_56.z = worldNormal_4.y;
  lowp vec3 tmpvar_57;
  tmpvar_57.x = worldTangent_3.z;
  tmpvar_57.y = worldBinormal_2.z;
  tmpvar_57.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_55;
  xlv_TEXCOORD1 = tmpvar_56;
  xlv_TEXCOORD2 = tmpvar_57;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in lowp vec3 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in mediump vec4 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec3 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((texture (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_23;
  tmpvar_23 = (_LightMatrix0 * tmpvar_22).xyz;
  lightCoord_5 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (lightCoord_5, lightCoord_5);
  lowp float tmpvar_25;
  tmpvar_25 = (texture (_LightTextureB0, vec2(tmpvar_24)).w * texture (_LightTexture0, lightCoord_5).w);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_21);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_21);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_21);
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_26;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_25);
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_29 = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tmpvar_9 * tmpvar_1) * diff_29);
  c_28.xyz = tmpvar_31;
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  mediump vec3 tmpvar_32;
  tmpvar_32 = c_28.xyz;
  c_27.xyz = tmpvar_32;
  c_4.xyz = c_27.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_18.z / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.570796 + (abs(tmpvar_19) * (-0.2146018 + (
        abs(tmpvar_19)
       * 
        (0.08656672 + (abs(tmpvar_19) * -0.03102955))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  highp vec3 tmpvar_26;
  tmpvar_26 = (vec3(tmpvar_19) + tmpvar_25);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_9.xz = tmpvar_28.xz;
  billboardPos_9.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_9;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_33.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_34.x + (tmpvar_34.y * tmpvar_34.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_30)));
    vPos_29 = (normalize(vPos_29) * fLength_31);
    billboardPos_9 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    ((tmpvar_26 + tmpvar_27.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_11.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_40;
  } else {
    highp vec2 tmpvar_41;
    tmpvar_41 = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_41;
  };
  highp vec4 tmpvar_42;
  tmpvar_42 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_42 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = tmpvar_42.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  tmpvar_8 = tmpvar_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_47;
  tmpvar_5 = _Color;
  highp vec4 v_48;
  v_48.x = _World2Object[0].x;
  v_48.y = _World2Object[1].x;
  v_48.z = _World2Object[2].x;
  v_48.w = _World2Object[3].x;
  highp vec4 v_49;
  v_49.x = _World2Object[0].z;
  v_49.y = _World2Object[1].z;
  v_49.z = _World2Object[2].z;
  v_49.w = _World2Object[3].z;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(((v_48.xyz * tmpvar_17.z) + (v_49.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_50;
  highp mat3 tmpvar_51;
  tmpvar_51[0] = _Object2World[0].xyz;
  tmpvar_51[1] = _Object2World[1].xyz;
  tmpvar_51[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_52;
  tmpvar_52 = normalize((tmpvar_51 * tmpvar_17));
  worldTangent_3 = tmpvar_52;
  lowp vec3 tmpvar_53;
  tmpvar_53 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_54;
  tmpvar_54 = -(tmpvar_53);
  worldBinormal_2 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55.x = worldTangent_3.x;
  tmpvar_55.y = worldBinormal_2.x;
  tmpvar_55.z = worldNormal_4.x;
  lowp vec3 tmpvar_56;
  tmpvar_56.x = worldTangent_3.y;
  tmpvar_56.y = worldBinormal_2.y;
  tmpvar_56.z = worldNormal_4.y;
  lowp vec3 tmpvar_57;
  tmpvar_57.x = worldTangent_3.z;
  tmpvar_57.y = worldBinormal_2.z;
  tmpvar_57.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_55;
  xlv_TEXCOORD1 = tmpvar_56;
  xlv_TEXCOORD2 = tmpvar_57;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec2 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD3;
  highp vec2 tmpvar_23;
  tmpvar_23 = (_LightMatrix0 * tmpvar_22).xy;
  lightCoord_5 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = texture2D (_LightTexture0, lightCoord_5).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_21);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_21);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_21);
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_25;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_24);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_28 = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tmpvar_9 * tmpvar_1) * diff_28);
  c_27.xyz = tmpvar_30;
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  mediump vec3 tmpvar_31;
  tmpvar_31 = c_27.xyz;
  c_26.xyz = tmpvar_31;
  c_4.xyz = c_26.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out lowp vec3 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out mediump vec4 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_18.z / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.570796 + (abs(tmpvar_19) * (-0.2146018 + (
        abs(tmpvar_19)
       * 
        (0.08656672 + (abs(tmpvar_19) * -0.03102955))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  highp vec3 tmpvar_26;
  tmpvar_26 = (vec3(tmpvar_19) + tmpvar_25);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_9.xz = tmpvar_28.xz;
  billboardPos_9.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_9;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_33.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_34.x + (tmpvar_34.y * tmpvar_34.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_30)));
    vPos_29 = (normalize(vPos_29) * fLength_31);
    billboardPos_9 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    ((tmpvar_26 + tmpvar_27.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_11.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_40;
  } else {
    highp vec2 tmpvar_41;
    tmpvar_41 = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_41;
  };
  highp vec4 tmpvar_42;
  tmpvar_42 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_42 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = tmpvar_42.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  tmpvar_8 = tmpvar_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_47;
  tmpvar_5 = _Color;
  highp vec4 v_48;
  v_48.x = _World2Object[0].x;
  v_48.y = _World2Object[1].x;
  v_48.z = _World2Object[2].x;
  v_48.w = _World2Object[3].x;
  highp vec4 v_49;
  v_49.x = _World2Object[0].z;
  v_49.y = _World2Object[1].z;
  v_49.z = _World2Object[2].z;
  v_49.w = _World2Object[3].z;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(((v_48.xyz * tmpvar_17.z) + (v_49.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_50;
  highp mat3 tmpvar_51;
  tmpvar_51[0] = _Object2World[0].xyz;
  tmpvar_51[1] = _Object2World[1].xyz;
  tmpvar_51[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_52;
  tmpvar_52 = normalize((tmpvar_51 * tmpvar_17));
  worldTangent_3 = tmpvar_52;
  lowp vec3 tmpvar_53;
  tmpvar_53 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_54;
  tmpvar_54 = -(tmpvar_53);
  worldBinormal_2 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55.x = worldTangent_3.x;
  tmpvar_55.y = worldBinormal_2.x;
  tmpvar_55.z = worldNormal_4.x;
  lowp vec3 tmpvar_56;
  tmpvar_56.x = worldTangent_3.y;
  tmpvar_56.y = worldBinormal_2.y;
  tmpvar_56.z = worldNormal_4.y;
  lowp vec3 tmpvar_57;
  tmpvar_57.x = worldTangent_3.z;
  tmpvar_57.y = worldBinormal_2.z;
  tmpvar_57.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_55;
  xlv_TEXCOORD1 = tmpvar_56;
  xlv_TEXCOORD2 = tmpvar_57;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in lowp vec3 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in mediump vec4 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec2 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((texture (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD3;
  highp vec2 tmpvar_23;
  tmpvar_23 = (_LightMatrix0 * tmpvar_22).xy;
  lightCoord_5 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = texture (_LightTexture0, lightCoord_5).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_21);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_21);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_21);
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_25;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_24);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_28 = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tmpvar_9 * tmpvar_1) * diff_28);
  c_27.xyz = tmpvar_30;
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  mediump vec3 tmpvar_31;
  tmpvar_31 = c_27.xyz;
  c_26.xyz = tmpvar_31;
  c_4.xyz = c_26.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_18.z / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.570796 + (abs(tmpvar_19) * (-0.2146018 + (
        abs(tmpvar_19)
       * 
        (0.08656672 + (abs(tmpvar_19) * -0.03102955))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  highp vec3 tmpvar_26;
  tmpvar_26 = (vec3(tmpvar_19) + tmpvar_25);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_9.xz = tmpvar_28.xz;
  billboardPos_9.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_9;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_33.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_34.x + (tmpvar_34.y * tmpvar_34.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_30)));
    vPos_29 = (normalize(vPos_29) * fLength_31);
    billboardPos_9 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    ((tmpvar_26 + tmpvar_27.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_11.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_40;
  } else {
    highp vec2 tmpvar_41;
    tmpvar_41 = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_41;
  };
  highp float tmpvar_42;
  tmpvar_42 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_44;
  highp vec4 tmpvar_45;
  tmpvar_45 = (tmpvar_43 * 0.5);
  highp vec2 tmpvar_46;
  tmpvar_46.x = tmpvar_45.x;
  tmpvar_46.y = (tmpvar_45.y * _ProjectionParams.x);
  o_44.xy = (tmpvar_46 + tmpvar_45.w);
  o_44.zw = tmpvar_43.zw;
  highp vec3 tmpvar_47;
  tmpvar_47 = o_44.xyw;
  tmpvar_8 = tmpvar_47;
  highp vec2 tmpvar_48;
  tmpvar_48 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_48;
  tmpvar_5 = _Color;
  highp vec4 v_49;
  v_49.x = _World2Object[0].x;
  v_49.y = _World2Object[1].x;
  v_49.z = _World2Object[2].x;
  v_49.w = _World2Object[3].x;
  highp vec4 v_50;
  v_50.x = _World2Object[0].z;
  v_50.y = _World2Object[1].z;
  v_50.z = _World2Object[2].z;
  v_50.w = _World2Object[3].z;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize(((v_49.xyz * tmpvar_17.z) + (v_50.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_51;
  highp mat3 tmpvar_52;
  tmpvar_52[0] = _Object2World[0].xyz;
  tmpvar_52[1] = _Object2World[1].xyz;
  tmpvar_52[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize((tmpvar_52 * tmpvar_17));
  worldTangent_3 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_55;
  tmpvar_55 = -(tmpvar_54);
  worldBinormal_2 = tmpvar_55;
  lowp vec3 tmpvar_56;
  tmpvar_56.x = worldTangent_3.x;
  tmpvar_56.y = worldBinormal_2.x;
  tmpvar_56.z = worldNormal_4.x;
  lowp vec3 tmpvar_57;
  tmpvar_57.x = worldTangent_3.y;
  tmpvar_57.y = worldBinormal_2.y;
  tmpvar_57.z = worldNormal_4.y;
  lowp vec3 tmpvar_58;
  tmpvar_58.x = worldTangent_3.z;
  tmpvar_58.y = worldBinormal_2.z;
  tmpvar_58.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_56;
  xlv_TEXCOORD1 = tmpvar_57;
  xlv_TEXCOORD2 = tmpvar_58;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec3 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_24;
  tmpvar_24 = (_LightMatrix0 * tmpvar_23).xyz;
  lightCoord_5 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (lightCoord_5, lightCoord_5);
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_LightTexture0, vec2(tmpvar_25)).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_22);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_22);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_22);
  lowp vec3 tmpvar_27;
  tmpvar_27 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_27;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_26);
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_30 = tmpvar_31;
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tmpvar_9 * tmpvar_1) * diff_30);
  c_29.xyz = tmpvar_32;
  c_29.w = tmpvar_10;
  c_28.w = c_29.w;
  mediump vec3 tmpvar_33;
  tmpvar_33 = c_29.xyz;
  c_28.xyz = tmpvar_33;
  c_4.xyz = c_28.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out lowp vec3 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out mediump vec4 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_18.z / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.570796 + (abs(tmpvar_19) * (-0.2146018 + (
        abs(tmpvar_19)
       * 
        (0.08656672 + (abs(tmpvar_19) * -0.03102955))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  highp vec3 tmpvar_26;
  tmpvar_26 = (vec3(tmpvar_19) + tmpvar_25);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_9.xz = tmpvar_28.xz;
  billboardPos_9.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_9;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_33.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_34.x + (tmpvar_34.y * tmpvar_34.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_30)));
    vPos_29 = (normalize(vPos_29) * fLength_31);
    billboardPos_9 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    ((tmpvar_26 + tmpvar_27.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_11.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_40;
  } else {
    highp vec2 tmpvar_41;
    tmpvar_41 = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_41;
  };
  highp float tmpvar_42;
  tmpvar_42 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_44;
  highp vec4 tmpvar_45;
  tmpvar_45 = (tmpvar_43 * 0.5);
  highp vec2 tmpvar_46;
  tmpvar_46.x = tmpvar_45.x;
  tmpvar_46.y = (tmpvar_45.y * _ProjectionParams.x);
  o_44.xy = (tmpvar_46 + tmpvar_45.w);
  o_44.zw = tmpvar_43.zw;
  highp vec3 tmpvar_47;
  tmpvar_47 = o_44.xyw;
  tmpvar_8 = tmpvar_47;
  highp vec2 tmpvar_48;
  tmpvar_48 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_48;
  tmpvar_5 = _Color;
  highp vec4 v_49;
  v_49.x = _World2Object[0].x;
  v_49.y = _World2Object[1].x;
  v_49.z = _World2Object[2].x;
  v_49.w = _World2Object[3].x;
  highp vec4 v_50;
  v_50.x = _World2Object[0].z;
  v_50.y = _World2Object[1].z;
  v_50.z = _World2Object[2].z;
  v_50.w = _World2Object[3].z;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize(((v_49.xyz * tmpvar_17.z) + (v_50.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_51;
  highp mat3 tmpvar_52;
  tmpvar_52[0] = _Object2World[0].xyz;
  tmpvar_52[1] = _Object2World[1].xyz;
  tmpvar_52[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize((tmpvar_52 * tmpvar_17));
  worldTangent_3 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_55;
  tmpvar_55 = -(tmpvar_54);
  worldBinormal_2 = tmpvar_55;
  lowp vec3 tmpvar_56;
  tmpvar_56.x = worldTangent_3.x;
  tmpvar_56.y = worldBinormal_2.x;
  tmpvar_56.z = worldNormal_4.x;
  lowp vec3 tmpvar_57;
  tmpvar_57.x = worldTangent_3.y;
  tmpvar_57.y = worldBinormal_2.y;
  tmpvar_57.z = worldNormal_4.y;
  lowp vec3 tmpvar_58;
  tmpvar_58.x = worldTangent_3.z;
  tmpvar_58.y = worldBinormal_2.z;
  tmpvar_58.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_56;
  xlv_TEXCOORD1 = tmpvar_57;
  xlv_TEXCOORD2 = tmpvar_58;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in lowp vec3 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in mediump vec4 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec3 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_24;
  tmpvar_24 = (_LightMatrix0 * tmpvar_23).xyz;
  lightCoord_5 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (lightCoord_5, lightCoord_5);
  lowp float tmpvar_26;
  tmpvar_26 = texture (_LightTexture0, vec2(tmpvar_25)).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_22);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_22);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_22);
  lowp vec3 tmpvar_27;
  tmpvar_27 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_27;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_26);
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_30 = tmpvar_31;
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tmpvar_9 * tmpvar_1) * diff_30);
  c_29.xyz = tmpvar_32;
  c_29.w = tmpvar_10;
  c_28.w = c_29.w;
  mediump vec3 tmpvar_33;
  tmpvar_33 = c_29.xyz;
  c_28.xyz = tmpvar_33;
  c_4.xyz = c_28.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_18.z / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.570796 + (abs(tmpvar_19) * (-0.2146018 + (
        abs(tmpvar_19)
       * 
        (0.08656672 + (abs(tmpvar_19) * -0.03102955))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  highp vec3 tmpvar_26;
  tmpvar_26 = (vec3(tmpvar_19) + tmpvar_25);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_9.xz = tmpvar_28.xz;
  billboardPos_9.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_9;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_33.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_34.x + (tmpvar_34.y * tmpvar_34.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_30)));
    vPos_29 = (normalize(vPos_29) * fLength_31);
    billboardPos_9 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    ((tmpvar_26 + tmpvar_27.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_11.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_40;
  } else {
    highp vec2 tmpvar_41;
    tmpvar_41 = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_41;
  };
  highp float tmpvar_42;
  tmpvar_42 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_44;
  highp vec4 tmpvar_45;
  tmpvar_45 = (tmpvar_43 * 0.5);
  highp vec2 tmpvar_46;
  tmpvar_46.x = tmpvar_45.x;
  tmpvar_46.y = (tmpvar_45.y * _ProjectionParams.x);
  o_44.xy = (tmpvar_46 + tmpvar_45.w);
  o_44.zw = tmpvar_43.zw;
  highp vec3 tmpvar_47;
  tmpvar_47 = o_44.xyw;
  tmpvar_8 = tmpvar_47;
  highp vec2 tmpvar_48;
  tmpvar_48 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_48;
  tmpvar_5 = _Color;
  highp vec4 v_49;
  v_49.x = _World2Object[0].x;
  v_49.y = _World2Object[1].x;
  v_49.z = _World2Object[2].x;
  v_49.w = _World2Object[3].x;
  highp vec4 v_50;
  v_50.x = _World2Object[0].z;
  v_50.y = _World2Object[1].z;
  v_50.z = _World2Object[2].z;
  v_50.w = _World2Object[3].z;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize(((v_49.xyz * tmpvar_17.z) + (v_50.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_51;
  highp mat3 tmpvar_52;
  tmpvar_52[0] = _Object2World[0].xyz;
  tmpvar_52[1] = _Object2World[1].xyz;
  tmpvar_52[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize((tmpvar_52 * tmpvar_17));
  worldTangent_3 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_55;
  tmpvar_55 = -(tmpvar_54);
  worldBinormal_2 = tmpvar_55;
  lowp vec3 tmpvar_56;
  tmpvar_56.x = worldTangent_3.x;
  tmpvar_56.y = worldBinormal_2.x;
  tmpvar_56.z = worldNormal_4.x;
  lowp vec3 tmpvar_57;
  tmpvar_57.x = worldTangent_3.y;
  tmpvar_57.y = worldBinormal_2.y;
  tmpvar_57.z = worldNormal_4.y;
  lowp vec3 tmpvar_58;
  tmpvar_58.x = worldTangent_3.z;
  tmpvar_58.y = worldBinormal_2.z;
  tmpvar_58.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_56;
  xlv_TEXCOORD1 = tmpvar_57;
  xlv_TEXCOORD2 = tmpvar_58;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_11.x = tmpvar_12.x;
  mediump float tmpvar_13;
  tmpvar_13 = fract(tmpvar_12.y);
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_13 * 0.0625) + unity_LODFade.y);
  projUV_11.y = tmpvar_14;
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_17;
  lowp float x_18;
  x_18 = (tmpvar_9 - _Cutoff);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_19 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_21);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_21);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_21);
  lowp vec3 tmpvar_22;
  tmpvar_22 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_22;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_25 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.xyz = tmpvar_27;
  c_24.w = tmpvar_9;
  c_23.w = c_24.w;
  mediump vec3 tmpvar_28;
  tmpvar_28 = c_24.xyz;
  c_23.xyz = tmpvar_28;
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out lowp vec3 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out mediump vec4 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_18.z / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.570796 + (abs(tmpvar_19) * (-0.2146018 + (
        abs(tmpvar_19)
       * 
        (0.08656672 + (abs(tmpvar_19) * -0.03102955))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  highp vec3 tmpvar_26;
  tmpvar_26 = (vec3(tmpvar_19) + tmpvar_25);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_9.xz = tmpvar_28.xz;
  billboardPos_9.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_9;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_33.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_34.x + (tmpvar_34.y * tmpvar_34.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_30)));
    vPos_29 = (normalize(vPos_29) * fLength_31);
    billboardPos_9 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    ((tmpvar_26 + tmpvar_27.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_11.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_40;
  } else {
    highp vec2 tmpvar_41;
    tmpvar_41 = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_41;
  };
  highp float tmpvar_42;
  tmpvar_42 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_44;
  highp vec4 tmpvar_45;
  tmpvar_45 = (tmpvar_43 * 0.5);
  highp vec2 tmpvar_46;
  tmpvar_46.x = tmpvar_45.x;
  tmpvar_46.y = (tmpvar_45.y * _ProjectionParams.x);
  o_44.xy = (tmpvar_46 + tmpvar_45.w);
  o_44.zw = tmpvar_43.zw;
  highp vec3 tmpvar_47;
  tmpvar_47 = o_44.xyw;
  tmpvar_8 = tmpvar_47;
  highp vec2 tmpvar_48;
  tmpvar_48 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_48;
  tmpvar_5 = _Color;
  highp vec4 v_49;
  v_49.x = _World2Object[0].x;
  v_49.y = _World2Object[1].x;
  v_49.z = _World2Object[2].x;
  v_49.w = _World2Object[3].x;
  highp vec4 v_50;
  v_50.x = _World2Object[0].z;
  v_50.y = _World2Object[1].z;
  v_50.z = _World2Object[2].z;
  v_50.w = _World2Object[3].z;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize(((v_49.xyz * tmpvar_17.z) + (v_50.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_51;
  highp mat3 tmpvar_52;
  tmpvar_52[0] = _Object2World[0].xyz;
  tmpvar_52[1] = _Object2World[1].xyz;
  tmpvar_52[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize((tmpvar_52 * tmpvar_17));
  worldTangent_3 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_55;
  tmpvar_55 = -(tmpvar_54);
  worldBinormal_2 = tmpvar_55;
  lowp vec3 tmpvar_56;
  tmpvar_56.x = worldTangent_3.x;
  tmpvar_56.y = worldBinormal_2.x;
  tmpvar_56.z = worldNormal_4.x;
  lowp vec3 tmpvar_57;
  tmpvar_57.x = worldTangent_3.y;
  tmpvar_57.y = worldBinormal_2.y;
  tmpvar_57.z = worldNormal_4.y;
  lowp vec3 tmpvar_58;
  tmpvar_58.x = worldTangent_3.z;
  tmpvar_58.y = worldBinormal_2.z;
  tmpvar_58.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_56;
  xlv_TEXCOORD1 = tmpvar_57;
  xlv_TEXCOORD2 = tmpvar_58;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in lowp vec3 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_11.x = tmpvar_12.x;
  mediump float tmpvar_13;
  tmpvar_13 = fract(tmpvar_12.y);
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_13 * 0.0625) + unity_LODFade.y);
  projUV_11.y = tmpvar_14;
  lowp float x_15;
  x_15 = (texture (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_17;
  lowp float x_18;
  x_18 = (tmpvar_9 - _Cutoff);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_19 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((texture (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_21);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_21);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_21);
  lowp vec3 tmpvar_22;
  tmpvar_22 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_22;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_25 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.xyz = tmpvar_27;
  c_24.w = tmpvar_9;
  c_23.w = c_24.w;
  mediump vec3 tmpvar_28;
  tmpvar_28 = c_24.xyz;
  c_23.xyz = tmpvar_28;
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_18.z / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.570796 + (abs(tmpvar_19) * (-0.2146018 + (
        abs(tmpvar_19)
       * 
        (0.08656672 + (abs(tmpvar_19) * -0.03102955))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  highp vec3 tmpvar_26;
  tmpvar_26 = (vec3(tmpvar_19) + tmpvar_25);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_9.xz = tmpvar_28.xz;
  billboardPos_9.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_9;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_33.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_34.x + (tmpvar_34.y * tmpvar_34.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_30)));
    vPos_29 = (normalize(vPos_29) * fLength_31);
    billboardPos_9 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    ((tmpvar_26 + tmpvar_27.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_11.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_40;
  } else {
    highp vec2 tmpvar_41;
    tmpvar_41 = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_41;
  };
  highp float tmpvar_42;
  tmpvar_42 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_44;
  highp vec4 tmpvar_45;
  tmpvar_45 = (tmpvar_43 * 0.5);
  highp vec2 tmpvar_46;
  tmpvar_46.x = tmpvar_45.x;
  tmpvar_46.y = (tmpvar_45.y * _ProjectionParams.x);
  o_44.xy = (tmpvar_46 + tmpvar_45.w);
  o_44.zw = tmpvar_43.zw;
  highp vec3 tmpvar_47;
  tmpvar_47 = o_44.xyw;
  tmpvar_8 = tmpvar_47;
  highp vec2 tmpvar_48;
  tmpvar_48 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_48;
  tmpvar_5 = _Color;
  highp vec4 v_49;
  v_49.x = _World2Object[0].x;
  v_49.y = _World2Object[1].x;
  v_49.z = _World2Object[2].x;
  v_49.w = _World2Object[3].x;
  highp vec4 v_50;
  v_50.x = _World2Object[0].z;
  v_50.y = _World2Object[1].z;
  v_50.z = _World2Object[2].z;
  v_50.w = _World2Object[3].z;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize(((v_49.xyz * tmpvar_17.z) + (v_50.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_51;
  highp mat3 tmpvar_52;
  tmpvar_52[0] = _Object2World[0].xyz;
  tmpvar_52[1] = _Object2World[1].xyz;
  tmpvar_52[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize((tmpvar_52 * tmpvar_17));
  worldTangent_3 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_55;
  tmpvar_55 = -(tmpvar_54);
  worldBinormal_2 = tmpvar_55;
  lowp vec3 tmpvar_56;
  tmpvar_56.x = worldTangent_3.x;
  tmpvar_56.y = worldBinormal_2.x;
  tmpvar_56.z = worldNormal_4.x;
  lowp vec3 tmpvar_57;
  tmpvar_57.x = worldTangent_3.y;
  tmpvar_57.y = worldBinormal_2.y;
  tmpvar_57.z = worldNormal_4.y;
  lowp vec3 tmpvar_58;
  tmpvar_58.x = worldTangent_3.z;
  tmpvar_58.y = worldBinormal_2.z;
  tmpvar_58.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_56;
  xlv_TEXCOORD1 = tmpvar_57;
  xlv_TEXCOORD2 = tmpvar_58;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp float atten_5;
  mediump vec4 lightCoord_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD4;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_7 = tmpvar_9;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_11 = tmpvar_19;
  lowp float x_20;
  x_20 = (tmpvar_11 - _Cutoff);
  if ((x_20 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_21 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_21.x, max (tmpvar_21.y, tmpvar_21.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_22;
  tmpvar_22 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  tmpvar_10 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD3;
  highp vec4 tmpvar_25;
  tmpvar_25 = (_LightMatrix0 * tmpvar_24);
  lightCoord_6 = tmpvar_25;
  lowp vec4 tmpvar_26;
  mediump vec2 P_27;
  P_27 = ((lightCoord_6.xy / lightCoord_6.w) + 0.5);
  tmpvar_26 = texture2D (_LightTexture0, P_27);
  mediump float tmpvar_28;
  tmpvar_28 = dot (lightCoord_6.xyz, lightCoord_6.xyz);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_LightTextureB0, vec2(tmpvar_28));
  mediump float tmpvar_30;
  tmpvar_30 = ((float(
    (lightCoord_6.z > 0.0)
  ) * tmpvar_26.w) * tmpvar_29.w);
  atten_5 = tmpvar_30;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_23);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_23);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_23);
  lowp vec3 tmpvar_31;
  tmpvar_31 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_31;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_5);
  lowp vec4 c_32;
  lowp vec4 c_33;
  lowp float diff_34;
  mediump float tmpvar_35;
  tmpvar_35 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_34 = tmpvar_35;
  mediump vec3 tmpvar_36;
  tmpvar_36 = ((tmpvar_10 * tmpvar_1) * diff_34);
  c_33.xyz = tmpvar_36;
  c_33.w = tmpvar_11;
  c_32.w = c_33.w;
  mediump vec3 tmpvar_37;
  tmpvar_37 = c_33.xyz;
  c_32.xyz = tmpvar_37;
  c_4.xyz = c_32.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out lowp vec3 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out mediump vec4 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_18.z / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.570796 + (abs(tmpvar_19) * (-0.2146018 + (
        abs(tmpvar_19)
       * 
        (0.08656672 + (abs(tmpvar_19) * -0.03102955))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  highp vec3 tmpvar_26;
  tmpvar_26 = (vec3(tmpvar_19) + tmpvar_25);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_9.xz = tmpvar_28.xz;
  billboardPos_9.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_9;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_33.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_34.x + (tmpvar_34.y * tmpvar_34.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_30)));
    vPos_29 = (normalize(vPos_29) * fLength_31);
    billboardPos_9 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    ((tmpvar_26 + tmpvar_27.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_11.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_40;
  } else {
    highp vec2 tmpvar_41;
    tmpvar_41 = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_41;
  };
  highp float tmpvar_42;
  tmpvar_42 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_44;
  highp vec4 tmpvar_45;
  tmpvar_45 = (tmpvar_43 * 0.5);
  highp vec2 tmpvar_46;
  tmpvar_46.x = tmpvar_45.x;
  tmpvar_46.y = (tmpvar_45.y * _ProjectionParams.x);
  o_44.xy = (tmpvar_46 + tmpvar_45.w);
  o_44.zw = tmpvar_43.zw;
  highp vec3 tmpvar_47;
  tmpvar_47 = o_44.xyw;
  tmpvar_8 = tmpvar_47;
  highp vec2 tmpvar_48;
  tmpvar_48 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_48;
  tmpvar_5 = _Color;
  highp vec4 v_49;
  v_49.x = _World2Object[0].x;
  v_49.y = _World2Object[1].x;
  v_49.z = _World2Object[2].x;
  v_49.w = _World2Object[3].x;
  highp vec4 v_50;
  v_50.x = _World2Object[0].z;
  v_50.y = _World2Object[1].z;
  v_50.z = _World2Object[2].z;
  v_50.w = _World2Object[3].z;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize(((v_49.xyz * tmpvar_17.z) + (v_50.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_51;
  highp mat3 tmpvar_52;
  tmpvar_52[0] = _Object2World[0].xyz;
  tmpvar_52[1] = _Object2World[1].xyz;
  tmpvar_52[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize((tmpvar_52 * tmpvar_17));
  worldTangent_3 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_55;
  tmpvar_55 = -(tmpvar_54);
  worldBinormal_2 = tmpvar_55;
  lowp vec3 tmpvar_56;
  tmpvar_56.x = worldTangent_3.x;
  tmpvar_56.y = worldBinormal_2.x;
  tmpvar_56.z = worldNormal_4.x;
  lowp vec3 tmpvar_57;
  tmpvar_57.x = worldTangent_3.y;
  tmpvar_57.y = worldBinormal_2.y;
  tmpvar_57.z = worldNormal_4.y;
  lowp vec3 tmpvar_58;
  tmpvar_58.x = worldTangent_3.z;
  tmpvar_58.y = worldBinormal_2.z;
  tmpvar_58.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_56;
  xlv_TEXCOORD1 = tmpvar_57;
  xlv_TEXCOORD2 = tmpvar_58;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in lowp vec3 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in mediump vec4 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp float atten_5;
  mediump vec4 lightCoord_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD4;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_7 = tmpvar_9;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_11 = tmpvar_19;
  lowp float x_20;
  x_20 = (tmpvar_11 - _Cutoff);
  if ((x_20 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_21 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_21.x, max (tmpvar_21.y, tmpvar_21.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_22;
  tmpvar_22 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  tmpvar_10 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = ((texture (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = xlv_TEXCOORD3;
  highp vec4 tmpvar_25;
  tmpvar_25 = (_LightMatrix0 * tmpvar_24);
  lightCoord_6 = tmpvar_25;
  lowp vec4 tmpvar_26;
  mediump vec2 P_27;
  P_27 = ((lightCoord_6.xy / lightCoord_6.w) + 0.5);
  tmpvar_26 = texture (_LightTexture0, P_27);
  mediump float tmpvar_28;
  tmpvar_28 = dot (lightCoord_6.xyz, lightCoord_6.xyz);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture (_LightTextureB0, vec2(tmpvar_28));
  mediump float tmpvar_30;
  tmpvar_30 = ((float(
    (lightCoord_6.z > 0.0)
  ) * tmpvar_26.w) * tmpvar_29.w);
  atten_5 = tmpvar_30;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_23);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_23);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_23);
  lowp vec3 tmpvar_31;
  tmpvar_31 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_31;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_5);
  lowp vec4 c_32;
  lowp vec4 c_33;
  lowp float diff_34;
  mediump float tmpvar_35;
  tmpvar_35 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_34 = tmpvar_35;
  mediump vec3 tmpvar_36;
  tmpvar_36 = ((tmpvar_10 * tmpvar_1) * diff_34);
  c_33.xyz = tmpvar_36;
  c_33.w = tmpvar_11;
  c_32.w = c_33.w;
  mediump vec3 tmpvar_37;
  tmpvar_37 = c_33.xyz;
  c_32.xyz = tmpvar_37;
  c_4.xyz = c_32.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_18.z / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.570796 + (abs(tmpvar_19) * (-0.2146018 + (
        abs(tmpvar_19)
       * 
        (0.08656672 + (abs(tmpvar_19) * -0.03102955))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  highp vec3 tmpvar_26;
  tmpvar_26 = (vec3(tmpvar_19) + tmpvar_25);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_9.xz = tmpvar_28.xz;
  billboardPos_9.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_9;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_33.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_34.x + (tmpvar_34.y * tmpvar_34.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_30)));
    vPos_29 = (normalize(vPos_29) * fLength_31);
    billboardPos_9 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    ((tmpvar_26 + tmpvar_27.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_11.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_40;
  } else {
    highp vec2 tmpvar_41;
    tmpvar_41 = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_41;
  };
  highp float tmpvar_42;
  tmpvar_42 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_44;
  highp vec4 tmpvar_45;
  tmpvar_45 = (tmpvar_43 * 0.5);
  highp vec2 tmpvar_46;
  tmpvar_46.x = tmpvar_45.x;
  tmpvar_46.y = (tmpvar_45.y * _ProjectionParams.x);
  o_44.xy = (tmpvar_46 + tmpvar_45.w);
  o_44.zw = tmpvar_43.zw;
  highp vec3 tmpvar_47;
  tmpvar_47 = o_44.xyw;
  tmpvar_8 = tmpvar_47;
  highp vec2 tmpvar_48;
  tmpvar_48 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_48;
  tmpvar_5 = _Color;
  highp vec4 v_49;
  v_49.x = _World2Object[0].x;
  v_49.y = _World2Object[1].x;
  v_49.z = _World2Object[2].x;
  v_49.w = _World2Object[3].x;
  highp vec4 v_50;
  v_50.x = _World2Object[0].z;
  v_50.y = _World2Object[1].z;
  v_50.z = _World2Object[2].z;
  v_50.w = _World2Object[3].z;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize(((v_49.xyz * tmpvar_17.z) + (v_50.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_51;
  highp mat3 tmpvar_52;
  tmpvar_52[0] = _Object2World[0].xyz;
  tmpvar_52[1] = _Object2World[1].xyz;
  tmpvar_52[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize((tmpvar_52 * tmpvar_17));
  worldTangent_3 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_55;
  tmpvar_55 = -(tmpvar_54);
  worldBinormal_2 = tmpvar_55;
  lowp vec3 tmpvar_56;
  tmpvar_56.x = worldTangent_3.x;
  tmpvar_56.y = worldBinormal_2.x;
  tmpvar_56.z = worldNormal_4.x;
  lowp vec3 tmpvar_57;
  tmpvar_57.x = worldTangent_3.y;
  tmpvar_57.y = worldBinormal_2.y;
  tmpvar_57.z = worldNormal_4.y;
  lowp vec3 tmpvar_58;
  tmpvar_58.x = worldTangent_3.z;
  tmpvar_58.y = worldBinormal_2.z;
  tmpvar_58.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_56;
  xlv_TEXCOORD1 = tmpvar_57;
  xlv_TEXCOORD2 = tmpvar_58;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec3 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_24;
  tmpvar_24 = (_LightMatrix0 * tmpvar_23).xyz;
  lightCoord_5 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (lightCoord_5, lightCoord_5);
  lowp float tmpvar_26;
  tmpvar_26 = (texture2D (_LightTextureB0, vec2(tmpvar_25)).w * textureCube (_LightTexture0, lightCoord_5).w);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_22);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_22);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_22);
  lowp vec3 tmpvar_27;
  tmpvar_27 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_27;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_26);
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_30 = tmpvar_31;
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tmpvar_9 * tmpvar_1) * diff_30);
  c_29.xyz = tmpvar_32;
  c_29.w = tmpvar_10;
  c_28.w = c_29.w;
  mediump vec3 tmpvar_33;
  tmpvar_33 = c_29.xyz;
  c_28.xyz = tmpvar_33;
  c_4.xyz = c_28.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out lowp vec3 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out mediump vec4 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_18.z / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.570796 + (abs(tmpvar_19) * (-0.2146018 + (
        abs(tmpvar_19)
       * 
        (0.08656672 + (abs(tmpvar_19) * -0.03102955))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  highp vec3 tmpvar_26;
  tmpvar_26 = (vec3(tmpvar_19) + tmpvar_25);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_9.xz = tmpvar_28.xz;
  billboardPos_9.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_9;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_33.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_34.x + (tmpvar_34.y * tmpvar_34.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_30)));
    vPos_29 = (normalize(vPos_29) * fLength_31);
    billboardPos_9 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    ((tmpvar_26 + tmpvar_27.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_11.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_40;
  } else {
    highp vec2 tmpvar_41;
    tmpvar_41 = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_41;
  };
  highp float tmpvar_42;
  tmpvar_42 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_44;
  highp vec4 tmpvar_45;
  tmpvar_45 = (tmpvar_43 * 0.5);
  highp vec2 tmpvar_46;
  tmpvar_46.x = tmpvar_45.x;
  tmpvar_46.y = (tmpvar_45.y * _ProjectionParams.x);
  o_44.xy = (tmpvar_46 + tmpvar_45.w);
  o_44.zw = tmpvar_43.zw;
  highp vec3 tmpvar_47;
  tmpvar_47 = o_44.xyw;
  tmpvar_8 = tmpvar_47;
  highp vec2 tmpvar_48;
  tmpvar_48 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_48;
  tmpvar_5 = _Color;
  highp vec4 v_49;
  v_49.x = _World2Object[0].x;
  v_49.y = _World2Object[1].x;
  v_49.z = _World2Object[2].x;
  v_49.w = _World2Object[3].x;
  highp vec4 v_50;
  v_50.x = _World2Object[0].z;
  v_50.y = _World2Object[1].z;
  v_50.z = _World2Object[2].z;
  v_50.w = _World2Object[3].z;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize(((v_49.xyz * tmpvar_17.z) + (v_50.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_51;
  highp mat3 tmpvar_52;
  tmpvar_52[0] = _Object2World[0].xyz;
  tmpvar_52[1] = _Object2World[1].xyz;
  tmpvar_52[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize((tmpvar_52 * tmpvar_17));
  worldTangent_3 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_55;
  tmpvar_55 = -(tmpvar_54);
  worldBinormal_2 = tmpvar_55;
  lowp vec3 tmpvar_56;
  tmpvar_56.x = worldTangent_3.x;
  tmpvar_56.y = worldBinormal_2.x;
  tmpvar_56.z = worldNormal_4.x;
  lowp vec3 tmpvar_57;
  tmpvar_57.x = worldTangent_3.y;
  tmpvar_57.y = worldBinormal_2.y;
  tmpvar_57.z = worldNormal_4.y;
  lowp vec3 tmpvar_58;
  tmpvar_58.x = worldTangent_3.z;
  tmpvar_58.y = worldBinormal_2.z;
  tmpvar_58.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_56;
  xlv_TEXCOORD1 = tmpvar_57;
  xlv_TEXCOORD2 = tmpvar_58;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in lowp vec3 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in mediump vec4 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec3 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_24;
  tmpvar_24 = (_LightMatrix0 * tmpvar_23).xyz;
  lightCoord_5 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (lightCoord_5, lightCoord_5);
  lowp float tmpvar_26;
  tmpvar_26 = (texture (_LightTextureB0, vec2(tmpvar_25)).w * texture (_LightTexture0, lightCoord_5).w);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_22);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_22);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_22);
  lowp vec3 tmpvar_27;
  tmpvar_27 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_27;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_26);
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_30 = tmpvar_31;
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tmpvar_9 * tmpvar_1) * diff_30);
  c_29.xyz = tmpvar_32;
  c_29.w = tmpvar_10;
  c_28.w = c_29.w;
  mediump vec3 tmpvar_33;
  tmpvar_33 = c_29.xyz;
  c_28.xyz = tmpvar_33;
  c_4.xyz = c_28.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_18.z / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.570796 + (abs(tmpvar_19) * (-0.2146018 + (
        abs(tmpvar_19)
       * 
        (0.08656672 + (abs(tmpvar_19) * -0.03102955))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  highp vec3 tmpvar_26;
  tmpvar_26 = (vec3(tmpvar_19) + tmpvar_25);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_9.xz = tmpvar_28.xz;
  billboardPos_9.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_9;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_33.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_34.x + (tmpvar_34.y * tmpvar_34.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_30)));
    vPos_29 = (normalize(vPos_29) * fLength_31);
    billboardPos_9 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    ((tmpvar_26 + tmpvar_27.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_11.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_40;
  } else {
    highp vec2 tmpvar_41;
    tmpvar_41 = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_41;
  };
  highp float tmpvar_42;
  tmpvar_42 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_44;
  highp vec4 tmpvar_45;
  tmpvar_45 = (tmpvar_43 * 0.5);
  highp vec2 tmpvar_46;
  tmpvar_46.x = tmpvar_45.x;
  tmpvar_46.y = (tmpvar_45.y * _ProjectionParams.x);
  o_44.xy = (tmpvar_46 + tmpvar_45.w);
  o_44.zw = tmpvar_43.zw;
  highp vec3 tmpvar_47;
  tmpvar_47 = o_44.xyw;
  tmpvar_8 = tmpvar_47;
  highp vec2 tmpvar_48;
  tmpvar_48 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_48;
  tmpvar_5 = _Color;
  highp vec4 v_49;
  v_49.x = _World2Object[0].x;
  v_49.y = _World2Object[1].x;
  v_49.z = _World2Object[2].x;
  v_49.w = _World2Object[3].x;
  highp vec4 v_50;
  v_50.x = _World2Object[0].z;
  v_50.y = _World2Object[1].z;
  v_50.z = _World2Object[2].z;
  v_50.w = _World2Object[3].z;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize(((v_49.xyz * tmpvar_17.z) + (v_50.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_51;
  highp mat3 tmpvar_52;
  tmpvar_52[0] = _Object2World[0].xyz;
  tmpvar_52[1] = _Object2World[1].xyz;
  tmpvar_52[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize((tmpvar_52 * tmpvar_17));
  worldTangent_3 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_55;
  tmpvar_55 = -(tmpvar_54);
  worldBinormal_2 = tmpvar_55;
  lowp vec3 tmpvar_56;
  tmpvar_56.x = worldTangent_3.x;
  tmpvar_56.y = worldBinormal_2.x;
  tmpvar_56.z = worldNormal_4.x;
  lowp vec3 tmpvar_57;
  tmpvar_57.x = worldTangent_3.y;
  tmpvar_57.y = worldBinormal_2.y;
  tmpvar_57.z = worldNormal_4.y;
  lowp vec3 tmpvar_58;
  tmpvar_58.x = worldTangent_3.z;
  tmpvar_58.y = worldBinormal_2.z;
  tmpvar_58.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_56;
  xlv_TEXCOORD1 = tmpvar_57;
  xlv_TEXCOORD2 = tmpvar_58;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec2 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = xlv_TEXCOORD3;
  highp vec2 tmpvar_24;
  tmpvar_24 = (_LightMatrix0 * tmpvar_23).xy;
  lightCoord_5 = tmpvar_24;
  lowp float tmpvar_25;
  tmpvar_25 = texture2D (_LightTexture0, lightCoord_5).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_22);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_22);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_22);
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_26;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_25);
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_29 = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tmpvar_9 * tmpvar_1) * diff_29);
  c_28.xyz = tmpvar_31;
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  mediump vec3 tmpvar_32;
  tmpvar_32 = c_28.xyz;
  c_27.xyz = tmpvar_32;
  c_4.xyz = c_27.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out lowp vec3 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out mediump vec4 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_18.z / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.570796 + (abs(tmpvar_19) * (-0.2146018 + (
        abs(tmpvar_19)
       * 
        (0.08656672 + (abs(tmpvar_19) * -0.03102955))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  highp vec3 tmpvar_26;
  tmpvar_26 = (vec3(tmpvar_19) + tmpvar_25);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_9.xz = tmpvar_28.xz;
  billboardPos_9.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_9;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_33.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_34.x + (tmpvar_34.y * tmpvar_34.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_30)));
    vPos_29 = (normalize(vPos_29) * fLength_31);
    billboardPos_9 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    ((tmpvar_26 + tmpvar_27.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_11.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_40;
  } else {
    highp vec2 tmpvar_41;
    tmpvar_41 = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_41;
  };
  highp float tmpvar_42;
  tmpvar_42 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_44;
  highp vec4 tmpvar_45;
  tmpvar_45 = (tmpvar_43 * 0.5);
  highp vec2 tmpvar_46;
  tmpvar_46.x = tmpvar_45.x;
  tmpvar_46.y = (tmpvar_45.y * _ProjectionParams.x);
  o_44.xy = (tmpvar_46 + tmpvar_45.w);
  o_44.zw = tmpvar_43.zw;
  highp vec3 tmpvar_47;
  tmpvar_47 = o_44.xyw;
  tmpvar_8 = tmpvar_47;
  highp vec2 tmpvar_48;
  tmpvar_48 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_48;
  tmpvar_5 = _Color;
  highp vec4 v_49;
  v_49.x = _World2Object[0].x;
  v_49.y = _World2Object[1].x;
  v_49.z = _World2Object[2].x;
  v_49.w = _World2Object[3].x;
  highp vec4 v_50;
  v_50.x = _World2Object[0].z;
  v_50.y = _World2Object[1].z;
  v_50.z = _World2Object[2].z;
  v_50.w = _World2Object[3].z;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize(((v_49.xyz * tmpvar_17.z) + (v_50.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_51;
  highp mat3 tmpvar_52;
  tmpvar_52[0] = _Object2World[0].xyz;
  tmpvar_52[1] = _Object2World[1].xyz;
  tmpvar_52[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize((tmpvar_52 * tmpvar_17));
  worldTangent_3 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_55;
  tmpvar_55 = -(tmpvar_54);
  worldBinormal_2 = tmpvar_55;
  lowp vec3 tmpvar_56;
  tmpvar_56.x = worldTangent_3.x;
  tmpvar_56.y = worldBinormal_2.x;
  tmpvar_56.z = worldNormal_4.x;
  lowp vec3 tmpvar_57;
  tmpvar_57.x = worldTangent_3.y;
  tmpvar_57.y = worldBinormal_2.y;
  tmpvar_57.z = worldNormal_4.y;
  lowp vec3 tmpvar_58;
  tmpvar_58.x = worldTangent_3.z;
  tmpvar_58.y = worldBinormal_2.z;
  tmpvar_58.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_56;
  xlv_TEXCOORD1 = tmpvar_57;
  xlv_TEXCOORD2 = tmpvar_58;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in lowp vec3 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in mediump vec4 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec2 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = xlv_TEXCOORD3;
  highp vec2 tmpvar_24;
  tmpvar_24 = (_LightMatrix0 * tmpvar_23).xy;
  lightCoord_5 = tmpvar_24;
  lowp float tmpvar_25;
  tmpvar_25 = texture (_LightTexture0, lightCoord_5).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_22);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_22);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_22);
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_26;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_25);
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_29 = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tmpvar_9 * tmpvar_1) * diff_29);
  c_28.xyz = tmpvar_31;
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  mediump vec3 tmpvar_32;
  tmpvar_32 = c_28.xyz;
  c_27.xyz = tmpvar_32;
  c_4.xyz = c_27.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "POINT" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
}
 }
 Pass {
  Name "PREPASS"
  Tags { "LIGHTMODE"="PrePassBase" "QUEUE"="AlphaTest" "IGNOREPROJECTOR"="true" "DisableBatching"="LodFading" "RenderType"="TransparentCutout" }
  Cull Off
  GpuProgramID 156039
Program "vp" {
SubProgram "gles " {
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec4 tmpvar_13;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_13 = _InstanceData;
  } else {
    tmpvar_13 = tmpvar_1;
  };
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * tmpvar_13.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_14.xz;
  billboardPos_7.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * tmpvar_13.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_15;
    vPos_15 = billboardPos_7;
    highp float fAdjust_16;
    highp float fLength_17;
    fLength_17 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_18;
    tmpvar_18 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_16 = tmpvar_18;
    if ((tmpvar_18 != 0.0)) {
      fAdjust_16 = pow (tmpvar_18, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_19;
    tmpvar_19.zw = vec2(0.0, 0.0);
    tmpvar_19.x = (tmpvar_12.x + tmpvar_13.w);
    tmpvar_19.y = (tmpvar_12.y + (tmpvar_13.w * 0.8));
    highp vec4 tmpvar_20;
    highp vec4 tmpvar_21;
    tmpvar_21 = abs(((
      fract((tmpvar_19 + 0.5))
     * 2.0) - 1.0));
    tmpvar_20 = (((
      (tmpvar_21 * tmpvar_21)
     * 
      (3.0 - (2.0 * tmpvar_21))
    ) - 0.5) * 2.0);
    vPos_15.xz = (tmpvar_14.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_20.x + (tmpvar_20.y * tmpvar_20.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_16)));
    vPos_15 = (normalize(vPos_15) * fLength_17);
    billboardPos_7 = vPos_15;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp float tmpvar_22;
  tmpvar_22 = (floor((
    ((_CameraXZAngle + tmpvar_13.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.x);
  highp float tmpvar_23;
  tmpvar_23 = (fract(abs(tmpvar_22)) * tmpvar_9.x);
  highp float tmpvar_24;
  if ((tmpvar_22 >= 0.0)) {
    tmpvar_24 = tmpvar_23;
  } else {
    tmpvar_24 = -(tmpvar_23);
  };
  highp vec4 tmpvar_25;
  tmpvar_25 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_24))];
  if ((tmpvar_25.w < 0.0)) {
    highp vec2 tmpvar_26;
    tmpvar_26 = (tmpvar_25.xy - (tmpvar_25.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_26;
  } else {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_25.xy + (tmpvar_25.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_27;
  };
  tmpvar_4 = _Color;
  highp vec4 v_28;
  v_28.x = _World2Object[0].x;
  v_28.y = _World2Object[1].x;
  v_28.z = _World2Object[2].x;
  v_28.w = _World2Object[3].x;
  highp vec4 v_29;
  v_29.x = _World2Object[0].y;
  v_29.y = _World2Object[1].y;
  v_29.z = _World2Object[2].y;
  v_29.w = _World2Object[3].y;
  highp vec4 v_30;
  v_30.x = _World2Object[0].z;
  v_30.y = _World2Object[1].z;
  v_30.z = _World2Object[2].z;
  v_30.w = _World2Object[3].z;
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize(((
    (v_28.xyz * _BillboardNormal.x)
   + 
    (v_29.xyz * _BillboardNormal.y)
  ) + (v_30.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_31;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp float tmpvar_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_4 = tmpvar_5;
  mediump float tmpvar_6;
  tmpvar_6 = (diffuseColor_4.w * _Color.w);
  tmpvar_3 = tmpvar_6;
  lowp float x_7;
  x_7 = (tmpvar_3 - _Cutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}



#endif"
}
SubProgram "gles3 " {
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec4 tmpvar_13;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_13 = _InstanceData;
  } else {
    tmpvar_13 = tmpvar_1;
  };
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * tmpvar_13.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_14.xz;
  billboardPos_7.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * tmpvar_13.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_15;
    vPos_15 = billboardPos_7;
    highp float fAdjust_16;
    highp float fLength_17;
    fLength_17 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_18;
    tmpvar_18 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_16 = tmpvar_18;
    if ((tmpvar_18 != 0.0)) {
      fAdjust_16 = pow (tmpvar_18, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_19;
    tmpvar_19.zw = vec2(0.0, 0.0);
    tmpvar_19.x = (tmpvar_12.x + tmpvar_13.w);
    tmpvar_19.y = (tmpvar_12.y + (tmpvar_13.w * 0.8));
    highp vec4 tmpvar_20;
    highp vec4 tmpvar_21;
    tmpvar_21 = abs(((
      fract((tmpvar_19 + 0.5))
     * 2.0) - 1.0));
    tmpvar_20 = (((
      (tmpvar_21 * tmpvar_21)
     * 
      (3.0 - (2.0 * tmpvar_21))
    ) - 0.5) * 2.0);
    vPos_15.xz = (tmpvar_14.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_20.x + (tmpvar_20.y * tmpvar_20.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_16)));
    vPos_15 = (normalize(vPos_15) * fLength_17);
    billboardPos_7 = vPos_15;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp float tmpvar_22;
  tmpvar_22 = (floor((
    ((_CameraXZAngle + tmpvar_13.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.x);
  highp float tmpvar_23;
  tmpvar_23 = (fract(abs(tmpvar_22)) * tmpvar_9.x);
  highp float tmpvar_24;
  if ((tmpvar_22 >= 0.0)) {
    tmpvar_24 = tmpvar_23;
  } else {
    tmpvar_24 = -(tmpvar_23);
  };
  highp vec4 tmpvar_25;
  tmpvar_25 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_24))];
  if ((tmpvar_25.w < 0.0)) {
    highp vec2 tmpvar_26;
    tmpvar_26 = (tmpvar_25.xy - (tmpvar_25.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_26;
  } else {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_25.xy + (tmpvar_25.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_27;
  };
  tmpvar_4 = _Color;
  highp vec4 v_28;
  v_28.x = _World2Object[0].x;
  v_28.y = _World2Object[1].x;
  v_28.z = _World2Object[2].x;
  v_28.w = _World2Object[3].x;
  highp vec4 v_29;
  v_29.x = _World2Object[0].y;
  v_29.y = _World2Object[1].y;
  v_29.z = _World2Object[2].y;
  v_29.w = _World2Object[3].y;
  highp vec4 v_30;
  v_30.x = _World2Object[0].z;
  v_30.y = _World2Object[1].z;
  v_30.z = _World2Object[2].z;
  v_30.w = _World2Object[3].z;
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize(((
    (v_28.xyz * _BillboardNormal.x)
   + 
    (v_29.xyz * _BillboardNormal.y)
  ) + (v_30.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_31;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp float tmpvar_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_4 = tmpvar_5;
  mediump float tmpvar_6;
  tmpvar_6 = (diffuseColor_4.w * _Color.w);
  tmpvar_3 = tmpvar_6;
  lowp float x_7;
  x_7 = (tmpvar_3 - _Cutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  _glesFragData[0] = res_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "EFFECT_HUE_VARIATION" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec4 tmpvar_13;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_13 = _InstanceData;
  } else {
    tmpvar_13 = tmpvar_1;
  };
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * tmpvar_13.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_14.xz;
  billboardPos_7.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * tmpvar_13.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_15;
    vPos_15 = billboardPos_7;
    highp float fAdjust_16;
    highp float fLength_17;
    fLength_17 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_18;
    tmpvar_18 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_16 = tmpvar_18;
    if ((tmpvar_18 != 0.0)) {
      fAdjust_16 = pow (tmpvar_18, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_19;
    tmpvar_19.zw = vec2(0.0, 0.0);
    tmpvar_19.x = (tmpvar_12.x + tmpvar_13.w);
    tmpvar_19.y = (tmpvar_12.y + (tmpvar_13.w * 0.8));
    highp vec4 tmpvar_20;
    highp vec4 tmpvar_21;
    tmpvar_21 = abs(((
      fract((tmpvar_19 + 0.5))
     * 2.0) - 1.0));
    tmpvar_20 = (((
      (tmpvar_21 * tmpvar_21)
     * 
      (3.0 - (2.0 * tmpvar_21))
    ) - 0.5) * 2.0);
    vPos_15.xz = (tmpvar_14.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_20.x + (tmpvar_20.y * tmpvar_20.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_16)));
    vPos_15 = (normalize(vPos_15) * fLength_17);
    billboardPos_7 = vPos_15;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp float tmpvar_22;
  tmpvar_22 = (floor((
    ((_CameraXZAngle + tmpvar_13.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.x);
  highp float tmpvar_23;
  tmpvar_23 = (fract(abs(tmpvar_22)) * tmpvar_9.x);
  highp float tmpvar_24;
  if ((tmpvar_22 >= 0.0)) {
    tmpvar_24 = tmpvar_23;
  } else {
    tmpvar_24 = -(tmpvar_23);
  };
  highp vec4 tmpvar_25;
  tmpvar_25 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_24))];
  if ((tmpvar_25.w < 0.0)) {
    highp vec2 tmpvar_26;
    tmpvar_26 = (tmpvar_25.xy - (tmpvar_25.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_26;
  } else {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_25.xy + (tmpvar_25.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_27;
  };
  highp float tmpvar_28;
  tmpvar_28 = clamp ((fract(
    ((tmpvar_12.x + tmpvar_12.y) + tmpvar_12.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_28;
  tmpvar_4 = _Color;
  highp vec4 v_29;
  v_29.x = _World2Object[0].x;
  v_29.y = _World2Object[1].x;
  v_29.z = _World2Object[2].x;
  v_29.w = _World2Object[3].x;
  highp vec4 v_30;
  v_30.x = _World2Object[0].y;
  v_30.y = _World2Object[1].y;
  v_30.z = _World2Object[2].y;
  v_30.w = _World2Object[3].y;
  highp vec4 v_31;
  v_31.x = _World2Object[0].z;
  v_31.y = _World2Object[1].z;
  v_31.z = _World2Object[2].z;
  v_31.w = _World2Object[3].z;
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize(((
    (v_29.xyz * _BillboardNormal.x)
   + 
    (v_30.xyz * _BillboardNormal.y)
  ) + (v_31.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_32;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp float tmpvar_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_4 = tmpvar_5;
  mediump float tmpvar_6;
  tmpvar_6 = (diffuseColor_4.w * _Color.w);
  tmpvar_3 = tmpvar_6;
  lowp float x_7;
  x_7 = (tmpvar_3 - _Cutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_4.xyz = clamp ((tmpvar_8 * (
    ((max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_8.x, max (tmpvar_8.y, tmpvar_8.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "EFFECT_HUE_VARIATION" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec4 tmpvar_13;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_13 = _InstanceData;
  } else {
    tmpvar_13 = tmpvar_1;
  };
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * tmpvar_13.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_14.xz;
  billboardPos_7.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * tmpvar_13.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_15;
    vPos_15 = billboardPos_7;
    highp float fAdjust_16;
    highp float fLength_17;
    fLength_17 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_18;
    tmpvar_18 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_16 = tmpvar_18;
    if ((tmpvar_18 != 0.0)) {
      fAdjust_16 = pow (tmpvar_18, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_19;
    tmpvar_19.zw = vec2(0.0, 0.0);
    tmpvar_19.x = (tmpvar_12.x + tmpvar_13.w);
    tmpvar_19.y = (tmpvar_12.y + (tmpvar_13.w * 0.8));
    highp vec4 tmpvar_20;
    highp vec4 tmpvar_21;
    tmpvar_21 = abs(((
      fract((tmpvar_19 + 0.5))
     * 2.0) - 1.0));
    tmpvar_20 = (((
      (tmpvar_21 * tmpvar_21)
     * 
      (3.0 - (2.0 * tmpvar_21))
    ) - 0.5) * 2.0);
    vPos_15.xz = (tmpvar_14.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_20.x + (tmpvar_20.y * tmpvar_20.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_16)));
    vPos_15 = (normalize(vPos_15) * fLength_17);
    billboardPos_7 = vPos_15;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp float tmpvar_22;
  tmpvar_22 = (floor((
    ((_CameraXZAngle + tmpvar_13.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.x);
  highp float tmpvar_23;
  tmpvar_23 = (fract(abs(tmpvar_22)) * tmpvar_9.x);
  highp float tmpvar_24;
  if ((tmpvar_22 >= 0.0)) {
    tmpvar_24 = tmpvar_23;
  } else {
    tmpvar_24 = -(tmpvar_23);
  };
  highp vec4 tmpvar_25;
  tmpvar_25 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_24))];
  if ((tmpvar_25.w < 0.0)) {
    highp vec2 tmpvar_26;
    tmpvar_26 = (tmpvar_25.xy - (tmpvar_25.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_26;
  } else {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_25.xy + (tmpvar_25.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_27;
  };
  highp float tmpvar_28;
  tmpvar_28 = clamp ((fract(
    ((tmpvar_12.x + tmpvar_12.y) + tmpvar_12.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_28;
  tmpvar_4 = _Color;
  highp vec4 v_29;
  v_29.x = _World2Object[0].x;
  v_29.y = _World2Object[1].x;
  v_29.z = _World2Object[2].x;
  v_29.w = _World2Object[3].x;
  highp vec4 v_30;
  v_30.x = _World2Object[0].y;
  v_30.y = _World2Object[1].y;
  v_30.z = _World2Object[2].y;
  v_30.w = _World2Object[3].y;
  highp vec4 v_31;
  v_31.x = _World2Object[0].z;
  v_31.y = _World2Object[1].z;
  v_31.z = _World2Object[2].z;
  v_31.w = _World2Object[3].z;
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize(((
    (v_29.xyz * _BillboardNormal.x)
   + 
    (v_30.xyz * _BillboardNormal.y)
  ) + (v_31.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_32;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp float tmpvar_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_4 = tmpvar_5;
  mediump float tmpvar_6;
  tmpvar_6 = (diffuseColor_4.w * _Color.w);
  tmpvar_3 = tmpvar_6;
  lowp float x_7;
  x_7 = (tmpvar_3 - _Cutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_4.xyz = clamp ((tmpvar_8 * (
    ((max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_8.x, max (tmpvar_8.y, tmpvar_8.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  _glesFragData[0] = res_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "EFFECT_BUMP" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_28;
  };
  tmpvar_5 = _Color;
  highp vec3 tmpvar_29;
  tmpvar_29 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_30;
  v_30.x = _World2Object[0].x;
  v_30.y = _World2Object[1].x;
  v_30.z = _World2Object[2].x;
  v_30.w = _World2Object[3].x;
  highp vec4 v_31;
  v_31.x = _World2Object[0].y;
  v_31.y = _World2Object[1].y;
  v_31.z = _World2Object[2].y;
  v_31.w = _World2Object[3].y;
  highp vec4 v_32;
  v_32.x = _World2Object[0].z;
  v_32.y = _World2Object[1].z;
  v_32.z = _World2Object[2].z;
  v_32.w = _World2Object[3].z;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(((
    (v_30.xyz * _BillboardNormal.x)
   + 
    (v_31.xyz * _BillboardNormal.y)
  ) + (v_32.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_33;
  highp mat3 tmpvar_34;
  tmpvar_34[0] = _Object2World[0].xyz;
  tmpvar_34[1] = _Object2World[1].xyz;
  tmpvar_34[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((tmpvar_34 * _BillboardTangent));
  worldTangent_3 = tmpvar_35;
  lowp vec3 tmpvar_36;
  tmpvar_36 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_37;
  tmpvar_37 = -(tmpvar_36);
  worldBinormal_2 = tmpvar_37;
  highp vec4 tmpvar_38;
  tmpvar_38.x = worldTangent_3.x;
  tmpvar_38.y = worldBinormal_2.x;
  tmpvar_38.z = worldNormal_4.x;
  tmpvar_38.w = tmpvar_29.x;
  highp vec4 tmpvar_39;
  tmpvar_39.x = worldTangent_3.y;
  tmpvar_39.y = worldBinormal_2.y;
  tmpvar_39.z = worldNormal_4.y;
  tmpvar_39.w = tmpvar_29.y;
  highp vec4 tmpvar_40;
  tmpvar_40.x = worldTangent_3.z;
  tmpvar_40.y = worldBinormal_2.z;
  tmpvar_40.z = worldNormal_4.z;
  tmpvar_40.w = tmpvar_29.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_38;
  xlv_TEXCOORD1 = tmpvar_39;
  xlv_TEXCOORD2 = tmpvar_40;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 worldN_2;
  lowp float tmpvar_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_4 = tmpvar_5;
  mediump float tmpvar_6;
  tmpvar_6 = (diffuseColor_4.w * _Color.w);
  tmpvar_3 = tmpvar_6;
  lowp float x_7;
  x_7 = (tmpvar_3 - _Cutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  lowp vec3 tmpvar_8;
  tmpvar_8 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_9;
  tmpvar_9 = dot (xlv_TEXCOORD0.xyz, tmpvar_8);
  worldN_2.x = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = dot (xlv_TEXCOORD1.xyz, tmpvar_8);
  worldN_2.y = tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = dot (xlv_TEXCOORD2.xyz, tmpvar_8);
  worldN_2.z = tmpvar_11;
  res_1.xyz = ((worldN_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "EFFECT_BUMP" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_28;
  };
  tmpvar_5 = _Color;
  highp vec3 tmpvar_29;
  tmpvar_29 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_30;
  v_30.x = _World2Object[0].x;
  v_30.y = _World2Object[1].x;
  v_30.z = _World2Object[2].x;
  v_30.w = _World2Object[3].x;
  highp vec4 v_31;
  v_31.x = _World2Object[0].y;
  v_31.y = _World2Object[1].y;
  v_31.z = _World2Object[2].y;
  v_31.w = _World2Object[3].y;
  highp vec4 v_32;
  v_32.x = _World2Object[0].z;
  v_32.y = _World2Object[1].z;
  v_32.z = _World2Object[2].z;
  v_32.w = _World2Object[3].z;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(((
    (v_30.xyz * _BillboardNormal.x)
   + 
    (v_31.xyz * _BillboardNormal.y)
  ) + (v_32.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_33;
  highp mat3 tmpvar_34;
  tmpvar_34[0] = _Object2World[0].xyz;
  tmpvar_34[1] = _Object2World[1].xyz;
  tmpvar_34[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((tmpvar_34 * _BillboardTangent));
  worldTangent_3 = tmpvar_35;
  lowp vec3 tmpvar_36;
  tmpvar_36 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_37;
  tmpvar_37 = -(tmpvar_36);
  worldBinormal_2 = tmpvar_37;
  highp vec4 tmpvar_38;
  tmpvar_38.x = worldTangent_3.x;
  tmpvar_38.y = worldBinormal_2.x;
  tmpvar_38.z = worldNormal_4.x;
  tmpvar_38.w = tmpvar_29.x;
  highp vec4 tmpvar_39;
  tmpvar_39.x = worldTangent_3.y;
  tmpvar_39.y = worldBinormal_2.y;
  tmpvar_39.z = worldNormal_4.y;
  tmpvar_39.w = tmpvar_29.y;
  highp vec4 tmpvar_40;
  tmpvar_40.x = worldTangent_3.z;
  tmpvar_40.y = worldBinormal_2.z;
  tmpvar_40.z = worldNormal_4.z;
  tmpvar_40.w = tmpvar_29.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_38;
  xlv_TEXCOORD1 = tmpvar_39;
  xlv_TEXCOORD2 = tmpvar_40;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 worldN_2;
  lowp float tmpvar_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_4 = tmpvar_5;
  mediump float tmpvar_6;
  tmpvar_6 = (diffuseColor_4.w * _Color.w);
  tmpvar_3 = tmpvar_6;
  lowp float x_7;
  x_7 = (tmpvar_3 - _Cutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  lowp vec3 tmpvar_8;
  tmpvar_8 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_9;
  tmpvar_9 = dot (xlv_TEXCOORD0.xyz, tmpvar_8);
  worldN_2.x = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = dot (xlv_TEXCOORD1.xyz, tmpvar_8);
  worldN_2.y = tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = dot (xlv_TEXCOORD2.xyz, tmpvar_8);
  worldN_2.z = tmpvar_11;
  res_1.xyz = ((worldN_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  _glesFragData[0] = res_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_28;
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_29;
  tmpvar_5 = _Color;
  highp vec3 tmpvar_30;
  tmpvar_30 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_31;
  v_31.x = _World2Object[0].x;
  v_31.y = _World2Object[1].x;
  v_31.z = _World2Object[2].x;
  v_31.w = _World2Object[3].x;
  highp vec4 v_32;
  v_32.x = _World2Object[0].y;
  v_32.y = _World2Object[1].y;
  v_32.z = _World2Object[2].y;
  v_32.w = _World2Object[3].y;
  highp vec4 v_33;
  v_33.x = _World2Object[0].z;
  v_33.y = _World2Object[1].z;
  v_33.z = _World2Object[2].z;
  v_33.w = _World2Object[3].z;
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize(((
    (v_31.xyz * _BillboardNormal.x)
   + 
    (v_32.xyz * _BillboardNormal.y)
  ) + (v_33.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_34;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = _Object2World[0].xyz;
  tmpvar_35[1] = _Object2World[1].xyz;
  tmpvar_35[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((tmpvar_35 * _BillboardTangent));
  worldTangent_3 = tmpvar_36;
  lowp vec3 tmpvar_37;
  tmpvar_37 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_38;
  tmpvar_38 = -(tmpvar_37);
  worldBinormal_2 = tmpvar_38;
  highp vec4 tmpvar_39;
  tmpvar_39.x = worldTangent_3.x;
  tmpvar_39.y = worldBinormal_2.x;
  tmpvar_39.z = worldNormal_4.x;
  tmpvar_39.w = tmpvar_30.x;
  highp vec4 tmpvar_40;
  tmpvar_40.x = worldTangent_3.y;
  tmpvar_40.y = worldBinormal_2.y;
  tmpvar_40.z = worldNormal_4.y;
  tmpvar_40.w = tmpvar_30.y;
  highp vec4 tmpvar_41;
  tmpvar_41.x = worldTangent_3.z;
  tmpvar_41.y = worldBinormal_2.z;
  tmpvar_41.z = worldNormal_4.z;
  tmpvar_41.w = tmpvar_30.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_39;
  xlv_TEXCOORD1 = tmpvar_40;
  xlv_TEXCOORD2 = tmpvar_41;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 worldN_2;
  lowp float tmpvar_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_4 = tmpvar_5;
  mediump float tmpvar_6;
  tmpvar_6 = (diffuseColor_4.w * _Color.w);
  tmpvar_3 = tmpvar_6;
  lowp float x_7;
  x_7 = (tmpvar_3 - _Cutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_4.xyz = clamp ((tmpvar_8 * (
    ((max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_8.x, max (tmpvar_8.y, tmpvar_8.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  lowp vec3 tmpvar_9;
  tmpvar_9 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_10;
  tmpvar_10 = dot (xlv_TEXCOORD0.xyz, tmpvar_9);
  worldN_2.x = tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = dot (xlv_TEXCOORD1.xyz, tmpvar_9);
  worldN_2.y = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = dot (xlv_TEXCOORD2.xyz, tmpvar_9);
  worldN_2.z = tmpvar_12;
  res_1.xyz = ((worldN_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_28;
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_29;
  tmpvar_5 = _Color;
  highp vec3 tmpvar_30;
  tmpvar_30 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_31;
  v_31.x = _World2Object[0].x;
  v_31.y = _World2Object[1].x;
  v_31.z = _World2Object[2].x;
  v_31.w = _World2Object[3].x;
  highp vec4 v_32;
  v_32.x = _World2Object[0].y;
  v_32.y = _World2Object[1].y;
  v_32.z = _World2Object[2].y;
  v_32.w = _World2Object[3].y;
  highp vec4 v_33;
  v_33.x = _World2Object[0].z;
  v_33.y = _World2Object[1].z;
  v_33.z = _World2Object[2].z;
  v_33.w = _World2Object[3].z;
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize(((
    (v_31.xyz * _BillboardNormal.x)
   + 
    (v_32.xyz * _BillboardNormal.y)
  ) + (v_33.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_34;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = _Object2World[0].xyz;
  tmpvar_35[1] = _Object2World[1].xyz;
  tmpvar_35[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((tmpvar_35 * _BillboardTangent));
  worldTangent_3 = tmpvar_36;
  lowp vec3 tmpvar_37;
  tmpvar_37 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_38;
  tmpvar_38 = -(tmpvar_37);
  worldBinormal_2 = tmpvar_38;
  highp vec4 tmpvar_39;
  tmpvar_39.x = worldTangent_3.x;
  tmpvar_39.y = worldBinormal_2.x;
  tmpvar_39.z = worldNormal_4.x;
  tmpvar_39.w = tmpvar_30.x;
  highp vec4 tmpvar_40;
  tmpvar_40.x = worldTangent_3.y;
  tmpvar_40.y = worldBinormal_2.y;
  tmpvar_40.z = worldNormal_4.y;
  tmpvar_40.w = tmpvar_30.y;
  highp vec4 tmpvar_41;
  tmpvar_41.x = worldTangent_3.z;
  tmpvar_41.y = worldBinormal_2.z;
  tmpvar_41.z = worldNormal_4.z;
  tmpvar_41.w = tmpvar_30.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_39;
  xlv_TEXCOORD1 = tmpvar_40;
  xlv_TEXCOORD2 = tmpvar_41;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 worldN_2;
  lowp float tmpvar_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_4 = tmpvar_5;
  mediump float tmpvar_6;
  tmpvar_6 = (diffuseColor_4.w * _Color.w);
  tmpvar_3 = tmpvar_6;
  lowp float x_7;
  x_7 = (tmpvar_3 - _Cutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_4.xyz = clamp ((tmpvar_8 * (
    ((max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_8.x, max (tmpvar_8.y, tmpvar_8.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  lowp vec3 tmpvar_9;
  tmpvar_9 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_10;
  tmpvar_10 = dot (xlv_TEXCOORD0.xyz, tmpvar_9);
  worldN_2.x = tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = dot (xlv_TEXCOORD1.xyz, tmpvar_9);
  worldN_2.y = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = dot (xlv_TEXCOORD2.xyz, tmpvar_9);
  worldN_2.z = tmpvar_12;
  res_1.xyz = ((worldN_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  _glesFragData[0] = res_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - tmpvar_12));
  highp vec3 tmpvar_14;
  tmpvar_14.y = 0.0;
  tmpvar_14.x = -(tmpvar_13.z);
  tmpvar_14.z = tmpvar_13.x;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15.z;
  tmpvar_16.z = -(tmpvar_15.x);
  highp float tmpvar_17;
  if ((abs(tmpvar_15.z) > (1e-08 * abs(tmpvar_16.z)))) {
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_16.z / tmpvar_15.z);
    tmpvar_17 = (tmpvar_18 * inversesqrt((
      (tmpvar_18 * tmpvar_18)
     + 1.0)));
    tmpvar_17 = (sign(tmpvar_17) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_17)))
     * 
      (1.570796 + (abs(tmpvar_17) * (-0.2146018 + (
        abs(tmpvar_17)
       * 
        (0.08656672 + (abs(tmpvar_17) * -0.03102955))
      ))))
    )));
    if ((tmpvar_15.z < 0.0)) {
      if ((tmpvar_16.z >= 0.0)) {
        tmpvar_17 += 3.141593;
      } else {
        tmpvar_17 = (tmpvar_17 - 3.141593);
      };
    };
  } else {
    tmpvar_17 = (sign(tmpvar_16.z) * 1.570796);
  };
  bvec3 tmpvar_19;
  tmpvar_19 = lessThan (vec3(tmpvar_17), vec3(0.0, 0.0, 0.0));
  float tmpvar_20;
  if (tmpvar_19.x) {
    tmpvar_20 = 6.283185;
  } else {
    tmpvar_20 = 0.0;
  };
  float tmpvar_21;
  if (tmpvar_19.y) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_19.z) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  vec3 tmpvar_23;
  tmpvar_23.x = tmpvar_20;
  tmpvar_23.y = tmpvar_21;
  tmpvar_23.z = tmpvar_22;
  highp vec3 tmpvar_24;
  tmpvar_24 = (vec3(tmpvar_17) + tmpvar_23);
  highp vec4 tmpvar_25;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_25 = _InstanceData;
  } else {
    tmpvar_25 = tmpvar_1;
  };
  highp vec3 tmpvar_26;
  tmpvar_26 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * tmpvar_25.x) * tmpvar_15);
  billboardPos_7.xz = tmpvar_26.xz;
  billboardPos_7.y = (tmpvar_26.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * tmpvar_25.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_27;
    vPos_27 = billboardPos_7;
    highp float fAdjust_28;
    highp float fLength_29;
    fLength_29 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_30;
    tmpvar_30 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_28 = tmpvar_30;
    if ((tmpvar_30 != 0.0)) {
      fAdjust_28 = pow (tmpvar_30, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_31;
    tmpvar_31.zw = vec2(0.0, 0.0);
    tmpvar_31.x = (tmpvar_12.x + tmpvar_25.w);
    tmpvar_31.y = (tmpvar_12.y + (tmpvar_25.w * 0.8));
    highp vec4 tmpvar_32;
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    tmpvar_32 = (((
      (tmpvar_33 * tmpvar_33)
     * 
      (3.0 - (2.0 * tmpvar_33))
    ) - 0.5) * 2.0);
    vPos_27.xz = (tmpvar_26.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_32.x + (tmpvar_32.y * tmpvar_32.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_28)));
    vPos_27 = (normalize(vPos_27) * fLength_29);
    billboardPos_7 = vPos_27;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_34;
  tmpvar_34 = (floor((
    ((tmpvar_24 + tmpvar_25.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.xxx);
  highp vec3 tmpvar_35;
  tmpvar_35 = (fract(abs(tmpvar_34)) * tmpvar_9.xxx);
  highp float tmpvar_36;
  if ((tmpvar_34.x >= 0.0)) {
    tmpvar_36 = tmpvar_35.x;
  } else {
    tmpvar_36 = -(tmpvar_35.x);
  };
  highp vec4 tmpvar_37;
  tmpvar_37 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_36))];
  if ((tmpvar_37.w < 0.0)) {
    highp vec2 tmpvar_38;
    tmpvar_38 = (tmpvar_37.xy - (tmpvar_37.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_38;
  } else {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_37.xy + (tmpvar_37.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_39;
  };
  tmpvar_4 = _Color;
  highp vec4 v_40;
  v_40.x = _World2Object[0].x;
  v_40.y = _World2Object[1].x;
  v_40.z = _World2Object[2].x;
  v_40.w = _World2Object[3].x;
  highp vec4 v_41;
  v_41.x = _World2Object[0].z;
  v_41.y = _World2Object[1].z;
  v_41.z = _World2Object[2].z;
  v_41.w = _World2Object[3].z;
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize(((v_40.xyz * tmpvar_15.z) + (v_41.xyz * tmpvar_16.z)));
  worldNormal_2 = tmpvar_42;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp float tmpvar_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_4 = tmpvar_5;
  mediump float tmpvar_6;
  tmpvar_6 = (diffuseColor_4.w * _Color.w);
  tmpvar_3 = tmpvar_6;
  lowp float x_7;
  x_7 = (tmpvar_3 - _Cutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - tmpvar_12));
  highp vec3 tmpvar_14;
  tmpvar_14.y = 0.0;
  tmpvar_14.x = -(tmpvar_13.z);
  tmpvar_14.z = tmpvar_13.x;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15.z;
  tmpvar_16.z = -(tmpvar_15.x);
  highp float tmpvar_17;
  if ((abs(tmpvar_15.z) > (1e-08 * abs(tmpvar_16.z)))) {
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_16.z / tmpvar_15.z);
    tmpvar_17 = (tmpvar_18 * inversesqrt((
      (tmpvar_18 * tmpvar_18)
     + 1.0)));
    tmpvar_17 = (sign(tmpvar_17) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_17)))
     * 
      (1.570796 + (abs(tmpvar_17) * (-0.2146018 + (
        abs(tmpvar_17)
       * 
        (0.08656672 + (abs(tmpvar_17) * -0.03102955))
      ))))
    )));
    if ((tmpvar_15.z < 0.0)) {
      if ((tmpvar_16.z >= 0.0)) {
        tmpvar_17 += 3.141593;
      } else {
        tmpvar_17 = (tmpvar_17 - 3.141593);
      };
    };
  } else {
    tmpvar_17 = (sign(tmpvar_16.z) * 1.570796);
  };
  bvec3 tmpvar_19;
  tmpvar_19 = lessThan (vec3(tmpvar_17), vec3(0.0, 0.0, 0.0));
  float tmpvar_20;
  if (tmpvar_19.x) {
    tmpvar_20 = 6.283185;
  } else {
    tmpvar_20 = 0.0;
  };
  float tmpvar_21;
  if (tmpvar_19.y) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_19.z) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  vec3 tmpvar_23;
  tmpvar_23.x = tmpvar_20;
  tmpvar_23.y = tmpvar_21;
  tmpvar_23.z = tmpvar_22;
  highp vec3 tmpvar_24;
  tmpvar_24 = (vec3(tmpvar_17) + tmpvar_23);
  highp vec4 tmpvar_25;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_25 = _InstanceData;
  } else {
    tmpvar_25 = tmpvar_1;
  };
  highp vec3 tmpvar_26;
  tmpvar_26 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * tmpvar_25.x) * tmpvar_15);
  billboardPos_7.xz = tmpvar_26.xz;
  billboardPos_7.y = (tmpvar_26.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * tmpvar_25.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_27;
    vPos_27 = billboardPos_7;
    highp float fAdjust_28;
    highp float fLength_29;
    fLength_29 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_30;
    tmpvar_30 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_28 = tmpvar_30;
    if ((tmpvar_30 != 0.0)) {
      fAdjust_28 = pow (tmpvar_30, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_31;
    tmpvar_31.zw = vec2(0.0, 0.0);
    tmpvar_31.x = (tmpvar_12.x + tmpvar_25.w);
    tmpvar_31.y = (tmpvar_12.y + (tmpvar_25.w * 0.8));
    highp vec4 tmpvar_32;
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    tmpvar_32 = (((
      (tmpvar_33 * tmpvar_33)
     * 
      (3.0 - (2.0 * tmpvar_33))
    ) - 0.5) * 2.0);
    vPos_27.xz = (tmpvar_26.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_32.x + (tmpvar_32.y * tmpvar_32.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_28)));
    vPos_27 = (normalize(vPos_27) * fLength_29);
    billboardPos_7 = vPos_27;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_34;
  tmpvar_34 = (floor((
    ((tmpvar_24 + tmpvar_25.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.xxx);
  highp vec3 tmpvar_35;
  tmpvar_35 = (fract(abs(tmpvar_34)) * tmpvar_9.xxx);
  highp float tmpvar_36;
  if ((tmpvar_34.x >= 0.0)) {
    tmpvar_36 = tmpvar_35.x;
  } else {
    tmpvar_36 = -(tmpvar_35.x);
  };
  highp vec4 tmpvar_37;
  tmpvar_37 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_36))];
  if ((tmpvar_37.w < 0.0)) {
    highp vec2 tmpvar_38;
    tmpvar_38 = (tmpvar_37.xy - (tmpvar_37.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_38;
  } else {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_37.xy + (tmpvar_37.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_39;
  };
  tmpvar_4 = _Color;
  highp vec4 v_40;
  v_40.x = _World2Object[0].x;
  v_40.y = _World2Object[1].x;
  v_40.z = _World2Object[2].x;
  v_40.w = _World2Object[3].x;
  highp vec4 v_41;
  v_41.x = _World2Object[0].z;
  v_41.y = _World2Object[1].z;
  v_41.z = _World2Object[2].z;
  v_41.w = _World2Object[3].z;
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize(((v_40.xyz * tmpvar_15.z) + (v_41.xyz * tmpvar_16.z)));
  worldNormal_2 = tmpvar_42;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp float tmpvar_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_4 = tmpvar_5;
  mediump float tmpvar_6;
  tmpvar_6 = (diffuseColor_4.w * _Color.w);
  tmpvar_3 = tmpvar_6;
  lowp float x_7;
  x_7 = (tmpvar_3 - _Cutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  _glesFragData[0] = res_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - tmpvar_12));
  highp vec3 tmpvar_14;
  tmpvar_14.y = 0.0;
  tmpvar_14.x = -(tmpvar_13.z);
  tmpvar_14.z = tmpvar_13.x;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15.z;
  tmpvar_16.z = -(tmpvar_15.x);
  highp float tmpvar_17;
  if ((abs(tmpvar_15.z) > (1e-08 * abs(tmpvar_16.z)))) {
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_16.z / tmpvar_15.z);
    tmpvar_17 = (tmpvar_18 * inversesqrt((
      (tmpvar_18 * tmpvar_18)
     + 1.0)));
    tmpvar_17 = (sign(tmpvar_17) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_17)))
     * 
      (1.570796 + (abs(tmpvar_17) * (-0.2146018 + (
        abs(tmpvar_17)
       * 
        (0.08656672 + (abs(tmpvar_17) * -0.03102955))
      ))))
    )));
    if ((tmpvar_15.z < 0.0)) {
      if ((tmpvar_16.z >= 0.0)) {
        tmpvar_17 += 3.141593;
      } else {
        tmpvar_17 = (tmpvar_17 - 3.141593);
      };
    };
  } else {
    tmpvar_17 = (sign(tmpvar_16.z) * 1.570796);
  };
  bvec3 tmpvar_19;
  tmpvar_19 = lessThan (vec3(tmpvar_17), vec3(0.0, 0.0, 0.0));
  float tmpvar_20;
  if (tmpvar_19.x) {
    tmpvar_20 = 6.283185;
  } else {
    tmpvar_20 = 0.0;
  };
  float tmpvar_21;
  if (tmpvar_19.y) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_19.z) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  vec3 tmpvar_23;
  tmpvar_23.x = tmpvar_20;
  tmpvar_23.y = tmpvar_21;
  tmpvar_23.z = tmpvar_22;
  highp vec3 tmpvar_24;
  tmpvar_24 = (vec3(tmpvar_17) + tmpvar_23);
  highp vec4 tmpvar_25;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_25 = _InstanceData;
  } else {
    tmpvar_25 = tmpvar_1;
  };
  highp vec3 tmpvar_26;
  tmpvar_26 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * tmpvar_25.x) * tmpvar_15);
  billboardPos_7.xz = tmpvar_26.xz;
  billboardPos_7.y = (tmpvar_26.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * tmpvar_25.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_27;
    vPos_27 = billboardPos_7;
    highp float fAdjust_28;
    highp float fLength_29;
    fLength_29 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_30;
    tmpvar_30 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_28 = tmpvar_30;
    if ((tmpvar_30 != 0.0)) {
      fAdjust_28 = pow (tmpvar_30, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_31;
    tmpvar_31.zw = vec2(0.0, 0.0);
    tmpvar_31.x = (tmpvar_12.x + tmpvar_25.w);
    tmpvar_31.y = (tmpvar_12.y + (tmpvar_25.w * 0.8));
    highp vec4 tmpvar_32;
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    tmpvar_32 = (((
      (tmpvar_33 * tmpvar_33)
     * 
      (3.0 - (2.0 * tmpvar_33))
    ) - 0.5) * 2.0);
    vPos_27.xz = (tmpvar_26.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_32.x + (tmpvar_32.y * tmpvar_32.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_28)));
    vPos_27 = (normalize(vPos_27) * fLength_29);
    billboardPos_7 = vPos_27;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_34;
  tmpvar_34 = (floor((
    ((tmpvar_24 + tmpvar_25.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.xxx);
  highp vec3 tmpvar_35;
  tmpvar_35 = (fract(abs(tmpvar_34)) * tmpvar_9.xxx);
  highp float tmpvar_36;
  if ((tmpvar_34.x >= 0.0)) {
    tmpvar_36 = tmpvar_35.x;
  } else {
    tmpvar_36 = -(tmpvar_35.x);
  };
  highp vec4 tmpvar_37;
  tmpvar_37 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_36))];
  if ((tmpvar_37.w < 0.0)) {
    highp vec2 tmpvar_38;
    tmpvar_38 = (tmpvar_37.xy - (tmpvar_37.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_38;
  } else {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_37.xy + (tmpvar_37.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_39;
  };
  highp float tmpvar_40;
  tmpvar_40 = clamp ((fract(
    ((tmpvar_12.x + tmpvar_12.y) + tmpvar_12.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_40;
  tmpvar_4 = _Color;
  highp vec4 v_41;
  v_41.x = _World2Object[0].x;
  v_41.y = _World2Object[1].x;
  v_41.z = _World2Object[2].x;
  v_41.w = _World2Object[3].x;
  highp vec4 v_42;
  v_42.x = _World2Object[0].z;
  v_42.y = _World2Object[1].z;
  v_42.z = _World2Object[2].z;
  v_42.w = _World2Object[3].z;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(((v_41.xyz * tmpvar_15.z) + (v_42.xyz * tmpvar_16.z)));
  worldNormal_2 = tmpvar_43;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp float tmpvar_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_4 = tmpvar_5;
  mediump float tmpvar_6;
  tmpvar_6 = (diffuseColor_4.w * _Color.w);
  tmpvar_3 = tmpvar_6;
  lowp float x_7;
  x_7 = (tmpvar_3 - _Cutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_4.xyz = clamp ((tmpvar_8 * (
    ((max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_8.x, max (tmpvar_8.y, tmpvar_8.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - tmpvar_12));
  highp vec3 tmpvar_14;
  tmpvar_14.y = 0.0;
  tmpvar_14.x = -(tmpvar_13.z);
  tmpvar_14.z = tmpvar_13.x;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15.z;
  tmpvar_16.z = -(tmpvar_15.x);
  highp float tmpvar_17;
  if ((abs(tmpvar_15.z) > (1e-08 * abs(tmpvar_16.z)))) {
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_16.z / tmpvar_15.z);
    tmpvar_17 = (tmpvar_18 * inversesqrt((
      (tmpvar_18 * tmpvar_18)
     + 1.0)));
    tmpvar_17 = (sign(tmpvar_17) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_17)))
     * 
      (1.570796 + (abs(tmpvar_17) * (-0.2146018 + (
        abs(tmpvar_17)
       * 
        (0.08656672 + (abs(tmpvar_17) * -0.03102955))
      ))))
    )));
    if ((tmpvar_15.z < 0.0)) {
      if ((tmpvar_16.z >= 0.0)) {
        tmpvar_17 += 3.141593;
      } else {
        tmpvar_17 = (tmpvar_17 - 3.141593);
      };
    };
  } else {
    tmpvar_17 = (sign(tmpvar_16.z) * 1.570796);
  };
  bvec3 tmpvar_19;
  tmpvar_19 = lessThan (vec3(tmpvar_17), vec3(0.0, 0.0, 0.0));
  float tmpvar_20;
  if (tmpvar_19.x) {
    tmpvar_20 = 6.283185;
  } else {
    tmpvar_20 = 0.0;
  };
  float tmpvar_21;
  if (tmpvar_19.y) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_19.z) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  vec3 tmpvar_23;
  tmpvar_23.x = tmpvar_20;
  tmpvar_23.y = tmpvar_21;
  tmpvar_23.z = tmpvar_22;
  highp vec3 tmpvar_24;
  tmpvar_24 = (vec3(tmpvar_17) + tmpvar_23);
  highp vec4 tmpvar_25;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_25 = _InstanceData;
  } else {
    tmpvar_25 = tmpvar_1;
  };
  highp vec3 tmpvar_26;
  tmpvar_26 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * tmpvar_25.x) * tmpvar_15);
  billboardPos_7.xz = tmpvar_26.xz;
  billboardPos_7.y = (tmpvar_26.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * tmpvar_25.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_27;
    vPos_27 = billboardPos_7;
    highp float fAdjust_28;
    highp float fLength_29;
    fLength_29 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_30;
    tmpvar_30 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_28 = tmpvar_30;
    if ((tmpvar_30 != 0.0)) {
      fAdjust_28 = pow (tmpvar_30, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_31;
    tmpvar_31.zw = vec2(0.0, 0.0);
    tmpvar_31.x = (tmpvar_12.x + tmpvar_25.w);
    tmpvar_31.y = (tmpvar_12.y + (tmpvar_25.w * 0.8));
    highp vec4 tmpvar_32;
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    tmpvar_32 = (((
      (tmpvar_33 * tmpvar_33)
     * 
      (3.0 - (2.0 * tmpvar_33))
    ) - 0.5) * 2.0);
    vPos_27.xz = (tmpvar_26.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_32.x + (tmpvar_32.y * tmpvar_32.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_28)));
    vPos_27 = (normalize(vPos_27) * fLength_29);
    billboardPos_7 = vPos_27;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_34;
  tmpvar_34 = (floor((
    ((tmpvar_24 + tmpvar_25.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.xxx);
  highp vec3 tmpvar_35;
  tmpvar_35 = (fract(abs(tmpvar_34)) * tmpvar_9.xxx);
  highp float tmpvar_36;
  if ((tmpvar_34.x >= 0.0)) {
    tmpvar_36 = tmpvar_35.x;
  } else {
    tmpvar_36 = -(tmpvar_35.x);
  };
  highp vec4 tmpvar_37;
  tmpvar_37 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_36))];
  if ((tmpvar_37.w < 0.0)) {
    highp vec2 tmpvar_38;
    tmpvar_38 = (tmpvar_37.xy - (tmpvar_37.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_38;
  } else {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_37.xy + (tmpvar_37.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_39;
  };
  highp float tmpvar_40;
  tmpvar_40 = clamp ((fract(
    ((tmpvar_12.x + tmpvar_12.y) + tmpvar_12.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_40;
  tmpvar_4 = _Color;
  highp vec4 v_41;
  v_41.x = _World2Object[0].x;
  v_41.y = _World2Object[1].x;
  v_41.z = _World2Object[2].x;
  v_41.w = _World2Object[3].x;
  highp vec4 v_42;
  v_42.x = _World2Object[0].z;
  v_42.y = _World2Object[1].z;
  v_42.z = _World2Object[2].z;
  v_42.w = _World2Object[3].z;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(((v_41.xyz * tmpvar_15.z) + (v_42.xyz * tmpvar_16.z)));
  worldNormal_2 = tmpvar_43;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp float tmpvar_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_4 = tmpvar_5;
  mediump float tmpvar_6;
  tmpvar_6 = (diffuseColor_4.w * _Color.w);
  tmpvar_3 = tmpvar_6;
  lowp float x_7;
  x_7 = (tmpvar_3 - _Cutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_4.xyz = clamp ((tmpvar_8 * (
    ((max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_8.x, max (tmpvar_8.y, tmpvar_8.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  _glesFragData[0] = res_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_40;
  };
  tmpvar_5 = _Color;
  highp vec3 tmpvar_41;
  tmpvar_41 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_42;
  v_42.x = _World2Object[0].x;
  v_42.y = _World2Object[1].x;
  v_42.z = _World2Object[2].x;
  v_42.w = _World2Object[3].x;
  highp vec4 v_43;
  v_43.x = _World2Object[0].z;
  v_43.y = _World2Object[1].z;
  v_43.z = _World2Object[2].z;
  v_43.w = _World2Object[3].z;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(((v_42.xyz * tmpvar_16.z) + (v_43.xyz * tmpvar_17.z)));
  worldNormal_4 = tmpvar_44;
  highp mat3 tmpvar_45;
  tmpvar_45[0] = _Object2World[0].xyz;
  tmpvar_45[1] = _Object2World[1].xyz;
  tmpvar_45[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_46;
  tmpvar_46 = normalize((tmpvar_45 * tmpvar_16));
  worldTangent_3 = tmpvar_46;
  lowp vec3 tmpvar_47;
  tmpvar_47 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_48;
  tmpvar_48 = -(tmpvar_47);
  worldBinormal_2 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49.x = worldTangent_3.x;
  tmpvar_49.y = worldBinormal_2.x;
  tmpvar_49.z = worldNormal_4.x;
  tmpvar_49.w = tmpvar_41.x;
  highp vec4 tmpvar_50;
  tmpvar_50.x = worldTangent_3.y;
  tmpvar_50.y = worldBinormal_2.y;
  tmpvar_50.z = worldNormal_4.y;
  tmpvar_50.w = tmpvar_41.y;
  highp vec4 tmpvar_51;
  tmpvar_51.x = worldTangent_3.z;
  tmpvar_51.y = worldBinormal_2.z;
  tmpvar_51.z = worldNormal_4.z;
  tmpvar_51.w = tmpvar_41.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_49;
  xlv_TEXCOORD1 = tmpvar_50;
  xlv_TEXCOORD2 = tmpvar_51;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 worldN_2;
  lowp float tmpvar_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_4 = tmpvar_5;
  mediump float tmpvar_6;
  tmpvar_6 = (diffuseColor_4.w * _Color.w);
  tmpvar_3 = tmpvar_6;
  lowp float x_7;
  x_7 = (tmpvar_3 - _Cutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  lowp vec3 tmpvar_8;
  tmpvar_8 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_9;
  tmpvar_9 = dot (xlv_TEXCOORD0.xyz, tmpvar_8);
  worldN_2.x = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = dot (xlv_TEXCOORD1.xyz, tmpvar_8);
  worldN_2.y = tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = dot (xlv_TEXCOORD2.xyz, tmpvar_8);
  worldN_2.z = tmpvar_11;
  res_1.xyz = ((worldN_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_40;
  };
  tmpvar_5 = _Color;
  highp vec3 tmpvar_41;
  tmpvar_41 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_42;
  v_42.x = _World2Object[0].x;
  v_42.y = _World2Object[1].x;
  v_42.z = _World2Object[2].x;
  v_42.w = _World2Object[3].x;
  highp vec4 v_43;
  v_43.x = _World2Object[0].z;
  v_43.y = _World2Object[1].z;
  v_43.z = _World2Object[2].z;
  v_43.w = _World2Object[3].z;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(((v_42.xyz * tmpvar_16.z) + (v_43.xyz * tmpvar_17.z)));
  worldNormal_4 = tmpvar_44;
  highp mat3 tmpvar_45;
  tmpvar_45[0] = _Object2World[0].xyz;
  tmpvar_45[1] = _Object2World[1].xyz;
  tmpvar_45[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_46;
  tmpvar_46 = normalize((tmpvar_45 * tmpvar_16));
  worldTangent_3 = tmpvar_46;
  lowp vec3 tmpvar_47;
  tmpvar_47 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_48;
  tmpvar_48 = -(tmpvar_47);
  worldBinormal_2 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49.x = worldTangent_3.x;
  tmpvar_49.y = worldBinormal_2.x;
  tmpvar_49.z = worldNormal_4.x;
  tmpvar_49.w = tmpvar_41.x;
  highp vec4 tmpvar_50;
  tmpvar_50.x = worldTangent_3.y;
  tmpvar_50.y = worldBinormal_2.y;
  tmpvar_50.z = worldNormal_4.y;
  tmpvar_50.w = tmpvar_41.y;
  highp vec4 tmpvar_51;
  tmpvar_51.x = worldTangent_3.z;
  tmpvar_51.y = worldBinormal_2.z;
  tmpvar_51.z = worldNormal_4.z;
  tmpvar_51.w = tmpvar_41.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_49;
  xlv_TEXCOORD1 = tmpvar_50;
  xlv_TEXCOORD2 = tmpvar_51;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 worldN_2;
  lowp float tmpvar_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_4 = tmpvar_5;
  mediump float tmpvar_6;
  tmpvar_6 = (diffuseColor_4.w * _Color.w);
  tmpvar_3 = tmpvar_6;
  lowp float x_7;
  x_7 = (tmpvar_3 - _Cutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  lowp vec3 tmpvar_8;
  tmpvar_8 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_9;
  tmpvar_9 = dot (xlv_TEXCOORD0.xyz, tmpvar_8);
  worldN_2.x = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = dot (xlv_TEXCOORD1.xyz, tmpvar_8);
  worldN_2.y = tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = dot (xlv_TEXCOORD2.xyz, tmpvar_8);
  worldN_2.z = tmpvar_11;
  res_1.xyz = ((worldN_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  _glesFragData[0] = res_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_40;
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_41;
  tmpvar_5 = _Color;
  highp vec3 tmpvar_42;
  tmpvar_42 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_43;
  v_43.x = _World2Object[0].x;
  v_43.y = _World2Object[1].x;
  v_43.z = _World2Object[2].x;
  v_43.w = _World2Object[3].x;
  highp vec4 v_44;
  v_44.x = _World2Object[0].z;
  v_44.y = _World2Object[1].z;
  v_44.z = _World2Object[2].z;
  v_44.w = _World2Object[3].z;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(((v_43.xyz * tmpvar_16.z) + (v_44.xyz * tmpvar_17.z)));
  worldNormal_4 = tmpvar_45;
  highp mat3 tmpvar_46;
  tmpvar_46[0] = _Object2World[0].xyz;
  tmpvar_46[1] = _Object2World[1].xyz;
  tmpvar_46[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_47;
  tmpvar_47 = normalize((tmpvar_46 * tmpvar_16));
  worldTangent_3 = tmpvar_47;
  lowp vec3 tmpvar_48;
  tmpvar_48 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_49;
  tmpvar_49 = -(tmpvar_48);
  worldBinormal_2 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50.x = worldTangent_3.x;
  tmpvar_50.y = worldBinormal_2.x;
  tmpvar_50.z = worldNormal_4.x;
  tmpvar_50.w = tmpvar_42.x;
  highp vec4 tmpvar_51;
  tmpvar_51.x = worldTangent_3.y;
  tmpvar_51.y = worldBinormal_2.y;
  tmpvar_51.z = worldNormal_4.y;
  tmpvar_51.w = tmpvar_42.y;
  highp vec4 tmpvar_52;
  tmpvar_52.x = worldTangent_3.z;
  tmpvar_52.y = worldBinormal_2.z;
  tmpvar_52.z = worldNormal_4.z;
  tmpvar_52.w = tmpvar_42.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_50;
  xlv_TEXCOORD1 = tmpvar_51;
  xlv_TEXCOORD2 = tmpvar_52;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 worldN_2;
  lowp float tmpvar_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_4 = tmpvar_5;
  mediump float tmpvar_6;
  tmpvar_6 = (diffuseColor_4.w * _Color.w);
  tmpvar_3 = tmpvar_6;
  lowp float x_7;
  x_7 = (tmpvar_3 - _Cutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_4.xyz = clamp ((tmpvar_8 * (
    ((max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_8.x, max (tmpvar_8.y, tmpvar_8.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  lowp vec3 tmpvar_9;
  tmpvar_9 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_10;
  tmpvar_10 = dot (xlv_TEXCOORD0.xyz, tmpvar_9);
  worldN_2.x = tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = dot (xlv_TEXCOORD1.xyz, tmpvar_9);
  worldN_2.y = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = dot (xlv_TEXCOORD2.xyz, tmpvar_9);
  worldN_2.z = tmpvar_12;
  res_1.xyz = ((worldN_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_40;
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_41;
  tmpvar_5 = _Color;
  highp vec3 tmpvar_42;
  tmpvar_42 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_43;
  v_43.x = _World2Object[0].x;
  v_43.y = _World2Object[1].x;
  v_43.z = _World2Object[2].x;
  v_43.w = _World2Object[3].x;
  highp vec4 v_44;
  v_44.x = _World2Object[0].z;
  v_44.y = _World2Object[1].z;
  v_44.z = _World2Object[2].z;
  v_44.w = _World2Object[3].z;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(((v_43.xyz * tmpvar_16.z) + (v_44.xyz * tmpvar_17.z)));
  worldNormal_4 = tmpvar_45;
  highp mat3 tmpvar_46;
  tmpvar_46[0] = _Object2World[0].xyz;
  tmpvar_46[1] = _Object2World[1].xyz;
  tmpvar_46[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_47;
  tmpvar_47 = normalize((tmpvar_46 * tmpvar_16));
  worldTangent_3 = tmpvar_47;
  lowp vec3 tmpvar_48;
  tmpvar_48 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_49;
  tmpvar_49 = -(tmpvar_48);
  worldBinormal_2 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50.x = worldTangent_3.x;
  tmpvar_50.y = worldBinormal_2.x;
  tmpvar_50.z = worldNormal_4.x;
  tmpvar_50.w = tmpvar_42.x;
  highp vec4 tmpvar_51;
  tmpvar_51.x = worldTangent_3.y;
  tmpvar_51.y = worldBinormal_2.y;
  tmpvar_51.z = worldNormal_4.y;
  tmpvar_51.w = tmpvar_42.y;
  highp vec4 tmpvar_52;
  tmpvar_52.x = worldTangent_3.z;
  tmpvar_52.y = worldBinormal_2.z;
  tmpvar_52.z = worldNormal_4.z;
  tmpvar_52.w = tmpvar_42.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_50;
  xlv_TEXCOORD1 = tmpvar_51;
  xlv_TEXCOORD2 = tmpvar_52;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 worldN_2;
  lowp float tmpvar_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_4 = tmpvar_5;
  mediump float tmpvar_6;
  tmpvar_6 = (diffuseColor_4.w * _Color.w);
  tmpvar_3 = tmpvar_6;
  lowp float x_7;
  x_7 = (tmpvar_3 - _Cutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_4.xyz = clamp ((tmpvar_8 * (
    ((max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_8.x, max (tmpvar_8.y, tmpvar_8.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  lowp vec3 tmpvar_9;
  tmpvar_9 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_10;
  tmpvar_10 = dot (xlv_TEXCOORD0.xyz, tmpvar_9);
  worldN_2.x = tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = dot (xlv_TEXCOORD1.xyz, tmpvar_9);
  worldN_2.y = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = dot (xlv_TEXCOORD2.xyz, tmpvar_9);
  worldN_2.z = tmpvar_12;
  res_1.xyz = ((worldN_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  _glesFragData[0] = res_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_28;
  };
  highp vec4 tmpvar_29;
  tmpvar_29 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (tmpvar_29 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = tmpvar_29.zw;
  highp vec3 tmpvar_33;
  tmpvar_33 = o_30.xyw;
  tmpvar_7 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_34;
  tmpvar_4 = _Color;
  highp vec4 v_35;
  v_35.x = _World2Object[0].x;
  v_35.y = _World2Object[1].x;
  v_35.z = _World2Object[2].x;
  v_35.w = _World2Object[3].x;
  highp vec4 v_36;
  v_36.x = _World2Object[0].y;
  v_36.y = _World2Object[1].y;
  v_36.z = _World2Object[2].y;
  v_36.w = _World2Object[3].y;
  highp vec4 v_37;
  v_37.x = _World2Object[0].z;
  v_37.y = _World2Object[1].z;
  v_37.z = _World2Object[2].z;
  v_37.w = _World2Object[3].z;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize(((
    (v_35.xyz * _BillboardNormal.x)
   + 
    (v_36.xyz * _BillboardNormal.y)
  ) + (v_37.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_38;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp float tmpvar_3;
  mediump vec4 diffuseColor_4;
  mediump vec2 projUV_5;
  mediump vec2 tmpvar_6;
  tmpvar_6 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_5.x = tmpvar_6.x;
  mediump float tmpvar_7;
  tmpvar_7 = fract(tmpvar_6.y);
  highp float tmpvar_8;
  tmpvar_8 = ((tmpvar_7 * 0.0625) + unity_LODFade.y);
  projUV_5.y = tmpvar_8;
  lowp float x_9;
  x_9 = (texture2D (_DitherMaskLOD2D, projUV_5).w - 0.5);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_4 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = (diffuseColor_4.w * _Color.w);
  tmpvar_3 = tmpvar_11;
  lowp float x_12;
  x_12 = (tmpvar_3 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_28;
  };
  highp vec4 tmpvar_29;
  tmpvar_29 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (tmpvar_29 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = tmpvar_29.zw;
  highp vec3 tmpvar_33;
  tmpvar_33 = o_30.xyw;
  tmpvar_7 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_34;
  tmpvar_4 = _Color;
  highp vec4 v_35;
  v_35.x = _World2Object[0].x;
  v_35.y = _World2Object[1].x;
  v_35.z = _World2Object[2].x;
  v_35.w = _World2Object[3].x;
  highp vec4 v_36;
  v_36.x = _World2Object[0].y;
  v_36.y = _World2Object[1].y;
  v_36.z = _World2Object[2].y;
  v_36.w = _World2Object[3].y;
  highp vec4 v_37;
  v_37.x = _World2Object[0].z;
  v_37.y = _World2Object[1].z;
  v_37.z = _World2Object[2].z;
  v_37.w = _World2Object[3].z;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize(((
    (v_35.xyz * _BillboardNormal.x)
   + 
    (v_36.xyz * _BillboardNormal.y)
  ) + (v_37.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_38;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp float tmpvar_3;
  mediump vec4 diffuseColor_4;
  mediump vec2 projUV_5;
  mediump vec2 tmpvar_6;
  tmpvar_6 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_5.x = tmpvar_6.x;
  mediump float tmpvar_7;
  tmpvar_7 = fract(tmpvar_6.y);
  highp float tmpvar_8;
  tmpvar_8 = ((tmpvar_7 * 0.0625) + unity_LODFade.y);
  projUV_5.y = tmpvar_8;
  lowp float x_9;
  x_9 = (texture (_DitherMaskLOD2D, projUV_5).w - 0.5);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_4 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = (diffuseColor_4.w * _Color.w);
  tmpvar_3 = tmpvar_11;
  lowp float x_12;
  x_12 = (tmpvar_3 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  _glesFragData[0] = res_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_28;
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = tmpvar_30.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  tmpvar_7 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_35;
  tmpvar_4 = _Color;
  highp vec4 v_36;
  v_36.x = _World2Object[0].x;
  v_36.y = _World2Object[1].x;
  v_36.z = _World2Object[2].x;
  v_36.w = _World2Object[3].x;
  highp vec4 v_37;
  v_37.x = _World2Object[0].y;
  v_37.y = _World2Object[1].y;
  v_37.z = _World2Object[2].y;
  v_37.w = _World2Object[3].y;
  highp vec4 v_38;
  v_38.x = _World2Object[0].z;
  v_38.y = _World2Object[1].z;
  v_38.z = _World2Object[2].z;
  v_38.w = _World2Object[3].z;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(((
    (v_36.xyz * _BillboardNormal.x)
   + 
    (v_37.xyz * _BillboardNormal.y)
  ) + (v_38.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_39;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp float tmpvar_3;
  mediump vec4 diffuseColor_4;
  mediump vec2 projUV_5;
  mediump vec2 tmpvar_6;
  tmpvar_6 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_5.x = tmpvar_6.x;
  mediump float tmpvar_7;
  tmpvar_7 = fract(tmpvar_6.y);
  highp float tmpvar_8;
  tmpvar_8 = ((tmpvar_7 * 0.0625) + unity_LODFade.y);
  projUV_5.y = tmpvar_8;
  lowp float x_9;
  x_9 = (texture2D (_DitherMaskLOD2D, projUV_5).w - 0.5);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_4 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = (diffuseColor_4.w * _Color.w);
  tmpvar_3 = tmpvar_11;
  lowp float x_12;
  x_12 = (tmpvar_3 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_4.xyz = clamp ((tmpvar_13 * (
    ((max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_28;
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = tmpvar_30.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  tmpvar_7 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_35;
  tmpvar_4 = _Color;
  highp vec4 v_36;
  v_36.x = _World2Object[0].x;
  v_36.y = _World2Object[1].x;
  v_36.z = _World2Object[2].x;
  v_36.w = _World2Object[3].x;
  highp vec4 v_37;
  v_37.x = _World2Object[0].y;
  v_37.y = _World2Object[1].y;
  v_37.z = _World2Object[2].y;
  v_37.w = _World2Object[3].y;
  highp vec4 v_38;
  v_38.x = _World2Object[0].z;
  v_38.y = _World2Object[1].z;
  v_38.z = _World2Object[2].z;
  v_38.w = _World2Object[3].z;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(((
    (v_36.xyz * _BillboardNormal.x)
   + 
    (v_37.xyz * _BillboardNormal.y)
  ) + (v_38.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_39;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp float tmpvar_3;
  mediump vec4 diffuseColor_4;
  mediump vec2 projUV_5;
  mediump vec2 tmpvar_6;
  tmpvar_6 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_5.x = tmpvar_6.x;
  mediump float tmpvar_7;
  tmpvar_7 = fract(tmpvar_6.y);
  highp float tmpvar_8;
  tmpvar_8 = ((tmpvar_7 * 0.0625) + unity_LODFade.y);
  projUV_5.y = tmpvar_8;
  lowp float x_9;
  x_9 = (texture (_DitherMaskLOD2D, projUV_5).w - 0.5);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_4 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = (diffuseColor_4.w * _Color.w);
  tmpvar_3 = tmpvar_11;
  lowp float x_12;
  x_12 = (tmpvar_3 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_4.xyz = clamp ((tmpvar_13 * (
    ((max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  _glesFragData[0] = res_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_16.xz;
  billboardPos_9.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_9;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_21.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_22.x + (tmpvar_22.y * tmpvar_22.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_18)));
    vPos_17 = (normalize(vPos_17) * fLength_19);
    billboardPos_9 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    ((_CameraXZAngle + tmpvar_15.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_28;
  } else {
    highp vec2 tmpvar_29;
    tmpvar_29 = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_29;
  };
  highp vec4 tmpvar_30;
  tmpvar_30 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = tmpvar_30.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  tmpvar_8 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_35;
  tmpvar_5 = _Color;
  highp vec3 tmpvar_36;
  tmpvar_36 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_37;
  v_37.x = _World2Object[0].x;
  v_37.y = _World2Object[1].x;
  v_37.z = _World2Object[2].x;
  v_37.w = _World2Object[3].x;
  highp vec4 v_38;
  v_38.x = _World2Object[0].y;
  v_38.y = _World2Object[1].y;
  v_38.z = _World2Object[2].y;
  v_38.w = _World2Object[3].y;
  highp vec4 v_39;
  v_39.x = _World2Object[0].z;
  v_39.y = _World2Object[1].z;
  v_39.z = _World2Object[2].z;
  v_39.w = _World2Object[3].z;
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize(((
    (v_37.xyz * _BillboardNormal.x)
   + 
    (v_38.xyz * _BillboardNormal.y)
  ) + (v_39.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_40;
  highp mat3 tmpvar_41;
  tmpvar_41[0] = _Object2World[0].xyz;
  tmpvar_41[1] = _Object2World[1].xyz;
  tmpvar_41[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize((tmpvar_41 * _BillboardTangent));
  worldTangent_3 = tmpvar_42;
  lowp vec3 tmpvar_43;
  tmpvar_43 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_44;
  tmpvar_44 = -(tmpvar_43);
  worldBinormal_2 = tmpvar_44;
  highp vec4 tmpvar_45;
  tmpvar_45.x = worldTangent_3.x;
  tmpvar_45.y = worldBinormal_2.x;
  tmpvar_45.z = worldNormal_4.x;
  tmpvar_45.w = tmpvar_36.x;
  highp vec4 tmpvar_46;
  tmpvar_46.x = worldTangent_3.y;
  tmpvar_46.y = worldBinormal_2.y;
  tmpvar_46.z = worldNormal_4.y;
  tmpvar_46.w = tmpvar_36.y;
  highp vec4 tmpvar_47;
  tmpvar_47.x = worldTangent_3.z;
  tmpvar_47.y = worldBinormal_2.z;
  tmpvar_47.z = worldNormal_4.z;
  tmpvar_47.w = tmpvar_36.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_45;
  xlv_TEXCOORD1 = tmpvar_46;
  xlv_TEXCOORD2 = tmpvar_47;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 worldN_2;
  lowp float tmpvar_3;
  mediump vec4 diffuseColor_4;
  mediump vec2 projUV_5;
  mediump vec2 tmpvar_6;
  tmpvar_6 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_5.x = tmpvar_6.x;
  mediump float tmpvar_7;
  tmpvar_7 = fract(tmpvar_6.y);
  highp float tmpvar_8;
  tmpvar_8 = ((tmpvar_7 * 0.0625) + unity_LODFade.y);
  projUV_5.y = tmpvar_8;
  lowp float x_9;
  x_9 = (texture2D (_DitherMaskLOD2D, projUV_5).w - 0.5);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_4 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = (diffuseColor_4.w * _Color.w);
  tmpvar_3 = tmpvar_11;
  lowp float x_12;
  x_12 = (tmpvar_3 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec3 tmpvar_13;
  tmpvar_13 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD0.xyz, tmpvar_13);
  worldN_2.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD1.xyz, tmpvar_13);
  worldN_2.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD2.xyz, tmpvar_13);
  worldN_2.z = tmpvar_16;
  res_1.xyz = ((worldN_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_16.xz;
  billboardPos_9.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_9;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_21.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_22.x + (tmpvar_22.y * tmpvar_22.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_18)));
    vPos_17 = (normalize(vPos_17) * fLength_19);
    billboardPos_9 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    ((_CameraXZAngle + tmpvar_15.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_28;
  } else {
    highp vec2 tmpvar_29;
    tmpvar_29 = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_29;
  };
  highp vec4 tmpvar_30;
  tmpvar_30 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = tmpvar_30.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  tmpvar_8 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_35;
  tmpvar_5 = _Color;
  highp vec3 tmpvar_36;
  tmpvar_36 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_37;
  v_37.x = _World2Object[0].x;
  v_37.y = _World2Object[1].x;
  v_37.z = _World2Object[2].x;
  v_37.w = _World2Object[3].x;
  highp vec4 v_38;
  v_38.x = _World2Object[0].y;
  v_38.y = _World2Object[1].y;
  v_38.z = _World2Object[2].y;
  v_38.w = _World2Object[3].y;
  highp vec4 v_39;
  v_39.x = _World2Object[0].z;
  v_39.y = _World2Object[1].z;
  v_39.z = _World2Object[2].z;
  v_39.w = _World2Object[3].z;
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize(((
    (v_37.xyz * _BillboardNormal.x)
   + 
    (v_38.xyz * _BillboardNormal.y)
  ) + (v_39.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_40;
  highp mat3 tmpvar_41;
  tmpvar_41[0] = _Object2World[0].xyz;
  tmpvar_41[1] = _Object2World[1].xyz;
  tmpvar_41[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize((tmpvar_41 * _BillboardTangent));
  worldTangent_3 = tmpvar_42;
  lowp vec3 tmpvar_43;
  tmpvar_43 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_44;
  tmpvar_44 = -(tmpvar_43);
  worldBinormal_2 = tmpvar_44;
  highp vec4 tmpvar_45;
  tmpvar_45.x = worldTangent_3.x;
  tmpvar_45.y = worldBinormal_2.x;
  tmpvar_45.z = worldNormal_4.x;
  tmpvar_45.w = tmpvar_36.x;
  highp vec4 tmpvar_46;
  tmpvar_46.x = worldTangent_3.y;
  tmpvar_46.y = worldBinormal_2.y;
  tmpvar_46.z = worldNormal_4.y;
  tmpvar_46.w = tmpvar_36.y;
  highp vec4 tmpvar_47;
  tmpvar_47.x = worldTangent_3.z;
  tmpvar_47.y = worldBinormal_2.z;
  tmpvar_47.z = worldNormal_4.z;
  tmpvar_47.w = tmpvar_36.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_45;
  xlv_TEXCOORD1 = tmpvar_46;
  xlv_TEXCOORD2 = tmpvar_47;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 worldN_2;
  lowp float tmpvar_3;
  mediump vec4 diffuseColor_4;
  mediump vec2 projUV_5;
  mediump vec2 tmpvar_6;
  tmpvar_6 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_5.x = tmpvar_6.x;
  mediump float tmpvar_7;
  tmpvar_7 = fract(tmpvar_6.y);
  highp float tmpvar_8;
  tmpvar_8 = ((tmpvar_7 * 0.0625) + unity_LODFade.y);
  projUV_5.y = tmpvar_8;
  lowp float x_9;
  x_9 = (texture (_DitherMaskLOD2D, projUV_5).w - 0.5);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_4 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = (diffuseColor_4.w * _Color.w);
  tmpvar_3 = tmpvar_11;
  lowp float x_12;
  x_12 = (tmpvar_3 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec3 tmpvar_13;
  tmpvar_13 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD0.xyz, tmpvar_13);
  worldN_2.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD1.xyz, tmpvar_13);
  worldN_2.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD2.xyz, tmpvar_13);
  worldN_2.z = tmpvar_16;
  res_1.xyz = ((worldN_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  _glesFragData[0] = res_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_16.xz;
  billboardPos_9.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_9;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_21.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_22.x + (tmpvar_22.y * tmpvar_22.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_18)));
    vPos_17 = (normalize(vPos_17) * fLength_19);
    billboardPos_9 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    ((_CameraXZAngle + tmpvar_15.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_28;
  } else {
    highp vec2 tmpvar_29;
    tmpvar_29 = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_29;
  };
  highp float tmpvar_30;
  tmpvar_30 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (tmpvar_31 * 0.5);
  highp vec2 tmpvar_34;
  tmpvar_34.x = tmpvar_33.x;
  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
  o_32.xy = (tmpvar_34 + tmpvar_33.w);
  o_32.zw = tmpvar_31.zw;
  highp vec3 tmpvar_35;
  tmpvar_35 = o_32.xyw;
  tmpvar_8 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_36;
  tmpvar_5 = _Color;
  highp vec3 tmpvar_37;
  tmpvar_37 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_38;
  v_38.x = _World2Object[0].x;
  v_38.y = _World2Object[1].x;
  v_38.z = _World2Object[2].x;
  v_38.w = _World2Object[3].x;
  highp vec4 v_39;
  v_39.x = _World2Object[0].y;
  v_39.y = _World2Object[1].y;
  v_39.z = _World2Object[2].y;
  v_39.w = _World2Object[3].y;
  highp vec4 v_40;
  v_40.x = _World2Object[0].z;
  v_40.y = _World2Object[1].z;
  v_40.z = _World2Object[2].z;
  v_40.w = _World2Object[3].z;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize(((
    (v_38.xyz * _BillboardNormal.x)
   + 
    (v_39.xyz * _BillboardNormal.y)
  ) + (v_40.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_41;
  highp mat3 tmpvar_42;
  tmpvar_42[0] = _Object2World[0].xyz;
  tmpvar_42[1] = _Object2World[1].xyz;
  tmpvar_42[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize((tmpvar_42 * _BillboardTangent));
  worldTangent_3 = tmpvar_43;
  lowp vec3 tmpvar_44;
  tmpvar_44 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_45;
  tmpvar_45 = -(tmpvar_44);
  worldBinormal_2 = tmpvar_45;
  highp vec4 tmpvar_46;
  tmpvar_46.x = worldTangent_3.x;
  tmpvar_46.y = worldBinormal_2.x;
  tmpvar_46.z = worldNormal_4.x;
  tmpvar_46.w = tmpvar_37.x;
  highp vec4 tmpvar_47;
  tmpvar_47.x = worldTangent_3.y;
  tmpvar_47.y = worldBinormal_2.y;
  tmpvar_47.z = worldNormal_4.y;
  tmpvar_47.w = tmpvar_37.y;
  highp vec4 tmpvar_48;
  tmpvar_48.x = worldTangent_3.z;
  tmpvar_48.y = worldBinormal_2.z;
  tmpvar_48.z = worldNormal_4.z;
  tmpvar_48.w = tmpvar_37.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_46;
  xlv_TEXCOORD1 = tmpvar_47;
  xlv_TEXCOORD2 = tmpvar_48;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 worldN_2;
  lowp float tmpvar_3;
  mediump vec4 diffuseColor_4;
  mediump vec2 projUV_5;
  mediump vec2 tmpvar_6;
  tmpvar_6 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_5.x = tmpvar_6.x;
  mediump float tmpvar_7;
  tmpvar_7 = fract(tmpvar_6.y);
  highp float tmpvar_8;
  tmpvar_8 = ((tmpvar_7 * 0.0625) + unity_LODFade.y);
  projUV_5.y = tmpvar_8;
  lowp float x_9;
  x_9 = (texture2D (_DitherMaskLOD2D, projUV_5).w - 0.5);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_4 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = (diffuseColor_4.w * _Color.w);
  tmpvar_3 = tmpvar_11;
  lowp float x_12;
  x_12 = (tmpvar_3 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_4.xyz = clamp ((tmpvar_13 * (
    ((max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD0.xyz, tmpvar_14);
  worldN_2.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD1.xyz, tmpvar_14);
  worldN_2.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD2.xyz, tmpvar_14);
  worldN_2.z = tmpvar_17;
  res_1.xyz = ((worldN_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_16.xz;
  billboardPos_9.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_9;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_21.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_22.x + (tmpvar_22.y * tmpvar_22.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_18)));
    vPos_17 = (normalize(vPos_17) * fLength_19);
    billboardPos_9 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    ((_CameraXZAngle + tmpvar_15.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_28;
  } else {
    highp vec2 tmpvar_29;
    tmpvar_29 = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_29;
  };
  highp float tmpvar_30;
  tmpvar_30 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (tmpvar_31 * 0.5);
  highp vec2 tmpvar_34;
  tmpvar_34.x = tmpvar_33.x;
  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
  o_32.xy = (tmpvar_34 + tmpvar_33.w);
  o_32.zw = tmpvar_31.zw;
  highp vec3 tmpvar_35;
  tmpvar_35 = o_32.xyw;
  tmpvar_8 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_36;
  tmpvar_5 = _Color;
  highp vec3 tmpvar_37;
  tmpvar_37 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_38;
  v_38.x = _World2Object[0].x;
  v_38.y = _World2Object[1].x;
  v_38.z = _World2Object[2].x;
  v_38.w = _World2Object[3].x;
  highp vec4 v_39;
  v_39.x = _World2Object[0].y;
  v_39.y = _World2Object[1].y;
  v_39.z = _World2Object[2].y;
  v_39.w = _World2Object[3].y;
  highp vec4 v_40;
  v_40.x = _World2Object[0].z;
  v_40.y = _World2Object[1].z;
  v_40.z = _World2Object[2].z;
  v_40.w = _World2Object[3].z;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize(((
    (v_38.xyz * _BillboardNormal.x)
   + 
    (v_39.xyz * _BillboardNormal.y)
  ) + (v_40.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_41;
  highp mat3 tmpvar_42;
  tmpvar_42[0] = _Object2World[0].xyz;
  tmpvar_42[1] = _Object2World[1].xyz;
  tmpvar_42[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize((tmpvar_42 * _BillboardTangent));
  worldTangent_3 = tmpvar_43;
  lowp vec3 tmpvar_44;
  tmpvar_44 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_45;
  tmpvar_45 = -(tmpvar_44);
  worldBinormal_2 = tmpvar_45;
  highp vec4 tmpvar_46;
  tmpvar_46.x = worldTangent_3.x;
  tmpvar_46.y = worldBinormal_2.x;
  tmpvar_46.z = worldNormal_4.x;
  tmpvar_46.w = tmpvar_37.x;
  highp vec4 tmpvar_47;
  tmpvar_47.x = worldTangent_3.y;
  tmpvar_47.y = worldBinormal_2.y;
  tmpvar_47.z = worldNormal_4.y;
  tmpvar_47.w = tmpvar_37.y;
  highp vec4 tmpvar_48;
  tmpvar_48.x = worldTangent_3.z;
  tmpvar_48.y = worldBinormal_2.z;
  tmpvar_48.z = worldNormal_4.z;
  tmpvar_48.w = tmpvar_37.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_46;
  xlv_TEXCOORD1 = tmpvar_47;
  xlv_TEXCOORD2 = tmpvar_48;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 worldN_2;
  lowp float tmpvar_3;
  mediump vec4 diffuseColor_4;
  mediump vec2 projUV_5;
  mediump vec2 tmpvar_6;
  tmpvar_6 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_5.x = tmpvar_6.x;
  mediump float tmpvar_7;
  tmpvar_7 = fract(tmpvar_6.y);
  highp float tmpvar_8;
  tmpvar_8 = ((tmpvar_7 * 0.0625) + unity_LODFade.y);
  projUV_5.y = tmpvar_8;
  lowp float x_9;
  x_9 = (texture (_DitherMaskLOD2D, projUV_5).w - 0.5);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_4 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = (diffuseColor_4.w * _Color.w);
  tmpvar_3 = tmpvar_11;
  lowp float x_12;
  x_12 = (tmpvar_3 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_4.xyz = clamp ((tmpvar_13 * (
    ((max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD0.xyz, tmpvar_14);
  worldN_2.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD1.xyz, tmpvar_14);
  worldN_2.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD2.xyz, tmpvar_14);
  worldN_2.z = tmpvar_17;
  res_1.xyz = ((worldN_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  _glesFragData[0] = res_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_40;
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * 0.5);
  highp vec2 tmpvar_44;
  tmpvar_44.x = tmpvar_43.x;
  tmpvar_44.y = (tmpvar_43.y * _ProjectionParams.x);
  o_42.xy = (tmpvar_44 + tmpvar_43.w);
  o_42.zw = tmpvar_41.zw;
  highp vec3 tmpvar_45;
  tmpvar_45 = o_42.xyw;
  tmpvar_7 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_46;
  tmpvar_4 = _Color;
  highp vec4 v_47;
  v_47.x = _World2Object[0].x;
  v_47.y = _World2Object[1].x;
  v_47.z = _World2Object[2].x;
  v_47.w = _World2Object[3].x;
  highp vec4 v_48;
  v_48.x = _World2Object[0].z;
  v_48.y = _World2Object[1].z;
  v_48.z = _World2Object[2].z;
  v_48.w = _World2Object[3].z;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(((v_47.xyz * tmpvar_16.z) + (v_48.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_49;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp float tmpvar_3;
  mediump vec4 diffuseColor_4;
  mediump vec2 projUV_5;
  mediump vec2 tmpvar_6;
  tmpvar_6 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_5.x = tmpvar_6.x;
  mediump float tmpvar_7;
  tmpvar_7 = fract(tmpvar_6.y);
  highp float tmpvar_8;
  tmpvar_8 = ((tmpvar_7 * 0.0625) + unity_LODFade.y);
  projUV_5.y = tmpvar_8;
  lowp float x_9;
  x_9 = (texture2D (_DitherMaskLOD2D, projUV_5).w - 0.5);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_4 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = (diffuseColor_4.w * _Color.w);
  tmpvar_3 = tmpvar_11;
  lowp float x_12;
  x_12 = (tmpvar_3 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_40;
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * 0.5);
  highp vec2 tmpvar_44;
  tmpvar_44.x = tmpvar_43.x;
  tmpvar_44.y = (tmpvar_43.y * _ProjectionParams.x);
  o_42.xy = (tmpvar_44 + tmpvar_43.w);
  o_42.zw = tmpvar_41.zw;
  highp vec3 tmpvar_45;
  tmpvar_45 = o_42.xyw;
  tmpvar_7 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_46;
  tmpvar_4 = _Color;
  highp vec4 v_47;
  v_47.x = _World2Object[0].x;
  v_47.y = _World2Object[1].x;
  v_47.z = _World2Object[2].x;
  v_47.w = _World2Object[3].x;
  highp vec4 v_48;
  v_48.x = _World2Object[0].z;
  v_48.y = _World2Object[1].z;
  v_48.z = _World2Object[2].z;
  v_48.w = _World2Object[3].z;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(((v_47.xyz * tmpvar_16.z) + (v_48.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_49;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp float tmpvar_3;
  mediump vec4 diffuseColor_4;
  mediump vec2 projUV_5;
  mediump vec2 tmpvar_6;
  tmpvar_6 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_5.x = tmpvar_6.x;
  mediump float tmpvar_7;
  tmpvar_7 = fract(tmpvar_6.y);
  highp float tmpvar_8;
  tmpvar_8 = ((tmpvar_7 * 0.0625) + unity_LODFade.y);
  projUV_5.y = tmpvar_8;
  lowp float x_9;
  x_9 = (texture (_DitherMaskLOD2D, projUV_5).w - 0.5);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_4 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = (diffuseColor_4.w * _Color.w);
  tmpvar_3 = tmpvar_11;
  lowp float x_12;
  x_12 = (tmpvar_3 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  _glesFragData[0] = res_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_40;
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_41;
  highp vec4 tmpvar_42;
  tmpvar_42 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_42 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = tmpvar_42.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  tmpvar_7 = tmpvar_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_47;
  tmpvar_4 = _Color;
  highp vec4 v_48;
  v_48.x = _World2Object[0].x;
  v_48.y = _World2Object[1].x;
  v_48.z = _World2Object[2].x;
  v_48.w = _World2Object[3].x;
  highp vec4 v_49;
  v_49.x = _World2Object[0].z;
  v_49.y = _World2Object[1].z;
  v_49.z = _World2Object[2].z;
  v_49.w = _World2Object[3].z;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(((v_48.xyz * tmpvar_16.z) + (v_49.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_50;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp float tmpvar_3;
  mediump vec4 diffuseColor_4;
  mediump vec2 projUV_5;
  mediump vec2 tmpvar_6;
  tmpvar_6 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_5.x = tmpvar_6.x;
  mediump float tmpvar_7;
  tmpvar_7 = fract(tmpvar_6.y);
  highp float tmpvar_8;
  tmpvar_8 = ((tmpvar_7 * 0.0625) + unity_LODFade.y);
  projUV_5.y = tmpvar_8;
  lowp float x_9;
  x_9 = (texture2D (_DitherMaskLOD2D, projUV_5).w - 0.5);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_4 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = (diffuseColor_4.w * _Color.w);
  tmpvar_3 = tmpvar_11;
  lowp float x_12;
  x_12 = (tmpvar_3 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_4.xyz = clamp ((tmpvar_13 * (
    ((max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_40;
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_41;
  highp vec4 tmpvar_42;
  tmpvar_42 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_42 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = tmpvar_42.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  tmpvar_7 = tmpvar_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_47;
  tmpvar_4 = _Color;
  highp vec4 v_48;
  v_48.x = _World2Object[0].x;
  v_48.y = _World2Object[1].x;
  v_48.z = _World2Object[2].x;
  v_48.w = _World2Object[3].x;
  highp vec4 v_49;
  v_49.x = _World2Object[0].z;
  v_49.y = _World2Object[1].z;
  v_49.z = _World2Object[2].z;
  v_49.w = _World2Object[3].z;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(((v_48.xyz * tmpvar_16.z) + (v_49.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_50;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp float tmpvar_3;
  mediump vec4 diffuseColor_4;
  mediump vec2 projUV_5;
  mediump vec2 tmpvar_6;
  tmpvar_6 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_5.x = tmpvar_6.x;
  mediump float tmpvar_7;
  tmpvar_7 = fract(tmpvar_6.y);
  highp float tmpvar_8;
  tmpvar_8 = ((tmpvar_7 * 0.0625) + unity_LODFade.y);
  projUV_5.y = tmpvar_8;
  lowp float x_9;
  x_9 = (texture (_DitherMaskLOD2D, projUV_5).w - 0.5);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_4 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = (diffuseColor_4.w * _Color.w);
  tmpvar_3 = tmpvar_11;
  lowp float x_12;
  x_12 = (tmpvar_3 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_4.xyz = clamp ((tmpvar_13 * (
    ((max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  _glesFragData[0] = res_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_18.z / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.570796 + (abs(tmpvar_19) * (-0.2146018 + (
        abs(tmpvar_19)
       * 
        (0.08656672 + (abs(tmpvar_19) * -0.03102955))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  highp vec3 tmpvar_26;
  tmpvar_26 = (vec3(tmpvar_19) + tmpvar_25);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_9.xz = tmpvar_28.xz;
  billboardPos_9.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_9;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_33.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_34.x + (tmpvar_34.y * tmpvar_34.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_30)));
    vPos_29 = (normalize(vPos_29) * fLength_31);
    billboardPos_9 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    ((tmpvar_26 + tmpvar_27.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_11.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_40;
  } else {
    highp vec2 tmpvar_41;
    tmpvar_41 = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_41;
  };
  highp vec4 tmpvar_42;
  tmpvar_42 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_42 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = tmpvar_42.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  tmpvar_8 = tmpvar_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_47;
  tmpvar_5 = _Color;
  highp vec3 tmpvar_48;
  tmpvar_48 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_49;
  v_49.x = _World2Object[0].x;
  v_49.y = _World2Object[1].x;
  v_49.z = _World2Object[2].x;
  v_49.w = _World2Object[3].x;
  highp vec4 v_50;
  v_50.x = _World2Object[0].z;
  v_50.y = _World2Object[1].z;
  v_50.z = _World2Object[2].z;
  v_50.w = _World2Object[3].z;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize(((v_49.xyz * tmpvar_17.z) + (v_50.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_51;
  highp mat3 tmpvar_52;
  tmpvar_52[0] = _Object2World[0].xyz;
  tmpvar_52[1] = _Object2World[1].xyz;
  tmpvar_52[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize((tmpvar_52 * tmpvar_17));
  worldTangent_3 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_55;
  tmpvar_55 = -(tmpvar_54);
  worldBinormal_2 = tmpvar_55;
  highp vec4 tmpvar_56;
  tmpvar_56.x = worldTangent_3.x;
  tmpvar_56.y = worldBinormal_2.x;
  tmpvar_56.z = worldNormal_4.x;
  tmpvar_56.w = tmpvar_48.x;
  highp vec4 tmpvar_57;
  tmpvar_57.x = worldTangent_3.y;
  tmpvar_57.y = worldBinormal_2.y;
  tmpvar_57.z = worldNormal_4.y;
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58.x = worldTangent_3.z;
  tmpvar_58.y = worldBinormal_2.z;
  tmpvar_58.z = worldNormal_4.z;
  tmpvar_58.w = tmpvar_48.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_56;
  xlv_TEXCOORD1 = tmpvar_57;
  xlv_TEXCOORD2 = tmpvar_58;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEX