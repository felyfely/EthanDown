otatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_15;
      highp float fAdherenceScale_22;
      highp vec3 tmpvar_23;
      tmpvar_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_24;
      tmpvar_24 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (tmpvar_24 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((tmpvar_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_24 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((tmpvar_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        (mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_25.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((tmpvar_23 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((tmpvar_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((
        ((tmpvar_33.x * tmpvar_33.y) * tmpvar_33.x)
       * tmpvar_33.y) * _ST_WindTurbulences.x));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_12 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp vec3 tmpvar_36;
      tmpvar_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_37;
      tmpvar_37 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_38;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (tmpvar_37 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((tmpvar_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      vPos_35 = (vPos_20 + ((tmpvar_36 * 
        (((mix (
          mix (tmpvar_43, fTarget_40, fAmount_39)
        , fTarget_40, fAmount_39) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_14;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_47;
    tmpvar_47 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    vPos_44.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * (
      ((_ST_WindGlobal.y * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_45)));
    vPos_44 = (normalize(vPos_44) * fLength_46);
    FinalPosition_14 = vPos_44;
  };
  tmpvar_11.xyz = FinalPosition_14;
  highp vec4 tmpvar_51;
  tmpvar_51 = (glstate_matrix_mvp * tmpvar_11);
  highp vec4 o_52;
  highp vec4 tmpvar_53;
  tmpvar_53 = (tmpvar_51 * 0.5);
  highp vec2 tmpvar_54;
  tmpvar_54.x = tmpvar_53.x;
  tmpvar_54.y = (tmpvar_53.y * _ProjectionParams.x);
  o_52.xy = (tmpvar_54 + tmpvar_53.w);
  o_52.zw = tmpvar_51.zw;
  highp vec3 tmpvar_55;
  tmpvar_55 = o_52.xyw;
  tmpvar_8 = tmpvar_55;
  highp vec2 tmpvar_56;
  tmpvar_56 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_56;
  tmpvar_4 = tmpvar_6;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * _glesNormal.x)
   + 
    (v_58.xyz * _glesNormal.y)
  ) + (v_59.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_60;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_61;
  tmpvar_61.w = 1.0;
  tmpvar_61.xyz = worldNormal_2;
  mediump vec4 normal_62;
  normal_62 = tmpvar_61;
  mediump vec3 x2_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (normal_62.xyzz * normal_62.yzzx);
  x2_63.x = dot (unity_SHBr, tmpvar_64);
  x2_63.y = dot (unity_SHBg, tmpvar_64);
  x2_63.z = dot (unity_SHBb, tmpvar_64);
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = (x2_63 + (unity_SHC.xyz * (
    (normal_62.x * normal_62.x)
   - 
    (normal_62.y * normal_62.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_7.x = tmpvar_8.x;
  mediump float tmpvar_9;
  tmpvar_9 = fract(tmpvar_8.y);
  highp float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * 0.0625) + unity_LODFade.y);
  projUV_7.y = tmpvar_10;
  lowp float x_11;
  x_11 = (texture (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = (diffuseColor_6.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_13;
  mediump vec3 normalWorld_14;
  normalWorld_14 = tmpvar_3;
  mediump vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = normalWorld_14;
  mediump vec3 x1_16;
  x1_16.x = dot (unity_SHAr, tmpvar_15);
  x1_16.y = dot (unity_SHAg, tmpvar_15);
  x1_16.z = dot (unity_SHAb, tmpvar_15);
  mediump vec4 outDiffuseOcclusion_17;
  mediump vec4 outNormal_18;
  mediump vec4 emission_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = tmpvar_5;
  outDiffuseOcclusion_17 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_18 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = vec3(0.0, 0.0, 0.0);
  emission_19 = tmpvar_22;
  emission_19.xyz = (emission_19.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_16)));
  outDiffuse_1.xyz = outDiffuseOcclusion_17.xyz;
  outEmission_2.w = emission_19.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_19.xyz));
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_18;
  _glesFragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_15;
      highp float fAdherenceScale_22;
      highp vec3 tmpvar_23;
      tmpvar_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_24;
      tmpvar_24 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (tmpvar_24 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((tmpvar_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_24 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((tmpvar_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        (mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_25.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((tmpvar_23 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((tmpvar_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((
        ((tmpvar_33.x * tmpvar_33.y) * tmpvar_33.x)
       * tmpvar_33.y) * _ST_WindTurbulences.x));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_12 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp vec3 tmpvar_36;
      tmpvar_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_37;
      tmpvar_37 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_38;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (tmpvar_37 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((tmpvar_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      vPos_35 = (vPos_20 + ((tmpvar_36 * 
        (((mix (
          mix (tmpvar_43, fTarget_40, fAmount_39)
        , fTarget_40, fAmount_39) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_14;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_47;
    tmpvar_47 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    vPos_44.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * (
      ((_ST_WindGlobal.y * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_45)));
    vPos_44 = (normalize(vPos_44) * fLength_46);
    FinalPosition_14 = vPos_44;
  };
  tmpvar_11.xyz = FinalPosition_14;
  highp vec4 tmpvar_51;
  tmpvar_51 = (glstate_matrix_mvp * tmpvar_11);
  highp vec4 o_52;
  highp vec4 tmpvar_53;
  tmpvar_53 = (tmpvar_51 * 0.5);
  highp vec2 tmpvar_54;
  tmpvar_54.x = tmpvar_53.x;
  tmpvar_54.y = (tmpvar_53.y * _ProjectionParams.x);
  o_52.xy = (tmpvar_54 + tmpvar_53.w);
  o_52.zw = tmpvar_51.zw;
  highp vec3 tmpvar_55;
  tmpvar_55 = o_52.xyw;
  tmpvar_8 = tmpvar_55;
  highp vec2 tmpvar_56;
  tmpvar_56 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_56;
  tmpvar_4 = tmpvar_6;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * _glesNormal.x)
   + 
    (v_58.xyz * _glesNormal.y)
  ) + (v_59.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_60;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_61;
  tmpvar_61.w = 1.0;
  tmpvar_61.xyz = worldNormal_2;
  mediump vec4 normal_62;
  normal_62 = tmpvar_61;
  mediump vec3 x2_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (normal_62.xyzz * normal_62.yzzx);
  x2_63.x = dot (unity_SHBr, tmpvar_64);
  x2_63.y = dot (unity_SHBg, tmpvar_64);
  x2_63.z = dot (unity_SHBb, tmpvar_64);
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = (x2_63 + (unity_SHC.xyz * (
    (normal_62.x * normal_62.x)
   - 
    (normal_62.y * normal_62.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  mediump vec4 diffuseColor_5;
  mediump vec2 projUV_6;
  mediump vec2 tmpvar_7;
  tmpvar_7 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_6.x = tmpvar_7.x;
  mediump float tmpvar_8;
  tmpvar_8 = fract(tmpvar_7.y);
  highp float tmpvar_9;
  tmpvar_9 = ((tmpvar_8 * 0.0625) + unity_LODFade.y);
  projUV_6.y = tmpvar_9;
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_6).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_5 = tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (diffuseColor_5.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_12;
  mediump vec3 normalWorld_13;
  normalWorld_13 = tmpvar_2;
  mediump vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = normalWorld_13;
  mediump vec3 x1_15;
  x1_15.x = dot (unity_SHAr, tmpvar_14);
  x1_15.y = dot (unity_SHAg, tmpvar_14);
  x1_15.z = dot (unity_SHAb, tmpvar_14);
  mediump vec4 outDiffuseOcclusion_16;
  mediump vec4 outNormal_17;
  mediump vec4 emission_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = tmpvar_4;
  outDiffuseOcclusion_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_17 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = vec3(0.0, 0.0, 0.0);
  emission_18 = tmpvar_21;
  emission_18.xyz = (emission_18.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_15)));
  outDiffuse_1.xyz = outDiffuseOcclusion_16.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_17;
  gl_FragData[3] = emission_18;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD6;
out mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_15;
      highp float fAdherenceScale_22;
      highp vec3 tmpvar_23;
      tmpvar_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_24;
      tmpvar_24 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (tmpvar_24 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((tmpvar_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_24 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((tmpvar_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        (mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_25.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((tmpvar_23 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((tmpvar_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((
        ((tmpvar_33.x * tmpvar_33.y) * tmpvar_33.x)
       * tmpvar_33.y) * _ST_WindTurbulences.x));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_12 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp vec3 tmpvar_36;
      tmpvar_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_37;
      tmpvar_37 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_38;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (tmpvar_37 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((tmpvar_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      vPos_35 = (vPos_20 + ((tmpvar_36 * 
        (((mix (
          mix (tmpvar_43, fTarget_40, fAmount_39)
        , fTarget_40, fAmount_39) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_14;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_47;
    tmpvar_47 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    vPos_44.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * (
      ((_ST_WindGlobal.y * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_45)));
    vPos_44 = (normalize(vPos_44) * fLength_46);
    FinalPosition_14 = vPos_44;
  };
  tmpvar_11.xyz = FinalPosition_14;
  highp vec4 tmpvar_51;
  tmpvar_51 = (glstate_matrix_mvp * tmpvar_11);
  highp vec4 o_52;
  highp vec4 tmpvar_53;
  tmpvar_53 = (tmpvar_51 * 0.5);
  highp vec2 tmpvar_54;
  tmpvar_54.x = tmpvar_53.x;
  tmpvar_54.y = (tmpvar_53.y * _ProjectionParams.x);
  o_52.xy = (tmpvar_54 + tmpvar_53.w);
  o_52.zw = tmpvar_51.zw;
  highp vec3 tmpvar_55;
  tmpvar_55 = o_52.xyw;
  tmpvar_8 = tmpvar_55;
  highp vec2 tmpvar_56;
  tmpvar_56 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_56;
  tmpvar_4 = tmpvar_6;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * _glesNormal.x)
   + 
    (v_58.xyz * _glesNormal.y)
  ) + (v_59.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_60;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_61;
  tmpvar_61.w = 1.0;
  tmpvar_61.xyz = worldNormal_2;
  mediump vec4 normal_62;
  normal_62 = tmpvar_61;
  mediump vec3 x2_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (normal_62.xyzz * normal_62.yzzx);
  x2_63.x = dot (unity_SHBr, tmpvar_64);
  x2_63.y = dot (unity_SHBg, tmpvar_64);
  x2_63.z = dot (unity_SHBb, tmpvar_64);
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = (x2_63 + (unity_SHC.xyz * (
    (normal_62.x * normal_62.x)
   - 
    (normal_62.y * normal_62.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  mediump vec4 diffuseColor_5;
  mediump vec2 projUV_6;
  mediump vec2 tmpvar_7;
  tmpvar_7 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_6.x = tmpvar_7.x;
  mediump float tmpvar_8;
  tmpvar_8 = fract(tmpvar_7.y);
  highp float tmpvar_9;
  tmpvar_9 = ((tmpvar_8 * 0.0625) + unity_LODFade.y);
  projUV_6.y = tmpvar_9;
  lowp float x_10;
  x_10 = (texture (_DitherMaskLOD2D, projUV_6).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_5 = tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (diffuseColor_5.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_12;
  mediump vec3 normalWorld_13;
  normalWorld_13 = tmpvar_2;
  mediump vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = normalWorld_13;
  mediump vec3 x1_15;
  x1_15.x = dot (unity_SHAr, tmpvar_14);
  x1_15.y = dot (unity_SHAg, tmpvar_14);
  x1_15.z = dot (unity_SHAb, tmpvar_14);
  mediump vec4 outDiffuseOcclusion_16;
  mediump vec4 outNormal_17;
  mediump vec4 emission_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = tmpvar_4;
  outDiffuseOcclusion_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_17 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = vec3(0.0, 0.0, 0.0);
  emission_18 = tmpvar_21;
  emission_18.xyz = (emission_18.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_15)));
  outDiffuse_1.xyz = outDiffuseOcclusion_16.xyz;
  outDiffuse_1.w = 1.0;
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_17;
  _glesFragData[3] = emission_18;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fAdherenceScale_24;
      highp vec3 tmpvar_25;
      tmpvar_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_26;
      tmpvar_26 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (tmpvar_26 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((tmpvar_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_26 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((tmpvar_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        (mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_27.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((tmpvar_25 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((tmpvar_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((
        ((tmpvar_35.x * tmpvar_35.y) * tmpvar_35.x)
       * tmpvar_35.y) * _ST_WindTurbulences.x));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp vec3 tmpvar_38;
      tmpvar_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_39;
      tmpvar_39 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_40;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (tmpvar_39 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((tmpvar_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      vPos_37 = (vPos_22 + ((tmpvar_38 * 
        (((mix (
          mix (tmpvar_45, fTarget_42, fAmount_41)
        , fTarget_42, fAmount_41) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_17;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_50.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    vPos_46.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * (
      ((_ST_WindGlobal.y * (tmpvar_51.x + (tmpvar_51.y * tmpvar_51.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_47)));
    vPos_46 = (normalize(vPos_46) * fLength_48);
    FinalPosition_17 = vPos_46;
  };
  tmpvar_14.xyz = FinalPosition_17;
  highp vec4 tmpvar_53;
  tmpvar_53 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (tmpvar_53 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = tmpvar_53.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  tmpvar_8 = tmpvar_57;
  highp vec2 tmpvar_58;
  tmpvar_58 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_58;
  tmpvar_4 = tmpvar_6;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * _glesNormal.x)
   + 
    (v_60.xyz * _glesNormal.y)
  ) + (v_61.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_62;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_2;
  mediump vec4 normal_64;
  normal_64 = tmpvar_63;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = (x2_65 + (unity_SHC.xyz * (
    (normal_64.x * normal_64.x)
   - 
    (normal_64.y * normal_64.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_7.x = tmpvar_8.x;
  mediump float tmpvar_9;
  tmpvar_9 = fract(tmpvar_8.y);
  highp float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * 0.0625) + unity_LODFade.y);
  projUV_7.y = tmpvar_10;
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_6.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_6.xyz = clamp ((tmpvar_13 * (
    ((max (diffuseColor_6.x, max (diffuseColor_6.y, diffuseColor_6.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_14;
  tmpvar_14 = (diffuseColor_6.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_14;
  mediump vec3 normalWorld_15;
  normalWorld_15 = tmpvar_3;
  mediump vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = normalWorld_15;
  mediump vec3 x1_17;
  x1_17.x = dot (unity_SHAr, tmpvar_16);
  x1_17.y = dot (unity_SHAg, tmpvar_16);
  x1_17.z = dot (unity_SHAb, tmpvar_16);
  mediump vec4 outDiffuseOcclusion_18;
  mediump vec4 outNormal_19;
  mediump vec4 emission_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_5;
  outDiffuseOcclusion_18 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = vec3(0.0, 0.0, 0.0);
  emission_20 = tmpvar_23;
  emission_20.xyz = (emission_20.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_17)));
  outDiffuse_1.xyz = outDiffuseOcclusion_18.xyz;
  outEmission_2.w = emission_20.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_20.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_19;
  gl_FragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD6;
out mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fAdherenceScale_24;
      highp vec3 tmpvar_25;
      tmpvar_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_26;
      tmpvar_26 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (tmpvar_26 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((tmpvar_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_26 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((tmpvar_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        (mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_27.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((tmpvar_25 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((tmpvar_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((
        ((tmpvar_35.x * tmpvar_35.y) * tmpvar_35.x)
       * tmpvar_35.y) * _ST_WindTurbulences.x));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp vec3 tmpvar_38;
      tmpvar_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_39;
      tmpvar_39 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_40;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (tmpvar_39 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((tmpvar_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      vPos_37 = (vPos_22 + ((tmpvar_38 * 
        (((mix (
          mix (tmpvar_45, fTarget_42, fAmount_41)
        , fTarget_42, fAmount_41) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_17;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_50.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    vPos_46.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * (
      ((_ST_WindGlobal.y * (tmpvar_51.x + (tmpvar_51.y * tmpvar_51.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_47)));
    vPos_46 = (normalize(vPos_46) * fLength_48);
    FinalPosition_17 = vPos_46;
  };
  tmpvar_14.xyz = FinalPosition_17;
  highp vec4 tmpvar_53;
  tmpvar_53 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (tmpvar_53 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = tmpvar_53.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  tmpvar_8 = tmpvar_57;
  highp vec2 tmpvar_58;
  tmpvar_58 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_58;
  tmpvar_4 = tmpvar_6;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * _glesNormal.x)
   + 
    (v_60.xyz * _glesNormal.y)
  ) + (v_61.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_62;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_2;
  mediump vec4 normal_64;
  normal_64 = tmpvar_63;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = (x2_65 + (unity_SHC.xyz * (
    (normal_64.x * normal_64.x)
   - 
    (normal_64.y * normal_64.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_7.x = tmpvar_8.x;
  mediump float tmpvar_9;
  tmpvar_9 = fract(tmpvar_8.y);
  highp float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * 0.0625) + unity_LODFade.y);
  projUV_7.y = tmpvar_10;
  lowp float x_11;
  x_11 = (texture (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_6.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_6.xyz = clamp ((tmpvar_13 * (
    ((max (diffuseColor_6.x, max (diffuseColor_6.y, diffuseColor_6.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_14;
  tmpvar_14 = (diffuseColor_6.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_14;
  mediump vec3 normalWorld_15;
  normalWorld_15 = tmpvar_3;
  mediump vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = normalWorld_15;
  mediump vec3 x1_17;
  x1_17.x = dot (unity_SHAr, tmpvar_16);
  x1_17.y = dot (unity_SHAg, tmpvar_16);
  x1_17.z = dot (unity_SHAb, tmpvar_16);
  mediump vec4 outDiffuseOcclusion_18;
  mediump vec4 outNormal_19;
  mediump vec4 emission_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_5;
  outDiffuseOcclusion_18 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = vec3(0.0, 0.0, 0.0);
  emission_20 = tmpvar_23;
  emission_20.xyz = (emission_20.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_17)));
  outDiffuse_1.xyz = outDiffuseOcclusion_18.xyz;
  outEmission_2.w = emission_20.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_20.xyz));
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_19;
  _glesFragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fAdherenceScale_24;
      highp vec3 tmpvar_25;
      tmpvar_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_26;
      tmpvar_26 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (tmpvar_26 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((tmpvar_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_26 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((tmpvar_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        (mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_27.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((tmpvar_25 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((tmpvar_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((
        ((tmpvar_35.x * tmpvar_35.y) * tmpvar_35.x)
       * tmpvar_35.y) * _ST_WindTurbulences.x));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp vec3 tmpvar_38;
      tmpvar_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_39;
      tmpvar_39 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_40;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (tmpvar_39 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((tmpvar_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      vPos_37 = (vPos_22 + ((tmpvar_38 * 
        (((mix (
          mix (tmpvar_45, fTarget_42, fAmount_41)
        , fTarget_42, fAmount_41) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_17;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_50.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    vPos_46.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * (
      ((_ST_WindGlobal.y * (tmpvar_51.x + (tmpvar_51.y * tmpvar_51.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_47)));
    vPos_46 = (normalize(vPos_46) * fLength_48);
    FinalPosition_17 = vPos_46;
  };
  tmpvar_14.xyz = FinalPosition_17;
  highp vec4 tmpvar_53;
  tmpvar_53 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (tmpvar_53 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = tmpvar_53.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  tmpvar_8 = tmpvar_57;
  highp vec2 tmpvar_58;
  tmpvar_58 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_58;
  tmpvar_4 = tmpvar_6;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * _glesNormal.x)
   + 
    (v_60.xyz * _glesNormal.y)
  ) + (v_61.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_62;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_2;
  mediump vec4 normal_64;
  normal_64 = tmpvar_63;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = (x2_65 + (unity_SHC.xyz * (
    (normal_64.x * normal_64.x)
   - 
    (normal_64.y * normal_64.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  mediump vec4 diffuseColor_5;
  mediump vec2 projUV_6;
  mediump vec2 tmpvar_7;
  tmpvar_7 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_6.x = tmpvar_7.x;
  mediump float tmpvar_8;
  tmpvar_8 = fract(tmpvar_7.y);
  highp float tmpvar_9;
  tmpvar_9 = ((tmpvar_8 * 0.0625) + unity_LODFade.y);
  projUV_6.y = tmpvar_9;
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_6).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_5 = tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = mix (diffuseColor_5.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_5.xyz = clamp ((tmpvar_12 * (
    ((max (diffuseColor_5.x, max (diffuseColor_5.y, diffuseColor_5.z)) / max (tmpvar_12.x, max (tmpvar_12.y, tmpvar_12.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_13;
  tmpvar_13 = (diffuseColor_5.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_13;
  mediump vec3 normalWorld_14;
  normalWorld_14 = tmpvar_2;
  mediump vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = normalWorld_14;
  mediump vec3 x1_16;
  x1_16.x = dot (unity_SHAr, tmpvar_15);
  x1_16.y = dot (unity_SHAg, tmpvar_15);
  x1_16.z = dot (unity_SHAb, tmpvar_15);
  mediump vec4 outDiffuseOcclusion_17;
  mediump vec4 outNormal_18;
  mediump vec4 emission_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = tmpvar_4;
  outDiffuseOcclusion_17 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_18 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = vec3(0.0, 0.0, 0.0);
  emission_19 = tmpvar_22;
  emission_19.xyz = (emission_19.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_16)));
  outDiffuse_1.xyz = outDiffuseOcclusion_17.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_18;
  gl_FragData[3] = emission_19;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD6;
out mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fAdherenceScale_24;
      highp vec3 tmpvar_25;
      tmpvar_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_26;
      tmpvar_26 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (tmpvar_26 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((tmpvar_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_26 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((tmpvar_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        (mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_27.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((tmpvar_25 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((tmpvar_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((
        ((tmpvar_35.x * tmpvar_35.y) * tmpvar_35.x)
       * tmpvar_35.y) * _ST_WindTurbulences.x));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp vec3 tmpvar_38;
      tmpvar_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_39;
      tmpvar_39 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_40;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (tmpvar_39 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((tmpvar_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      vPos_37 = (vPos_22 + ((tmpvar_38 * 
        (((mix (
          mix (tmpvar_45, fTarget_42, fAmount_41)
        , fTarget_42, fAmount_41) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_17;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_50.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    vPos_46.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * (
      ((_ST_WindGlobal.y * (tmpvar_51.x + (tmpvar_51.y * tmpvar_51.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_47)));
    vPos_46 = (normalize(vPos_46) * fLength_48);
    FinalPosition_17 = vPos_46;
  };
  tmpvar_14.xyz = FinalPosition_17;
  highp vec4 tmpvar_53;
  tmpvar_53 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (tmpvar_53 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = tmpvar_53.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  tmpvar_8 = tmpvar_57;
  highp vec2 tmpvar_58;
  tmpvar_58 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_58;
  tmpvar_4 = tmpvar_6;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * _glesNormal.x)
   + 
    (v_60.xyz * _glesNormal.y)
  ) + (v_61.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_62;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_2;
  mediump vec4 normal_64;
  normal_64 = tmpvar_63;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = (x2_65 + (unity_SHC.xyz * (
    (normal_64.x * normal_64.x)
   - 
    (normal_64.y * normal_64.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  mediump vec4 diffuseColor_5;
  mediump vec2 projUV_6;
  mediump vec2 tmpvar_7;
  tmpvar_7 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_6.x = tmpvar_7.x;
  mediump float tmpvar_8;
  tmpvar_8 = fract(tmpvar_7.y);
  highp float tmpvar_9;
  tmpvar_9 = ((tmpvar_8 * 0.0625) + unity_LODFade.y);
  projUV_6.y = tmpvar_9;
  lowp float x_10;
  x_10 = (texture (_DitherMaskLOD2D, projUV_6).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_5 = tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = mix (diffuseColor_5.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_5.xyz = clamp ((tmpvar_12 * (
    ((max (diffuseColor_5.x, max (diffuseColor_5.y, diffuseColor_5.z)) / max (tmpvar_12.x, max (tmpvar_12.y, tmpvar_12.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_13;
  tmpvar_13 = (diffuseColor_5.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_13;
  mediump vec3 normalWorld_14;
  normalWorld_14 = tmpvar_2;
  mediump vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = normalWorld_14;
  mediump vec3 x1_16;
  x1_16.x = dot (unity_SHAr, tmpvar_15);
  x1_16.y = dot (unity_SHAg, tmpvar_15);
  x1_16.z = dot (unity_SHAb, tmpvar_15);
  mediump vec4 outDiffuseOcclusion_17;
  mediump vec4 outNormal_18;
  mediump vec4 emission_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = tmpvar_4;
  outDiffuseOcclusion_17 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_18 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = vec3(0.0, 0.0, 0.0);
  emission_19 = tmpvar_22;
  emission_19.xyz = (emission_19.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_16)));
  outDiffuse_1.xyz = outDiffuseOcclusion_17.xyz;
  outDiffuse_1.w = 1.0;
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_18;
  _glesFragData[3] = emission_19;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_19;
      highp float fAdherenceScale_25;
      highp vec3 tmpvar_26;
      tmpvar_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_27;
      tmpvar_27 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (tmpvar_27 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_27 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((tmpvar_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        (mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_28.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (_glesVertex.xyz + ((tmpvar_26 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((tmpvar_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((
        ((tmpvar_36.x * tmpvar_36.y) * tmpvar_36.x)
       * tmpvar_36.y) * _ST_WindTurbulences.x));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp vec3 tmpvar_39;
      tmpvar_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_40;
      tmpvar_40 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_41;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (tmpvar_40 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((tmpvar_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      vPos_38 = (vPos_23 + ((tmpvar_39 * 
        (((mix (
          mix (tmpvar_46, fTarget_43, fAmount_42)
        , fTarget_43, fAmount_42) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_18;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_51.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    vPos_47.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_52.x + (tmpvar_52.y * tmpvar_52.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_48)));
    vPos_47 = (normalize(vPos_47) * fLength_49);
    FinalPosition_18 = vPos_47;
  };
  tmpvar_15.xyz = FinalPosition_18;
  highp vec4 tmpvar_54;
  tmpvar_54 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (tmpvar_54 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = tmpvar_54.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  tmpvar_9 = tmpvar_58;
  highp vec2 tmpvar_59;
  tmpvar_59 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_59;
  tmpvar_5 = tmpvar_7;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_64;
  highp mat3 tmpvar_65;
  tmpvar_65[0] = _Object2World[0].xyz;
  tmpvar_65[1] = _Object2World[1].xyz;
  tmpvar_65[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize((tmpvar_65 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_67 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69.x = worldTangent_3.x;
  tmpvar_69.y = worldBinormal_2.x;
  tmpvar_69.z = worldNormal_4.x;
  tmpvar_69.w = tmpvar_60.x;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_3.y;
  tmpvar_70.y = worldBinormal_2.y;
  tmpvar_70.z = worldNormal_4.y;
  tmpvar_70.w = tmpvar_60.y;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_3.z;
  tmpvar_71.y = worldBinormal_2.z;
  tmpvar_71.z = worldNormal_4.z;
  tmpvar_71.w = tmpvar_60.z;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_72;
  tmpvar_72.w = 1.0;
  tmpvar_72.xyz = worldNormal_4;
  mediump vec4 normal_73;
  normal_73 = tmpvar_72;
  mediump vec3 x2_74;
  mediump vec4 tmpvar_75;
  tmpvar_75 = (normal_73.xyzz * normal_73.yzzx);
  x2_74.x = dot (unity_SHBr, tmpvar_75);
  x2_74.y = dot (unity_SHBg, tmpvar_75);
  x2_74.z = dot (unity_SHBb, tmpvar_75);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_69;
  xlv_TEXCOORD1 = tmpvar_70;
  xlv_TEXCOORD2 = tmpvar_71;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = (x2_74 + (unity_SHC.xyz * (
    (normal_73.x * normal_73.x)
   - 
    (normal_73.y * normal_73.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 worldN_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_7.x = tmpvar_8.x;
  mediump float tmpvar_9;
  tmpvar_9 = fract(tmpvar_8.y);
  highp float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * 0.0625) + unity_LODFade.y);
  projUV_7.y = tmpvar_10;
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_6 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_6.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_6.xyz = clamp ((tmpvar_13 * (
    ((max (diffuseColor_6.x, max (diffuseColor_6.y, diffuseColor_6.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_14;
  tmpvar_14 = (diffuseColor_6.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD0.xyz, tmpvar_15);
  worldN_3.x = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD1.xyz, tmpvar_15);
  worldN_3.y = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD2.xyz, tmpvar_15);
  worldN_3.z = tmpvar_18;
  mediump vec3 normalWorld_19;
  normalWorld_19 = worldN_3;
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_19;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, tmpvar_20);
  x1_21.y = dot (unity_SHAg, tmpvar_20);
  x1_21.z = dot (unity_SHAb, tmpvar_20);
  mediump vec4 outDiffuseOcclusion_22;
  mediump vec4 outNormal_23;
  mediump vec4 emission_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = tmpvar_5;
  outDiffuseOcclusion_22 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = ((worldN_3 * 0.5) + 0.5);
  outNormal_23 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = vec3(0.0, 0.0, 0.0);
  emission_24 = tmpvar_27;
  emission_24.xyz = (emission_24.xyz + (tmpvar_5 * (xlv_TEXCOORD8 + x1_21)));
  outDiffuse_1.xyz = outDiffuseOcclusion_22.xyz;
  outEmission_2.w = emission_24.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_24.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_23;
  gl_FragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD7;
out mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_19;
      highp float fAdherenceScale_25;
      highp vec3 tmpvar_26;
      tmpvar_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_27;
      tmpvar_27 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (tmpvar_27 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_27 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((tmpvar_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        (mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_28.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (_glesVertex.xyz + ((tmpvar_26 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((tmpvar_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((
        ((tmpvar_36.x * tmpvar_36.y) * tmpvar_36.x)
       * tmpvar_36.y) * _ST_WindTurbulences.x));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp vec3 tmpvar_39;
      tmpvar_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_40;
      tmpvar_40 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_41;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (tmpvar_40 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((tmpvar_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      vPos_38 = (vPos_23 + ((tmpvar_39 * 
        (((mix (
          mix (tmpvar_46, fTarget_43, fAmount_42)
        , fTarget_43, fAmount_42) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_18;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_51.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    vPos_47.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_52.x + (tmpvar_52.y * tmpvar_52.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_48)));
    vPos_47 = (normalize(vPos_47) * fLength_49);
    FinalPosition_18 = vPos_47;
  };
  tmpvar_15.xyz = FinalPosition_18;
  highp vec4 tmpvar_54;
  tmpvar_54 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (tmpvar_54 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = tmpvar_54.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  tmpvar_9 = tmpvar_58;
  highp vec2 tmpvar_59;
  tmpvar_59 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_59;
  tmpvar_5 = tmpvar_7;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_64;
  highp mat3 tmpvar_65;
  tmpvar_65[0] = _Object2World[0].xyz;
  tmpvar_65[1] = _Object2World[1].xyz;
  tmpvar_65[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize((tmpvar_65 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_67 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69.x = worldTangent_3.x;
  tmpvar_69.y = worldBinormal_2.x;
  tmpvar_69.z = worldNormal_4.x;
  tmpvar_69.w = tmpvar_60.x;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_3.y;
  tmpvar_70.y = worldBinormal_2.y;
  tmpvar_70.z = worldNormal_4.y;
  tmpvar_70.w = tmpvar_60.y;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_3.z;
  tmpvar_71.y = worldBinormal_2.z;
  tmpvar_71.z = worldNormal_4.z;
  tmpvar_71.w = tmpvar_60.z;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_72;
  tmpvar_72.w = 1.0;
  tmpvar_72.xyz = worldNormal_4;
  mediump vec4 normal_73;
  normal_73 = tmpvar_72;
  mediump vec3 x2_74;
  mediump vec4 tmpvar_75;
  tmpvar_75 = (normal_73.xyzz * normal_73.yzzx);
  x2_74.x = dot (unity_SHBr, tmpvar_75);
  x2_74.y = dot (unity_SHBg, tmpvar_75);
  x2_74.z = dot (unity_SHBb, tmpvar_75);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_69;
  xlv_TEXCOORD1 = tmpvar_70;
  xlv_TEXCOORD2 = tmpvar_71;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = (x2_74 + (unity_SHC.xyz * (
    (normal_73.x * normal_73.x)
   - 
    (normal_73.y * normal_73.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 worldN_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_7.x = tmpvar_8.x;
  mediump float tmpvar_9;
  tmpvar_9 = fract(tmpvar_8.y);
  highp float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * 0.0625) + unity_LODFade.y);
  projUV_7.y = tmpvar_10;
  lowp float x_11;
  x_11 = (texture (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_6 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_6.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_6.xyz = clamp ((tmpvar_13 * (
    ((max (diffuseColor_6.x, max (diffuseColor_6.y, diffuseColor_6.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_14;
  tmpvar_14 = (diffuseColor_6.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD0.xyz, tmpvar_15);
  worldN_3.x = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD1.xyz, tmpvar_15);
  worldN_3.y = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD2.xyz, tmpvar_15);
  worldN_3.z = tmpvar_18;
  mediump vec3 normalWorld_19;
  normalWorld_19 = worldN_3;
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_19;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, tmpvar_20);
  x1_21.y = dot (unity_SHAg, tmpvar_20);
  x1_21.z = dot (unity_SHAb, tmpvar_20);
  mediump vec4 outDiffuseOcclusion_22;
  mediump vec4 outNormal_23;
  mediump vec4 emission_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = tmpvar_5;
  outDiffuseOcclusion_22 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = ((worldN_3 * 0.5) + 0.5);
  outNormal_23 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = vec3(0.0, 0.0, 0.0);
  emission_24 = tmpvar_27;
  emission_24.xyz = (emission_24.xyz + (tmpvar_5 * (xlv_TEXCOORD8 + x1_21)));
  outDiffuse_1.xyz = outDiffuseOcclusion_22.xyz;
  outEmission_2.w = emission_24.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_24.xyz));
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_23;
  _glesFragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_19;
      highp float fAdherenceScale_25;
      highp vec3 tmpvar_26;
      tmpvar_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_27;
      tmpvar_27 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (tmpvar_27 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_27 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((tmpvar_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        (mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_28.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (_glesVertex.xyz + ((tmpvar_26 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((tmpvar_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((
        ((tmpvar_36.x * tmpvar_36.y) * tmpvar_36.x)
       * tmpvar_36.y) * _ST_WindTurbulences.x));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp vec3 tmpvar_39;
      tmpvar_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_40;
      tmpvar_40 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_41;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (tmpvar_40 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((tmpvar_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      vPos_38 = (vPos_23 + ((tmpvar_39 * 
        (((mix (
          mix (tmpvar_46, fTarget_43, fAmount_42)
        , fTarget_43, fAmount_42) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_18;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_51.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    vPos_47.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_52.x + (tmpvar_52.y * tmpvar_52.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_48)));
    vPos_47 = (normalize(vPos_47) * fLength_49);
    FinalPosition_18 = vPos_47;
  };
  tmpvar_15.xyz = FinalPosition_18;
  highp vec4 tmpvar_54;
  tmpvar_54 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (tmpvar_54 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = tmpvar_54.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  tmpvar_9 = tmpvar_58;
  highp vec2 tmpvar_59;
  tmpvar_59 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_59;
  tmpvar_5 = tmpvar_7;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_64;
  highp mat3 tmpvar_65;
  tmpvar_65[0] = _Object2World[0].xyz;
  tmpvar_65[1] = _Object2World[1].xyz;
  tmpvar_65[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize((tmpvar_65 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_67 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69.x = worldTangent_3.x;
  tmpvar_69.y = worldBinormal_2.x;
  tmpvar_69.z = worldNormal_4.x;
  tmpvar_69.w = tmpvar_60.x;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_3.y;
  tmpvar_70.y = worldBinormal_2.y;
  tmpvar_70.z = worldNormal_4.y;
  tmpvar_70.w = tmpvar_60.y;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_3.z;
  tmpvar_71.y = worldBinormal_2.z;
  tmpvar_71.z = worldNormal_4.z;
  tmpvar_71.w = tmpvar_60.z;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_72;
  tmpvar_72.w = 1.0;
  tmpvar_72.xyz = worldNormal_4;
  mediump vec4 normal_73;
  normal_73 = tmpvar_72;
  mediump vec3 x2_74;
  mediump vec4 tmpvar_75;
  tmpvar_75 = (normal_73.xyzz * normal_73.yzzx);
  x2_74.x = dot (unity_SHBr, tmpvar_75);
  x2_74.y = dot (unity_SHBg, tmpvar_75);
  x2_74.z = dot (unity_SHBb, tmpvar_75);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_69;
  xlv_TEXCOORD1 = tmpvar_70;
  xlv_TEXCOORD2 = tmpvar_71;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = (x2_74 + (unity_SHC.xyz * (
    (normal_73.x * normal_73.x)
   - 
    (normal_73.y * normal_73.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 worldN_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_4;
  mediump vec4 diffuseColor_5;
  mediump vec2 projUV_6;
  mediump vec2 tmpvar_7;
  tmpvar_7 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_6.x = tmpvar_7.x;
  mediump float tmpvar_8;
  tmpvar_8 = fract(tmpvar_7.y);
  highp float tmpvar_9;
  tmpvar_9 = ((tmpvar_8 * 0.0625) + unity_LODFade.y);
  projUV_6.y = tmpvar_9;
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_6).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_5 = tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = mix (diffuseColor_5.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_5.xyz = clamp ((tmpvar_12 * (
    ((max (diffuseColor_5.x, max (diffuseColor_5.y, diffuseColor_5.z)) / max (tmpvar_12.x, max (tmpvar_12.y, tmpvar_12.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_13;
  tmpvar_13 = (diffuseColor_5.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_13;
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD0.xyz, tmpvar_14);
  worldN_2.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD1.xyz, tmpvar_14);
  worldN_2.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD2.xyz, tmpvar_14);
  worldN_2.z = tmpvar_17;
  mediump vec3 normalWorld_18;
  normalWorld_18 = worldN_2;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_18;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_19);
  x1_20.y = dot (unity_SHAg, tmpvar_19);
  x1_20.z = dot (unity_SHAb, tmpvar_19);
  mediump vec4 outDiffuseOcclusion_21;
  mediump vec4 outNormal_22;
  mediump vec4 emission_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = tmpvar_4;
  outDiffuseOcclusion_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = ((worldN_2 * 0.5) + 0.5);
  outNormal_22 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = vec3(0.0, 0.0, 0.0);
  emission_23 = tmpvar_26;
  emission_23.xyz = (emission_23.xyz + (tmpvar_4 * (xlv_TEXCOORD8 + x1_20)));
  outDiffuse_1.xyz = outDiffuseOcclusion_21.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_22;
  gl_FragData[3] = emission_23;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD7;
out mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_19;
      highp float fAdherenceScale_25;
      highp vec3 tmpvar_26;
      tmpvar_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_27;
      tmpvar_27 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (tmpvar_27 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_27 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((tmpvar_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        (mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_28.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (_glesVertex.xyz + ((tmpvar_26 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((tmpvar_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((
        ((tmpvar_36.x * tmpvar_36.y) * tmpvar_36.x)
       * tmpvar_36.y) * _ST_WindTurbulences.x));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp vec3 tmpvar_39;
      tmpvar_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_40;
      tmpvar_40 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_41;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (tmpvar_40 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((tmpvar_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      vPos_38 = (vPos_23 + ((tmpvar_39 * 
        (((mix (
          mix (tmpvar_46, fTarget_43, fAmount_42)
        , fTarget_43, fAmount_42) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_18;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_51.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    vPos_47.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_52.x + (tmpvar_52.y * tmpvar_52.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_48)));
    vPos_47 = (normalize(vPos_47) * fLength_49);
    FinalPosition_18 = vPos_47;
  };
  tmpvar_15.xyz = FinalPosition_18;
  highp vec4 tmpvar_54;
  tmpvar_54 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (tmpvar_54 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = tmpvar_54.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  tmpvar_9 = tmpvar_58;
  highp vec2 tmpvar_59;
  tmpvar_59 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_59;
  tmpvar_5 = tmpvar_7;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_64;
  highp mat3 tmpvar_65;
  tmpvar_65[0] = _Object2World[0].xyz;
  tmpvar_65[1] = _Object2World[1].xyz;
  tmpvar_65[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize((tmpvar_65 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_67 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69.x = worldTangent_3.x;
  tmpvar_69.y = worldBinormal_2.x;
  tmpvar_69.z = worldNormal_4.x;
  tmpvar_69.w = tmpvar_60.x;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_3.y;
  tmpvar_70.y = worldBinormal_2.y;
  tmpvar_70.z = worldNormal_4.y;
  tmpvar_70.w = tmpvar_60.y;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_3.z;
  tmpvar_71.y = worldBinormal_2.z;
  tmpvar_71.z = worldNormal_4.z;
  tmpvar_71.w = tmpvar_60.z;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_72;
  tmpvar_72.w = 1.0;
  tmpvar_72.xyz = worldNormal_4;
  mediump vec4 normal_73;
  normal_73 = tmpvar_72;
  mediump vec3 x2_74;
  mediump vec4 tmpvar_75;
  tmpvar_75 = (normal_73.xyzz * normal_73.yzzx);
  x2_74.x = dot (unity_SHBr, tmpvar_75);
  x2_74.y = dot (unity_SHBg, tmpvar_75);
  x2_74.z = dot (unity_SHBb, tmpvar_75);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_69;
  xlv_TEXCOORD1 = tmpvar_70;
  xlv_TEXCOORD2 = tmpvar_71;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = (x2_74 + (unity_SHC.xyz * (
    (normal_73.x * normal_73.x)
   - 
    (normal_73.y * normal_73.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 worldN_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_4;
  mediump vec4 diffuseColor_5;
  mediump vec2 projUV_6;
  mediump vec2 tmpvar_7;
  tmpvar_7 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_6.x = tmpvar_7.x;
  mediump float tmpvar_8;
  tmpvar_8 = fract(tmpvar_7.y);
  highp float tmpvar_9;
  tmpvar_9 = ((tmpvar_8 * 0.0625) + unity_LODFade.y);
  projUV_6.y = tmpvar_9;
  lowp float x_10;
  x_10 = (texture (_DitherMaskLOD2D, projUV_6).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_5 = tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = mix (diffuseColor_5.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_5.xyz = clamp ((tmpvar_12 * (
    ((max (diffuseColor_5.x, max (diffuseColor_5.y, diffuseColor_5.z)) / max (tmpvar_12.x, max (tmpvar_12.y, tmpvar_12.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_13;
  tmpvar_13 = (diffuseColor_5.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_13;
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD0.xyz, tmpvar_14);
  worldN_2.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD1.xyz, tmpvar_14);
  worldN_2.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD2.xyz, tmpvar_14);
  worldN_2.z = tmpvar_17;
  mediump vec3 normalWorld_18;
  normalWorld_18 = worldN_2;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_18;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_19);
  x1_20.y = dot (unity_SHAg, tmpvar_19);
  x1_20.z = dot (unity_SHAb, tmpvar_19);
  mediump vec4 outDiffuseOcclusion_21;
  mediump vec4 outNormal_22;
  mediump vec4 emission_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = tmpvar_4;
  outDiffuseOcclusion_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = ((worldN_2 * 0.5) + 0.5);
  outNormal_22 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = vec3(0.0, 0.0, 0.0);
  emission_23 = tmpvar_26;
  emission_23.xyz = (emission_23.xyz + (tmpvar_4 * (xlv_TEXCOORD8 + x1_20)));
  outDiffuse_1.xyz = outDiffuseOcclusion_21.xyz;
  outDiffuse_1.w = 1.0;
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_22;
  _glesFragData[3] = emission_23;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_DETAIL" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_10;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = _glesMultiTexCoord2.xy;
  tmpvar_8.xy = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_17;
      highp float fAdherenceScale_24;
      highp vec3 tmpvar_25;
      tmpvar_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_26;
      tmpvar_26 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (tmpvar_26 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((tmpvar_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_26 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((tmpvar_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        (mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_27.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((tmpvar_25 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((tmpvar_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((
        ((tmpvar_35.x * tmpvar_35.y) * tmpvar_35.x)
       * tmpvar_35.y) * _ST_WindTurbulences.x));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_14 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp vec3 tmpvar_38;
      tmpvar_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_39;
      tmpvar_39 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_40;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (tmpvar_39 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((tmpvar_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      vPos_37 = (vPos_22 + ((tmpvar_38 * 
        (((mix (
          mix (tmpvar_45, fTarget_42, fAmount_41)
        , fTarget_42, fAmount_41) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_16 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_51.x + (tmpvar_51.y * tmpvar_51.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_47)));
    vPos_46 = (normalize(vPos_46) * fLength_48);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  highp vec4 tmpvar_53;
  tmpvar_53 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (tmpvar_53 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = tmpvar_53.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  tmpvar_9 = tmpvar_57;
  highp vec2 tmpvar_58;
  tmpvar_58 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_58;
  tmpvar_4 = tmpvar_6;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * _glesNormal.x)
   + 
    (v_60.xyz * _glesNormal.y)
  ) + (v_61.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_62;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_2;
  mediump vec4 normal_64;
  normal_64 = tmpvar_63;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD7 = tmpvar_5;
  xlv_TEXCOORD8 = (x2_65 + (unity_SHC.xyz * (
    (normal_64.x * normal_64.x)
   - 
    (normal_64.y * normal_64.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DitherMaskLOD2D;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  mediump vec4 detailColor_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_DetailTex, xlv_TEXCOORD4.xy);
  detailColor_6 = tmpvar_14;
  diffuseColor_7.xyz = mix (diffuseColor_7.xyz, detailColor_6.xyz, detailColor_6.www);
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_15;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_3;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_16;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  mediump vec4 outDiffuseOcclusion_19;
  mediump vec4 outNormal_20;
  mediump vec4 emission_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_5;
  outDiffuseOcclusion_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  emission_21 = tmpvar_24;
  emission_21.xyz = (emission_21.xyz + (tmpvar_5 * (xlv_TEXCOORD8 + x1_18)));
  outDiffuse_1.xyz = outDiffuseOcclusion_19.xyz;
  outEmission_2.w = emission_21.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_21.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_20;
  gl_FragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_DETAIL" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD7;
out mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_10;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = _glesMultiTexCoord2.xy;
  tmpvar_8.xy = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_17;
      highp float fAdherenceScale_24;
      highp vec3 tmpvar_25;
      tmpvar_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_26;
      tmpvar_26 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (tmpvar_26 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((tmpvar_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_26 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((tmpvar_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        (mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_27.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((tmpvar_25 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((tmpvar_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((
        ((tmpvar_35.x * tmpvar_35.y) * tmpvar_35.x)
       * tmpvar_35.y) * _ST_WindTurbulences.x));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_14 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp vec3 tmpvar_38;
      tmpvar_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_39;
      tmpvar_39 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_40;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (tmpvar_39 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((tmpvar_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      vPos_37 = (vPos_22 + ((tmpvar_38 * 
        (((mix (
          mix (tmpvar_45, fTarget_42, fAmount_41)
        , fTarget_42, fAmount_41) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_16 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_51.x + (tmpvar_51.y * tmpvar_51.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_47)));
    vPos_46 = (normalize(vPos_46) * fLength_48);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  highp vec4 tmpvar_53;
  tmpvar_53 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (tmpvar_53 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = tmpvar_53.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  tmpvar_9 = tmpvar_57;
  highp vec2 tmpvar_58;
  tmpvar_58 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_58;
  tmpvar_4 = tmpvar_6;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * _glesNormal.x)
   + 
    (v_60.xyz * _glesNormal.y)
  ) + (v_61.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_62;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_2;
  mediump vec4 normal_64;
  normal_64 = tmpvar_63;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD7 = tmpvar_5;
  xlv_TEXCOORD8 = (x2_65 + (unity_SHC.xyz * (
    (normal_64.x * normal_64.x)
   - 
    (normal_64.y * normal_64.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DitherMaskLOD2D;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  mediump vec4 detailColor_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture (_DetailTex, xlv_TEXCOORD4.xy);
  detailColor_6 = tmpvar_14;
  diffuseColor_7.xyz = mix (diffuseColor_7.xyz, detailColor_6.xyz, detailColor_6.www);
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_15;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_3;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_16;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  mediump vec4 outDiffuseOcclusion_19;
  mediump vec4 outNormal_20;
  mediump vec4 emission_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_5;
  outDiffuseOcclusion_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  emission_21 = tmpvar_24;
  emission_21.xyz = (emission_21.xyz + (tmpvar_5 * (xlv_TEXCOORD8 + x1_18)));
  outDiffuse_1.xyz = outDiffuseOcclusion_19.xyz;
  outEmission_2.w = emission_21.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_21.xyz));
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_20;
  _glesFragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_10;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = _glesMultiTexCoord2.xy;
  tmpvar_8.xy = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_17;
      highp float fAdherenceScale_24;
      highp vec3 tmpvar_25;
      tmpvar_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_26;
      tmpvar_26 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (tmpvar_26 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((tmpvar_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_26 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((tmpvar_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        (mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_27.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((tmpvar_25 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((tmpvar_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((
        ((tmpvar_35.x * tmpvar_35.y) * tmpvar_35.x)
       * tmpvar_35.y) * _ST_WindTurbulences.x));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_14 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp vec3 tmpvar_38;
      tmpvar_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_39;
      tmpvar_39 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_40;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (tmpvar_39 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((tmpvar_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      vPos_37 = (vPos_22 + ((tmpvar_38 * 
        (((mix (
          mix (tmpvar_45, fTarget_42, fAmount_41)
        , fTarget_42, fAmount_41) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_16 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_51.x + (tmpvar_51.y * tmpvar_51.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_47)));
    vPos_46 = (normalize(vPos_46) * fLength_48);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  highp vec4 tmpvar_53;
  tmpvar_53 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (tmpvar_53 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = tmpvar_53.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  tmpvar_9 = tmpvar_57;
  highp vec2 tmpvar_58;
  tmpvar_58 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_58;
  tmpvar_4 = tmpvar_6;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * _glesNormal.x)
   + 
    (v_60.xyz * _glesNormal.y)
  ) + (v_61.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_62;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_2;
  mediump vec4 normal_64;
  normal_64 = tmpvar_63;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD7 = tmpvar_5;
  xlv_TEXCOORD8 = (x2_65 + (unity_SHC.xyz * (
    (normal_64.x * normal_64.x)
   - 
    (normal_64.y * normal_64.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DitherMaskLOD2D;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  mediump vec4 detailColor_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_7.x = tmpvar_8.x;
  mediump float tmpvar_9;
  tmpvar_9 = fract(tmpvar_8.y);
  highp float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * 0.0625) + unity_LODFade.y);
  projUV_7.y = tmpvar_10;
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_DetailTex, xlv_TEXCOORD4.xy);
  detailColor_5 = tmpvar_13;
  diffuseColor_6.xyz = mix (diffuseColor_6.xyz, detailColor_5.xyz, detailColor_5.www);
  mediump vec3 tmpvar_14;
  tmpvar_14 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_14;
  mediump vec3 normalWorld_15;
  normalWorld_15 = tmpvar_2;
  mediump vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = normalWorld_15;
  mediump vec3 x1_17;
  x1_17.x = dot (unity_SHAr, tmpvar_16);
  x1_17.y = dot (unity_SHAg, tmpvar_16);
  x1_17.z = dot (unity_SHAb, tmpvar_16);
  mediump vec4 outDiffuseOcclusion_18;
  mediump vec4 outNormal_19;
  mediump vec4 emission_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_4;
  outDiffuseOcclusion_18 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = vec3(0.0, 0.0, 0.0);
  emission_20 = tmpvar_23;
  emission_20.xyz = (emission_20.xyz + (tmpvar_4 * (xlv_TEXCOORD8 + x1_17)));
  outDiffuse_1.xyz = outDiffuseOcclusion_18.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_19;
  gl_FragData[3] = emission_20;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD7;
out mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_10;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = _glesMultiTexCoord2.xy;
  tmpvar_8.xy = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_17;
      highp float fAdherenceScale_24;
      highp vec3 tmpvar_25;
      tmpvar_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_26;
      tmpvar_26 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (tmpvar_26 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((tmpvar_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_26 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((tmpvar_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        (mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_27.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((tmpvar_25 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((tmpvar_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((
        ((tmpvar_35.x * tmpvar_35.y) * tmpvar_35.x)
       * tmpvar_35.y) * _ST_WindTurbulences.x));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_14 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp vec3 tmpvar_38;
      tmpvar_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_39;
      tmpvar_39 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_40;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (tmpvar_39 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((tmpvar_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      vPos_37 = (vPos_22 + ((tmpvar_38 * 
        (((mix (
          mix (tmpvar_45, fTarget_42, fAmount_41)
        , fTarget_42, fAmount_41) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_16 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_51.x + (tmpvar_51.y * tmpvar_51.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_47)));
    vPos_46 = (normalize(vPos_46) * fLength_48);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  highp vec4 tmpvar_53;
  tmpvar_53 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (tmpvar_53 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = tmpvar_53.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  tmpvar_9 = tmpvar_57;
  highp vec2 tmpvar_58;
  tmpvar_58 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_58;
  tmpvar_4 = tmpvar_6;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * _glesNormal.x)
   + 
    (v_60.xyz * _glesNormal.y)
  ) + (v_61.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_62;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_2;
  mediump vec4 normal_64;
  normal_64 = tmpvar_63;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD7 = tmpvar_5;
  xlv_TEXCOORD8 = (x2_65 + (unity_SHC.xyz * (
    (normal_64.x * normal_64.x)
   - 
    (normal_64.y * normal_64.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DitherMaskLOD2D;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  mediump vec4 detailColor_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_7.x = tmpvar_8.x;
  mediump float tmpvar_9;
  tmpvar_9 = fract(tmpvar_8.y);
  highp float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * 0.0625) + unity_LODFade.y);
  projUV_7.y = tmpvar_10;
  lowp float x_11;
  x_11 = (texture (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_DetailTex, xlv_TEXCOORD4.xy);
  detailColor_5 = tmpvar_13;
  diffuseColor_6.xyz = mix (diffuseColor_6.xyz, detailColor_5.xyz, detailColor_5.www);
  mediump vec3 tmpvar_14;
  tmpvar_14 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_14;
  mediump vec3 normalWorld_15;
  normalWorld_15 = tmpvar_2;
  mediump vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = normalWorld_15;
  mediump vec3 x1_17;
  x1_17.x = dot (unity_SHAr, tmpvar_16);
  x1_17.y = dot (unity_SHAg, tmpvar_16);
  x1_17.z = dot (unity_SHAb, tmpvar_16);
  mediump vec4 outDiffuseOcclusion_18;
  mediump vec4 outNormal_19;
  mediump vec4 emission_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_4;
  outDiffuseOcclusion_18 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = vec3(0.0, 0.0, 0.0);
  emission_20 = tmpvar_23;
  emission_20.xyz = (emission_20.xyz + (tmpvar_4 * (xlv_TEXCOORD8 + x1_17)));
  outDiffuse_1.xyz = outDiffuseOcclusion_18.xyz;
  outDiffuse_1.w = 1.0;
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_19;
  _glesFragData[3] = emission_20;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_10;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_14;
  highp vec2 tmpvar_15;
  tmpvar_15 = _glesMultiTexCoord2.xy;
  tmpvar_8.xy = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = tmpvar_1.xyz;
  FinalPosition_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = tmpvar_20;
      highp float fAdherenceScale_26;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((tmpvar_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        (mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_29.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (_glesVertex.xyz + ((tmpvar_27 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((tmpvar_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((
        ((tmpvar_37.x * tmpvar_37.y) * tmpvar_37.x)
       * tmpvar_37.y) * _ST_WindTurbulences.x));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_17 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp vec3 tmpvar_40;
      tmpvar_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_41;
      tmpvar_41 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_42;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (tmpvar_41 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((tmpvar_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      vPos_39 = (vPos_24 + ((tmpvar_40 * 
        (((mix (
          mix (tmpvar_47, fTarget_44, fAmount_43)
        , fTarget_44, fAmount_43) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_19 = vPos_24;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_19;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_52.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    vPos_48.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_53.x + (tmpvar_53.y * tmpvar_53.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_49)));
    vPos_48 = (normalize(vPos_48) * fLength_50);
    FinalPosition_19 = vPos_48;
  };
  tmpvar_16.xyz = FinalPosition_19;
  highp vec4 tmpvar_55;
  tmpvar_55 = (glstate_matrix_mvp * tmpvar_16);
  highp vec4 o_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (tmpvar_55 * 0.5);
  highp vec2 tmpvar_58;
  tmpvar_58.x = tmpvar_57.x;
  tmpvar_58.y = (tmpvar_57.y * _ProjectionParams.x);
  o_56.xy = (tmpvar_58 + tmpvar_57.w);
  o_56.zw = tmpvar_55.zw;
  highp vec3 tmpvar_59;
  tmpvar_59 = o_56.xyw;
  tmpvar_9 = tmpvar_59;
  highp vec2 tmpvar_60;
  tmpvar_60 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_60;
  tmpvar_4 = tmpvar_6;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_64;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = worldNormal_2;
  mediump vec4 normal_66;
  normal_66 = tmpvar_65;
  mediump vec3 x2_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = (normal_66.xyzz * normal_66.yzzx);
  x2_67.x = dot (unity_SHBr, tmpvar_68);
  x2_67.y = dot (unity_SHBg, tmpvar_68);
  x2_67.z = dot (unity_SHBb, tmpvar_68);
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_16).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD7 = tmpvar_5;
  xlv_TEXCOORD8 = (x2_67 + (unity_SHC.xyz * (
    (normal_66.x * normal_66.x)
   - 
    (normal_66.y * normal_66.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  mediump vec4 detailColor_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_DetailTex, xlv_TEXCOORD4.xy);
  detailColor_6 = tmpvar_14;
  diffuseColor_7.xyz = mix (diffuseColor_7.xyz, detailColor_6.xyz, detailColor_6.www);
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_16;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_3;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_17;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  mediump vec4 outDiffuseOcclusion_20;
  mediump vec4 outNormal_21;
  mediump vec4 emission_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = tmpvar_5;
  outDiffuseOcclusion_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  emission_22 = tmpvar_25;
  emission_22.xyz = (emission_22.xyz + (tmpvar_5 * (xlv_TEXCOORD8 + x1_19)));
  outDiffuse_1.xyz = outDiffuseOcclusion_20.xyz;
  outEmission_2.w = emission_22.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_22.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_21;
  gl_FragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD7;
out mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_10;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_14;
  highp vec2 tmpvar_15;
  tmpvar_15 = _glesMultiTexCoord2.xy;
  tmpvar_8.xy = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = tmpvar_1.xyz;
  FinalPosition_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = tmpvar_20;
      highp float fAdherenceScale_26;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((tmpvar_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        (mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_29.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (_glesVertex.xyz + ((tmpvar_27 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((tmpvar_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((
        ((tmpvar_37.x * tmpvar_37.y) * tmpvar_37.x)
       * tmpvar_37.y) * _ST_WindTurbulences.x));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_17 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp vec3 tmpvar_40;
      tmpvar_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_41;
      tmpvar_41 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_42;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (tmpvar_41 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((tmpvar_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      vPos_39 = (vPos_24 + ((tmpvar_40 * 
        (((mix (
          mix (tmpvar_47, fTarget_44, fAmount_43)
        , fTarget_44, fAmount_43) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_19 = vPos_24;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_19;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_52.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    vPos_48.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_53.x + (tmpvar_53.y * tmpvar_53.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_49)));
    vPos_48 = (normalize(vPos_48) * fLength_50);
    FinalPosition_19 = vPos_48;
  };
  tmpvar_16.xyz = FinalPosition_19;
  highp vec4 tmpvar_55;
  tmpvar_55 = (glstate_matrix_mvp * tmpvar_16);
  highp vec4 o_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (tmpvar_55 * 0.5);
  highp vec2 tmpvar_58;
  tmpvar_58.x = tmpvar_57.x;
  tmpvar_58.y = (tmpvar_57.y * _ProjectionParams.x);
  o_56.xy = (tmpvar_58 + tmpvar_57.w);
  o_56.zw = tmpvar_55.zw;
  highp vec3 tmpvar_59;
  tmpvar_59 = o_56.xyw;
  tmpvar_9 = tmpvar_59;
  highp vec2 tmpvar_60;
  tmpvar_60 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_60;
  tmpvar_4 = tmpvar_6;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_64;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = worldNormal_2;
  mediump vec4 normal_66;
  normal_66 = tmpvar_65;
  mediump vec3 x2_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = (normal_66.xyzz * normal_66.yzzx);
  x2_67.x = dot (unity_SHBr, tmpvar_68);
  x2_67.y = dot (unity_SHBg, tmpvar_68);
  x2_67.z = dot (unity_SHBb, tmpvar_68);
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_16).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD7 = tmpvar_5;
  xlv_TEXCOORD8 = (x2_67 + (unity_SHC.xyz * (
    (normal_66.x * normal_66.x)
   - 
    (normal_66.y * normal_66.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  mediump vec4 detailColor_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture (_DetailTex, xlv_TEXCOORD4.xy);
  detailColor_6 = tmpvar_14;
  diffuseColor_7.xyz = mix (diffuseColor_7.xyz, detailColor_6.xyz, detailColor_6.www);
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_16;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_3;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_17;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  mediump vec4 outDiffuseOcclusion_20;
  mediump vec4 outNormal_21;
  mediump vec4 emission_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = tmpvar_5;
  outDiffuseOcclusion_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  emission_22 = tmpvar_25;
  emission_22.xyz = (emission_22.xyz + (tmpvar_5 * (xlv_TEXCOORD8 + x1_19)));
  outDiffuse_1.xyz = outDiffuseOcclusion_20.xyz;
  outEmission_2.w = emission_22.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_22.xyz));
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_21;
  _glesFragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_10;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_14;
  highp vec2 tmpvar_15;
  tmpvar_15 = _glesMultiTexCoord2.xy;
  tmpvar_8.xy = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = tmpvar_1.xyz;
  FinalPosition_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = tmpvar_20;
      highp float fAdherenceScale_26;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((tmpvar_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        (mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_29.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (_glesVertex.xyz + ((tmpvar_27 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((tmpvar_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((
        ((tmpvar_37.x * tmpvar_37.y) * tmpvar_37.x)
       * tmpvar_37.y) * _ST_WindTurbulences.x));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_17 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp vec3 tmpvar_40;
      tmpvar_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_41;
      tmpvar_41 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_42;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (tmpvar_41 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((tmpvar_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      vPos_39 = (vPos_24 + ((tmpvar_40 * 
        (((mix (
          mix (tmpvar_47, fTarget_44, fAmount_43)
        , fTarget_44, fAmount_43) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_19 = vPos_24;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_19;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_52.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    vPos_48.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_53.x + (tmpvar_53.y * tmpvar_53.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_49)));
    vPos_48 = (normalize(vPos_48) * fLength_50);
    FinalPosition_19 = vPos_48;
  };
  tmpvar_16.xyz = FinalPosition_19;
  highp vec4 tmpvar_55;
  tmpvar_55 = (glstate_matrix_mvp * tmpvar_16);
  highp vec4 o_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (tmpvar_55 * 0.5);
  highp vec2 tmpvar_58;
  tmpvar_58.x = tmpvar_57.x;
  tmpvar_58.y = (tmpvar_57.y * _ProjectionParams.x);
  o_56.xy = (tmpvar_58 + tmpvar_57.w);
  o_56.zw = tmpvar_55.zw;
  highp vec3 tmpvar_59;
  tmpvar_59 = o_56.xyw;
  tmpvar_9 = tmpvar_59;
  highp vec2 tmpvar_60;
  tmpvar_60 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_60;
  tmpvar_4 = tmpvar_6;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_64;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = worldNormal_2;
  mediump vec4 normal_66;
  normal_66 = tmpvar_65;
  mediump vec3 x2_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = (normal_66.xyzz * normal_66.yzzx);
  x2_67.x = dot (unity_SHBr, tmpvar_68);
  x2_67.y = dot (unity_SHBg, tmpvar_68);
  x2_67.z = dot (unity_SHBb, tmpvar_68);
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_16).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD7 = tmpvar_5;
  xlv_TEXCOORD8 = (x2_67 + (unity_SHC.xyz * (
    (normal_66.x * normal_66.x)
   - 
    (normal_66.y * normal_66.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  mediump vec4 detailColor_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_7.x = tmpvar_8.x;
  mediump float tmpvar_9;
  tmpvar_9 = fract(tmpvar_8.y);
  highp float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * 0.0625) + unity_LODFade.y);
  projUV_7.y = tmpvar_10;
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_DetailTex, xlv_TEXCOORD4.xy);
  detailColor_5 = tmpvar_13;
  diffuseColor_6.xyz = mix (diffuseColor_6.xyz, detailColor_5.xyz, detailColor_5.www);
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_6.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_6.xyz = clamp ((tmpvar_14 * (
    ((max (diffuseColor_6.x, max (diffuseColor_6.y, diffuseColor_6.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_15;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_2;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_16;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  mediump vec4 outDiffuseOcclusion_19;
  mediump vec4 outNormal_20;
  mediump vec4 emission_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_4;
  outDiffuseOcclusion_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  emission_21 = tmpvar_24;
  emission_21.xyz = (emission_21.xyz + (tmpvar_4 * (xlv_TEXCOORD8 + x1_18)));
  outDiffuse_1.xyz = outDiffuseOcclusion_19.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_20;
  gl_FragData[3] = emission_21;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD7;
out mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_10;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_14;
  highp vec2 tmpvar_15;
  tmpvar_15 = _glesMultiTexCoord2.xy;
  tmpvar_8.xy = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = tmpvar_1.xyz;
  FinalPosition_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = tmpvar_20;
      highp float fAdherenceScale_26;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((tmpvar_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        (mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_29.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (_glesVertex.xyz + ((tmpvar_27 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((tmpvar_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((
        ((tmpvar_37.x * tmpvar_37.y) * tmpvar_37.x)
       * tmpvar_37.y) * _ST_WindTurbulences.x));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_17 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp vec3 tmpvar_40;
      tmpvar_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_41;
      tmpvar_41 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_42;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (tmpvar_41 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((tmpvar_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      vPos_39 = (vPos_24 + ((tmpvar_40 * 
        (((mix (
          mix (tmpvar_47, fTarget_44, fAmount_43)
        , fTarget_44, fAmount_43) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_19 = vPos_24;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_19;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_52.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    vPos_48.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_53.x + (tmpvar_53.y * tmpvar_53.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_49)));
    vPos_48 = (normalize(vPos_48) * fLength_50);
    FinalPosition_19 = vPos_48;
  };
  tmpvar_16.xyz = FinalPosition_19;
  highp vec4 tmpvar_55;
  tmpvar_55 = (glstate_matrix_mvp * tmpvar_16);
  highp vec4 o_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (tmpvar_55 * 0.5);
  highp vec2 tmpvar_58;
  tmpvar_58.x = tmpvar_57.x;
  tmpvar_58.y = (tmpvar_57.y * _ProjectionParams.x);
  o_56.xy = (tmpvar_58 + tmpvar_57.w);
  o_56.zw = tmpvar_55.zw;
  highp vec3 tmpvar_59;
  tmpvar_59 = o_56.xyw;
  tmpvar_9 = tmpvar_59;
  highp vec2 tmpvar_60;
  tmpvar_60 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_60;
  tmpvar_4 = tmpvar_6;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_64;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = worldNormal_2;
  mediump vec4 normal_66;
  normal_66 = tmpvar_65;
  mediump vec3 x2_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = (normal_66.xyzz * normal_66.yzzx);
  x2_67.x = dot (unity_SHBr, tmpvar_68);
  x2_67.y = dot (unity_SHBg, tmpvar_68);
  x2_67.z = dot (unity_SHBb, tmpvar_68);
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_16).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD7 = tmpvar_5;
  xlv_TEXCOORD8 = (x2_67 + (unity_SHC.xyz * (
    (normal_66.x * normal_66.x)
   - 
    (normal_66.y * normal_66.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  mediump vec4 detailColor_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_7.x = tmpvar_8.x;
  mediump float tmpvar_9;
  tmpvar_9 = fract(tmpvar_8.y);
  highp float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * 0.0625) + unity_LODFade.y);
  projUV_7.y = tmpvar_10;
  lowp float x_11;
  x_11 = (texture (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_DetailTex, xlv_TEXCOORD4.xy);
  detailColor_5 = tmpvar_13;
  diffuseColor_6.xyz = mix (diffuseColor_6.xyz, detailColor_5.xyz, detailColor_5.www);
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_6.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_6.xyz = clamp ((tmpvar_14 * (
    ((max (diffuseColor_6.x, max (diffuseColor_6.y, diffuseColor_6.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_15;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_2;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_16;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  mediump vec4 outDiffuseOcclusion_19;
  mediump vec4 outNormal_20;
  mediump vec4 emission_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_4;
  outDiffuseOcclusion_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  emission_21 = tmpvar_24;
  emission_21.xyz = (emission_21.xyz + (tmpvar_4 * (xlv_TEXCOORD8 + x1_18)));
  outDiffuse_1.xyz = outDiffuseOcclusion_19.xyz;
  outDiffuse_1.w = 1.0;
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_20;
  _glesFragData[3] = emission_21;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD8;
varying mediump vec3 xlv_TEXCOORD9;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_11;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_15;
  highp vec2 tmpvar_16;
  tmpvar_16 = _glesMultiTexCoord2.xy;
  tmpvar_9.xy = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = tmpvar_1.xyz;
  FinalPosition_20 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = (_WindQuality * _WindEnabled);
  if ((tmpvar_22 > 0.0)) {
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_23 * _ST_WindVector.xyz));
    highp mat3 tmpvar_24;
    tmpvar_24[0] = _World2Object[0].xyz;
    tmpvar_24[1] = _World2Object[1].xyz;
    tmpvar_24[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_24 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_22 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    if ((tmpvar_22 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = tmpvar_21;
      highp float fAdherenceScale_27;
      highp vec3 tmpvar_28;
      tmpvar_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_29;
      tmpvar_29 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (tmpvar_29 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((tmpvar_29 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_29 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((tmpvar_29 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        (mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_30.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (_glesVertex.xyz + ((tmpvar_28 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((tmpvar_29 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((
        ((tmpvar_38.x * tmpvar_38.y) * tmpvar_38.x)
       * tmpvar_38.y) * _ST_WindTurbulences.x));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_18 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp vec3 tmpvar_41;
      tmpvar_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_42;
      tmpvar_42 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_43;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (tmpvar_42 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((tmpvar_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      vPos_40 = (vPos_25 + ((tmpvar_41 * 
        (((mix (
          mix (tmpvar_48, fTarget_45, fAmount_44)
        , fTarget_45, fAmount_44) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_20 = vPos_25;
  };
  if ((tmpvar_22 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_20;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_53.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    vPos_49.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_54.x + (tmpvar_54.y * tmpvar_54.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_50)));
    vPos_49 = (normalize(vPos_49) * fLength_51);
    FinalPosition_20 = vPos_49;
  };
  tmpvar_17.xyz = FinalPosition_20;
  highp vec4 tmpvar_56;
  tmpvar_56 = (glstate_matrix_mvp * tmpvar_17);
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (tmpvar_56 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = tmpvar_56.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  tmpvar_10 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_61;
  tmpvar_5 = tmpvar_7;
  highp vec3 tmpvar_62;
  tmpvar_62 = (_Object2World * tmpvar_17).xyz;
  highp vec4 v_63;
  v_63.x = _World2Object[0].x;
  v_63.y = _World2Object[1].x;
  v_63.z = _World2Object[2].x;
  v_63.w = _World2Object[3].x;
  highp vec4 v_64;
  v_64.x = _World2Object[0].y;
  v_64.y = _World2Object[1].y;
  v_64.z = _World2Object[2].y;
  v_64.w = _World2Object[3].y;
  highp vec4 v_65;
  v_65.x = _World2Object[0].z;
  v_65.y = _World2Object[1].z;
  v_65.z = _World2Object[2].z;
  v_65.w = _World2Object[3].z;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(((
    (v_63.xyz * _glesNormal.x)
   + 
    (v_64.xyz * _glesNormal.y)
  ) + (v_65.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_66;
  highp mat3 tmpvar_67;
  tmpvar_67[0] = _Object2World[0].xyz;
  tmpvar_67[1] = _Object2World[1].xyz;
  tmpvar_67[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((tmpvar_67 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_68;
  lowp vec3 tmpvar_69;
  tmpvar_69 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_70;
  tmpvar_70 = (tmpvar_69 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_3.x;
  tmpvar_71.y = worldBinormal_2.x;
  tmpvar_71.z = worldNormal_4.x;
  tmpvar_71.w = tmpvar_62.x;
  highp vec4 tmpvar_72;
  tmpvar_72.x = worldTangent_3.y;
  tmpvar_72.y = worldBinormal_2.y;
  tmpvar_72.z = worldNormal_4.y;
  tmpvar_72.w = tmpvar_62.y;
  highp vec4 tmpvar_73;
  tmpvar_73.x = worldTangent_3.z;
  tmpvar_73.y = worldBinormal_2.z;
  tmpvar_73.z = worldNormal_4.z;
  tmpvar_73.w = tmpvar_62.z;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_74;
  tmpvar_74.w = 1.0;
  tmpvar_74.xyz = worldNormal_4;
  mediump vec4 normal_75;
  normal_75 = tmpvar_74;
  mediump vec3 x2_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (normal_75.xyzz * normal_75.yzzx);
  x2_76.x = dot (unity_SHBr, tmpvar_77);
  x2_76.y = dot (unity_SHBg, tmpvar_77);
  x2_76.z = dot (unity_SHBb, tmpvar_77);
  gl_Position = (glstate_matrix_mvp * tmpvar_17);
  xlv_TEXCOORD0 = tmpvar_71;
  xlv_TEXCOORD1 = tmpvar_72;
  xlv_TEXCOORD2 = tmpvar_73;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_10;
  xlv_TEXCOORD8 = tmpvar_6;
  xlv_TEXCOORD9 = (x2_76 + (unity_SHC.xyz * (
    (normal_75.x * normal_75.x)
   - 
    (normal_75.y * normal_75.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD9;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 worldN_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  mediump vec4 detailColor_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_7 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_DetailTex, xlv_TEXCOORD5.xy);
  detailColor_6 = tmpvar_14;
  diffuseColor_7.xyz = mix (diffuseColor_7.xyz, detailColor_6.xyz, detailColor_6.www);
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_3.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_3.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_3.z = tmpvar_20;
  mediump vec3 normalWorld_21;
  normalWorld_21 = worldN_3;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_21;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  mediump vec4 outDiffuseOcclusion_24;
  mediump vec4 outNormal_25;
  mediump vec4 emission_26;
  lowp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = tmpvar_5;
  outDiffuseOcclusion_24 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = ((worldN_3 * 0.5) + 0.5);
  outNormal_25 = tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = vec3(0.0, 0.0, 0.0);
  emission_26 = tmpvar_29;
  emission_26.xyz = (emission_26.xyz + (tmpvar_5 * (xlv_TEXCOORD9 + x1_23)));
  outDiffuse_1.xyz = outDiffuseOcclusion_24.xyz;
  outEmission_2.w = emission_26.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_26.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_25;
  gl_FragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
in vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
out mediump vec3 xlv_TEXCOORD9;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_11;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_15;
  highp vec2 tmpvar_16;
  tmpvar_16 = _glesMultiTexCoord2.xy;
  tmpvar_9.xy = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = tmpvar_1.xyz;
  FinalPosition_20 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = (_WindQuality * _WindEnabled);
  if ((tmpvar_22 > 0.0)) {
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_23 * _ST_WindVector.xyz));
    highp mat3 tmpvar_24;
    tmpvar_24[0] = _World2Object[0].xyz;
    tmpvar_24[1] = _World2Object[1].xyz;
    tmpvar_24[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_24 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_22 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    if ((tmpvar_22 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = tmpvar_21;
      highp float fAdherenceScale_27;
      highp vec3 tmpvar_28;
      tmpvar_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_29;
      tmpvar_29 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (tmpvar_29 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((tmpvar_29 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_29 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((tmpvar_29 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        (mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_30.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (_glesVertex.xyz + ((tmpvar_28 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((tmpvar_29 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((
        ((tmpvar_38.x * tmpvar_38.y) * tmpvar_38.x)
       * tmpvar_38.y) * _ST_WindTurbulences.x));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_18 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp vec3 tmpvar_41;
      tmpvar_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_42;
      tmpvar_42 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_43;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (tmpvar_42 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((tmpvar_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      vPos_40 = (vPos_25 + ((tmpvar_41 * 
        (((mix (
          mix (tmpvar_48, fTarget_45, fAmount_44)
        , fTarget_45, fAmount_44) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_20 = vPos_25;
  };
  if ((tmpvar_22 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_20;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_53.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    vPos_49.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_54.x + (tmpvar_54.y * tmpvar_54.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_50)));
    vPos_49 = (normalize(vPos_49) * fLength_51);
    FinalPosition_20 = vPos_49;
  };
  tmpvar_17.xyz = FinalPosition_20;
  highp vec4 tmpvar_56;
  tmpvar_56 = (glstate_matrix_mvp * tmpvar_17);
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (tmpvar_56 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = tmpvar_56.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  tmpvar_10 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_61;
  tmpvar_5 = tmpvar_7;
  highp vec3 tmpvar_62;
  tmpvar_62 = (_Object2World * tmpvar_17).xyz;
  highp vec4 v_63;
  v_63.x = _World2Object[0].x;
  v_63.y = _World2Object[1].x;
  v_63.z = _World2Object[2].x;
  v_63.w = _World2Object[3].x;
  highp vec4 v_64;
  v_64.x = _World2Object[0].y;
  v_64.y = _World2Object[1].y;
  v_64.z = _World2Object[2].y;
  v_64.w = _World2Object[3].y;
  highp vec4 v_65;
  v_65.x = _World2Object[0].z;
  v_65.y = _World2Object[1].z;
  v_65.z = _World2Object[2].z;
  v_65.w = _World2Object[3].z;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(((
    (v_63.xyz * _glesNormal.x)
   + 
    (v_64.xyz * _glesNormal.y)
  ) + (v_65.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_66;
  highp mat3 tmpvar_67;
  tmpvar_67[0] = _Object2World[0].xyz;
  tmpvar_67[1] = _Object2World[1].xyz;
  tmpvar_67[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((tmpvar_67 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_68;
  lowp vec3 tmpvar_69;
  tmpvar_69 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_70;
  tmpvar_70 = (tmpvar_69 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_3.x;
  tmpvar_71.y = worldBinormal_2.x;
  tmpvar_71.z = worldNormal_4.x;
  tmpvar_71.w = tmpvar_62.x;
  highp vec4 tmpvar_72;
  tmpvar_72.x = worldTangent_3.y;
  tmpvar_72.y = worldBinormal_2.y;
  tmpvar_72.z = worldNormal_4.y;
  tmpvar_72.w = tmpvar_62.y;
  highp vec4 tmpvar_73;
  tmpvar_73.x = worldTangent_3.z;
  tmpvar_73.y = worldBinormal_2.z;
  tmpvar_73.z = worldNormal_4.z;
  tmpvar_73.w = tmpvar_62.z;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_74;
  tmpvar_74.w = 1.0;
  tmpvar_74.xyz = worldNormal_4;
  mediump vec4 normal_75;
  normal_75 = tmpvar_74;
  mediump vec3 x2_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (normal_75.xyzz * normal_75.yzzx);
  x2_76.x = dot (unity_SHBr, tmpvar_77);
  x2_76.y = dot (unity_SHBg, tmpvar_77);
  x2_76.z = dot (unity_SHBb, tmpvar_77);
  gl_Position = (glstate_matrix_mvp * tmpvar_17);
  xlv_TEXCOORD0 = tmpvar_71;
  xlv_TEXCOORD1 = tmpvar_72;
  xlv_TEXCOORD2 = tmpvar_73;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_10;
  xlv_TEXCOORD8 = tmpvar_6;
  xlv_TEXCOORD9 = (x2_76 + (unity_SHC.xyz * (
    (normal_75.x * normal_75.x)
   - 
    (normal_75.y * normal_75.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
in mediump vec3 xlv_TEXCOORD9;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 worldN_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  mediump vec4 detailColor_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_7 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture (_DetailTex, xlv_TEXCOORD5.xy);
  detailColor_6 = tmpvar_14;
  diffuseColor_7.xyz = mix (diffuseColor_7.xyz, detailColor_6.xyz, detailColor_6.www);
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_3.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_3.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_3.z = tmpvar_20;
  mediump vec3 normalWorld_21;
  normalWorld_21 = worldN_3;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_21;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  mediump vec4 outDiffuseOcclusion_24;
  mediump vec4 outNormal_25;
  mediump vec4 emission_26;
  lowp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = tmpvar_5;
  outDiffuseOcclusion_24 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = ((worldN_3 * 0.5) + 0.5);
  outNormal_25 = tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = vec3(0.0, 0.0, 0.0);
  emission_26 = tmpvar_29;
  emission_26.xyz = (emission_26.xyz + (tmpvar_5 * (xlv_TEXCOORD9 + x1_23)));
  outDiffuse_1.xyz = outDiffuseOcclusion_24.xyz;
  outEmission_2.w = emission_26.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_26.xyz));
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_25;
  _glesFragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD8;
varying mediump vec3 xlv_TEXCOORD9;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_11;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_15;
  highp vec2 tmpvar_16;
  tmpvar_16 = _glesMultiTexCoord2.xy;
  tmpvar_9.xy = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = tmpvar_1.xyz;
  FinalPosition_20 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = (_WindQuality * _WindEnabled);
  if ((tmpvar_22 > 0.0)) {
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_23 * _ST_WindVector.xyz));
    highp mat3 tmpvar_24;
    tmpvar_24[0] = _World2Object[0].xyz;
    tmpvar_24[1] = _World2Object[1].xyz;
    tmpvar_24[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_24 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_22 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    if ((tmpvar_22 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = tmpvar_21;
      highp float fAdherenceScale_27;
      highp vec3 tmpvar_28;
      tmpvar_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_29;
      tmpvar_29 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (tmpvar_29 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((tmpvar_29 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_29 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((tmpvar_29 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        (mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_30.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (_glesVertex.xyz + ((tmpvar_28 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((tmpvar_29 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((
        ((tmpvar_38.x * tmpvar_38.y) * tmpvar_38.x)
       * tmpvar_38.y) * _ST_WindTurbulences.x));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_18 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp vec3 tmpvar_41;
      tmpvar_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_42;
      tmpvar_42 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_43;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (tmpvar_42 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((tmpvar_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      vPos_40 = (vPos_25 + ((tmpvar_41 * 
        (((mix (
          mix (tmpvar_48, fTarget_45, fAmount_44)
        , fTarget_45, fAmount_44) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_20 = vPos_25;
  };
  if ((tmpvar_22 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_20;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_53.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    vPos_49.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_54.x + (tmpvar_54.y * tmpvar_54.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_50)));
    vPos_49 = (normalize(vPos_49) * fLength_51);
    FinalPosition_20 = vPos_49;
  };
  tmpvar_17.xyz = FinalPosition_20;
  highp vec4 tmpvar_56;
  tmpvar_56 = (glstate_matrix_mvp * tmpvar_17);
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (tmpvar_56 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = tmpvar_56.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  tmpvar_10 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_61;
  tmpvar_5 = tmpvar_7;
  highp vec3 tmpvar_62;
  tmpvar_62 = (_Object2World * tmpvar_17).xyz;
  highp vec4 v_63;
  v_63.x = _World2Object[0].x;
  v_63.y = _World2Object[1].x;
  v_63.z = _World2Object[2].x;
  v_63.w = _World2Object[3].x;
  highp vec4 v_64;
  v_64.x = _World2Object[0].y;
  v_64.y = _World2Object[1].y;
  v_64.z = _World2Object[2].y;
  v_64.w = _World2Object[3].y;
  highp vec4 v_65;
  v_65.x = _World2Object[0].z;
  v_65.y = _World2Object[1].z;
  v_65.z = _World2Object[2].z;
  v_65.w = _World2Object[3].z;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(((
    (v_63.xyz * _glesNormal.x)
   + 
    (v_64.xyz * _glesNormal.y)
  ) + (v_65.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_66;
  highp mat3 tmpvar_67;
  tmpvar_67[0] = _Object2World[0].xyz;
  tmpvar_67[1] = _Object2World[1].xyz;
  tmpvar_67[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((tmpvar_67 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_68;
  lowp vec3 tmpvar_69;
  tmpvar_69 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_70;
  tmpvar_70 = (tmpvar_69 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_3.x;
  tmpvar_71.y = worldBinormal_2.x;
  tmpvar_71.z = worldNormal_4.x;
  tmpvar_71.w = tmpvar_62.x;
  highp vec4 tmpvar_72;
  tmpvar_72.x = worldTangent_3.y;
  tmpvar_72.y = worldBinormal_2.y;
  tmpvar_72.z = worldNormal_4.y;
  tmpvar_72.w = tmpvar_62.y;
  highp vec4 tmpvar_73;
  tmpvar_73.x = worldTangent_3.z;
  tmpvar_73.y = worldBinormal_2.z;
  tmpvar_73.z = worldNormal_4.z;
  tmpvar_73.w = tmpvar_62.z;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_74;
  tmpvar_74.w = 1.0;
  tmpvar_74.xyz = worldNormal_4;
  mediump vec4 normal_75;
  normal_75 = tmpvar_74;
  mediump vec3 x2_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (normal_75.xyzz * normal_75.yzzx);
  x2_76.x = dot (unity_SHBr, tmpvar_77);
  x2_76.y = dot (unity_SHBg, tmpvar_77);
  x2_76.z = dot (unity_SHBb, tmpvar_77);
  gl_Position = (glstate_matrix_mvp * tmpvar_17);
  xlv_TEXCOORD0 = tmpvar_71;
  xlv_TEXCOORD1 = tmpvar_72;
  xlv_TEXCOORD2 = tmpvar_73;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_10;
  xlv_TEXCOORD8 = tmpvar_6;
  xlv_TEXCOORD9 = (x2_76 + (unity_SHC.xyz * (
    (normal_75.x * normal_75.x)
   - 
    (normal_75.y * normal_75.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD9;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 worldN_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_4;
  mediump vec4 detailColor_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_7.x = tmpvar_8.x;
  mediump float tmpvar_9;
  tmpvar_9 = fract(tmpvar_8.y);
  highp float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * 0.0625) + unity_LODFade.y);
  projUV_7.y = tmpvar_10;
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_6 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_DetailTex, xlv_TEXCOORD5.xy);
  detailColor_5 = tmpvar_13;
  diffuseColor_6.xyz = mix (diffuseColor_6.xyz, detailColor_5.xyz, detailColor_5.www);
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_6.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_6.xyz = clamp ((tmpvar_14 * (
    ((max (diffuseColor_6.x, max (diffuseColor_6.y, diffuseColor_6.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_15;
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_2.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_2.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_2.z = tmpvar_19;
  mediump vec3 normalWorld_20;
  normalWorld_20 = worldN_2;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_20;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  mediump vec4 outDiffuseOcclusion_23;
  mediump vec4 outNormal_24;
  mediump vec4 emission_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = tmpvar_4;
  outDiffuseOcclusion_23 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = ((worldN_2 * 0.5) + 0.5);
  outNormal_24 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = vec3(0.0, 0.0, 0.0);
  emission_25 = tmpvar_28;
  emission_25.xyz = (emission_25.xyz + (tmpvar_4 * (xlv_TEXCOORD9 + x1_22)));
  outDiffuse_1.xyz = outDiffuseOcclusion_23.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_24;
  gl_FragData[3] = emission_25;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
in vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
out mediump vec3 xlv_TEXCOORD9;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_11;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_15;
  highp vec2 tmpvar_16;
  tmpvar_16 = _glesMultiTexCoord2.xy;
  tmpvar_9.xy = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = tmpvar_1.xyz;
  FinalPosition_20 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = (_WindQuality * _WindEnabled);
  if ((tmpvar_22 > 0.0)) {
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_23 * _ST_WindVector.xyz));
    highp mat3 tmpvar_24;
    tmpvar_24[0] = _World2Object[0].xyz;
    tmpvar_24[1] = _World2Object[1].xyz;
    tmpvar_24[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_24 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_22 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    if ((tmpvar_22 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = tmpvar_21;
      highp float fAdherenceScale_27;
      highp vec3 tmpvar_28;
      tmpvar_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_29;
      tmpvar_29 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (tmpvar_29 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((tmpvar_29 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_29 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((tmpvar_29 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        (mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_30.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (_glesVertex.xyz + ((tmpvar_28 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((tmpvar_29 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((
        ((tmpvar_38.x * tmpvar_38.y) * tmpvar_38.x)
       * tmpvar_38.y) * _ST_WindTurbulences.x));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_18 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp vec3 tmpvar_41;
      tmpvar_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_42;
      tmpvar_42 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_43;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (tmpvar_42 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((tmpvar_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      vPos_40 = (vPos_25 + ((tmpvar_41 * 
        (((mix (
          mix (tmpvar_48, fTarget_45, fAmount_44)
        , fTarget_45, fAmount_44) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_20 = vPos_25;
  };
  if ((tmpvar_22 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_20;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_53.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    vPos_49.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_54.x + (tmpvar_54.y * tmpvar_54.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_50)));
    vPos_49 = (normalize(vPos_49) * fLength_51);
    FinalPosition_20 = vPos_49;
  };
  tmpvar_17.xyz = FinalPosition_20;
  highp vec4 tmpvar_56;
  tmpvar_56 = (glstate_matrix_mvp * tmpvar_17);
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (tmpvar_56 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = tmpvar_56.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  tmpvar_10 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_61;
  tmpvar_5 = tmpvar_7;
  highp vec3 tmpvar_62;
  tmpvar_62 = (_Object2World * tmpvar_17).xyz;
  highp vec4 v_63;
  v_63.x = _World2Object[0].x;
  v_63.y = _World2Object[1].x;
  v_63.z = _World2Object[2].x;
  v_63.w = _World2Object[3].x;
  highp vec4 v_64;
  v_64.x = _World2Object[0].y;
  v_64.y = _World2Object[1].y;
  v_64.z = _World2Object[2].y;
  v_64.w = _World2Object[3].y;
  highp vec4 v_65;
  v_65.x = _World2Object[0].z;
  v_65.y = _World2Object[1].z;
  v_65.z = _World2Object[2].z;
  v_65.w = _World2Object[3].z;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(((
    (v_63.xyz * _glesNormal.x)
   + 
    (v_64.xyz * _glesNormal.y)
  ) + (v_65.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_66;
  highp mat3 tmpvar_67;
  tmpvar_67[0] = _Object2World[0].xyz;
  tmpvar_67[1] = _Object2World[1].xyz;
  tmpvar_67[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((tmpvar_67 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_68;
  lowp vec3 tmpvar_69;
  tmpvar_69 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_70;
  tmpvar_70 = (tmpvar_69 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_3.x;
  tmpvar_71.y = worldBinormal_2.x;
  tmpvar_71.z = worldNormal_4.x;
  tmpvar_71.w = tmpvar_62.x;
  highp vec4 tmpvar_72;
  tmpvar_72.x = worldTangent_3.y;
  tmpvar_72.y = worldBinormal_2.y;
  tmpvar_72.z = worldNormal_4.y;
  tmpvar_72.w = tmpvar_62.y;
  highp vec4 tmpvar_73;
  tmpvar_73.x = worldTangent_3.z;
  tmpvar_73.y = worldBinormal_2.z;
  tmpvar_73.z = worldNormal_4.z;
  tmpvar_73.w = tmpvar_62.z;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_74;
  tmpvar_74.w = 1.0;
  tmpvar_74.xyz = worldNormal_4;
  mediump vec4 normal_75;
  normal_75 = tmpvar_74;
  mediump vec3 x2_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (normal_75.xyzz * normal_75.yzzx);
  x2_76.x = dot (unity_SHBr, tmpvar_77);
  x2_76.y = dot (unity_SHBg, tmpvar_77);
  x2_76.z = dot (unity_SHBb, tmpvar_77);
  gl_Position = (glstate_matrix_mvp * tmpvar_17);
  xlv_TEXCOORD0 = tmpvar_71;
  xlv_TEXCOORD1 = tmpvar_72;
  xlv_TEXCOORD2 = tmpvar_73;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_10;
  xlv_TEXCOORD8 = tmpvar_6;
  xlv_TEXCOORD9 = (x2_76 + (unity_SHC.xyz * (
    (normal_75.x * normal_75.x)
   - 
    (normal_75.y * normal_75.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
in mediump vec3 xlv_TEXCOORD9;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 worldN_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_4;
  mediump vec4 detailColor_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_7.x = tmpvar_8.x;
  mediump float tmpvar_9;
  tmpvar_9 = fract(tmpvar_8.y);
  highp float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * 0.0625) + unity_LODFade.y);
  projUV_7.y = tmpvar_10;
  lowp float x_11;
  x_11 = (texture (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_6 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_DetailTex, xlv_TEXCOORD5.xy);
  detailColor_5 = tmpvar_13;
  diffuseColor_6.xyz = mix (diffuseColor_6.xyz, detailColor_5.xyz, detailColor_5.www);
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_6.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_6.xyz = clamp ((tmpvar_14 * (
    ((max (diffuseColor_6.x, max (diffuseColor_6.y, diffuseColor_6.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_15;
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_2.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_2.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_2.z = tmpvar_19;
  mediump vec3 normalWorld_20;
  normalWorld_20 = worldN_2;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_20;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  mediump vec4 outDiffuseOcclusion_23;
  mediump vec4 outNormal_24;
  mediump vec4 emission_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = tmpvar_4;
  outDiffuseOcclusion_23 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = ((worldN_2 * 0.5) + 0.5);
  outNormal_24 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = vec3(0.0, 0.0, 0.0);
  emission_25 = tmpvar_28;
  emission_25.xyz = (emission_25.xyz + (tmpvar_4 * (xlv_TEXCOORD9 + x1_22)));
  outDiffuse_1.xyz = outDiffuseOcclusion_23.xyz;
  outDiffuse_1.w = 1.0;
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_24;
  _glesFragData[3] = emission_25;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_10;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12.xy = _glesMultiTexCoord2.zw;
  tmpvar_12.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_17;
      highp float fAdherenceScale_24;
      highp vec3 tmpvar_25;
      tmpvar_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_26;
      tmpvar_26 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (tmpvar_26 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((tmpvar_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_26 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((tmpvar_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        (mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_27.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((tmpvar_25 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((tmpvar_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((
        ((tmpvar_35.x * tmpvar_35.y) * tmpvar_35.x)
       * tmpvar_35.y) * _ST_WindTurbulences.x));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_14 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp vec3 tmpvar_38;
      tmpvar_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_39;
      tmpvar_39 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_40;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (tmpvar_39 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((tmpvar_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      vPos_37 = (vPos_22 + ((tmpvar_38 * 
        (((mix (
          mix (tmpvar_45, fTarget_42, fAmount_41)
        , fTarget_42, fAmount_41) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_16 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_51.x + (tmpvar_51.y * tmpvar_51.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_47)));
    vPos_46 = (normalize(vPos_46) * fLength_48);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  highp vec4 tmpvar_53;
  tmpvar_53 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (tmpvar_53 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = tmpvar_53.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  tmpvar_9 = tmpvar_57;
  highp vec2 tmpvar_58;
  tmpvar_58 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_58;
  tmpvar_4 = tmpvar_6;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * _glesNormal.x)
   + 
    (v_60.xyz * _glesNormal.y)
  ) + (v_61.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_62;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_2;
  mediump vec4 normal_64;
  normal_64 = tmpvar_63;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD7 = tmpvar_5;
  xlv_TEXCOORD8 = (x2_65 + (unity_SHC.xyz * (
    (normal_64.x * normal_64.x)
   - 
    (normal_64.y * normal_64.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  mediump vec4 blendColor_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_6 = tmpvar_14;
  diffuseColor_7.xyz = mix (blendColor_6.xyz, diffuseColor_7.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_15;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_3;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_16;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  mediump vec4 outDiffuseOcclusion_19;
  mediump vec4 outNormal_20;
  mediump vec4 emission_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_5;
  outDiffuseOcclusion_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  emission_21 = tmpvar_24;
  emission_21.xyz = (emission_21.xyz + (tmpvar_5 * (xlv_TEXCOORD8 + x1_18)));
  outDiffuse_1.xyz = outDiffuseOcclusion_19.xyz;
  outEmission_2.w = emission_21.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_21.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_20;
  gl_FragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD7;
out mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_10;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12.xy = _glesMultiTexCoord2.zw;
  tmpvar_12.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_17;
      highp float fAdherenceScale_24;
      highp vec3 tmpvar_25;
      tmpvar_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_26;
      tmpvar_26 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (tmpvar_26 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((tmpvar_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_26 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((tmpvar_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        (mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_27.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((tmpvar_25 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((tmpvar_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((
        ((tmpvar_35.x * tmpvar_35.y) * tmpvar_35.x)
       * tmpvar_35.y) * _ST_WindTurbulences.x));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_14 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp vec3 tmpvar_38;
      tmpvar_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_39;
      tmpvar_39 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_40;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (tmpvar_39 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((tmpvar_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      vPos_37 = (vPos_22 + ((tmpvar_38 * 
        (((mix (
          mix (tmpvar_45, fTarget_42, fAmount_41)
        , fTarget_42, fAmount_41) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_16 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_51.x + (tmpvar_51.y * tmpvar_51.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_47)));
    vPos_46 = (normalize(vPos_46) * fLength_48);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  highp vec4 tmpvar_53;
  tmpvar_53 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (tmpvar_53 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = tmpvar_53.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  tmpvar_9 = tmpvar_57;
  highp vec2 tmpvar_58;
  tmpvar_58 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_58;
  tmpvar_4 = tmpvar_6;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * _glesNormal.x)
   + 
    (v_60.xyz * _glesNormal.y)
  ) + (v_61.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_62;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_2;
  mediump vec4 normal_64;
  normal_64 = tmpvar_63;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD7 = tmpvar_5;
  xlv_TEXCOORD8 = (x2_65 + (unity_SHC.xyz * (
    (normal_64.x * normal_64.x)
   - 
    (normal_64.y * normal_64.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  mediump vec4 blendColor_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_6 = tmpvar_14;
  diffuseColor_7.xyz = mix (blendColor_6.xyz, diffuseColor_7.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_15;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_3;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_16;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  mediump vec4 outDiffuseOcclusion_19;
  mediump vec4 outNormal_20;
  mediump vec4 emission_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_5;
  outDiffuseOcclusion_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  emission_21 = tmpvar_24;
  emission_21.xyz = (emission_21.xyz + (tmpvar_5 * (xlv_TEXCOORD8 + x1_18)));
  outDiffuse_1.xyz = outDiffuseOcclusion_19.xyz;
  outEmission_2.w = emission_21.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_21.xyz));
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_20;
  _glesFragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_10;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12.xy = _glesMultiTexCoord2.zw;
  tmpvar_12.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_17;
      highp float fAdherenceScale_24;
      highp vec3 tmpvar_25;
      tmpvar_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_26;
      tmpvar_26 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (tmpvar_26 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((tmpvar_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_26 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((tmpvar_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        (mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_27.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((tmpvar_25 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((tmpvar_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((
        ((tmpvar_35.x * tmpvar_35.y) * tmpvar_35.x)
       * tmpvar_35.y) * _ST_WindTurbulences.x));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_14 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp vec3 tmpvar_38;
      tmpvar_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_39;
      tmpvar_39 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_40;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (tmpvar_39 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((tmpvar_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      vPos_37 = (vPos_22 + ((tmpvar_38 * 
        (((mix (
          mix (tmpvar_45, fTarget_42, fAmount_41)
        , fTarget_42, fAmount_41) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_16 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_51.x + (tmpvar_51.y * tmpvar_51.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_47)));
    vPos_46 = (normalize(vPos_46) * fLength_48);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  highp vec4 tmpvar_53;
  tmpvar_53 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (tmpvar_53 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = tmpvar_53.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  tmpvar_9 = tmpvar_57;
  highp vec2 tmpvar_58;
  tmpvar_58 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_58;
  tmpvar_4 = tmpvar_6;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * _glesNormal.x)
   + 
    (v_60.xyz * _glesNormal.y)
  ) + (v_61.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_62;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_2;
  mediump vec4 normal_64;
  normal_64 = tmpvar_63;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD7 = tmpvar_5;
  xlv_TEXCOORD8 = (x2_65 + (unity_SHC.xyz * (
    (normal_64.x * normal_64.x)
   - 
    (normal_64.y * normal_64.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  mediump vec4 blendColor_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_7.x = tmpvar_8.x;
  mediump float tmpvar_9;
  tmpvar_9 = fract(tmpvar_8.y);
  highp float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * 0.0625) + unity_LODFade.y);
  projUV_7.y = tmpvar_10;
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_5 = tmpvar_13;
  diffuseColor_6.xyz = mix (blendColor_5.xyz, diffuseColor_6.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_14;
  tmpvar_14 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_14;
  mediump vec3 normalWorld_15;
  normalWorld_15 = tmpvar_2;
  mediump vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = normalWorld_15;
  mediump vec3 x1_17;
  x1_17.x = dot (unity_SHAr, tmpvar_16);
  x1_17.y = dot (unity_SHAg, tmpvar_16);
  x1_17.z = dot (unity_SHAb, tmpvar_16);
  mediump vec4 outDiffuseOcclusion_18;
  mediump vec4 outNormal_19;
  mediump vec4 emission_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_4;
  outDiffuseOcclusion_18 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = vec3(0.0, 0.0, 0.0);
  emission_20 = tmpvar_23;
  emission_20.xyz = (emission_20.xyz + (tmpvar_4 * (xlv_TEXCOORD8 + x1_17)));
  outDiffuse_1.xyz = outDiffuseOcclusion_18.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_19;
  gl_FragData[3] = emission_20;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD7;
out mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_10;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12.xy = _glesMultiTexCoord2.zw;
  tmpvar_12.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_17;
      highp float fAdherenceScale_24;
      highp vec3 tmpvar_25;
      tmpvar_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_26;
      tmpvar_26 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (tmpvar_26 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((tmpvar_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_26 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((tmpvar_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        (mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_27.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((tmpvar_25 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((tmpvar_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((
        ((tmpvar_35.x * tmpvar_35.y) * tmpvar_35.x)
       * tmpvar_35.y) * _ST_WindTurbulences.x));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_14 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp vec3 tmpvar_38;
      tmpvar_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_39;
      tmpvar_39 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_40;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (tmpvar_39 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((tmpvar_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      vPos_37 = (vPos_22 + ((tmpvar_38 * 
        (((mix (
          mix (tmpvar_45, fTarget_42, fAmount_41)
        , fTarget_42, fAmount_41) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_16 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_51.x + (tmpvar_51.y * tmpvar_51.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_47)));
    vPos_46 = (normalize(vPos_46) * fLength_48);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  highp vec4 tmpvar_53;
  tmpvar_53 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (tmpvar_53 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = tmpvar_53.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  tmpvar_9 = tmpvar_57;
  highp vec2 tmpvar_58;
  tmpvar_58 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_58;
  tmpvar_4 = tmpvar_6;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * _glesNormal.x)
   + 
    (v_60.xyz * _glesNormal.y)
  ) + (v_61.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_62;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_2;
  mediump vec4 normal_64;
  normal_64 = tmpvar_63;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD7 = tmpvar_5;
  xlv_TEXCOORD8 = (x2_65 + (unity_SHC.xyz * (
    (normal_64.x * normal_64.x)
   - 
    (normal_64.y * normal_64.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  mediump vec4 blendColor_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_7.x = tmpvar_8.x;
  mediump float tmpvar_9;
  tmpvar_9 = fract(tmpvar_8.y);
  highp float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * 0.0625) + unity_LODFade.y);
  projUV_7.y = tmpvar_10;
  lowp float x_11;
  x_11 = (texture (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_5 = tmpvar_13;
  diffuseColor_6.xyz = mix (blendColor_5.xyz, diffuseColor_6.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_14;
  tmpvar_14 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_14;
  mediump vec3 normalWorld_15;
  normalWorld_15 = tmpvar_2;
  mediump vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = normalWorld_15;
  mediump vec3 x1_17;
  x1_17.x = dot (unity_SHAr, tmpvar_16);
  x1_17.y = dot (unity_SHAg, tmpvar_16);
  x1_17.z = dot (unity_SHAb, tmpvar_16);
  mediump vec4 outDiffuseOcclusion_18;
  mediump vec4 outNormal_19;
  mediump vec4 emission_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_4;
  outDiffuseOcclusion_18 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = vec3(0.0, 0.0, 0.0);
  emission_20 = tmpvar_23;
  emission_20.xyz = (emission_20.xyz + (tmpvar_4 * (xlv_TEXCOORD8 + x1_17)));
  outDiffuse_1.xyz = outDiffuseOcclusion_18.xyz;
  outDiffuse_1.w = 1.0;
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_19;
  _glesFragData[3] = emission_20;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_10;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.xy = _glesMultiTexCoord2.zw;
  tmpvar_15.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = tmpvar_1.xyz;
  FinalPosition_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = tmpvar_20;
      highp float fAdherenceScale_26;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((tmpvar_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        (mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_29.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (_glesVertex.xyz + ((tmpvar_27 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((tmpvar_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((
        ((tmpvar_37.x * tmpvar_37.y) * tmpvar_37.x)
       * tmpvar_37.y) * _ST_WindTurbulences.x));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_17 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp vec3 tmpvar_40;
      tmpvar_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_41;
      tmpvar_41 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_42;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (tmpvar_41 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((tmpvar_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      vPos_39 = (vPos_24 + ((tmpvar_40 * 
        (((mix (
          mix (tmpvar_47, fTarget_44, fAmount_43)
        , fTarget_44, fAmount_43) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_19 = vPos_24;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_19;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_52.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    vPos_48.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_53.x + (tmpvar_53.y * tmpvar_53.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_49)));
    vPos_48 = (normalize(vPos_48) * fLength_50);
    FinalPosition_19 = vPos_48;
  };
  tmpvar_16.xyz = FinalPosition_19;
  highp vec4 tmpvar_55;
  tmpvar_55 = (glstate_matrix_mvp * tmpvar_16);
  highp vec4 o_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (tmpvar_55 * 0.5);
  highp vec2 tmpvar_58;
  tmpvar_58.x = tmpvar_57.x;
  tmpvar_58.y = (tmpvar_57.y * _ProjectionParams.x);
  o_56.xy = (tmpvar_58 + tmpvar_57.w);
  o_56.zw = tmpvar_55.zw;
  highp vec3 tmpvar_59;
  tmpvar_59 = o_56.xyw;
  tmpvar_9 = tmpvar_59;
  highp vec2 tmpvar_60;
  tmpvar_60 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_60;
  tmpvar_4 = tmpvar_6;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_64;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = worldNormal_2;
  mediump vec4 normal_66;
  normal_66 = tmpvar_65;
  mediump vec3 x2_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = (normal_66.xyzz * normal_66.yzzx);
  x2_67.x = dot (unity_SHBr, tmpvar_68);
  x2_67.y = dot (unity_SHBg, tmpvar_68);
  x2_67.z = dot (unity_SHBb, tmpvar_68);
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_16).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD7 = tmpvar_5;
  xlv_TEXCOORD8 = (x2_67 + (unity_SHC.xyz * (
    (normal_66.x * normal_66.x)
   - 
    (normal_66.y * normal_66.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  mediump vec4 blendColor_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_6 = tmpvar_14;
  diffuseColor_7.xyz = mix (blendColor_6.xyz, diffuseColor_7.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_16;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_3;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_17;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  mediump vec4 outDiffuseOcclusion_20;
  mediump vec4 outNormal_21;
  mediump vec4 emission_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = tmpvar_5;
  outDiffuseOcclusion_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  emission_22 = tmpvar_25;
  emission_22.xyz = (emission_22.xyz + (tmpvar_5 * (xlv_TEXCOORD8 + x1_19)));
  outDiffuse_1.xyz = outDiffuseOcclusion_20.xyz;
  outEmission_2.w = emission_22.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_22.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_21;
  gl_FragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD7;
out mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_10;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.xy = _glesMultiTexCoord2.zw;
  tmpvar_15.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = tmpvar_1.xyz;
  FinalPosition_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = tmpvar_20;
      highp float fAdherenceScale_26;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((tmpvar_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        (mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_29.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (_glesVertex.xyz + ((tmpvar_27 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((tmpvar_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((
        ((tmpvar_37.x * tmpvar_37.y) * tmpvar_37.x)
       * tmpvar_37.y) * _ST_WindTurbulences.x));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_17 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp vec3 tmpvar_40;
      tmpvar_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_41;
      tmpvar_41 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_42;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (tmpvar_41 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((tmpvar_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      vPos_39 = (vPos_24 + ((tmpvar_40 * 
        (((mix (
          mix (tmpvar_47, fTarget_44, fAmount_43)
        , fTarget_44, fAmount_43) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_19 = vPos_24;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_19;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_52.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    vPos_48.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_53.x + (tmpvar_53.y * tmpvar_53.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_49)));
    vPos_48 = (normalize(vPos_48) * fLength_50);
    FinalPosition_19 = vPos_48;
  };
  tmpvar_16.xyz = FinalPosition_19;
  highp vec4 tmpvar_55;
  tmpvar_55 = (glstate_matrix_mvp * tmpvar_16);
  highp vec4 o_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (tmpvar_55 * 0.5);
  highp vec2 tmpvar_58;
  tmpvar_58.x = tmpvar_57.x;
  tmpvar_58.y = (tmpvar_57.y * _ProjectionParams.x);
  o_56.xy = (tmpvar_58 + tmpvar_57.w);
  o_56.zw = tmpvar_55.zw;
  highp vec3 tmpvar_59;
  tmpvar_59 = o_56.xyw;
  tmpvar_9 = tmpvar_59;
  highp vec2 tmpvar_60;
  tmpvar_60 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_60;
  tmpvar_4 = tmpvar_6;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_64;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = worldNormal_2;
  mediump vec4 normal_66;
  normal_66 = tmpvar_65;
  mediump vec3 x2_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = (normal_66.xyzz * normal_66.yzzx);
  x2_67.x = dot (unity_SHBr, tmpvar_68);
  x2_67.y = dot (unity_SHBg, tmpvar_68);
  x2_67.z = dot (unity_SHBb, tmpvar_68);
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_16).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD7 = tmpvar_5;
  xlv_TEXCOORD8 = (x2_67 + (unity_SHC.xyz * (
    (normal_66.x * normal_66.x)
   - 
    (normal_66.y * normal_66.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  mediump vec4 blendColor_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_6 = tmpvar_14;
  diffuseColor_7.xyz = mix (blendColor_6.xyz, diffuseColor_7.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_16;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_3;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_17;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  mediump vec4 outDiffuseOcclusion_20;
  mediump vec4 outNormal_21;
  mediump vec4 emission_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = tmpvar_5;
  outDiffuseOcclusion_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  emission_22 = tmpvar_25;
  emission_22.xyz = (emission_22.xyz + (tmpvar_5 * (xlv_TEXCOORD8 + x1_19)));
  outDiffuse_1.xyz = outDiffuseOcclusion_20.xyz;
  outEmission_2.w = emission_22.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_22.xyz));
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_21;
  _glesFragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_10;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.xy = _glesMultiTexCoord2.zw;
  tmpvar_15.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = tmpvar_1.xyz;
  FinalPosition_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = tmpvar_20;
      highp float fAdherenceScale_26;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((tmpvar_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        (mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_29.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (_glesVertex.xyz + ((tmpvar_27 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((tmpvar_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((
        ((tmpvar_37.x * tmpvar_37.y) * tmpvar_37.x)
       * tmpvar_37.y) * _ST_WindTurbulences.x));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_17 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp vec3 tmpvar_40;
      tmpvar_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_41;
      tmpvar_41 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_42;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (tmpvar_41 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((tmpvar_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      vPos_39 = (vPos_24 + ((tmpvar_40 * 
        (((mix (
          mix (tmpvar_47, fTarget_44, fAmount_43)
        , fTarget_44, fAmount_43) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_19 = vPos_24;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_19;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_52.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    vPos_48.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_53.x + (tmpvar_53.y * tmpvar_53.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_49)));
    vPos_48 = (normalize(vPos_48) * fLength_50);
    FinalPosition_19 = vPos_48;
  };
  tmpvar_16.xyz = FinalPosition_19;
  highp vec4 tmpvar_55;
  tmpvar_55 = (glstate_matrix_mvp * tmpvar_16);
  highp vec4 o_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (tmpvar_55 * 0.5);
  highp vec2 tmpvar_58;
  tmpvar_58.x = tmpvar_57.x;
  tmpvar_58.y = (tmpvar_57.y * _ProjectionParams.x);
  o_56.xy = (tmpvar_58 + tmpvar_57.w);
  o_56.zw = tmpvar_55.zw;
  highp vec3 tmpvar_59;
  tmpvar_59 = o_56.xyw;
  tmpvar_9 = tmpvar_59;
  highp vec2 tmpvar_60;
  tmpvar_60 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_60;
  tmpvar_4 = tmpvar_6;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_64;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = worldNormal_2;
  mediump vec4 normal_66;
  normal_66 = tmpvar_65;
  mediump vec3 x2_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = (normal_66.xyzz * normal_66.yzzx);
  x2_67.x = dot (unity_SHBr, tmpvar_68);
  x2_67.y = dot (unity_SHBg, tmpvar_68);
  x2_67.z = dot (unity_SHBb, tmpvar_68);
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_16).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD7 = tmpvar_5;
  xlv_TEXCOORD8 = (x2_67 + (unity_SHC.xyz * (
    (normal_66.x * normal_66.x)
   - 
    (normal_66.y * normal_66.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  mediump vec4 blendColor_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_7.x = tmpvar_8.x;
  mediump float tmpvar_9;
  tmpvar_9 = fract(tmpvar_8.y);
  highp float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * 0.0625) + unity_LODFade.y);
  projUV_7.y = tmpvar_10;
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_5 = tmpvar_13;
  diffuseColor_6.xyz = mix (blendColor_5.xyz, diffuseColor_6.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_6.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_6.xyz = clamp ((tmpvar_14 * (
    ((max (diffuseColor_6.x, max (diffuseColor_6.y, diffuseColor_6.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_15;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_2;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_16;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  mediump vec4 outDiffuseOcclusion_19;
  mediump vec4 outNormal_20;
  mediump vec4 emission_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_4;
  outDiffuseOcclusion_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  emission_21 = tmpvar_24;
  emission_21.xyz = (emission_21.xyz + (tmpvar_4 * (xlv_TEXCOORD8 + x1_18)));
  outDiffuse_1.xyz = outDiffuseOcclusion_19.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_20;
  gl_FragData[3] = emission_21;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD7;
out mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_10;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.xy = _glesMultiTexCoord2.zw;
  tmpvar_15.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = tmpvar_1.xyz;
  FinalPosition_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = tmpvar_20;
      highp float fAdherenceScale_26;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((tmpvar_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        (mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_29.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (_glesVertex.xyz + ((tmpvar_27 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((tmpvar_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((
        ((tmpvar_37.x * tmpvar_37.y) * tmpvar_37.x)
       * tmpvar_37.y) * _ST_WindTurbulences.x));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_17 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp vec3 tmpvar_40;
      tmpvar_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_41;
      tmpvar_41 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_42;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (tmpvar_41 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((tmpvar_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      vPos_39 = (vPos_24 + ((tmpvar_40 * 
        (((mix (
          mix (tmpvar_47, fTarget_44, fAmount_43)
        , fTarget_44, fAmount_43) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_19 = vPos_24;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_19;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_52.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    vPos_48.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_53.x + (tmpvar_53.y * tmpvar_53.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_49)));
    vPos_48 = (normalize(vPos_48) * fLength_50);
    FinalPosition_19 = vPos_48;
  };
  tmpvar_16.xyz = FinalPosition_19;
  highp vec4 tmpvar_55;
  tmpvar_55 = (glstate_matrix_mvp * tmpvar_16);
  highp vec4 o_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (tmpvar_55 * 0.5);
  highp vec2 tmpvar_58;
  tmpvar_58.x = tmpvar_57.x;
  tmpvar_58.y = (tmpvar_57.y * _ProjectionParams.x);
  o_56.xy = (tmpvar_58 + tmpvar_57.w);
  o_56.zw = tmpvar_55.zw;
  highp vec3 tmpvar_59;
  tmpvar_59 = o_56.xyw;
  tmpvar_9 = tmpvar_59;
  highp vec2 tmpvar_60;
  tmpvar_60 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_60;
  tmpvar_4 = tmpvar_6;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_64;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = worldNormal_2;
  mediump vec4 normal_66;
  normal_66 = tmpvar_65;
  mediump vec3 x2_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = (normal_66.xyzz * normal_66.yzzx);
  x2_67.x = dot (unity_SHBr, tmpvar_68);
  x2_67.y = dot (unity_SHBg, tmpvar_68);
  x2_67.z = dot (unity_SHBb, tmpvar_68);
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_16).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD7 = tmpvar_5;
  xlv_TEXCOORD8 = (x2_67 + (unity_SHC.xyz * (
    (normal_66.x * normal_66.x)
   - 
    (normal_66.y * normal_66.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  mediump vec4 blendColor_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_7.x = tmpvar_8.x;
  mediump float tmpvar_9;
  tmpvar_9 = fract(tmpvar_8.y);
  highp float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * 0.0625) + unity_LODFade.y);
  projUV_7.y = tmpvar_10;
  lowp float x_11;
  x_11 = (texture (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_5 = tmpvar_13;
  diffuseColor_6.xyz = mix (blendColor_5.xyz, diffuseColor_6.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_6.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_6.xyz = clamp ((tmpvar_14 * (
    ((max (diffuseColor_6.x, max (diffuseColor_6.y, diffuseColor_6.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_15;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_2;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_16;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  mediump vec4 outDiffuseOcclusion_19;
  mediump vec4 outNormal_20;
  mediump vec4 emission_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_4;
  outDiffuseOcclusion_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  emission_21 = tmpvar_24;
  emission_21.xyz = (emission_21.xyz + (tmpvar_4 * (xlv_TEXCOORD8 + x1_18)));
  outDiffuse_1.xyz = outDiffuseOcclusion_19.xyz;
  outDiffuse_1.w = 1.0;
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_20;
  _glesFragData[3] = emission_21;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD8;
varying mediump vec3 xlv_TEXCOORD9;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_11;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.xy = _glesMultiTexCoord2.zw;
  tmpvar_16.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = tmpvar_1.xyz;
  FinalPosition_20 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = (_WindQuality * _WindEnabled);
  if ((tmpvar_22 > 0.0)) {
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_23 * _ST_WindVector.xyz));
    highp mat3 tmpvar_24;
    tmpvar_24[0] = _World2Object[0].xyz;
    tmpvar_24[1] = _World2Object[1].xyz;
    tmpvar_24[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_24 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_22 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    if ((tmpvar_22 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = tmpvar_21;
      highp float fAdherenceScale_27;
      highp vec3 tmpvar_28;
      tmpvar_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_29;
      tmpvar_29 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (tmpvar_29 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((tmpvar_29 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_29 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((tmpvar_29 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        (mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_30.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (_glesVertex.xyz + ((tmpvar_28 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((tmpvar_29 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((
        ((tmpvar_38.x * tmpvar_38.y) * tmpvar_38.x)
       * tmpvar_38.y) * _ST_WindTurbulences.x));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_18 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp vec3 tmpvar_41;
      tmpvar_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_42;
      tmpvar_42 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_43;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (tmpvar_42 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((tmpvar_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      vPos_40 = (vPos_25 + ((tmpvar_41 * 
        (((mix (
          mix (tmpvar_48, fTarget_45, fAmount_44)
        , fTarget_45, fAmount_44) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_20 = vPos_25;
  };
  if ((tmpvar_22 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_20;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_53.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    vPos_49.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_54.x + (tmpvar_54.y * tmpvar_54.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_50)));
    vPos_49 = (normalize(vPos_49) * fLength_51);
    FinalPosition_20 = vPos_49;
  };
  tmpvar_17.xyz = FinalPosition_20;
  highp vec4 tmpvar_56;
  tmpvar_56 = (glstate_matrix_mvp * tmpvar_17);
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (tmpvar_56 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = tmpvar_56.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  tmpvar_10 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_61;
  tmpvar_5 = tmpvar_7;
  highp vec3 tmpvar_62;
  tmpvar_62 = (_Object2World * tmpvar_17).xyz;
  highp vec4 v_63;
  v_63.x = _World2Object[0].x;
  v_63.y = _World2Object[1].x;
  v_63.z = _World2Object[2].x;
  v_63.w = _World2Object[3].x;
  highp vec4 v_64;
  v_64.x = _World2Object[0].y;
  v_64.y = _World2Object[1].y;
  v_64.z = _World2Object[2].y;
  v_64.w = _World2Object[3].y;
  highp vec4 v_65;
  v_65.x = _World2Object[0].z;
  v_65.y = _World2Object[1].z;
  v_65.z = _World2Object[2].z;
  v_65.w = _World2Object[3].z;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(((
    (v_63.xyz * _glesNormal.x)
   + 
    (v_64.xyz * _glesNormal.y)
  ) + (v_65.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_66;
  highp mat3 tmpvar_67;
  tmpvar_67[0] = _Object2World[0].xyz;
  tmpvar_67[1] = _Object2World[1].xyz;
  tmpvar_67[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((tmpvar_67 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_68;
  lowp vec3 tmpvar_69;
  tmpvar_69 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_70;
  tmpvar_70 = (tmpvar_69 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_3.x;
  tmpvar_71.y = worldBinormal_2.x;
  tmpvar_71.z = worldNormal_4.x;
  tmpvar_71.w = tmpvar_62.x;
  highp vec4 tmpvar_72;
  tmpvar_72.x = worldTangent_3.y;
  tmpvar_72.y = worldBinormal_2.y;
  tmpvar_72.z = worldNormal_4.y;
  tmpvar_72.w = tmpvar_62.y;
  highp vec4 tmpvar_73;
  tmpvar_73.x = worldTangent_3.z;
  tmpvar_73.y = worldBinormal_2.z;
  tmpvar_73.z = worldNormal_4.z;
  tmpvar_73.w = tmpvar_62.z;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_74;
  tmpvar_74.w = 1.0;
  tmpvar_74.xyz = worldNormal_4;
  mediump vec4 normal_75;
  normal_75 = tmpvar_74;
  mediump vec3 x2_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (normal_75.xyzz * normal_75.yzzx);
  x2_76.x = dot (unity_SHBr, tmpvar_77);
  x2_76.y = dot (unity_SHBg, tmpvar_77);
  x2_76.z = dot (unity_SHBb, tmpvar_77);
  gl_Position = (glstate_matrix_mvp * tmpvar_17);
  xlv_TEXCOORD0 = tmpvar_71;
  xlv_TEXCOORD1 = tmpvar_72;
  xlv_TEXCOORD2 = tmpvar_73;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_10;
  xlv_TEXCOORD8 = tmpvar_6;
  xlv_TEXCOORD9 = (x2_76 + (unity_SHC.xyz * (
    (normal_75.x * normal_75.x)
   - 
    (normal_75.y * normal_75.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD9;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 worldN_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  mediump vec4 blendColor_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_7 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  blendColor_6 = tmpvar_14;
  diffuseColor_7.xyz = mix (blendColor_6.xyz, diffuseColor_7.xyz, vec3(clamp (xlv_TEXCOORD5.z, 0.0, 1.0)));
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_3.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_3.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_3.z = tmpvar_20;
  mediump vec3 normalWorld_21;
  normalWorld_21 = worldN_3;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_21;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  mediump vec4 outDiffuseOcclusion_24;
  mediump vec4 outNormal_25;
  mediump vec4 emission_26;
  lowp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = tmpvar_5;
  outDiffuseOcclusion_24 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = ((worldN_3 * 0.5) + 0.5);
  outNormal_25 = tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = vec3(0.0, 0.0, 0.0);
  emission_26 = tmpvar_29;
  emission_26.xyz = (emission_26.xyz + (tmpvar_5 * (xlv_TEXCOORD9 + x1_23)));
  outDiffuse_1.xyz = outDiffuseOcclusion_24.xyz;
  outEmission_2.w = emission_26.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_26.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_25;
  gl_FragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
in vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
out mediump vec3 xlv_TEXCOORD9;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_11;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.xy = _glesMultiTexCoord2.zw;
  tmpvar_16.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = tmpvar_1.xyz;
  FinalPosition_20 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = (_WindQuality * _WindEnabled);
  if ((tmpvar_22 > 0.0)) {
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_23 * _ST_WindVector.xyz));
    highp mat3 tmpvar_24;
    tmpvar_24[0] = _World2Object[0].xyz;
    tmpvar_24[1] = _World2Object[1].xyz;
    tmpvar_24[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_24 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_22 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    if ((tmpvar_22 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = tmpvar_21;
      highp float fAdherenceScale_27;
      highp vec3 tmpvar_28;
      tmpvar_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_29;
      tmpvar_29 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (tmpvar_29 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((tmpvar_29 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_29 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((tmpvar_29 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        (mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_30.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (_glesVertex.xyz + ((tmpvar_28 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((tmpvar_29 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((
        ((tmpvar_38.x * tmpvar_38.y) * tmpvar_38.x)
       * tmpvar_38.y) * _ST_WindTurbulences.x));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_18 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp vec3 tmpvar_41;
      tmpvar_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_42;
      tmpvar_42 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_43;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (tmpvar_42 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((tmpvar_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      vPos_40 = (vPos_25 + ((tmpvar_41 * 
        (((mix (
          mix (tmpvar_48, fTarget_45, fAmount_44)
        , fTarget_45, fAmount_44) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_20 = vPos_25;
  };
  if ((tmpvar_22 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_20;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_53.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    vPos_49.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_54.x + (tmpvar_54.y * tmpvar_54.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_50)));
    vPos_49 = (normalize(vPos_49) * fLength_51);
    FinalPosition_20 = vPos_49;
  };
  tmpvar_17.xyz = FinalPosition_20;
  highp vec4 tmpvar_56;
  tmpvar_56 = (glstate_matrix_mvp * tmpvar_17);
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (tmpvar_56 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = tmpvar_56.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  tmpvar_10 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_61;
  tmpvar_5 = tmpvar_7;
  highp vec3 tmpvar_62;
  tmpvar_62 = (_Object2World * tmpvar_17).xyz;
  highp vec4 v_63;
  v_63.x = _World2Object[0].x;
  v_63.y = _World2Object[1].x;
  v_63.z = _World2Object[2].x;
  v_63.w = _World2Object[3].x;
  highp vec4 v_64;
  v_64.x = _World2Object[0].y;
  v_64.y = _World2Object[1].y;
  v_64.z = _World2Object[2].y;
  v_64.w = _World2Object[3].y;
  highp vec4 v_65;
  v_65.x = _World2Object[0].z;
  v_65.y = _World2Object[1].z;
  v_65.z = _World2Object[2].z;
  v_65.w = _World2Object[3].z;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(((
    (v_63.xyz * _glesNormal.x)
   + 
    (v_64.xyz * _glesNormal.y)
  ) + (v_65.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_66;
  highp mat3 tmpvar_67;
  tmpvar_67[0] = _Object2World[0].xyz;
  tmpvar_67[1] = _Object2World[1].xyz;
  tmpvar_67[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((tmpvar_67 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_68;
  lowp vec3 tmpvar_69;
  tmpvar_69 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_70;
  tmpvar_70 = (tmpvar_69 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_3.x;
  tmpvar_71.y = worldBinormal_2.x;
  tmpvar_71.z = worldNormal_4.x;
  tmpvar_71.w = tmpvar_62.x;
  highp vec4 tmpvar_72;
  tmpvar_72.x = worldTangent_3.y;
  tmpvar_72.y = worldBinormal_2.y;
  tmpvar_72.z = worldNormal_4.y;
  tmpvar_72.w = tmpvar_62.y;
  highp vec4 tmpvar_73;
  tmpvar_73.x = worldTangent_3.z;
  tmpvar_73.y = worldBinormal_2.z;
  tmpvar_73.z = worldNormal_4.z;
  tmpvar_73.w = tmpvar_62.z;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_74;
  tmpvar_74.w = 1.0;
  tmpvar_74.xyz = worldNormal_4;
  mediump vec4 normal_75;
  normal_75 = tmpvar_74;
  mediump vec3 x2_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (normal_75.xyzz * normal_75.yzzx);
  x2_76.x = dot (unity_SHBr, tmpvar_77);
  x2_76.y = dot (unity_SHBg, tmpvar_77);
  x2_76.z = dot (unity_SHBb, tmpvar_77);
  gl_Position = (glstate_matrix_mvp * tmpvar_17);
  xlv_TEXCOORD0 = tmpvar_71;
  xlv_TEXCOORD1 = tmpvar_72;
  xlv_TEXCOORD2 = tmpvar_73;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_10;
  xlv_TEXCOORD8 = tmpvar_6;
  xlv_TEXCOORD9 = (x2_76 + (unity_SHC.xyz * (
    (normal_75.x * normal_75.x)
   - 
    (normal_75.y * normal_75.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
in mediump vec3 xlv_TEXCOORD9;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 worldN_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  mediump vec4 blendColor_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_7 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture (_MainTex, xlv_TEXCOORD5.xy);
  blendColor_6 = tmpvar_14;
  diffuseColor_7.xyz = mix (blendColor_6.xyz, diffuseColor_7.xyz, vec3(clamp (xlv_TEXCOORD5.z, 0.0, 1.0)));
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_3.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_3.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_3.z = tmpvar_20;
  mediump vec3 normalWorld_21;
  normalWorld_21 = worldN_3;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_21;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  mediump vec4 outDiffuseOcclusion_24;
  mediump vec4 outNormal_25;
  mediump vec4 emission_26;
  lowp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = tmpvar_5;
  outDiffuseOcclusion_24 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = ((worldN_3 * 0.5) + 0.5);
  outNormal_25 = tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = vec3(0.0, 0.0, 0.0);
  emission_26 = tmpvar_29;
  emission_26.xyz = (emission_26.xyz + (tmpvar_5 * (xlv_TEXCOORD9 + x1_23)));
  outDiffuse_1.xyz = outDiffuseOcclusion_24.xyz;
  outEmission_2.w = emission_26.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_26.xyz));
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_25;
  _glesFragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD8;
varying mediump vec3 xlv_TEXCOORD9;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_11;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.xy = _glesMultiTexCoord2.zw;
  tmpvar_16.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = tmpvar_1.xyz;
  FinalPosition_20 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = (_WindQuality * _WindEnabled);
  if ((tmpvar_22 > 0.0)) {
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_23 * _ST_WindVector.xyz));
    highp mat3 tmpvar_24;
    tmpvar_24[0] = _World2Object[0].xyz;
    tmpvar_24[1] = _World2Object[1].xyz;
    tmpvar_24[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_24 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_22 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    if ((tmpvar_22 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = tmpvar_21;
      highp float fAdherenceScale_27;
      highp vec3 tmpvar_28;
      tmpvar_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_29;
      tmpvar_29 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (tmpvar_29 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((tmpvar_29 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_29 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((tmpvar_29 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        (mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_30.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (_glesVertex.xyz + ((tmpvar_28 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((tmpvar_29 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((
        ((tmpvar_38.x * tmpvar_38.y) * tmpvar_38.x)
       * tmpvar_38.y) * _ST_WindTurbulences.x));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_18 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp vec3 tmpvar_41;
      tmpvar_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_42;
      tmpvar_42 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_43;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (tmpvar_42 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((tmpvar_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      vPos_40 = (vPos_25 + ((tmpvar_41 * 
        (((mix (
          mix (tmpvar_48, fTarget_45, fAmount_44)
        , fTarget_45, fAmount_44) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_20 = vPos_25;
  };
  if ((tmpvar_22 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_20;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_53.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    vPos_49.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_54.x + (tmpvar_54.y * tmpvar_54.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_50)));
    vPos_49 = (normalize(vPos_49) * fLength_51);
    FinalPosition_20 = vPos_49;
  };
  tmpvar_17.xyz = FinalPosition_20;
  highp vec4 tmpvar_56;
  tmpvar_56 = (glstate_matrix_mvp * tmpvar_17);
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (tmpvar_56 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = tmpvar_56.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  tmpvar_10 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_61;
  tmpvar_5 = tmpvar_7;
  highp vec3 tmpvar_62;
  tmpvar_62 = (_Object2World * tmpvar_17).xyz;
  highp vec4 v_63;
  v_63.x = _World2Object[0].x;
  v_63.y = _World2Object[1].x;
  v_63.z = _World2Object[2].x;
  v_63.w = _World2Object[3].x;
  highp vec4 v_64;
  v_64.x = _World2Object[0].y;
  v_64.y = _World2Object[1].y;
  v_64.z = _World2Object[2].y;
  v_64.w = _World2Object[3].y;
  highp vec4 v_65;
  v_65.x = _World2Object[0].z;
  v_65.y = _World2Object[1].z;
  v_65.z = _World2Object[2].z;
  v_65.w = _World2Object[3].z;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(((
    (v_63.xyz * _glesNormal.x)
   + 
    (v_64.xyz * _glesNormal.y)
  ) + (v_65.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_66;
  highp mat3 tmpvar_67;
  tmpvar_67[0] = _Object2World[0].xyz;
  tmpvar_67[1] = _Object2World[1].xyz;
  tmpvar_67[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((tmpvar_67 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_68;
  lowp vec3 tmpvar_69;
  tmpvar_69 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_70;
  tmpvar_70 = (tmpvar_69 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_3.x;
  tmpvar_71.y = worldBinormal_2.x;
  tmpvar_71.z = worldNormal_4.x;
  tmpvar_71.w = tmpvar_62.x;
  highp vec4 tmpvar_72;
  tmpvar_72.x = worldTangent_3.y;
  tmpvar_72.y = worldBinormal_2.y;
  tmpvar_72.z = worldNormal_4.y;
  tmpvar_72.w = tmpvar_62.y;
  highp vec4 tmpvar_73;
  tmpvar_73.x = worldTangent_3.z;
  tmpvar_73.y = worldBinormal_2.z;
  tmpvar_73.z = worldNormal_4.z;
  tmpvar_73.w = tmpvar_62.z;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_74;
  tmpvar_74.w = 1.0;
  tmpvar_74.xyz = worldNormal_4;
  mediump vec4 normal_75;
  normal_75 = tmpvar_74;
  mediump vec3 x2_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (normal_75.xyzz * normal_75.yzzx);
  x2_76.x = dot (unity_SHBr, tmpvar_77);
  x2_76.y = dot (unity_SHBg, tmpvar_77);
  x2_76.z = dot (unity_SHBb, tmpvar_77);
  gl_Position = (glstate_matrix_mvp * tmpvar_17);
  xlv_TEXCOORD0 = tmpvar_71;
  xlv_TEXCOORD1 = tmpvar_72;
  xlv_TEXCOORD2 = tmpvar_73;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_10;
  xlv_TEXCOORD8 = tmpvar_6;
  xlv_TEXCOORD9 = (x2_76 + (unity_SHC.xyz * (
    (normal_75.x * normal_75.x)
   - 
    (normal_75.y * normal_75.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD9;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 worldN_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_4;
  mediump vec4 blendColor_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_7.x = tmpvar_8.x;
  mediump float tmpvar_9;
  tmpvar_9 = fract(tmpvar_8.y);
  highp float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * 0.0625) + unity_LODFade.y);
  projUV_7.y = tmpvar_10;
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_6 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  blendColor_5 = tmpvar_13;
  diffuseColor_6.xyz = mix (blendColor_5.xyz, diffuseColor_6.xyz, vec3(clamp (xlv_TEXCOORD5.z, 0.0, 1.0)));
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_6.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_6.xyz = clamp ((tmpvar_14 * (
    ((max (diffuseColor_6.x, max (diffuseColor_6.y, diffuseColor_6.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_15;
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_2.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_2.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_2.z = tmpvar_19;
  mediump vec3 normalWorld_20;
  normalWorld_20 = worldN_2;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_20;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  mediump vec4 outDiffuseOcclusion_23;
  mediump vec4 outNormal_24;
  mediump vec4 emission_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = tmpvar_4;
  outDiffuseOcclusion_23 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = ((worldN_2 * 0.5) + 0.5);
  outNormal_24 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = vec3(0.0, 0.0, 0.0);
  emission_25 = tmpvar_28;
  emission_25.xyz = (emission_25.xyz + (tmpvar_4 * (xlv_TEXCOORD9 + x1_22)));
  outDiffuse_1.xyz = outDiffuseOcclusion_23.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_24;
  gl_FragData[3] = emission_25;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
in vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
out mediump vec3 xlv_TEXCOORD9;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_11;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.xy = _glesMultiTexCoord2.zw;
  tmpvar_16.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = tmpvar_1.xyz;
  FinalPosition_20 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = (_WindQuality * _WindEnabled);
  if ((tmpvar_22 > 0.0)) {
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_23 * _ST_WindVector.xyz));
    highp mat3 tmpvar_24;
    tmpvar_24[0] = _World2Object[0].xyz;
    tmpvar_24[1] = _World2Object[1].xyz;
    tmpvar_24[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_24 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_22 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    if ((tmpvar_22 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = tmpvar_21;
      highp float fAdherenceScale_27;
      highp vec3 tmpvar_28;
      tmpvar_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_29;
      tmpvar_29 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (tmpvar_29 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((tmpvar_29 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_29 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((tmpvar_29 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        (mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_30.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (_glesVertex.xyz + ((tmpvar_28 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((tmpvar_29 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((
        ((tmpvar_38.x * tmpvar_38.y) * tmpvar_38.x)
       * tmpvar_38.y) * _ST_WindTurbulences.x));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_18 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp vec3 tmpvar_41;
      tmpvar_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_42;
      tmpvar_42 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_43;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (tmpvar_42 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((tmpvar_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      vPos_40 = (vPos_25 + ((tmpvar_41 * 
        (((mix (
          mix (tmpvar_48, fTarget_45, fAmount_44)
        , fTarget_45, fAmount_44) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_20 = vPos_25;
  };
  if ((tmpvar_22 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_20;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_53.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    vPos_49.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_54.x + (tmpvar_54.y * tmpvar_54.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_50)));
    vPos_49 = (normalize(vPos_49) * fLength_51);
    FinalPosition_20 = vPos_49;
  };
  tmpvar_17.xyz = FinalPosition_20;
  highp vec4 tmpvar_56;
  tmpvar_56 = (glstate_matrix_mvp * tmpvar_17);
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (tmpvar_56 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = tmpvar_56.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  tmpvar_10 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_61;
  tmpvar_5 = tmpvar_7;
  highp vec3 tmpvar_62;
  tmpvar_62 = (_Object2World * tmpvar_17).xyz;
  highp vec4 v_63;
  v_63.x = _World2Object[0].x;
  v_63.y = _World2Object[1].x;
  v_63.z = _World2Object[2].x;
  v_63.w = _World2Object[3].x;
  highp vec4 v_64;
  v_64.x = _World2Object[0].y;
  v_64.y = _World2Object[1].y;
  v_64.z = _World2Object[2].y;
  v_64.w = _World2Object[3].y;
  highp vec4 v_65;
  v_65.x = _World2Object[0].z;
  v_65.y = _World2Object[1].z;
  v_65.z = _World2Object[2].z;
  v_65.w = _World2Object[3].z;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(((
    (v_63.xyz * _glesNormal.x)
   + 
    (v_64.xyz * _glesNormal.y)
  ) + (v_65.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_66;
  highp mat3 tmpvar_67;
  tmpvar_67[0] = _Object2World[0].xyz;
  tmpvar_67[1] = _Object2World[1].xyz;
  tmpvar_67[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((tmpvar_67 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_68;
  lowp vec3 tmpvar_69;
  tmpvar_69 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_70;
  tmpvar_70 = (tmpvar_69 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_3.x;
  tmpvar_71.y = worldBinormal_2.x;
  tmpvar_71.z = worldNormal_4.x;
  tmpvar_71.w = tmpvar_62.x;
  highp vec4 tmpvar_72;
  tmpvar_72.x = worldTangent_3.y;
  tmpvar_72.y = worldBinormal_2.y;
  tmpvar_72.z = worldNormal_4.y;
  tmpvar_72.w = tmpvar_62.y;
  highp vec4 tmpvar_73;
  tmpvar_73.x = worldTangent_3.z;
  tmpvar_73.y = worldBinormal_2.z;
  tmpvar_73.z = worldNormal_4.z;
  tmpvar_73.w = tmpvar_62.z;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_74;
  tmpvar_74.w = 1.0;
  tmpvar_74.xyz = worldNormal_4;
  mediump vec4 normal_75;
  normal_75 = tmpvar_74;
  mediump vec3 x2_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (normal_75.xyzz * normal_75.yzzx);
  x2_76.x = dot (unity_SHBr, tmpvar_77);
  x2_76.y = dot (unity_SHBg, tmpvar_77);
  x2_76.z = dot (unity_SHBb, tmpvar_77);
  gl_Position = (glstate_matrix_mvp * tmpvar_17);
  xlv_TEXCOORD0 = tmpvar_71;
  xlv_TEXCOORD1 = tmpvar_72;
  xlv_TEXCOORD2 = tmpvar_73;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_10;
  xlv_TEXCOORD8 = tmpvar_6;
  xlv_TEXCOORD9 = (x2_76 + (unity_SHC.xyz * (
    (normal_75.x * normal_75.x)
   - 
    (normal_75.y * normal_75.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
in mediump vec3 xlv_TEXCOORD9;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 worldN_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_4;
  mediump vec4 blendColor_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_7.x = tmpvar_8.x;
  mediump float tmpvar_9;
  tmpvar_9 = fract(tmpvar_8.y);
  highp float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * 0.0625) + unity_LODFade.y);
  projUV_7.y = tmpvar_10;
  lowp float x_11;
  x_11 = (texture (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_6 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD5.xy);
  blendColor_5 = tmpvar_13;
  diffuseColor_6.xyz = mix (blendColor_5.xyz, diffuseColor_6.xyz, vec3(clamp (xlv_TEXCOORD5.z, 0.0, 1.0)));
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_6.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_6.xyz = clamp ((tmpvar_14 * (
    ((max (diffuseColor_6.x, max (diffuseColor_6.y, diffuseColor_6.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_15;
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_2.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_2.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_2.z = tmpvar_19;
  mediump vec3 normalWorld_20;
  normalWorld_20 = worldN_2;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_20;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  mediump vec4 outDiffuseOcclusion_23;
  mediump vec4 outNormal_24;
  mediump vec4 emission_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = tmpvar_4;
  outDiffuseOcclusion_23 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = ((worldN_2 * 0.5) + 0.5);
  outNormal_24 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = vec3(0.0, 0.0, 0.0);
  emission_25 = tmpvar_28;
  emission_25.xyz = (emission_25.xyz + (tmpvar_4 * (xlv_TEXCOORD9 + x1_22)));
  outDiffuse_1.xyz = outDiffuseOcclusion_23.xyz;
  outDiffuse_1.w = 1.0;
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_24;
  _glesFragData[3] = emission_25;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_17;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_13 = tmpvar_2;
    FinalPosition_16 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_16;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_16;
      highp float fAdherenceScale_28;
      highp vec3 tmpvar_29;
      tmpvar_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_30;
      tmpvar_30 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (tmpvar_30 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((tmpvar_30 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_30 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((tmpvar_30 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        (mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_31.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_16 + ((tmpvar_29 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((tmpvar_30 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((
        ((tmpvar_39.x * tmpvar_39.y) * tmpvar_39.x)
       * tmpvar_39.y) * _ST_WindTurbulences.x));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_14 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp vec3 tmpvar_42;
      tmpvar_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_43;
      tmpvar_43 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_44;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (tmpvar_43 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((tmpvar_43 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_43 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      vPos_41 = (vPos_26 + ((tmpvar_42 * 
        (((mix (
          mix (tmpvar_49, fTarget_46, fAmount_45)
        , fTarget_46, fAmount_45) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_16 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_16;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_54.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    vPos_50.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_55.x + (tmpvar_55.y * tmpvar_55.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_51)));
    vPos_50 = (normalize(vPos_50) * fLength_52);
    FinalPosition_16 = vPos_50;
  };
  tmpvar_12.xyz = FinalPosition_16;
  highp vec4 tmpvar_57;
  tmpvar_57 = (glstate_matrix_mvp * tmpvar_12);
  highp vec4 o_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (tmpvar_57 * 0.5);
  highp vec2 tmpvar_60;
  tmpvar_60.x = tmpvar_59.x;
  tmpvar_60.y = (tmpvar_59.y * _ProjectionParams.x);
  o_58.xy = (tmpvar_60 + tmpvar_59.w);
  o_58.zw = tmpvar_57.zw;
  highp vec3 tmpvar_61;
  tmpvar_61 = o_58.xyw;
  tmpvar_9 = tmpvar_61;
  highp vec2 tmpvar_62;
  tmpvar_62 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_62;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_63;
  v_63.x = _World2Object[0].x;
  v_63.y = _World2Object[1].x;
  v_63.z = _World2Object[2].x;
  v_63.w = _World2Object[3].x;
  highp vec4 v_64;
  v_64.x = _World2Object[0].y;
  v_64.y = _World2Object[1].y;
  v_64.z = _World2Object[2].y;
  v_64.w = _World2Object[3].y;
  highp vec4 v_65;
  v_65.x = _World2Object[0].z;
  v_65.y = _World2Object[1].z;
  v_65.z = _World2Object[2].z;
  v_65.w = _World2Object[3].z;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(((
    (v_63.xyz * tmpvar_13.x)
   + 
    (v_64.xyz * tmpvar_13.y)
  ) + (v_65.xyz * tmpvar_13.z)));
  worldNormal_3 = tmpvar_66;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_67;
  tmpvar_67.w = 1.0;
  tmpvar_67.xyz = worldNormal_3;
  mediump vec4 normal_68;
  normal_68 = tmpvar_67;
  mediump vec3 x2_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (normal_68.xyzz * normal_68.yzzx);
  x2_69.x = dot (unity_SHBr, tmpvar_70);
  x2_69.y = dot (unity_SHBg, tmpvar_70);
  x2_69.z = dot (unity_SHBb, tmpvar_70);
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_69 + (unity_SHC.xyz * (
    (normal_68.x * normal_68.x)
   - 
    (normal_68.y * normal_68.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_16;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_3;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_17;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  mediump vec4 outDiffuseOcclusion_20;
  mediump vec4 outNormal_21;
  mediump vec4 emission_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = tmpvar_5;
  outDiffuseOcclusion_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  emission_22 = tmpvar_25;
  emission_22.xyz = (emission_22.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_19)));
  outDiffuse_1.xyz = outDiffuseOcclusion_20.xyz;
  outEmission_2.w = emission_22.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_22.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_21;
  gl_FragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD6;
out mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_17;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_13 = tmpvar_2;
    FinalPosition_16 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_16;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_16;
      highp float fAdherenceScale_28;
      highp vec3 tmpvar_29;
      tmpvar_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_30;
      tmpvar_30 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (tmpvar_30 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((tmpvar_30 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_30 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((tmpvar_30 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        (mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_31.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_16 + ((tmpvar_29 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((tmpvar_30 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((
        ((tmpvar_39.x * tmpvar_39.y) * tmpvar_39.x)
       * tmpvar_39.y) * _ST_WindTurbulences.x));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_14 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp vec3 tmpvar_42;
      tmpvar_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_43;
      tmpvar_43 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_44;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (tmpvar_43 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((tmpvar_43 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_43 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      vPos_41 = (vPos_26 + ((tmpvar_42 * 
        (((mix (
          mix (tmpvar_49, fTarget_46, fAmount_45)
        , fTarget_46, fAmount_45) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_16 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_16;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_54.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    vPos_50.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_55.x + (tmpvar_55.y * tmpvar_55.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_51)));
    vPos_50 = (normalize(vPos_50) * fLength_52);
    FinalPosition_16 = vPos_50;
  };
  tmpvar_12.xyz = FinalPosition_16;
  highp vec4 tmpvar_57;
  tmpvar_57 = (glstate_matrix_mvp * tmpvar_12);
  highp vec4 o_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (tmpvar_57 * 0.5);
  highp vec2 tmpvar_60;
  tmpvar_60.x = tmpvar_59.x;
  tmpvar_60.y = (tmpvar_59.y * _ProjectionParams.x);
  o_58.xy = (tmpvar_60 + tmpvar_59.w);
  o_58.zw = tmpvar_57.zw;
  highp vec3 tmpvar_61;
  tmpvar_61 = o_58.xyw;
  tmpvar_9 = tmpvar_61;
  highp vec2 tmpvar_62;
  tmpvar_62 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_62;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_63;
  v_63.x = _World2Object[0].x;
  v_63.y = _World2Object[1].x;
  v_63.z = _World2Object[2].x;
  v_63.w = _World2Object[3].x;
  highp vec4 v_64;
  v_64.x = _World2Object[0].y;
  v_64.y = _World2Object[1].y;
  v_64.z = _World2Object[2].y;
  v_64.w = _World2Object[3].y;
  highp vec4 v_65;
  v_65.x = _World2Object[0].z;
  v_65.y = _World2Object[1].z;
  v_65.z = _World2Object[2].z;
  v_65.w = _World2Object[3].z;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(((
    (v_63.xyz * tmpvar_13.x)
   + 
    (v_64.xyz * tmpvar_13.y)
  ) + (v_65.xyz * tmpvar_13.z)));
  worldNormal_3 = tmpvar_66;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_67;
  tmpvar_67.w = 1.0;
  tmpvar_67.xyz = worldNormal_3;
  mediump vec4 normal_68;
  normal_68 = tmpvar_67;
  mediump vec3 x2_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (normal_68.xyzz * normal_68.yzzx);
  x2_69.x = dot (unity_SHBr, tmpvar_70);
  x2_69.y = dot (unity_SHBg, tmpvar_70);
  x2_69.z = dot (unity_SHBb, tmpvar_70);
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_69 + (unity_SHC.xyz * (
    (normal_68.x * normal_68.x)
   - 
    (normal_68.y * normal_68.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_16;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_3;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_17;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  mediump vec4 outDiffuseOcclusion_20;
  mediump vec4 outNormal_21;
  mediump vec4 emission_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = tmpvar_5;
  outDiffuseOcclusion_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  emission_22 = tmpvar_25;
  emission_22.xyz = (emission_22.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_19)));
  outDiffuse_1.xyz = outDiffuseOcclusion_20.xyz;
  outEmission_2.w = emission_22.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_22.xyz));
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_21;
  _glesFragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_17;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_13 = tmpvar_2;
    FinalPosition_16 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_16;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_16;
      highp float fAdherenceScale_28;
      highp vec3 tmpvar_29;
      tmpvar_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_30;
      tmpvar_30 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (tmpvar_30 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((tmpvar_30 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_30 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((tmpvar_30 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        (mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_31.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_16 + ((tmpvar_29 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((tmpvar_30 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((
        ((tmpvar_39.x * tmpvar_39.y) * tmpvar_39.x)
       * tmpvar_39.y) * _ST_WindTurbulences.x));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_14 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp vec3 tmpvar_42;
      tmpvar_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_43;
      tmpvar_43 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_44;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (tmpvar_43 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((tmpvar_43 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_43 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      vPos_41 = (vPos_26 + ((tmpvar_42 * 
        (((mix (
          mix (tmpvar_49, fTarget_46, fAmount_45)
        , fTarget_46, fAmount_45) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_16 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_16;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_54.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    vPos_50.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_55.x + (tmpvar_55.y * tmpvar_55.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_51)));
    vPos_50 = (normalize(vPos_50) * fLength_52);
    FinalPosition_16 = vPos_50;
  };
  tmpvar_12.xyz = FinalPosition_16;
  highp vec4 tmpvar_57;
  tmpvar_57 = (glstate_matrix_mvp * tmpvar_12);
  highp vec4 o_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (tmpvar_57 * 0.5);
  highp vec2 tmpvar_60;
  tmpvar_60.x = tmpvar_59.x;
  tmpvar_60.y = (tmpvar_59.y * _ProjectionParams.x);
  o_58.xy = (tmpvar_60 + tmpvar_59.w);
  o_58.zw = tmpvar_57.zw;
  highp vec3 tmpvar_61;
  tmpvar_61 = o_58.xyw;
  tmpvar_9 = tmpvar_61;
  highp vec2 tmpvar_62;
  tmpvar_62 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_62;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_63;
  v_63.x = _World2Object[0].x;
  v_63.y = _World2Object[1].x;
  v_63.z = _World2Object[2].x;
  v_63.w = _World2Object[3].x;
  highp vec4 v_64;
  v_64.x = _World2Object[0].y;
  v_64.y = _World2Object[1].y;
  v_64.z = _World2Object[2].y;
  v_64.w = _World2Object[3].y;
  highp vec4 v_65;
  v_65.x = _World2Object[0].z;
  v_65.y = _World2Object[1].z;
  v_65.z = _World2Object[2].z;
  v_65.w = _World2Object[3].z;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(((
    (v_63.xyz * tmpvar_13.x)
   + 
    (v_64.xyz * tmpvar_13.y)
  ) + (v_65.xyz * tmpvar_13.z)));
  worldNormal_3 = tmpvar_66;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_67;
  tmpvar_67.w = 1.0;
  tmpvar_67.xyz = worldNormal_3;
  mediump vec4 normal_68;
  normal_68 = tmpvar_67;
  mediump vec3 x2_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (normal_68.xyzz * normal_68.yzzx);
  x2_69.x = dot (unity_SHBr, tmpvar_70);
  x2_69.y = dot (unity_SHBg, tmpvar_70);
  x2_69.z = dot (unity_SHBb, tmpvar_70);
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_69 + (unity_SHC.xyz * (
    (normal_68.x * normal_68.x)
   - 
    (normal_68.y * normal_68.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_7.x = tmpvar_8.x;
  mediump float tmpvar_9;
  tmpvar_9 = fract(tmpvar_8.y);
  highp float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * 0.0625) + unity_LODFade.y);
  projUV_7.y = tmpvar_10;
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_6.w * _Color.w);
  tmpvar_5 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_5 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_15;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_2;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_16;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  mediump vec4 outDiffuseOcclusion_19;
  mediump vec4 outNormal_20;
  mediump vec4 emission_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_4;
  outDiffuseOcclusion_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  emission_21 = tmpvar_24;
  emission_21.xyz = (emission_21.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_18)));
  outDiffuse_1.xyz = outDiffuseOcclusion_19.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_20;
  gl_FragData[3] = emission_21;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD6;
out mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_17;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_13 = tmpvar_2;
    FinalPosition_16 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_16;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_16;
      highp float fAdherenceScale_28;
      highp vec3 tmpvar_29;
      tmpvar_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_30;
      tmpvar_30 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (tmpvar_30 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((tmpvar_30 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_30 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((tmpvar_30 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        (mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_31.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_16 + ((tmpvar_29 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((tmpvar_30 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((
        ((tmpvar_39.x * tmpvar_39.y) * tmpvar_39.x)
       * tmpvar_39.y) * _ST_WindTurbulences.x));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_14 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp vec3 tmpvar_42;
      tmpvar_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_43;
      tmpvar_43 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_44;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (tmpvar_43 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((tmpvar_43 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_43 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      vPos_41 = (vPos_26 + ((tmpvar_42 * 
        (((mix (
          mix (tmpvar_49, fTarget_46, fAmount_45)
        , fTarget_46, fAmount_45) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_16 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_16;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_54.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    vPos_50.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_55.x + (tmpvar_55.y * tmpvar_55.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_51)));
    vPos_50 = (normalize(vPos_50) * fLength_52);
    FinalPosition_16 = vPos_50;
  };
  tmpvar_12.xyz = FinalPosition_16;
  highp vec4 tmpvar_57;
  tmpvar_57 = (glstate_matrix_mvp * tmpvar_12);
  highp vec4 o_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (tmpvar_57 * 0.5);
  highp vec2 tmpvar_60;
  tmpvar_60.x = tmpvar_59.x;
  tmpvar_60.y = (tmpvar_59.y * _ProjectionParams.x);
  o_58.xy = (tmpvar_60 + tmpvar_59.w);
  o_58.zw = tmpvar_57.zw;
  highp vec3 tmpvar_61;
  tmpvar_61 = o_58.xyw;
  tmpvar_9 = tmpvar_61;
  highp vec2 tmpvar_62;
  tmpvar_62 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_62;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_63;
  v_63.x = _World2Object[0].x;
  v_63.y = _World2Object[1].x;
  v_63.z = _World2Object[2].x;
  v_63.w = _World2Object[3].x;
  highp vec4 v_64;
  v_64.x = _World2Object[0].y;
  v_64.y = _World2Object[1].y;
  v_64.z = _World2Object[2].y;
  v_64.w = _World2Object[3].y;
  highp vec4 v_65;
  v_65.x = _World2Object[0].z;
  v_65.y = _World2Object[1].z;
  v_65.z = _World2Object[2].z;
  v_65.w = _World2Object[3].z;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(((
    (v_63.xyz * tmpvar_13.x)
   + 
    (v_64.xyz * tmpvar_13.y)
  ) + (v_65.xyz * tmpvar_13.z)));
  worldNormal_3 = tmpvar_66;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_67;
  tmpvar_67.w = 1.0;
  tmpvar_67.xyz = worldNormal_3;
  mediump vec4 normal_68;
  normal_68 = tmpvar_67;
  mediump vec3 x2_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (normal_68.xyzz * normal_68.yzzx);
  x2_69.x = dot (unity_SHBr, tmpvar_70);
  x2_69.y = dot (unity_SHBg, tmpvar_70);
  x2_69.z = dot (unity_SHBb, tmpvar_70);
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_69 + (unity_SHC.xyz * (
    (normal_68.x * normal_68.x)
   - 
    (normal_68.y * normal_68.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_7.x = tmpvar_8.x;
  mediump float tmpvar_9;
  tmpvar_9 = fract(tmpvar_8.y);
  highp float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * 0.0625) + unity_LODFade.y);
  projUV_7.y = tmpvar_10;
  lowp float x_11;
  x_11 = (texture (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_6.w * _Color.w);
  tmpvar_5 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_5 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_15;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_2;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_16;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  mediump vec4 outDiffuseOcclusion_19;
  mediump vec4 outNormal_20;
  mediump vec4 emission_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_4;
  outDiffuseOcclusion_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  emission_21 = tmpvar_24;
  emission_21.xyz = (emission_21.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_18)));
  outDiffuse_1.xyz = outDiffuseOcclusion_19.xyz;
  outDiffuse_1.w = 1.0;
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_20;
  _glesFragData[3] = emission_21;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_14;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = tmpvar_1.xyz;
  FinalPosition_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_21 == 5.0)) {
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    highp float fOffset_25;
    fOffset_25 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_25 = 0.75;
    };
    highp vec4 tmpvar_26;
    tmpvar_26.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_26.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_25);
    highp vec4 tmpvar_27;
    tmpvar_27 = abs(((
      fract((tmpvar_26 + 0.5))
     * 2.0) - 1.0));
    vPos_24 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_16 = tmpvar_2;
    FinalPosition_19 = vPos_24;
  };
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_28;
    vPos_28 = FinalPosition_19;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_29;
      vPos_29 = FinalPosition_19;
      highp float fAdherenceScale_30;
      highp vec3 tmpvar_31;
      tmpvar_31 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_32;
      tmpvar_32 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_33;
      highp float fOscillation_34;
      fOscillation_34 = 1.0;
      highp float fAmount_35;
      highp float fTarget_36;
      highp vec4 tmpvar_37;
      tmpvar_37.x = (tmpvar_32 + _glesMultiTexCoord0.w);
      tmpvar_37.y = ((tmpvar_32 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_37.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_32 + _glesMultiTexCoord0.w));
      tmpvar_37.w = ((tmpvar_32 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      vOscillations_33 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      highp float tmpvar_39;
      tmpvar_39 = (vOscillations_33.y * vOscillations_33.z);
      fTarget_36 = 1.0;
      fAmount_35 = tmpvar_39;
      if ((tmpvar_39 < 0.0)) {
        fTarget_36 = -1.0;
        fAmount_35 = -(tmpvar_39);
      };
      fOscillation_34 = (((
        (mix (mix (tmpvar_39, fTarget_36, fAmount_35), fTarget_36, fAmount_35) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_33.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_33.w * _ST_WindBranchWhip.x)));
      vPos_29 = (FinalPosition_19 + ((tmpvar_31 * fOscillation_34) * _ST_WindBranch.y));
      highp vec4 tmpvar_40;
      tmpvar_40.zw = vec2(0.0, 0.0);
      tmpvar_40.x = ((tmpvar_32 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_40.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_41;
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      tmpvar_41 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      fAdherenceScale_30 = (1.0 - ((
        ((tmpvar_41.x * tmpvar_41.y) * tmpvar_41.x)
       * tmpvar_41.y) * _ST_WindTurbulences.x));
      fAdherenceScale_30 = (fAdherenceScale_30 + ((vOscillations_33.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_29 = (vPos_29 + ((
        ((vRotatedBranchAnchor_17 - vPos_29) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_30) * _glesMultiTexCoord0.z));
      vPos_28 = vPos_29;
    } else {
      highp vec3 vPos_43;
      vPos_43 = vPos_28;
      highp vec3 tmpvar_44;
      tmpvar_44 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_45;
      tmpvar_45 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_46;
      highp float fAmount_47;
      highp float fTarget_48;
      highp vec4 tmpvar_49;
      tmpvar_49.w = 0.0;
      tmpvar_49.x = (tmpvar_45 + _glesMultiTexCoord0.w);
      tmpvar_49.y = ((tmpvar_45 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_49.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_45 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_49 + 0.5))
       * 2.0) - 1.0));
      vOscillations_46 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      highp float tmpvar_51;
      tmpvar_51 = (vOscillations_46.y * vOscillations_46.z);
      fTarget_48 = 1.0;
      fAmount_47 = tmpvar_51;
      if ((tmpvar_51 < 0.0)) {
        fTarget_48 = -1.0;
        fAmount_47 = -(tmpvar_51);
      };
      vPos_43 = (vPos_28 + ((tmpvar_44 * 
        (((mix (
          mix (tmpvar_51, fTarget_48, fAmount_47)
        , fTarget_48, fAmount_47) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_46.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_28 = vPos_43;
    };
    FinalPosition_19 = vPos_28;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_52;
    vPos_52 = FinalPosition_19;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_56.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    vPos_52.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_57.x + (tmpvar_57.y * tmpvar_57.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_53)));
    vPos_52 = (normalize(vPos_52) * fLength_54);
    FinalPosition_19 = vPos_52;
  };
  tmpvar_15.xyz = FinalPosition_19;
  highp vec4 tmpvar_59;
  tmpvar_59 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = (tmpvar_59 * 0.5);
  highp vec2 tmpvar_62;
  tmpvar_62.x = tmpvar_61.x;
  tmpvar_62.y = (tmpvar_61.y * _ProjectionParams.x);
  o_60.xy = (tmpvar_62 + tmpvar_61.w);
  o_60.zw = tmpvar_59.zw;
  highp vec3 tmpvar_63;
  tmpvar_63 = o_60.xyw;
  tmpvar_9 = tmpvar_63;
  highp vec2 tmpvar_64;
  tmpvar_64 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_64;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_65;
  v_65.x = _World2Object[0].x;
  v_65.y = _World2Object[1].x;
  v_65.z = _World2Object[2].x;
  v_65.w = _World2Object[3].x;
  highp vec4 v_66;
  v_66.x = _World2Object[0].y;
  v_66.y = _World2Object[1].y;
  v_66.z = _World2Object[2].y;
  v_66.w = _World2Object[3].y;
  highp vec4 v_67;
  v_67.x = _World2Object[0].z;
  v_67.y = _World2Object[1].z;
  v_67.z = _World2Object[2].z;
  v_67.w = _World2Object[3].z;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(((
    (v_65.xyz * tmpvar_16.x)
   + 
    (v_66.xyz * tmpvar_16.y)
  ) + (v_67.xyz * tmpvar_16.z)));
  worldNormal_3 = tmpvar_68;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_69;
  tmpvar_69.w = 1.0;
  tmpvar_69.xyz = worldNormal_3;
  mediump vec4 normal_70;
  normal_70 = tmpvar_69;
  mediump vec3 x2_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = (normal_70.xyzz * normal_70.yzzx);
  x2_71.x = dot (unity_SHBr, tmpvar_72);
  x2_71.y = dot (unity_SHBg, tmpvar_72);
  x2_71.z = dot (unity_SHBb, tmpvar_72);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_71 + (unity_SHC.xyz * (
    (normal_70.x * normal_70.x)
   - 
    (normal_70.y * normal_70.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_16 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_17;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_3;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_18;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_19);
  x1_20.y = dot (unity_SHAg, tmpvar_19);
  x1_20.z = dot (unity_SHAb, tmpvar_19);
  mediump vec4 outDiffuseOcclusion_21;
  mediump vec4 outNormal_22;
  mediump vec4 emission_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = tmpvar_5;
  outDiffuseOcclusion_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_22 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = vec3(0.0, 0.0, 0.0);
  emission_23 = tmpvar_26;
  emission_23.xyz = (emission_23.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_20)));
  outDiffuse_1.xyz = outDiffuseOcclusion_21.xyz;
  outEmission_2.w = emission_23.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_23.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_22;
  gl_FragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD6;
out mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_14;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = tmpvar_1.xyz;
  FinalPosition_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_21 == 5.0)) {
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    highp float fOffset_25;
    fOffset_25 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_25 = 0.75;
    };
    highp vec4 tmpvar_26;
    tmpvar_26.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_26.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_25);
    highp vec4 tmpvar_27;
    tmpvar_27 = abs(((
      fract((tmpvar_26 + 0.5))
     * 2.0) - 1.0));
    vPos_24 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_16 = tmpvar_2;
    FinalPosition_19 = vPos_24;
  };
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_28;
    vPos_28 = FinalPosition_19;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_29;
      vPos_29 = FinalPosition_19;
      highp float fAdherenceScale_30;
      highp vec3 tmpvar_31;
      tmpvar_31 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_32;
      tmpvar_32 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_33;
      highp float fOscillation_34;
      fOscillation_34 = 1.0;
      highp float fAmount_35;
      highp float fTarget_36;
      highp vec4 tmpvar_37;
      tmpvar_37.x = (tmpvar_32 + _glesMultiTexCoord0.w);
      tmpvar_37.y = ((tmpvar_32 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_37.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_32 + _glesMultiTexCoord0.w));
      tmpvar_37.w = ((tmpvar_32 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      vOscillations_33 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      highp float tmpvar_39;
      tmpvar_39 = (vOscillations_33.y * vOscillations_33.z);
      fTarget_36 = 1.0;
      fAmount_35 = tmpvar_39;
      if ((tmpvar_39 < 0.0)) {
        fTarget_36 = -1.0;
        fAmount_35 = -(tmpvar_39);
      };
      fOscillation_34 = (((
        (mix (mix (tmpvar_39, fTarget_36, fAmount_35), fTarget_36, fAmount_35) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_33.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_33.w * _ST_WindBranchWhip.x)));
      vPos_29 = (FinalPosition_19 + ((tmpvar_31 * fOscillation_34) * _ST_WindBranch.y));
      highp vec4 tmpvar_40;
      tmpvar_40.zw = vec2(0.0, 0.0);
      tmpvar_40.x = ((tmpvar_32 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_40.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_41;
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      tmpvar_41 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      fAdherenceScale_30 = (1.0 - ((
        ((tmpvar_41.x * tmpvar_41.y) * tmpvar_41.x)
       * tmpvar_41.y) * _ST_WindTurbulences.x));
      fAdherenceScale_30 = (fAdherenceScale_30 + ((vOscillations_33.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_29 = (vPos_29 + ((
        ((vRotatedBranchAnchor_17 - vPos_29) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_30) * _glesMultiTexCoord0.z));
      vPos_28 = vPos_29;
    } else {
      highp vec3 vPos_43;
      vPos_43 = vPos_28;
      highp vec3 tmpvar_44;
      tmpvar_44 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_45;
      tmpvar_45 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_46;
      highp float fAmount_47;
      highp float fTarget_48;
      highp vec4 tmpvar_49;
      tmpvar_49.w = 0.0;
      tmpvar_49.x = (tmpvar_45 + _glesMultiTexCoord0.w);
      tmpvar_49.y = ((tmpvar_45 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_49.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_45 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_49 + 0.5))
       * 2.0) - 1.0));
      vOscillations_46 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      highp float tmpvar_51;
      tmpvar_51 = (vOscillations_46.y * vOscillations_46.z);
      fTarget_48 = 1.0;
      fAmount_47 = tmpvar_51;
      if ((tmpvar_51 < 0.0)) {
        fTarget_48 = -1.0;
        fAmount_47 = -(tmpvar_51);
      };
      vPos_43 = (vPos_28 + ((tmpvar_44 * 
        (((mix (
          mix (tmpvar_51, fTarget_48, fAmount_47)
        , fTarget_48, fAmount_47) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_46.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_28 = vPos_43;
    };
    FinalPosition_19 = vPos_28;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_52;
    vPos_52 = FinalPosition_19;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_56.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    vPos_52.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_57.x + (tmpvar_57.y * tmpvar_57.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_53)));
    vPos_52 = (normalize(vPos_52) * fLength_54);
    FinalPosition_19 = vPos_52;
  };
  tmpvar_15.xyz = FinalPosition_19;
  highp vec4 tmpvar_59;
  tmpvar_59 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = (tmpvar_59 * 0.5);
  highp vec2 tmpvar_62;
  tmpvar_62.x = tmpvar_61.x;
  tmpvar_62.y = (tmpvar_61.y * _ProjectionParams.x);
  o_60.xy = (tmpvar_62 + tmpvar_61.w);
  o_60.zw = tmpvar_59.zw;
  highp vec3 tmpvar_63;
  tmpvar_63 = o_60.xyw;
  tmpvar_9 = tmpvar_63;
  highp vec2 tmpvar_64;
  tmpvar_64 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_64;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_65;
  v_65.x = _World2Object[0].x;
  v_65.y = _World2Object[1].x;
  v_65.z = _World2Object[2].x;
  v_65.w = _World2Object[3].x;
  highp vec4 v_66;
  v_66.x = _World2Object[0].y;
  v_66.y = _World2Object[1].y;
  v_66.z = _World2Object[2].y;
  v_66.w = _World2Object[3].y;
  highp vec4 v_67;
  v_67.x = _World2Object[0].z;
  v_67.y = _World2Object[1].z;
  v_67.z = _World2Object[2].z;
  v_67.w = _World2Object[3].z;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(((
    (v_65.xyz * tmpvar_16.x)
   + 
    (v_66.xyz * tmpvar_16.y)
  ) + (v_67.xyz * tmpvar_16.z)));
  worldNormal_3 = tmpvar_68;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_69;
  tmpvar_69.w = 1.0;
  tmpvar_69.xyz = worldNormal_3;
  mediump vec4 normal_70;
  normal_70 = tmpvar_69;
  mediump vec3 x2_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = (normal_70.xyzz * normal_70.yzzx);
  x2_71.x = dot (unity_SHBr, tmpvar_72);
  x2_71.y = dot (unity_SHBg, tmpvar_72);
  x2_71.z = dot (unity_SHBb, tmpvar_72);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_71 + (unity_SHC.xyz * (
    (normal_70.x * normal_70.x)
   - 
    (normal_70.y * normal_70.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_16 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_17;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_3;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_18;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_19);
  x1_20.y = dot (unity_SHAg, tmpvar_19);
  x1_20.z = dot (unity_SHAb, tmpvar_19);
  mediump vec4 outDiffuseOcclusion_21;
  mediump vec4 outNormal_22;
  mediump vec4 emission_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = tmpvar_5;
  outDiffuseOcclusion_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_22 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = vec3(0.0, 0.0, 0.0);
  emission_23 = tmpvar_26;
  emission_23.xyz = (emission_23.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_20)));
  outDiffuse_1.xyz = outDiffuseOcclusion_21.xyz;
  outEmission_2.w = emission_23.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_23.xyz));
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_22;
  _glesFragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_14;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = tmpvar_1.xyz;
  FinalPosition_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_21 == 5.0)) {
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    highp float fOffset_25;
    fOffset_25 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_25 = 0.75;
    };
    highp vec4 tmpvar_26;
    tmpvar_26.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_26.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_25);
    highp vec4 tmpvar_27;
    tmpvar_27 = abs(((
      fract((tmpvar_26 + 0.5))
     * 2.0) - 1.0));
    vPos_24 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_16 = tmpvar_2;
    FinalPosition_19 = vPos_24;
  };
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_28;
    vPos_28 = FinalPosition_19;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_29;
      vPos_29 = FinalPosition_19;
      highp float fAdherenceScale_30;
      highp vec3 tmpvar_31;
      tmpvar_31 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_32;
      tmpvar_32 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_33;
      highp float fOscillation_34;
      fOscillation_34 = 1.0;
      highp float fAmount_35;
      highp float fTarget_36;
      highp vec4 tmpvar_37;
      tmpvar_37.x = (tmpvar_32 + _glesMultiTexCoord0.w);
      tmpvar_37.y = ((tmpvar_32 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_37.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_32 + _glesMultiTexCoord0.w));
      tmpvar_37.w = ((tmpvar_32 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      vOscillations_33 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      highp float tmpvar_39;
      tmpvar_39 = (vOscillations_33.y * vOscillations_33.z);
      fTarget_36 = 1.0;
      fAmount_35 = tmpvar_39;
      if ((tmpvar_39 < 0.0)) {
        fTarget_36 = -1.0;
        fAmount_35 = -(tmpvar_39);
      };
      fOscillation_34 = (((
        (mix (mix (tmpvar_39, fTarget_36, fAmount_35), fTarget_36, fAmount_35) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_33.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_33.w * _ST_WindBranchWhip.x)));
      vPos_29 = (FinalPosition_19 + ((tmpvar_31 * fOscillation_34) * _ST_WindBranch.y));
      highp vec4 tmpvar_40;
      tmpvar_40.zw = vec2(0.0, 0.0);
      tmpvar_40.x = ((tmpvar_32 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_40.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_41;
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      tmpvar_41 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      fAdherenceScale_30 = (1.0 - ((
        ((tmpvar_41.x * tmpvar_41.y) * tmpvar_41.x)
       * tmpvar_41.y) * _ST_WindTurbulences.x));
      fAdherenceScale_30 = (fAdherenceScale_30 + ((vOscillations_33.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_29 = (vPos_29 + ((
        ((vRotatedBranchAnchor_17 - vPos_29) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_30) * _glesMultiTexCoord0.z));
      vPos_28 = vPos_29;
    } else {
      highp vec3 vPos_43;
      vPos_43 = vPos_28;
      highp vec3 tmpvar_44;
      tmpvar_44 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_45;
      tmpvar_45 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_46;
      highp float fAmount_47;
      highp float fTarget_48;
      highp vec4 tmpvar_49;
      tmpvar_49.w = 0.0;
      tmpvar_49.x = (tmpvar_45 + _glesMultiTexCoord0.w);
      tmpvar_49.y = ((tmpvar_45 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_49.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_45 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_49 + 0.5))
       * 2.0) - 1.0));
      vOscillations_46 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      highp float tmpvar_51;
      tmpvar_51 = (vOscillations_46.y * vOscillations_46.z);
      fTarget_48 = 1.0;
      fAmount_47 = tmpvar_51;
      if ((tmpvar_51 < 0.0)) {
        fTarget_48 = -1.0;
        fAmount_47 = -(tmpvar_51);
      };
      vPos_43 = (vPos_28 + ((tmpvar_44 * 
        (((mix (
          mix (tmpvar_51, fTarget_48, fAmount_47)
        , fTarget_48, fAmount_47) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_46.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_28 = vPos_43;
    };
    FinalPosition_19 = vPos_28;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_52;
    vPos_52 = FinalPosition_19;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_56.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    vPos_52.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_57.x + (tmpvar_57.y * tmpvar_57.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_53)));
    vPos_52 = (normalize(vPos_52) * fLength_54);
    FinalPosition_19 = vPos_52;
  };
  tmpvar_15.xyz = FinalPosition_19;
  highp vec4 tmpvar_59;
  tmpvar_59 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = (tmpvar_59 * 0.5);
  highp vec2 tmpvar_62;
  tmpvar_62.x = tmpvar_61.x;
  tmpvar_62.y = (tmpvar_61.y * _ProjectionParams.x);
  o_60.xy = (tmpvar_62 + tmpvar_61.w);
  o_60.zw = tmpvar_59.zw;
  highp vec3 tmpvar_63;
  tmpvar_63 = o_60.xyw;
  tmpvar_9 = tmpvar_63;
  highp vec2 tmpvar_64;
  tmpvar_64 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_64;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_65;
  v_65.x = _World2Object[0].x;
  v_65.y = _World2Object[1].x;
  v_65.z = _World2Object[2].x;
  v_65.w = _World2Object[3].x;
  highp vec4 v_66;
  v_66.x = _World2Object[0].y;
  v_66.y = _World2Object[1].y;
  v_66.z = _World2Object[2].y;
  v_66.w = _World2Object[3].y;
  highp vec4 v_67;
  v_67.x = _World2Object[0].z;
  v_67.y = _World2Object[1].z;
  v_67.z = _World2Object[2].z;
  v_67.w = _World2Object[3].z;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(((
    (v_65.xyz * tmpvar_16.x)
   + 
    (v_66.xyz * tmpvar_16.y)
  ) + (v_67.xyz * tmpvar_16.z)));
  worldNormal_3 = tmpvar_68;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_69;
  tmpvar_69.w = 1.0;
  tmpvar_69.xyz = worldNormal_3;
  mediump vec4 normal_70;
  normal_70 = tmpvar_69;
  mediump vec3 x2_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = (normal_70.xyzz * normal_70.yzzx);
  x2_71.x = dot (unity_SHBr, tmpvar_72);
  x2_71.y = dot (unity_SHBg, tmpvar_72);
  x2_71.z = dot (unity_SHBb, tmpvar_72);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_71 + (unity_SHC.xyz * (
    (normal_70.x * normal_70.x)
   - 
    (normal_70.y * normal_70.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_7.x = tmpvar_8.x;
  mediump float tmpvar_9;
  tmpvar_9 = fract(tmpvar_8.y);
  highp float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * 0.0625) + unity_LODFade.y);
  projUV_7.y = tmpvar_10;
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_6.w * _Color.w);
  tmpvar_5 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_5 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_6.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_6.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_6.x, max (diffuseColor_6.y, diffuseColor_6.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_16;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_2;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_17;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  mediump vec4 outDiffuseOcclusion_20;
  mediump vec4 outNormal_21;
  mediump vec4 emission_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = tmpvar_4;
  outDiffuseOcclusion_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  emission_22 = tmpvar_25;
  emission_22.xyz = (emission_22.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_19)));
  outDiffuse_1.xyz = outDiffuseOcclusion_20.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_21;
  gl_FragData[3] = emission_22;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD6;
out mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_14;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = tmpvar_1.xyz;
  FinalPosition_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_21 == 5.0)) {
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    highp float fOffset_25;
    fOffset_25 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_25 = 0.75;
    };
    highp vec4 tmpvar_26;
    tmpvar_26.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_26.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_25);
    highp vec4 tmpvar_27;
    tmpvar_27 = abs(((
      fract((tmpvar_26 + 0.5))
     * 2.0) - 1.0));
    vPos_24 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_16 = tmpvar_2;
    FinalPosition_19 = vPos_24;
  };
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_28;
    vPos_28 = FinalPosition_19;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_29;
      vPos_29 = FinalPosition_19;
      highp float fAdherenceScale_30;
      highp vec3 tmpvar_31;
      tmpvar_31 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_32;
      tmpvar_32 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_33;
      highp float fOscillation_34;
      fOscillation_34 = 1.0;
      highp float fAmount_35;
      highp float fTarget_36;
      highp vec4 tmpvar_37;
      tmpvar_37.x = (tmpvar_32 + _glesMultiTexCoord0.w);
      tmpvar_37.y = ((tmpvar_32 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_37.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_32 + _glesMultiTexCoord0.w));
      tmpvar_37.w = ((tmpvar_32 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      vOscillations_33 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      highp float tmpvar_39;
      tmpvar_39 = (vOscillations_33.y * vOscillations_33.z);
      fTarget_36 = 1.0;
      fAmount_35 = tmpvar_39;
      if ((tmpvar_39 < 0.0)) {
        fTarget_36 = -1.0;
        fAmount_35 = -(tmpvar_39);
      };
      fOscillation_34 = (((
        (mix (mix (tmpvar_39, fTarget_36, fAmount_35), fTarget_36, fAmount_35) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_33.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_33.w * _ST_WindBranchWhip.x)));
      vPos_29 = (FinalPosition_19 + ((tmpvar_31 * fOscillation_34) * _ST_WindBranch.y));
      highp vec4 tmpvar_40;
      tmpvar_40.zw = vec2(0.0, 0.0);
      tmpvar_40.x = ((tmpvar_32 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_40.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_41;
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      tmpvar_41 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      fAdherenceScale_30 = (1.0 - ((
        ((tmpvar_41.x * tmpvar_41.y) * tmpvar_41.x)
       * tmpvar_41.y) * _ST_WindTurbulences.x));
      fAdherenceScale_30 = (fAdherenceScale_30 + ((vOscillations_33.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_29 = (vPos_29 + ((
        ((vRotatedBranchAnchor_17 - vPos_29) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_30) * _glesMultiTexCoord0.z));
      vPos_28 = vPos_29;
    } else {
      highp vec3 vPos_43;
      vPos_43 = vPos_28;
      highp vec3 tmpvar_44;
      tmpvar_44 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_45;
      tmpvar_45 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_46;
      highp float fAmount_47;
      highp float fTarget_48;
      highp vec4 tmpvar_49;
      tmpvar_49.w = 0.0;
      tmpvar_49.x = (tmpvar_45 + _glesMultiTexCoord0.w);
      tmpvar_49.y = ((tmpvar_45 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_49.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_45 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_49 + 0.5))
       * 2.0) - 1.0));
      vOscillations_46 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      highp float tmpvar_51;
      tmpvar_51 = (vOscillations_46.y * vOscillations_46.z);
      fTarget_48 = 1.0;
      fAmount_47 = tmpvar_51;
      if ((tmpvar_51 < 0.0)) {
        fTarget_48 = -1.0;
        fAmount_47 = -(tmpvar_51);
      };
      vPos_43 = (vPos_28 + ((tmpvar_44 * 
        (((mix (
          mix (tmpvar_51, fTarget_48, fAmount_47)
        , fTarget_48, fAmount_47) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_46.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_28 = vPos_43;
    };
    FinalPosition_19 = vPos_28;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_52;
    vPos_52 = FinalPosition_19;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_56.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    vPos_52.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_57.x + (tmpvar_57.y * tmpvar_57.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_53)));
    vPos_52 = (normalize(vPos_52) * fLength_54);
    FinalPosition_19 = vPos_52;
  };
  tmpvar_15.xyz = FinalPosition_19;
  highp vec4 tmpvar_59;
  tmpvar_59 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = (tmpvar_59 * 0.5);
  highp vec2 tmpvar_62;
  tmpvar_62.x = tmpvar_61.x;
  tmpvar_62.y = (tmpvar_61.y * _ProjectionParams.x);
  o_60.xy = (tmpvar_62 + tmpvar_61.w);
  o_60.zw = tmpvar_59.zw;
  highp vec3 tmpvar_63;
  tmpvar_63 = o_60.xyw;
  tmpvar_9 = tmpvar_63;
  highp vec2 tmpvar_64;
  tmpvar_64 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_64;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_65;
  v_65.x = _World2Object[0].x;
  v_65.y = _World2Object[1].x;
  v_65.z = _World2Object[2].x;
  v_65.w = _World2Object[3].x;
  highp vec4 v_66;
  v_66.x = _World2Object[0].y;
  v_66.y = _World2Object[1].y;
  v_66.z = _World2Object[2].y;
  v_66.w = _World2Object[3].y;
  highp vec4 v_67;
  v_67.x = _World2Object[0].z;
  v_67.y = _World2Object[1].z;
  v_67.z = _World2Object[2].z;
  v_67.w = _World2Object[3].z;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(((
    (v_65.xyz * tmpvar_16.x)
   + 
    (v_66.xyz * tmpvar_16.y)
  ) + (v_67.xyz * tmpvar_16.z)));
  worldNormal_3 = tmpvar_68;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_69;
  tmpvar_69.w = 1.0;
  tmpvar_69.xyz = worldNormal_3;
  mediump vec4 normal_70;
  normal_70 = tmpvar_69;
  mediump vec3 x2_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = (normal_70.xyzz * normal_70.yzzx);
  x2_71.x = dot (unity_SHBr, tmpvar_72);
  x2_71.y = dot (unity_SHBg, tmpvar_72);
  x2_71.z = dot (unity_SHBb, tmpvar_72);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_71 + (unity_SHC.xyz * (
    (normal_70.x * normal_70.x)
   - 
    (normal_70.y * normal_70.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_7.x = tmpvar_8.x;
  mediump float tmpvar_9;
  tmpvar_9 = fract(tmpvar_8.y);
  highp float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * 0.0625) + unity_LODFade.y);
  projUV_7.y = tmpvar_10;
  lowp float x_11;
  x_11 = (texture (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_6.w * _Color.w);
  tmpvar_5 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_5 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_6.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_6.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_6.x, max (diffuseColor_6.y, diffuseColor_6.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_16;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_2;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_17;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  mediump vec4 outDiffuseOcclusion_20;
  mediump vec4 outNormal_21;
  mediump vec4 emission_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = tmpvar_4;
  outDiffuseOcclusion_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  emission_22 = tmpvar_25;
  emission_22.xyz = (emission_22.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_19)));
  outDiffuse_1.xyz = outDiffuseOcclusion_20.xyz;
  outDiffuse_1.w = 1.0;
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_21;
  _glesFragData[3] = emission_22;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_11;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_15;
  highp vec4 tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_16 = tmpvar_1;
  tmpvar_17 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = tmpvar_1.xyz;
  FinalPosition_20 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = (_WindQuality * _WindEnabled);
  if ((tmpvar_22 > 0.0)) {
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_23 * _ST_WindVector.xyz));
    highp mat3 tmpvar_24;
    tmpvar_24[0] = _World2Object[0].xyz;
    tmpvar_24[1] = _World2Object[1].xyz;
    tmpvar_24[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_24 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_22 == 5.0)) {
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    highp float fOffset_26;
    fOffset_26 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_26 = 0.75;
    };
    highp vec4 tmpvar_27;
    tmpvar_27.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_27.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_26);
    highp vec4 tmpvar_28;
    tmpvar_28 = abs(((
      fract((tmpvar_27 + 0.5))
     * 2.0) - 1.0));
    vPos_25 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_17 = tmpvar_2;
    FinalPosition_20 = vPos_25;
  };
  if ((tmpvar_22 >= 3.0)) {
    highp vec3 vPos_29;
    vPos_29 = FinalPosition_20;
    if ((tmpvar_22 == 5.0)) {
      highp vec3 vPos_30;
      vPos_30 = FinalPosition_20;
      highp float fAdherenceScale_31;
      highp vec3 tmpvar_32;
      tmpvar_32 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_33;
      tmpvar_33 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_34;
      highp float fOscillation_35;
      fOscillation_35 = 1.0;
      highp float fAmount_36;
      highp float fTarget_37;
      highp vec4 tmpvar_38;
      tmpvar_38.x = (tmpvar_33 + _glesMultiTexCoord0.w);
      tmpvar_38.y = ((tmpvar_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_38.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_33 + _glesMultiTexCoord0.w));
      tmpvar_38.w = ((tmpvar_33 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      vOscillations_34 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      highp float tmpvar_40;
      tmpvar_40 = (vOscillations_34.y * vOscillations_34.z);
      fTarget_37 = 1.0;
      fAmount_36 = tmpvar_40;
      if ((tmpvar_40 < 0.0)) {
        fTarget_37 = -1.0;
        fAmount_36 = -(tmpvar_40);
      };
      fOscillation_35 = (((
        (mix (mix (tmpvar_40, fTarget_37, fAmount_36), fTarget_37, fAmount_36) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_34.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_34.w * _ST_WindBranchWhip.x)));
      vPos_30 = (FinalPosition_20 + ((tmpvar_32 * fOscillation_35) * _ST_WindBranch.y));
      highp vec4 tmpvar_41;
      tmpvar_41.zw = vec2(0.0, 0.0);
      tmpvar_41.x = ((tmpvar_33 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_41.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      fAdherenceScale_31 = (1.0 - ((
        ((tmpvar_42.x * tmpvar_42.y) * tmpvar_42.x)
       * tmpvar_42.y) * _ST_WindTurbulences.x));
      fAdherenceScale_31 = (fAdherenceScale_31 + ((vOscillations_34.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_30 = (vPos_30 + ((
        ((vRotatedBranchAnchor_18 - vPos_30) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_31) * _glesMultiTexCoord0.z));
      vPos_29 = vPos_30;
    } else {
      highp vec3 vPos_44;
      vPos_44 = vPos_29;
      highp vec3 tmpvar_45;
      tmpvar_45 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_46;
      tmpvar_46 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_47;
      highp float fAmount_48;
      highp float fTarget_49;
      highp vec4 tmpvar_50;
      tmpvar_50.w = 0.0;
      tmpvar_50.x = (tmpvar_46 + _glesMultiTexCoord0.w);
      tmpvar_50.y = ((tmpvar_46 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_50.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_46 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_51;
      tmpvar_51 = abs(((
        fract((tmpvar_50 + 0.5))
       * 2.0) - 1.0));
      vOscillations_47 = (((
        (tmpvar_51 * tmpvar_51)
       * 
        (3.0 - (2.0 * tmpvar_51))
      ) - 0.5) * 2.0);
      highp float tmpvar_52;
      tmpvar_52 = (vOscillations_47.y * vOscillations_47.z);
      fTarget_49 = 1.0;
      fAmount_48 = tmpvar_52;
      if ((tmpvar_52 < 0.0)) {
        fTarget_49 = -1.0;
        fAmount_48 = -(tmpvar_52);
      };
      vPos_44 = (vPos_29 + ((tmpvar_45 * 
        (((mix (
          mix (tmpvar_52, fTarget_49, fAmount_48)
        , fTarget_49, fAmount_48) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_47.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_29 = vPos_44;
    };
    FinalPosition_20 = vPos_29;
  };
  if ((tmpvar_22 > 0.0)) {
    highp vec3 vPos_53;
    vPos_53 = FinalPosition_20;
    highp float fAdjust_54;
    highp float fLength_55;
    fLength_55 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_56;
    tmpvar_56 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_54 = tmpvar_56;
    if ((tmpvar_56 != 0.0)) {
      fAdjust_54 = pow (tmpvar_56, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_57;
    tmpvar_57.zw = vec2(0.0, 0.0);
    tmpvar_57.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_57.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_58;
    highp vec4 tmpvar_59;
    tmpvar_59 = abs(((
      fract((tmpvar_57 + 0.5))
     * 2.0) - 1.0));
    tmpvar_58 = (((
      (tmpvar_59 * tmpvar_59)
     * 
      (3.0 - (2.0 * tmpvar_59))
    ) - 0.5) * 2.0);
    vPos_53.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_58.x + (tmpvar_58.y * tmpvar_58.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_54)));
    vPos_53 = (normalize(vPos_53) * fLength_55);
    FinalPosition_20 = vPos_53;
  };
  tmpvar_16.xyz = FinalPosition_20;
  highp vec4 tmpvar_60;
  tmpvar_60 = (glstate_matrix_mvp * tmpvar_16);
  highp vec4 o_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = (tmpvar_60 * 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63.x = tmpvar_62.x;
  tmpvar_63.y = (tmpvar_62.y * _ProjectionParams.x);
  o_61.xy = (tmpvar_63 + tmpvar_62.w);
  o_61.zw = tmpvar_60.zw;
  highp vec3 tmpvar_64;
  tmpvar_64 = o_61.xyw;
  tmpvar_10 = tmpvar_64;
  highp vec2 tmpvar_65;
  tmpvar_65 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_65;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_66;
  tmpvar_66 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_67;
  v_67.x = _World2Object[0].x;
  v_67.y = _World2Object[1].x;
  v_67.z = _World2Object[2].x;
  v_67.w = _World2Object[3].x;
  highp vec4 v_68;
  v_68.x = _World2Object[0].y;
  v_68.y = _World2Object[1].y;
  v_68.z = _World2Object[2].y;
  v_68.w = _World2Object[3].y;
  highp vec4 v_69;
  v_69.x = _World2Object[0].z;
  v_69.y = _World2Object[1].z;
  v_69.z = _World2Object[2].z;
  v_69.w = _World2Object[3].z;
  highp vec3 tmpvar_70;
  tmpvar_70 = normalize(((
    (v_67.xyz * tmpvar_17.x)
   + 
    (v_68.xyz * tmpvar_17.y)
  ) + (v_69.xyz * tmpvar_17.z)));
  worldNormal_5 = tmpvar_70;
  highp mat3 tmpvar_71;
  tmpvar_71[0] = _Object2World[0].xyz;
  tmpvar_71[1] = _Object2World[1].xyz;
  tmpvar_71[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_72;
  tmpvar_72 = normalize((tmpvar_71 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_72;
  lowp vec3 tmpvar_73;
  tmpvar_73 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_74;
  tmpvar_74 = (tmpvar_73 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75.x = worldTangent_4.x;
  tmpvar_75.y = worldBinormal_3.x;
  tmpvar_75.z = worldNormal_5.x;
  tmpvar_75.w = tmpvar_66.x;
  highp vec4 tmpvar_76;
  tmpvar_76.x = worldTangent_4.y;
  tmpvar_76.y = worldBinormal_3.y;
  tmpvar_76.z = worldNormal_5.y;
  tmpvar_76.w = tmpvar_66.y;
  highp vec4 tmpvar_77;
  tmpvar_77.x = worldTangent_4.z;
  tmpvar_77.y = worldBinormal_3.z;
  tmpvar_77.z = worldNormal_5.z;
  tmpvar_77.w = tmpvar_66.z;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_78;
  tmpvar_78.w = 1.0;
  tmpvar_78.xyz = worldNormal_5;
  mediump vec4 normal_79;
  normal_79 = tmpvar_78;
  mediump vec3 x2_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (normal_79.xyzz * normal_79.yzzx);
  x2_80.x = dot (unity_SHBr, tmpvar_81);
  x2_80.y = dot (unity_SHBg, tmpvar_81);
  x2_80.z = dot (unity_SHBb, tmpvar_81);
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_75;
  xlv_TEXCOORD1 = tmpvar_76;
  xlv_TEXCOORD2 = tmpvar_77;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD7 = tmpvar_7;
  xlv_TEXCOORD8 = (x2_80 + (unity_SHC.xyz * (
    (normal_79.x * normal_79.x)
   - 
    (normal_79.y * normal_79.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 worldN_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_16 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_17;
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD0.xyz, tmpvar_18);
  worldN_3.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD1.xyz, tmpvar_18);
  worldN_3.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD2.xyz, tmpvar_18);
  worldN_3.z = tmpvar_21;
  mediump vec3 normalWorld_22;
  normalWorld_22 = worldN_3;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_22;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  mediump vec4 outDiffuseOcclusion_25;
  mediump vec4 outNormal_26;
  mediump vec4 emission_27;
  lowp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = tmpvar_5;
  outDiffuseOcclusion_25 = tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = ((worldN_3 * 0.5) + 0.5);
  outNormal_26 = tmpvar_29;
  lowp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = vec3(0.0, 0.0, 0.0);
  emission_27 = tmpvar_30;
  emission_27.xyz = (emission_27.xyz + (tmpvar_5 * (xlv_TEXCOORD8 + x1_24)));
  outDiffuse_1.xyz = outDiffuseOcclusion_25.xyz;
  outEmission_2.w = emission_27.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_27.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_26;
  gl_FragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
in vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD7;
out mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_11;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_15;
  highp vec4 tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_16 = tmpvar_1;
  tmpvar_17 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = tmpvar_1.xyz;
  FinalPosition_20 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = (_WindQuality * _WindEnabled);
  if ((tmpvar_22 > 0.0)) {
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_23 * _ST_WindVector.xyz));
    highp mat3 tmpvar_24;
    tmpvar_24[0] = _World2Object[0].xyz;
    tmpvar_24[1] = _World2Object[1].xyz;
    tmpvar_24[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_24 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_22 == 5.0)) {
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    highp float fOffset_26;
    fOffset_26 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_26 = 0.75;
    };
    highp vec4 tmpvar_27;
    tmpvar_27.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_27.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_26);
    highp vec4 tmpvar_28;
    tmpvar_28 = abs(((
      fract((tmpvar_27 + 0.5))
     * 2.0) - 1.0));
    vPos_25 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_17 = tmpvar_2;
    FinalPosition_20 = vPos_25;
  };
  if ((tmpvar_22 >= 3.0)) {
    highp vec3 vPos_29;
    vPos_29 = FinalPosition_20;
    if ((tmpvar_22 == 5.0)) {
      highp vec3 vPos_30;
      vPos_30 = FinalPosition_20;
      highp float fAdherenceScale_31;
      highp vec3 tmpvar_32;
      tmpvar_32 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_33;
      tmpvar_33 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_34;
      highp float fOscillation_35;
      fOscillation_35 = 1.0;
      highp float fAmount_36;
      highp float fTarget_37;
      highp vec4 tmpvar_38;
      tmpvar_38.x = (tmpvar_33 + _glesMultiTexCoord0.w);
      tmpvar_38.y = ((tmpvar_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_38.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_33 + _glesMultiTexCoord0.w));
      tmpvar_38.w = ((tmpvar_33 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      vOscillations_34 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      highp float tmpvar_40;
      tmpvar_40 = (vOscillations_34.y * vOscillations_34.z);
      fTarget_37 = 1.0;
      fAmount_36 = tmpvar_40;
      if ((tmpvar_40 < 0.0)) {
        fTarget_37 = -1.0;
        fAmount_36 = -(tmpvar_40);
      };
      fOscillation_35 = (((
        (mix (mix (tmpvar_40, fTarget_37, fAmount_36), fTarget_37, fAmount_36) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_34.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_34.w * _ST_WindBranchWhip.x)));
      vPos_30 = (FinalPosition_20 + ((tmpvar_32 * fOscillation_35) * _ST_WindBranch.y));
      highp vec4 tmpvar_41;
      tmpvar_41.zw = vec2(0.0, 0.0);
      tmpvar_41.x = ((tmpvar_33 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_41.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      fAdherenceScale_31 = (1.0 - ((
        ((tmpvar_42.x * tmpvar_42.y) * tmpvar_42.x)
       * tmpvar_42.y) * _ST_WindTurbulences.x));
      fAdherenceScale_31 = (fAdherenceScale_31 + ((vOscillations_34.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_30 = (vPos_30 + ((
        ((vRotatedBranchAnchor_18 - vPos_30) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_31) * _glesMultiTexCoord0.z));
      vPos_29 = vPos_30;
    } else {
      highp vec3 vPos_44;
      vPos_44 = vPos_29;
      highp vec3 tmpvar_45;
      tmpvar_45 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_46;
      tmpvar_46 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_47;
      highp float fAmount_48;
      highp float fTarget_49;
      highp vec4 tmpvar_50;
      tmpvar_50.w = 0.0;
      tmpvar_50.x = (tmpvar_46 + _glesMultiTexCoord0.w);
      tmpvar_50.y = ((tmpvar_46 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_50.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_46 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_51;
      tmpvar_51 = abs(((
        fract((tmpvar_50 + 0.5))
       * 2.0) - 1.0));
      vOscillations_47 = (((
        (tmpvar_51 * tmpvar_51)
       * 
        (3.0 - (2.0 * tmpvar_51))
      ) - 0.5) * 2.0);
      highp float tmpvar_52;
      tmpvar_52 = (vOscillations_47.y * vOscillations_47.z);
      fTarget_49 = 1.0;
      fAmount_48 = tmpvar_52;
      if ((tmpvar_52 < 0.0)) {
        fTarget_49 = -1.0;
        fAmount_48 = -(tmpvar_52);
      };
      vPos_44 = (vPos_29 + ((tmpvar_45 * 
        (((mix (
          mix (tmpvar_52, fTarget_49, fAmount_48)
        , fTarget_49, fAmount_48) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_47.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_29 = vPos_44;
    };
    FinalPosition_20 = vPos_29;
  };
  if ((tmpvar_22 > 0.0)) {
    highp vec3 vPos_53;
    vPos_53 = FinalPosition_20;
    highp float fAdjust_54;
    highp float fLength_55;
    fLength_55 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_56;
    tmpvar_56 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_54 = tmpvar_56;
    if ((tmpvar_56 != 0.0)) {
      fAdjust_54 = pow (tmpvar_56, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_57;
    tmpvar_57.zw = vec2(0.0, 0.0);
    tmpvar_57.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_57.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_58;
    highp vec4 tmpvar_59;
    tmpvar_59 = abs(((
      fract((tmpvar_57 + 0.5))
     * 2.0) - 1.0));
    tmpvar_58 = (((
      (tmpvar_59 * tmpvar_59)
     * 
      (3.0 - (2.0 * tmpvar_59))
    ) - 0.5) * 2.0);
    vPos_53.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_58.x + (tmpvar_58.y * tmpvar_58.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_54)));
    vPos_53 = (normalize(vPos_53) * fLength_55);
    FinalPosition_20 = vPos_53;
  };
  tmpvar_16.xyz = FinalPosition_20;
  highp vec4 tmpvar_60;
  tmpvar_60 = (glstate_matrix_mvp * tmpvar_16);
  highp vec4 o_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = (tmpvar_60 * 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63.x = tmpvar_62.x;
  tmpvar_63.y = (tmpvar_62.y * _ProjectionParams.x);
  o_61.xy = (tmpvar_63 + tmpvar_62.w);
  o_61.zw = tmpvar_60.zw;
  highp vec3 tmpvar_64;
  tmpvar_64 = o_61.xyw;
  tmpvar_10 = tmpvar_64;
  highp vec2 tmpvar_65;
  tmpvar_65 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_65;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_66;
  tmpvar_66 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_67;
  v_67.x = _World2Object[0].x;
  v_67.y = _World2Object[1].x;
  v_67.z = _World2Object[2].x;
  v_67.w = _World2Object[3].x;
  highp vec4 v_68;
  v_68.x = _World2Object[0].y;
  v_68.y = _World2Object[1].y;
  v_68.z = _World2Object[2].y;
  v_68.w = _World2Object[3].y;
  highp vec4 v_69;
  v_69.x = _World2Object[0].z;
  v_69.y = _World2Object[1].z;
  v_69.z = _World2Object[2].z;
  v_69.w = _World2Object[3].z;
  highp vec3 tmpvar_70;
  tmpvar_70 = normalize(((
    (v_67.xyz * tmpvar_17.x)
   + 
    (v_68.xyz * tmpvar_17.y)
  ) + (v_69.xyz * tmpvar_17.z)));
  worldNormal_5 = tmpvar_70;
  highp mat3 tmpvar_71;
  tmpvar_71[0] = _Object2World[0].xyz;
  tmpvar_71[1] = _Object2World[1].xyz;
  tmpvar_71[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_72;
  tmpvar_72 = normalize((tmpvar_71 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_72;
  lowp vec3 tmpvar_73;
  tmpvar_73 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_74;
  tmpvar_74 = (tmpvar_73 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75.x = worldTangent_4.x;
  tmpvar_75.y = worldBinormal_3.x;
  tmpvar_75.z = worldNormal_5.x;
  tmpvar_75.w = tmpvar_66.x;
  highp vec4 tmpvar_76;
  tmpvar_76.x = worldTangent_4.y;
  tmpvar_76.y = worldBinormal_3.y;
  tmpvar_76.z = worldNormal_5.y;
  tmpvar_76.w = tmpvar_66.y;
  highp vec4 tmpvar_77;
  tmpvar_77.x = worldTangent_4.z;
  tmpvar_77.y = worldBinormal_3.z;
  tmpvar_77.z = worldNormal_5.z;
  tmpvar_77.w = tmpvar_66.z;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_78;
  tmpvar_78.w = 1.0;
  tmpvar_78.xyz = worldNormal_5;
  mediump vec4 normal_79;
  normal_79 = tmpvar_78;
  mediump vec3 x2_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (normal_79.xyzz * normal_79.yzzx);
  x2_80.x = dot (unity_SHBr, tmpvar_81);
  x2_80.y = dot (unity_SHBg, tmpvar_81);
  x2_80.z = dot (unity_SHBb, tmpvar_81);
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_75;
  xlv_TEXCOORD1 = tmpvar_76;
  xlv_TEXCOORD2 = tmpvar_77;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD7 = tmpvar_7;
  xlv_TEXCOORD8 = (x2_80 + (unity_SHC.xyz * (
    (normal_79.x * normal_79.x)
   - 
    (normal_79.y * normal_79.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 worldN_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_16 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_17;
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD0.xyz, tmpvar_18);
  worldN_3.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD1.xyz, tmpvar_18);
  worldN_3.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD2.xyz, tmpvar_18);
  worldN_3.z = tmpvar_21;
  mediump vec3 normalWorld_22;
  normalWorld_22 = worldN_3;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_22;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  mediump vec4 outDiffuseOcclusion_25;
  mediump vec4 outNormal_26;
  mediump vec4 emission_27;
  lowp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = tmpvar_5;
  outDiffuseOcclusion_25 = tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = ((worldN_3 * 0.5) + 0.5);
  outNormal_26 = tmpvar_29;
  lowp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = vec3(0.0, 0.0, 0.0);
  emission_27 = tmpvar_30;
  emission_27.xyz = (emission_27.xyz + (tmpvar_5 * (xlv_TEXCOORD8 + x1_24)));
  outDiffuse_1.xyz = outDiffuseOcclusion_25.xyz;
  outEmission_2.w = emission_27.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_27.xyz));
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_26;
  _glesFragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_11;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_15;
  highp vec4 tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_16 = tmpvar_1;
  tmpvar_17 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = tmpvar_1.xyz;
  FinalPosition_20 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = (_WindQuality * _WindEnabled);
  if ((tmpvar_22 > 0.0)) {
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_23 * _ST_WindVector.xyz));
    highp mat3 tmpvar_24;
    tmpvar_24[0] = _World2Object[0].xyz;
    tmpvar_24[1] = _World2Object[1].xyz;
    tmpvar_24[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_24 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_22 == 5.0)) {
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    highp float fOffset_26;
    fOffset_26 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_26 = 0.75;
    };
    highp vec4 tmpvar_27;
    tmpvar_27.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_27.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_26);
    highp vec4 tmpvar_28;
    tmpvar_28 = abs(((
      fract((tmpvar_27 + 0.5))
     * 2.0) - 1.0));
    vPos_25 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_17 = tmpvar_2;
    FinalPosition_20 = vPos_25;
  };
  if ((tmpvar_22 >= 3.0)) {
    highp vec3 vPos_29;
    vPos_29 = FinalPosition_20;
    if ((tmpvar_22 == 5.0)) {
      highp vec3 vPos_30;
      vPos_30 = FinalPosition_20;
      highp float fAdherenceScale_31;
      highp vec3 tmpvar_32;
      tmpvar_32 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_33;
      tmpvar_33 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_34;
      highp float fOscillation_35;
      fOscillation_35 = 1.0;
      highp float fAmount_36;
      highp float fTarget_37;
      highp vec4 tmpvar_38;
      tmpvar_38.x = (tmpvar_33 + _glesMultiTexCoord0.w);
      tmpvar_38.y = ((tmpvar_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_38.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_33 + _glesMultiTexCoord0.w));
      tmpvar_38.w = ((tmpvar_33 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      vOscillations_34 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      highp float tmpvar_40;
      tmpvar_40 = (vOscillations_34.y * vOscillations_34.z);
      fTarget_37 = 1.0;
      fAmount_36 = tmpvar_40;
      if ((tmpvar_40 < 0.0)) {
        fTarget_37 = -1.0;
        fAmount_36 = -(tmpvar_40);
      };
      fOscillation_35 = (((
        (mix (mix (tmpvar_40, fTarget_37, fAmount_36), fTarget_37, fAmount_36) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_34.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_34.w * _ST_WindBranchWhip.x)));
      vPos_30 = (FinalPosition_20 + ((tmpvar_32 * fOscillation_35) * _ST_WindBranch.y));
      highp vec4 tmpvar_41;
      tmpvar_41.zw = vec2(0.0, 0.0);
      tmpvar_41.x = ((tmpvar_33 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_41.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      fAdherenceScale_31 = (1.0 - ((
        ((tmpvar_42.x * tmpvar_42.y) * tmpvar_42.x)
       * tmpvar_42.y) * _ST_WindTurbulences.x));
      fAdherenceScale_31 = (fAdherenceScale_31 + ((vOscillations_34.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_30 = (vPos_30 + ((
        ((vRotatedBranchAnchor_18 - vPos_30) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_31) * _glesMultiTexCoord0.z));
      vPos_29 = vPos_30;
    } else {
      highp vec3 vPos_44;
      vPos_44 = vPos_29;
      highp vec3 tmpvar_45;
      tmpvar_45 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_46;
      tmpvar_46 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_47;
      highp float fAmount_48;
      highp float fTarget_49;
      highp vec4 tmpvar_50;
      tmpvar_50.w = 0.0;
      tmpvar_50.x = (tmpvar_46 + _glesMultiTexCoord0.w);
      tmpvar_50.y = ((tmpvar_46 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_50.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_46 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_51;
      tmpvar_51 = abs(((
        fract((tmpvar_50 + 0.5))
       * 2.0) - 1.0));
      vOscillations_47 = (((
        (tmpvar_51 * tmpvar_51)
       * 
        (3.0 - (2.0 * tmpvar_51))
      ) - 0.5) * 2.0);
      highp float tmpvar_52;
      tmpvar_52 = (vOscillations_47.y * vOscillations_47.z);
      fTarget_49 = 1.0;
      fAmount_48 = tmpvar_52;
      if ((tmpvar_52 < 0.0)) {
        fTarget_49 = -1.0;
        fAmount_48 = -(tmpvar_52);
      };
      vPos_44 = (vPos_29 + ((tmpvar_45 * 
        (((mix (
          mix (tmpvar_52, fTarget_49, fAmount_48)
        , fTarget_49, fAmount_48) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_47.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_29 = vPos_44;
    };
    FinalPosition_20 = vPos_29;
  };
  if ((tmpvar_22 > 0.0)) {
    highp vec3 vPos_53;
    vPos_53 = FinalPosition_20;
    highp float fAdjust_54;
    highp float fLength_55;
    fLength_55 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_56;
    tmpvar_56 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_54 = tmpvar_56;
    if ((tmpvar_56 != 0.0)) {
      fAdjust_54 = pow (tmpvar_56, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_57;
    tmpvar_57.zw = vec2(0.0, 0.0);
    tmpvar_57.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_57.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_58;
    highp vec4 tmpvar_59;
    tmpvar_59 = abs(((
      fract((tmpvar_57 + 0.5))
     * 2.0) - 1.0));
    tmpvar_58 = (((
      (tmpvar_59 * tmpvar_59)
     * 
      (3.0 - (2.0 * tmpvar_59))
    ) - 0.5) * 2.0);
    vPos_53.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_58.x + (tmpvar_58.y * tmpvar_58.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_54)));
    vPos_53 = (normalize(vPos_53) * fLength_55);
    FinalPosition_20 = vPos_53;
  };
  tmpvar_16.xyz = FinalPosition_20;
  highp vec4 tmpvar_60;
  tmpvar_60 = (glstate_matrix_mvp * tmpvar_16);
  highp vec4 o_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = (tmpvar_60 * 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63.x = tmpvar_62.x;
  tmpvar_63.y = (tmpvar_62.y * _ProjectionParams.x);
  o_61.xy = (tmpvar_63 + tmpvar_62.w);
  o_61.zw = tmpvar_60.zw;
  highp vec3 tmpvar_64;
  tmpvar_64 = o_61.xyw;
  tmpvar_10 = tmpvar_64;
  highp vec2 tmpvar_65;
  tmpvar_65 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_65;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_66;
  tmpvar_66 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_67;
  v_67.x = _World2Object[0].x;
  v_67.y = _World2Object[1].x;
  v_67.z = _World2Object[2].x;
  v_67.w = _World2Object[3].x;
  highp vec4 v_68;
  v_68.x = _World2Object[0].y;
  v_68.y = _World2Object[1].y;
  v_68.z = _World2Object[2].y;
  v_68.w = _World2Object[3].y;
  highp vec4 v_69;
  v_69.x = _World2Object[0].z;
  v_69.y = _World2Object[1].z;
  v_69.z = _World2Object[2].z;
  v_69.w = _World2Object[3].z;
  highp vec3 tmpvar_70;
  tmpvar_70 = normalize(((
    (v_67.xyz * tmpvar_17.x)
   + 
    (v_68.xyz * tmpvar_17.y)
  ) + (v_69.xyz * tmpvar_17.z)));
  worldNormal_5 = tmpvar_70;
  highp mat3 tmpvar_71;
  tmpvar_71[0] = _Object2World[0].xyz;
  tmpvar_71[1] = _Object2World[1].xyz;
  tmpvar_71[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_72;
  tmpvar_72 = normalize((tmpvar_71 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_72;
  lowp vec3 tmpvar_73;
  tmpvar_73 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_74;
  tmpvar_74 = (tmpvar_73 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75.x = worldTangent_4.x;
  tmpvar_75.y = worldBinormal_3.x;
  tmpvar_75.z = worldNormal_5.x;
  tmpvar_75.w = tmpvar_66.x;
  highp vec4 tmpvar_76;
  tmpvar_76.x = worldTangent_4.y;
  tmpvar_76.y = worldBinormal_3.y;
  tmpvar_76.z = worldNormal_5.y;
  tmpvar_76.w = tmpvar_66.y;
  highp vec4 tmpvar_77;
  tmpvar_77.x = worldTangent_4.z;
  tmpvar_77.y = worldBinormal_3.z;
  tmpvar_77.z = worldNormal_5.z;
  tmpvar_77.w = tmpvar_66.z;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_78;
  tmpvar_78.w = 1.0;
  tmpvar_78.xyz = worldNormal_5;
  mediump vec4 normal_79;
  normal_79 = tmpvar_78;
  mediump vec3 x2_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (normal_79.xyzz * normal_79.yzzx);
  x2_80.x = dot (unity_SHBr, tmpvar_81);
  x2_80.y = dot (unity_SHBg, tmpvar_81);
  x2_80.z = dot (unity_SHBb, tmpvar_81);
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_75;
  xlv_TEXCOORD1 = tmpvar_76;
  xlv_TEXCOORD2 = tmpvar_77;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD7 = tmpvar_7;
  xlv_TEXCOORD8 = (x2_80 + (unity_SHC.xyz * (
    (normal_79.x * normal_79.x)
   - 
    (normal_79.y * normal_79.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 worldN_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_7.x = tmpvar_8.x;
  mediump float tmpvar_9;
  tmpvar_9 = fract(tmpvar_8.y);
  highp float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * 0.0625) + unity_LODFade.y);
  projUV_7.y = tmpvar_10;
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_6 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_6.w * _Color.w);
  tmpvar_5 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_5 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_6.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_6.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_6.x, max (diffuseColor_6.y, diffuseColor_6.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_2.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_2.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_2.z = tmpvar_20;
  mediump vec3 normalWorld_21;
  normalWorld_21 = worldN_2;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_21;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  mediump vec4 outDiffuseOcclusion_24;
  mediump vec4 outNormal_25;
  mediump vec4 emission_26;
  lowp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = tmpvar_4;
  outDiffuseOcclusion_24 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = ((worldN_2 * 0.5) + 0.5);
  outNormal_25 = tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = vec3(0.0, 0.0, 0.0);
  emission_26 = tmpvar_29;
  emission_26.xyz = (emission_26.xyz + (tmpvar_4 * (xlv_TEXCOORD8 + x1_23)));
  outDiffuse_1.xyz = outDiffuseOcclusion_24.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_25;
  gl_FragData[3] = emission_26;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
in vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD7;
out mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_11;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_15;
  highp vec4 tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_16 = tmpvar_1;
  tmpvar_17 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = tmpvar_1.xyz;
  FinalPosition_20 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = (_WindQuality * _WindEnabled);
  if ((tmpvar_22 > 0.0)) {
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_23 * _ST_WindVector.xyz));
    highp mat3 tmpvar_24;
    tmpvar_24[0] = _World2Object[0].xyz;
    tmpvar_24[1] = _World2Object[1].xyz;
    tmpvar_24[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_24 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_22 == 5.0)) {
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    highp float fOffset_26;
    fOffset_26 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_26 = 0.75;
    };
    highp vec4 tmpvar_27;
    tmpvar_27.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_27.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_26);
    highp vec4 tmpvar_28;
    tmpvar_28 = abs(((
      fract((tmpvar_27 + 0.5))
     * 2.0) - 1.0));
    vPos_25 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_17 = tmpvar_2;
    FinalPosition_20 = vPos_25;
  };
  if ((tmpvar_22 >= 3.0)) {
    highp vec3 vPos_29;
    vPos_29 = FinalPosition_20;
    if ((tmpvar_22 == 5.0)) {
      highp vec3 vPos_30;
      vPos_30 = FinalPosition_20;
      highp float fAdherenceScale_31;
      highp vec3 tmpvar_32;
      tmpvar_32 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_33;
      tmpvar_33 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_34;
      highp float fOscillation_35;
      fOscillation_35 = 1.0;
      highp float fAmount_36;
      highp float fTarget_37;
      highp vec4 tmpvar_38;
      tmpvar_38.x = (tmpvar_33 + _glesMultiTexCoord0.w);
      tmpvar_38.y = ((tmpvar_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_38.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_33 + _glesMultiTexCoord0.w));
      tmpvar_38.w = ((tmpvar_33 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      vOscillations_34 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      highp float tmpvar_40;
      tmpvar_40 = (vOscillations_34.y * vOscillations_34.z);
      fTarget_37 = 1.0;
      fAmount_36 = tmpvar_40;
      if ((tmpvar_40 < 0.0)) {
        fTarget_37 = -1.0;
        fAmount_36 = -(tmpvar_40);
      };
      fOscillation_35 = (((
        (mix (mix (tmpvar_40, fTarget_37, fAmount_36), fTarget_37, fAmount_36) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_34.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_34.w * _ST_WindBranchWhip.x)));
      vPos_30 = (FinalPosition_20 + ((tmpvar_32 * fOscillation_35) * _ST_WindBranch.y));
      highp vec4 tmpvar_41;
      tmpvar_41.zw = vec2(0.0, 0.0);
      tmpvar_41.x = ((tmpvar_33 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_41.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      fAdherenceScale_31 = (1.0 - ((
        ((tmpvar_42.x * tmpvar_42.y) * tmpvar_42.x)
       * tmpvar_42.y) * _ST_WindTurbulences.x));
      fAdherenceScale_31 = (fAdherenceScale_31 + ((vOscillations_34.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_30 = (vPos_30 + ((
        ((vRotatedBranchAnchor_18 - vPos_30) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_31) * _glesMultiTexCoord0.z));
      vPos_29 = vPos_30;
    } else {
      highp vec3 vPos_44;
      vPos_44 = vPos_29;
      highp vec3 tmpvar_45;
      tmpvar_45 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_46;
      tmpvar_46 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_47;
      highp float fAmount_48;
      highp float fTarget_49;
      highp vec4 tmpvar_50;
      tmpvar_50.w = 0.0;
      tmpvar_50.x = (tmpvar_46 + _glesMultiTexCoord0.w);
      tmpvar_50.y = ((tmpvar_46 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_50.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_46 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_51;
      tmpvar_51 = abs(((
        fract((tmpvar_50 + 0.5))
       * 2.0) - 1.0));
      vOscillations_47 = (((
        (tmpvar_51 * tmpvar_51)
       * 
        (3.0 - (2.0 * tmpvar_51))
      ) - 0.5) * 2.0);
      highp float tmpvar_52;
      tmpvar_52 = (vOscillations_47.y * vOscillations_47.z);
      fTarget_49 = 1.0;
      fAmount_48 = tmpvar_52;
      if ((tmpvar_52 < 0.0)) {
        fTarget_49 = -1.0;
        fAmount_48 = -(tmpvar_52);
      };
      vPos_44 = (vPos_29 + ((tmpvar_45 * 
        (((mix (
          mix (tmpvar_52, fTarget_49, fAmount_48)
        , fTarget_49, fAmount_48) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_47.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_29 = vPos_44;
    };
    FinalPosition_20 = vPos_29;
  };
  if ((tmpvar_22 > 0.0)) {
    highp vec3 vPos_53;
    vPos_53 = FinalPosition_20;
    highp float fAdjust_54;
    highp float fLength_55;
    fLength_55 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_56;
    tmpvar_56 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_54 = tmpvar_56;
    if ((tmpvar_56 != 0.0)) {
      fAdjust_54 = pow (tmpvar_56, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_57;
    tmpvar_57.zw = vec2(0.0, 0.0);
    tmpvar_57.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_57.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_58;
    highp vec4 tmpvar_59;
    tmpvar_59 = abs(((
      fract((tmpvar_57 + 0.5))
     * 2.0) - 1.0));
    tmpvar_58 = (((
      (tmpvar_59 * tmpvar_59)
     * 
      (3.0 - (2.0 * tmpvar_59))
    ) - 0.5) * 2.0);
    vPos_53.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_58.x + (tmpvar_58.y * tmpvar_58.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_54)));
    vPos_53 = (normalize(vPos_53) * fLength_55);
    FinalPosition_20 = vPos_53;
  };
  tmpvar_16.xyz = FinalPosition_20;
  highp vec4 tmpvar_60;
  tmpvar_60 = (glstate_matrix_mvp * tmpvar_16);
  highp vec4 o_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = (tmpvar_60 * 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63.x = tmpvar_62.x;
  tmpvar_63.y = (tmpvar_62.y * _ProjectionParams.x);
  o_61.xy = (tmpvar_63 + tmpvar_62.w);
  o_61.zw = tmpvar_60.zw;
  highp vec3 tmpvar_64;
  tmpvar_64 = o_61.xyw;
  tmpvar_10 = tmpvar_64;
  highp vec2 tmpvar_65;
  tmpvar_65 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_65;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_66;
  tmpvar_66 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_67;
  v_67.x = _World2Object[0].x;
  v_67.y = _World2Object[1].x;
  v_67.z = _World2Object[2].x;
  v_67.w = _World2Object[3].x;
  highp vec4 v_68;
  v_68.x = _World2Object[0].y;
  v_68.y = _World2Object[1].y;
  v_68.z = _World2Object[2].y;
  v_68.w = _World2Object[3].y;
  highp vec4 v_69;
  v_69.x = _World2Object[0].z;
  v_69.y = _World2Object[1].z;
  v_69.z = _World2Object[2].z;
  v_69.w = _World2Object[3].z;
  highp vec3 tmpvar_70;
  tmpvar_70 = normalize(((
    (v_67.xyz * tmpvar_17.x)
   + 
    (v_68.xyz * tmpvar_17.y)
  ) + (v_69.xyz * tmpvar_17.z)));
  worldNormal_5 = tmpvar_70;
  highp mat3 tmpvar_71;
  tmpvar_71[0] = _Object2World[0].xyz;
  tmpvar_71[1] = _Object2World[1].xyz;
  tmpvar_71[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_72;
  tmpvar_72 = normalize((tmpvar_71 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_72;
  lowp vec3 tmpvar_73;
  tmpvar_73 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_74;
  tmpvar_74 = (tmpvar_73 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75.x = worldTangent_4.x;
  tmpvar_75.y = worldBinormal_3.x;
  tmpvar_75.z = worldNormal_5.x;
  tmpvar_75.w = tmpvar_66.x;
  highp vec4 tmpvar_76;
  tmpvar_76.x = worldTangent_4.y;
  tmpvar_76.y = worldBinormal_3.y;
  tmpvar_76.z = worldNormal_5.y;
  tmpvar_76.w = tmpvar_66.y;
  highp vec4 tmpvar_77;
  tmpvar_77.x = worldTangent_4.z;
  tmpvar_77.y = worldBinormal_3.z;
  tmpvar_77.z = worldNormal_5.z;
  tmpvar_77.w = tmpvar_66.z;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_78;
  tmpvar_78.w = 1.0;
  tmpvar_78.xyz = worldNormal_5;
  mediump vec4 normal_79;
  normal_79 = tmpvar_78;
  mediump vec3 x2_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (normal_79.xyzz * normal_79.yzzx);
  x2_80.x = dot (unity_SHBr, tmpvar_81);
  x2_80.y = dot (unity_SHBg, tmpvar_81);
  x2_80.z = dot (unity_SHBb, tmpvar_81);
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_75;
  xlv_TEXCOORD1 = tmpvar_76;
  xlv_TEXCOORD2 = tmpvar_77;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD7 = tmpvar_7;
  xlv_TEXCOORD8 = (x2_80 + (unity_SHC.xyz * (
    (normal_79.x * normal_79.x)
   - 
    (normal_79.y * normal_79.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 worldN_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_7.x = tmpvar_8.x;
  mediump float tmpvar_9;
  tmpvar_9 = fract(tmpvar_8.y);
  highp float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * 0.0625) + unity_LODFade.y);
  projUV_7.y = tmpvar_10;
  lowp float x_11;
  x_11 = (texture (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_6 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_6.w * _Color.w);
  tmpvar_5 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_5 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_6.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_6.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_6.x, max (diffuseColor_6.y, diffuseColor_6.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_2.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_2.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_2.z = tmpvar_20;
  mediump vec3 normalWorld_21;
  normalWorld_21 = worldN_2;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_21;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  mediump vec4 outDiffuseOcclusion_24;
  mediump vec4 outNormal_25;
  mediump vec4 emission_26;
  lowp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = tmpvar_4;
  outDiffuseOcclusion_24 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = ((worldN_2 * 0.5) + 0.5);
  outNormal_25 = tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = vec3(0.0, 0.0, 0.0);
  emission_26 = tmpvar_29;
  emission_26.xyz = (emission_26.xyz + (tmpvar_4 * (xlv_TEXCOORD8 + x1_23)));
  outDiffuse_1.xyz = outDiffuseOcclusion_24.xyz;
  outDiffuse_1.w = 1.0;
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_25;
  _glesFragData[3] = emission_26;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_16 = tmpvar_21;
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_22;
    tmpvar_22 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_23;
    isBestWind_23 = (tmpvar_18 == 4.0);
    bool bLeaf2_24;
    bLeaf2_24 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    highp vec3 vDirection_26;
    vDirection_26 = tmpvar_2;
    highp float tmpvar_27;
    if (bLeaf2_24) {
      tmpvar_27 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_28;
    if (bLeaf2_24) {
      tmpvar_28 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_29;
    highp vec4 tmpvar_30;
    tmpvar_30.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_30.x = (tmpvar_27 + tmpvar_22);
    highp vec4 tmpvar_31;
    tmpvar_31 = abs(((
      fract((tmpvar_30 + 0.5))
     * 2.0) - 1.0));
    vPos_29 = (tmpvar_21 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_28 * (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_26 = tmpvar_2;
    vPos_25 = vPos_29;
    if (isBestWind_23) {
      highp vec3 tmpvar_32;
      tmpvar_32 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_33;
      if (bLeaf2_24) {
        tmpvar_33 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_34;
      if (bLeaf2_24) {
        tmpvar_34 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_35;
      if (bLeaf2_24) {
        tmpvar_35 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_36;
      if (bLeaf2_24) {
        tmpvar_36 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_37;
      if (bLeaf2_24) {
        tmpvar_37 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_37 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_38;
      if (bLeaf2_24) {
        tmpvar_38 = bool(1);
      } else {
        tmpvar_38 = bool(1);
      };
      highp float fTwitch_39;
      highp vec3 vAxis_40;
      highp vec3 tmpvar_41;
      tmpvar_41 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_42;
      tmpvar_42 = ((tmpvar_41.x + tmpvar_41.y) + tmpvar_41.z);
      highp vec4 tmpvar_43;
      tmpvar_43.x = (tmpvar_33 + tmpvar_42);
      tmpvar_43.y = ((tmpvar_33 * 0.75) - tmpvar_42);
      tmpvar_43.z = ((tmpvar_33 * 0.01) + tmpvar_42);
      tmpvar_43.w = (tmpvar_33 + tmpvar_42);
      highp vec4 tmpvar_44;
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      tmpvar_44 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = sqrt(dot (vPos_29, vPos_29));
      highp float fAngle_47;
      fAngle_47 = ((_glesMultiTexCoord2.x * tmpvar_35) * (tmpvar_44.x + (tmpvar_44.y * tmpvar_44.y)));
      highp vec2 vSinCos_48;
      vSinCos_48.x = sin(fAngle_47);
      vSinCos_48.y = cos(fAngle_47);
      highp float tmpvar_49;
      tmpvar_49 = (1.0 - vSinCos_48.y);
      highp mat3 tmpvar_50;
      tmpvar_50[0].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.x) + vSinCos_48.y);
      tmpvar_50[0].y = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.y) + (vSinCos_48.x * tmpvar_32.z));
      tmpvar_50[0].z = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.z) - (vSinCos_48.x * tmpvar_32.y));
      tmpvar_50[1].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.y) - (vSinCos_48.x * tmpvar_32.z));
      tmpvar_50[1].y = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.y) + vSinCos_48.y);
      tmpvar_50[1].z = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.z) + (vSinCos_48.x * tmpvar_32.x));
      tmpvar_50[2].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.z) + (vSinCos_48.x * tmpvar_32.y));
      tmpvar_50[2].y = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.z) - (vSinCos_48.x * tmpvar_32.x));
      tmpvar_50[2].z = (((tmpvar_49 * tmpvar_32.z) * tmpvar_32.z) + vSinCos_48.y);
      highp vec3 tmpvar_51;
      tmpvar_51 = ((tmpvar_32.yzx * vRotatedWindVector_15.zxy) - (tmpvar_32.zxy * vRotatedWindVector_15.yzx));
      vAxis_40.xz = tmpvar_51.xz;
      highp float tmpvar_52;
      tmpvar_52 = clamp (dot (vRotatedWindVector_15, tmpvar_32), -1.0, 1.0);
      vAxis_40.y = (tmpvar_51.y + tmpvar_52);
      highp vec3 tmpvar_53;
      tmpvar_53 = normalize(vAxis_40);
      vAxis_40 = tmpvar_53;
      highp float tmpvar_54;
      tmpvar_54 = (1.570796 - (sign(tmpvar_52) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_52))) * (1.570796 + (abs(tmpvar_52) * (-0.2146018 + 
          (abs(tmpvar_52) * (0.08656672 + (abs(tmpvar_52) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_55;
      tmpvar_55 = (tmpvar_44.y - (tmpvar_44.x * tmpvar_44.x));
      fTwitch_39 = 0.0;
      if (tmpvar_38) {
        highp float fTime_56;
        fTime_56 = (tmpvar_37.z + tmpvar_42);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_39 = (tmpvar_37.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_37.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_54 * tmpvar_36)
       + 
        (tmpvar_55 * tmpvar_34)
      ) + fTwitch_39));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.y) + (vSinCos_61.x * tmpvar_53.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.z) - (vSinCos_61.x * tmpvar_53.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.y) - (vSinCos_61.x * tmpvar_53.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.z) + (vSinCos_61.x * tmpvar_53.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.z) + (vSinCos_61.x * tmpvar_53.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.z) - (vSinCos_61.x * tmpvar_53.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_53.z) * tmpvar_53.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_50 * tmpvar_63);
      vDirection_26 = (tmpvar_64 * _glesNormal);
      vPos_25 = (normalize((tmpvar_64 * vPos_29)) * tmpvar_46);
    };
    tmpvar_13 = vDirection_26;
    FinalPosition_16 = vPos_25;
  };
  highp vec3 tmpvar_65;
  tmpvar_65 = (FinalPosition_16 + _glesMultiTexCoord1.xyz);
  FinalPosition_16 = tmpvar_65;
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_66;
    vPos_66 = tmpvar_65;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_67;
      vPos_67 = tmpvar_65;
      highp float fAdherenceScale_68;
      highp vec3 tmpvar_69;
      tmpvar_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_70;
      tmpvar_70 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_71;
      highp float fOscillation_72;
      fOscillation_72 = 1.0;
      highp float fAmount_73;
      highp float fTarget_74;
      highp vec4 tmpvar_75;
      tmpvar_75.x = (tmpvar_70 + _glesMultiTexCoord0.w);
      tmpvar_75.y = ((tmpvar_70 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_75.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_70 + _glesMultiTexCoord0.w));
      tmpvar_75.w = ((tmpvar_70 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      vOscillations_71 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      highp float tmpvar_77;
      tmpvar_77 = (vOscillations_71.y * vOscillations_71.z);
      fTarget_74 = 1.0;
      fAmount_73 = tmpvar_77;
      if ((tmpvar_77 < 0.0)) {
        fTarget_74 = -1.0;
        fAmount_73 = -(tmpvar_77);
      };
      fOscillation_72 = (((
        (mix (mix (tmpvar_77, fTarget_74, fAmount_73), fTarget_74, fAmount_73) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_71.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_71.w * _ST_WindBranchWhip.x)));
      vPos_67 = (tmpvar_65 + ((tmpvar_69 * fOscillation_72) * _ST_WindBranch.y));
      highp vec4 tmpvar_78;
      tmpvar_78.zw = vec2(0.0, 0.0);
      tmpvar_78.x = ((tmpvar_70 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_78.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_79;
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      tmpvar_79 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((
        ((tmpvar_79.x * tmpvar_79.y) * tmpvar_79.x)
       * tmpvar_79.y) * _ST_WindTurbulences.x));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_71.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_67 = (vPos_67 + ((
        ((vRotatedBranchAnchor_14 - vPos_67) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_66 = vPos_67;
    } else {
      highp vec3 vPos_81;
      vPos_81 = vPos_66;
      highp vec3 tmpvar_82;
      tmpvar_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_83;
      tmpvar_83 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_84;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (tmpvar_83 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((tmpvar_83 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_83 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_84 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_84.y * vOscillations_84.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      vPos_81 = (vPos_66 + ((tmpvar_82 * 
        (((mix (
          mix (tmpvar_89, fTarget_86, fAmount_85)
        , fTarget_86, fAmount_85) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_84.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_66 = vPos_81;
    };
    FinalPosition_16 = vPos_66;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = FinalPosition_16;
    highp float fAdjust_91;
    highp float fLength_92;
    fLength_92 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_93;
    tmpvar_93 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_91 = tmpvar_93;
    if ((tmpvar_93 != 0.0)) {
      fAdjust_91 = pow (tmpvar_93, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_94;
    tmpvar_94.zw = vec2(0.0, 0.0);
    tmpvar_94.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_94.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_95;
    highp vec4 tmpvar_96;
    tmpvar_96 = abs(((
      fract((tmpvar_94 + 0.5))
     * 2.0) - 1.0));
    tmpvar_95 = (((
      (tmpvar_96 * tmpvar_96)
     * 
      (3.0 - (2.0 * tmpvar_96))
    ) - 0.5) * 2.0);
    vPos_90.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_95.x + (tmpvar_95.y * tmpvar_95.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_91)));
    vPos_90 = (normalize(vPos_90) * fLength_92);
    FinalPosition_16 = vPos_90;
  };
  tmpvar_12.xyz = FinalPosition_16;
  highp vec4 tmpvar_97;
  tmpvar_97 = (glstate_matrix_mvp * tmpvar_12);
  highp vec4 o_98;
  highp vec4 tmpvar_99;
  tmpvar_99 = (tmpvar_97 * 0.5);
  highp vec2 tmpvar_100;
  tmpvar_100.x = tmpvar_99.x;
  tmpvar_100.y = (tmpvar_99.y * _ProjectionParams.x);
  o_98.xy = (tmpvar_100 + tmpvar_99.w);
  o_98.zw = tmpvar_97.zw;
  highp vec3 tmpvar_101;
  tmpvar_101 = o_98.xyw;
  tmpvar_9 = tmpvar_101;
  highp vec2 tmpvar_102;
  tmpvar_102 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_102;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_103;
  v_103.x = _World2Object[0].x;
  v_103.y = _World2Object[1].x;
  v_103.z = _World2Object[2].x;
  v_103.w = _World2Object[3].x;
  highp vec4 v_104;
  v_104.x = _World2Object[0].y;
  v_104.y = _World2Object[1].y;
  v_104.z = _World2Object[2].y;
  v_104.w = _World2Object[3].y;
  highp vec4 v_105;
  v_105.x = _World2Object[0].z;
  v_105.y = _World2Object[1].z;
  v_105.z = _World2Object[2].z;
  v_105.w = _World2Object[3].z;
  highp vec3 tmpvar_106;
  tmpvar_106 = normalize(((
    (v_103.xyz * tmpvar_13.x)
   + 
    (v_104.xyz * tmpvar_13.y)
  ) + (v_105.xyz * tmpvar_13.z)));
  worldNormal_3 = tmpvar_106;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_107;
  tmpvar_107.w = 1.0;
  tmpvar_107.xyz = worldNormal_3;
  mediump vec4 normal_108;
  normal_108 = tmpvar_107;
  mediump vec3 x2_109;
  mediump vec4 tmpvar_110;
  tmpvar_110 = (normal_108.xyzz * normal_108.yzzx);
  x2_109.x = dot (unity_SHBr, tmpvar_110);
  x2_109.y = dot (unity_SHBg, tmpvar_110);
  x2_109.z = dot (unity_SHBb, tmpvar_110);
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_109 + (unity_SHC.xyz * (
    (normal_108.x * normal_108.x)
   - 
    (normal_108.y * normal_108.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_16;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_3;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_17;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  mediump vec4 outDiffuseOcclusion_20;
  mediump vec4 outNormal_21;
  mediump vec4 emission_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = tmpvar_5;
  outDiffuseOcclusion_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  emission_22 = tmpvar_25;
  emission_22.xyz = (emission_22.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_19)));
  outDiffuse_1.xyz = outDiffuseOcclusion_20.xyz;
  outEmission_2.w = emission_22.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_22.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_21;
  gl_FragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD6;
out mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_16 = tmpvar_21;
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_22;
    tmpvar_22 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_23;
    isBestWind_23 = (tmpvar_18 == 4.0);
    bool bLeaf2_24;
    bLeaf2_24 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    highp vec3 vDirection_26;
    vDirection_26 = tmpvar_2;
    highp float tmpvar_27;
    if (bLeaf2_24) {
      tmpvar_27 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_28;
    if (bLeaf2_24) {
      tmpvar_28 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_29;
    highp vec4 tmpvar_30;
    tmpvar_30.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_30.x = (tmpvar_27 + tmpvar_22);
    highp vec4 tmpvar_31;
    tmpvar_31 = abs(((
      fract((tmpvar_30 + 0.5))
     * 2.0) - 1.0));
    vPos_29 = (tmpvar_21 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_28 * (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_26 = tmpvar_2;
    vPos_25 = vPos_29;
    if (isBestWind_23) {
      highp vec3 tmpvar_32;
      tmpvar_32 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_33;
      if (bLeaf2_24) {
        tmpvar_33 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_34;
      if (bLeaf2_24) {
        tmpvar_34 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_35;
      if (bLeaf2_24) {
        tmpvar_35 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_36;
      if (bLeaf2_24) {
        tmpvar_36 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_37;
      if (bLeaf2_24) {
        tmpvar_37 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_37 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_38;
      if (bLeaf2_24) {
        tmpvar_38 = bool(1);
      } else {
        tmpvar_38 = bool(1);
      };
      highp float fTwitch_39;
      highp vec3 vAxis_40;
      highp vec3 tmpvar_41;
      tmpvar_41 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_42;
      tmpvar_42 = ((tmpvar_41.x + tmpvar_41.y) + tmpvar_41.z);
      highp vec4 tmpvar_43;
      tmpvar_43.x = (tmpvar_33 + tmpvar_42);
      tmpvar_43.y = ((tmpvar_33 * 0.75) - tmpvar_42);
      tmpvar_43.z = ((tmpvar_33 * 0.01) + tmpvar_42);
      tmpvar_43.w = (tmpvar_33 + tmpvar_42);
      highp vec4 tmpvar_44;
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      tmpvar_44 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = sqrt(dot (vPos_29, vPos_29));
      highp float fAngle_47;
      fAngle_47 = ((_glesMultiTexCoord2.x * tmpvar_35) * (tmpvar_44.x + (tmpvar_44.y * tmpvar_44.y)));
      highp vec2 vSinCos_48;
      vSinCos_48.x = sin(fAngle_47);
      vSinCos_48.y = cos(fAngle_47);
      highp float tmpvar_49;
      tmpvar_49 = (1.0 - vSinCos_48.y);
      highp mat3 tmpvar_50;
      tmpvar_50[0].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.x) + vSinCos_48.y);
      tmpvar_50[0].y = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.y) + (vSinCos_48.x * tmpvar_32.z));
      tmpvar_50[0].z = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.z) - (vSinCos_48.x * tmpvar_32.y));
      tmpvar_50[1].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.y) - (vSinCos_48.x * tmpvar_32.z));
      tmpvar_50[1].y = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.y) + vSinCos_48.y);
      tmpvar_50[1].z = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.z) + (vSinCos_48.x * tmpvar_32.x));
      tmpvar_50[2].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.z) + (vSinCos_48.x * tmpvar_32.y));
      tmpvar_50[2].y = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.z) - (vSinCos_48.x * tmpvar_32.x));
      tmpvar_50[2].z = (((tmpvar_49 * tmpvar_32.z) * tmpvar_32.z) + vSinCos_48.y);
      highp vec3 tmpvar_51;
      tmpvar_51 = ((tmpvar_32.yzx * vRotatedWindVector_15.zxy) - (tmpvar_32.zxy * vRotatedWindVector_15.yzx));
      vAxis_40.xz = tmpvar_51.xz;
      highp float tmpvar_52;
      tmpvar_52 = clamp (dot (vRotatedWindVector_15, tmpvar_32), -1.0, 1.0);
      vAxis_40.y = (tmpvar_51.y + tmpvar_52);
      highp vec3 tmpvar_53;
      tmpvar_53 = normalize(vAxis_40);
      vAxis_40 = tmpvar_53;
      highp float tmpvar_54;
      tmpvar_54 = (1.570796 - (sign(tmpvar_52) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_52))) * (1.570796 + (abs(tmpvar_52) * (-0.2146018 + 
          (abs(tmpvar_52) * (0.08656672 + (abs(tmpvar_52) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_55;
      tmpvar_55 = (tmpvar_44.y - (tmpvar_44.x * tmpvar_44.x));
      fTwitch_39 = 0.0;
      if (tmpvar_38) {
        highp float fTime_56;
        fTime_56 = (tmpvar_37.z + tmpvar_42);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_39 = (tmpvar_37.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_37.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_54 * tmpvar_36)
       + 
        (tmpvar_55 * tmpvar_34)
      ) + fTwitch_39));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.y) + (vSinCos_61.x * tmpvar_53.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.z) - (vSinCos_61.x * tmpvar_53.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.y) - (vSinCos_61.x * tmpvar_53.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.z) + (vSinCos_61.x * tmpvar_53.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.z) + (vSinCos_61.x * tmpvar_53.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.z) - (vSinCos_61.x * tmpvar_53.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_53.z) * tmpvar_53.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_50 * tmpvar_63);
      vDirection_26 = (tmpvar_64 * _glesNormal);
      vPos_25 = (normalize((tmpvar_64 * vPos_29)) * tmpvar_46);
    };
    tmpvar_13 = vDirection_26;
    FinalPosition_16 = vPos_25;
  };
  highp vec3 tmpvar_65;
  tmpvar_65 = (FinalPosition_16 + _glesMultiTexCoord1.xyz);
  FinalPosition_16 = tmpvar_65;
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_66;
    vPos_66 = tmpvar_65;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_67;
      vPos_67 = tmpvar_65;
      highp float fAdherenceScale_68;
      highp vec3 tmpvar_69;
      tmpvar_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_70;
      tmpvar_70 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_71;
      highp float fOscillation_72;
      fOscillation_72 = 1.0;
      highp float fAmount_73;
      highp float fTarget_74;
      highp vec4 tmpvar_75;
      tmpvar_75.x = (tmpvar_70 + _glesMultiTexCoord0.w);
      tmpvar_75.y = ((tmpvar_70 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_75.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_70 + _glesMultiTexCoord0.w));
      tmpvar_75.w = ((tmpvar_70 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      vOscillations_71 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      highp float tmpvar_77;
      tmpvar_77 = (vOscillations_71.y * vOscillations_71.z);
      fTarget_74 = 1.0;
      fAmount_73 = tmpvar_77;
      if ((tmpvar_77 < 0.0)) {
        fTarget_74 = -1.0;
        fAmount_73 = -(tmpvar_77);
      };
      fOscillation_72 = (((
        (mix (mix (tmpvar_77, fTarget_74, fAmount_73), fTarget_74, fAmount_73) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_71.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_71.w * _ST_WindBranchWhip.x)));
      vPos_67 = (tmpvar_65 + ((tmpvar_69 * fOscillation_72) * _ST_WindBranch.y));
      highp vec4 tmpvar_78;
      tmpvar_78.zw = vec2(0.0, 0.0);
      tmpvar_78.x = ((tmpvar_70 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_78.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_79;
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      tmpvar_79 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((
        ((tmpvar_79.x * tmpvar_79.y) * tmpvar_79.x)
       * tmpvar_79.y) * _ST_WindTurbulences.x));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_71.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_67 = (vPos_67 + ((
        ((vRotatedBranchAnchor_14 - vPos_67) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_66 = vPos_67;
    } else {
      highp vec3 vPos_81;
      vPos_81 = vPos_66;
      highp vec3 tmpvar_82;
      tmpvar_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_83;
      tmpvar_83 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_84;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (tmpvar_83 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((tmpvar_83 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_83 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_84 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_84.y * vOscillations_84.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      vPos_81 = (vPos_66 + ((tmpvar_82 * 
        (((mix (
          mix (tmpvar_89, fTarget_86, fAmount_85)
        , fTarget_86, fAmount_85) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_84.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_66 = vPos_81;
    };
    FinalPosition_16 = vPos_66;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = FinalPosition_16;
    highp float fAdjust_91;
    highp float fLength_92;
    fLength_92 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_93;
    tmpvar_93 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_91 = tmpvar_93;
    if ((tmpvar_93 != 0.0)) {
      fAdjust_91 = pow (tmpvar_93, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_94;
    tmpvar_94.zw = vec2(0.0, 0.0);
    tmpvar_94.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_94.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_95;
    highp vec4 tmpvar_96;
    tmpvar_96 = abs(((
      fract((tmpvar_94 + 0.5))
     * 2.0) - 1.0));
    tmpvar_95 = (((
      (tmpvar_96 * tmpvar_96)
     * 
      (3.0 - (2.0 * tmpvar_96))
    ) - 0.5) * 2.0);
    vPos_90.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_95.x + (tmpvar_95.y * tmpvar_95.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_91)));
    vPos_90 = (normalize(vPos_90) * fLength_92);
    FinalPosition_16 = vPos_90;
  };
  tmpvar_12.xyz = FinalPosition_16;
  highp vec4 tmpvar_97;
  tmpvar_97 = (glstate_matrix_mvp * tmpvar_12);
  highp vec4 o_98;
  highp vec4 tmpvar_99;
  tmpvar_99 = (tmpvar_97 * 0.5);
  highp vec2 tmpvar_100;
  tmpvar_100.x = tmpvar_99.x;
  tmpvar_100.y = (tmpvar_99.y * _ProjectionParams.x);
  o_98.xy = (tmpvar_100 + tmpvar_99.w);
  o_98.zw = tmpvar_97.zw;
  highp vec3 tmpvar_101;
  tmpvar_101 = o_98.xyw;
  tmpvar_9 = tmpvar_101;
  highp vec2 tmpvar_102;
  tmpvar_102 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_102;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_103;
  v_103.x = _World2Object[0].x;
  v_103.y = _World2Object[1].x;
  v_103.z = _World2Object[2].x;
  v_103.w = _World2Object[3].x;
  highp vec4 v_104;
  v_104.x = _World2Object[0].y;
  v_104.y = _World2Object[1].y;
  v_104.z = _World2Object[2].y;
  v_104.w = _World2Object[3].y;
  highp vec4 v_105;
  v_105.x = _World2Object[0].z;
  v_105.y = _World2Object[1].z;
  v_105.z = _World2Object[2].z;
  v_105.w = _World2Object[3].z;
  highp vec3 tmpvar_106;
  tmpvar_106 = normalize(((
    (v_103.xyz * tmpvar_13.x)
   + 
    (v_104.xyz * tmpvar_13.y)
  ) + (v_105.xyz * tmpvar_13.z)));
  worldNormal_3 = tmpvar_106;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_107;
  tmpvar_107.w = 1.0;
  tmpvar_107.xyz = worldNormal_3;
  mediump vec4 normal_108;
  normal_108 = tmpvar_107;
  mediump vec3 x2_109;
  mediump vec4 tmpvar_110;
  tmpvar_110 = (normal_108.xyzz * normal_108.yzzx);
  x2_109.x = dot (unity_SHBr, tmpvar_110);
  x2_109.y = dot (unity_SHBg, tmpvar_110);
  x2_109.z = dot (unity_SHBb, tmpvar_110);
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_109 + (unity_SHC.xyz * (
    (normal_108.x * normal_108.x)
   - 
    (normal_108.y * normal_108.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_16;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_3;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_17;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  mediump vec4 outDiffuseOcclusion_20;
  mediump vec4 outNormal_21;
  mediump vec4 emission_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = tmpvar_5;
  outDiffuseOcclusion_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  emission_22 = tmpvar_25;
  emission_22.xyz = (emission_22.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_19)));
  outDiffuse_1.xyz = outDiffuseOcclusion_20.xyz;
  outEmission_2.w = emission_22.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_22.xyz));
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_21;
  _glesFragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_16 = tmpvar_21;
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_22;
    tmpvar_22 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_23;
    isBestWind_23 = (tmpvar_18 == 4.0);
    bool bLeaf2_24;
    bLeaf2_24 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    highp vec3 vDirection_26;
    vDirection_26 = tmpvar_2;
    highp float tmpvar_27;
    if (bLeaf2_24) {
      tmpvar_27 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_28;
    if (bLeaf2_24) {
      tmpvar_28 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_29;
    highp vec4 tmpvar_30;
    tmpvar_30.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_30.x = (tmpvar_27 + tmpvar_22);
    highp vec4 tmpvar_31;
    tmpvar_31 = abs(((
      fract((tmpvar_30 + 0.5))
     * 2.0) - 1.0));
    vPos_29 = (tmpvar_21 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_28 * (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_26 = tmpvar_2;
    vPos_25 = vPos_29;
    if (isBestWind_23) {
      highp vec3 tmpvar_32;
      tmpvar_32 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_33;
      if (bLeaf2_24) {
        tmpvar_33 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_34;
      if (bLeaf2_24) {
        tmpvar_34 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_35;
      if (bLeaf2_24) {
        tmpvar_35 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_36;
      if (bLeaf2_24) {
        tmpvar_36 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_37;
      if (bLeaf2_24) {
        tmpvar_37 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_37 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_38;
      if (bLeaf2_24) {
        tmpvar_38 = bool(1);
      } else {
        tmpvar_38 = bool(1);
      };
      highp float fTwitch_39;
      highp vec3 vAxis_40;
      highp vec3 tmpvar_41;
      tmpvar_41 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_42;
      tmpvar_42 = ((tmpvar_41.x + tmpvar_41.y) + tmpvar_41.z);
      highp vec4 tmpvar_43;
      tmpvar_43.x = (tmpvar_33 + tmpvar_42);
      tmpvar_43.y = ((tmpvar_33 * 0.75) - tmpvar_42);
      tmpvar_43.z = ((tmpvar_33 * 0.01) + tmpvar_42);
      tmpvar_43.w = (tmpvar_33 + tmpvar_42);
      highp vec4 tmpvar_44;
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      tmpvar_44 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = sqrt(dot (vPos_29, vPos_29));
      highp float fAngle_47;
      fAngle_47 = ((_glesMultiTexCoord2.x * tmpvar_35) * (tmpvar_44.x + (tmpvar_44.y * tmpvar_44.y)));
      highp vec2 vSinCos_48;
      vSinCos_48.x = sin(fAngle_47);
      vSinCos_48.y = cos(fAngle_47);
      highp float tmpvar_49;
      tmpvar_49 = (1.0 - vSinCos_48.y);
      highp mat3 tmpvar_50;
      tmpvar_50[0].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.x) + vSinCos_48.y);
      tmpvar_50[0].y = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.y) + (vSinCos_48.x * tmpvar_32.z));
      tmpvar_50[0].z = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.z) - (vSinCos_48.x * tmpvar_32.y));
      tmpvar_50[1].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.y) - (vSinCos_48.x * tmpvar_32.z));
      tmpvar_50[1].y = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.y) + vSinCos_48.y);
      tmpvar_50[1].z = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.z) + (vSinCos_48.x * tmpvar_32.x));
      tmpvar_50[2].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.z) + (vSinCos_48.x * tmpvar_32.y));
      tmpvar_50[2].y = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.z) - (vSinCos_48.x * tmpvar_32.x));
      tmpvar_50[2].z = (((tmpvar_49 * tmpvar_32.z) * tmpvar_32.z) + vSinCos_48.y);
      highp vec3 tmpvar_51;
      tmpvar_51 = ((tmpvar_32.yzx * vRotatedWindVector_15.zxy) - (tmpvar_32.zxy * vRotatedWindVector_15.yzx));
      vAxis_40.xz = tmpvar_51.xz;
      highp float tmpvar_52;
      tmpvar_52 = clamp (dot (vRotatedWindVector_15, tmpvar_32), -1.0, 1.0);
      vAxis_40.y = (tmpvar_51.y + tmpvar_52);
      highp vec3 tmpvar_53;
      tmpvar_53 = normalize(vAxis_40);
      vAxis_40 = tmpvar_53;
      highp float tmpvar_54;
      tmpvar_54 = (1.570796 - (sign(tmpvar_52) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_52))) * (1.570796 + (abs(tmpvar_52) * (-0.2146018 + 
          (abs(tmpvar_52) * (0.08656672 + (abs(tmpvar_52) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_55;
      tmpvar_55 = (tmpvar_44.y - (tmpvar_44.x * tmpvar_44.x));
      fTwitch_39 = 0.0;
      if (tmpvar_38) {
        highp float fTime_56;
        fTime_56 = (tmpvar_37.z + tmpvar_42);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_39 = (tmpvar_37.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_37.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_54 * tmpvar_36)
       + 
        (tmpvar_55 * tmpvar_34)
      ) + fTwitch_39));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.y) + (vSinCos_61.x * tmpvar_53.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.z) - (vSinCos_61.x * tmpvar_53.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.y) - (vSinCos_61.x * tmpvar_53.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.z) + (vSinCos_61.x * tmpvar_53.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.z) + (vSinCos_61.x * tmpvar_53.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.z) - (vSinCos_61.x * tmpvar_53.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_53.z) * tmpvar_53.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_50 * tmpvar_63);
      vDirection_26 = (tmpvar_64 * _glesNormal);
      vPos_25 = (normalize((tmpvar_64 * vPos_29)) * tmpvar_46);
    };
    tmpvar_13 = vDirection_26;
    FinalPosition_16 = vPos_25;
  };
  highp vec3 tmpvar_65;
  tmpvar_65 = (FinalPosition_16 + _glesMultiTexCoord1.xyz);
  FinalPosition_16 = tmpvar_65;
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_66;
    vPos_66 = tmpvar_65;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_67;
      vPos_67 = tmpvar_65;
      highp float fAdherenceScale_68;
      highp vec3 tmpvar_69;
      tmpvar_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_70;
      tmpvar_70 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_71;
      highp float fOscillation_72;
      fOscillation_72 = 1.0;
      highp float fAmount_73;
      highp float fTarget_74;
      highp vec4 tmpvar_75;
      tmpvar_75.x = (tmpvar_70 + _glesMultiTexCoord0.w);
      tmpvar_75.y = ((tmpvar_70 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_75.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_70 + _glesMultiTexCoord0.w));
      tmpvar_75.w = ((tmpvar_70 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      vOscillations_71 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      highp float tmpvar_77;
      tmpvar_77 = (vOscillations_71.y * vOscillations_71.z);
      fTarget_74 = 1.0;
      fAmount_73 = tmpvar_77;
      if ((tmpvar_77 < 0.0)) {
        fTarget_74 = -1.0;
        fAmount_73 = -(tmpvar_77);
      };
      fOscillation_72 = (((
        (mix (mix (tmpvar_77, fTarget_74, fAmount_73), fTarget_74, fAmount_73) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_71.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_71.w * _ST_WindBranchWhip.x)));
      vPos_67 = (tmpvar_65 + ((tmpvar_69 * fOscillation_72) * _ST_WindBranch.y));
      highp vec4 tmpvar_78;
      tmpvar_78.zw = vec2(0.0, 0.0);
      tmpvar_78.x = ((tmpvar_70 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_78.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_79;
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      tmpvar_79 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((
        ((tmpvar_79.x * tmpvar_79.y) * tmpvar_79.x)
       * tmpvar_79.y) * _ST_WindTurbulences.x));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_71.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_67 = (vPos_67 + ((
        ((vRotatedBranchAnchor_14 - vPos_67) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_66 = vPos_67;
    } else {
      highp vec3 vPos_81;
      vPos_81 = vPos_66;
      highp vec3 tmpvar_82;
      tmpvar_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_83;
      tmpvar_83 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_84;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (tmpvar_83 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((tmpvar_83 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_83 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_84 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_84.y * vOscillations_84.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      vPos_81 = (vPos_66 + ((tmpvar_82 * 
        (((mix (
          mix (tmpvar_89, fTarget_86, fAmount_85)
        , fTarget_86, fAmount_85) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_84.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_66 = vPos_81;
    };
    FinalPosition_16 = vPos_66;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = FinalPosition_16;
    highp float fAdjust_91;
    highp float fLength_92;
    fLength_92 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_93;
    tmpvar_93 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_91 = tmpvar_93;
    if ((tmpvar_93 != 0.0)) {
      fAdjust_91 = pow (tmpvar_93, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_94;
    tmpvar_94.zw = vec2(0.0, 0.0);
    tmpvar_94.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_94.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_95;
    highp vec4 tmpvar_96;
    tmpvar_96 = abs(((
      fract((tmpvar_94 + 0.5))
     * 2.0) - 1.0));
    tmpvar_95 = (((
      (tmpvar_96 * tmpvar_96)
     * 
      (3.0 - (2.0 * tmpvar_96))
    ) - 0.5) * 2.0);
    vPos_90.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_95.x + (tmpvar_95.y * tmpvar_95.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_91)));
    vPos_90 = (normalize(vPos_90) * fLength_92);
    FinalPosition_16 = vPos_90;
  };
  tmpvar_12.xyz = FinalPosition_16;
  highp vec4 tmpvar_97;
  tmpvar_97 = (glstate_matrix_mvp * tmpvar_12);
  highp vec4 o_98;
  highp vec4 tmpvar_99;
  tmpvar_99 = (tmpvar_97 * 0.5);
  highp vec2 tmpvar_100;
  tmpvar_100.x = tmpvar_99.x;
  tmpvar_100.y = (tmpvar_99.y * _ProjectionParams.x);
  o_98.xy = (tmpvar_100 + tmpvar_99.w);
  o_98.zw = tmpvar_97.zw;
  highp vec3 tmpvar_101;
  tmpvar_101 = o_98.xyw;
  tmpvar_9 = tmpvar_101;
  highp vec2 tmpvar_102;
  tmpvar_102 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_102;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_103;
  v_103.x = _World2Object[0].x;
  v_103.y = _World2Object[1].x;
  v_103.z = _World2Object[2].x;
  v_103.w = _World2Object[3].x;
  highp vec4 v_104;
  v_104.x = _World2Object[0].y;
  v_104.y = _World2Object[1].y;
  v_104.z = _World2Object[2].y;
  v_104.w = _World2Object[3].y;
  highp vec4 v_105;
  v_105.x = _World2Object[0].z;
  v_105.y = _World2Object[1].z;
  v_105.z = _World2Object[2].z;
  v_105.w = _World2Object[3].z;
  highp vec3 tmpvar_106;
  tmpvar_106 = normalize(((
    (v_103.xyz * tmpvar_13.x)
   + 
    (v_104.xyz * tmpvar_13.y)
  ) + (v_105.xyz * tmpvar_13.z)));
  worldNormal_3 = tmpvar_106;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_107;
  tmpvar_107.w = 1.0;
  tmpvar_107.xyz = worldNormal_3;
  mediump vec4 normal_108;
  normal_108 = tmpvar_107;
  mediump vec3 x2_109;
  mediump vec4 tmpvar_110;
  tmpvar_110 = (normal_108.xyzz * normal_108.yzzx);
  x2_109.x = dot (unity_SHBr, tmpvar_110);
  x2_109.y = dot (unity_SHBg, tmpvar_110);
  x2_109.z = dot (unity_SHBb, tmpvar_110);
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_109 + (unity_SHC.xyz * (
    (normal_108.x * normal_108.x)
   - 
    (normal_108.y * normal_108.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_7.x = tmpvar_8.x;
  mediump float tmpvar_9;
  tmpvar_9 = fract(tmpvar_8.y);
  highp float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * 0.0625) + unity_LODFade.y);
  projUV_7.y = tmpvar_10;
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_6.w * _Color.w);
  tmpvar_5 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_5 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_15;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_2;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_16;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  mediump vec4 outDiffuseOcclusion_19;
  mediump vec4 outNormal_20;
  mediump vec4 emission_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_4;
  outDiffuseOcclusion_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  emission_21 = tmpvar_24;
  emission_21.xyz = (emission_21.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_18)));
  outDiffuse_1.xyz = outDiffuseOcclusion_19.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_20;
  gl_FragData[3] = emission_21;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD6;
out mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_16 = tmpvar_21;
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_22;
    tmpvar_22 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_23;
    isBestWind_23 = (tmpvar_18 == 4.0);
    bool bLeaf2_24;
    bLeaf2_24 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    highp vec3 vDirection_26;
    vDirection_26 = tmpvar_2;
    highp float tmpvar_27;
    if (bLeaf2_24) {
      tmpvar_27 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_28;
    if (bLeaf2_24) {
      tmpvar_28 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_29;
    highp vec4 tmpvar_30;
    tmpvar_30.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_30.x = (tmpvar_27 + tmpvar_22);
    highp vec4 tmpvar_31;
    tmpvar_31 = abs(((
      fract((tmpvar_30 + 0.5))
     * 2.0) - 1.0));
    vPos_29 = (tmpvar_21 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_28 * (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_26 = tmpvar_2;
    vPos_25 = vPos_29;
    if (isBestWind_23) {
      highp vec3 tmpvar_32;
      tmpvar_32 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_33;
      if (bLeaf2_24) {
        tmpvar_33 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_34;
      if (bLeaf2_24) {
        tmpvar_34 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_35;
      if (bLeaf2_24) {
        tmpvar_35 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_36;
      if (bLeaf2_24) {
        tmpvar_36 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_37;
      if (bLeaf2_24) {
        tmpvar_37 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_37 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_38;
      if (bLeaf2_24) {
        tmpvar_38 = bool(1);
      } else {
        tmpvar_38 = bool(1);
      };
      highp float fTwitch_39;
      highp vec3 vAxis_40;
      highp vec3 tmpvar_41;
      tmpvar_41 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_42;
      tmpvar_42 = ((tmpvar_41.x + tmpvar_41.y) + tmpvar_41.z);
      highp vec4 tmpvar_43;
      tmpvar_43.x = (tmpvar_33 + tmpvar_42);
      tmpvar_43.y = ((tmpvar_33 * 0.75) - tmpvar_42);
      tmpvar_43.z = ((tmpvar_33 * 0.01) + tmpvar_42);
      tmpvar_43.w = (tmpvar_33 + tmpvar_42);
      highp vec4 tmpvar_44;
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      tmpvar_44 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = sqrt(dot (vPos_29, vPos_29));
      highp float fAngle_47;
      fAngle_47 = ((_glesMultiTexCoord2.x * tmpvar_35) * (tmpvar_44.x + (tmpvar_44.y * tmpvar_44.y)));
      highp vec2 vSinCos_48;
      vSinCos_48.x = sin(fAngle_47);
      vSinCos_48.y = cos(fAngle_47);
      highp float tmpvar_49;
      tmpvar_49 = (1.0 - vSinCos_48.y);
      highp mat3 tmpvar_50;
      tmpvar_50[0].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.x) + vSinCos_48.y);
      tmpvar_50[0].y = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.y) + (vSinCos_48.x * tmpvar_32.z));
      tmpvar_50[0].z = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.z) - (vSinCos_48.x * tmpvar_32.y));
      tmpvar_50[1].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.y) - (vSinCos_48.x * tmpvar_32.z));
      tmpvar_50[1].y = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.y) + vSinCos_48.y);
      tmpvar_50[1].z = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.z) + (vSinCos_48.x * tmpvar_32.x));
      tmpvar_50[2].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.z) + (vSinCos_48.x * tmpvar_32.y));
      tmpvar_50[2].y = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.z) - (vSinCos_48.x * tmpvar_32.x));
      tmpvar_50[2].z = (((tmpvar_49 * tmpvar_32.z) * tmpvar_32.z) + vSinCos_48.y);
      highp vec3 tmpvar_51;
      tmpvar_51 = ((tmpvar_32.yzx * vRotatedWindVector_15.zxy) - (tmpvar_32.zxy * vRotatedWindVector_15.yzx));
      vAxis_40.xz = tmpvar_51.xz;
      highp float tmpvar_52;
      tmpvar_52 = clamp (dot (vRotatedWindVector_15, tmpvar_32), -1.0, 1.0);
      vAxis_40.y = (tmpvar_51.y + tmpvar_52);
      highp vec3 tmpvar_53;
      tmpvar_53 = normalize(vAxis_40);
      vAxis_40 = tmpvar_53;
      highp float tmpvar_54;
      tmpvar_54 = (1.570796 - (sign(tmpvar_52) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_52))) * (1.570796 + (abs(tmpvar_52) * (-0.2146018 + 
          (abs(tmpvar_52) * (0.08656672 + (abs(tmpvar_52) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_55;
      tmpvar_55 = (tmpvar_44.y - (tmpvar_44.x * tmpvar_44.x));
      fTwitch_39 = 0.0;
      if (tmpvar_38) {
        highp float fTime_56;
        fTime_56 = (tmpvar_37.z + tmpvar_42);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_39 = (tmpvar_37.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_37.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_54 * tmpvar_36)
       + 
        (tmpvar_55 * tmpvar_34)
      ) + fTwitch_39));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.y) + (vSinCos_61.x * tmpvar_53.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.z) - (vSinCos_61.x * tmpvar_53.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.y) - (vSinCos_61.x * tmpvar_53.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.z) + (vSinCos_61.x * tmpvar_53.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.z) + (vSinCos_61.x * tmpvar_53.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.z) - (vSinCos_61.x * tmpvar_53.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_53.z) * tmpvar_53.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_50 * tmpvar_63);
      vDirection_26 = (tmpvar_64 * _glesNormal);
      vPos_25 = (normalize((tmpvar_64 * vPos_29)) * tmpvar_46);
    };
    tmpvar_13 = vDirection_26;
    FinalPosition_16 = vPos_25;
  };
  highp vec3 tmpvar_65;
  tmpvar_65 = (FinalPosition_16 + _glesMultiTexCoord1.xyz);
  FinalPosition_16 = tmpvar_65;
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_66;
    vPos_66 = tmpvar_65;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_67;
      vPos_67 = tmpvar_65;
      highp float fAdherenceScale_68;
      highp vec3 tmpvar_69;
      tmpvar_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_70;
      tmpvar_70 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_71;
      highp float fOscillation_72;
      fOscillation_72 = 1.0;
      highp float fAmount_73;
      highp float fTarget_74;
      highp vec4 tmpvar_75;
      tmpvar_75.x = (tmpvar_70 + _glesMultiTexCoord0.w);
      tmpvar_75.y = ((tmpvar_70 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_75.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_70 + _glesMultiTexCoord0.w));
      tmpvar_75.w = ((tmpvar_70 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      vOscillations_71 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      highp float tmpvar_77;
      tmpvar_77 = (vOscillations_71.y * vOscillations_71.z);
      fTarget_74 = 1.0;
      fAmount_73 = tmpvar_77;
      if ((tmpvar_77 < 0.0)) {
        fTarget_74 = -1.0;
        fAmount_73 = -(tmpvar_77);
      };
      fOscillation_72 = (((
        (mix (mix (tmpvar_77, fTarget_74, fAmount_73), fTarget_74, fAmount_73) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_71.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_71.w * _ST_WindBranchWhip.x)));
      vPos_67 = (tmpvar_65 + ((tmpvar_69 * fOscillation_72) * _ST_WindBranch.y));
      highp vec4 tmpvar_78;
      tmpvar_78.zw = vec2(0.0, 0.0);
      tmpvar_78.x = ((tmpvar_70 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_78.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_79;
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      tmpvar_79 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((
        ((tmpvar_79.x * tmpvar_79.y) * tmpvar_79.x)
       * tmpvar_79.y) * _ST_WindTurbulences.x));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_71.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_67 = (vPos_67 + ((
        ((vRotatedBranchAnchor_14 - vPos_67) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_66 = vPos_67;
    } else {
      highp vec3 vPos_81;
      vPos_81 = vPos_66;
      highp vec3 tmpvar_82;
      tmpvar_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_83;
      tmpvar_83 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_84;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (tmpvar_83 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((tmpvar_83 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_83 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_84 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_84.y * vOscillations_84.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      vPos_81 = (vPos_66 + ((tmpvar_82 * 
        (((mix (
          mix (tmpvar_89, fTarget_86, fAmount_85)
        , fTarget_86, fAmount_85) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_84.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_66 = vPos_81;
    };
    FinalPosition_16 = vPos_66;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = FinalPosition_16;
    highp float fAdjust_91;
    highp float fLength_92;
    fLength_92 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_93;
    tmpvar_93 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_91 = tmpvar_93;
    if ((tmpvar_93 != 0.0)) {
      fAdjust_91 = pow (tmpvar_93, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_94;
    tmpvar_94.zw = vec2(0.0, 0.0);
    tmpvar_94.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_94.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_95;
    highp vec4 tmpvar_96;
    tmpvar_96 = abs(((
      fract((tmpvar_94 + 0.5))
     * 2.0) - 1.0));
    tmpvar_95 = (((
      (tmpvar_96 * tmpvar_96)
     * 
      (3.0 - (2.0 * tmpvar_96))
    ) - 0.5) * 2.0);
    vPos_90.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_95.x + (tmpvar_95.y * tmpvar_95.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_91)));
    vPos_90 = (normalize(vPos_90) * fLength_92);
    FinalPosition_16 = vPos_90;
  };
  tmpvar_12.xyz = FinalPosition_16;
  highp vec4 tmpvar_97;
  tmpvar_97 = (glstate_matrix_mvp * tmpvar_12);
  highp vec4 o_98;
  highp vec4 tmpvar_99;
  tmpvar_99 = (tmpvar_97 * 0.5);
  highp vec2 tmpvar_100;
  tmpvar_100.x = tmpvar_99.x;
  tmpvar_100.y = (tmpvar_99.y * _ProjectionParams.x);
  o_98.xy = (tmpvar_100 + tmpvar_99.w);
  o_98.zw = tmpvar_97.zw;
  highp vec3 tmpvar_101;
  tmpvar_101 = o_98.xyw;
  tmpvar_9 = tmpvar_101;
  highp vec2 tmpvar_102;
  tmpvar_102 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_102;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_103;
  v_103.x = _World2Object[0].x;
  v_103.y = _World2Object[1].x;
  v_103.z = _World2Object[2].x;
  v_103.w = _World2Object[3].x;
  highp vec4 v_104;
  v_104.x = _World2Object[0].y;
  v_104.y = _World2Object[1].y;
  v_104.z = _World2Object[2].y;
  v_104.w = _World2Object[3].y;
  highp vec4 v_105;
  v_105.x = _World2Object[0].z;
  v_105.y = _World2Object[1].z;
  v_105.z = _World2Object[2].z;
  v_105.w = _World2Object[3].z;
  highp vec3 tmpvar_106;
  tmpvar_106 = normalize(((
    (v_103.xyz * tmpvar_13.x)
   + 
    (v_104.xyz * tmpvar_13.y)
  ) + (v_105.xyz * tmpvar_13.z)));
  worldNormal_3 = tmpvar_106;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_107;
  tmpvar_107.w = 1.0;
  tmpvar_107.xyz = worldNormal_3;
  mediump vec4 normal_108;
  normal_108 = tmpvar_107;
  mediump vec3 x2_109;
  mediump vec4 tmpvar_110;
  tmpvar_110 = (normal_108.xyzz * normal_108.yzzx);
  x2_109.x = dot (unity_SHBr, tmpvar_110);
  x2_109.y = dot (unity_SHBg, tmpvar_110);
  x2_109.z = dot (unity_SHBb, tmpvar_110);
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_109 + (unity_SHC.xyz * (
    (normal_108.x * normal_108.x)
   - 
    (normal_108.y * normal_108.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_7.x = tmpvar_8.x;
  mediump float tmpvar_9;
  tmpvar_9 = fract(tmpvar_8.y);
  highp float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * 0.0625) + unity_LODFade.y);
  projUV_7.y = tmpvar_10;
  lowp float x_11;
  x_11 = (texture (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_6.w * _Color.w);
  tmpvar_5 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_5 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_15;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_2;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_16;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  mediump vec4 outDiffuseOcclusion_19;
  mediump vec4 outNormal_20;
  mediump vec4 emission_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_4;
  outDiffuseOcclusion_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  emission_21 = tmpvar_24;
  emission_21.xyz = (emission_21.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_18)));
  outDiffuse_1.xyz = outDiffuseOcclusion_19.xyz;
  outDiffuse_1.w = 1.0;
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_20;
  _glesFragData[3] = emission_21;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_14;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_23;
  tmpvar_23 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_23;
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_24;
    tmpvar_24 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_25;
    isBestWind_25 = (tmpvar_20 == 4.0);
    bool bLeaf2_26;
    bLeaf2_26 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_27;
    vPos_27 = tmpvar_23;
    highp vec3 vDirection_28;
    vDirection_28 = tmpvar_2;
    highp float tmpvar_29;
    if (bLeaf2_26) {
      tmpvar_29 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_30;
    if (bLeaf2_26) {
      tmpvar_30 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_31;
    highp vec4 tmpvar_32;
    tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_32.x = (tmpvar_29 + tmpvar_24);
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    vPos_31 = (tmpvar_23 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_30 * (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_28 = tmpvar_2;
    vPos_27 = vPos_31;
    if (isBestWind_25) {
      highp vec3 tmpvar_34;
      tmpvar_34 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_35;
      if (bLeaf2_26) {
        tmpvar_35 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_36;
      if (bLeaf2_26) {
        tmpvar_36 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_37;
      if (bLeaf2_26) {
        tmpvar_37 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_38;
      if (bLeaf2_26) {
        tmpvar_38 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_39;
      if (bLeaf2_26) {
        tmpvar_39 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_39 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_40;
      if (bLeaf2_26) {
        tmpvar_40 = bool(1);
      } else {
        tmpvar_40 = bool(1);
      };
      highp float fTwitch_41;
      highp vec3 vAxis_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_35 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_35 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_35 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_35 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_31, vPos_31));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_37) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) + (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) - (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_34.z) * tmpvar_34.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_34.yzx * vRotatedWindVector_18.zxy) - (tmpvar_34.zxy * vRotatedWindVector_18.yzx));
      vAxis_42.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_18, tmpvar_34), -1.0, 1.0);
      vAxis_42.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_42);
      vAxis_42 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_57;
      tmpvar_57 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_41 = 0.0;
      if (tmpvar_40) {
        highp float fTime_58;
        fTime_58 = (tmpvar_39.z + tmpvar_44);
        highp vec4 tmpvar_59;
        tmpvar_59.zw = vec2(0.0, 0.0);
        tmpvar_59.x = fTime_58;
        tmpvar_59.y = (0.87 * fTime_58);
        highp vec4 tmpvar_60;
        highp vec4 tmpvar_61;
        tmpvar_61 = abs(((
          fract((tmpvar_59 + 0.5))
         * 2.0) - 1.0));
        tmpvar_60 = (((
          (tmpvar_61 * tmpvar_61)
         * 
          (3.0 - (2.0 * tmpvar_61))
        ) - 0.5) * 2.0);
        fTwitch_41 = (tmpvar_39.x * pow (clamp (
          ((((tmpvar_60.x * tmpvar_60.y) * tmpvar_60.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_39.y));
      };
      highp float fAngle_62;
      fAngle_62 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_38)
       + 
        (tmpvar_57 * tmpvar_36)
      ) + fTwitch_41));
      highp vec2 vSinCos_63;
      vSinCos_63.x = sin(fAngle_62);
      vSinCos_63.y = cos(fAngle_62);
      highp float tmpvar_64;
      tmpvar_64 = (1.0 - vSinCos_63.y);
      highp mat3 tmpvar_65;
      tmpvar_65[0].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_63.y);
      tmpvar_65[0].y = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[0].z = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[1].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[1].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_63.y);
      tmpvar_65[1].z = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[2].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].z = (((tmpvar_64 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_63.y);
      highp mat3 tmpvar_66;
      tmpvar_66 = (tmpvar_52 * tmpvar_65);
      vDirection_28 = (tmpvar_66 * _glesNormal);
      vPos_27 = (normalize((tmpvar_66 * vPos_31)) * tmpvar_48);
    };
    tmpvar_16 = vDirection_28;
    FinalPosition_19 = vPos_27;
  };
  highp vec3 tmpvar_67;
  tmpvar_67 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_67;
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_68;
    vPos_68 = tmpvar_67;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_69;
      vPos_69 = tmpvar_67;
      highp float fAdherenceScale_70;
      highp vec3 tmpvar_71;
      tmpvar_71 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_72;
      tmpvar_72 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_73;
      highp float fOscillation_74;
      fOscillation_74 = 1.0;
      highp float fAmount_75;
      highp float fTarget_76;
      highp vec4 tmpvar_77;
      tmpvar_77.x = (tmpvar_72 + _glesMultiTexCoord0.w);
      tmpvar_77.y = ((tmpvar_72 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_77.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_72 + _glesMultiTexCoord0.w));
      tmpvar_77.w = ((tmpvar_72 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      vOscillations_73 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      highp float tmpvar_79;
      tmpvar_79 = (vOscillations_73.y * vOscillations_73.z);
      fTarget_76 = 1.0;
      fAmount_75 = tmpvar_79;
      if ((tmpvar_79 < 0.0)) {
        fTarget_76 = -1.0;
        fAmount_75 = -(tmpvar_79);
      };
      fOscillation_74 = (((
        (mix (mix (tmpvar_79, fTarget_76, fAmount_75), fTarget_76, fAmount_75) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_73.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_73.w * _ST_WindBranchWhip.x)));
      vPos_69 = (tmpvar_67 + ((tmpvar_71 * fOscillation_74) * _ST_WindBranch.y));
      highp vec4 tmpvar_80;
      tmpvar_80.zw = vec2(0.0, 0.0);
      tmpvar_80.x = ((tmpvar_72 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_80.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_81;
      highp vec4 tmpvar_82;
      tmpvar_82 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      tmpvar_81 = (((
        (tmpvar_82 * tmpvar_82)
       * 
        (3.0 - (2.0 * tmpvar_82))
      ) - 0.5) * 2.0);
      fAdherenceScale_70 = (1.0 - ((
        ((tmpvar_81.x * tmpvar_81.y) * tmpvar_81.x)
       * tmpvar_81.y) * _ST_WindTurbulences.x));
      fAdherenceScale_70 = (fAdherenceScale_70 + ((vOscillations_73.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_69 = (vPos_69 + ((
        ((vRotatedBranchAnchor_17 - vPos_69) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_70) * _glesMultiTexCoord0.z));
      vPos_68 = vPos_69;
    } else {
      highp vec3 vPos_83;
      vPos_83 = vPos_68;
      highp vec3 tmpvar_84;
      tmpvar_84 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_85;
      tmpvar_85 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_86;
      highp float fAmount_87;
      highp float fTarget_88;
      highp vec4 tmpvar_89;
      tmpvar_89.w = 0.0;
      tmpvar_89.x = (tmpvar_85 + _glesMultiTexCoord0.w);
      tmpvar_89.y = ((tmpvar_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_89.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_90;
      tmpvar_90 = abs(((
        fract((tmpvar_89 + 0.5))
       * 2.0) - 1.0));
      vOscillations_86 = (((
        (tmpvar_90 * tmpvar_90)
       * 
        (3.0 - (2.0 * tmpvar_90))
      ) - 0.5) * 2.0);
      highp float tmpvar_91;
      tmpvar_91 = (vOscillations_86.y * vOscillations_86.z);
      fTarget_88 = 1.0;
      fAmount_87 = tmpvar_91;
      if ((tmpvar_91 < 0.0)) {
        fTarget_88 = -1.0;
        fAmount_87 = -(tmpvar_91);
      };
      vPos_83 = (vPos_68 + ((tmpvar_84 * 
        (((mix (
          mix (tmpvar_91, fTarget_88, fAmount_87)
        , fTarget_88, fAmount_87) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_86.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_68 = vPos_83;
    };
    FinalPosition_19 = vPos_68;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_92;
    vPos_92 = FinalPosition_19;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_96.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    vPos_92.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_97.x + (tmpvar_97.y * tmpvar_97.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_93)));
    vPos_92 = (normalize(vPos_92) * fLength_94);
    FinalPosition_19 = vPos_92;
  };
  tmpvar_15.xyz = FinalPosition_19;
  highp vec4 tmpvar_99;
  tmpvar_99 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = (tmpvar_99 * 0.5);
  highp vec2 tmpvar_102;
  tmpvar_102.x = tmpvar_101.x;
  tmpvar_102.y = (tmpvar_101.y * _ProjectionParams.x);
  o_100.xy = (tmpvar_102 + tmpvar_101.w);
  o_100.zw = tmpvar_99.zw;
  highp vec3 tmpvar_103;
  tmpvar_103 = o_100.xyw;
  tmpvar_9 = tmpvar_103;
  highp vec2 tmpvar_104;
  tmpvar_104 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_104;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_105;
  v_105.x = _World2Object[0].x;
  v_105.y = _World2Object[1].x;
  v_105.z = _World2Object[2].x;
  v_105.w = _World2Object[3].x;
  highp vec4 v_106;
  v_106.x = _World2Object[0].y;
  v_106.y = _World2Object[1].y;
  v_106.z = _World2Object[2].y;
  v_106.w = _World2Object[3].y;
  highp vec4 v_107;
  v_107.x = _World2Object[0].z;
  v_107.y = _World2Object[1].z;
  v_107.z = _World2Object[2].z;
  v_107.w = _World2Object[3].z;
  highp vec3 tmpvar_108;
  tmpvar_108 = normalize(((
    (v_105.xyz * tmpvar_16.x)
   + 
    (v_106.xyz * tmpvar_16.y)
  ) + (v_107.xyz * tmpvar_16.z)));
  worldNormal_3 = tmpvar_108;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_109;
  tmpvar_109.w = 1.0;
  tmpvar_109.xyz = worldNormal_3;
  mediump vec4 normal_110;
  normal_110 = tmpvar_109;
  mediump vec3 x2_111;
  mediump vec4 tmpvar_112;
  tmpvar_112 = (normal_110.xyzz * normal_110.yzzx);
  x2_111.x = dot (unity_SHBr, tmpvar_112);
  x2_111.y = dot (unity_SHBg, tmpvar_112);
  x2_111.z = dot (unity_SHBb, tmpvar_112);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_111 + (unity_SHC.xyz * (
    (normal_110.x * normal_110.x)
   - 
    (normal_110.y * normal_110.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_16 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_17;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_3;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_18;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_19);
  x1_20.y = dot (unity_SHAg, tmpvar_19);
  x1_20.z = dot (unity_SHAb, tmpvar_19);
  mediump vec4 outDiffuseOcclusion_21;
  mediump vec4 outNormal_22;
  mediump vec4 emission_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = tmpvar_5;
  outDiffuseOcclusion_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_22 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = vec3(0.0, 0.0, 0.0);
  emission_23 = tmpvar_26;
  emission_23.xyz = (emission_23.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_20)));
  outDiffuse_1.xyz = outDiffuseOcclusion_21.xyz;
  outEmission_2.w = emission_23.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_23.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_22;
  gl_FragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD6;
out mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_14;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_23;
  tmpvar_23 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_23;
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_24;
    tmpvar_24 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_25;
    isBestWind_25 = (tmpvar_20 == 4.0);
    bool bLeaf2_26;
    bLeaf2_26 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_27;
    vPos_27 = tmpvar_23;
    highp vec3 vDirection_28;
    vDirection_28 = tmpvar_2;
    highp float tmpvar_29;
    if (bLeaf2_26) {
      tmpvar_29 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_30;
    if (bLeaf2_26) {
      tmpvar_30 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_31;
    highp vec4 tmpvar_32;
    tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_32.x = (tmpvar_29 + tmpvar_24);
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    vPos_31 = (tmpvar_23 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_30 * (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_28 = tmpvar_2;
    vPos_27 = vPos_31;
    if (isBestWind_25) {
      highp vec3 tmpvar_34;
      tmpvar_34 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_35;
      if (bLeaf2_26) {
        tmpvar_35 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_36;
      if (bLeaf2_26) {
        tmpvar_36 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_37;
      if (bLeaf2_26) {
        tmpvar_37 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_38;
      if (bLeaf2_26) {
        tmpvar_38 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_39;
      if (bLeaf2_26) {
        tmpvar_39 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_39 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_40;
      if (bLeaf2_26) {
        tmpvar_40 = bool(1);
      } else {
        tmpvar_40 = bool(1);
      };
      highp float fTwitch_41;
      highp vec3 vAxis_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_35 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_35 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_35 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_35 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_31, vPos_31));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_37) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) + (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) - (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_34.z) * tmpvar_34.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_34.yzx * vRotatedWindVector_18.zxy) - (tmpvar_34.zxy * vRotatedWindVector_18.yzx));
      vAxis_42.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_18, tmpvar_34), -1.0, 1.0);
      vAxis_42.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_42);
      vAxis_42 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_57;
      tmpvar_57 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_41 = 0.0;
      if (tmpvar_40) {
        highp float fTime_58;
        fTime_58 = (tmpvar_39.z + tmpvar_44);
        highp vec4 tmpvar_59;
        tmpvar_59.zw = vec2(0.0, 0.0);
        tmpvar_59.x = fTime_58;
        tmpvar_59.y = (0.87 * fTime_58);
        highp vec4 tmpvar_60;
        highp vec4 tmpvar_61;
        tmpvar_61 = abs(((
          fract((tmpvar_59 + 0.5))
         * 2.0) - 1.0));
        tmpvar_60 = (((
          (tmpvar_61 * tmpvar_61)
         * 
          (3.0 - (2.0 * tmpvar_61))
        ) - 0.5) * 2.0);
        fTwitch_41 = (tmpvar_39.x * pow (clamp (
          ((((tmpvar_60.x * tmpvar_60.y) * tmpvar_60.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_39.y));
      };
      highp float fAngle_62;
      fAngle_62 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_38)
       + 
        (tmpvar_57 * tmpvar_36)
      ) + fTwitch_41));
      highp vec2 vSinCos_63;
      vSinCos_63.x = sin(fAngle_62);
      vSinCos_63.y = cos(fAngle_62);
      highp float tmpvar_64;
      tmpvar_64 = (1.0 - vSinCos_63.y);
      highp mat3 tmpvar_65;
      tmpvar_65[0].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_63.y);
      tmpvar_65[0].y = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[0].z = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[1].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[1].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_63.y);
      tmpvar_65[1].z = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[2].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].z = (((tmpvar_64 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_63.y);
      highp mat3 tmpvar_66;
      tmpvar_66 = (tmpvar_52 * tmpvar_65);
      vDirection_28 = (tmpvar_66 * _glesNormal);
      vPos_27 = (normalize((tmpvar_66 * vPos_31)) * tmpvar_48);
    };
    tmpvar_16 = vDirection_28;
    FinalPosition_19 = vPos_27;
  };
  highp vec3 tmpvar_67;
  tmpvar_67 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_67;
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_68;
    vPos_68 = tmpvar_67;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_69;
      vPos_69 = tmpvar_67;
      highp float fAdherenceScale_70;
      highp vec3 tmpvar_71;
      tmpvar_71 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_72;
      tmpvar_72 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_73;
      highp float fOscillation_74;
      fOscillation_74 = 1.0;
      highp float fAmount_75;
      highp float fTarget_76;
      highp vec4 tmpvar_77;
      tmpvar_77.x = (tmpvar_72 + _glesMultiTexCoord0.w);
      tmpvar_77.y = ((tmpvar_72 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_77.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_72 + _glesMultiTexCoord0.w));
      tmpvar_77.w = ((tmpvar_72 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      vOscillations_73 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      highp float tmpvar_79;
      tmpvar_79 = (vOscillations_73.y * vOscillations_73.z);
      fTarget_76 = 1.0;
      fAmount_75 = tmpvar_79;
      if ((tmpvar_79 < 0.0)) {
        fTarget_76 = -1.0;
        fAmount_75 = -(tmpvar_79);
      };
      fOscillation_74 = (((
        (mix (mix (tmpvar_79, fTarget_76, fAmount_75), fTarget_76, fAmount_75) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_73.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_73.w * _ST_WindBranchWhip.x)));
      vPos_69 = (tmpvar_67 + ((tmpvar_71 * fOscillation_74) * _ST_WindBranch.y));
      highp vec4 tmpvar_80;
      tmpvar_80.zw = vec2(0.0, 0.0);
      tmpvar_80.x = ((tmpvar_72 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_80.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_81;
      highp vec4 tmpvar_82;
      tmpvar_82 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      tmpvar_81 = (((
        (tmpvar_82 * tmpvar_82)
       * 
        (3.0 - (2.0 * tmpvar_82))
      ) - 0.5) * 2.0);
      fAdherenceScale_70 = (1.0 - ((
        ((tmpvar_81.x * tmpvar_81.y) * tmpvar_81.x)
       * tmpvar_81.y) * _ST_WindTurbulences.x));
      fAdherenceScale_70 = (fAdherenceScale_70 + ((vOscillations_73.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_69 = (vPos_69 + ((
        ((vRotatedBranchAnchor_17 - vPos_69) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_70) * _glesMultiTexCoord0.z));
      vPos_68 = vPos_69;
    } else {
      highp vec3 vPos_83;
      vPos_83 = vPos_68;
      highp vec3 tmpvar_84;
      tmpvar_84 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_85;
      tmpvar_85 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_86;
      highp float fAmount_87;
      highp float fTarget_88;
      highp vec4 tmpvar_89;
      tmpvar_89.w = 0.0;
      tmpvar_89.x = (tmpvar_85 + _glesMultiTexCoord0.w);
      tmpvar_89.y = ((tmpvar_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_89.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_90;
      tmpvar_90 = abs(((
        fract((tmpvar_89 + 0.5))
       * 2.0) - 1.0));
      vOscillations_86 = (((
        (tmpvar_90 * tmpvar_90)
       * 
        (3.0 - (2.0 * tmpvar_90))
      ) - 0.5) * 2.0);
      highp float tmpvar_91;
      tmpvar_91 = (vOscillations_86.y * vOscillations_86.z);
      fTarget_88 = 1.0;
      fAmount_87 = tmpvar_91;
      if ((tmpvar_91 < 0.0)) {
        fTarget_88 = -1.0;
        fAmount_87 = -(tmpvar_91);
      };
      vPos_83 = (vPos_68 + ((tmpvar_84 * 
        (((mix (
          mix (tmpvar_91, fTarget_88, fAmount_87)
        , fTarget_88, fAmount_87) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_86.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_68 = vPos_83;
    };
    FinalPosition_19 = vPos_68;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_92;
    vPos_92 = FinalPosition_19;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_96.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    vPos_92.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_97.x + (tmpvar_97.y * tmpvar_97.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_93)));
    vPos_92 = (normalize(vPos_92) * fLength_94);
    FinalPosition_19 = vPos_92;
  };
  tmpvar_15.xyz = FinalPosition_19;
  highp vec4 tmpvar_99;
  tmpvar_99 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = (tmpvar_99 * 0.5);
  highp vec2 tmpvar_102;
  tmpvar_102.x = tmpvar_101.x;
  tmpvar_102.y = (tmpvar_101.y * _ProjectionParams.x);
  o_100.xy = (tmpvar_102 + tmpvar_101.w);
  o_100.zw = tmpvar_99.zw;
  highp vec3 tmpvar_103;
  tmpvar_103 = o_100.xyw;
  tmpvar_9 = tmpvar_103;
  highp vec2 tmpvar_104;
  tmpvar_104 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_104;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_105;
  v_105.x = _World2Object[0].x;
  v_105.y = _World2Object[1].x;
  v_105.z = _World2Object[2].x;
  v_105.w = _World2Object[3].x;
  highp vec4 v_106;
  v_106.x = _World2Object[0].y;
  v_106.y = _World2Object[1].y;
  v_106.z = _World2Object[2].y;
  v_106.w = _World2Object[3].y;
  highp vec4 v_107;
  v_107.x = _World2Object[0].z;
  v_107.y = _World2Object[1].z;
  v_107.z = _World2Object[2].z;
  v_107.w = _World2Object[3].z;
  highp vec3 tmpvar_108;
  tmpvar_108 = normalize(((
    (v_105.xyz * tmpvar_16.x)
   + 
    (v_106.xyz * tmpvar_16.y)
  ) + (v_107.xyz * tmpvar_16.z)));
  worldNormal_3 = tmpvar_108;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_109;
  tmpvar_109.w = 1.0;
  tmpvar_109.xyz = worldNormal_3;
  mediump vec4 normal_110;
  normal_110 = tmpvar_109;
  mediump vec3 x2_111;
  mediump vec4 tmpvar_112;
  tmpvar_112 = (normal_110.xyzz * normal_110.yzzx);
  x2_111.x = dot (unity_SHBr, tmpvar_112);
  x2_111.y = dot (unity_SHBg, tmpvar_112);
  x2_111.z = dot (unity_SHBb, tmpvar_112);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_111 + (unity_SHC.xyz * (
    (normal_110.x * normal_110.x)
   - 
    (normal_110.y * normal_110.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_16 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_17;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_3;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_18;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_19);
  x1_20.y = dot (unity_SHAg, tmpvar_19);
  x1_20.z = dot (unity_SHAb, tmpvar_19);
  mediump vec4 outDiffuseOcclusion_21;
  mediump vec4 outNormal_22;
  mediump vec4 emission_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = tmpvar_5;
  outDiffuseOcclusion_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_22 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = vec3(0.0, 0.0, 0.0);
  emission_23 = tmpvar_26;
  emission_23.xyz = (emission_23.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_20)));
  outDiffuse_1.xyz = outDiffuseOcclusion_21.xyz;
  outEmission_2.w = emission_23.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_23.xyz));
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_22;
  _glesFragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_14;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_23;
  tmpvar_23 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_23;
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_24;
    tmpvar_24 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_25;
    isBestWind_25 = (tmpvar_20 == 4.0);
    bool bLeaf2_26;
    bLeaf2_26 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_27;
    vPos_27 = tmpvar_23;
    highp vec3 vDirection_28;
    vDirection_28 = tmpvar_2;
    highp float tmpvar_29;
    if (bLeaf2_26) {
      tmpvar_29 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_30;
    if (bLeaf2_26) {
      tmpvar_30 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_31;
    highp vec4 tmpvar_32;
    tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_32.x = (tmpvar_29 + tmpvar_24);
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    vPos_31 = (tmpvar_23 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_30 * (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_28 = tmpvar_2;
    vPos_27 = vPos_31;
    if (isBestWind_25) {
      highp vec3 tmpvar_34;
      tmpvar_34 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_35;
      if (bLeaf2_26) {
        tmpvar_35 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_36;
      if (bLeaf2_26) {
        tmpvar_36 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_37;
      if (bLeaf2_26) {
        tmpvar_37 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_38;
      if (bLeaf2_26) {
        tmpvar_38 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_39;
      if (bLeaf2_26) {
        tmpvar_39 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_39 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_40;
      if (bLeaf2_26) {
        tmpvar_40 = bool(1);
      } else {
        tmpvar_40 = bool(1);
      };
      highp float fTwitch_41;
      highp vec3 vAxis_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_35 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_35 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_35 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_35 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_31, vPos_31));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_37) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) + (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) - (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_34.z) * tmpvar_34.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_34.yzx * vRotatedWindVector_18.zxy) - (tmpvar_34.zxy * vRotatedWindVector_18.yzx));
      vAxis_42.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_18, tmpvar_34), -1.0, 1.0);
      vAxis_42.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_42);
      vAxis_42 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_57;
      tmpvar_57 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_41 = 0.0;
      if (tmpvar_40) {
        highp float fTime_58;
        fTime_58 = (tmpvar_39.z + tmpvar_44);
        highp vec4 tmpvar_59;
        tmpvar_59.zw = vec2(0.0, 0.0);
        tmpvar_59.x = fTime_58;
        tmpvar_59.y = (0.87 * fTime_58);
        highp vec4 tmpvar_60;
        highp vec4 tmpvar_61;
        tmpvar_61 = abs(((
          fract((tmpvar_59 + 0.5))
         * 2.0) - 1.0));
        tmpvar_60 = (((
          (tmpvar_61 * tmpvar_61)
         * 
          (3.0 - (2.0 * tmpvar_61))
        ) - 0.5) * 2.0);
        fTwitch_41 = (tmpvar_39.x * pow (clamp (
          ((((tmpvar_60.x * tmpvar_60.y) * tmpvar_60.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_39.y));
      };
      highp float fAngle_62;
      fAngle_62 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_38)
       + 
        (tmpvar_57 * tmpvar_36)
      ) + fTwitch_41));
      highp vec2 vSinCos_63;
      vSinCos_63.x = sin(fAngle_62);
      vSinCos_63.y = cos(fAngle_62);
      highp float tmpvar_64;
      tmpvar_64 = (1.0 - vSinCos_63.y);
      highp mat3 tmpvar_65;
      tmpvar_65[0].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_63.y);
      tmpvar_65[0].y = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[0].z = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[1].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[1].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_63.y);
      tmpvar_65[1].z = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[2].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].z = (((tmpvar_64 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_63.y);
      highp mat3 tmpvar_66;
      tmpvar_66 = (tmpvar_52 * tmpvar_65);
      vDirection_28 = (tmpvar_66 * _glesNormal);
      vPos_27 = (normalize((tmpvar_66 * vPos_31)) * tmpvar_48);
    };
    tmpvar_16 = vDirection_28;
    FinalPosition_19 = vPos_27;
  };
  highp vec3 tmpvar_67;
  tmpvar_67 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_67;
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_68;
    vPos_68 = tmpvar_67;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_69;
      vPos_69 = tmpvar_67;
      highp float fAdherenceScale_70;
      highp vec3 tmpvar_71;
      tmpvar_71 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_72;
      tmpvar_72 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_73;
      highp float fOscillation_74;
      fOscillation_74 = 1.0;
      highp float fAmount_75;
      highp float fTarget_76;
      highp vec4 tmpvar_77;
      tmpvar_77.x = (tmpvar_72 + _glesMultiTexCoord0.w);
      tmpvar_77.y = ((tmpvar_72 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_77.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_72 + _glesMultiTexCoord0.w));
      tmpvar_77.w = ((tmpvar_72 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      vOscillations_73 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      highp float tmpvar_79;
      tmpvar_79 = (vOscillations_73.y * vOscillations_73.z);
      fTarget_76 = 1.0;
      fAmount_75 = tmpvar_79;
      if ((tmpvar_79 < 0.0)) {
        fTarget_76 = -1.0;
        fAmount_75 = -(tmpvar_79);
      };
      fOscillation_74 = (((
        (mix (mix (tmpvar_79, fTarget_76, fAmount_75), fTarget_76, fAmount_75) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_73.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_73.w * _ST_WindBranchWhip.x)));
      vPos_69 = (tmpvar_67 + ((tmpvar_71 * fOscillation_74) * _ST_WindBranch.y));
      highp vec4 tmpvar_80;
      tmpvar_80.zw = vec2(0.0, 0.0);
      tmpvar_80.x = ((tmpvar_72 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_80.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_81;
      highp vec4 tmpvar_82;
      tmpvar_82 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      tmpvar_81 = (((
        (tmpvar_82 * tmpvar_82)
       * 
        (3.0 - (2.0 * tmpvar_82))
      ) - 0.5) * 2.0);
      fAdherenceScale_70 = (1.0 - ((
        ((tmpvar_81.x * tmpvar_81.y) * tmpvar_81.x)
       * tmpvar_81.y) * _ST_WindTurbulences.x));
      fAdherenceScale_70 = (fAdherenceScale_70 + ((vOscillations_73.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_69 = (vPos_69 + ((
        ((vRotatedBranchAnchor_17 - vPos_69) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_70) * _glesMultiTexCoord0.z));
      vPos_68 = vPos_69;
    } else {
      highp vec3 vPos_83;
      vPos_83 = vPos_68;
      highp vec3 tmpvar_84;
      tmpvar_84 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_85;
      tmpvar_85 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_86;
      highp float fAmount_87;
      highp float fTarget_88;
      highp vec4 tmpvar_89;
      tmpvar_89.w = 0.0;
      tmpvar_89.x = (tmpvar_85 + _glesMultiTexCoord0.w);
      tmpvar_89.y = ((tmpvar_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_89.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_90;
      tmpvar_90 = abs(((
        fract((tmpvar_89 + 0.5))
       * 2.0) - 1.0));
      vOscillations_86 = (((
        (tmpvar_90 * tmpvar_90)
       * 
        (3.0 - (2.0 * tmpvar_90))
      ) - 0.5) * 2.0);
      highp float tmpvar_91;
      tmpvar_91 = (vOscillations_86.y * vOscillations_86.z);
      fTarget_88 = 1.0;
      fAmount_87 = tmpvar_91;
      if ((tmpvar_91 < 0.0)) {
        fTarget_88 = -1.0;
        fAmount_87 = -(tmpvar_91);
      };
      vPos_83 = (vPos_68 + ((tmpvar_84 * 
        (((mix (
          mix (tmpvar_91, fTarget_88, fAmount_87)
        , fTarget_88, fAmount_87) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_86.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_68 = vPos_83;
    };
    FinalPosition_19 = vPos_68;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_92;
    vPos_92 = FinalPosition_19;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_96.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    vPos_92.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_97.x + (tmpvar_97.y * tmpvar_97.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_93)));
    vPos_92 = (normalize(vPos_92) * fLength_94);
    FinalPosition_19 = vPos_92;
  };
  tmpvar_15.xyz = FinalPosition_19;
  highp vec4 tmpvar_99;
  tmpvar_99 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = (tmpvar_99 * 0.5);
  highp vec2 tmpvar_102;
  tmpvar_102.x = tmpvar_101.x;
  tmpvar_102.y = (tmpvar_101.y * _ProjectionParams.x);
  o_100.xy = (tmpvar_102 + tmpvar_101.w);
  o_100.zw = tmpvar_99.zw;
  highp vec3 tmpvar_103;
  tmpvar_103 = o_100.xyw;
  tmpvar_9 = tmpvar_103;
  highp vec2 tmpvar_104;
  tmpvar_104 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_104;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_105;
  v_105.x = _World2Object[0].x;
  v_105.y = _World2Object[1].x;
  v_105.z = _World2Object[2].x;
  v_105.w = _World2Object[3].x;
  highp vec4 v_106;
  v_106.x = _World2Object[0].y;
  v_106.y = _World2Object[1].y;
  v_106.z = _World2Object[2].y;
  v_106.w = _World2Object[3].y;
  highp vec4 v_107;
  v_107.x = _World2Object[0].z;
  v_107.y = _World2Object[1].z;
  v_107.z = _World2Object[2].z;
  v_107.w = _World2Object[3].z;
  highp vec3 tmpvar_108;
  tmpvar_108 = normalize(((
    (v_105.xyz * tmpvar_16.x)
   + 
    (v_106.xyz * tmpvar_16.y)
  ) + (v_107.xyz * tmpvar_16.z)));
  worldNormal_3 = tmpvar_108;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_109;
  tmpvar_109.w = 1.0;
  tmpvar_109.xyz = worldNormal_3;
  mediump vec4 normal_110;
  normal_110 = tmpvar_109;
  mediump vec3 x2_111;
  mediump vec4 tmpvar_112;
  tmpvar_112 = (normal_110.xyzz * normal_110.yzzx);
  x2_111.x = dot (unity_SHBr, tmpvar_112);
  x2_111.y = dot (unity_SHBg, tmpvar_112);
  x2_111.z = dot (unity_SHBb, tmpvar_112);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_111 + (unity_SHC.xyz * (
    (normal_110.x * normal_110.x)
   - 
    (normal_110.y * normal_110.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_7.x = tmpvar_8.x;
  mediump float tmpvar_9;
  tmpvar_9 = fract(tmpvar_8.y);
  highp float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * 0.0625) + unity_LODFade.y);
  projUV_7.y = tmpvar_10;
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_6.w * _Color.w);
  tmpvar_5 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_5 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_6.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_6.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_6.x, max (diffuseColor_6.y, diffuseColor_6.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_16;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_2;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_17;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  mediump vec4 outDiffuseOcclusion_20;
  mediump vec4 outNormal_21;
  mediump vec4 emission_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = tmpvar_4;
  outDiffuseOcclusion_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  emission_22 = tmpvar_25;
  emission_22.xyz = (emission_22.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_19)));
  outDiffuse_1.xyz = outDiffuseOcclusion_20.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_21;
  gl_FragData[3] = emission_22;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD6;
out mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_14;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_23;
  tmpvar_23 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_23;
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_24;
    tmpvar_24 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_25;
    isBestWind_25 = (tmpvar_20 == 4.0);
    bool bLeaf2_26;
    bLeaf2_26 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_27;
    vPos_27 = tmpvar_23;
    highp vec3 vDirection_28;
    vDirection_28 = tmpvar_2;
    highp float tmpvar_29;
    if (bLeaf2_26) {
      tmpvar_29 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_30;
    if (bLeaf2_26) {
      tmpvar_30 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_31;
    highp vec4 tmpvar_32;
    tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_32.x = (tmpvar_29 + tmpvar_24);
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    vPos_31 = (tmpvar_23 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_30 * (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_28 = tmpvar_2;
    vPos_27 = vPos_31;
    if (isBestWind_25) {
      highp vec3 tmpvar_34;
      tmpvar_34 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_35;
      if (bLeaf2_26) {
        tmpvar_35 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_36;
      if (bLeaf2_26) {
        tmpvar_36 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_37;
      if (bLeaf2_26) {
        tmpvar_37 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_38;
      if (bLeaf2_26) {
        tmpvar_38 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_39;
      if (bLeaf2_26) {
        tmpvar_39 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_39 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_40;
      if (bLeaf2_26) {
        tmpvar_40 = bool(1);
      } else {
        tmpvar_40 = bool(1);
      };
      highp float fTwitch_41;
      highp vec3 vAxis_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_35 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_35 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_35 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_35 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_31, vPos_31));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_37) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) + (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) - (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_34.z) * tmpvar_34.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_34.yzx * vRotatedWindVector_18.zxy) - (tmpvar_34.zxy * vRotatedWindVector_18.yzx));
      vAxis_42.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_18, tmpvar_34), -1.0, 1.0);
      vAxis_42.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_42);
      vAxis_42 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_57;
      tmpvar_57 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_41 = 0.0;
      if (tmpvar_40) {
        highp float fTime_58;
        fTime_58 = (tmpvar_39.z + tmpvar_44);
        highp vec4 tmpvar_59;
        tmpvar_59.zw = vec2(0.0, 0.0);
        tmpvar_59.x = fTime_58;
        tmpvar_59.y = (0.87 * fTime_58);
        highp vec4 tmpvar_60;
        highp vec4 tmpvar_61;
        tmpvar_61 = abs(((
          fract((tmpvar_59 + 0.5))
         * 2.0) - 1.0));
        tmpvar_60 = (((
          (tmpvar_61 * tmpvar_61)
         * 
          (3.0 - (2.0 * tmpvar_61))
        ) - 0.5) * 2.0);
        fTwitch_41 = (tmpvar_39.x * pow (clamp (
          ((((tmpvar_60.x * tmpvar_60.y) * tmpvar_60.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_39.y));
      };
      highp float fAngle_62;
      fAngle_62 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_38)
       + 
        (tmpvar_57 * tmpvar_36)
      ) + fTwitch_41));
      highp vec2 vSinCos_63;
      vSinCos_63.x = sin(fAngle_62);
      vSinCos_63.y = cos(fAngle_62);
      highp float tmpvar_64;
      tmpvar_64 = (1.0 - vSinCos_63.y);
      highp mat3 tmpvar_65;
      tmpvar_65[0].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_63.y);
      tmpvar_65[0].y = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[0].z = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[1].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[1].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_63.y);
      tmpvar_65[1].z = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[2].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].z = (((tmpvar_64 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_63.y);
      highp mat3 tmpvar_66;
      tmpvar_66 = (tmpvar_52 * tmpvar_65);
      vDirection_28 = (tmpvar_66 * _glesNormal);
      vPos_27 = (normalize((tmpvar_66 * vPos_31)) * tmpvar_48);
    };
    tmpvar_16 = vDirection_28;
    FinalPosition_19 = vPos_27;
  };
  highp vec3 tmpvar_67;
  tmpvar_67 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_67;
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_68;
    vPos_68 = tmpvar_67;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_69;
      vPos_69 = tmpvar_67;
      highp float fAdherenceScale_70;
      highp vec3 tmpvar_71;
      tmpvar_71 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_72;
      tmpvar_72 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_73;
      highp float fOscillation_74;
      fOscillation_74 = 1.0;
      highp float fAmount_75;
      highp float fTarget_76;
      highp vec4 tmpvar_77;
      tmpvar_77.x = (tmpvar_72 + _glesMultiTexCoord0.w);
      tmpvar_77.y = ((tmpvar_72 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_77.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_72 + _glesMultiTexCoord0.w));
      tmpvar_77.w = ((tmpvar_72 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      vOscillations_73 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      highp float tmpvar_79;
      tmpvar_79 = (vOscillations_73.y * vOscillations_73.z);
      fTarget_76 = 1.0;
      fAmount_75 = tmpvar_79;
      if ((tmpvar_79 < 0.0)) {
        fTarget_76 = -1.0;
        fAmount_75 = -(tmpvar_79);
      };
      fOscillation_74 = (((
        (mix (mix (tmpvar_79, fTarget_76, fAmount_75), fTarget_76, fAmount_75) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_73.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_73.w * _ST_WindBranchWhip.x)));
      vPos_69 = (tmpvar_67 + ((tmpvar_71 * fOscillation_74) * _ST_WindBranch.y));
      highp vec4 tmpvar_80;
      tmpvar_80.zw = vec2(0.0, 0.0);
      tmpvar_80.x = ((tmpvar_72 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_80.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_81;
      highp vec4 tmpvar_82;
      tmpvar_82 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      tmpvar_81 = (((
        (tmpvar_82 * tmpvar_82)
       * 
        (3.0 - (2.0 * tmpvar_82))
      ) - 0.5) * 2.0);
      fAdherenceScale_70 = (1.0 - ((
        ((tmpvar_81.x * tmpvar_81.y) * tmpvar_81.x)
       * tmpvar_81.y) * _ST_WindTurbulences.x));
      fAdherenceScale_70 = (fAdherenceScale_70 + ((vOscillations_73.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_69 = (vPos_69 + ((
        ((vRotatedBranchAnchor_17 - vPos_69) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_70) * _glesMultiTexCoord0.z));
      vPos_68 = vPos_69;
    } else {
      highp vec3 vPos_83;
      vPos_83 = vPos_68;
      highp vec3 tmpvar_84;
      tmpvar_84 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_85;
      tmpvar_85 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_86;
      highp float fAmount_87;
      highp float fTarget_88;
      highp vec4 tmpvar_89;
      tmpvar_89.w = 0.0;
      tmpvar_89.x = (tmpvar_85 + _glesMultiTexCoord0.w);
      tmpvar_89.y = ((tmpvar_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_89.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_90;
      tmpvar_90 = abs(((
        fract((tmpvar_89 + 0.5))
       * 2.0) - 1.0));
      vOscillations_86 = (((
        (tmpvar_90 * tmpvar_90)
       * 
        (3.0 - (2.0 * tmpvar_90))
      ) - 0.5) * 2.0);
      highp float tmpvar_91;
      tmpvar_91 = (vOscillations_86.y * vOscillations_86.z);
      fTarget_88 = 1.0;
      fAmount_87 = tmpvar_91;
      if ((tmpvar_91 < 0.0)) {
        fTarget_88 = -1.0;
        fAmount_87 = -(tmpvar_91);
      };
      vPos_83 = (vPos_68 + ((tmpvar_84 * 
        (((mix (
          mix (tmpvar_91, fTarget_88, fAmount_87)
        , fTarget_88, fAmount_87) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_86.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_68 = vPos_83;
    };
    FinalPosition_19 = vPos_68;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_92;
    vPos_92 = FinalPosition_19;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_96.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    vPos_92.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_97.x + (tmpvar_97.y * tmpvar_97.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_93)));
    vPos_92 = (normalize(vPos_92) * fLength_94);
    FinalPosition_19 = vPos_92;
  };
  tmpvar_15.xyz = FinalPosition_19;
  highp vec4 tmpvar_99;
  tmpvar_99 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = (tmpvar_99 * 0.5);
  highp vec2 tmpvar_102;
  tmpvar_102.x = tmpvar_101.x;
  tmpvar_102.y = (tmpvar_101.y * _ProjectionParams.x);
  o_100.xy = (tmpvar_102 + tmpvar_101.w);
  o_100.zw = tmpvar_99.zw;
  highp vec3 tmpvar_103;
  tmpvar_103 = o_100.xyw;
  tmpvar_9 = tmpvar_103;
  highp vec2 tmpvar_104;
  tmpvar_104 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_104;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_105;
  v_105.x = _World2Object[0].x;
  v_105.y = _World2Object[1].x;
  v_105.z = _World2Object[2].x;
  v_105.w = _World2Object[3].x;
  highp vec4 v_106;
  v_106.x = _World2Object[0].y;
  v_106.y = _World2Object[1].y;
  v_106.z = _World2Object[2].y;
  v_106.w = _World2Object[3].y;
  highp vec4 v_107;
  v_107.x = _World2Object[0].z;
  v_107.y = _World2Object[1].z;
  v_107.z = _World2Object[2].z;
  v_107.w = _World2Object[3].z;
  highp vec3 tmpvar_108;
  tmpvar_108 = normalize(((
    (v_105.xyz * tmpvar_16.x)
   + 
    (v_106.xyz * tmpvar_16.y)
  ) + (v_107.xyz * tmpvar_16.z)));
  worldNormal_3 = tmpvar_108;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_109;
  tmpvar_109.w = 1.0;
  tmpvar_109.xyz = worldNormal_3;
  mediump vec4 normal_110;
  normal_110 = tmpvar_109;
  mediump vec3 x2_111;
  mediump vec4 tmpvar_112;
  tmpvar_112 = (normal_110.xyzz * normal_110.yzzx);
  x2_111.x = dot (unity_SHBr, tmpvar_112);
  x2_111.y = dot (unity_SHBg, tmpvar_112);
  x2_111.z = dot (unity_SHBb, tmpvar_112);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_111 + (unity_SHC.xyz * (
    (normal_110.x * normal_110.x)
   - 
    (normal_110.y * normal_110.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_7.x = tmpvar_8.x;
  mediump float tmpvar_9;
  tmpvar_9 = fract(tmpvar_8.y);
  highp float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * 0.0625) + unity_LODFade.y);
  projUV_7.y = tmpvar_10;
  lowp float x_11;
  x_11 = (texture (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_6.w * _Color.w);
  tmpvar_5 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_5 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_6.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_6.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_6.x, max (diffuseColor_6.y, diffuseColor_6.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_16;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_2;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_17;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  mediump vec4 outDiffuseOcclusion_20;
  mediump vec4 outNormal_21;
  mediump vec4 emission_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = tmpvar_4;
  outDiffuseOcclusion_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  emission_22 = tmpvar_25;
  emission_22.xyz = (emission_22.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_19)));
  outDiffuse_1.xyz = outDiffuseOcclusion_20.xyz;
  outDiffuse_1.w = 1.0;
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_21;
  _glesFragData[3] = emission_22;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_11;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_15;
  highp vec4 tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_16 = tmpvar_1;
  tmpvar_17 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  FinalPosition_20 = tmpvar_1.xyz;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_24;
  tmpvar_24 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_20 = tmpvar_24;
  if (((tmpvar_21 > 1.0) && (tmpvar_21 < 5.0))) {
    highp float tmpvar_25;
    tmpvar_25 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_26;
    isBestWind_26 = (tmpvar_21 == 4.0);
    bool bLeaf2_27;
    bLeaf2_27 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_28;
    vPos_28 = tmpvar_24;
    highp vec3 vDirection_29;
    vDirection_29 = tmpvar_2;
    highp float tmpvar_30;
    if (bLeaf2_27) {
      tmpvar_30 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_31;
    if (bLeaf2_27) {
      tmpvar_31 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_32;
    highp vec4 tmpvar_33;
    tmpvar_33.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_33.x = (tmpvar_30 + tmpvar_25);
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    vPos_32 = (tmpvar_24 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_31 * (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_29 = tmpvar_2;
    vPos_28 = vPos_32;
    if (isBestWind_26) {
      highp vec3 tmpvar_35;
      tmpvar_35 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_36;
      if (bLeaf2_27) {
        tmpvar_36 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_37;
      if (bLeaf2_27) {
        tmpvar_37 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_38;
      if (bLeaf2_27) {
        tmpvar_38 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_39;
      if (bLeaf2_27) {
        tmpvar_39 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_40;
      if (bLeaf2_27) {
        tmpvar_40 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_40 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_41;
      if (bLeaf2_27) {
        tmpvar_41 = bool(1);
      } else {
        tmpvar_41 = bool(1);
      };
      highp float fTwitch_42;
      highp vec3 vAxis_43;
      highp vec3 tmpvar_44;
      tmpvar_44 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_45;
      tmpvar_45 = ((tmpvar_44.x + tmpvar_44.y) + tmpvar_44.z);
      highp vec4 tmpvar_46;
      tmpvar_46.x = (tmpvar_36 + tmpvar_45);
      tmpvar_46.y = ((tmpvar_36 * 0.75) - tmpvar_45);
      tmpvar_46.z = ((tmpvar_36 * 0.01) + tmpvar_45);
      tmpvar_46.w = (tmpvar_36 + tmpvar_45);
      highp vec4 tmpvar_47;
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      tmpvar_47 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = sqrt(dot (vPos_32, vPos_32));
      highp float fAngle_50;
      fAngle_50 = ((_glesMultiTexCoord2.x * tmpvar_38) * (tmpvar_47.x + (tmpvar_47.y * tmpvar_47.y)));
      highp vec2 vSinCos_51;
      vSinCos_51.x = sin(fAngle_50);
      vSinCos_51.y = cos(fAngle_50);
      highp float tmpvar_52;
      tmpvar_52 = (1.0 - vSinCos_51.y);
      highp mat3 tmpvar_53;
      tmpvar_53[0].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.x) + vSinCos_51.y);
      tmpvar_53[0].y = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.y) + (vSinCos_51.x * tmpvar_35.z));
      tmpvar_53[0].z = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.z) - (vSinCos_51.x * tmpvar_35.y));
      tmpvar_53[1].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.y) - (vSinCos_51.x * tmpvar_35.z));
      tmpvar_53[1].y = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.y) + vSinCos_51.y);
      tmpvar_53[1].z = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.z) + (vSinCos_51.x * tmpvar_35.x));
      tmpvar_53[2].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.z) + (vSinCos_51.x * tmpvar_35.y));
      tmpvar_53[2].y = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.z) - (vSinCos_51.x * tmpvar_35.x));
      tmpvar_53[2].z = (((tmpvar_52 * tmpvar_35.z) * tmpvar_35.z) + vSinCos_51.y);
      highp vec3 tmpvar_54;
      tmpvar_54 = ((tmpvar_35.yzx * vRotatedWindVector_19.zxy) - (tmpvar_35.zxy * vRotatedWindVector_19.yzx));
      vAxis_43.xz = tmpvar_54.xz;
      highp float tmpvar_55;
      tmpvar_55 = clamp (dot (vRotatedWindVector_19, tmpvar_35), -1.0, 1.0);
      vAxis_43.y = (tmpvar_54.y + tmpvar_55);
      highp vec3 tmpvar_56;
      tmpvar_56 = normalize(vAxis_43);
      vAxis_43 = tmpvar_56;
      highp float tmpvar_57;
      tmpvar_57 = (1.570796 - (sign(tmpvar_55) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_55))) * (1.570796 + (abs(tmpvar_55) * (-0.2146018 + 
          (abs(tmpvar_55) * (0.08656672 + (abs(tmpvar_55) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_58;
      tmpvar_58 = (tmpvar_47.y - (tmpvar_47.x * tmpvar_47.x));
      fTwitch_42 = 0.0;
      if (tmpvar_41) {
        highp float fTime_59;
        fTime_59 = (tmpvar_40.z + tmpvar_45);
        highp vec4 tmpvar_60;
        tmpvar_60.zw = vec2(0.0, 0.0);
        tmpvar_60.x = fTime_59;
        tmpvar_60.y = (0.87 * fTime_59);
        highp vec4 tmpvar_61;
        highp vec4 tmpvar_62;
        tmpvar_62 = abs(((
          fract((tmpvar_60 + 0.5))
         * 2.0) - 1.0));
        tmpvar_61 = (((
          (tmpvar_62 * tmpvar_62)
         * 
          (3.0 - (2.0 * tmpvar_62))
        ) - 0.5) * 2.0);
        fTwitch_42 = (tmpvar_40.x * pow (clamp (
          ((((tmpvar_61.x * tmpvar_61.y) * tmpvar_61.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_40.y));
      };
      highp float fAngle_63;
      fAngle_63 = (_glesMultiTexCoord2.x * ((
        (tmpvar_57 * tmpvar_39)
       + 
        (tmpvar_58 * tmpvar_37)
      ) + fTwitch_42));
      highp vec2 vSinCos_64;
      vSinCos_64.x = sin(fAngle_63);
      vSinCos_64.y = cos(fAngle_63);
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - vSinCos_64.y);
      highp mat3 tmpvar_66;
      tmpvar_66[0].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.x) + vSinCos_64.y);
      tmpvar_66[0].y = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.y) + (vSinCos_64.x * tmpvar_56.z));
      tmpvar_66[0].z = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.z) - (vSinCos_64.x * tmpvar_56.y));
      tmpvar_66[1].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.y) - (vSinCos_64.x * tmpvar_56.z));
      tmpvar_66[1].y = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.y) + vSinCos_64.y);
      tmpvar_66[1].z = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.z) + (vSinCos_64.x * tmpvar_56.x));
      tmpvar_66[2].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.z) + (vSinCos_64.x * tmpvar_56.y));
      tmpvar_66[2].y = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.z) - (vSinCos_64.x * tmpvar_56.x));
      tmpvar_66[2].z = (((tmpvar_65 * tmpvar_56.z) * tmpvar_56.z) + vSinCos_64.y);
      highp mat3 tmpvar_67;
      tmpvar_67 = (tmpvar_53 * tmpvar_66);
      vDirection_29 = (tmpvar_67 * _glesNormal);
      vPos_28 = (normalize((tmpvar_67 * vPos_32)) * tmpvar_49);
    };
    tmpvar_17 = vDirection_29;
    FinalPosition_20 = vPos_28;
  };
  highp vec3 tmpvar_68;
  tmpvar_68 = (FinalPosition_20 + _glesMultiTexCoord1.xyz);
  FinalPosition_20 = tmpvar_68;
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_69;
    vPos_69 = tmpvar_68;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_70;
      vPos_70 = tmpvar_68;
      highp float fAdherenceScale_71;
      highp vec3 tmpvar_72;
      tmpvar_72 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_73;
      tmpvar_73 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_74;
      highp float fOscillation_75;
      fOscillation_75 = 1.0;
      highp float fAmount_76;
      highp float fTarget_77;
      highp vec4 tmpvar_78;
      tmpvar_78.x = (tmpvar_73 + _glesMultiTexCoord0.w);
      tmpvar_78.y = ((tmpvar_73 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_78.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_73 + _glesMultiTexCoord0.w));
      tmpvar_78.w = ((tmpvar_73 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      vOscillations_74 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      highp float tmpvar_80;
      tmpvar_80 = (vOscillations_74.y * vOscillations_74.z);
      fTarget_77 = 1.0;
      fAmount_76 = tmpvar_80;
      if ((tmpvar_80 < 0.0)) {
        fTarget_77 = -1.0;
        fAmount_76 = -(tmpvar_80);
      };
      fOscillation_75 = (((
        (mix (mix (tmpvar_80, fTarget_77, fAmount_76), fTarget_77, fAmount_76) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_74.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_74.w * _ST_WindBranchWhip.x)));
      vPos_70 = (tmpvar_68 + ((tmpvar_72 * fOscillation_75) * _ST_WindBranch.y));
      highp vec4 tmpvar_81;
      tmpvar_81.zw = vec2(0.0, 0.0);
      tmpvar_81.x = ((tmpvar_73 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_81.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_82;
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_81 + 0.5))
       * 2.0) - 1.0));
      tmpvar_82 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      fAdherenceScale_71 = (1.0 - ((
        ((tmpvar_82.x * tmpvar_82.y) * tmpvar_82.x)
       * tmpvar_82.y) * _ST_WindTurbulences.x));
      fAdherenceScale_71 = (fAdherenceScale_71 + ((vOscillations_74.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_70 = (vPos_70 + ((
        ((vRotatedBranchAnchor_18 - vPos_70) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_71) * _glesMultiTexCoord0.z));
      vPos_69 = vPos_70;
    } else {
      highp vec3 vPos_84;
      vPos_84 = vPos_69;
      highp vec3 tmpvar_85;
      tmpvar_85 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_86;
      tmpvar_86 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_87;
      highp float fAmount_88;
      highp float fTarget_89;
      highp vec4 tmpvar_90;
      tmpvar_90.w = 0.0;
      tmpvar_90.x = (tmpvar_86 + _glesMultiTexCoord0.w);
      tmpvar_90.y = ((tmpvar_86 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_90.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_86 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_91;
      tmpvar_91 = abs(((
        fract((tmpvar_90 + 0.5))
       * 2.0) - 1.0));
      vOscillations_87 = (((
        (tmpvar_91 * tmpvar_91)
       * 
        (3.0 - (2.0 * tmpvar_91))
      ) - 0.5) * 2.0);
      highp float tmpvar_92;
      tmpvar_92 = (vOscillations_87.y * vOscillations_87.z);
      fTarget_89 = 1.0;
      fAmount_88 = tmpvar_92;
      if ((tmpvar_92 < 0.0)) {
        fTarget_89 = -1.0;
        fAmount_88 = -(tmpvar_92);
      };
      vPos_84 = (vPos_69 + ((tmpvar_85 * 
        (((mix (
          mix (tmpvar_92, fTarget_89, fAmount_88)
        , fTarget_89, fAmount_88) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_87.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_69 = vPos_84;
    };
    FinalPosition_20 = vPos_69;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_93;
    vPos_93 = FinalPosition_20;
    highp float fAdjust_94;
    highp float fLength_95;
    fLength_95 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_96;
    tmpvar_96 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_94 = tmpvar_96;
    if ((tmpvar_96 != 0.0)) {
      fAdjust_94 = pow (tmpvar_96, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_97;
    tmpvar_97.zw = vec2(0.0, 0.0);
    tmpvar_97.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_97.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_98;
    highp vec4 tmpvar_99;
    tmpvar_99 = abs(((
      fract((tmpvar_97 + 0.5))
     * 2.0) - 1.0));
    tmpvar_98 = (((
      (tmpvar_99 * tmpvar_99)
     * 
      (3.0 - (2.0 * tmpvar_99))
    ) - 0.5) * 2.0);
    vPos_93.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_98.x + (tmpvar_98.y * tmpvar_98.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_94)));
    vPos_93 = (normalize(vPos_93) * fLength_95);
    FinalPosition_20 = vPos_93;
  };
  tmpvar_16.xyz = FinalPosition_20;
  highp vec4 tmpvar_100;
  tmpvar_100 = (glstate_matrix_mvp * tmpvar_16);
  highp vec4 o_101;
  highp vec4 tmpvar_102;
  tmpvar_102 = (tmpvar_100 * 0.5);
  highp vec2 tmpvar_103;
  tmpvar_103.x = tmpvar_102.x;
  tmpvar_103.y = (tmpvar_102.y * _ProjectionParams.x);
  o_101.xy = (tmpvar_103 + tmpvar_102.w);
  o_101.zw = tmpvar_100.zw;
  highp vec3 tmpvar_104;
  tmpvar_104 = o_101.xyw;
  tmpvar_10 = tmpvar_104;
  highp vec2 tmpvar_105;
  tmpvar_105 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_105;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_106;
  tmpvar_106 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_107;
  v_107.x = _World2Object[0].x;
  v_107.y = _World2Object[1].x;
  v_107.z = _World2Object[2].x;
  v_107.w = _World2Object[3].x;
  highp vec4 v_108;
  v_108.x = _World2Object[0].y;
  v_108.y = _World2Object[1].y;
  v_108.z = _World2Object[2].y;
  v_108.w = _World2Object[3].y;
  highp vec4 v_109;
  v_109.x = _World2Object[0].z;
  v_109.y = _World2Object[1].z;
  v_109.z = _World2Object[2].z;
  v_109.w = _World2Object[3].z;
  highp vec3 tmpvar_110;
  tmpvar_110 = normalize(((
    (v_107.xyz * tmpvar_17.x)
   + 
    (v_108.xyz * tmpvar_17.y)
  ) + (v_109.xyz * tmpvar_17.z)));
  worldNormal_5 = tmpvar_110;
  highp mat3 tmpvar_111;
  tmpvar_111[0] = _Object2World[0].xyz;
  tmpvar_111[1] = _Object2World[1].xyz;
  tmpvar_111[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_112;
  tmpvar_112 = normalize((tmpvar_111 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_112;
  lowp vec3 tmpvar_113;
  tmpvar_113 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_114;
  tmpvar_114 = (tmpvar_113 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_114;
  highp vec4 tmpvar_115;
  tmpvar_115.x = worldTangent_4.x;
  tmpvar_115.y = worldBinormal_3.x;
  tmpvar_115.z = worldNormal_5.x;
  tmpvar_115.w = tmpvar_106.x;
  highp vec4 tmpvar_116;
  tmpvar_116.x = worldTangent_4.y;
  tmpvar_116.y = worldBinormal_3.y;
  tmpvar_116.z = worldNormal_5.y;
  tmpvar_116.w = tmpvar_106.y;
  highp vec4 tmpvar_117;
  tmpvar_117.x = worldTangent_4.z;
  tmpvar_117.y = worldBinormal_3.z;
  tmpvar_117.z = worldNormal_5.z;
  tmpvar_117.w = tmpvar_106.z;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_118;
  tmpvar_118.w = 1.0;
  tmpvar_118.xyz = worldNormal_5;
  mediump vec4 normal_119;
  normal_119 = tmpvar_118;
  mediump vec3 x2_120;
  mediump vec4 tmpvar_121;
  tmpvar_121 = (normal_119.xyzz * normal_119.yzzx);
  x2_120.x = dot (unity_SHBr, tmpvar_121);
  x2_120.y = dot (unity_SHBg, tmpvar_121);
  x2_120.z = dot (unity_SHBb, tmpvar_121);
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_115;
  xlv_TEXCOORD1 = tmpvar_116;
  xlv_TEXCOORD2 = tmpvar_117;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD7 = tmpvar_7;
  xlv_TEXCOORD8 = (x2_120 + (unity_SHC.xyz * (
    (normal_119.x * normal_119.x)
   - 
    (normal_119.y * normal_119.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 worldN_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_16 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_17;
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD0.xyz, tmpvar_18);
  worldN_3.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD1.xyz, tmpvar_18);
  worldN_3.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD2.xyz, tmpvar_18);
  worldN_3.z = tmpvar_21;
  mediump vec3 normalWorld_22;
  normalWorld_22 = worldN_3;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_22;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  mediump vec4 outDiffuseOcclusion_25;
  mediump vec4 outNormal_26;
  mediump vec4 emission_27;
  lowp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = tmpvar_5;
  outDiffuseOcclusion_25 = tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = ((worldN_3 * 0.5) + 0.5);
  outNormal_26 = tmpvar_29;
  lowp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = vec3(0.0, 0.0, 0.0);
  emission_27 = tmpvar_30;
  emission_27.xyz = (emission_27.xyz + (tmpvar_5 * (xlv_TEXCOORD8 + x1_24)));
  outDiffuse_1.xyz = outDiffuseOcclusion_25.xyz;
  outEmission_2.w = emission_27.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_27.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_26;
  gl_FragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
in vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD7;
out mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_11;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_15;
  highp vec4 tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_16 = tmpvar_1;
  tmpvar_17 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  FinalPosition_20 = tmpvar_1.xyz;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_24;
  tmpvar_24 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_20 = tmpvar_24;
  if (((tmpvar_21 > 1.0) && (tmpvar_21 < 5.0))) {
    highp float tmpvar_25;
    tmpvar_25 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_26;
    isBestWind_26 = (tmpvar_21 == 4.0);
    bool bLeaf2_27;
    bLeaf2_27 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_28;
    vPos_28 = tmpvar_24;
    highp vec3 vDirection_29;
    vDirection_29 = tmpvar_2;
    highp float tmpvar_30;
    if (bLeaf2_27) {
      tmpvar_30 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_31;
    if (bLeaf2_27) {
      tmpvar_31 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_32;
    highp vec4 tmpvar_33;
    tmpvar_33.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_33.x = (tmpvar_30 + tmpvar_25);
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    vPos_32 = (tmpvar_24 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_31 * (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_29 = tmpvar_2;
    vPos_28 = vPos_32;
    if (isBestWind_26) {
      highp vec3 tmpvar_35;
      tmpvar_35 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_36;
      if (bLeaf2_27) {
        tmpvar_36 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_37;
      if (bLeaf2_27) {
        tmpvar_37 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_38;
      if (bLeaf2_27) {
        tmpvar_38 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_39;
      if (bLeaf2_27) {
        tmpvar_39 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_40;
      if (bLeaf2_27) {
        tmpvar_40 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_40 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_41;
      if (bLeaf2_27) {
        tmpvar_41 = bool(1);
      } else {
        tmpvar_41 = bool(1);
      };
      highp float fTwitch_42;
      highp vec3 vAxis_43;
      highp vec3 tmpvar_44;
      tmpvar_44 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_45;
      tmpvar_45 = ((tmpvar_44.x + tmpvar_44.y) + tmpvar_44.z);
      highp vec4 tmpvar_46;
      tmpvar_46.x = (tmpvar_36 + tmpvar_45);
      tmpvar_46.y = ((tmpvar_36 * 0.75) - tmpvar_45);
      tmpvar_46.z = ((tmpvar_36 * 0.01) + tmpvar_45);
      tmpvar_46.w = (tmpvar_36 + tmpvar_45);
      highp vec4 tmpvar_47;
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      tmpvar_47 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = sqrt(dot (vPos_32, vPos_32));
      highp float fAngle_50;
      fAngle_50 = ((_glesMultiTexCoord2.x * tmpvar_38) * (tmpvar_47.x + (tmpvar_47.y * tmpvar_47.y)));
      highp vec2 vSinCos_51;
      vSinCos_51.x = sin(fAngle_50);
      vSinCos_51.y = cos(fAngle_50);
      highp float tmpvar_52;
      tmpvar_52 = (1.0 - vSinCos_51.y);
      highp mat3 tmpvar_53;
      tmpvar_53[0].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.x) + vSinCos_51.y);
      tmpvar_53[0].y = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.y) + (vSinCos_51.x * tmpvar_35.z));
      tmpvar_53[0].z = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.z) - (vSinCos_51.x * tmpvar_35.y));
      tmpvar_53[1].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.y) - (vSinCos_51.x * tmpvar_35.z));
      tmpvar_53[1].y = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.y) + vSinCos_51.y);
      tmpvar_53[1].z = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.z) + (vSinCos_51.x * tmpvar_35.x));
      tmpvar_53[2].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.z) + (vSinCos_51.x * tmpvar_35.y));
      tmpvar_53[2].y = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.z) - (vSinCos_51.x * tmpvar_35.x));
      tmpvar_53[2].z = (((tmpvar_52 * tmpvar_35.z) * tmpvar_35.z) + vSinCos_51.y);
      highp vec3 tmpvar_54;
      tmpvar_54 = ((tmpvar_35.yzx * vRotatedWindVector_19.zxy) - (tmpvar_35.zxy * vRotatedWindVector_19.yzx));
      vAxis_43.xz = tmpvar_54.xz;
      highp float tmpvar_55;
      tmpvar_55 = clamp (dot (vRotatedWindVector_19, tmpvar_35), -1.0, 1.0);
      vAxis_43.y = (tmpvar_54.y + tmpvar_55);
      highp vec3 tmpvar_56;
      tmpvar_56 = normalize(vAxis_43);
      vAxis_43 = tmpvar_56;
      highp float tmpvar_57;
      tmpvar_57 = (1.570796 - (sign(tmpvar_55) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_55))) * (1.570796 + (abs(tmpvar_55) * (-0.2146018 + 
          (abs(tmpvar_55) * (0.08656672 + (abs(tmpvar_55) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_58;
      tmpvar_58 = (tmpvar_47.y - (tmpvar_47.x * tmpvar_47.x));
      fTwitch_42 = 0.0;
      if (tmpvar_41) {
        highp float fTime_59;
        fTime_59 = (tmpvar_40.z + tmpvar_45);
        highp vec4 tmpvar_60;
        tmpvar_60.zw = vec2(0.0, 0.0);
        tmpvar_60.x = fTime_59;
        tmpvar_60.y = (0.87 * fTime_59);
        highp vec4 tmpvar_61;
        highp vec4 tmpvar_62;
        tmpvar_62 = abs(((
          fract((tmpvar_60 + 0.5))
         * 2.0) - 1.0));
        tmpvar_61 = (((
          (tmpvar_62 * tmpvar_62)
         * 
          (3.0 - (2.0 * tmpvar_62))
        ) - 0.5) * 2.0);
        fTwitch_42 = (tmpvar_40.x * pow (clamp (
          ((((tmpvar_61.x * tmpvar_61.y) * tmpvar_61.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_40.y));
      };
      highp float fAngle_63;
      fAngle_63 = (_glesMultiTexCoord2.x * ((
        (tmpvar_57 * tmpvar_39)
       + 
        (tmpvar_58 * tmpvar_37)
      ) + fTwitch_42));
      highp vec2 vSinCos_64;
      vSinCos_64.x = sin(fAngle_63);
      vSinCos_64.y = cos(fAngle_63);
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - vSinCos_64.y);
      highp mat3 tmpvar_66;
      tmpvar_66[0].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.x) + vSinCos_64.y);
      tmpvar_66[0].y = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.y) + (vSinCos_64.x * tmpvar_56.z));
      tmpvar_66[0].z = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.z) - (vSinCos_64.x * tmpvar_56.y));
      tmpvar_66[1].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.y) - (vSinCos_64.x * tmpvar_56.z));
      tmpvar_66[1].y = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.y) + vSinCos_64.y);
      tmpvar_66[1].z = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.z) + (vSinCos_64.x * tmpvar_56.x));
      tmpvar_66[2].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.z) + (vSinCos_64.x * tmpvar_56.y));
      tmpvar_66[2].y = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.z) - (vSinCos_64.x * tmpvar_56.x));
      tmpvar_66[2].z = (((tmpvar_65 * tmpvar_56.z) * tmpvar_56.z) + vSinCos_64.y);
      highp mat3 tmpvar_67;
      tmpvar_67 = (tmpvar_53 * tmpvar_66);
      vDirection_29 = (tmpvar_67 * _glesNormal);
      vPos_28 = (normalize((tmpvar_67 * vPos_32)) * tmpvar_49);
    };
    tmpvar_17 = vDirection_29;
    FinalPosition_20 = vPos_28;
  };
  highp vec3 tmpvar_68;
  tmpvar_68 = (FinalPosition_20 + _glesMultiTexCoord1.xyz);
  FinalPosition_20 = tmpvar_68;
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_69;
    vPos_69 = tmpvar_68;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_70;
      vPos_70 = tmpvar_68;
      highp float fAdherenceScale_71;
      highp vec3 tmpvar_72;
      tmpvar_72 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_73;
      tmpvar_73 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_74;
      highp float fOscillation_75;
      fOscillation_75 = 1.0;
      highp float fAmount_76;
      highp float fTarget_77;
      highp vec4 tmpvar_78;
      tmpvar_78.x = (tmpvar_73 + _glesMultiTexCoord0.w);
      tmpvar_78.y = ((tmpvar_73 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_78.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_73 + _glesMultiTexCoord0.w));
      tmpvar_78.w = ((tmpvar_73 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      vOscillations_74 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      highp float tmpvar_80;
      tmpvar_80 = (vOscillations_74.y * vOscillations_74.z);
      fTarget_77 = 1.0;
      fAmount_76 = tmpvar_80;
      if ((tmpvar_80 < 0.0)) {
        fTarget_77 = -1.0;
        fAmount_76 = -(tmpvar_80);
      };
      fOscillation_75 = (((
        (mix (mix (tmpvar_80, fTarget_77, fAmount_76), fTarget_77, fAmount_76) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_74.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_74.w * _ST_WindBranchWhip.x)));
      vPos_70 = (tmpvar_68 + ((tmpvar_72 * fOscillation_75) * _ST_WindBranch.y));
      highp vec4 tmpvar_81;
      tmpvar_81.zw = vec2(0.0, 0.0);
      tmpvar_81.x = ((tmpvar_73 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_81.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_82;
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_81 + 0.5))
       * 2.0) - 1.0));
      tmpvar_82 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      fAdherenceScale_71 = (1.0 - ((
        ((tmpvar_82.x * tmpvar_82.y) * tmpvar_82.x)
       * tmpvar_82.y) * _ST_WindTurbulences.x));
      fAdherenceScale_71 = (fAdherenceScale_71 + ((vOscillations_74.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_70 = (vPos_70 + ((
        ((vRotatedBranchAnchor_18 - vPos_70) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_71) * _glesMultiTexCoord0.z));
      vPos_69 = vPos_70;
    } else {
      highp vec3 vPos_84;
      vPos_84 = vPos_69;
      highp vec3 tmpvar_85;
      tmpvar_85 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_86;
      tmpvar_86 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_87;
      highp float fAmount_88;
      highp float fTarget_89;
      highp vec4 tmpvar_90;
      tmpvar_90.w = 0.0;
      tmpvar_90.x = (tmpvar_86 + _glesMultiTexCoord0.w);
      tmpvar_90.y = ((tmpvar_86 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_90.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_86 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_91;
      tmpvar_91 = abs(((
        fract((tmpvar_90 + 0.5))
       * 2.0) - 1.0));
      vOscillations_87 = (((
        (tmpvar_91 * tmpvar_91)
       * 
        (3.0 - (2.0 * tmpvar_91))
      ) - 0.5) * 2.0);
      highp float tmpvar_92;
      tmpvar_92 = (vOscillations_87.y * vOscillations_87.z);
      fTarget_89 = 1.0;
      fAmount_88 = tmpvar_92;
      if ((tmpvar_92 < 0.0)) {
        fTarget_89 = -1.0;
        fAmount_88 = -(tmpvar_92);
      };
      vPos_84 = (vPos_69 + ((tmpvar_85 * 
        (((mix (
          mix (tmpvar_92, fTarget_89, fAmount_88)
        , fTarget_89, fAmount_88) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_87.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_69 = vPos_84;
    };
    FinalPosition_20 = vPos_69;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_93;
    vPos_93 = FinalPosition_20;
    highp float fAdjust_94;
    highp float fLength_95;
    fLength_95 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_96;
    tmpvar_96 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_94 = tmpvar_96;
    if ((tmpvar_96 != 0.0)) {
      fAdjust_94 = pow (tmpvar_96, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_97;
    tmpvar_97.zw = vec2(0.0, 0.0);
    tmpvar_97.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_97.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_98;
    highp vec4 tmpvar_99;
    tmpvar_99 = abs(((
      fract((tmpvar_97 + 0.5))
     * 2.0) - 1.0));
    tmpvar_98 = (((
      (tmpvar_99 * tmpvar_99)
     * 
      (3.0 - (2.0 * tmpvar_99))
    ) - 0.5) * 2.0);
    vPos_93.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_98.x + (tmpvar_98.y * tmpvar_98.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_94)));
    vPos_93 = (normalize(vPos_93) * fLength_95);
    FinalPosition_20 = vPos_93;
  };
  tmpvar_16.xyz = FinalPosition_20;
  highp vec4 tmpvar_100;
  tmpvar_100 = (glstate_matrix_mvp * tmpvar_16);
  highp vec4 o_101;
  highp vec4 tmpvar_102;
  tmpvar_102 = (tmpvar_100 * 0.5);
  highp vec2 tmpvar_103;
  tmpvar_103.x = tmpvar_102.x;
  tmpvar_103.y = (tmpvar_102.y * _ProjectionParams.x);
  o_101.xy = (tmpvar_103 + tmpvar_102.w);
  o_101.zw = tmpvar_100.zw;
  highp vec3 tmpvar_104;
  tmpvar_104 = o_101.xyw;
  tmpvar_10 = tmpvar_104;
  highp vec2 tmpvar_105;
  tmpvar_105 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_105;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_106;
  tmpvar_106 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_107;
  v_107.x = _World2Object[0].x;
  v_107.y = _World2Object[1].x;
  v_107.z = _World2Object[2].x;
  v_107.w = _World2Object[3].x;
  highp vec4 v_108;
  v_108.x = _World2Object[0].y;
  v_108.y = _World2Object[1].y;
  v_108.z = _World2Object[2].y;
  v_108.w = _World2Object[3].y;
  highp vec4 v_109;
  v_109.x = _World2Object[0].z;
  v_109.y = _World2Object[1].z;
  v_109.z = _World2Object[2].z;
  v_109.w = _World2Object[3].z;
  highp vec3 tmpvar_110;
  tmpvar_110 = normalize(((
    (v_107.xyz * tmpvar_17.x)
   + 
    (v_108.xyz * tmpvar_17.y)
  ) + (v_109.xyz * tmpvar_17.z)));
  worldNormal_5 = tmpvar_110;
  highp mat3 tmpvar_111;
  tmpvar_111[0] = _Object2World[0].xyz;
  tmpvar_111[1] = _Object2World[1].xyz;
  tmpvar_111[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_112;
  tmpvar_112 = normalize((tmpvar_111 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_112;
  lowp vec3 tmpvar_113;
  tmpvar_113 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_114;
  tmpvar_114 = (tmpvar_113 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_114;
  highp vec4 tmpvar_115;
  tmpvar_115.x = worldTangent_4.x;
  tmpvar_115.y = worldBinormal_3.x;
  tmpvar_115.z = worldNormal_5.x;
  tmpvar_115.w = tmpvar_106.x;
  highp vec4 tmpvar_116;
  tmpvar_116.x = worldTangent_4.y;
  tmpvar_116.y = worldBinormal_3.y;
  tmpvar_116.z = worldNormal_5.y;
  tmpvar_116.w = tmpvar_106.y;
  highp vec4 tmpvar_117;
  tmpvar_117.x = worldTangent_4.z;
  tmpvar_117.y = worldBinormal_3.z;
  tmpvar_117.z = worldNormal_5.z;
  tmpvar_117.w = tmpvar_106.z;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_118;
  tmpvar_118.w = 1.0;
  tmpvar_118.xyz = worldNormal_5;
  mediump vec4 normal_119;
  normal_119 = tmpvar_118;
  mediump vec3 x2_120;
  mediump vec4 tmpvar_121;
  tmpvar_121 = (normal_119.xyzz * normal_119.yzzx);
  x2_120.x = dot (unity_SHBr, tmpvar_121);
  x2_120.y = dot (unity_SHBg, tmpvar_121);
  x2_120.z = dot (unity_SHBb, tmpvar_121);
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_115;
  xlv_TEXCOORD1 = tmpvar_116;
  xlv_TEXCOORD2 = tmpvar_117;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD7 = tmpvar_7;
  xlv_TEXCOORD8 = (x2_120 + (unity_SHC.xyz * (
    (normal_119.x * normal_119.x)
   - 
    (normal_119.y * normal_119.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 worldN_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_16 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_17;
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD0.xyz, tmpvar_18);
  worldN_3.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD1.xyz, tmpvar_18);
  worldN_3.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD2.xyz, tmpvar_18);
  worldN_3.z = tmpvar_21;
  mediump vec3 normalWorld_22;
  normalWorld_22 = worldN_3;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_22;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  mediump vec4 outDiffuseOcclusion_25;
  mediump vec4 outNormal_26;
  mediump vec4 emission_27;
  lowp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = tmpvar_5;
  outDiffuseOcclusion_25 = tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = ((worldN_3 * 0.5) + 0.5);
  outNormal_26 = tmpvar_29;
  lowp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = vec3(0.0, 0.0, 0.0);
  emission_27 = tmpvar_30;
  emission_27.xyz = (emission_27.xyz + (tmpvar_5 * (xlv_TEXCOORD8 + x1_24)));
  outDiffuse_1.xyz = outDiffuseOcclusion_25.xyz;
  outEmission_2.w = emission_27.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_27.xyz));
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_26;
  _glesFragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_11;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_15;
  highp vec4 tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_16 = tmpvar_1;
  tmpvar_17 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  FinalPosition_20 = tmpvar_1.xyz;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_24;
  tmpvar_24 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_20 = tmpvar_24;
  if (((tmpvar_21 > 1.0) && (tmpvar_21 < 5.0))) {
    highp float tmpvar_25;
    tmpvar_25 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_26;
    isBestWind_26 = (tmpvar_21 == 4.0);
    bool bLeaf2_27;
    bLeaf2_27 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_28;
    vPos_28 = tmpvar_24;
    highp vec3 vDirection_29;
    vDirection_29 = tmpvar_2;
    highp float tmpvar_30;
    if (bLeaf2_27) {
      tmpvar_30 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_31;
    if (bLeaf2_27) {
      tmpvar_31 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_32;
    highp vec4 tmpvar_33;
    tmpvar_33.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_33.x = (tmpvar_30 + tmpvar_25);
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    vPos_32 = (tmpvar_24 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_31 * (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_29 = tmpvar_2;
    vPos_28 = vPos_32;
    if (isBestWind_26) {
      highp vec3 tmpvar_35;
      tmpvar_35 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_36;
      if (bLeaf2_27) {
        tmpvar_36 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_37;
      if (bLeaf2_27) {
        tmpvar_37 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_38;
      if (bLeaf2_27) {
        tmpvar_38 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_39;
      if (bLeaf2_27) {
        tmpvar_39 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_40;
      if (bLeaf2_27) {
        tmpvar_40 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_40 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_41;
      if (bLeaf2_27) {
        tmpvar_41 = bool(1);
      } else {
        tmpvar_41 = bool(1);
      };
      highp float fTwitch_42;
      highp vec3 vAxis_43;
      highp vec3 tmpvar_44;
      tmpvar_44 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_45;
      tmpvar_45 = ((tmpvar_44.x + tmpvar_44.y) + tmpvar_44.z);
      highp vec4 tmpvar_46;
      tmpvar_46.x = (tmpvar_36 + tmpvar_45);
      tmpvar_46.y = ((tmpvar_36 * 0.75) - tmpvar_45);
      tmpvar_46.z = ((tmpvar_36 * 0.01) + tmpvar_45);
      tmpvar_46.w = (tmpvar_36 + tmpvar_45);
      highp vec4 tmpvar_47;
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      tmpvar_47 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = sqrt(dot (vPos_32, vPos_32));
      highp float fAngle_50;
      fAngle_50 = ((_glesMultiTexCoord2.x * tmpvar_38) * (tmpvar_47.x + (tmpvar_47.y * tmpvar_47.y)));
      highp vec2 vSinCos_51;
      vSinCos_51.x = sin(fAngle_50);
      vSinCos_51.y = cos(fAngle_50);
      highp float tmpvar_52;
      tmpvar_52 = (1.0 - vSinCos_51.y);
      highp mat3 tmpvar_53;
      tmpvar_53[0].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.x) + vSinCos_51.y);
      tmpvar_53[0].y = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.y) + (vSinCos_51.x * tmpvar_35.z));
      tmpvar_53[0].z = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.z) - (vSinCos_51.x * tmpvar_35.y));
      tmpvar_53[1].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.y) - (vSinCos_51.x * tmpvar_35.z));
      tmpvar_53[1].y = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.y) + vSinCos_51.y);
      tmpvar_53[1].z = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.z) + (vSinCos_51.x * tmpvar_35.x));
      tmpvar_53[2].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.z) + (vSinCos_51.x * tmpvar_35.y));
      tmpvar_53[2].y = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.z) - (vSinCos_51.x * tmpvar_35.x));
      tmpvar_53[2].z = (((tmpvar_52 * tmpvar_35.z) * tmpvar_35.z) + vSinCos_51.y);
      highp vec3 tmpvar_54;
      tmpvar_54 = ((tmpvar_35.yzx * vRotatedWindVector_19.zxy) - (tmpvar_35.zxy * vRotatedWindVector_19.yzx));
      vAxis_43.xz = tmpvar_54.xz;
      highp float tmpvar_55;
      tmpvar_55 = clamp (dot (vRotatedWindVector_19, tmpvar_35), -1.0, 1.0);
      vAxis_43.y = (tmpvar_54.y + tmpvar_55);
      highp vec3 tmpvar_56;
      tmpvar_56 = normalize(vAxis_43);
      vAxis_43 = tmpvar_56;
      highp float tmpvar_57;
      tmpvar_57 = (1.570796 - (sign(tmpvar_55) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_55))) * (1.570796 + (abs(tmpvar_55) * (-0.2146018 + 
          (abs(tmpvar_55) * (0.08656672 + (abs(tmpvar_55) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_58;
      tmpvar_58 = (tmpvar_47.y - (tmpvar_47.x * tmpvar_47.x));
      fTwitch_42 = 0.0;
      if (tmpvar_41) {
        highp float fTime_59;
        fTime_59 = (tmpvar_40.z + tmpvar_45);
        highp vec4 tmpvar_60;
        tmpvar_60.zw = vec2(0.0, 0.0);
        tmpvar_60.x = fTime_59;
        tmpvar_60.y = (0.87 * fTime_59);
        highp vec4 tmpvar_61;
        highp vec4 tmpvar_62;
        tmpvar_62 = abs(((
          fract((tmpvar_60 + 0.5))
         * 2.0) - 1.0));
        tmpvar_61 = (((
          (tmpvar_62 * tmpvar_62)
         * 
          (3.0 - (2.0 * tmpvar_62))
        ) - 0.5) * 2.0);
        fTwitch_42 = (tmpvar_40.x * pow (clamp (
          ((((tmpvar_61.x * tmpvar_61.y) * tmpvar_61.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_40.y));
      };
      highp float fAngle_63;
      fAngle_63 = (_glesMultiTexCoord2.x * ((
        (tmpvar_57 * tmpvar_39)
       + 
        (tmpvar_58 * tmpvar_37)
      ) + fTwitch_42));
      highp vec2 vSinCos_64;
      vSinCos_64.x = sin(fAngle_63);
      vSinCos_64.y = cos(fAngle_63);
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - vSinCos_64.y);
      highp mat3 tmpvar_66;
      tmpvar_66[0].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.x) + vSinCos_64.y);
      tmpvar_66[0].y = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.y) + (vSinCos_64.x * tmpvar_56.z));
      tmpvar_66[0].z = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.z) - (vSinCos_64.x * tmpvar_56.y));
      tmpvar_66[1].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.y) - (vSinCos_64.x * tmpvar_56.z));
      tmpvar_66[1].y = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.y) + vSinCos_64.y);
      tmpvar_66[1].z = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.z) + (vSinCos_64.x * tmpvar_56.x));
      tmpvar_66[2].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.z) + (vSinCos_64.x * tmpvar_56.y));
      tmpvar_66[2].y = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.z) - (vSinCos_64.x * tmpvar_56.x));
      tmpvar_66[2].z = (((tmpvar_65 * tmpvar_56.z) * tmpvar_56.z) + vSinCos_64.y);
      highp mat3 tmpvar_67;
      tmpvar_67 = (tmpvar_53 * tmpvar_66);
      vDirection_29 = (tmpvar_67 * _glesNormal);
      vPos_28 = (normalize((tmpvar_67 * vPos_32)) * tmpvar_49);
    };
    tmpvar_17 = vDirection_29;
    FinalPosition_20 = vPos_28;
  };
  highp vec3 tmpvar_68;
  tmpvar_68 = (FinalPosition_20 + _glesMultiTexCoord1.xyz);
  FinalPosition_20 = tmpvar_68;
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_69;
    vPos_69 = tmpvar_68;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_70;
      vPos_70 = tmpvar_68;
      highp float fAdherenceScale_71;
      highp vec3 tmpvar_72;
      tmpvar_72 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_73;
      tmpvar_73 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_74;
      highp float fOscillation_75;
      fOscillation_75 = 1.0;
      highp float fAmount_76;
      highp float fTarget_77;
      highp vec4 tmpvar_78;
      tmpvar_78.x = (tmpvar_73 + _glesMultiTexCoord0.w);
      tmpvar_78.y = ((tmpvar_73 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_78.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_73 + _glesMultiTexCoord0.w));
      tmpvar_78.w = ((tmpvar_73 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      vOscillations_74 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      highp float tmpvar_80;
      tmpvar_80 = (vOscillations_74.y * vOscillations_74.z);
      fTarget_77 = 1.0;
      fAmount_76 = tmpvar_80;
      if ((tmpvar_80 < 0.0)) {
        fTarget_77 = -1.0;
        fAmount_76 = -(tmpvar_80);
      };
      fOscillation_75 = (((
        (mix (mix (tmpvar_80, fTarget_77, fAmount_76), fTarget_77, fAmount_76) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_74.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_74.w * _ST_WindBranchWhip.x)));
      vPos_70 = (tmpvar_68 + ((tmpvar_72 * fOscillation_75) * _ST_WindBranch.y));
      highp vec4 tmpvar_81;
      tmpvar_81.zw = vec2(0.0, 0.0);
      tmpvar_81.x = ((tmpvar_73 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_81.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_82;
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_81 + 0.5))
       * 2.0) - 1.0));
      tmpvar_82 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      fAdherenceScale_71 = (1.0 - ((
        ((tmpvar_82.x * tmpvar_82.y) * tmpvar_82.x)
       * tmpvar_82.y) * _ST_WindTurbulences.x));
      fAdherenceScale_71 = (fAdherenceScale_71 + ((vOscillations_74.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_70 = (vPos_70 + ((
        ((vRotatedBranchAnchor_18 - vPos_70) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_71) * _glesMultiTexCoord0.z));
      vPos_69 = vPos_70;
    } else {
      highp vec3 vPos_84;
      vPos_84 = vPos_69;
      highp vec3 tmpvar_85;
      tmpvar_85 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_86;
      tmpvar_86 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_87;
      highp float fAmount_88;
      highp float fTarget_89;
      highp vec4 tmpvar_90;
      tmpvar_90.w = 0.0;
      tmpvar_90.x = (tmpvar_86 + _glesMultiTexCoord0.w);
      tmpvar_90.y = ((tmpvar_86 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_90.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_86 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_91;
      tmpvar_91 = abs(((
        fract((tmpvar_90 + 0.5))
       * 2.0) - 1.0));
      vOscillations_87 = (((
        (tmpvar_91 * tmpvar_91)
       * 
        (3.0 - (2.0 * tmpvar_91))
      ) - 0.5) * 2.0);
      highp float tmpvar_92;
      tmpvar_92 = (vOscillations_87.y * vOscillations_87.z);
      fTarget_89 = 1.0;
      fAmount_88 = tmpvar_92;
      if ((tmpvar_92 < 0.0)) {
        fTarget_89 = -1.0;
        fAmount_88 = -(tmpvar_92);
      };
      vPos_84 = (vPos_69 + ((tmpvar_85 * 
        (((mix (
          mix (tmpvar_92, fTarget_89, fAmount_88)
        , fTarget_89, fAmount_88) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_87.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_69 = vPos_84;
    };
    FinalPosition_20 = vPos_69;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_93;
    vPos_93 = FinalPosition_20;
    highp float fAdjust_94;
    highp float fLength_95;
    fLength_95 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_96;
    tmpvar_96 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_94 = tmpvar_96;
    if ((tmpvar_96 != 0.0)) {
      fAdjust_94 = pow (tmpvar_96, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_97;
    tmpvar_97.zw = vec2(0.0, 0.0);
    tmpvar_97.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_97.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_98;
    highp vec4 tmpvar_99;
    tmpvar_99 = abs(((
      fract((tmpvar_97 + 0.5))
     * 2.0) - 1.0));
    tmpvar_98 = (((
      (tmpvar_99 * tmpvar_99)
     * 
      (3.0 - (2.0 * tmpvar_99))
    ) - 0.5) * 2.0);
    vPos_93.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_98.x + (tmpvar_98.y * tmpvar_98.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_94)));
    vPos_93 = (normalize(vPos_93) * fLength_95);
    FinalPosition_20 = vPos_93;
  };
  tmpvar_16.xyz = FinalPosition_20;
  highp vec4 tmpvar_100;
  tmpvar_100 = (glstate_matrix_mvp * tmpvar_16);
  highp vec4 o_101;
  highp vec4 tmpvar_102;
  tmpvar_102 = (tmpvar_100 * 0.5);
  highp vec2 tmpvar_103;
  tmpvar_103.x = tmpvar_102.x;
  tmpvar_103.y = (tmpvar_102.y * _ProjectionParams.x);
  o_101.xy = (tmpvar_103 + tmpvar_102.w);
  o_101.zw = tmpvar_100.zw;
  highp vec3 tmpvar_104;
  tmpvar_104 = o_101.xyw;
  tmpvar_10 = tmpvar_104;
  highp vec2 tmpvar_105;
  tmpvar_105 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_105;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_106;
  tmpvar_106 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_107;
  v_107.x = _World2Object[0].x;
  v_107.y = _World2Object[1].x;
  v_107.z = _World2Object[2].x;
  v_107.w = _World2Object[3].x;
  highp vec4 v_108;
  v_108.x = _World2Object[0].y;
  v_108.y = _World2Object[1].y;
  v_108.z = _World2Object[2].y;
  v_108.w = _World2Object[3].y;
  highp vec4 v_109;
  v_109.x = _World2Object[0].z;
  v_109.y = _World2Object[1].z;
  v_109.z = _World2Object[2].z;
  v_109.w = _World2Object[3].z;
  highp vec3 tmpvar_110;
  tmpvar_110 = normalize(((
    (v_107.xyz * tmpvar_17.x)
   + 
    (v_108.xyz * tmpvar_17.y)
  ) + (v_109.xyz * tmpvar_17.z)));
  worldNormal_5 = tmpvar_110;
  highp mat3 tmpvar_111;
  tmpvar_111[0] = _Object2World[0].xyz;
  tmpvar_111[1] = _Object2World[1].xyz;
  tmpvar_111[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_112;
  tmpvar_112 = normalize((tmpvar_111 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_112;
  lowp vec3 tmpvar_113;
  tmpvar_113 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_114;
  tmpvar_114 = (tmpvar_113 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_114;
  highp vec4 tmpvar_115;
  tmpvar_115.x = worldTangent_4.x;
  tmpvar_115.y = worldBinormal_3.x;
  tmpvar_115.z = worldNormal_5.x;
  tmpvar_115.w = tmpvar_106.x;
  highp vec4 tmpvar_116;
  tmpvar_116.x = worldTangent_4.y;
  tmpvar_116.y = worldBinormal_3.y;
  tmpvar_116.z = worldNormal_5.y;
  tmpvar_116.w = tmpvar_106.y;
  highp vec4 tmpvar_117;
  tmpvar_117.x = worldTangent_4.z;
  tmpvar_117.y = worldBinormal_3.z;
  tmpvar_117.z = worldNormal_5.z;
  tmpvar_117.w = tmpvar_106.z;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_118;
  tmpvar_118.w = 1.0;
  tmpvar_118.xyz = worldNormal_5;
  mediump vec4 normal_119;
  normal_119 = tmpvar_118;
  mediump vec3 x2_120;
  mediump vec4 tmpvar_121;
  tmpvar_121 = (normal_119.xyzz * normal_119.yzzx);
  x2_120.x = dot (unity_SHBr, tmpvar_121);
  x2_120.y = dot (unity_SHBg, tmpvar_121);
  x2_120.z = dot (unity_SHBb, tmpvar_121);
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_115;
  xlv_TEXCOORD1 = tmpvar_116;
  xlv_TEXCOORD2 = tmpvar_117;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD7 = tmpvar_7;
  xlv_TEXCOORD8 = (x2_120 + (unity_SHC.xyz * (
    (normal_119.x * normal_119.x)
   - 
    (normal_119.y * normal_119.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 worldN_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_7.x = tmpvar_8.x;
  mediump float tmpvar_9;
  tmpvar_9 = fract(tmpvar_8.y);
  highp float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * 0.0625) + unity_LODFade.y);
  projUV_7.y = tmpvar_10;
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_6 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_6.w * _Color.w);
  tmpvar_5 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_5 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_6.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_6.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_6.x, max (diffuseColor_6.y, diffuseColor_6.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_2.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_2.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_2.z = tmpvar_20;
  mediump vec3 normalWorld_21;
  normalWorld_21 = worldN_2;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_21;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  mediump vec4 outDiffuseOcclusion_24;
  mediump vec4 outNormal_25;
  mediump vec4 emission_26;
  lowp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = tmpvar_4;
  outDiffuseOcclusion_24 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = ((worldN_2 * 0.5) + 0.5);
  outNormal_25 = tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = vec3(0.0, 0.0, 0.0);
  emission_26 = tmpvar_29;
  emission_26.xyz = (emission_26.xyz + (tmpvar_4 * (xlv_TEXCOORD8 + x1_23)));
  outDiffuse_1.xyz = outDiffuseOcclusion_24.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_25;
  gl_FragData[3] = emission_26;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
in vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD7;
out mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_11;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_15;
  highp vec4 tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_16 = tmpvar_1;
  tmpvar_17 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  FinalPosition_20 = tmpvar_1.xyz;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_24;
  tmpvar_24 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_20 = tmpvar_24;
  if (((tmpvar_21 > 1.0) && (tmpvar_21 < 5.0))) {
    highp float tmpvar_25;
    tmpvar_25 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_26;
    isBestWind_26 = (tmpvar_21 == 4.0);
    bool bLeaf2_27;
    bLeaf2_27 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_28;
    vPos_28 = tmpvar_24;
    highp vec3 vDirection_29;
    vDirection_29 = tmpvar_2;
    highp float tmpvar_30;
    if (bLeaf2_27) {
      tmpvar_30 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_31;
    if (bLeaf2_27) {
      tmpvar_31 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_32;
    highp vec4 tmpvar_33;
    tmpvar_33.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_33.x = (tmpvar_30 + tmpvar_25);
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    vPos_32 = (tmpvar_24 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_31 * (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_29 = tmpvar_2;
    vPos_28 = vPos_32;
    if (isBestWind_26) {
      highp vec3 tmpvar_35;
      tmpvar_35 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_36;
      if (bLeaf2_27) {
        tmpvar_36 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_37;
      if (bLeaf2_27) {
        tmpvar_37 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_38;
      if (bLeaf2_27) {
        tmpvar_38 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_39;
      if (bLeaf2_27) {
        tmpvar_39 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_40;
      if (bLeaf2_27) {
        tmpvar_40 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_40 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_41;
      if (bLeaf2_27) {
        tmpvar_41 = bool(1);
      } else {
        tmpvar_41 = bool(1);
      };
      highp float fTwitch_42;
      highp vec3 vAxis_43;
      highp vec3 tmpvar_44;
      tmpvar_44 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_45;
      tmpvar_45 = ((tmpvar_44.x + tmpvar_44.y) + tmpvar_44.z);
      highp vec4 tmpvar_46;
      tmpvar_46.x = (tmpvar_36 + tmpvar_45);
      tmpvar_46.y = ((tmpvar_36 * 0.75) - tmpvar_45);
      tmpvar_46.z = ((tmpvar_36 * 0.01) + tmpvar_45);
      tmpvar_46.w = (tmpvar_36 + tmpvar_45);
      highp vec4 tmpvar_47;
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      tmpvar_47 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = sqrt(dot (vPos_32, vPos_32));
      highp float fAngle_50;
      fAngle_50 = ((_glesMultiTexCoord2.x * tmpvar_38) * (tmpvar_47.x + (tmpvar_47.y * tmpvar_47.y)));
      highp vec2 vSinCos_51;
      vSinCos_51.x = sin(fAngle_50);
      vSinCos_51.y = cos(fAngle_50);
      highp float tmpvar_52;
      tmpvar_52 = (1.0 - vSinCos_51.y);
      highp mat3 tmpvar_53;
      tmpvar_53[0].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.x) + vSinCos_51.y);
      tmpvar_53[0].y = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.y) + (vSinCos_51.x * tmpvar_35.z));
      tmpvar_53[0].z = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.z) - (vSinCos_51.x * tmpvar_35.y));
      tmpvar_53[1].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.y) - (vSinCos_51.x * tmpvar_35.z));
      tmpvar_53[1].y = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.y) + vSinCos_51.y);
      tmpvar_53[1].z = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.z) + (vSinCos_51.x * tmpvar_35.x));
      tmpvar_53[2].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.z) + (vSinCos_51.x * tmpvar_35.y));
      tmpvar_53[2].y = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.z) - (vSinCos_51.x * tmpvar_35.x));
      tmpvar_53[2].z = (((tmpvar_52 * tmpvar_35.z) * tmpvar_35.z) + vSinCos_51.y);
      highp vec3 tmpvar_54;
      tmpvar_54 = ((tmpvar_35.yzx * vRotatedWindVector_19.zxy) - (tmpvar_35.zxy * vRotatedWindVector_19.yzx));
      vAxis_43.xz = tmpvar_54.xz;
      highp float tmpvar_55;
      tmpvar_55 = clamp (dot (vRotatedWindVector_19, tmpvar_35), -1.0, 1.0);
      vAxis_43.y = (tmpvar_54.y + tmpvar_55);
      highp vec3 tmpvar_56;
      tmpvar_56 = normalize(vAxis_43);
      vAxis_43 = tmpvar_56;
      highp float tmpvar_57;
      tmpvar_57 = (1.570796 - (sign(tmpvar_55) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_55))) * (1.570796 + (abs(tmpvar_55) * (-0.2146018 + 
          (abs(tmpvar_55) * (0.08656672 + (abs(tmpvar_55) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_58;
      tmpvar_58 = (tmpvar_47.y - (tmpvar_47.x * tmpvar_47.x));
      fTwitch_42 = 0.0;
      if (tmpvar_41) {
        highp float fTime_59;
        fTime_59 = (tmpvar_40.z + tmpvar_45);
        highp vec4 tmpvar_60;
        tmpvar_60.zw = vec2(0.0, 0.0);
        tmpvar_60.x = fTime_59;
        tmpvar_60.y = (0.87 * fTime_59);
        highp vec4 tmpvar_61;
        highp vec4 tmpvar_62;
        tmpvar_62 = abs(((
          fract((tmpvar_60 + 0.5))
         * 2.0) - 1.0));
        tmpvar_61 = (((
          (tmpvar_62 * tmpvar_62)
         * 
          (3.0 - (2.0 * tmpvar_62))
        ) - 0.5) * 2.0);
        fTwitch_42 = (tmpvar_40.x * pow (clamp (
          ((((tmpvar_61.x * tmpvar_61.y) * tmpvar_61.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_40.y));
      };
      highp float fAngle_63;
      fAngle_63 = (_glesMultiTexCoord2.x * ((
        (tmpvar_57 * tmpvar_39)
       + 
        (tmpvar_58 * tmpvar_37)
      ) + fTwitch_42));
      highp vec2 vSinCos_64;
      vSinCos_64.x = sin(fAngle_63);
      vSinCos_64.y = cos(fAngle_63);
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - vSinCos_64.y);
      highp mat3 tmpvar_66;
      tmpvar_66[0].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.x) + vSinCos_64.y);
      tmpvar_66[0].y = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.y) + (vSinCos_64.x * tmpvar_56.z));
      tmpvar_66[0].z = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.z) - (vSinCos_64.x * tmpvar_56.y));
      tmpvar_66[1].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.y) - (vSinCos_64.x * tmpvar_56.z));
      tmpvar_66[1].y = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.y) + vSinCos_64.y);
      tmpvar_66[1].z = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.z) + (vSinCos_64.x * tmpvar_56.x));
      tmpvar_66[2].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.z) + (vSinCos_64.x * tmpvar_56.y));
      tmpvar_66[2].y = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.z) - (vSinCos_64.x * tmpvar_56.x));
      tmpvar_66[2].z = (((tmpvar_65 * tmpvar_56.z) * tmpvar_56.z) + vSinCos_64.y);
      highp mat3 tmpvar_67;
      tmpvar_67 = (tmpvar_53 * tmpvar_66);
      vDirection_29 = (tmpvar_67 * _glesNormal);
      vPos_28 = (normalize((tmpvar_67 * vPos_32)) * tmpvar_49);
    };
    tmpvar_17 = vDirection_29;
    FinalPosition_20 = vPos_28;
  };
  highp vec3 tmpvar_68;
  tmpvar_68 = (FinalPosition_20 + _glesMultiTexCoord1.xyz);
  FinalPosition_20 = tmpvar_68;
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_69;
    vPos_69 = tmpvar_68;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_70;
      vPos_70 = tmpvar_68;
      highp float fAdherenceScale_71;
      highp vec3 tmpvar_72;
      tmpvar_72 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_73;
      tmpvar_73 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_74;
      highp float fOscillation_75;
      fOscillation_75 = 1.0;
      highp float fAmount_76;
      highp float fTarget_77;
      highp vec4 tmpvar_78;
      tmpvar_78.x = (tmpvar_73 + _glesMultiTexCoord0.w);
      tmpvar_78.y = ((tmpvar_73 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_78.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_73 + _glesMultiTexCoord0.w));
      tmpvar_78.w = ((tmpvar_73 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      vOscillations_74 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      highp float tmpvar_80;
      tmpvar_80 = (vOscillations_74.y * vOscillations_74.z);
      fTarget_77 = 1.0;
      fAmount_76 = tmpvar_80;
      if ((tmpvar_80 < 0.0)) {
        fTarget_77 = -1.0;
        fAmount_76 = -(tmpvar_80);
      };
      fOscillation_75 = (((
        (mix (mix (tmpvar_80, fTarget_77, fAmount_76), fTarget_77, fAmount_76) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_74.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_74.w * _ST_WindBranchWhip.x)));
      vPos_70 = (tmpvar_68 + ((tmpvar_72 * fOscillation_75) * _ST_WindBranch.y));
      highp vec4 tmpvar_81;
      tmpvar_81.zw = vec2(0.0, 0.0);
      tmpvar_81.x = ((tmpvar_73 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_81.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_82;
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_81 + 0.5))
       * 2.0) - 1.0));
      tmpvar_82 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      fAdherenceScale_71 = (1.0 - ((
        ((tmpvar_82.x * tmpvar_82.y) * tmpvar_82.x)
       * tmpvar_82.y) * _ST_WindTurbulences.x));
      fAdherenceScale_71 = (fAdherenceScale_71 + ((vOscillations_74.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_70 = (vPos_70 + ((
        ((vRotatedBranchAnchor_18 - vPos_70) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_71) * _glesMultiTexCoord0.z));
      vPos_69 = vPos_70;
    } else {
      highp vec3 vPos_84;
      vPos_84 = vPos_69;
      highp vec3 tmpvar_85;
      tmpvar_85 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_86;
      tmpvar_86 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_87;
      highp float fAmount_88;
      highp float fTarget_89;
      highp vec4 tmpvar_90;
      tmpvar_90.w = 0.0;
      tmpvar_90.x = (tmpvar_86 + _glesMultiTexCoord0.w);
      tmpvar_90.y = ((tmpvar_86 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_90.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_86 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_91;
      tmpvar_91 = abs(((
        fract((tmpvar_90 + 0.5))
       * 2.0) - 1.0));
      vOscillations_87 = (((
        (tmpvar_91 * tmpvar_91)
       * 
        (3.0 - (2.0 * tmpvar_91))
      ) - 0.5) * 2.0);
      highp float tmpvar_92;
      tmpvar_92 = (vOscillations_87.y * vOscillations_87.z);
      fTarget_89 = 1.0;
      fAmount_88 = tmpvar_92;
      if ((tmpvar_92 < 0.0)) {
        fTarget_89 = -1.0;
        fAmount_88 = -(tmpvar_92);
      };
      vPos_84 = (vPos_69 + ((tmpvar_85 * 
        (((mix (
          mix (tmpvar_92, fTarget_89, fAmount_88)
        , fTarget_89, fAmount_88) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_87.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_69 = vPos_84;
    };
    FinalPosition_20 = vPos_69;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_93;
    vPos_93 = FinalPosition_20;
    highp float fAdjust_94;
    highp float fLength_95;
    fLength_95 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_96;
    tmpvar_96 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_94 = tmpvar_96;
    if ((tmpvar_96 != 0.0)) {
      fAdjust_94 = pow (tmpvar_96, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_97;
    tmpvar_97.zw = vec2(0.0, 0.0);
    tmpvar_97.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_97.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_98;
    highp vec4 tmpvar_99;
    tmpvar_99 = abs(((
      fract((tmpvar_97 + 0.5))
     * 2.0) - 1.0));
    tmpvar_98 = (((
      (tmpvar_99 * tmpvar_99)
     * 
      (3.0 - (2.0 * tmpvar_99))
    ) - 0.5) * 2.0);
    vPos_93.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_98.x + (tmpvar_98.y * tmpvar_98.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_94)));
    vPos_93 = (normalize(vPos_93) * fLength_95);
    FinalPosition_20 = vPos_93;
  };
  tmpvar_16.xyz = FinalPosition_20;
  highp vec4 tmpvar_100;
  tmpvar_100 = (glstate_matrix_mvp * tmpvar_16);
  highp vec4 o_101;
  highp vec4 tmpvar_102;
  tmpvar_102 = (tmpvar_100 * 0.5);
  highp vec2 tmpvar_103;
  tmpvar_103.x = tmpvar_102.x;
  tmpvar_103.y = (tmpvar_102.y * _ProjectionParams.x);
  o_101.xy = (tmpvar_103 + tmpvar_102.w);
  o_101.zw = tmpvar_100.zw;
  highp vec3 tmpvar_104;
  tmpvar_104 = o_101.xyw;
  tmpvar_10 = tmpvar_104;
  highp vec2 tmpvar_105;
  tmpvar_105 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_105;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_106;
  tmpvar_106 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_107;
  v_107.x = _World2Object[0].x;
  v_107.y = _World2Object[1].x;
  v_107.z = _World2Object[2].x;
  v_107.w = _World2Object[3].x;
  highp vec4 v_108;
  v_108.x = _World2Object[0].y;
  v_108.y = _World2Object[1].y;
  v_108.z = _World2Object[2].y;
  v_108.w = _World2Object[3].y;
  highp vec4 v_109;
  v_109.x = _World2Object[0].z;
  v_109.y = _World2Object[1].z;
  v_109.z = _World2Object[2].z;
  v_109.w = _World2Object[3].z;
  highp vec3 tmpvar_110;
  tmpvar_110 = normalize(((
    (v_107.xyz * tmpvar_17.x)
   + 
    (v_108.xyz * tmpvar_17.y)
  ) + (v_109.xyz * tmpvar_17.z)));
  worldNormal_5 = tmpvar_110;
  highp mat3 tmpvar_111;
  tmpvar_111[0] = _Object2World[0].xyz;
  tmpvar_111[1] = _Object2World[1].xyz;
  tmpvar_111[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_112;
  tmpvar_112 = normalize((tmpvar_111 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_112;
  lowp vec3 tmpvar_113;
  tmpvar_113 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_114;
  tmpvar_114 = (tmpvar_113 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_114;
  highp vec4 tmpvar_115;
  tmpvar_115.x = worldTangent_4.x;
  tmpvar_115.y = worldBinormal_3.x;
  tmpvar_115.z = worldNormal_5.x;
  tmpvar_115.w = tmpvar_106.x;
  highp vec4 tmpvar_116;
  tmpvar_116.x = worldTangent_4.y;
  tmpvar_116.y = worldBinormal_3.y;
  tmpvar_116.z = worldNormal_5.y;
  tmpvar_116.w = tmpvar_106.y;
  highp vec4 tmpvar_117;
  tmpvar_117.x = worldTangent_4.z;
  tmpvar_117.y = worldBinormal_3.z;
  tmpvar_117.z = worldNormal_5.z;
  tmpvar_117.w = tmpvar_106.z;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_118;
  tmpvar_118.w = 1.0;
  tmpvar_118.xyz = worldNormal_5;
  mediump vec4 normal_119;
  normal_119 = tmpvar_118;
  mediump vec3 x2_120;
  mediump vec4 tmpvar_121;
  tmpvar_121 = (normal_119.xyzz * normal_119.yzzx);
  x2_120.x = dot (unity_SHBr, tmpvar_121);
  x2_120.y = dot (unity_SHBg, tmpvar_121);
  x2_120.z = dot (unity_SHBb, tmpvar_121);
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_115;
  xlv_TEXCOORD1 = tmpvar_116;
  xlv_TEXCOORD2 = tmpvar_117;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD7 = tmpvar_7;
  xlv_TEXCOORD8 = (x2_120 + (unity_SHC.xyz * (
    (normal_119.x * normal_119.x)
   - 
    (normal_119.y * normal_119.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 worldN_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_7.x = tmpvar_8.x;
  mediump float tmpvar_9;
  tmpvar_9 = fract(tmpvar_8.y);
  highp float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * 0.0625) + unity_LODFade.y);
  projUV_7.y = tmpvar_10;
  lowp float x_11;
  x_11 = (texture (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_6 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_6.w * _Color.w);
  tmpvar_5 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_5 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_6.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_6.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_6.x, max (diffuseColor_6.y, diffuseColor_6.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_2.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_2.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_2.z = tmpvar_20;
  mediump vec3 normalWorld_21;
  normalWorld_21 = worldN_2;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_21;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  mediump vec4 outDiffuseOcclusion_24;
  mediump vec4 outNormal_25;
  mediump vec4 emission_26;
  lowp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = tmpvar_4;
  outDiffuseOcclusion_24 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = ((worldN_2 * 0.5) + 0.5);
  outNormal_25 = tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = vec3(0.0, 0.0, 0.0);
  emission_26 = tmpvar_29;
  emission_26.xyz = (emission_26.xyz + (tmpvar_4 * (xlv_TEXCOORD8 + x1_23)));
  outDiffuse_1.xyz = outDiffuseOcclusion_24.xyz;
  outDiffuse_1.w = 1.0;
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_25;
  _glesFragData[3] = emission_26;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FACING_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_22;
  tmpvar_22[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_22[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_22[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_23;
  tmpvar_23 = (normalize((tmpvar_21 * tmpvar_22)) * sqrt(dot (tmpvar_21, tmpvar_21)));
  FinalPosition_16 = tmpvar_23;
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_24;
    tmpvar_24 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_25;
    isBestWind_25 = (tmpvar_18 == 4.0);
    bool bLeaf2_26;
    bLeaf2_26 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_27;
    vPos_27 = tmpvar_23;
    highp vec3 vDirection_28;
    vDirection_28 = tmpvar_2;
    highp float tmpvar_29;
    if (bLeaf2_26) {
      tmpvar_29 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_30;
    if (bLeaf2_26) {
      tmpvar_30 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_31;
    highp vec4 tmpvar_32;
    tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_32.x = (tmpvar_29 + tmpvar_24);
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    vPos_31 = (tmpvar_23 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_30 * (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_28 = tmpvar_2;
    vPos_27 = vPos_31;
    if (isBestWind_25) {
      highp vec3 tmpvar_34;
      tmpvar_34 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_35;
      if (bLeaf2_26) {
        tmpvar_35 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_36;
      if (bLeaf2_26) {
        tmpvar_36 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_37;
      if (bLeaf2_26) {
        tmpvar_37 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_38;
      if (bLeaf2_26) {
        tmpvar_38 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_39;
      if (bLeaf2_26) {
        tmpvar_39 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_39 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_40;
      if (bLeaf2_26) {
        tmpvar_40 = bool(1);
      } else {
        tmpvar_40 = bool(1);
      };
      highp float fTwitch_41;
      highp vec3 vAxis_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_35 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_35 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_35 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_35 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_31, vPos_31));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_37) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) + (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) - (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_34.z) * tmpvar_34.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_34.yzx * vRotatedWindVector_15.zxy) - (tmpvar_34.zxy * vRotatedWindVector_15.yzx));
      vAxis_42.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_15, tmpvar_34), -1.0, 1.0);
      vAxis_42.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_42);
      vAxis_42 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_57;
      tmpvar_57 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_41 = 0.0;
      if (tmpvar_40) {
        highp float fTime_58;
        fTime_58 = (tmpvar_39.z + tmpvar_44);
        highp vec4 tmpvar_59;
        tmpvar_59.zw = vec2(0.0, 0.0);
        tmpvar_59.x = fTime_58;
        tmpvar_59.y = (0.87 * fTime_58);
        highp vec4 tmpvar_60;
        highp vec4 tmpvar_61;
        tmpvar_61 = abs(((
          fract((tmpvar_59 + 0.5))
         * 2.0) - 1.0));
        tmpvar_60 = (((
          (tmpvar_61 * tmpvar_61)
         * 
          (3.0 - (2.0 * tmpvar_61))
        ) - 0.5) * 2.0);
        fTwitch_41 = (tmpvar_39.x * pow (clamp (
          ((((tmpvar_60.x * tmpvar_60.y) * tmpvar_60.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_39.y));
      };
      highp float fAngle_62;
      fAngle_62 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_38)
       + 
        (tmpvar_57 * tmpvar_36)
      ) + fTwitch_41));
      highp vec2 vSinCos_63;
      vSinCos_63.x = sin(fAngle_62);
      vSinCos_63.y = cos(fAngle_62);
      highp float tmpvar_64;
      tmpvar_64 = (1.0 - vSinCos_63.y);
      highp mat3 tmpvar_65;
      tmpvar_65[0].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_63.y);
      tmpvar_65[0].y = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[0].z = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[1].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[1].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_63.y);
      tmpvar_65[1].z = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[2].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].z = (((tmpvar_64 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_63.y);
      highp mat3 tmpvar_66;
      tmpvar_66 = (tmpvar_52 * tmpvar_65);
      vDirection_28 = (tmpvar_66 * _glesNormal);
      vPos_27 = (normalize((tmpvar_66 * vPos_31)) * tmpvar_48);
    };
    tmpvar_13 = vDirection_28;
    FinalPosition_16 = vPos_27;
  };
  highp vec3 tmpvar_67;
  tmpvar_67 = (FinalPosition_16 + _glesMultiTexCoord1.xyz);
  FinalPosition_16 = tmpvar_67;
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_68;
    vPos_68 = tmpvar_67;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_69;
      vPos_69 = tmpvar_67;
      highp float fAdherenceScale_70;
      highp vec3 tmpvar_71;
      tmpvar_71 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_72;
      tmpvar_72 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_73;
      highp float fOscillation_74;
      fOscillation_74 = 1.0;
      highp float fAmount_75;
      highp float fTarget_76;
      highp vec4 tmpvar_77;
      tmpvar_77.x = (tmpvar_72 + _glesMultiTexCoord0.w);
      tmpvar_77.y = ((tmpvar_72 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_77.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_72 + _glesMultiTexCoord0.w));
      tmpvar_77.w = ((tmpvar_72 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      vOscillations_73 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      highp float tmpvar_79;
      tmpvar_79 = (vOscillations_73.y * vOscillations_73.z);
      fTarget_76 = 1.0;
      fAmount_75 = tmpvar_79;
      if ((tmpvar_79 < 0.0)) {
        fTarget_76 = -1.0;
        fAmount_75 = -(tmpvar_79);
      };
      fOscillation_74 = (((
        (mix (mix (tmpvar_79, fTarget_76, fAmount_75), fTarget_76, fAmount_75) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_73.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_73.w * _ST_WindBranchWhip.x)));
      vPos_69 = (tmpvar_67 + ((tmpvar_71 * fOscillation_74) * _ST_WindBranch.y));
      highp vec4 tmpvar_80;
      tmpvar_80.zw = vec2(0.0, 0.0);
      tmpvar_80.x = ((tmpvar_72 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_80.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_81;
      highp vec4 tmpvar_82;
      tmpvar_82 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      tmpvar_81 = (((
        (tmpvar_82 * tmpvar_82)
       * 
        (3.0 - (2.0 * tmpvar_82))
      ) - 0.5) * 2.0);
      fAdherenceScale_70 = (1.0 - ((
        ((tmpvar_81.x * tmpvar_81.y) * tmpvar_81.x)
       * tmpvar_81.y) * _ST_WindTurbulences.x));
      fAdherenceScale_70 = (fAdherenceScale_70 + ((vOscillations_73.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_69 = (vPos_69 + ((
        ((vRotatedBranchAnchor_14 - vPos_69) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_70) * _glesMultiTexCoord0.z));
      vPos_68 = vPos_69;
    } else {
      highp vec3 vPos_83;
      vPos_83 = vPos_68;
      highp vec3 tmpvar_84;
      tmpvar_84 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_85;
      tmpvar_85 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_86;
      highp float fAmount_87;
      highp float fTarget_88;
      highp vec4 tmpvar_89;
      tmpvar_89.w = 0.0;
      tmpvar_89.x = (tmpvar_85 + _glesMultiTexCoord0.w);
      tmpvar_89.y = ((tmpvar_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_89.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_90;
      tmpvar_90 = abs(((
        fract((tmpvar_89 + 0.5))
       * 2.0) - 1.0));
      vOscillations_86 = (((
        (tmpvar_90 * tmpvar_90)
       * 
        (3.0 - (2.0 * tmpvar_90))
      ) - 0.5) * 2.0);
      highp float tmpvar_91;
      tmpvar_91 = (vOscillations_86.y * vOscillations_86.z);
      fTarget_88 = 1.0;
      fAmount_87 = tmpvar_91;
      if ((tmpvar_91 < 0.0)) {
        fTarget_88 = -1.0;
        fAmount_87 = -(tmpvar_91);
      };
      vPos_83 = (vPos_68 + ((tmpvar_84 * 
        (((mix (
          mix (tmpvar_91, fTarget_88, fAmount_87)
        , fTarget_88, fAmount_87) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_86.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_68 = vPos_83;
    };
    FinalPosition_16 = vPos_68;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_92;
    vPos_92 = FinalPosition_16;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_96.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    vPos_92.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_97.x + (tmpvar_97.y * tmpvar_97.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_93)));
    vPos_92 = (normalize(vPos_92) * fLength_94);
    FinalPosition_16 = vPos_92;
  };
  tmpvar_12.xyz = FinalPosition_16;
  highp vec4 tmpvar_99;
  tmpvar_99 = (glstate_matrix_mvp * tmpvar_12);
  highp vec4 o_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = (tmpvar_99 * 0.5);
  highp vec2 tmpvar_102;
  tmpvar_102.x = tmpvar_101.x;
  tmpvar_102.y = (tmpvar_101.y * _ProjectionParams.x);
  o_100.xy = (tmpvar_102 + tmpvar_101.w);
  o_100.zw = tmpvar_99.zw;
  highp vec3 tmpvar_103;
  tmpvar_103 = o_100.xyw;
  tmpvar_9 = tmpvar_103;
  highp vec2 tmpvar_104;
  tmpvar_104 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_104;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_105;
  v_105.x = _World2Object[0].x;
  v_105.y = _World2Object[1].x;
  v_105.z = _World2Object[2].x;
  v_105.w = _World2Object[3].x;
  highp vec4 v_106;
  v_106.x = _World2Object[0].y;
  v_106.y = _World2Object[1].y;
  v_106.z = _World2Object[2].y;
  v_106.w = _World2Object[3].y;
  highp vec4 v_107;
  v_107.x = _World2Object[0].z;
  v_107.y = _World2Object[1].z;
  v_107.z = _World2Object[2].z;
  v_107.w = _World2Object[3].z;
  highp vec3 tmpvar_108;
  tmpvar_108 = normalize(((
    (v_105.xyz * tmpvar_13.x)
   + 
    (v_106.xyz * tmpvar_13.y)
  ) + (v_107.xyz * tmpvar_13.z)));
  worldNormal_3 = tmpvar_108;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_109;
  tmpvar_109.w = 1.0;
  tmpvar_109.xyz = worldNormal_3;
  mediump vec4 normal_110;
  normal_110 = tmpvar_109;
  mediump vec3 x2_111;
  mediump vec4 tmpvar_112;
  tmpvar_112 = (normal_110.xyzz * normal_110.yzzx);
  x2_111.x = dot (unity_SHBr, tmpvar_112);
  x2_111.y = dot (unity_SHBg, tmpvar_112);
  x2_111.z = dot (unity_SHBb, tmpvar_112);
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_111 + (unity_SHC.xyz * (
    (normal_110.x * normal_110.x)
   - 
    (normal_110.y * normal_110.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_16;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_3;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_17;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  mediump vec4 outDiffuseOcclusion_20;
  mediump vec4 outNormal_21;
  mediump vec4 emission_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = tmpvar_5;
  outDiffuseOcclusion_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  emission_22 = tmpvar_25;
  emission_22.xyz = (emission_22.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_19)));
  outDiffuse_1.xyz = outDiffuseOcclusion_20.xyz;
  outEmission_2.w = emission_22.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_22.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_21;
  gl_FragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FACING_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD6;
out mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_22;
  tmpvar_22[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_22[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_22[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_23;
  tmpvar_23 = (normalize((tmpvar_21 * tmpvar_22)) * sqrt(dot (tmpvar_21, tmpvar_21)));
  FinalPosition_16 = tmpvar_23;
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_24;
    tmpvar_24 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_25;
    isBestWind_25 = (tmpvar_18 == 4.0);
    bool bLeaf2_26;
    bLeaf2_26 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_27;
    vPos_27 = tmpvar_23;
    highp vec3 vDirection_28;
    vDirection_28 = tmpvar_2;
    highp float tmpvar_29;
    if (bLeaf2_26) {
      tmpvar_29 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_30;
    if (bLeaf2_26) {
      tmpvar_30 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_31;
    highp vec4 tmpvar_32;
    tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_32.x = (tmpvar_29 + tmpvar_24);
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    vPos_31 = (tmpvar_23 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_30 * (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_28 = tmpvar_2;
    vPos_27 = vPos_31;
    if (isBestWind_25) {
      highp vec3 tmpvar_34;
      tmpvar_34 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_35;
      if (bLeaf2_26) {
        tmpvar_35 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_36;
      if (bLeaf2_26) {
        tmpvar_36 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_37;
      if (bLeaf2_26) {
        tmpvar_37 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_38;
      if (bLeaf2_26) {
        tmpvar_38 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_39;
      if (bLeaf2_26) {
        tmpvar_39 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_39 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_40;
      if (bLeaf2_26) {
        tmpvar_40 = bool(1);
      } else {
        tmpvar_40 = bool(1);
      };
      highp float fTwitch_41;
      highp vec3 vAxis_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_35 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_35 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_35 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_35 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_31, vPos_31));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_37) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) + (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) - (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_34.z) * tmpvar_34.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_34.yzx * vRotatedWindVector_15.zxy) - (tmpvar_34.zxy * vRotatedWindVector_15.yzx));
      vAxis_42.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_15, tmpvar_34), -1.0, 1.0);
      vAxis_42.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_42);
      vAxis_42 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_57;
      tmpvar_57 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_41 = 0.0;
      if (tmpvar_40) {
        highp float fTime_58;
        fTime_58 = (tmpvar_39.z + tmpvar_44);
        highp vec4 tmpvar_59;
        tmpvar_59.zw = vec2(0.0, 0.0);
        tmpvar_59.x = fTime_58;
        tmpvar_59.y = (0.87 * fTime_58);
        highp vec4 tmpvar_60;
        highp vec4 tmpvar_61;
        tmpvar_61 = abs(((
          fract((tmpvar_59 + 0.5))
         * 2.0) - 1.0));
        tmpvar_60 = (((
          (tmpvar_61 * tmpvar_61)
         * 
          (3.0 - (2.0 * tmpvar_61))
        ) - 0.5) * 2.0);
        fTwitch_41 = (tmpvar_39.x * pow (clamp (
          ((((tmpvar_60.x * tmpvar_60.y) * tmpvar_60.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_39.y));
      };
      highp float fAngle_62;
      fAngle_62 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_38)
       + 
        (tmpvar_57 * tmpvar_36)
      ) + fTwitch_41));
      highp vec2 vSinCos_63;
      vSinCos_63.x = sin(fAngle_62);
      vSinCos_63.y = cos(fAngle_62);
      highp float tmpvar_64;
      tmpvar_64 = (1.0 - vSinCos_63.y);
      highp mat3 tmpvar_65;
      tmpvar_65[0].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_63.y);
      tmpvar_65[0].y = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[0].z = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[1].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[1].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_63.y);
      tmpvar_65[1].z = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[2].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].z = (((tmpvar_64 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_63.y);
      highp mat3 tmpvar_66;
      tmpvar_66 = (tmpvar_52 * tmpvar_65);
      vDirection_28 = (tmpvar_66 * _glesNormal);
      vPos_27 = (normalize((tmpvar_66 * vPos_31)) * tmpvar_48);
    };
    tmpvar_13 = vDirection_28;
    FinalPosition_16 = vPos_27;
  };
  highp vec3 tmpvar_67;
  tmpvar_67 = (FinalPosition_16 + _glesMultiTexCoord1.xyz);
  FinalPosition_16 = tmpvar_67;
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_68;
    vPos_68 = tmpvar_67;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_69;
      vPos_69 = tmpvar_67;
      highp float fAdherenceScale_70;
      highp vec3 tmpvar_71;
      tmpvar_71 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_72;
      tmpvar_72 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_73;
      highp float fOscillation_74;
      fOscillation_74 = 1.0;
      highp float fAmount_75;
      highp float fTarget_76;
      highp vec4 tmpvar_77;
      tmpvar_77.x = (tmpvar_72 + _glesMultiTexCoord0.w);
      tmpvar_77.y = ((tmpvar_72 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_77.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_72 + _glesMultiTexCoord0.w));
      tmpvar_77.w = ((tmpvar_72 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      vOscillations_73 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      highp float tmpvar_79;
      tmpvar_79 = (vOscillations_73.y * vOscillations_73.z);
      fTarget_76 = 1.0;
      fAmount_75 = tmpvar_79;
      if ((tmpvar_79 < 0.0)) {
        fTarget_76 = -1.0;
        fAmount_75 = -(tmpvar_79);
      };
      fOscillation_74 = (((
        (mix (mix (tmpvar_79, fTarget_76, fAmount_75), fTarget_76, fAmount_75) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_73.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_73.w * _ST_WindBranchWhip.x)));
      vPos_69 = (tmpvar_67 + ((tmpvar_71 * fOscillation_74) * _ST_WindBranch.y));
      highp vec4 tmpvar_80;
      tmpvar_80.zw = vec2(0.0, 0.0);
      tmpvar_80.x = ((tmpvar_72 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_80.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_81;
      highp vec4 tmpvar_82;
      tmpvar_82 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      tmpvar_81 = (((
        (tmpvar_82 * tmpvar_82)
       * 
        (3.0 - (2.0 * tmpvar_82))
      ) - 0.5) * 2.0);
      fAdherenceScale_70 = (1.0 - ((
        ((tmpvar_81.x * tmpvar_81.y) * tmpvar_81.x)
       * tmpvar_81.y) * _ST_WindTurbulences.x));
      fAdherenceScale_70 = (fAdherenceScale_70 + ((vOscillations_73.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_69 = (vPos_69 + ((
        ((vRotatedBranchAnchor_14 - vPos_69) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_70) * _glesMultiTexCoord0.z));
      vPos_68 = vPos_69;
    } else {
      highp vec3 vPos_83;
      vPos_83 = vPos_68;
      highp vec3 tmpvar_84;
      tmpvar_84 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_85;
      tmpvar_85 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_86;
      highp float fAmount_87;
      highp float fTarget_88;
      highp vec4 tmpvar_89;
      tmpvar_89.w = 0.0;
      tmpvar_89.x = (tmpvar_85 + _glesMultiTexCoord0.w);
      tmpvar_89.y = ((tmpvar_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_89.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_90;
      tmpvar_90 = abs(((
        fract((tmpvar_89 + 0.5))
       * 2.0) - 1.0));
      vOscillations_86 = (((
        (tmpvar_90 * tmpvar_90)
       * 
        (3.0 - (2.0 * tmpvar_90))
      ) - 0.5) * 2.0);
      highp float tmpvar_91;
      tmpvar_91 = (vOscillations_86.y * vOscillations_86.z);
      fTarget_88 = 1.0;
      fAmount_87 = tmpvar_91;
      if ((tmpvar_91 < 0.0)) {
        fTarget_88 = -1.0;
        fAmount_87 = -(tmpvar_91);
      };
      vPos_83 = (vPos_68 + ((tmpvar_84 * 
        (((mix (
          mix (tmpvar_91, fTarget_88, fAmount_87)
        , fTarget_88, fAmount_87) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_86.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_68 = vPos_83;
    };
    FinalPosition_16 = vPos_68;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_92;
    vPos_92 = FinalPosition_16;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_96.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    vPos_92.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_97.x + (tmpvar_97.y * tmpvar_97.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_93)));
    vPos_92 = (normalize(vPos_92) * fLength_94);
    FinalPosition_16 = vPos_92;
  };
  tmpvar_12.xyz = FinalPosition_16;
  highp vec4 tmpvar_99;
  tmpvar_99 = (glstate_matrix_mvp * tmpvar_12);
  highp vec4 o_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = (tmpvar_99 * 0.5);
  highp vec2 tmpvar_102;
  tmpvar_102.x = tmpvar_101.x;
  tmpvar_102.y = (tmpvar_101.y * _ProjectionParams.x);
  o_100.xy = (tmpvar_102 + tmpvar_101.w);
  o_100.zw = tmpvar_99.zw;
  highp vec3 tmpvar_103;
  tmpvar_103 = o_100.xyw;
  tmpvar_9 = tmpvar_103;
  highp vec2 tmpvar_104;
  tmpvar_104 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_104;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_105;
  v_105.x = _World2Object[0].x;
  v_105.y = _World2Object[1].x;
  v_105.z = _World2Object[2].x;
  v_105.w = _World2Object[3].x;
  highp vec4 v_106;
  v_106.x = _World2Object[0].y;
  v_106.y = _World2Object[1].y;
  v_106.z = _World2Object[2].y;
  v_106.w = _World2Object[3].y;
  highp vec4 v_107;
  v_107.x = _World2Object[0].z;
  v_107.y = _World2Object[1].z;
  v_107.z = _World2Object[2].z;
  v_107.w = _World2Object[3].z;
  highp vec3 tmpvar_108;
  tmpvar_108 = normalize(((
    (v_105.xyz * tmpvar_13.x)
   + 
    (v_106.xyz * tmpvar_13.y)
  ) + (v_107.xyz * tmpvar_13.z)));
  worldNormal_3 = tmpvar_108;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_109;
  tmpvar_109.w = 1.0;
  tmpvar_109.xyz = worldNormal_3;
  mediump vec4 normal_110;
  normal_110 = tmpvar_109;
  mediump vec3 x2_111;
  mediump vec4 tmpvar_112;
  tmpvar_112 = (normal_110.xyzz * normal_110.yzzx);
  x2_111.x = dot (unity_SHBr, tmpvar_112);
  x2_111.y = dot (unity_SHBg, tmpvar_112);
  x2_111.z = dot (unity_SHBb, tmpvar_112);
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_111 + (unity_SHC.xyz * (
    (normal_110.x * normal_110.x)
   - 
    (normal_110.y * normal_110.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_16;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_3;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_17;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  mediump vec4 outDiffuseOcclusion_20;
  mediump vec4 outNormal_21;
  mediump vec4 emission_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = tmpvar_5;
  outDiffuseOcclusion_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  emission_22 = tmpvar_25;
  emission_22.xyz = (emission_22.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_19)));
  outDiffuse_1.xyz = outDiffuseOcclusion_20.xyz;
  outEmission_2.w = emission_22.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_22.xyz));
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_21;
  _glesFragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FACING_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_22;
  tmpvar_22[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_22[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_22[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_23;
  tmpvar_23 = (normalize((tmpvar_21 * tmpvar_22)) * sqrt(dot (tmpvar_21, tmpvar_21)));
  FinalPosition_16 = tmpvar_23;
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_24;
    tmpvar_24 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_25;
    isBestWind_25 = (tmpvar_18 == 4.0);
    bool bLeaf2_26;
    bLeaf2_26 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_27;
    vPos_27 = tmpvar_23;
    highp vec3 vDirection_28;
    vDirection_28 = tmpvar_2;
    highp float tmpvar_29;
    if (bLeaf2_26) {
      tmpvar_29 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_30;
    if (bLeaf2_26) {
      tmpvar_30 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_31;
    highp vec4 tmpvar_32;
    tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_32.x = (tmpvar_29 + tmpvar_24);
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    vPos_31 = (tmpvar_23 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_30 * (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_28 = tmpvar_2;
    vPos_27 = vPos_31;
    if (isBestWind_25) {
      highp vec3 tmpvar_34;
      tmpvar_34 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_35;
      if (bLeaf2_26) {
        tmpvar_35 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_36;
      if (bLeaf2_26) {
        tmpvar_36 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_37;
      if (bLeaf2_26) {
        tmpvar_37 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_38;
      if (bLeaf2_26) {
        tmpvar_38 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_39;
      if (bLeaf2_26) {
        tmpvar_39 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_39 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_40;
      if (bLeaf2_26) {
        tmpvar_40 = bool(1);
      } else {
        tmpvar_40 = bool(1);
      };
      highp float fTwitch_41;
      highp vec3 vAxis_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_35 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_35 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_35 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_35 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_31, vPos_31));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_37) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) + (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) - (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_34.z) * tmpvar_34.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_34.yzx * vRotatedWindVector_15.zxy) - (tmpvar_34.zxy * vRotatedWindVector_15.yzx));
      vAxis_42.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_15, tmpvar_34), -1.0, 1.0);
      vAxis_42.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_42);
      vAxis_42 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_57;
      tmpvar_57 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_41 = 0.0;
      if (tmpvar_40) {
        highp float fTime_58;
        fTime_58 = (tmpvar_39.z + tmpvar_44);
        highp vec4 tmpvar_59;
        tmpvar_59.zw = vec2(0.0, 0.0);
        tmpvar_59.x = fTime_58;
        tmpvar_59.y = (0.87 * fTime_58);
        highp vec4 tmpvar_60;
        highp vec4 tmpvar_61;
        tmpvar_61 = abs(((
          fract((tmpvar_59 + 0.5))
         * 2.0) - 1.0));
        tmpvar_60 = (((
          (tmpvar_61 * tmpvar_61)
         * 
          (3.0 - (2.0 * tmpvar_61))
        ) - 0.5) * 2.0);
        fTwitch_41 = (tmpvar_39.x * pow (clamp (
          ((((tmpvar_60.x * tmpvar_60.y) * tmpvar_60.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_39.y));
      };
      highp float fAngle_62;
      fAngle_62 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_38)
       + 
        (tmpvar_57 * tmpvar_36)
      ) + fTwitch_41));
      highp vec2 vSinCos_63;
      vSinCos_63.x = sin(fAngle_62);
      vSinCos_63.y = cos(fAngle_62);
      highp float tmpvar_64;
      tmpvar_64 = (1.0 - vSinCos_63.y);
      highp mat3 tmpvar_65;
      tmpvar_65[0].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_63.y);
      tmpvar_65[0].y = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[0].z = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[1].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[1].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_63.y);
      tmpvar_65[1].z = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[2].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].z = (((tmpvar_64 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_63.y);
      highp mat3 tmpvar_66;
      tmpvar_66 = (tmpvar_52 * tmpvar_65);
      vDirection_28 = (tmpvar_66 * _glesNormal);
      vPos_27 = (normalize((tmpvar_66 * vPos_31)) * tmpvar_48);
    };
    tmpvar_13 = vDirection_28;
    FinalPosition_16 = vPos_27;
  };
  highp vec3 tmpvar_67;
  tmpvar_67 = (FinalPosition_16 + _glesMultiTexCoord1.xyz);
  FinalPosition_16 = tmpvar_67;
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_68;
    vPos_68 = tmpvar_67;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_69;
      vPos_69 = tmpvar_67;
      highp float fAdherenceScale_70;
      highp vec3 tmpvar_71;
      tmpvar_71 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_72;
      tmpvar_72 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_73;
      highp float fOscillation_74;
      fOscillation_74 = 1.0;
      highp float fAmount_75;
      highp float fTarget_76;
      highp vec4 tmpvar_77;
      tmpvar_77.x = (tmpvar_72 + _glesMultiTexCoord0.w);
      tmpvar_77.y = ((tmpvar_72 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_77.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_72 + _glesMultiTexCoord0.w));
      tmpvar_77.w = ((tmpvar_72 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      vOscillations_73 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      highp float tmpvar_79;
      tmpvar_79 = (vOscillations_73.y * vOscillations_73.z);
      fTarget_76 = 1.0;
      fAmount_75 = tmpvar_79;
      if ((tmpvar_79 < 0.0)) {
        fTarget_76 = -1.0;
        fAmount_75 = -(tmpvar_79);
      };
      fOscillation_74 = (((
        (mix (mix (tmpvar_79, fTarget_76, fAmount_75), fTarget_76, fAmount_75) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_73.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_73.w * _ST_WindBranchWhip.x)));
      vPos_69 = (tmpvar_67 + ((tmpvar_71 * fOscillation_74) * _ST_WindBranch.y));
      highp vec4 tmpvar_80;
      tmpvar_80.zw = vec2(0.0, 0.0);
      tmpvar_80.x = ((tmpvar_72 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_80.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_81;
      highp vec4 tmpvar_82;
      tmpvar_82 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      tmpvar_81 = (((
        (tmpvar_82 * tmpvar_82)
       * 
        (3.0 - (2.0 * tmpvar_82))
      ) - 0.5) * 2.0);
      fAdherenceScale_70 = (1.0 - ((
        ((tmpvar_81.x * tmpvar_81.y) * tmpvar_81.x)
       * tmpvar_81.y) * _ST_WindTurbulences.x));
      fAdherenceScale_70 = (fAdherenceScale_70 + ((vOscillations_73.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_69 = (vPos_69 + ((
        ((vRotatedBranchAnchor_14 - vPos_69) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_70) * _glesMultiTexCoord0.z));
      vPos_68 = vPos_69;
    } else {
      highp vec3 vPos_83;
      vPos_83 = vPos_68;
      highp vec3 tmpvar_84;
      tmpvar_84 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_85;
      tmpvar_85 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_86;
      highp float fAmount_87;
      highp float fTarget_88;
      highp vec4 tmpvar_89;
      tmpvar_89.w = 0.0;
      tmpvar_89.x = (tmpvar_85 + _glesMultiTexCoord0.w);
      tmpvar_89.y = ((tmpvar_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_89.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_90;
      tmpvar_90 = abs(((
        fract((tmpvar_89 + 0.5))
       * 2.0) - 1.0));
      vOscillations_86 = (((
        (tmpvar_90 * tmpvar_90)
       * 
        (3.0 - (2.0 * tmpvar_90))
      ) - 0.5) * 2.0);
      highp float tmpvar_91;
      tmpvar_91 = (vOscillations_86.y * vOscillations_86.z);
      fTarget_88 = 1.0;
      fAmount_87 = tmpvar_91;
      if ((tmpvar_91 < 0.0)) {
        fTarget_88 = -1.0;
        fAmount_87 = -(tmpvar_91);
      };
      vPos_83 = (vPos_68 + ((tmpvar_84 * 
        (((mix (
          mix (tmpvar_91, fTarget_88, fAmount_87)
        , fTarget_88, fAmount_87) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_86.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_68 = vPos_83;
    };
    FinalPosition_16 = vPos_68;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_92;
    vPos_92 = FinalPosition_16;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_96.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    vPos_92.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_97.x + (tmpvar_97.y * tmpvar_97.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_93)));
    vPos_92 = (normalize(vPos_92) * fLength_94);
    FinalPosition_16 = vPos_92;
  };
  tmpvar_12.xyz = FinalPosition_16;
  highp vec4 tmpvar_99;
  tmpvar_99 = (glstate_matrix_mvp * tmpvar_12);
  highp vec4 o_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = (tmpvar_99 * 0.5);
  highp vec2 tmpvar_102;
  tmpvar_102.x = tmpvar_101.x;
  tmpvar_102.y = (tmpvar_101.y * _ProjectionParams.x);
  o_100.xy = (tmpvar_102 + tmpvar_101.w);
  o_100.zw = tmpvar_99.zw;
  highp vec3 tmpvar_103;
  tmpvar_103 = o_100.xyw;
  tmpvar_9 = tmpvar_103;
  highp vec2 tmpvar_104;
  tmpvar_104 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_104;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_105;
  v_105.x = _World2Object[0].x;
  v_105.y = _World2Object[1].x;
  v_105.z = _World2Object[2].x;
  v_105.w = _World2Object[3].x;
  highp vec4 v_106;
  v_106.x = _World2Object[0].y;
  v_106.y = _World2Object[1].y;
  v_106.z = _World2Object[2].y;
  v_106.w = _World2Object[3].y;
  highp vec4 v_107;
  v_107.x = _World2Object[0].z;
  v_107.y = _World2Object[1].z;
  v_107.z = _World2Object[2].z;
  v_107.w = _World2Object[3].z;
  highp vec3 tmpvar_108;
  tmpvar_108 = normalize(((
    (v_105.xyz * tmpvar_13.x)
   + 
    (v_106.xyz * tmpvar_13.y)
  ) + (v_107.xyz * tmpvar_13.z)));
  worldNormal_3 = tmpvar_108;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_109;
  tmpvar_109.w = 1.0;
  tmpvar_109.xyz = worldNormal_3;
  mediump vec4 normal_110;
  normal_110 = tmpvar_109;
  mediump vec3 x2_111;
  mediump vec4 tmpvar_112;
  tmpvar_112 = (normal_110.xyzz * normal_110.yzzx);
  x2_111.x = dot (unity_SHBr, tmpvar_112);
  x2_111.y = dot (unity_SHBg, tmpvar_112);
  x2_111.z = dot (unity_SHBb, tmpvar_112);
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_111 + (unity_SHC.xyz * (
    (normal_110.x * normal_110.x)
   - 
    (normal_110.y * normal_110.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_7.x = tmpvar_8.x;
  mediump float tmpvar_9;
  tmpvar_9 = fract(tmpvar_8.y);
  highp float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * 0.0625) + unity_LODFade.y);
  projUV_7.y = tmpvar_10;
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_6.w * _Color.w);
  tmpvar_5 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_5 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_15;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_2;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_16;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  mediump vec4 outDiffuseOcclusion_19;
  mediump vec4 outNormal_20;
  mediump vec4 emission_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_4;
  outDiffuseOcclusion_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  emission_21 = tmpvar_24;
  emission_21.xyz = (emission_21.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_18)));
  outDiffuse_1.xyz = outDiffuseOcclusion_19.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_20;
  gl_FragData[3] = emission_21;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD6;
out mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_22;
  tmpvar_22[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_22[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_22[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_23;
  tmpvar_23 = (normalize((tmpvar_21 * tmpvar_22)) * sqrt(dot (tmpvar_21, tmpvar_21)));
  FinalPosition_16 = tmpvar_23;
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_24;
    tmpvar_24 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_25;
    isBestWind_25 = (tmpvar_18 == 4.0);
    bool bLeaf2_26;
    bLeaf2_26 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_27;
    vPos_27 = tmpvar_23;
    highp vec3 vDirection_28;
    vDirection_28 = tmpvar_2;
    highp float tmpvar_29;
    if (bLeaf2_26) {
      tmpvar_29 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_30;
    if (bLeaf2_26) {
      tmpvar_30 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_31;
    highp vec4 tmpvar_32;
    tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_32.x = (tmpvar_29 + tmpvar_24);
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    vPos_31 = (tmpvar_23 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_30 * (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_28 = tmpvar_2;
    vPos_27 = vPos_31;
    if (isBestWind_25) {
      highp vec3 tmpvar_34;
      tmpvar_34 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_35;
      if (bLeaf2_26) {
        tmpvar_35 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_36;
      if (bLeaf2_26) {
        tmpvar_36 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_37;
      if (bLeaf2_26) {
        tmpvar_37 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_38;
      if (bLeaf2_26) {
        tmpvar_38 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_39;
      if (bLeaf2_26) {
        tmpvar_39 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_39 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_40;
      if (bLeaf2_26) {
        tmpvar_40 = bool(1);
      } else {
        tmpvar_40 = bool(1);
      };
      highp float fTwitch_41;
      highp vec3 vAxis_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_35 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_35 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_35 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_35 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_31, vPos_31));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_37) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) + (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) - (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_34.z) * tmpvar_34.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_34.yzx * vRotatedWindVector_15.zxy) - (tmpvar_34.zxy * vRotatedWindVector_15.yzx));
      vAxis_42.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_15, tmpvar_34), -1.0, 1.0);
      vAxis_42.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_42);
      vAxis_42 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_57;
      tmpvar_57 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_41 = 0.0;
      if (tmpvar_40) {
        highp float fTime_58;
        fTime_58 = (tmpvar_39.z + tmpvar_44);
        highp vec4 tmpvar_59;
        tmpvar_59.zw = vec2(0.0, 0.0);
        tmpvar_59.x = fTime_58;
        tmpvar_59.y = (0.87 * fTime_58);
        highp vec4 tmpvar_60;
        highp vec4 tmpvar_61;
        tmpvar_61 = abs(((
          fract((tmpvar_59 + 0.5))
         * 2.0) - 1.0));
        tmpvar_60 = (((
          (tmpvar_61 * tmpvar_61)
         * 
          (3.0 - (2.0 * tmpvar_61))
        ) - 0.5) * 2.0);
        fTwitch_41 = (tmpvar_39.x * pow (clamp (
          ((((tmpvar_60.x * tmpvar_60.y) * tmpvar_60.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_39.y));
      };
      highp float fAngle_62;
      fAngle_62 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_38)
       + 
        (tmpvar_57 * tmpvar_36)
      ) + fTwitch_41));
      highp vec2 vSinCos_63;
      vSinCos_63.x = sin(fAngle_62);
      vSinCos_63.y = cos(fAngle_62);
      highp float tmpvar_64;
      tmpvar_64 = (1.0 - vSinCos_63.y);
      highp mat3 tmpvar_65;
      tmpvar_65[0].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_63.y);
      tmpvar_65[0].y = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[0].z = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[1].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[1].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_63.y);
      tmpvar_65[1].z = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[2].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].z = (((tmpvar_64 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_63.y);
      highp mat3 tmpvar_66;
      tmpvar_66 = (tmpvar_52 * tmpvar_65);
      vDirection_28 = (tmpvar_66 * _glesNormal);
      vPos_27 = (normalize((tmpvar_66 * vPos_31)) * tmpvar_48);
    };
    tmpvar_13 = vDirection_28;
    FinalPosition_16 = vPos_27;
  };
  highp vec3 tmpvar_67;
  tmpvar_67 = (FinalPosition_16 + _glesMultiTexCoord1.xyz);
  FinalPosition_16 = tmpvar_67;
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_68;
    vPos_68 = tmpvar_67;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_69;
      vPos_69 = tmpvar_67;
      highp float fAdherenceScale_70;
      highp vec3 tmpvar_71;
      tmpvar_71 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_72;
      tmpvar_72 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_73;
      highp float fOscillation_74;
      fOscillation_74 = 1.0;
      highp float fAmount_75;
      highp float fTarget_76;
      highp vec4 tmpvar_77;
      tmpvar_77.x = (tmpvar_72 + _glesMultiTexCoord0.w);
      tmpvar_77.y = ((tmpvar_72 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_77.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_72 + _glesMultiTexCoord0.w));
      tmpvar_77.w = ((tmpvar_72 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      vOscillations_73 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      highp float tmpvar_79;
      tmpvar_79 = (vOscillations_73.y * vOscillations_73.z);
      fTarget_76 = 1.0;
      fAmount_75 = tmpvar_79;
      if ((tmpvar_79 < 0.0)) {
        fTarget_76 = -1.0;
        fAmount_75 = -(tmpvar_79);
      };
      fOscillation_74 = (((
        (mix (mix (tmpvar_79, fTarget_76, fAmount_75), fTarget_76, fAmount_75) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_73.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_73.w * _ST_WindBranchWhip.x)));
      vPos_69 = (tmpvar_67 + ((tmpvar_71 * fOscillation_74) * _ST_WindBranch.y));
      highp vec4 tmpvar_80;
      tmpvar_80.zw = vec2(0.0, 0.0);
      tmpvar_80.x = ((tmpvar_72 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_80.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_81;
      highp vec4 tmpvar_82;
      tmpvar_82 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      tmpvar_81 = (((
        (tmpvar_82 * tmpvar_82)
       * 
        (3.0 - (2.0 * tmpvar_82))
      ) - 0.5) * 2.0);
      fAdherenceScale_70 = (1.0 - ((
        ((tmpvar_81.x * tmpvar_81.y) * tmpvar_81.x)
       * tmpvar_81.y) * _ST_WindTurbulences.x));
      fAdherenceScale_70 = (fAdherenceScale_70 + ((vOscillations_73.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_69 = (vPos_69 + ((
        ((vRotatedBranchAnchor_14 - vPos_69) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_70) * _glesMultiTexCoord0.z));
      vPos_68 = vPos_69;
    } else {
      highp vec3 vPos_83;
      vPos_83 = vPos_68;
      highp vec3 tmpvar_84;
      tmpvar_84 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_85;
      tmpvar_85 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_86;
      highp float fAmount_87;
      highp float fTarget_88;
      highp vec4 tmpvar_89;
      tmpvar_89.w = 0.0;
      tmpvar_89.x = (tmpvar_85 + _glesMultiTexCoord0.w);
      tmpvar_89.y = ((tmpvar_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_89.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_90;
      tmpvar_90 = abs(((
        fract((tmpvar_89 + 0.5))
       * 2.0) - 1.0));
      vOscillations_86 = (((
        (tmpvar_90 * tmpvar_90)
       * 
        (3.0 - (2.0 * tmpvar_90))
      ) - 0.5) * 2.0);
      highp float tmpvar_91;
      tmpvar_91 = (vOscillations_86.y * vOscillations_86.z);
      fTarget_88 = 1.0;
      fAmount_87 = tmpvar_91;
      if ((tmpvar_91 < 0.0)) {
        fTarget_88 = -1.0;
        fAmount_87 = -(tmpvar_91);
      };
      vPos_83 = (vPos_68 + ((tmpvar_84 * 
        (((mix (
          mix (tmpvar_91, fTarget_88, fAmount_87)
        , fTarget_88, fAmount_87) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_86.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_68 = vPos_83;
    };
    FinalPosition_16 = vPos_68;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_92;
    vPos_92 = FinalPosition_16;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_96.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    vPos_92.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_97.x + (tmpvar_97.y * tmpvar_97.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_93)));
    vPos_92 = (normalize(vPos_92) * fLength_94);
    FinalPosition_16 = vPos_92;
  };
  tmpvar_12.xyz = FinalPosition_16;
  highp vec4 tmpvar_99;
  tmpvar_99 = (glstate_matrix_mvp * tmpvar_12);
  highp vec4 o_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = (tmpvar_99 * 0.5);
  highp vec2 tmpvar_102;
  tmpvar_102.x = tmpvar_101.x;
  tmpvar_102.y = (tmpvar_101.y * _ProjectionParams.x);
  o_100.xy = (tmpvar_102 + tmpvar_101.w);
  o_100.zw = tmpvar_99.zw;
  highp vec3 tmpvar_103;
  tmpvar_103 = o_100.xyw;
  tmpvar_9 = tmpvar_103;
  highp vec2 tmpvar_104;
  tmpvar_104 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_104;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_105;
  v_105.x = _World2Object[0].x;
  v_105.y = _World2Object[1].x;
  v_105.z = _World2Object[2].x;
  v_105.w = _World2Object[3].x;
  highp vec4 v_106;
  v_106.x = _World2Object[0].y;
  v_106.y = _World2Object[1].y;
  v_106.z = _World2Object[2].y;
  v_106.w = _World2Object[3].y;
  highp vec4 v_107;
  v_107.x = _World2Object[0].z;
  v_107.y = _World2Object[1].z;
  v_107.z = _World2Object[2].z;
  v_107.w = _World2Object[3].z;
  highp vec3 tmpvar_108;
  tmpvar_108 = normalize(((
    (v_105.xyz * tmpvar_13.x)
   + 
    (v_106.xyz * tmpvar_13.y)
  ) + (v_107.xyz * tmpvar_13.z)));
  worldNormal_3 = tmpvar_108;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_109;
  tmpvar_109.w = 1.0;
  tmpvar_109.xyz = worldNormal_3;
  mediump vec4 normal_110;
  normal_110 = tmpvar_109;
  mediump vec3 x2_111;
  mediump vec4 tmpvar_112;
  tmpvar_112 = (normal_110.xyzz * normal_110.yzzx);
  x2_111.x = dot (unity_SHBr, tmpvar_112);
  x2_111.y = dot (unity_SHBg, tmpvar_112);
  x2_111.z = dot (unity_SHBb, tmpvar_112);
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_111 + (unity_SHC.xyz * (
    (normal_110.x * normal_110.x)
   - 
    (normal_110.y * normal_110.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_7.x = tmpvar_8.x;
  mediump float tmpvar_9;
  tmpvar_9 = fract(tmpvar_8.y);
  highp float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * 0.0625) + unity_LODFade.y);
  projUV_7.y = tmpvar_10;
  lowp float x_11;
  x_11 = (texture (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_6.w * _Color.w);
  tmpvar_5 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_5 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_15;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_2;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_16;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  mediump vec4 outDiffuseOcclusion_19;
  mediump vec4 outNormal_20;
  mediump vec4 emission_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_4;
  outDiffuseOcclusion_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  emission_21 = tmpvar_24;
  emission_21.xyz = (emission_21.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_18)));
  outDiffuse_1.xyz = outDiffuseOcclusion_19.xyz;
  outDiffuse_1.w = 1.0;
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_20;
  _glesFragData[3] = emission_21;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_14;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_23;
  tmpvar_23 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_24;
  tmpvar_24[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_24[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_24[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_25;
  tmpvar_25 = (normalize((tmpvar_23 * tmpvar_24)) * sqrt(dot (tmpvar_23, tmpvar_23)));
  FinalPosition_19 = tmpvar_25;
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_26;
    tmpvar_26 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_27;
    isBestWind_27 = (tmpvar_20 == 4.0);
    bool bLeaf2_28;
    bLeaf2_28 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_29;
    vPos_29 = tmpvar_25;
    highp vec3 vDirection_30;
    vDirection_30 = tmpvar_2;
    highp float tmpvar_31;
    if (bLeaf2_28) {
      tmpvar_31 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_32;
    if (bLeaf2_28) {
      tmpvar_32 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_32 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_33;
    highp vec4 tmpvar_34;
    tmpvar_34.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_34.x = (tmpvar_31 + tmpvar_26);
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    vPos_33 = (tmpvar_25 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_32 * (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_30 = tmpvar_2;
    vPos_29 = vPos_33;
    if (isBestWind_27) {
      highp vec3 tmpvar_36;
      tmpvar_36 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_37;
      if (bLeaf2_28) {
        tmpvar_37 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_38;
      if (bLeaf2_28) {
        tmpvar_38 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_39;
      if (bLeaf2_28) {
        tmpvar_39 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_40;
      if (bLeaf2_28) {
        tmpvar_40 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_40 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_41;
      if (bLeaf2_28) {
        tmpvar_41 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_41 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_42;
      if (bLeaf2_28) {
        tmpvar_42 = bool(1);
      } else {
        tmpvar_42 = bool(1);
      };
      highp float fTwitch_43;
      highp vec3 vAxis_44;
      highp vec3 tmpvar_45;
      tmpvar_45 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_46;
      tmpvar_46 = ((tmpvar_45.x + tmpvar_45.y) + tmpvar_45.z);
      highp vec4 tmpvar_47;
      tmpvar_47.x = (tmpvar_37 + tmpvar_46);
      tmpvar_47.y = ((tmpvar_37 * 0.75) - tmpvar_46);
      tmpvar_47.z = ((tmpvar_37 * 0.01) + tmpvar_46);
      tmpvar_47.w = (tmpvar_37 + tmpvar_46);
      highp vec4 tmpvar_48;
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      tmpvar_48 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = sqrt(dot (vPos_33, vPos_33));
      highp float fAngle_51;
      fAngle_51 = ((_glesMultiTexCoord2.x * tmpvar_39) * (tmpvar_48.x + (tmpvar_48.y * tmpvar_48.y)));
      highp vec2 vSinCos_52;
      vSinCos_52.x = sin(fAngle_51);
      vSinCos_52.y = cos(fAngle_51);
      highp float tmpvar_53;
      tmpvar_53 = (1.0 - vSinCos_52.y);
      highp mat3 tmpvar_54;
      tmpvar_54[0].x = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.x) + vSinCos_52.y);
      tmpvar_54[0].y = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.y) + (vSinCos_52.x * tmpvar_36.z));
      tmpvar_54[0].z = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.z) - (vSinCos_52.x * tmpvar_36.y));
      tmpvar_54[1].x = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.y) - (vSinCos_52.x * tmpvar_36.z));
      tmpvar_54[1].y = (((tmpvar_53 * tmpvar_36.y) * tmpvar_36.y) + vSinCos_52.y);
      tmpvar_54[1].z = (((tmpvar_53 * tmpvar_36.y) * tmpvar_36.z) + (vSinCos_52.x * tmpvar_36.x));
      tmpvar_54[2].x = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.z) + (vSinCos_52.x * tmpvar_36.y));
      tmpvar_54[2].y = (((tmpvar_53 * tmpvar_36.y) * tmpvar_36.z) - (vSinCos_52.x * tmpvar_36.x));
      tmpvar_54[2].z = (((tmpvar_53 * tmpvar_36.z) * tmpvar_36.z) + vSinCos_52.y);
      highp vec3 tmpvar_55;
      tmpvar_55 = ((tmpvar_36.yzx * vRotatedWindVector_18.zxy) - (tmpvar_36.zxy * vRotatedWindVector_18.yzx));
      vAxis_44.xz = tmpvar_55.xz;
      highp float tmpvar_56;
      tmpvar_56 = clamp (dot (vRotatedWindVector_18, tmpvar_36), -1.0, 1.0);
      vAxis_44.y = (tmpvar_55.y + tmpvar_56);
      highp vec3 tmpvar_57;
      tmpvar_57 = normalize(vAxis_44);
      vAxis_44 = tmpvar_57;
      highp float tmpvar_58;
      tmpvar_58 = (1.570796 - (sign(tmpvar_56) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_56))) * (1.570796 + (abs(tmpvar_56) * (-0.2146018 + 
          (abs(tmpvar_56) * (0.08656672 + (abs(tmpvar_56) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_59;
      tmpvar_59 = (tmpvar_48.y - (tmpvar_48.x * tmpvar_48.x));
      fTwitch_43 = 0.0;
      if (tmpvar_42) {
        highp float fTime_60;
        fTime_60 = (tmpvar_41.z + tmpvar_46);
        highp vec4 tmpvar_61;
        tmpvar_61.zw = vec2(0.0, 0.0);
        tmpvar_61.x = fTime_60;
        tmpvar_61.y = (0.87 * fTime_60);
        highp vec4 tmpvar_62;
        highp vec4 tmpvar_63;
        tmpvar_63 = abs(((
          fract((tmpvar_61 + 0.5))
         * 2.0) - 1.0));
        tmpvar_62 = (((
          (tmpvar_63 * tmpvar_63)
         * 
          (3.0 - (2.0 * tmpvar_63))
        ) - 0.5) * 2.0);
        fTwitch_43 = (tmpvar_41.x * pow (clamp (
          ((((tmpvar_62.x * tmpvar_62.y) * tmpvar_62.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_41.y));
      };
      highp float fAngle_64;
      fAngle_64 = (_glesMultiTexCoord2.x * ((
        (tmpvar_58 * tmpvar_40)
       + 
        (tmpvar_59 * tmpvar_38)
      ) + fTwitch_43));
      highp vec2 vSinCos_65;
      vSinCos_65.x = sin(fAngle_64);
      vSinCos_65.y = cos(fAngle_64);
      highp float tmpvar_66;
      tmpvar_66 = (1.0 - vSinCos_65.y);
      highp mat3 tmpvar_67;
      tmpvar_67[0].x = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.x) + vSinCos_65.y);
      tmpvar_67[0].y = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.y) + (vSinCos_65.x * tmpvar_57.z));
      tmpvar_67[0].z = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.z) - (vSinCos_65.x * tmpvar_57.y));
      tmpvar_67[1].x = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.y) - (vSinCos_65.x * tmpvar_57.z));
      tmpvar_67[1].y = (((tmpvar_66 * tmpvar_57.y) * tmpvar_57.y) + vSinCos_65.y);
      tmpvar_67[1].z = (((tmpvar_66 * tmpvar_57.y) * tmpvar_57.z) + (vSinCos_65.x * tmpvar_57.x));
      tmpvar_67[2].x = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.z) + (vSinCos_65.x * tmpvar_57.y));
      tmpvar_67[2].y = (((tmpvar_66 * tmpvar_57.y) * tmpvar_57.z) - (vSinCos_65.x * tmpvar_57.x));
      tmpvar_67[2].z = (((tmpvar_66 * tmpvar_57.z) * tmpvar_57.z) + vSinCos_65.y);
      highp mat3 tmpvar_68;
      tmpvar_68 = (tmpvar_54 * tmpvar_67);
      vDirection_30 = (tmpvar_68 * _glesNormal);
      vPos_29 = (normalize((tmpvar_68 * vPos_33)) * tmpvar_50);
    };
    tmpvar_16 = vDirection_30;
    FinalPosition_19 = vPos_29;
  };
  highp vec3 tmpvar_69;
  tmpvar_69 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_69;
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_70;
    vPos_70 = tmpvar_69;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_71;
      vPos_71 = tmpvar_69;
      highp float fAdherenceScale_72;
      highp vec3 tmpvar_73;
      tmpvar_73 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_74;
      tmpvar_74 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_75;
      highp float fOscillation_76;
      fOscillation_76 = 1.0;
      highp float fAmount_77;
      highp float fTarget_78;
      highp vec4 tmpvar_79;
      tmpvar_79.x = (tmpvar_74 + _glesMultiTexCoord0.w);
      tmpvar_79.y = ((tmpvar_74 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_79.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_74 + _glesMultiTexCoord0.w));
      tmpvar_79.w = ((tmpvar_74 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      vOscillations_75 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      highp float tmpvar_81;
      tmpvar_81 = (vOscillations_75.y * vOscillations_75.z);
      fTarget_78 = 1.0;
      fAmount_77 = tmpvar_81;
      if ((tmpvar_81 < 0.0)) {
        fTarget_78 = -1.0;
        fAmount_77 = -(tmpvar_81);
      };
      fOscillation_76 = (((
        (mix (mix (tmpvar_81, fTarget_78, fAmount_77), fTarget_78, fAmount_77) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_75.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_75.w * _ST_WindBranchWhip.x)));
      vPos_71 = (tmpvar_69 + ((tmpvar_73 * fOscillation_76) * _ST_WindBranch.y));
      highp vec4 tmpvar_82;
      tmpvar_82.zw = vec2(0.0, 0.0);
      tmpvar_82.x = ((tmpvar_74 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_82.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_83;
      highp vec4 tmpvar_84;
      tmpvar_84 = abs(((
        fract((tmpvar_82 + 0.5))
       * 2.0) - 1.0));
      tmpvar_83 = (((
        (tmpvar_84 * tmpvar_84)
       * 
        (3.0 - (2.0 * tmpvar_84))
      ) - 0.5) * 2.0);
      fAdherenceScale_72 = (1.0 - ((
        ((tmpvar_83.x * tmpvar_83.y) * tmpvar_83.x)
       * tmpvar_83.y) * _ST_WindTurbulences.x));
      fAdherenceScale_72 = (fAdherenceScale_72 + ((vOscillations_75.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_71 = (vPos_71 + ((
        ((vRotatedBranchAnchor_17 - vPos_71) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_72) * _glesMultiTexCoord0.z));
      vPos_70 = vPos_71;
    } else {
      highp vec3 vPos_85;
      vPos_85 = vPos_70;
      highp vec3 tmpvar_86;
      tmpvar_86 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_87;
      tmpvar_87 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_88;
      highp float fAmount_89;
      highp float fTarget_90;
      highp vec4 tmpvar_91;
      tmpvar_91.w = 0.0;
      tmpvar_91.x = (tmpvar_87 + _glesMultiTexCoord0.w);
      tmpvar_91.y = ((tmpvar_87 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_91.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_87 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_92;
      tmpvar_92 = abs(((
        fract((tmpvar_91 + 0.5))
       * 2.0) - 1.0));
      vOscillations_88 = (((
        (tmpvar_92 * tmpvar_92)
       * 
        (3.0 - (2.0 * tmpvar_92))
      ) - 0.5) * 2.0);
      highp float tmpvar_93;
      tmpvar_93 = (vOscillations_88.y * vOscillations_88.z);
      fTarget_90 = 1.0;
      fAmount_89 = tmpvar_93;
      if ((tmpvar_93 < 0.0)) {
        fTarget_90 = -1.0;
        fAmount_89 = -(tmpvar_93);
      };
      vPos_85 = (vPos_70 + ((tmpvar_86 * 
        (((mix (
          mix (tmpvar_93, fTarget_90, fAmount_89)
        , fTarget_90, fAmount_89) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_88.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_70 = vPos_85;
    };
    FinalPosition_19 = vPos_70;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_94;
    vPos_94 = FinalPosition_19;
    highp float fAdjust_95;
    highp float fLength_96;
    fLength_96 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_97;
    tmpvar_97 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_95 = tmpvar_97;
    if ((tmpvar_97 != 0.0)) {
      fAdjust_95 = pow (tmpvar_97, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_98;
    tmpvar_98.zw = vec2(0.0, 0.0);
    tmpvar_98.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_98.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_99;
    highp vec4 tmpvar_100;
    tmpvar_100 = abs(((
      fract((tmpvar_98 + 0.5))
     * 2.0) - 1.0));
    tmpvar_99 = (((
      (tmpvar_100 * tmpvar_100)
     * 
      (3.0 - (2.0 * tmpvar_100))
    ) - 0.5) * 2.0);
    vPos_94.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_99.x + (tmpvar_99.y * tmpvar_99.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_95)));
    vPos_94 = (normalize(vPos_94) * fLength_96);
    FinalPosition_19 = vPos_94;
  };
  tmpvar_15.xyz = FinalPosition_19;
  highp vec4 tmpvar_101;
  tmpvar_101 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_102;
  highp vec4 tmpvar_103;
  tmpvar_103 = (tmpvar_101 * 0.5);
  highp vec2 tmpvar_104;
  tmpvar_104.x = tmpvar_103.x;
  tmpvar_104.y = (tmpvar_103.y * _ProjectionParams.x);
  o_102.xy = (tmpvar_104 + tmpvar_103.w);
  o_102.zw = tmpvar_101.zw;
  highp vec3 tmpvar_105;
  tmpvar_105 = o_102.xyw;
  tmpvar_9 = tmpvar_105;
  highp vec2 tmpvar_106;
  tmpvar_106 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_106;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_107;
  v_107.x = _World2Object[0].x;
  v_107.y = _World2Object[1].x;
  v_107.z = _World2Object[2].x;
  v_107.w = _World2Object[3].x;
  highp vec4 v_108;
  v_108.x = _World2Object[0].y;
  v_108.y = _World2Object[1].y;
  v_108.z = _World2Object[2].y;
  v_108.w = _World2Object[3].y;
  highp vec4 v_109;
  v_109.x = _World2Object[0].z;
  v_109.y = _World2Object[1].z;
  v_109.z = _World2Object[2].z;
  v_109.w = _World2Object[3].z;
  highp vec3 tmpvar_110;
  tmpvar_110 = normalize(((
    (v_107.xyz * tmpvar_16.x)
   + 
    (v_108.xyz * tmpvar_16.y)
  ) + (v_109.xyz * tmpvar_16.z)));
  worldNormal_3 = tmpvar_110;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_111;
  tmpvar_111.w = 1.0;
  tmpvar_111.xyz = worldNormal_3;
  mediump vec4 normal_112;
  normal_112 = tmpvar_111;
  mediump vec3 x2_113;
  mediump vec4 tmpvar_114;
  tmpvar_114 = (normal_112.xyzz * normal_112.yzzx);
  x2_113.x = dot (unity_SHBr, tmpvar_114);
  x2_113.y = dot (unity_SHBg, tmpvar_114);
  x2_113.z = dot (unity_SHBb, tmpvar_114);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_113 + (unity_SHC.xyz * (
    (normal_112.x * normal_112.x)
   - 
    (normal_112.y * normal_112.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_16 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_17;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_3;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_18;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_19);
  x1_20.y = dot (unity_SHAg, tmpvar_19);
  x1_20.z = dot (unity_SHAb, tmpvar_19);
  mediump vec4 outDiffuseOcclusion_21;
  mediump vec4 outNormal_22;
  mediump vec4 emission_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = tmpvar_5;
  outDiffuseOcclusion_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_22 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = vec3(0.0, 0.0, 0.0);
  emission_23 = tmpvar_26;
  emission_23.xyz = (emission_23.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_20)));
  outDiffuse_1.xyz = outDiffuseOcclusion_21.xyz;
  outEmission_2.w = emission_23.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_23.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_22;
  gl_FragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD6;
out mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_14;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_23;
  tmpvar_23 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_24;
  tmpvar_24[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_24[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_24[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_25;
  tmpvar_25 = (normalize((tmpvar_23 * tmpvar_24)) * sqrt(dot (tmpvar_23, tmpvar_23)));
  FinalPosition_19 = tmpvar_25;
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_26;
    tmpvar_26 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_27;
    isBestWind_27 = (tmpvar_20 == 4.0);
    bool bLeaf2_28;
    bLeaf2_28 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_29;
    vPos_29 = tmpvar_25;
    highp vec3 vDirection_30;
    vDirection_30 = tmpvar_2;
    highp float tmpvar_31;
    if (bLeaf2_28) {
      tmpvar_31 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_32;
    if (bLeaf2_28) {
      tmpvar_32 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_32 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_33;
    highp vec4 tmpvar_34;
    tmpvar_34.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_34.x = (tmpvar_31 + tmpvar_26);
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    vPos_33 = (tmpvar_25 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_32 * (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_30 = tmpvar_2;
    vPos_29 = vPos_33;
    if (isBestWind_27) {
      highp vec3 tmpvar_36;
      tmpvar_36 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_37;
      if (bLeaf2_28) {
        tmpvar_37 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_38;
      if (bLeaf2_28) {
        tmpvar_38 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_39;
      if (bLeaf2_28) {
        tmpvar_39 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_40;
      if (bLeaf2_28) {
        tmpvar_40 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_40 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_41;
      if (bLeaf2_28) {
        tmpvar_41 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_41 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_42;
      if (bLeaf2_28) {
        tmpvar_42 = bool(1);
      } else {
        tmpvar_42 = bool(1);
      };
      highp float fTwitch_43;
      highp vec3 vAxis_44;
      highp vec3 tmpvar_45;
      tmpvar_45 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_46;
      tmpvar_46 = ((tmpvar_45.x + tmpvar_45.y) + tmpvar_45.z);
      highp vec4 tmpvar_47;
      tmpvar_47.x = (tmpvar_37 + tmpvar_46);
      tmpvar_47.y = ((tmpvar_37 * 0.75) - tmpvar_46);
      tmpvar_47.z = ((tmpvar_37 * 0.01) + tmpvar_46);
      tmpvar_47.w = (tmpvar_37 + tmpvar_46);
      highp vec4 tmpvar_48;
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      tmpvar_48 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = sqrt(dot (vPos_33, vPos_33));
      highp float fAngle_51;
      fAngle_51 = ((_glesMultiTexCoord2.x * tmpvar_39) * (tmpvar_48.x + (tmpvar_48.y * tmpvar_48.y)));
      highp vec2 vSinCos_52;
      vSinCos_52.x = sin(fAngle_51);
      vSinCos_52.y = cos(fAngle_51);
      highp float tmpvar_53;
      tmpvar_53 = (1.0 - vSinCos_52.y);
      highp mat3 tmpvar_54;
      tmpvar_54[0].x = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.x) + vSinCos_52.y);
      tmpvar_54[0].y = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.y) + (vSinCos_52.x * tmpvar_36.z));
      tmpvar_54[0].z = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.z) - (vSinCos_52.x * tmpvar_36.y));
      tmpvar_54[1].x = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.y) - (vSinCos_52.x * tmpvar_36.z));
      tmpvar_54[1].y = (((tmpvar_53 * tmpvar_36.y) * tmpvar_36.y) + vSinCos_52.y);
      tmpvar_54[1].z = (((tmpvar_53 * tmpvar_36.y) * tmpvar_36.z) + (vSinCos_52.x * tmpvar_36.x));
      tmpvar_54[2].x = (((tmpvar_53 * tmpvar_36.x) * tmpvar_36.z) + (vSinCos_52.x * tmpvar_36.y));
      tmpvar_54[2].y = (((tmpvar_53 * tmpvar_36.y) * tmpvar_36.z) - (vSinCos_52.x * tmpvar_36.x));
      tmpvar_54[2].z = (((tmpvar_53 * tmpvar_36.z) * tmpvar_36.z) + vSinCos_52.y);
      highp vec3 tmpvar_55;
      tmpvar_55 = ((tmpvar_36.yzx * vRotatedWindVector_18.zxy) - (tmpvar_36.zxy * vRotatedWindVector_18.yzx));
      vAxis_44.xz = tmpvar_55.xz;
      highp float tmpvar_56;
      tmpvar_56 = clamp (dot (vRotatedWindVector_18, tmpvar_36), -1.0, 1.0);
      vAxis_44.y = (tmpvar_55.y + tmpvar_56);
      highp vec3 tmpvar_57;
      tmpvar_57 = normalize(vAxis_44);
      vAxis_44 = tmpvar_57;
      highp float tmpvar_58;
      tmpvar_58 = (1.570796 - (sign(tmpvar_56) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_56))) * (1.570796 + (abs(tmpvar_56) * (-0.2146018 + 
          (abs(tmpvar_56) * (0.08656672 + (abs(tmpvar_56) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_59;
      tmpvar_59 = (tmpvar_48.y - (tmpvar_48.x * tmpvar_48.x));
      fTwitch_43 = 0.0;
      if (tmpvar_42) {
        highp float fTime_60;
        fTime_60 = (tmpvar_41.z + tmpvar_46);
        highp vec4 tmpvar_61;
        tmpvar_61.zw = vec2(0.0, 0.0);
        tmpvar_61.x = fTime_60;
        tmpvar_61.y = (0.87 * fTime_60);
        highp vec4 tmpvar_62;
        highp vec4 tmpvar_63;
        tmpvar_63 = abs(((
          fract((tmpvar_61 + 0.5))
         * 2.0) - 1.0));
        tmpvar_62 = (((
          (tmpvar_63 * tmpvar_63)
         * 
          (3.0 - (2.0 * tmpvar_63))
        ) - 0.5) * 2.0);
        fTwitch_43 = (tmpvar_41.x * pow (clamp (
          ((((tmpvar_62.x * tmpvar_62.y) * tmpvar_62.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_41.y));
      };
      highp float fAngle_64;
      fAngle_64 = (_glesMultiTexCoord2.x * ((
        (tmpvar_58 * tmpvar_40)
       + 
        (tmpvar_59 * tmpvar_38)
      ) + fTwitch_43));
      highp vec2 vSinCos_65;
      vSinCos_65.x = sin(fAngle_64);
      vSinCos_65.y = cos(fAngle_64);
      highp float tmpvar_66;
      tmpvar_66 = (1.0 - vSinCos_65.y);
      highp mat3 tmpvar_67;
      tmpvar_67[0].x = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.x) + vSinCos_65.y);
      tmpvar_67[0].y = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.y) + (vSinCos_65.x * tmpvar_57.z));
      tmpvar_67[0].z = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.z) - (vSinCos_65.x * tmpvar_57.y));
      tmpvar_67[1].x = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.y) - (vSinCos_65.x * tmpvar_57.z));
      tmpvar_67[1].y = (((tmpvar_66 * tmpvar_57.y) * tmpvar_57.y) + vSinCos_65.y);
      tmpvar_67[1].z = (((tmpvar_66 * tmpvar_57.y) * tmpvar_57.z) + (vSinCos_65.x * tmpvar_57.x));
      tmpvar_67[2].x = (((tmpvar_66 * tmpvar_57.x) * tmpvar_57.z) + (vSinCos_65.x * tmpvar_57.y));
      tmpvar_67[2].y = (((tmpvar_66 * tmpvar_57.y) * tmpvar_57.z) - (vSinCos_65.x * tmpvar_57.x));
      tmpvar_67[2].z = (((tmpvar_66 * tmpvar_57.z) * tmpvar_57.z) + vSinCos_65.y);
      highp mat3 tmpvar_68;
      tmpvar_68 = (tmpvar_54 * tmpvar_67);
      vDirection_30 = (tmpvar_68 * _glesNormal);
      vPos_29 = (normalize((tmpvar_68 * vPos_33)) * tmpvar_50);
    };
    tmpvar_16 = vDirection_30;
    FinalPosition_19 = vPos_29;
  };
  highp vec3 tmpvar_69;
  tmpvar_69 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_69;
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_70;
    vPos_70 = tmpvar_69;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_71;
      vPos_71 = tmpvar_69;
      highp float fAdherenceScale_72;
      highp vec3 tmpvar_73;
      tmpvar_73 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_74;
      tmpvar_74 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_75;
      highp float fOscillation_76;
      fOscillation_76 = 1.0;
      highp float fAmount_77;
      highp float fTarget_78;
      highp vec4 tmpvar_79;
      tmpvar_79.x = (tmpvar_74 + _glesMultiTexCoord0.w);
      tmpvar_79.y = ((tmpvar_74 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_79.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_74 + _glesMultiTexCoord0.w));
      tmpvar_79.w = ((tmpvar_74 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      vOscillations_75 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      highp float tmpvar_81;
      tmpvar_81 = (vOscillations_75.y * vOscillations_75.z);
      fTarget_78 = 1.0;
      fAmount_77 = tmpvar_81;
      if ((tmpvar_81 < 0.0)) {
        fTarget_78 = -1.0;
        fAmount_77 = -(tmpvar_81);
      };
      fOscillation_76 = (((
        (mix (mix (tmpvar_81, fTarget_78, fAmount_77), fTarget_78, fAmount_77) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_75.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_75.w * _ST_WindBranchWhip.x)));
      vPos_71 = (tmpvar_69 + ((tmpvar_73 * fOscillation_76) * _ST_WindBranch.y));
      highp vec4 tmpvar_82;
      tmpvar_82.zw = vec2(0.0, 0.0);
      tmpvar_82.x = ((tmpvar_74 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_82.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_83;
      highp vec4 tmpvar_84;
      tmpvar_84 = abs(((
        fract((tmpvar_82 + 0.5))
       * 2.0) - 1.0));
      tmpvar_83 = (((
        (tmpvar_84 * tmpvar_84)
       * 
        (3.0 - (2.0 * tmpvar_84))
      ) - 0.5) * 2.0);
      fAdherenceScale_72 = (1.0 - ((
        ((tmpvar_83.x * tmpvar_83.y) * tmpvar_83.x)
       * tmpvar_83.y) * _ST_WindTurbulences.x));
      fAdherenceScale_72 = (fAdherenceScale_72 + ((vOscillations_75.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_71 = (vPos_71 + ((
        ((vRotatedBranchAnchor_17 - vPos_71) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_72) * _glesMultiTexCoord0.z));
      vPos_70 = vPos_71;
    } else {
      highp vec3 vPos_85;
      vPos_85 = vPos_70;
      highp vec3 tmpvar_86;
      tmpvar_86 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_87;
      tmpvar_87 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_88;
      highp float fAmount_89;
      highp float fTarget_90;
      highp vec4 tmpvar_91;
      tmpvar_91.w = 0.0;
      tmpvar_91.x = (tmpvar_87 + _glesMultiTexCoord0.w);
      tmpvar_91.y = ((tmpvar_87 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_91.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_87 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_92;
      tmpvar_92 = abs(((
        fract((tmpvar_91 + 0.5))
       * 2.0) - 1.0));
      vOscillations_88 = (((
        (tmpvar_92 * tmpvar_92)
       * 
        (3.0 - (2.0 * tmpvar_92))
      ) - 0.5) * 2.0);
      highp float tmpvar_93;
      tmpvar_93 = (vOscillations_88.y * vOscillations_88.z);
      fTarget_90 = 1.0;
      fAmount_89 = tmpvar_93;
      if ((tmpvar_93 < 0.0)) {
        fTarget_90 = -1.0;
        fAmount_89 = -(tmpvar_93);
      };
      vPos_85 = (vPos_70 + ((tmpvar_86 * 
        (((mix (
          mix (tmpvar_93, fTarget_90, fAmount_89)
        , fTarget_90, fAmount_89) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_88.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_70 = vPos_85;
    };
    FinalPosition_19 = vPos_70;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_94;
    vPos_94 = FinalPosition_19;
    highp float fAdjust_95;
    highp float fLength_96;
    fLength_96 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_97;
    tmpvar_97 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_95 = tmpvar_97;
    if ((tmpvar_97 != 0.0)) {
      fAdjust_95 = pow (tmpvar_97, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_98;
    tmpvar_98.zw = vec2(0.0, 0.0);
    tmpvar_98.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_98.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_99;
    highp vec4 tmpvar_100;
    tmpvar_100 = abs(((
      fract((tmpvar_98 + 0.5))
     * 2.0) - 1.0));
    tmpvar_99 = (((
      (tmpvar_100 * tmpvar_100)
     * 
      (3.0 - (2.0 * tmpvar_100))
    ) - 0.5) * 2.0);
    vPos_94.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_99.x + (tmpvar_99.y * tmpvar_99.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_95)));
    vPos_94 = (normalize(vPos_94) * fLength_96);
    FinalPosition_19 = vPos_94;
  };
  tmpvar_15.xyz = FinalPosition_19;
  highp vec4 tmpvar_101;
  tmpvar_101 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_102;
  highp vec4 tmpvar_103;
  tmpvar_103 = (tmpvar_101 * 0.5);
  highp vec2 tmpvar_104;
  tmpvar_104.x = tmpvar_103.x;
  tmpvar_104.y = (tmpvar_103.y * _ProjectionParams.x);
  o_102.xy = (tmpvar_104 + tmpvar_103.w);
  o_102.zw = tmpvar_101.zw;
  highp vec3 tmpvar_105;
  tmpvar_105 = o_102.xyw;
  tmpvar_9 = tmpvar_105;
  highp vec2 tmpvar_106;
  tmpvar_106 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_106;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_107;
  v_107.x = _World2Object[0].x;
  v_107.y = _World2Object[1].x;
  v_107.z = _World2Object[2].x;
  v_107.w = _World2Object[3].x;
  highp vec4 v_108;
  v_108.x = _World2Object[0].y;
  v_108.y = _World2Object[1].y;
  v_108.z = _World2Object[2].y;
  v_108.w = _World2Object[3].y;
  highp vec4 v_109;
  v_109.x = _World2Object[0].z;
  v_109.y = _World2Object[1].z;
  v_109.z = _World2Object[2].z;
  v_109.w = _World2Object[3].z;
  highp vec3 tmpvar_110;
  tmpvar_110 = normalize(((
    (v_107.xyz * tmpvar_16.x)
   + 
    (v_108.xyz * tmpvar_16.y)
  ) + (v_109.xyz * tmpvar_16.z)));
  worldNormal_3 = tmpvar_110;
  tmpvar_4 = worldNormal_3;
  tmp