    * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      highp float tmpvar_40;
      tmpvar_40 = (vOscillations_34.y * vOscillations_34.z);
      fTarget_37 = 1.0;
      fAmount_36 = tmpvar_40;
      if ((tmpvar_40 < 0.0)) {
        fTarget_37 = -1.0;
        fAmount_36 = -(tmpvar_40);
      };
      fOscillation_35 = (((
        (mix (mix (tmpvar_40, fTarget_37, fAmount_36), fTarget_37, fAmount_36) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_34.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_34.w * _ST_WindBranchWhip.x)));
      vPos_30 = (FinalPosition_20 + ((tmpvar_32 * fOscillation_35) * _ST_WindBranch.y));
      highp vec4 tmpvar_41;
      tmpvar_41.zw = vec2(0.0, 0.0);
      tmpvar_41.x = ((tmpvar_33 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_41.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      fAdherenceScale_31 = (1.0 - ((
        ((tmpvar_42.x * tmpvar_42.y) * tmpvar_42.x)
       * tmpvar_42.y) * _ST_WindTurbulences.x));
      fAdherenceScale_31 = (fAdherenceScale_31 + ((vOscillations_34.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_30 = (vPos_30 + ((
        ((vRotatedBranchAnchor_18 - vPos_30) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_31) * _glesMultiTexCoord0.z));
      vPos_29 = vPos_30;
    } else {
      highp vec3 vPos_44;
      vPos_44 = vPos_29;
      highp vec3 tmpvar_45;
      tmpvar_45 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_46;
      tmpvar_46 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_47;
      highp float fAmount_48;
      highp float fTarget_49;
      highp vec4 tmpvar_50;
      tmpvar_50.w = 0.0;
      tmpvar_50.x = (tmpvar_46 + _glesMultiTexCoord0.w);
      tmpvar_50.y = ((tmpvar_46 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_50.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_46 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_51;
      tmpvar_51 = abs(((
        fract((tmpvar_50 + 0.5))
       * 2.0) - 1.0));
      vOscillations_47 = (((
        (tmpvar_51 * tmpvar_51)
       * 
        (3.0 - (2.0 * tmpvar_51))
      ) - 0.5) * 2.0);
      highp float tmpvar_52;
      tmpvar_52 = (vOscillations_47.y * vOscillations_47.z);
      fTarget_49 = 1.0;
      fAmount_48 = tmpvar_52;
      if ((tmpvar_52 < 0.0)) {
        fTarget_49 = -1.0;
        fAmount_48 = -(tmpvar_52);
      };
      vPos_44 = (vPos_29 + ((tmpvar_45 * 
        (((mix (
          mix (tmpvar_52, fTarget_49, fAmount_48)
        , fTarget_49, fAmount_48) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_47.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_29 = vPos_44;
    };
    FinalPosition_20 = vPos_29;
  };
  if ((tmpvar_22 > 0.0)) {
    highp vec3 vPos_53;
    vPos_53 = FinalPosition_20;
    highp float fAdjust_54;
    highp float fLength_55;
    fLength_55 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_56;
    tmpvar_56 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_54 = tmpvar_56;
    if ((tmpvar_56 != 0.0)) {
      fAdjust_54 = pow (tmpvar_56, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_57;
    tmpvar_57.zw = vec2(0.0, 0.0);
    tmpvar_57.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_57.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_58;
    highp vec4 tmpvar_59;
    tmpvar_59 = abs(((
      fract((tmpvar_57 + 0.5))
     * 2.0) - 1.0));
    tmpvar_58 = (((
      (tmpvar_59 * tmpvar_59)
     * 
      (3.0 - (2.0 * tmpvar_59))
    ) - 0.5) * 2.0);
    vPos_53.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_58.x + (tmpvar_58.y * tmpvar_58.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_54)));
    vPos_53 = (normalize(vPos_53) * fLength_55);
    FinalPosition_20 = vPos_53;
  };
  tmpvar_16.xyz = FinalPosition_20;
  tmpvar_6 = tmpvar_9;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * tmpvar_17.x)
   + 
    (v_62.xyz * tmpvar_17.y)
  ) + (v_63.xyz * tmpvar_17.z)));
  worldNormal_5 = tmpvar_64;
  highp mat3 tmpvar_65;
  tmpvar_65[0] = _Object2World[0].xyz;
  tmpvar_65[1] = _Object2World[1].xyz;
  tmpvar_65[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize((tmpvar_65 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_67 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69.x = worldTangent_4.x;
  tmpvar_69.y = worldBinormal_3.x;
  tmpvar_69.z = worldNormal_5.x;
  tmpvar_69.w = tmpvar_60.x;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_4.y;
  tmpvar_70.y = worldBinormal_3.y;
  tmpvar_70.z = worldNormal_5.y;
  tmpvar_70.w = tmpvar_60.y;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_4.z;
  tmpvar_71.y = worldBinormal_3.z;
  tmpvar_71.z = worldNormal_5.z;
  tmpvar_71.w = tmpvar_60.z;
  lowp vec4 tmpvar_72;
  tmpvar_72.w = 1.0;
  tmpvar_72.xyz = worldNormal_5;
  mediump vec3 tmpvar_73;
  mediump vec4 normal_74;
  normal_74 = tmpvar_72;
  mediump vec3 x2_75;
  mediump vec4 tmpvar_76;
  tmpvar_76 = (normal_74.xyzz * normal_74.yzzx);
  x2_75.x = dot (unity_SHBr, tmpvar_76);
  x2_75.y = dot (unity_SHBg, tmpvar_76);
  x2_75.z = dot (unity_SHBb, tmpvar_76);
  tmpvar_73 = (x2_75 + (unity_SHC.xyz * (
    (normal_74.x * normal_74.x)
   - 
    (normal_74.y * normal_74.y)
  )));
  highp vec3 lightColor0_77;
  lightColor0_77 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_78;
  lightColor1_78 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_79;
  lightColor2_79 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_80;
  lightColor3_80 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_81;
  lightAttenSq_81 = unity_4LightAtten0;
  highp vec3 normal_82;
  normal_82 = worldNormal_5;
  highp vec4 tmpvar_83;
  tmpvar_83 = (unity_4LightPosX0 - tmpvar_60.x);
  highp vec4 tmpvar_84;
  tmpvar_84 = (unity_4LightPosY0 - tmpvar_60.y);
  highp vec4 tmpvar_85;
  tmpvar_85 = (unity_4LightPosZ0 - tmpvar_60.z);
  highp vec4 tmpvar_86;
  tmpvar_86 = (((tmpvar_83 * tmpvar_83) + (tmpvar_84 * tmpvar_84)) + (tmpvar_85 * tmpvar_85));
  highp vec4 tmpvar_87;
  tmpvar_87 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_83 * normal_82.x) + (tmpvar_84 * normal_82.y)) + (tmpvar_85 * normal_82.z))
   * 
    inversesqrt(tmpvar_86)
  )) * (1.0/((1.0 + 
    (tmpvar_86 * lightAttenSq_81)
  ))));
  highp vec3 tmpvar_88;
  tmpvar_88 = (tmpvar_73 + ((
    ((lightColor0_77 * tmpvar_87.x) + (lightColor1_78 * tmpvar_87.y))
   + 
    (lightColor2_79 * tmpvar_87.z)
  ) + (lightColor3_80 * tmpvar_87.w)));
  tmpvar_7 = tmpvar_88;
  highp vec4 tmpvar_89;
  tmpvar_89 = (unity_World2Shadow[0] * (_Object2World * tmpvar_16));
  tmpvar_8 = tmpvar_89;
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_69;
  xlv_TEXCOORD1 = tmpvar_70;
  xlv_TEXCOORD2 = tmpvar_71;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_18;
  mediump float dist_19;
  lowp float tmpvar_20;
  tmpvar_20 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x;
  dist_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (float((dist_19 > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_4.x = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_4.y = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_4.z = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_25;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_18;
  mediump vec3 normalWorld_26;
  normalWorld_26 = worldN_4;
  mediump vec3 tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = normalWorld_26;
  mediump vec3 x1_29;
  x1_29.x = dot (unity_SHAr, tmpvar_28);
  x1_29.y = dot (unity_SHAg, tmpvar_28);
  x1_29.z = dot (unity_SHAb, tmpvar_28);
  tmpvar_27 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_27;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_32 = tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_9 * tmpvar_27) * diff_32);
  c_31.xyz = tmpvar_34;
  c_31.w = tmpvar_10;
  c_30.w = c_31.w;
  mediump vec3 tmpvar_35;
  tmpvar_35 = (c_31.xyz + (tmpvar_9 * (xlv_TEXCOORD5 + x1_29)));
  c_30.xyz = tmpvar_35;
  c_5.xyz = c_30.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_10;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_14;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = tmpvar_1.xyz;
  FinalPosition_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_21 == 5.0)) {
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    highp float fOffset_25;
    fOffset_25 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_25 = 0.75;
    };
    highp vec4 tmpvar_26;
    tmpvar_26.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_26.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_25);
    highp vec4 tmpvar_27;
    tmpvar_27 = abs(((
      fract((tmpvar_26 + 0.5))
     * 2.0) - 1.0));
    vPos_24 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_16 = tmpvar_2;
    FinalPosition_19 = vPos_24;
  };
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_28;
    vPos_28 = FinalPosition_19;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_29;
      vPos_29 = FinalPosition_19;
      highp float fAdherenceScale_30;
      highp vec3 tmpvar_31;
      tmpvar_31 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_32;
      tmpvar_32 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_33;
      highp float fOscillation_34;
      fOscillation_34 = 1.0;
      highp float fAmount_35;
      highp float fTarget_36;
      highp vec4 tmpvar_37;
      tmpvar_37.x = (tmpvar_32 + _glesMultiTexCoord0.w);
      tmpvar_37.y = ((tmpvar_32 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_37.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_32 + _glesMultiTexCoord0.w));
      tmpvar_37.w = ((tmpvar_32 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      vOscillations_33 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      highp float tmpvar_39;
      tmpvar_39 = (vOscillations_33.y * vOscillations_33.z);
      fTarget_36 = 1.0;
      fAmount_35 = tmpvar_39;
      if ((tmpvar_39 < 0.0)) {
        fTarget_36 = -1.0;
        fAmount_35 = -(tmpvar_39);
      };
      fOscillation_34 = (((
        (mix (mix (tmpvar_39, fTarget_36, fAmount_35), fTarget_36, fAmount_35) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_33.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_33.w * _ST_WindBranchWhip.x)));
      vPos_29 = (FinalPosition_19 + ((tmpvar_31 * fOscillation_34) * _ST_WindBranch.y));
      highp vec4 tmpvar_40;
      tmpvar_40.zw = vec2(0.0, 0.0);
      tmpvar_40.x = ((tmpvar_32 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_40.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_41;
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      tmpvar_41 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      fAdherenceScale_30 = (1.0 - ((
        ((tmpvar_41.x * tmpvar_41.y) * tmpvar_41.x)
       * tmpvar_41.y) * _ST_WindTurbulences.x));
      fAdherenceScale_30 = (fAdherenceScale_30 + ((vOscillations_33.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_29 = (vPos_29 + ((
        ((vRotatedBranchAnchor_17 - vPos_29) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_30) * _glesMultiTexCoord0.z));
      vPos_28 = vPos_29;
    } else {
      highp vec3 vPos_43;
      vPos_43 = vPos_28;
      highp vec3 tmpvar_44;
      tmpvar_44 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_45;
      tmpvar_45 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_46;
      highp float fAmount_47;
      highp float fTarget_48;
      highp vec4 tmpvar_49;
      tmpvar_49.w = 0.0;
      tmpvar_49.x = (tmpvar_45 + _glesMultiTexCoord0.w);
      tmpvar_49.y = ((tmpvar_45 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_49.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_45 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_49 + 0.5))
       * 2.0) - 1.0));
      vOscillations_46 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      highp float tmpvar_51;
      tmpvar_51 = (vOscillations_46.y * vOscillations_46.z);
      fTarget_48 = 1.0;
      fAmount_47 = tmpvar_51;
      if ((tmpvar_51 < 0.0)) {
        fTarget_48 = -1.0;
        fAmount_47 = -(tmpvar_51);
      };
      vPos_43 = (vPos_28 + ((tmpvar_44 * 
        (((mix (
          mix (tmpvar_51, fTarget_48, fAmount_47)
        , fTarget_48, fAmount_47) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_46.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_28 = vPos_43;
    };
    FinalPosition_19 = vPos_28;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_52;
    vPos_52 = FinalPosition_19;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_56.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    vPos_52.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_57.x + (tmpvar_57.y * tmpvar_57.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_53)));
    vPos_52 = (normalize(vPos_52) * fLength_54);
    FinalPosition_19 = vPos_52;
  };
  tmpvar_15.xyz = FinalPosition_19;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_59;
  tmpvar_59 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_60;
  v_60.x = _World2Object[0].x;
  v_60.y = _World2Object[1].x;
  v_60.z = _World2Object[2].x;
  v_60.w = _World2Object[3].x;
  highp vec4 v_61;
  v_61.x = _World2Object[0].y;
  v_61.y = _World2Object[1].y;
  v_61.z = _World2Object[2].y;
  v_61.w = _World2Object[3].y;
  highp vec4 v_62;
  v_62.x = _World2Object[0].z;
  v_62.y = _World2Object[1].z;
  v_62.z = _World2Object[2].z;
  v_62.w = _World2Object[3].z;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize(((
    (v_60.xyz * tmpvar_16.x)
   + 
    (v_61.xyz * tmpvar_16.y)
  ) + (v_62.xyz * tmpvar_16.z)));
  worldNormal_5 = tmpvar_63;
  highp mat3 tmpvar_64;
  tmpvar_64[0] = _Object2World[0].xyz;
  tmpvar_64[1] = _Object2World[1].xyz;
  tmpvar_64[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_65;
  tmpvar_65 = normalize((tmpvar_64 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_65;
  lowp vec3 tmpvar_66;
  tmpvar_66 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_67;
  tmpvar_67 = (tmpvar_66 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68.x = worldTangent_4.x;
  tmpvar_68.y = worldBinormal_3.x;
  tmpvar_68.z = worldNormal_5.x;
  tmpvar_68.w = tmpvar_59.x;
  highp vec4 tmpvar_69;
  tmpvar_69.x = worldTangent_4.y;
  tmpvar_69.y = worldBinormal_3.y;
  tmpvar_69.z = worldNormal_5.y;
  tmpvar_69.w = tmpvar_59.y;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_4.z;
  tmpvar_70.y = worldBinormal_3.z;
  tmpvar_70.z = worldNormal_5.z;
  tmpvar_70.w = tmpvar_59.z;
  lowp vec4 tmpvar_71;
  tmpvar_71.w = 1.0;
  tmpvar_71.xyz = worldNormal_5;
  mediump vec4 normal_72;
  normal_72 = tmpvar_71;
  mediump vec3 x2_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = (normal_72.xyzz * normal_72.yzzx);
  x2_73.x = dot (unity_SHBr, tmpvar_74);
  x2_73.y = dot (unity_SHBg, tmpvar_74);
  x2_73.z = dot (unity_SHBb, tmpvar_74);
  highp vec4 tmpvar_75;
  tmpvar_75 = (unity_World2Shadow[0] * (_Object2World * tmpvar_15));
  tmpvar_7 = tmpvar_75;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_68;
  xlv_TEXCOORD1 = tmpvar_69;
  xlv_TEXCOORD2 = tmpvar_70;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = (x2_73 + (unity_SHC.xyz * (
    (normal_72.x * normal_72.x)
   - 
    (normal_72.y * normal_72.y)
  )));
  xlv_TEXCOORD6 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_18;
  lowp float tmpvar_19;
  tmpvar_19 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz);
  mediump float tmpvar_20;
  tmpvar_20 = (_LightShadowData.x + (tmpvar_19 * (1.0 - _LightShadowData.x)));
  shadow_18 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_4.x = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_4.y = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_4.z = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_24;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_18;
  mediump vec3 normalWorld_25;
  normalWorld_25 = worldN_4;
  mediump vec3 tmpvar_26;
  mediump vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = normalWorld_25;
  mediump vec3 x1_28;
  x1_28.x = dot (unity_SHAr, tmpvar_27);
  x1_28.y = dot (unity_SHAg, tmpvar_27);
  x1_28.z = dot (unity_SHAb, tmpvar_27);
  tmpvar_26 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_26;
  lowp vec4 c_29;
  lowp vec4 c_30;
  lowp float diff_31;
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_31 = tmpvar_32;
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((tmpvar_9 * tmpvar_26) * diff_31);
  c_30.xyz = tmpvar_33;
  c_30.w = tmpvar_10;
  c_29.w = c_30.w;
  mediump vec3 tmpvar_34;
  tmpvar_34 = (c_30.xyz + (tmpvar_9 * (xlv_TEXCOORD5 + x1_28)));
  c_29.xyz = tmpvar_34;
  c_5.xyz = c_29.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
in vec4 _glesTANGENT;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_10;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_14;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = tmpvar_1.xyz;
  FinalPosition_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_21 == 5.0)) {
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    highp float fOffset_25;
    fOffset_25 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_25 = 0.75;
    };
    highp vec4 tmpvar_26;
    tmpvar_26.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_26.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_25);
    highp vec4 tmpvar_27;
    tmpvar_27 = abs(((
      fract((tmpvar_26 + 0.5))
     * 2.0) - 1.0));
    vPos_24 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_16 = tmpvar_2;
    FinalPosition_19 = vPos_24;
  };
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_28;
    vPos_28 = FinalPosition_19;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_29;
      vPos_29 = FinalPosition_19;
      highp float fAdherenceScale_30;
      highp vec3 tmpvar_31;
      tmpvar_31 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_32;
      tmpvar_32 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_33;
      highp float fOscillation_34;
      fOscillation_34 = 1.0;
      highp float fAmount_35;
      highp float fTarget_36;
      highp vec4 tmpvar_37;
      tmpvar_37.x = (tmpvar_32 + _glesMultiTexCoord0.w);
      tmpvar_37.y = ((tmpvar_32 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_37.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_32 + _glesMultiTexCoord0.w));
      tmpvar_37.w = ((tmpvar_32 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      vOscillations_33 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      highp float tmpvar_39;
      tmpvar_39 = (vOscillations_33.y * vOscillations_33.z);
      fTarget_36 = 1.0;
      fAmount_35 = tmpvar_39;
      if ((tmpvar_39 < 0.0)) {
        fTarget_36 = -1.0;
        fAmount_35 = -(tmpvar_39);
      };
      fOscillation_34 = (((
        (mix (mix (tmpvar_39, fTarget_36, fAmount_35), fTarget_36, fAmount_35) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_33.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_33.w * _ST_WindBranchWhip.x)));
      vPos_29 = (FinalPosition_19 + ((tmpvar_31 * fOscillation_34) * _ST_WindBranch.y));
      highp vec4 tmpvar_40;
      tmpvar_40.zw = vec2(0.0, 0.0);
      tmpvar_40.x = ((tmpvar_32 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_40.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_41;
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      tmpvar_41 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      fAdherenceScale_30 = (1.0 - ((
        ((tmpvar_41.x * tmpvar_41.y) * tmpvar_41.x)
       * tmpvar_41.y) * _ST_WindTurbulences.x));
      fAdherenceScale_30 = (fAdherenceScale_30 + ((vOscillations_33.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_29 = (vPos_29 + ((
        ((vRotatedBranchAnchor_17 - vPos_29) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_30) * _glesMultiTexCoord0.z));
      vPos_28 = vPos_29;
    } else {
      highp vec3 vPos_43;
      vPos_43 = vPos_28;
      highp vec3 tmpvar_44;
      tmpvar_44 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_45;
      tmpvar_45 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_46;
      highp float fAmount_47;
      highp float fTarget_48;
      highp vec4 tmpvar_49;
      tmpvar_49.w = 0.0;
      tmpvar_49.x = (tmpvar_45 + _glesMultiTexCoord0.w);
      tmpvar_49.y = ((tmpvar_45 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_49.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_45 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_49 + 0.5))
       * 2.0) - 1.0));
      vOscillations_46 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      highp float tmpvar_51;
      tmpvar_51 = (vOscillations_46.y * vOscillations_46.z);
      fTarget_48 = 1.0;
      fAmount_47 = tmpvar_51;
      if ((tmpvar_51 < 0.0)) {
        fTarget_48 = -1.0;
        fAmount_47 = -(tmpvar_51);
      };
      vPos_43 = (vPos_28 + ((tmpvar_44 * 
        (((mix (
          mix (tmpvar_51, fTarget_48, fAmount_47)
        , fTarget_48, fAmount_47) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_46.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_28 = vPos_43;
    };
    FinalPosition_19 = vPos_28;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_52;
    vPos_52 = FinalPosition_19;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_56.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    vPos_52.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_57.x + (tmpvar_57.y * tmpvar_57.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_53)));
    vPos_52 = (normalize(vPos_52) * fLength_54);
    FinalPosition_19 = vPos_52;
  };
  tmpvar_15.xyz = FinalPosition_19;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_59;
  tmpvar_59 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_60;
  v_60.x = _World2Object[0].x;
  v_60.y = _World2Object[1].x;
  v_60.z = _World2Object[2].x;
  v_60.w = _World2Object[3].x;
  highp vec4 v_61;
  v_61.x = _World2Object[0].y;
  v_61.y = _World2Object[1].y;
  v_61.z = _World2Object[2].y;
  v_61.w = _World2Object[3].y;
  highp vec4 v_62;
  v_62.x = _World2Object[0].z;
  v_62.y = _World2Object[1].z;
  v_62.z = _World2Object[2].z;
  v_62.w = _World2Object[3].z;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize(((
    (v_60.xyz * tmpvar_16.x)
   + 
    (v_61.xyz * tmpvar_16.y)
  ) + (v_62.xyz * tmpvar_16.z)));
  worldNormal_5 = tmpvar_63;
  highp mat3 tmpvar_64;
  tmpvar_64[0] = _Object2World[0].xyz;
  tmpvar_64[1] = _Object2World[1].xyz;
  tmpvar_64[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_65;
  tmpvar_65 = normalize((tmpvar_64 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_65;
  lowp vec3 tmpvar_66;
  tmpvar_66 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_67;
  tmpvar_67 = (tmpvar_66 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68.x = worldTangent_4.x;
  tmpvar_68.y = worldBinormal_3.x;
  tmpvar_68.z = worldNormal_5.x;
  tmpvar_68.w = tmpvar_59.x;
  highp vec4 tmpvar_69;
  tmpvar_69.x = worldTangent_4.y;
  tmpvar_69.y = worldBinormal_3.y;
  tmpvar_69.z = worldNormal_5.y;
  tmpvar_69.w = tmpvar_59.y;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_4.z;
  tmpvar_70.y = worldBinormal_3.z;
  tmpvar_70.z = worldNormal_5.z;
  tmpvar_70.w = tmpvar_59.z;
  lowp vec4 tmpvar_71;
  tmpvar_71.w = 1.0;
  tmpvar_71.xyz = worldNormal_5;
  mediump vec4 normal_72;
  normal_72 = tmpvar_71;
  mediump vec3 x2_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = (normal_72.xyzz * normal_72.yzzx);
  x2_73.x = dot (unity_SHBr, tmpvar_74);
  x2_73.y = dot (unity_SHBg, tmpvar_74);
  x2_73.z = dot (unity_SHBb, tmpvar_74);
  highp vec4 tmpvar_75;
  tmpvar_75 = (unity_World2Shadow[0] * (_Object2World * tmpvar_15));
  tmpvar_7 = tmpvar_75;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_68;
  xlv_TEXCOORD1 = tmpvar_69;
  xlv_TEXCOORD2 = tmpvar_70;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = (x2_73 + (unity_SHC.xyz * (
    (normal_72.x * normal_72.x)
   - 
    (normal_72.y * normal_72.y)
  )));
  xlv_TEXCOORD6 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_18;
  mediump float tmpvar_19;
  tmpvar_19 = texture (_ShadowMapTexture, xlv_TEXCOORD6.xyz);
  lowp float tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump float tmpvar_21;
  tmpvar_21 = (_LightShadowData.x + (tmpvar_20 * (1.0 - _LightShadowData.x)));
  shadow_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_4.x = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_4.y = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_4.z = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_25;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_18;
  mediump vec3 normalWorld_26;
  normalWorld_26 = worldN_4;
  mediump vec3 tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = normalWorld_26;
  mediump vec3 x1_29;
  x1_29.x = dot (unity_SHAr, tmpvar_28);
  x1_29.y = dot (unity_SHAg, tmpvar_28);
  x1_29.z = dot (unity_SHAb, tmpvar_28);
  tmpvar_27 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_27;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_32 = tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_9 * tmpvar_27) * diff_32);
  c_31.xyz = tmpvar_34;
  c_31.w = tmpvar_10;
  c_30.w = c_31.w;
  mediump vec3 tmpvar_35;
  tmpvar_35 = (c_31.xyz + (tmpvar_9 * (xlv_TEXCOORD5 + x1_29)));
  c_30.xyz = tmpvar_35;
  c_5.xyz = c_30.xyz;
  c_5.w = 1.0;
  _glesFragData[0] = c_5;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_10.xy = tmpvar_11;
  tmpvar_9.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_9.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_15;
  highp vec4 tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_16 = tmpvar_1;
  tmpvar_17 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = tmpvar_1.xyz;
  FinalPosition_20 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = (_WindQuality * _WindEnabled);
  if ((tmpvar_22 > 0.0)) {
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_23 * _ST_WindVector.xyz));
    highp mat3 tmpvar_24;
    tmpvar_24[0] = _World2Object[0].xyz;
    tmpvar_24[1] = _World2Object[1].xyz;
    tmpvar_24[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_24 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_22 == 5.0)) {
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    highp float fOffset_26;
    fOffset_26 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_26 = 0.75;
    };
    highp vec4 tmpvar_27;
    tmpvar_27.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_27.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_26);
    highp vec4 tmpvar_28;
    tmpvar_28 = abs(((
      fract((tmpvar_27 + 0.5))
     * 2.0) - 1.0));
    vPos_25 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_17 = tmpvar_2;
    FinalPosition_20 = vPos_25;
  };
  if ((tmpvar_22 >= 3.0)) {
    highp vec3 vPos_29;
    vPos_29 = FinalPosition_20;
    if ((tmpvar_22 == 5.0)) {
      highp vec3 vPos_30;
      vPos_30 = FinalPosition_20;
      highp float fAdherenceScale_31;
      highp vec3 tmpvar_32;
      tmpvar_32 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_33;
      tmpvar_33 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_34;
      highp float fOscillation_35;
      fOscillation_35 = 1.0;
      highp float fAmount_36;
      highp float fTarget_37;
      highp vec4 tmpvar_38;
      tmpvar_38.x = (tmpvar_33 + _glesMultiTexCoord0.w);
      tmpvar_38.y = ((tmpvar_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_38.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_33 + _glesMultiTexCoord0.w));
      tmpvar_38.w = ((tmpvar_33 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      vOscillations_34 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      highp float tmpvar_40;
      tmpvar_40 = (vOscillations_34.y * vOscillations_34.z);
      fTarget_37 = 1.0;
      fAmount_36 = tmpvar_40;
      if ((tmpvar_40 < 0.0)) {
        fTarget_37 = -1.0;
        fAmount_36 = -(tmpvar_40);
      };
      fOscillation_35 = (((
        (mix (mix (tmpvar_40, fTarget_37, fAmount_36), fTarget_37, fAmount_36) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_34.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_34.w * _ST_WindBranchWhip.x)));
      vPos_30 = (FinalPosition_20 + ((tmpvar_32 * fOscillation_35) * _ST_WindBranch.y));
      highp vec4 tmpvar_41;
      tmpvar_41.zw = vec2(0.0, 0.0);
      tmpvar_41.x = ((tmpvar_33 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_41.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      fAdherenceScale_31 = (1.0 - ((
        ((tmpvar_42.x * tmpvar_42.y) * tmpvar_42.x)
       * tmpvar_42.y) * _ST_WindTurbulences.x));
      fAdherenceScale_31 = (fAdherenceScale_31 + ((vOscillations_34.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_30 = (vPos_30 + ((
        ((vRotatedBranchAnchor_18 - vPos_30) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_31) * _glesMultiTexCoord0.z));
      vPos_29 = vPos_30;
    } else {
      highp vec3 vPos_44;
      vPos_44 = vPos_29;
      highp vec3 tmpvar_45;
      tmpvar_45 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_46;
      tmpvar_46 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_47;
      highp float fAmount_48;
      highp float fTarget_49;
      highp vec4 tmpvar_50;
      tmpvar_50.w = 0.0;
      tmpvar_50.x = (tmpvar_46 + _glesMultiTexCoord0.w);
      tmpvar_50.y = ((tmpvar_46 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_50.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_46 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_51;
      tmpvar_51 = abs(((
        fract((tmpvar_50 + 0.5))
       * 2.0) - 1.0));
      vOscillations_47 = (((
        (tmpvar_51 * tmpvar_51)
       * 
        (3.0 - (2.0 * tmpvar_51))
      ) - 0.5) * 2.0);
      highp float tmpvar_52;
      tmpvar_52 = (vOscillations_47.y * vOscillations_47.z);
      fTarget_49 = 1.0;
      fAmount_48 = tmpvar_52;
      if ((tmpvar_52 < 0.0)) {
        fTarget_49 = -1.0;
        fAmount_48 = -(tmpvar_52);
      };
      vPos_44 = (vPos_29 + ((tmpvar_45 * 
        (((mix (
          mix (tmpvar_52, fTarget_49, fAmount_48)
        , fTarget_49, fAmount_48) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_47.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_29 = vPos_44;
    };
    FinalPosition_20 = vPos_29;
  };
  if ((tmpvar_22 > 0.0)) {
    highp vec3 vPos_53;
    vPos_53 = FinalPosition_20;
    highp float fAdjust_54;
    highp float fLength_55;
    fLength_55 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_56;
    tmpvar_56 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_54 = tmpvar_56;
    if ((tmpvar_56 != 0.0)) {
      fAdjust_54 = pow (tmpvar_56, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_57;
    tmpvar_57.zw = vec2(0.0, 0.0);
    tmpvar_57.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_57.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_58;
    highp vec4 tmpvar_59;
    tmpvar_59 = abs(((
      fract((tmpvar_57 + 0.5))
     * 2.0) - 1.0));
    tmpvar_58 = (((
      (tmpvar_59 * tmpvar_59)
     * 
      (3.0 - (2.0 * tmpvar_59))
    ) - 0.5) * 2.0);
    vPos_53.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_58.x + (tmpvar_58.y * tmpvar_58.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_54)));
    vPos_53 = (normalize(vPos_53) * fLength_55);
    FinalPosition_20 = vPos_53;
  };
  tmpvar_16.xyz = FinalPosition_20;
  tmpvar_6 = tmpvar_9;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * tmpvar_17.x)
   + 
    (v_62.xyz * tmpvar_17.y)
  ) + (v_63.xyz * tmpvar_17.z)));
  worldNormal_5 = tmpvar_64;
  highp mat3 tmpvar_65;
  tmpvar_65[0] = _Object2World[0].xyz;
  tmpvar_65[1] = _Object2World[1].xyz;
  tmpvar_65[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize((tmpvar_65 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_67 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69.x = worldTangent_4.x;
  tmpvar_69.y = worldBinormal_3.x;
  tmpvar_69.z = worldNormal_5.x;
  tmpvar_69.w = tmpvar_60.x;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_4.y;
  tmpvar_70.y = worldBinormal_3.y;
  tmpvar_70.z = worldNormal_5.y;
  tmpvar_70.w = tmpvar_60.y;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_4.z;
  tmpvar_71.y = worldBinormal_3.z;
  tmpvar_71.z = worldNormal_5.z;
  tmpvar_71.w = tmpvar_60.z;
  lowp vec4 tmpvar_72;
  tmpvar_72.w = 1.0;
  tmpvar_72.xyz = worldNormal_5;
  mediump vec3 tmpvar_73;
  mediump vec4 normal_74;
  normal_74 = tmpvar_72;
  mediump vec3 x2_75;
  mediump vec4 tmpvar_76;
  tmpvar_76 = (normal_74.xyzz * normal_74.yzzx);
  x2_75.x = dot (unity_SHBr, tmpvar_76);
  x2_75.y = dot (unity_SHBg, tmpvar_76);
  x2_75.z = dot (unity_SHBb, tmpvar_76);
  tmpvar_73 = (x2_75 + (unity_SHC.xyz * (
    (normal_74.x * normal_74.x)
   - 
    (normal_74.y * normal_74.y)
  )));
  highp vec3 lightColor0_77;
  lightColor0_77 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_78;
  lightColor1_78 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_79;
  lightColor2_79 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_80;
  lightColor3_80 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_81;
  lightAttenSq_81 = unity_4LightAtten0;
  highp vec3 normal_82;
  normal_82 = worldNormal_5;
  highp vec4 tmpvar_83;
  tmpvar_83 = (unity_4LightPosX0 - tmpvar_60.x);
  highp vec4 tmpvar_84;
  tmpvar_84 = (unity_4LightPosY0 - tmpvar_60.y);
  highp vec4 tmpvar_85;
  tmpvar_85 = (unity_4LightPosZ0 - tmpvar_60.z);
  highp vec4 tmpvar_86;
  tmpvar_86 = (((tmpvar_83 * tmpvar_83) + (tmpvar_84 * tmpvar_84)) + (tmpvar_85 * tmpvar_85));
  highp vec4 tmpvar_87;
  tmpvar_87 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_83 * normal_82.x) + (tmpvar_84 * normal_82.y)) + (tmpvar_85 * normal_82.z))
   * 
    inversesqrt(tmpvar_86)
  )) * (1.0/((1.0 + 
    (tmpvar_86 * lightAttenSq_81)
  ))));
  highp vec3 tmpvar_88;
  tmpvar_88 = (tmpvar_73 + ((
    ((lightColor0_77 * tmpvar_87.x) + (lightColor1_78 * tmpvar_87.y))
   + 
    (lightColor2_79 * tmpvar_87.z)
  ) + (lightColor3_80 * tmpvar_87.w)));
  tmpvar_7 = tmpvar_88;
  highp vec4 tmpvar_89;
  tmpvar_89 = (unity_World2Shadow[0] * (_Object2World * tmpvar_16));
  tmpvar_8 = tmpvar_89;
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_69;
  xlv_TEXCOORD1 = tmpvar_70;
  xlv_TEXCOORD2 = tmpvar_71;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_18;
  lowp float tmpvar_19;
  tmpvar_19 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz);
  mediump float tmpvar_20;
  tmpvar_20 = (_LightShadowData.x + (tmpvar_19 * (1.0 - _LightShadowData.x)));
  shadow_18 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_4.x = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_4.y = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_4.z = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_24;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_18;
  mediump vec3 normalWorld_25;
  normalWorld_25 = worldN_4;
  mediump vec3 tmpvar_26;
  mediump vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = normalWorld_25;
  mediump vec3 x1_28;
  x1_28.x = dot (unity_SHAr, tmpvar_27);
  x1_28.y = dot (unity_SHAg, tmpvar_27);
  x1_28.z = dot (unity_SHAb, tmpvar_27);
  tmpvar_26 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_26;
  lowp vec4 c_29;
  lowp vec4 c_30;
  lowp float diff_31;
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_31 = tmpvar_32;
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((tmpvar_9 * tmpvar_26) * diff_31);
  c_30.xyz = tmpvar_33;
  c_30.w = tmpvar_10;
  c_29.w = c_30.w;
  mediump vec3 tmpvar_34;
  tmpvar_34 = (c_30.xyz + (tmpvar_9 * (xlv_TEXCOORD5 + x1_28)));
  c_29.xyz = tmpvar_34;
  c_5.xyz = c_29.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
in vec4 _glesTANGENT;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_10.xy = tmpvar_11;
  tmpvar_9.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_9.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_15;
  highp vec4 tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_16 = tmpvar_1;
  tmpvar_17 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = tmpvar_1.xyz;
  FinalPosition_20 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = (_WindQuality * _WindEnabled);
  if ((tmpvar_22 > 0.0)) {
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_23 * _ST_WindVector.xyz));
    highp mat3 tmpvar_24;
    tmpvar_24[0] = _World2Object[0].xyz;
    tmpvar_24[1] = _World2Object[1].xyz;
    tmpvar_24[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_24 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_22 == 5.0)) {
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    highp float fOffset_26;
    fOffset_26 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_26 = 0.75;
    };
    highp vec4 tmpvar_27;
    tmpvar_27.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_27.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_26);
    highp vec4 tmpvar_28;
    tmpvar_28 = abs(((
      fract((tmpvar_27 + 0.5))
     * 2.0) - 1.0));
    vPos_25 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_17 = tmpvar_2;
    FinalPosition_20 = vPos_25;
  };
  if ((tmpvar_22 >= 3.0)) {
    highp vec3 vPos_29;
    vPos_29 = FinalPosition_20;
    if ((tmpvar_22 == 5.0)) {
      highp vec3 vPos_30;
      vPos_30 = FinalPosition_20;
      highp float fAdherenceScale_31;
      highp vec3 tmpvar_32;
      tmpvar_32 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_33;
      tmpvar_33 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_34;
      highp float fOscillation_35;
      fOscillation_35 = 1.0;
      highp float fAmount_36;
      highp float fTarget_37;
      highp vec4 tmpvar_38;
      tmpvar_38.x = (tmpvar_33 + _glesMultiTexCoord0.w);
      tmpvar_38.y = ((tmpvar_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_38.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_33 + _glesMultiTexCoord0.w));
      tmpvar_38.w = ((tmpvar_33 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      vOscillations_34 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      highp float tmpvar_40;
      tmpvar_40 = (vOscillations_34.y * vOscillations_34.z);
      fTarget_37 = 1.0;
      fAmount_36 = tmpvar_40;
      if ((tmpvar_40 < 0.0)) {
        fTarget_37 = -1.0;
        fAmount_36 = -(tmpvar_40);
      };
      fOscillation_35 = (((
        (mix (mix (tmpvar_40, fTarget_37, fAmount_36), fTarget_37, fAmount_36) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_34.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_34.w * _ST_WindBranchWhip.x)));
      vPos_30 = (FinalPosition_20 + ((tmpvar_32 * fOscillation_35) * _ST_WindBranch.y));
      highp vec4 tmpvar_41;
      tmpvar_41.zw = vec2(0.0, 0.0);
      tmpvar_41.x = ((tmpvar_33 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_41.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      fAdherenceScale_31 = (1.0 - ((
        ((tmpvar_42.x * tmpvar_42.y) * tmpvar_42.x)
       * tmpvar_42.y) * _ST_WindTurbulences.x));
      fAdherenceScale_31 = (fAdherenceScale_31 + ((vOscillations_34.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_30 = (vPos_30 + ((
        ((vRotatedBranchAnchor_18 - vPos_30) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_31) * _glesMultiTexCoord0.z));
      vPos_29 = vPos_30;
    } else {
      highp vec3 vPos_44;
      vPos_44 = vPos_29;
      highp vec3 tmpvar_45;
      tmpvar_45 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_46;
      tmpvar_46 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_47;
      highp float fAmount_48;
      highp float fTarget_49;
      highp vec4 tmpvar_50;
      tmpvar_50.w = 0.0;
      tmpvar_50.x = (tmpvar_46 + _glesMultiTexCoord0.w);
      tmpvar_50.y = ((tmpvar_46 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_50.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_46 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_51;
      tmpvar_51 = abs(((
        fract((tmpvar_50 + 0.5))
       * 2.0) - 1.0));
      vOscillations_47 = (((
        (tmpvar_51 * tmpvar_51)
       * 
        (3.0 - (2.0 * tmpvar_51))
      ) - 0.5) * 2.0);
      highp float tmpvar_52;
      tmpvar_52 = (vOscillations_47.y * vOscillations_47.z);
      fTarget_49 = 1.0;
      fAmount_48 = tmpvar_52;
      if ((tmpvar_52 < 0.0)) {
        fTarget_49 = -1.0;
        fAmount_48 = -(tmpvar_52);
      };
      vPos_44 = (vPos_29 + ((tmpvar_45 * 
        (((mix (
          mix (tmpvar_52, fTarget_49, fAmount_48)
        , fTarget_49, fAmount_48) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_47.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_29 = vPos_44;
    };
    FinalPosition_20 = vPos_29;
  };
  if ((tmpvar_22 > 0.0)) {
    highp vec3 vPos_53;
    vPos_53 = FinalPosition_20;
    highp float fAdjust_54;
    highp float fLength_55;
    fLength_55 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_56;
    tmpvar_56 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_54 = tmpvar_56;
    if ((tmpvar_56 != 0.0)) {
      fAdjust_54 = pow (tmpvar_56, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_57;
    tmpvar_57.zw = vec2(0.0, 0.0);
    tmpvar_57.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_57.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_58;
    highp vec4 tmpvar_59;
    tmpvar_59 = abs(((
      fract((tmpvar_57 + 0.5))
     * 2.0) - 1.0));
    tmpvar_58 = (((
      (tmpvar_59 * tmpvar_59)
     * 
      (3.0 - (2.0 * tmpvar_59))
    ) - 0.5) * 2.0);
    vPos_53.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_58.x + (tmpvar_58.y * tmpvar_58.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_54)));
    vPos_53 = (normalize(vPos_53) * fLength_55);
    FinalPosition_20 = vPos_53;
  };
  tmpvar_16.xyz = FinalPosition_20;
  tmpvar_6 = tmpvar_9;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * tmpvar_17.x)
   + 
    (v_62.xyz * tmpvar_17.y)
  ) + (v_63.xyz * tmpvar_17.z)));
  worldNormal_5 = tmpvar_64;
  highp mat3 tmpvar_65;
  tmpvar_65[0] = _Object2World[0].xyz;
  tmpvar_65[1] = _Object2World[1].xyz;
  tmpvar_65[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize((tmpvar_65 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_67 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69.x = worldTangent_4.x;
  tmpvar_69.y = worldBinormal_3.x;
  tmpvar_69.z = worldNormal_5.x;
  tmpvar_69.w = tmpvar_60.x;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_4.y;
  tmpvar_70.y = worldBinormal_3.y;
  tmpvar_70.z = worldNormal_5.y;
  tmpvar_70.w = tmpvar_60.y;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_4.z;
  tmpvar_71.y = worldBinormal_3.z;
  tmpvar_71.z = worldNormal_5.z;
  tmpvar_71.w = tmpvar_60.z;
  lowp vec4 tmpvar_72;
  tmpvar_72.w = 1.0;
  tmpvar_72.xyz = worldNormal_5;
  mediump vec3 tmpvar_73;
  mediump vec4 normal_74;
  normal_74 = tmpvar_72;
  mediump vec3 x2_75;
  mediump vec4 tmpvar_76;
  tmpvar_76 = (normal_74.xyzz * normal_74.yzzx);
  x2_75.x = dot (unity_SHBr, tmpvar_76);
  x2_75.y = dot (unity_SHBg, tmpvar_76);
  x2_75.z = dot (unity_SHBb, tmpvar_76);
  tmpvar_73 = (x2_75 + (unity_SHC.xyz * (
    (normal_74.x * normal_74.x)
   - 
    (normal_74.y * normal_74.y)
  )));
  highp vec3 lightColor0_77;
  lightColor0_77 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_78;
  lightColor1_78 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_79;
  lightColor2_79 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_80;
  lightColor3_80 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_81;
  lightAttenSq_81 = unity_4LightAtten0;
  highp vec3 normal_82;
  normal_82 = worldNormal_5;
  highp vec4 tmpvar_83;
  tmpvar_83 = (unity_4LightPosX0 - tmpvar_60.x);
  highp vec4 tmpvar_84;
  tmpvar_84 = (unity_4LightPosY0 - tmpvar_60.y);
  highp vec4 tmpvar_85;
  tmpvar_85 = (unity_4LightPosZ0 - tmpvar_60.z);
  highp vec4 tmpvar_86;
  tmpvar_86 = (((tmpvar_83 * tmpvar_83) + (tmpvar_84 * tmpvar_84)) + (tmpvar_85 * tmpvar_85));
  highp vec4 tmpvar_87;
  tmpvar_87 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_83 * normal_82.x) + (tmpvar_84 * normal_82.y)) + (tmpvar_85 * normal_82.z))
   * 
    inversesqrt(tmpvar_86)
  )) * (1.0/((1.0 + 
    (tmpvar_86 * lightAttenSq_81)
  ))));
  highp vec3 tmpvar_88;
  tmpvar_88 = (tmpvar_73 + ((
    ((lightColor0_77 * tmpvar_87.x) + (lightColor1_78 * tmpvar_87.y))
   + 
    (lightColor2_79 * tmpvar_87.z)
  ) + (lightColor3_80 * tmpvar_87.w)));
  tmpvar_7 = tmpvar_88;
  highp vec4 tmpvar_89;
  tmpvar_89 = (unity_World2Shadow[0] * (_Object2World * tmpvar_16));
  tmpvar_8 = tmpvar_89;
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_69;
  xlv_TEXCOORD1 = tmpvar_70;
  xlv_TEXCOORD2 = tmpvar_71;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_18;
  mediump float tmpvar_19;
  tmpvar_19 = texture (_ShadowMapTexture, xlv_TEXCOORD6.xyz);
  lowp float tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump float tmpvar_21;
  tmpvar_21 = (_LightShadowData.x + (tmpvar_20 * (1.0 - _LightShadowData.x)));
  shadow_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_4.x = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_4.y = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_4.z = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_25;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_18;
  mediump vec3 normalWorld_26;
  normalWorld_26 = worldN_4;
  mediump vec3 tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = normalWorld_26;
  mediump vec3 x1_29;
  x1_29.x = dot (unity_SHAr, tmpvar_28);
  x1_29.y = dot (unity_SHAg, tmpvar_28);
  x1_29.z = dot (unity_SHAb, tmpvar_28);
  tmpvar_27 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_27;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_32 = tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_9 * tmpvar_27) * diff_32);
  c_31.xyz = tmpvar_34;
  c_31.w = tmpvar_10;
  c_30.w = c_31.w;
  mediump vec3 tmpvar_35;
  tmpvar_35 = (c_31.xyz + (tmpvar_9 * (xlv_TEXCOORD5 + x1_29)));
  c_30.xyz = tmpvar_35;
  c_5.xyz = c_30.xyz;
  c_5.w = 1.0;
  _glesFragData[0] = c_5;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_8;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_14 = tmpvar_19;
  if (((tmpvar_16 > 1.0) && (tmpvar_16 < 5.0))) {
    highp float tmpvar_20;
    tmpvar_20 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_21;
    isBestWind_21 = (tmpvar_16 == 4.0);
    bool bLeaf2_22;
    bLeaf2_22 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    highp vec3 vDirection_24;
    vDirection_24 = tmpvar_2;
    highp float tmpvar_25;
    if (bLeaf2_22) {
      tmpvar_25 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_26;
    if (bLeaf2_22) {
      tmpvar_26 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_27;
    highp vec4 tmpvar_28;
    tmpvar_28.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_28.x = (tmpvar_25 + tmpvar_20);
    highp vec4 tmpvar_29;
    tmpvar_29 = abs(((
      fract((tmpvar_28 + 0.5))
     * 2.0) - 1.0));
    vPos_27 = (tmpvar_19 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_26 * (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_24 = tmpvar_2;
    vPos_23 = vPos_27;
    if (isBestWind_21) {
      highp vec3 tmpvar_30;
      tmpvar_30 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_31;
      if (bLeaf2_22) {
        tmpvar_31 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_32;
      if (bLeaf2_22) {
        tmpvar_32 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_33;
      if (bLeaf2_22) {
        tmpvar_33 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_34;
      if (bLeaf2_22) {
        tmpvar_34 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_35;
      if (bLeaf2_22) {
        tmpvar_35 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_35 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_36;
      if (bLeaf2_22) {
        tmpvar_36 = bool(1);
      } else {
        tmpvar_36 = bool(1);
      };
      highp float fTwitch_37;
      highp vec3 vAxis_38;
      highp vec3 tmpvar_39;
      tmpvar_39 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_40;
      tmpvar_40 = ((tmpvar_39.x + tmpvar_39.y) + tmpvar_39.z);
      highp vec4 tmpvar_41;
      tmpvar_41.x = (tmpvar_31 + tmpvar_40);
      tmpvar_41.y = ((tmpvar_31 * 0.75) - tmpvar_40);
      tmpvar_41.z = ((tmpvar_31 * 0.01) + tmpvar_40);
      tmpvar_41.w = (tmpvar_31 + tmpvar_40);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = sqrt(dot (vPos_27, vPos_27));
      highp float fAngle_45;
      fAngle_45 = ((_glesMultiTexCoord2.x * tmpvar_33) * (tmpvar_42.x + (tmpvar_42.y * tmpvar_42.y)));
      highp vec2 vSinCos_46;
      vSinCos_46.x = sin(fAngle_45);
      vSinCos_46.y = cos(fAngle_45);
      highp float tmpvar_47;
      tmpvar_47 = (1.0 - vSinCos_46.y);
      highp mat3 tmpvar_48;
      tmpvar_48[0].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.x) + vSinCos_46.y);
      tmpvar_48[0].y = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.y) + (vSinCos_46.x * tmpvar_30.z));
      tmpvar_48[0].z = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.z) - (vSinCos_46.x * tmpvar_30.y));
      tmpvar_48[1].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.y) - (vSinCos_46.x * tmpvar_30.z));
      tmpvar_48[1].y = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.y) + vSinCos_46.y);
      tmpvar_48[1].z = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.z) + (vSinCos_46.x * tmpvar_30.x));
      tmpvar_48[2].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.z) + (vSinCos_46.x * tmpvar_30.y));
      tmpvar_48[2].y = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.z) - (vSinCos_46.x * tmpvar_30.x));
      tmpvar_48[2].z = (((tmpvar_47 * tmpvar_30.z) * tmpvar_30.z) + vSinCos_46.y);
      highp vec3 tmpvar_49;
      tmpvar_49 = ((tmpvar_30.yzx * vRotatedWindVector_13.zxy) - (tmpvar_30.zxy * vRotatedWindVector_13.yzx));
      vAxis_38.xz = tmpvar_49.xz;
      highp float tmpvar_50;
      tmpvar_50 = clamp (dot (vRotatedWindVector_13, tmpvar_30), -1.0, 1.0);
      vAxis_38.y = (tmpvar_49.y + tmpvar_50);
      highp vec3 tmpvar_51;
      tmpvar_51 = normalize(vAxis_38);
      vAxis_38 = tmpvar_51;
      highp float tmpvar_52;
      tmpvar_52 = (1.570796 - (sign(tmpvar_50) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_50))) * (1.570796 + (abs(tmpvar_50) * (-0.2146018 + 
          (abs(tmpvar_50) * (0.08656672 + (abs(tmpvar_50) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_53;
      tmpvar_53 = (tmpvar_42.y - (tmpvar_42.x * tmpvar_42.x));
      fTwitch_37 = 0.0;
      if (tmpvar_36) {
        highp float fTime_54;
        fTime_54 = (tmpvar_35.z + tmpvar_40);
        highp vec4 tmpvar_55;
        tmpvar_55.zw = vec2(0.0, 0.0);
        tmpvar_55.x = fTime_54;
        tmpvar_55.y = (0.87 * fTime_54);
        highp vec4 tmpvar_56;
        highp vec4 tmpvar_57;
        tmpvar_57 = abs(((
          fract((tmpvar_55 + 0.5))
         * 2.0) - 1.0));
        tmpvar_56 = (((
          (tmpvar_57 * tmpvar_57)
         * 
          (3.0 - (2.0 * tmpvar_57))
        ) - 0.5) * 2.0);
        fTwitch_37 = (tmpvar_35.x * pow (clamp (
          ((((tmpvar_56.x * tmpvar_56.y) * tmpvar_56.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_35.y));
      };
      highp float fAngle_58;
      fAngle_58 = (_glesMultiTexCoord2.x * ((
        (tmpvar_52 * tmpvar_34)
       + 
        (tmpvar_53 * tmpvar_32)
      ) + fTwitch_37));
      highp vec2 vSinCos_59;
      vSinCos_59.x = sin(fAngle_58);
      vSinCos_59.y = cos(fAngle_58);
      highp float tmpvar_60;
      tmpvar_60 = (1.0 - vSinCos_59.y);
      highp mat3 tmpvar_61;
      tmpvar_61[0].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.x) + vSinCos_59.y);
      tmpvar_61[0].y = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.y) + (vSinCos_59.x * tmpvar_51.z));
      tmpvar_61[0].z = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.z) - (vSinCos_59.x * tmpvar_51.y));
      tmpvar_61[1].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.y) - (vSinCos_59.x * tmpvar_51.z));
      tmpvar_61[1].y = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.y) + vSinCos_59.y);
      tmpvar_61[1].z = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.z) + (vSinCos_59.x * tmpvar_51.x));
      tmpvar_61[2].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.z) + (vSinCos_59.x * tmpvar_51.y));
      tmpvar_61[2].y = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.z) - (vSinCos_59.x * tmpvar_51.x));
      tmpvar_61[2].z = (((tmpvar_60 * tmpvar_51.z) * tmpvar_51.z) + vSinCos_59.y);
      highp mat3 tmpvar_62;
      tmpvar_62 = (tmpvar_48 * tmpvar_61);
      vDirection_24 = (tmpvar_62 * _glesNormal);
      vPos_23 = (normalize((tmpvar_62 * vPos_27)) * tmpvar_44);
    };
    tmpvar_11 = vDirection_24;
    FinalPosition_14 = vPos_23;
  };
  highp vec3 tmpvar_63;
  tmpvar_63 = (FinalPosition_14 + _glesMultiTexCoord1.xyz);
  FinalPosition_14 = tmpvar_63;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_64;
    vPos_64 = tmpvar_63;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_65;
      vPos_65 = tmpvar_63;
      highp float fAdherenceScale_66;
      highp vec3 tmpvar_67;
      tmpvar_67 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_68;
      tmpvar_68 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_69;
      highp float fOscillation_70;
      fOscillation_70 = 1.0;
      highp float fAmount_71;
      highp float fTarget_72;
      highp vec4 tmpvar_73;
      tmpvar_73.x = (tmpvar_68 + _glesMultiTexCoord0.w);
      tmpvar_73.y = ((tmpvar_68 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_73.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_68 + _glesMultiTexCoord0.w));
      tmpvar_73.w = ((tmpvar_68 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_74;
      tmpvar_74 = abs(((
        fract((tmpvar_73 + 0.5))
       * 2.0) - 1.0));
      vOscillations_69 = (((
        (tmpvar_74 * tmpvar_74)
       * 
        (3.0 - (2.0 * tmpvar_74))
      ) - 0.5) * 2.0);
      highp float tmpvar_75;
      tmpvar_75 = (vOscillations_69.y * vOscillations_69.z);
      fTarget_72 = 1.0;
      fAmount_71 = tmpvar_75;
      if ((tmpvar_75 < 0.0)) {
        fTarget_72 = -1.0;
        fAmount_71 = -(tmpvar_75);
      };
      fOscillation_70 = (((
        (mix (mix (tmpvar_75, fTarget_72, fAmount_71), fTarget_72, fAmount_71) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_69.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_69.w * _ST_WindBranchWhip.x)));
      vPos_65 = (tmpvar_63 + ((tmpvar_67 * fOscillation_70) * _ST_WindBranch.y));
      highp vec4 tmpvar_76;
      tmpvar_76.zw = vec2(0.0, 0.0);
      tmpvar_76.x = ((tmpvar_68 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_76.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_77;
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      tmpvar_77 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      fAdherenceScale_66 = (1.0 - ((
        ((tmpvar_77.x * tmpvar_77.y) * tmpvar_77.x)
       * tmpvar_77.y) * _ST_WindTurbulences.x));
      fAdherenceScale_66 = (fAdherenceScale_66 + ((vOscillations_69.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_65 = (vPos_65 + ((
        ((vRotatedBranchAnchor_12 - vPos_65) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_66) * _glesMultiTexCoord0.z));
      vPos_64 = vPos_65;
    } else {
      highp vec3 vPos_79;
      vPos_79 = vPos_64;
      highp vec3 tmpvar_80;
      tmpvar_80 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_81;
      tmpvar_81 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_82;
      highp float fAmount_83;
      highp float fTarget_84;
      highp vec4 tmpvar_85;
      tmpvar_85.w = 0.0;
      tmpvar_85.x = (tmpvar_81 + _glesMultiTexCoord0.w);
      tmpvar_85.y = ((tmpvar_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_85.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_86;
      tmpvar_86 = abs(((
        fract((tmpvar_85 + 0.5))
       * 2.0) - 1.0));
      vOscillations_82 = (((
        (tmpvar_86 * tmpvar_86)
       * 
        (3.0 - (2.0 * tmpvar_86))
      ) - 0.5) * 2.0);
      highp float tmpvar_87;
      tmpvar_87 = (vOscillations_82.y * vOscillations_82.z);
      fTarget_84 = 1.0;
      fAmount_83 = tmpvar_87;
      if ((tmpvar_87 < 0.0)) {
        fTarget_84 = -1.0;
        fAmount_83 = -(tmpvar_87);
      };
      vPos_79 = (vPos_64 + ((tmpvar_80 * 
        (((mix (
          mix (tmpvar_87, fTarget_84, fAmount_83)
        , fTarget_84, fAmount_83) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_82.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_64 = vPos_79;
    };
    FinalPosition_14 = vPos_64;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_88;
    vPos_88 = FinalPosition_14;
    highp float fAdjust_89;
    highp float fLength_90;
    fLength_90 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_91;
    tmpvar_91 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_89 = tmpvar_91;
    if ((tmpvar_91 != 0.0)) {
      fAdjust_89 = pow (tmpvar_91, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_92;
    tmpvar_92.zw = vec2(0.0, 0.0);
    tmpvar_92.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_92.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_93;
    highp vec4 tmpvar_94;
    tmpvar_94 = abs(((
      fract((tmpvar_92 + 0.5))
     * 2.0) - 1.0));
    tmpvar_93 = (((
      (tmpvar_94 * tmpvar_94)
     * 
      (3.0 - (2.0 * tmpvar_94))
    ) - 0.5) * 2.0);
    vPos_88.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * (
      ((_ST_WindGlobal.y * (tmpvar_93.x + (tmpvar_93.y * tmpvar_93.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_89)));
    vPos_88 = (normalize(vPos_88) * fLength_90);
    FinalPosition_14 = vPos_88;
  };
  tmpvar_10.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_95;
  v_95.x = _World2Object[0].x;
  v_95.y = _World2Object[1].x;
  v_95.z = _World2Object[2].x;
  v_95.w = _World2Object[3].x;
  highp vec4 v_96;
  v_96.x = _World2Object[0].y;
  v_96.y = _World2Object[1].y;
  v_96.z = _World2Object[2].y;
  v_96.w = _World2Object[3].y;
  highp vec4 v_97;
  v_97.x = _World2Object[0].z;
  v_97.y = _World2Object[1].z;
  v_97.z = _World2Object[2].z;
  v_97.w = _World2Object[3].z;
  highp vec3 tmpvar_98;
  tmpvar_98 = normalize(((
    (v_95.xyz * tmpvar_11.x)
   + 
    (v_96.xyz * tmpvar_11.y)
  ) + (v_97.xyz * tmpvar_11.z)));
  worldNormal_3 = tmpvar_98;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_99;
  tmpvar_99.w = 1.0;
  tmpvar_99.xyz = worldNormal_3;
  mediump vec4 normal_100;
  normal_100 = tmpvar_99;
  mediump vec3 x2_101;
  mediump vec4 tmpvar_102;
  tmpvar_102 = (normal_100.xyzz * normal_100.yzzx);
  x2_101.x = dot (unity_SHBr, tmpvar_102);
  x2_101.y = dot (unity_SHBg, tmpvar_102);
  x2_101.z = dot (unity_SHBb, tmpvar_102);
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = (x2_101 + (unity_SHC.xyz * (
    (normal_100.x * normal_100.x)
   - 
    (normal_100.y * normal_100.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_12;
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_15;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_4;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_16;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_21 = tmpvar_22;
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.xyz = tmpvar_23;
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (c_20.xyz + (tmpvar_8 * (xlv_TEXCOORD4 + x1_18)));
  c_19.xyz = tmpvar_24;
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_8;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_14 = tmpvar_19;
  if (((tmpvar_16 > 1.0) && (tmpvar_16 < 5.0))) {
    highp float tmpvar_20;
    tmpvar_20 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_21;
    isBestWind_21 = (tmpvar_16 == 4.0);
    bool bLeaf2_22;
    bLeaf2_22 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    highp vec3 vDirection_24;
    vDirection_24 = tmpvar_2;
    highp float tmpvar_25;
    if (bLeaf2_22) {
      tmpvar_25 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_26;
    if (bLeaf2_22) {
      tmpvar_26 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_27;
    highp vec4 tmpvar_28;
    tmpvar_28.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_28.x = (tmpvar_25 + tmpvar_20);
    highp vec4 tmpvar_29;
    tmpvar_29 = abs(((
      fract((tmpvar_28 + 0.5))
     * 2.0) - 1.0));
    vPos_27 = (tmpvar_19 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_26 * (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_24 = tmpvar_2;
    vPos_23 = vPos_27;
    if (isBestWind_21) {
      highp vec3 tmpvar_30;
      tmpvar_30 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_31;
      if (bLeaf2_22) {
        tmpvar_31 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_32;
      if (bLeaf2_22) {
        tmpvar_32 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_33;
      if (bLeaf2_22) {
        tmpvar_33 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_34;
      if (bLeaf2_22) {
        tmpvar_34 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_35;
      if (bLeaf2_22) {
        tmpvar_35 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_35 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_36;
      if (bLeaf2_22) {
        tmpvar_36 = bool(1);
      } else {
        tmpvar_36 = bool(1);
      };
      highp float fTwitch_37;
      highp vec3 vAxis_38;
      highp vec3 tmpvar_39;
      tmpvar_39 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_40;
      tmpvar_40 = ((tmpvar_39.x + tmpvar_39.y) + tmpvar_39.z);
      highp vec4 tmpvar_41;
      tmpvar_41.x = (tmpvar_31 + tmpvar_40);
      tmpvar_41.y = ((tmpvar_31 * 0.75) - tmpvar_40);
      tmpvar_41.z = ((tmpvar_31 * 0.01) + tmpvar_40);
      tmpvar_41.w = (tmpvar_31 + tmpvar_40);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = sqrt(dot (vPos_27, vPos_27));
      highp float fAngle_45;
      fAngle_45 = ((_glesMultiTexCoord2.x * tmpvar_33) * (tmpvar_42.x + (tmpvar_42.y * tmpvar_42.y)));
      highp vec2 vSinCos_46;
      vSinCos_46.x = sin(fAngle_45);
      vSinCos_46.y = cos(fAngle_45);
      highp float tmpvar_47;
      tmpvar_47 = (1.0 - vSinCos_46.y);
      highp mat3 tmpvar_48;
      tmpvar_48[0].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.x) + vSinCos_46.y);
      tmpvar_48[0].y = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.y) + (vSinCos_46.x * tmpvar_30.z));
      tmpvar_48[0].z = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.z) - (vSinCos_46.x * tmpvar_30.y));
      tmpvar_48[1].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.y) - (vSinCos_46.x * tmpvar_30.z));
      tmpvar_48[1].y = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.y) + vSinCos_46.y);
      tmpvar_48[1].z = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.z) + (vSinCos_46.x * tmpvar_30.x));
      tmpvar_48[2].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.z) + (vSinCos_46.x * tmpvar_30.y));
      tmpvar_48[2].y = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.z) - (vSinCos_46.x * tmpvar_30.x));
      tmpvar_48[2].z = (((tmpvar_47 * tmpvar_30.z) * tmpvar_30.z) + vSinCos_46.y);
      highp vec3 tmpvar_49;
      tmpvar_49 = ((tmpvar_30.yzx * vRotatedWindVector_13.zxy) - (tmpvar_30.zxy * vRotatedWindVector_13.yzx));
      vAxis_38.xz = tmpvar_49.xz;
      highp float tmpvar_50;
      tmpvar_50 = clamp (dot (vRotatedWindVector_13, tmpvar_30), -1.0, 1.0);
      vAxis_38.y = (tmpvar_49.y + tmpvar_50);
      highp vec3 tmpvar_51;
      tmpvar_51 = normalize(vAxis_38);
      vAxis_38 = tmpvar_51;
      highp float tmpvar_52;
      tmpvar_52 = (1.570796 - (sign(tmpvar_50) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_50))) * (1.570796 + (abs(tmpvar_50) * (-0.2146018 + 
          (abs(tmpvar_50) * (0.08656672 + (abs(tmpvar_50) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_53;
      tmpvar_53 = (tmpvar_42.y - (tmpvar_42.x * tmpvar_42.x));
      fTwitch_37 = 0.0;
      if (tmpvar_36) {
        highp float fTime_54;
        fTime_54 = (tmpvar_35.z + tmpvar_40);
        highp vec4 tmpvar_55;
        tmpvar_55.zw = vec2(0.0, 0.0);
        tmpvar_55.x = fTime_54;
        tmpvar_55.y = (0.87 * fTime_54);
        highp vec4 tmpvar_56;
        highp vec4 tmpvar_57;
        tmpvar_57 = abs(((
          fract((tmpvar_55 + 0.5))
         * 2.0) - 1.0));
        tmpvar_56 = (((
          (tmpvar_57 * tmpvar_57)
         * 
          (3.0 - (2.0 * tmpvar_57))
        ) - 0.5) * 2.0);
        fTwitch_37 = (tmpvar_35.x * pow (clamp (
          ((((tmpvar_56.x * tmpvar_56.y) * tmpvar_56.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_35.y));
      };
      highp float fAngle_58;
      fAngle_58 = (_glesMultiTexCoord2.x * ((
        (tmpvar_52 * tmpvar_34)
       + 
        (tmpvar_53 * tmpvar_32)
      ) + fTwitch_37));
      highp vec2 vSinCos_59;
      vSinCos_59.x = sin(fAngle_58);
      vSinCos_59.y = cos(fAngle_58);
      highp float tmpvar_60;
      tmpvar_60 = (1.0 - vSinCos_59.y);
      highp mat3 tmpvar_61;
      tmpvar_61[0].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.x) + vSinCos_59.y);
      tmpvar_61[0].y = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.y) + (vSinCos_59.x * tmpvar_51.z));
      tmpvar_61[0].z = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.z) - (vSinCos_59.x * tmpvar_51.y));
      tmpvar_61[1].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.y) - (vSinCos_59.x * tmpvar_51.z));
      tmpvar_61[1].y = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.y) + vSinCos_59.y);
      tmpvar_61[1].z = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.z) + (vSinCos_59.x * tmpvar_51.x));
      tmpvar_61[2].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.z) + (vSinCos_59.x * tmpvar_51.y));
      tmpvar_61[2].y = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.z) - (vSinCos_59.x * tmpvar_51.x));
      tmpvar_61[2].z = (((tmpvar_60 * tmpvar_51.z) * tmpvar_51.z) + vSinCos_59.y);
      highp mat3 tmpvar_62;
      tmpvar_62 = (tmpvar_48 * tmpvar_61);
      vDirection_24 = (tmpvar_62 * _glesNormal);
      vPos_23 = (normalize((tmpvar_62 * vPos_27)) * tmpvar_44);
    };
    tmpvar_11 = vDirection_24;
    FinalPosition_14 = vPos_23;
  };
  highp vec3 tmpvar_63;
  tmpvar_63 = (FinalPosition_14 + _glesMultiTexCoord1.xyz);
  FinalPosition_14 = tmpvar_63;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_64;
    vPos_64 = tmpvar_63;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_65;
      vPos_65 = tmpvar_63;
      highp float fAdherenceScale_66;
      highp vec3 tmpvar_67;
      tmpvar_67 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_68;
      tmpvar_68 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_69;
      highp float fOscillation_70;
      fOscillation_70 = 1.0;
      highp float fAmount_71;
      highp float fTarget_72;
      highp vec4 tmpvar_73;
      tmpvar_73.x = (tmpvar_68 + _glesMultiTexCoord0.w);
      tmpvar_73.y = ((tmpvar_68 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_73.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_68 + _glesMultiTexCoord0.w));
      tmpvar_73.w = ((tmpvar_68 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_74;
      tmpvar_74 = abs(((
        fract((tmpvar_73 + 0.5))
       * 2.0) - 1.0));
      vOscillations_69 = (((
        (tmpvar_74 * tmpvar_74)
       * 
        (3.0 - (2.0 * tmpvar_74))
      ) - 0.5) * 2.0);
      highp float tmpvar_75;
      tmpvar_75 = (vOscillations_69.y * vOscillations_69.z);
      fTarget_72 = 1.0;
      fAmount_71 = tmpvar_75;
      if ((tmpvar_75 < 0.0)) {
        fTarget_72 = -1.0;
        fAmount_71 = -(tmpvar_75);
      };
      fOscillation_70 = (((
        (mix (mix (tmpvar_75, fTarget_72, fAmount_71), fTarget_72, fAmount_71) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_69.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_69.w * _ST_WindBranchWhip.x)));
      vPos_65 = (tmpvar_63 + ((tmpvar_67 * fOscillation_70) * _ST_WindBranch.y));
      highp vec4 tmpvar_76;
      tmpvar_76.zw = vec2(0.0, 0.0);
      tmpvar_76.x = ((tmpvar_68 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_76.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_77;
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      tmpvar_77 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      fAdherenceScale_66 = (1.0 - ((
        ((tmpvar_77.x * tmpvar_77.y) * tmpvar_77.x)
       * tmpvar_77.y) * _ST_WindTurbulences.x));
      fAdherenceScale_66 = (fAdherenceScale_66 + ((vOscillations_69.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_65 = (vPos_65 + ((
        ((vRotatedBranchAnchor_12 - vPos_65) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_66) * _glesMultiTexCoord0.z));
      vPos_64 = vPos_65;
    } else {
      highp vec3 vPos_79;
      vPos_79 = vPos_64;
      highp vec3 tmpvar_80;
      tmpvar_80 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_81;
      tmpvar_81 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_82;
      highp float fAmount_83;
      highp float fTarget_84;
      highp vec4 tmpvar_85;
      tmpvar_85.w = 0.0;
      tmpvar_85.x = (tmpvar_81 + _glesMultiTexCoord0.w);
      tmpvar_85.y = ((tmpvar_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_85.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_86;
      tmpvar_86 = abs(((
        fract((tmpvar_85 + 0.5))
       * 2.0) - 1.0));
      vOscillations_82 = (((
        (tmpvar_86 * tmpvar_86)
       * 
        (3.0 - (2.0 * tmpvar_86))
      ) - 0.5) * 2.0);
      highp float tmpvar_87;
      tmpvar_87 = (vOscillations_82.y * vOscillations_82.z);
      fTarget_84 = 1.0;
      fAmount_83 = tmpvar_87;
      if ((tmpvar_87 < 0.0)) {
        fTarget_84 = -1.0;
        fAmount_83 = -(tmpvar_87);
      };
      vPos_79 = (vPos_64 + ((tmpvar_80 * 
        (((mix (
          mix (tmpvar_87, fTarget_84, fAmount_83)
        , fTarget_84, fAmount_83) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_82.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_64 = vPos_79;
    };
    FinalPosition_14 = vPos_64;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_88;
    vPos_88 = FinalPosition_14;
    highp float fAdjust_89;
    highp float fLength_90;
    fLength_90 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_91;
    tmpvar_91 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_89 = tmpvar_91;
    if ((tmpvar_91 != 0.0)) {
      fAdjust_89 = pow (tmpvar_91, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_92;
    tmpvar_92.zw = vec2(0.0, 0.0);
    tmpvar_92.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_92.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_93;
    highp vec4 tmpvar_94;
    tmpvar_94 = abs(((
      fract((tmpvar_92 + 0.5))
     * 2.0) - 1.0));
    tmpvar_93 = (((
      (tmpvar_94 * tmpvar_94)
     * 
      (3.0 - (2.0 * tmpvar_94))
    ) - 0.5) * 2.0);
    vPos_88.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * (
      ((_ST_WindGlobal.y * (tmpvar_93.x + (tmpvar_93.y * tmpvar_93.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_89)));
    vPos_88 = (normalize(vPos_88) * fLength_90);
    FinalPosition_14 = vPos_88;
  };
  tmpvar_10.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_95;
  v_95.x = _World2Object[0].x;
  v_95.y = _World2Object[1].x;
  v_95.z = _World2Object[2].x;
  v_95.w = _World2Object[3].x;
  highp vec4 v_96;
  v_96.x = _World2Object[0].y;
  v_96.y = _World2Object[1].y;
  v_96.z = _World2Object[2].y;
  v_96.w = _World2Object[3].y;
  highp vec4 v_97;
  v_97.x = _World2Object[0].z;
  v_97.y = _World2Object[1].z;
  v_97.z = _World2Object[2].z;
  v_97.w = _World2Object[3].z;
  highp vec3 tmpvar_98;
  tmpvar_98 = normalize(((
    (v_95.xyz * tmpvar_11.x)
   + 
    (v_96.xyz * tmpvar_11.y)
  ) + (v_97.xyz * tmpvar_11.z)));
  worldNormal_3 = tmpvar_98;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_99;
  tmpvar_99.w = 1.0;
  tmpvar_99.xyz = worldNormal_3;
  mediump vec4 normal_100;
  normal_100 = tmpvar_99;
  mediump vec3 x2_101;
  mediump vec4 tmpvar_102;
  tmpvar_102 = (normal_100.xyzz * normal_100.yzzx);
  x2_101.x = dot (unity_SHBr, tmpvar_102);
  x2_101.y = dot (unity_SHBg, tmpvar_102);
  x2_101.z = dot (unity_SHBb, tmpvar_102);
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = (x2_101 + (unity_SHC.xyz * (
    (normal_100.x * normal_100.x)
   - 
    (normal_100.y * normal_100.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_12;
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_15;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_4;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_16;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_21 = tmpvar_22;
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.xyz = tmpvar_23;
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (c_20.xyz + (tmpvar_8 * (xlv_TEXCOORD4 + x1_18)));
  c_19.xyz = tmpvar_24;
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_9;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_15 = tmpvar_20;
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_17 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (tmpvar_20 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp vec3 tmpvar_40;
      tmpvar_40 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_41;
      tmpvar_41 = ((tmpvar_40.x + tmpvar_40.y) + tmpvar_40.z);
      highp vec4 tmpvar_42;
      tmpvar_42.x = (tmpvar_32 + tmpvar_41);
      tmpvar_42.y = ((tmpvar_32 * 0.75) - tmpvar_41);
      tmpvar_42.z = ((tmpvar_32 * 0.01) + tmpvar_41);
      tmpvar_42.w = (tmpvar_32 + tmpvar_41);
      highp vec4 tmpvar_43;
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      tmpvar_43 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_46;
      fAngle_46 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_43.x + (tmpvar_43.y * tmpvar_43.y)));
      highp vec2 vSinCos_47;
      vSinCos_47.x = sin(fAngle_46);
      vSinCos_47.y = cos(fAngle_46);
      highp float tmpvar_48;
      tmpvar_48 = (1.0 - vSinCos_47.y);
      highp mat3 tmpvar_49;
      tmpvar_49[0].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_47.y);
      tmpvar_49[0].y = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_47.x * tmpvar_31.z));
      tmpvar_49[0].z = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_47.x * tmpvar_31.y));
      tmpvar_49[1].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_47.x * tmpvar_31.z));
      tmpvar_49[1].y = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_47.y);
      tmpvar_49[1].z = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_47.x * tmpvar_31.x));
      tmpvar_49[2].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_47.x * tmpvar_31.y));
      tmpvar_49[2].y = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_47.x * tmpvar_31.x));
      tmpvar_49[2].z = (((tmpvar_48 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_47.y);
      highp vec3 tmpvar_50;
      tmpvar_50 = ((tmpvar_31.yzx * vRotatedWindVector_14.zxy) - (tmpvar_31.zxy * vRotatedWindVector_14.yzx));
      vAxis_39.xz = tmpvar_50.xz;
      highp float tmpvar_51;
      tmpvar_51 = clamp (dot (vRotatedWindVector_14, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_50.y + tmpvar_51);
      highp vec3 tmpvar_52;
      tmpvar_52 = normalize(vAxis_39);
      vAxis_39 = tmpvar_52;
      highp float tmpvar_53;
      tmpvar_53 = (1.570796 - (sign(tmpvar_51) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_51))) * (1.570796 + (abs(tmpvar_51) * (-0.2146018 + 
          (abs(tmpvar_51) * (0.08656672 + (abs(tmpvar_51) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_54;
      tmpvar_54 = (tmpvar_43.y - (tmpvar_43.x * tmpvar_43.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_55;
        fTime_55 = (tmpvar_36.z + tmpvar_41);
        highp vec4 tmpvar_56;
        tmpvar_56.zw = vec2(0.0, 0.0);
        tmpvar_56.x = fTime_55;
        tmpvar_56.y = (0.87 * fTime_55);
        highp vec4 tmpvar_57;
        highp vec4 tmpvar_58;
        tmpvar_58 = abs(((
          fract((tmpvar_56 + 0.5))
         * 2.0) - 1.0));
        tmpvar_57 = (((
          (tmpvar_58 * tmpvar_58)
         * 
          (3.0 - (2.0 * tmpvar_58))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_57.x * tmpvar_57.y) * tmpvar_57.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_59;
      fAngle_59 = (_glesMultiTexCoord2.x * ((
        (tmpvar_53 * tmpvar_35)
       + 
        (tmpvar_54 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_60;
      vSinCos_60.x = sin(fAngle_59);
      vSinCos_60.y = cos(fAngle_59);
      highp float tmpvar_61;
      tmpvar_61 = (1.0 - vSinCos_60.y);
      highp mat3 tmpvar_62;
      tmpvar_62[0].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.x) + vSinCos_60.y);
      tmpvar_62[0].y = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.y) + (vSinCos_60.x * tmpvar_52.z));
      tmpvar_62[0].z = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.z) - (vSinCos_60.x * tmpvar_52.y));
      tmpvar_62[1].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.y) - (vSinCos_60.x * tmpvar_52.z));
      tmpvar_62[1].y = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.y) + vSinCos_60.y);
      tmpvar_62[1].z = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.z) + (vSinCos_60.x * tmpvar_52.x));
      tmpvar_62[2].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.z) + (vSinCos_60.x * tmpvar_52.y));
      tmpvar_62[2].y = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.z) - (vSinCos_60.x * tmpvar_52.x));
      tmpvar_62[2].z = (((tmpvar_61 * tmpvar_52.z) * tmpvar_52.z) + vSinCos_60.y);
      highp mat3 tmpvar_63;
      tmpvar_63 = (tmpvar_49 * tmpvar_62);
      vDirection_25 = (tmpvar_63 * _glesNormal);
      vPos_24 = (normalize((tmpvar_63 * vPos_28)) * tmpvar_45);
    };
    tmpvar_12 = vDirection_25;
    FinalPosition_15 = vPos_24;
  };
  highp vec3 tmpvar_64;
  tmpvar_64 = (FinalPosition_15 + _glesMultiTexCoord1.xyz);
  FinalPosition_15 = tmpvar_64;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = tmpvar_64;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = tmpvar_64;
      highp float fAdherenceScale_67;
      highp vec3 tmpvar_68;
      tmpvar_68 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_69;
      tmpvar_69 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (tmpvar_69 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((tmpvar_69 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_69 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((tmpvar_69 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        (mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_70.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (tmpvar_64 + ((tmpvar_68 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((tmpvar_69 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_67 = (1.0 - ((
        ((tmpvar_78.x * tmpvar_78.y) * tmpvar_78.x)
       * tmpvar_78.y) * _ST_WindTurbulences.x));
      fAdherenceScale_67 = (fAdherenceScale_67 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_13 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_67) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp vec3 tmpvar_81;
      tmpvar_81 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_82;
      tmpvar_82 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_83;
      highp float fAmount_84;
      highp float fTarget_85;
      highp vec4 tmpvar_86;
      tmpvar_86.w = 0.0;
      tmpvar_86.x = (tmpvar_82 + _glesMultiTexCoord0.w);
      tmpvar_86.y = ((tmpvar_82 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_86.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_82 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_87;
      tmpvar_87 = abs(((
        fract((tmpvar_86 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_87 * tmpvar_87)
       * 
        (3.0 - (2.0 * tmpvar_87))
      ) - 0.5) * 2.0);
      highp float tmpvar_88;
      tmpvar_88 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_85 = 1.0;
      fAmount_84 = tmpvar_88;
      if ((tmpvar_88 < 0.0)) {
        fTarget_85 = -1.0;
        fAmount_84 = -(tmpvar_88);
      };
      vPos_80 = (vPos_65 + ((tmpvar_81 * 
        (((mix (
          mix (tmpvar_88, fTarget_85, fAmount_84)
        , fTarget_85, fAmount_84) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_15 = vPos_65;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_89;
    vPos_89 = FinalPosition_15;
    highp float fAdjust_90;
    highp float fLength_91;
    fLength_91 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_92;
    tmpvar_92 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_90 = tmpvar_92;
    if ((tmpvar_92 != 0.0)) {
      fAdjust_90 = pow (tmpvar_92, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_93;
    tmpvar_93.zw = vec2(0.0, 0.0);
    tmpvar_93.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_93.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_94;
    highp vec4 tmpvar_95;
    tmpvar_95 = abs(((
      fract((tmpvar_93 + 0.5))
     * 2.0) - 1.0));
    tmpvar_94 = (((
      (tmpvar_95 * tmpvar_95)
     * 
      (3.0 - (2.0 * tmpvar_95))
    ) - 0.5) * 2.0);
    vPos_89.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_94.x + (tmpvar_94.y * tmpvar_94.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_90)));
    vPos_89 = (normalize(vPos_89) * fLength_91);
    FinalPosition_15 = vPos_89;
  };
  tmpvar_11.xyz = FinalPosition_15;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_96;
  v_96.x = _World2Object[0].x;
  v_96.y = _World2Object[1].x;
  v_96.z = _World2Object[2].x;
  v_96.w = _World2Object[3].x;
  highp vec4 v_97;
  v_97.x = _World2Object[0].y;
  v_97.y = _World2Object[1].y;
  v_97.z = _World2Object[2].y;
  v_97.w = _World2Object[3].y;
  highp vec4 v_98;
  v_98.x = _World2Object[0].z;
  v_98.y = _World2Object[1].z;
  v_98.z = _World2Object[2].z;
  v_98.w = _World2Object[3].z;
  highp vec3 tmpvar_99;
  tmpvar_99 = normalize(((
    (v_96.xyz * tmpvar_12.x)
   + 
    (v_97.xyz * tmpvar_12.y)
  ) + (v_98.xyz * tmpvar_12.z)));
  worldNormal_3 = tmpvar_99;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_100;
  tmpvar_100.w = 1.0;
  tmpvar_100.xyz = worldNormal_3;
  mediump vec4 normal_101;
  normal_101 = tmpvar_100;
  mediump vec3 x2_102;
  mediump vec4 tmpvar_103;
  tmpvar_103 = (normal_101.xyzz * normal_101.yzzx);
  x2_102.x = dot (unity_SHBr, tmpvar_103);
  x2_102.y = dot (unity_SHBg, tmpvar_103);
  x2_102.z = dot (unity_SHBb, tmpvar_103);
  highp vec4 tmpvar_104;
  tmpvar_104 = (unity_World2Shadow[0] * (_Object2World * tmpvar_11));
  tmpvar_6 = tmpvar_104;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = (x2_102 + (unity_SHC.xyz * (
    (normal_101.x * normal_101.x)
   - 
    (normal_101.y * normal_101.y)
  )));
  xlv_TEXCOORD5 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_15;
  lowp float tmpvar_16;
  mediump float dist_17;
  lowp float tmpvar_18;
  tmpvar_18 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x;
  dist_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (float((dist_17 > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_16 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_20;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_16;
  mediump vec3 normalWorld_21;
  normalWorld_21 = tmpvar_5;
  mediump vec3 tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_21;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  tmpvar_22 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_27 = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_9 * tmpvar_22) * diff_27);
  c_26.xyz = tmpvar_29;
  c_26.w = tmpvar_10;
  c_25.w = c_26.w;
  mediump vec3 tmpvar_30;
  tmpvar_30 = (c_26.xyz + (tmpvar_9 * (xlv_TEXCOORD4 + x1_24)));
  c_25.xyz = tmpvar_30;
  c_4.xyz = c_25.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_9;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_15 = tmpvar_20;
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_17 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (tmpvar_20 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp vec3 tmpvar_40;
      tmpvar_40 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_41;
      tmpvar_41 = ((tmpvar_40.x + tmpvar_40.y) + tmpvar_40.z);
      highp vec4 tmpvar_42;
      tmpvar_42.x = (tmpvar_32 + tmpvar_41);
      tmpvar_42.y = ((tmpvar_32 * 0.75) - tmpvar_41);
      tmpvar_42.z = ((tmpvar_32 * 0.01) + tmpvar_41);
      tmpvar_42.w = (tmpvar_32 + tmpvar_41);
      highp vec4 tmpvar_43;
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      tmpvar_43 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_46;
      fAngle_46 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_43.x + (tmpvar_43.y * tmpvar_43.y)));
      highp vec2 vSinCos_47;
      vSinCos_47.x = sin(fAngle_46);
      vSinCos_47.y = cos(fAngle_46);
      highp float tmpvar_48;
      tmpvar_48 = (1.0 - vSinCos_47.y);
      highp mat3 tmpvar_49;
      tmpvar_49[0].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_47.y);
      tmpvar_49[0].y = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_47.x * tmpvar_31.z));
      tmpvar_49[0].z = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_47.x * tmpvar_31.y));
      tmpvar_49[1].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_47.x * tmpvar_31.z));
      tmpvar_49[1].y = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_47.y);
      tmpvar_49[1].z = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_47.x * tmpvar_31.x));
      tmpvar_49[2].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_47.x * tmpvar_31.y));
      tmpvar_49[2].y = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_47.x * tmpvar_31.x));
      tmpvar_49[2].z = (((tmpvar_48 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_47.y);
      highp vec3 tmpvar_50;
      tmpvar_50 = ((tmpvar_31.yzx * vRotatedWindVector_14.zxy) - (tmpvar_31.zxy * vRotatedWindVector_14.yzx));
      vAxis_39.xz = tmpvar_50.xz;
      highp float tmpvar_51;
      tmpvar_51 = clamp (dot (vRotatedWindVector_14, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_50.y + tmpvar_51);
      highp vec3 tmpvar_52;
      tmpvar_52 = normalize(vAxis_39);
      vAxis_39 = tmpvar_52;
      highp float tmpvar_53;
      tmpvar_53 = (1.570796 - (sign(tmpvar_51) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_51))) * (1.570796 + (abs(tmpvar_51) * (-0.2146018 + 
          (abs(tmpvar_51) * (0.08656672 + (abs(tmpvar_51) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_54;
      tmpvar_54 = (tmpvar_43.y - (tmpvar_43.x * tmpvar_43.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_55;
        fTime_55 = (tmpvar_36.z + tmpvar_41);
        highp vec4 tmpvar_56;
        tmpvar_56.zw = vec2(0.0, 0.0);
        tmpvar_56.x = fTime_55;
        tmpvar_56.y = (0.87 * fTime_55);
        highp vec4 tmpvar_57;
        highp vec4 tmpvar_58;
        tmpvar_58 = abs(((
          fract((tmpvar_56 + 0.5))
         * 2.0) - 1.0));
        tmpvar_57 = (((
          (tmpvar_58 * tmpvar_58)
         * 
          (3.0 - (2.0 * tmpvar_58))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_57.x * tmpvar_57.y) * tmpvar_57.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_59;
      fAngle_59 = (_glesMultiTexCoord2.x * ((
        (tmpvar_53 * tmpvar_35)
       + 
        (tmpvar_54 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_60;
      vSinCos_60.x = sin(fAngle_59);
      vSinCos_60.y = cos(fAngle_59);
      highp float tmpvar_61;
      tmpvar_61 = (1.0 - vSinCos_60.y);
      highp mat3 tmpvar_62;
      tmpvar_62[0].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.x) + vSinCos_60.y);
      tmpvar_62[0].y = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.y) + (vSinCos_60.x * tmpvar_52.z));
      tmpvar_62[0].z = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.z) - (vSinCos_60.x * tmpvar_52.y));
      tmpvar_62[1].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.y) - (vSinCos_60.x * tmpvar_52.z));
      tmpvar_62[1].y = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.y) + vSinCos_60.y);
      tmpvar_62[1].z = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.z) + (vSinCos_60.x * tmpvar_52.x));
      tmpvar_62[2].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.z) + (vSinCos_60.x * tmpvar_52.y));
      tmpvar_62[2].y = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.z) - (vSinCos_60.x * tmpvar_52.x));
      tmpvar_62[2].z = (((tmpvar_61 * tmpvar_52.z) * tmpvar_52.z) + vSinCos_60.y);
      highp mat3 tmpvar_63;
      tmpvar_63 = (tmpvar_49 * tmpvar_62);
      vDirection_25 = (tmpvar_63 * _glesNormal);
      vPos_24 = (normalize((tmpvar_63 * vPos_28)) * tmpvar_45);
    };
    tmpvar_12 = vDirection_25;
    FinalPosition_15 = vPos_24;
  };
  highp vec3 tmpvar_64;
  tmpvar_64 = (FinalPosition_15 + _glesMultiTexCoord1.xyz);
  FinalPosition_15 = tmpvar_64;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = tmpvar_64;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = tmpvar_64;
      highp float fAdherenceScale_67;
      highp vec3 tmpvar_68;
      tmpvar_68 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_69;
      tmpvar_69 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (tmpvar_69 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((tmpvar_69 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_69 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((tmpvar_69 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        (mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_70.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (tmpvar_64 + ((tmpvar_68 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((tmpvar_69 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_67 = (1.0 - ((
        ((tmpvar_78.x * tmpvar_78.y) * tmpvar_78.x)
       * tmpvar_78.y) * _ST_WindTurbulences.x));
      fAdherenceScale_67 = (fAdherenceScale_67 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_13 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_67) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp vec3 tmpvar_81;
      tmpvar_81 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_82;
      tmpvar_82 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_83;
      highp float fAmount_84;
      highp float fTarget_85;
      highp vec4 tmpvar_86;
      tmpvar_86.w = 0.0;
      tmpvar_86.x = (tmpvar_82 + _glesMultiTexCoord0.w);
      tmpvar_86.y = ((tmpvar_82 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_86.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_82 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_87;
      tmpvar_87 = abs(((
        fract((tmpvar_86 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_87 * tmpvar_87)
       * 
        (3.0 - (2.0 * tmpvar_87))
      ) - 0.5) * 2.0);
      highp float tmpvar_88;
      tmpvar_88 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_85 = 1.0;
      fAmount_84 = tmpvar_88;
      if ((tmpvar_88 < 0.0)) {
        fTarget_85 = -1.0;
        fAmount_84 = -(tmpvar_88);
      };
      vPos_80 = (vPos_65 + ((tmpvar_81 * 
        (((mix (
          mix (tmpvar_88, fTarget_85, fAmount_84)
        , fTarget_85, fAmount_84) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_15 = vPos_65;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_89;
    vPos_89 = FinalPosition_15;
    highp float fAdjust_90;
    highp float fLength_91;
    fLength_91 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_92;
    tmpvar_92 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_90 = tmpvar_92;
    if ((tmpvar_92 != 0.0)) {
      fAdjust_90 = pow (tmpvar_92, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_93;
    tmpvar_93.zw = vec2(0.0, 0.0);
    tmpvar_93.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_93.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_94;
    highp vec4 tmpvar_95;
    tmpvar_95 = abs(((
      fract((tmpvar_93 + 0.5))
     * 2.0) - 1.0));
    tmpvar_94 = (((
      (tmpvar_95 * tmpvar_95)
     * 
      (3.0 - (2.0 * tmpvar_95))
    ) - 0.5) * 2.0);
    vPos_89.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_94.x + (tmpvar_94.y * tmpvar_94.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_90)));
    vPos_89 = (normalize(vPos_89) * fLength_91);
    FinalPosition_15 = vPos_89;
  };
  tmpvar_11.xyz = FinalPosition_15;
  tmpvar_5 = tmpvar_7;
  highp vec3 tmpvar_96;
  tmpvar_96 = (_Object2World * tmpvar_11).xyz;
  highp vec4 v_97;
  v_97.x = _World2Object[0].x;
  v_97.y = _World2Object[1].x;
  v_97.z = _World2Object[2].x;
  v_97.w = _World2Object[3].x;
  highp vec4 v_98;
  v_98.x = _World2Object[0].y;
  v_98.y = _World2Object[1].y;
  v_98.z = _World2Object[2].y;
  v_98.w = _World2Object[3].y;
  highp vec4 v_99;
  v_99.x = _World2Object[0].z;
  v_99.y = _World2Object[1].z;
  v_99.z = _World2Object[2].z;
  v_99.w = _World2Object[3].z;
  highp vec3 tmpvar_100;
  tmpvar_100 = normalize(((
    (v_97.xyz * tmpvar_12.x)
   + 
    (v_98.xyz * tmpvar_12.y)
  ) + (v_99.xyz * tmpvar_12.z)));
  worldNormal_3 = tmpvar_100;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_101;
  tmpvar_101.w = 1.0;
  tmpvar_101.xyz = worldNormal_3;
  mediump vec3 tmpvar_102;
  mediump vec4 normal_103;
  normal_103 = tmpvar_101;
  mediump vec3 x2_104;
  mediump vec4 tmpvar_105;
  tmpvar_105 = (normal_103.xyzz * normal_103.yzzx);
  x2_104.x = dot (unity_SHBr, tmpvar_105);
  x2_104.y = dot (unity_SHBg, tmpvar_105);
  x2_104.z = dot (unity_SHBb, tmpvar_105);
  tmpvar_102 = (x2_104 + (unity_SHC.xyz * (
    (normal_103.x * normal_103.x)
   - 
    (normal_103.y * normal_103.y)
  )));
  highp vec3 lightColor0_106;
  lightColor0_106 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_107;
  lightColor1_107 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_108;
  lightColor2_108 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_109;
  lightColor3_109 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_110;
  lightAttenSq_110 = unity_4LightAtten0;
  highp vec3 normal_111;
  normal_111 = worldNormal_3;
  highp vec4 tmpvar_112;
  tmpvar_112 = (unity_4LightPosX0 - tmpvar_96.x);
  highp vec4 tmpvar_113;
  tmpvar_113 = (unity_4LightPosY0 - tmpvar_96.y);
  highp vec4 tmpvar_114;
  tmpvar_114 = (unity_4LightPosZ0 - tmpvar_96.z);
  highp vec4 tmpvar_115;
  tmpvar_115 = (((tmpvar_112 * tmpvar_112) + (tmpvar_113 * tmpvar_113)) + (tmpvar_114 * tmpvar_114));
  highp vec4 tmpvar_116;
  tmpvar_116 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_112 * normal_111.x) + (tmpvar_113 * normal_111.y)) + (tmpvar_114 * normal_111.z))
   * 
    inversesqrt(tmpvar_115)
  )) * (1.0/((1.0 + 
    (tmpvar_115 * lightAttenSq_110)
  ))));
  highp vec3 tmpvar_117;
  tmpvar_117 = (tmpvar_102 + ((
    ((lightColor0_106 * tmpvar_116.x) + (lightColor1_107 * tmpvar_116.y))
   + 
    (lightColor2_108 * tmpvar_116.z)
  ) + (lightColor3_109 * tmpvar_116.w)));
  tmpvar_6 = tmpvar_117;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_96;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_12;
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_15;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_4;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_16;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_21 = tmpvar_22;
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.xyz = tmpvar_23;
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (c_20.xyz + (tmpvar_8 * (xlv_TEXCOORD4 + x1_18)));
  c_19.xyz = tmpvar_24;
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_9;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_15 = tmpvar_20;
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_17 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (tmpvar_20 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp vec3 tmpvar_40;
      tmpvar_40 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_41;
      tmpvar_41 = ((tmpvar_40.x + tmpvar_40.y) + tmpvar_40.z);
      highp vec4 tmpvar_42;
      tmpvar_42.x = (tmpvar_32 + tmpvar_41);
      tmpvar_42.y = ((tmpvar_32 * 0.75) - tmpvar_41);
      tmpvar_42.z = ((tmpvar_32 * 0.01) + tmpvar_41);
      tmpvar_42.w = (tmpvar_32 + tmpvar_41);
      highp vec4 tmpvar_43;
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      tmpvar_43 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_46;
      fAngle_46 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_43.x + (tmpvar_43.y * tmpvar_43.y)));
      highp vec2 vSinCos_47;
      vSinCos_47.x = sin(fAngle_46);
      vSinCos_47.y = cos(fAngle_46);
      highp float tmpvar_48;
      tmpvar_48 = (1.0 - vSinCos_47.y);
      highp mat3 tmpvar_49;
      tmpvar_49[0].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_47.y);
      tmpvar_49[0].y = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_47.x * tmpvar_31.z));
      tmpvar_49[0].z = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_47.x * tmpvar_31.y));
      tmpvar_49[1].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_47.x * tmpvar_31.z));
      tmpvar_49[1].y = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_47.y);
      tmpvar_49[1].z = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_47.x * tmpvar_31.x));
      tmpvar_49[2].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_47.x * tmpvar_31.y));
      tmpvar_49[2].y = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_47.x * tmpvar_31.x));
      tmpvar_49[2].z = (((tmpvar_48 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_47.y);
      highp vec3 tmpvar_50;
      tmpvar_50 = ((tmpvar_31.yzx * vRotatedWindVector_14.zxy) - (tmpvar_31.zxy * vRotatedWindVector_14.yzx));
      vAxis_39.xz = tmpvar_50.xz;
      highp float tmpvar_51;
      tmpvar_51 = clamp (dot (vRotatedWindVector_14, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_50.y + tmpvar_51);
      highp vec3 tmpvar_52;
      tmpvar_52 = normalize(vAxis_39);
      vAxis_39 = tmpvar_52;
      highp float tmpvar_53;
      tmpvar_53 = (1.570796 - (sign(tmpvar_51) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_51))) * (1.570796 + (abs(tmpvar_51) * (-0.2146018 + 
          (abs(tmpvar_51) * (0.08656672 + (abs(tmpvar_51) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_54;
      tmpvar_54 = (tmpvar_43.y - (tmpvar_43.x * tmpvar_43.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_55;
        fTime_55 = (tmpvar_36.z + tmpvar_41);
        highp vec4 tmpvar_56;
        tmpvar_56.zw = vec2(0.0, 0.0);
        tmpvar_56.x = fTime_55;
        tmpvar_56.y = (0.87 * fTime_55);
        highp vec4 tmpvar_57;
        highp vec4 tmpvar_58;
        tmpvar_58 = abs(((
          fract((tmpvar_56 + 0.5))
         * 2.0) - 1.0));
        tmpvar_57 = (((
          (tmpvar_58 * tmpvar_58)
         * 
          (3.0 - (2.0 * tmpvar_58))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_57.x * tmpvar_57.y) * tmpvar_57.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_59;
      fAngle_59 = (_glesMultiTexCoord2.x * ((
        (tmpvar_53 * tmpvar_35)
       + 
        (tmpvar_54 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_60;
      vSinCos_60.x = sin(fAngle_59);
      vSinCos_60.y = cos(fAngle_59);
      highp float tmpvar_61;
      tmpvar_61 = (1.0 - vSinCos_60.y);
      highp mat3 tmpvar_62;
      tmpvar_62[0].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.x) + vSinCos_60.y);
      tmpvar_62[0].y = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.y) + (vSinCos_60.x * tmpvar_52.z));
      tmpvar_62[0].z = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.z) - (vSinCos_60.x * tmpvar_52.y));
      tmpvar_62[1].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.y) - (vSinCos_60.x * tmpvar_52.z));
      tmpvar_62[1].y = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.y) + vSinCos_60.y);
      tmpvar_62[1].z = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.z) + (vSinCos_60.x * tmpvar_52.x));
      tmpvar_62[2].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.z) + (vSinCos_60.x * tmpvar_52.y));
      tmpvar_62[2].y = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.z) - (vSinCos_60.x * tmpvar_52.x));
      tmpvar_62[2].z = (((tmpvar_61 * tmpvar_52.z) * tmpvar_52.z) + vSinCos_60.y);
      highp mat3 tmpvar_63;
      tmpvar_63 = (tmpvar_49 * tmpvar_62);
      vDirection_25 = (tmpvar_63 * _glesNormal);
      vPos_24 = (normalize((tmpvar_63 * vPos_28)) * tmpvar_45);
    };
    tmpvar_12 = vDirection_25;
    FinalPosition_15 = vPos_24;
  };
  highp vec3 tmpvar_64;
  tmpvar_64 = (FinalPosition_15 + _glesMultiTexCoord1.xyz);
  FinalPosition_15 = tmpvar_64;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = tmpvar_64;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = tmpvar_64;
      highp float fAdherenceScale_67;
      highp vec3 tmpvar_68;
      tmpvar_68 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_69;
      tmpvar_69 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (tmpvar_69 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((tmpvar_69 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_69 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((tmpvar_69 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        (mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_70.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (tmpvar_64 + ((tmpvar_68 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((tmpvar_69 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_67 = (1.0 - ((
        ((tmpvar_78.x * tmpvar_78.y) * tmpvar_78.x)
       * tmpvar_78.y) * _ST_WindTurbulences.x));
      fAdherenceScale_67 = (fAdherenceScale_67 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_13 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_67) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp vec3 tmpvar_81;
      tmpvar_81 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_82;
      tmpvar_82 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_83;
      highp float fAmount_84;
      highp float fTarget_85;
      highp vec4 tmpvar_86;
      tmpvar_86.w = 0.0;
      tmpvar_86.x = (tmpvar_82 + _glesMultiTexCoord0.w);
      tmpvar_86.y = ((tmpvar_82 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_86.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_82 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_87;
      tmpvar_87 = abs(((
        fract((tmpvar_86 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_87 * tmpvar_87)
       * 
        (3.0 - (2.0 * tmpvar_87))
      ) - 0.5) * 2.0);
      highp float tmpvar_88;
      tmpvar_88 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_85 = 1.0;
      fAmount_84 = tmpvar_88;
      if ((tmpvar_88 < 0.0)) {
        fTarget_85 = -1.0;
        fAmount_84 = -(tmpvar_88);
      };
      vPos_80 = (vPos_65 + ((tmpvar_81 * 
        (((mix (
          mix (tmpvar_88, fTarget_85, fAmount_84)
        , fTarget_85, fAmount_84) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_15 = vPos_65;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_89;
    vPos_89 = FinalPosition_15;
    highp float fAdjust_90;
    highp float fLength_91;
    fLength_91 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_92;
    tmpvar_92 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_90 = tmpvar_92;
    if ((tmpvar_92 != 0.0)) {
      fAdjust_90 = pow (tmpvar_92, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_93;
    tmpvar_93.zw = vec2(0.0, 0.0);
    tmpvar_93.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_93.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_94;
    highp vec4 tmpvar_95;
    tmpvar_95 = abs(((
      fract((tmpvar_93 + 0.5))
     * 2.0) - 1.0));
    tmpvar_94 = (((
      (tmpvar_95 * tmpvar_95)
     * 
      (3.0 - (2.0 * tmpvar_95))
    ) - 0.5) * 2.0);
    vPos_89.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_94.x + (tmpvar_94.y * tmpvar_94.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_90)));
    vPos_89 = (normalize(vPos_89) * fLength_91);
    FinalPosition_15 = vPos_89;
  };
  tmpvar_11.xyz = FinalPosition_15;
  tmpvar_5 = tmpvar_7;
  highp vec3 tmpvar_96;
  tmpvar_96 = (_Object2World * tmpvar_11).xyz;
  highp vec4 v_97;
  v_97.x = _World2Object[0].x;
  v_97.y = _World2Object[1].x;
  v_97.z = _World2Object[2].x;
  v_97.w = _World2Object[3].x;
  highp vec4 v_98;
  v_98.x = _World2Object[0].y;
  v_98.y = _World2Object[1].y;
  v_98.z = _World2Object[2].y;
  v_98.w = _World2Object[3].y;
  highp vec4 v_99;
  v_99.x = _World2Object[0].z;
  v_99.y = _World2Object[1].z;
  v_99.z = _World2Object[2].z;
  v_99.w = _World2Object[3].z;
  highp vec3 tmpvar_100;
  tmpvar_100 = normalize(((
    (v_97.xyz * tmpvar_12.x)
   + 
    (v_98.xyz * tmpvar_12.y)
  ) + (v_99.xyz * tmpvar_12.z)));
  worldNormal_3 = tmpvar_100;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_101;
  tmpvar_101.w = 1.0;
  tmpvar_101.xyz = worldNormal_3;
  mediump vec3 tmpvar_102;
  mediump vec4 normal_103;
  normal_103 = tmpvar_101;
  mediump vec3 x2_104;
  mediump vec4 tmpvar_105;
  tmpvar_105 = (normal_103.xyzz * normal_103.yzzx);
  x2_104.x = dot (unity_SHBr, tmpvar_105);
  x2_104.y = dot (unity_SHBg, tmpvar_105);
  x2_104.z = dot (unity_SHBb, tmpvar_105);
  tmpvar_102 = (x2_104 + (unity_SHC.xyz * (
    (normal_103.x * normal_103.x)
   - 
    (normal_103.y * normal_103.y)
  )));
  highp vec3 lightColor0_106;
  lightColor0_106 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_107;
  lightColor1_107 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_108;
  lightColor2_108 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_109;
  lightColor3_109 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_110;
  lightAttenSq_110 = unity_4LightAtten0;
  highp vec3 normal_111;
  normal_111 = worldNormal_3;
  highp vec4 tmpvar_112;
  tmpvar_112 = (unity_4LightPosX0 - tmpvar_96.x);
  highp vec4 tmpvar_113;
  tmpvar_113 = (unity_4LightPosY0 - tmpvar_96.y);
  highp vec4 tmpvar_114;
  tmpvar_114 = (unity_4LightPosZ0 - tmpvar_96.z);
  highp vec4 tmpvar_115;
  tmpvar_115 = (((tmpvar_112 * tmpvar_112) + (tmpvar_113 * tmpvar_113)) + (tmpvar_114 * tmpvar_114));
  highp vec4 tmpvar_116;
  tmpvar_116 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_112 * normal_111.x) + (tmpvar_113 * normal_111.y)) + (tmpvar_114 * normal_111.z))
   * 
    inversesqrt(tmpvar_115)
  )) * (1.0/((1.0 + 
    (tmpvar_115 * lightAttenSq_110)
  ))));
  highp vec3 tmpvar_117;
  tmpvar_117 = (tmpvar_102 + ((
    ((lightColor0_106 * tmpvar_116.x) + (lightColor1_107 * tmpvar_116.y))
   + 
    (lightColor2_108 * tmpvar_116.z)
  ) + (lightColor3_109 * tmpvar_116.w)));
  tmpvar_6 = tmpvar_117;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_96;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_6;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_12;
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_15;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_4;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_16;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_21 = tmpvar_22;
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.xyz = tmpvar_23;
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (c_20.xyz + (tmpvar_8 * (xlv_TEXCOORD4 + x1_18)));
  c_19.xyz = tmpvar_24;
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_10;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_16 = tmpvar_21;
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_22;
    tmpvar_22 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_23;
    isBestWind_23 = (tmpvar_18 == 4.0);
    bool bLeaf2_24;
    bLeaf2_24 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    highp vec3 vDirection_26;
    vDirection_26 = tmpvar_2;
    highp float tmpvar_27;
    if (bLeaf2_24) {
      tmpvar_27 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_28;
    if (bLeaf2_24) {
      tmpvar_28 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_29;
    highp vec4 tmpvar_30;
    tmpvar_30.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_30.x = (tmpvar_27 + tmpvar_22);
    highp vec4 tmpvar_31;
    tmpvar_31 = abs(((
      fract((tmpvar_30 + 0.5))
     * 2.0) - 1.0));
    vPos_29 = (tmpvar_21 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_28 * (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_26 = tmpvar_2;
    vPos_25 = vPos_29;
    if (isBestWind_23) {
      highp vec3 tmpvar_32;
      tmpvar_32 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_33;
      if (bLeaf2_24) {
        tmpvar_33 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_34;
      if (bLeaf2_24) {
        tmpvar_34 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_35;
      if (bLeaf2_24) {
        tmpvar_35 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_36;
      if (bLeaf2_24) {
        tmpvar_36 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_37;
      if (bLeaf2_24) {
        tmpvar_37 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_37 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_38;
      if (bLeaf2_24) {
        tmpvar_38 = bool(1);
      } else {
        tmpvar_38 = bool(1);
      };
      highp float fTwitch_39;
      highp vec3 vAxis_40;
      highp vec3 tmpvar_41;
      tmpvar_41 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_42;
      tmpvar_42 = ((tmpvar_41.x + tmpvar_41.y) + tmpvar_41.z);
      highp vec4 tmpvar_43;
      tmpvar_43.x = (tmpvar_33 + tmpvar_42);
      tmpvar_43.y = ((tmpvar_33 * 0.75) - tmpvar_42);
      tmpvar_43.z = ((tmpvar_33 * 0.01) + tmpvar_42);
      tmpvar_43.w = (tmpvar_33 + tmpvar_42);
      highp vec4 tmpvar_44;
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      tmpvar_44 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = sqrt(dot (vPos_29, vPos_29));
      highp float fAngle_47;
      fAngle_47 = ((_glesMultiTexCoord2.x * tmpvar_35) * (tmpvar_44.x + (tmpvar_44.y * tmpvar_44.y)));
      highp vec2 vSinCos_48;
      vSinCos_48.x = sin(fAngle_47);
      vSinCos_48.y = cos(fAngle_47);
      highp float tmpvar_49;
      tmpvar_49 = (1.0 - vSinCos_48.y);
      highp mat3 tmpvar_50;
      tmpvar_50[0].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.x) + vSinCos_48.y);
      tmpvar_50[0].y = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.y) + (vSinCos_48.x * tmpvar_32.z));
      tmpvar_50[0].z = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.z) - (vSinCos_48.x * tmpvar_32.y));
      tmpvar_50[1].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.y) - (vSinCos_48.x * tmpvar_32.z));
      tmpvar_50[1].y = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.y) + vSinCos_48.y);
      tmpvar_50[1].z = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.z) + (vSinCos_48.x * tmpvar_32.x));
      tmpvar_50[2].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.z) + (vSinCos_48.x * tmpvar_32.y));
      tmpvar_50[2].y = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.z) - (vSinCos_48.x * tmpvar_32.x));
      tmpvar_50[2].z = (((tmpvar_49 * tmpvar_32.z) * tmpvar_32.z) + vSinCos_48.y);
      highp vec3 tmpvar_51;
      tmpvar_51 = ((tmpvar_32.yzx * vRotatedWindVector_15.zxy) - (tmpvar_32.zxy * vRotatedWindVector_15.yzx));
      vAxis_40.xz = tmpvar_51.xz;
      highp float tmpvar_52;
      tmpvar_52 = clamp (dot (vRotatedWindVector_15, tmpvar_32), -1.0, 1.0);
      vAxis_40.y = (tmpvar_51.y + tmpvar_52);
      highp vec3 tmpvar_53;
      tmpvar_53 = normalize(vAxis_40);
      vAxis_40 = tmpvar_53;
      highp float tmpvar_54;
      tmpvar_54 = (1.570796 - (sign(tmpvar_52) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_52))) * (1.570796 + (abs(tmpvar_52) * (-0.2146018 + 
          (abs(tmpvar_52) * (0.08656672 + (abs(tmpvar_52) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_55;
      tmpvar_55 = (tmpvar_44.y - (tmpvar_44.x * tmpvar_44.x));
      fTwitch_39 = 0.0;
      if (tmpvar_38) {
        highp float fTime_56;
        fTime_56 = (tmpvar_37.z + tmpvar_42);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_39 = (tmpvar_37.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_37.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_54 * tmpvar_36)
       + 
        (tmpvar_55 * tmpvar_34)
      ) + fTwitch_39));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.y) + (vSinCos_61.x * tmpvar_53.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.z) - (vSinCos_61.x * tmpvar_53.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.y) - (vSinCos_61.x * tmpvar_53.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.z) + (vSinCos_61.x * tmpvar_53.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.z) + (vSinCos_61.x * tmpvar_53.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.z) - (vSinCos_61.x * tmpvar_53.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_53.z) * tmpvar_53.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_50 * tmpvar_63);
      vDirection_26 = (tmpvar_64 * _glesNormal);
      vPos_25 = (normalize((tmpvar_64 * vPos_29)) * tmpvar_46);
    };
    tmpvar_13 = vDirection_26;
    FinalPosition_16 = vPos_25;
  };
  highp vec3 tmpvar_65;
  tmpvar_65 = (FinalPosition_16 + _glesMultiTexCoord1.xyz);
  FinalPosition_16 = tmpvar_65;
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_66;
    vPos_66 = tmpvar_65;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_67;
      vPos_67 = tmpvar_65;
      highp float fAdherenceScale_68;
      highp vec3 tmpvar_69;
      tmpvar_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_70;
      tmpvar_70 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_71;
      highp float fOscillation_72;
      fOscillation_72 = 1.0;
      highp float fAmount_73;
      highp float fTarget_74;
      highp vec4 tmpvar_75;
      tmpvar_75.x = (tmpvar_70 + _glesMultiTexCoord0.w);
      tmpvar_75.y = ((tmpvar_70 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_75.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_70 + _glesMultiTexCoord0.w));
      tmpvar_75.w = ((tmpvar_70 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      vOscillations_71 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      highp float tmpvar_77;
      tmpvar_77 = (vOscillations_71.y * vOscillations_71.z);
      fTarget_74 = 1.0;
      fAmount_73 = tmpvar_77;
      if ((tmpvar_77 < 0.0)) {
        fTarget_74 = -1.0;
        fAmount_73 = -(tmpvar_77);
      };
      fOscillation_72 = (((
        (mix (mix (tmpvar_77, fTarget_74, fAmount_73), fTarget_74, fAmount_73) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_71.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_71.w * _ST_WindBranchWhip.x)));
      vPos_67 = (tmpvar_65 + ((tmpvar_69 * fOscillation_72) * _ST_WindBranch.y));
      highp vec4 tmpvar_78;
      tmpvar_78.zw = vec2(0.0, 0.0);
      tmpvar_78.x = ((tmpvar_70 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_78.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_79;
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      tmpvar_79 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((
        ((tmpvar_79.x * tmpvar_79.y) * tmpvar_79.x)
       * tmpvar_79.y) * _ST_WindTurbulences.x));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_71.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_67 = (vPos_67 + ((
        ((vRotatedBranchAnchor_14 - vPos_67) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_66 = vPos_67;
    } else {
      highp vec3 vPos_81;
      vPos_81 = vPos_66;
      highp vec3 tmpvar_82;
      tmpvar_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_83;
      tmpvar_83 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_84;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (tmpvar_83 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((tmpvar_83 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_83 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_84 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_84.y * vOscillations_84.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      vPos_81 = (vPos_66 + ((tmpvar_82 * 
        (((mix (
          mix (tmpvar_89, fTarget_86, fAmount_85)
        , fTarget_86, fAmount_85) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_84.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_66 = vPos_81;
    };
    FinalPosition_16 = vPos_66;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = FinalPosition_16;
    highp float fAdjust_91;
    highp float fLength_92;
    fLength_92 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_93;
    tmpvar_93 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_91 = tmpvar_93;
    if ((tmpvar_93 != 0.0)) {
      fAdjust_91 = pow (tmpvar_93, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_94;
    tmpvar_94.zw = vec2(0.0, 0.0);
    tmpvar_94.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_94.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_95;
    highp vec4 tmpvar_96;
    tmpvar_96 = abs(((
      fract((tmpvar_94 + 0.5))
     * 2.0) - 1.0));
    tmpvar_95 = (((
      (tmpvar_96 * tmpvar_96)
     * 
      (3.0 - (2.0 * tmpvar_96))
    ) - 0.5) * 2.0);
    vPos_90.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_95.x + (tmpvar_95.y * tmpvar_95.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_91)));
    vPos_90 = (normalize(vPos_90) * fLength_92);
    FinalPosition_16 = vPos_90;
  };
  tmpvar_12.xyz = FinalPosition_16;
  tmpvar_5 = tmpvar_8;
  highp vec3 tmpvar_97;
  tmpvar_97 = (_Object2World * tmpvar_12).xyz;
  highp vec4 v_98;
  v_98.x = _World2Object[0].x;
  v_98.y = _World2Object[1].x;
  v_98.z = _World2Object[2].x;
  v_98.w = _World2Object[3].x;
  highp vec4 v_99;
  v_99.x = _World2Object[0].y;
  v_99.y = _World2Object[1].y;
  v_99.z = _World2Object[2].y;
  v_99.w = _World2Object[3].y;
  highp vec4 v_100;
  v_100.x = _World2Object[0].z;
  v_100.y = _World2Object[1].z;
  v_100.z = _World2Object[2].z;
  v_100.w = _World2Object[3].z;
  highp vec3 tmpvar_101;
  tmpvar_101 = normalize(((
    (v_98.xyz * tmpvar_13.x)
   + 
    (v_99.xyz * tmpvar_13.y)
  ) + (v_100.xyz * tmpvar_13.z)));
  worldNormal_3 = tmpvar_101;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_102;
  tmpvar_102.w = 1.0;
  tmpvar_102.xyz = worldNormal_3;
  mediump vec3 tmpvar_103;
  mediump vec4 normal_104;
  normal_104 = tmpvar_102;
  mediump vec3 x2_105;
  mediump vec4 tmpvar_106;
  tmpvar_106 = (normal_104.xyzz * normal_104.yzzx);
  x2_105.x = dot (unity_SHBr, tmpvar_106);
  x2_105.y = dot (unity_SHBg, tmpvar_106);
  x2_105.z = dot (unity_SHBb, tmpvar_106);
  tmpvar_103 = (x2_105 + (unity_SHC.xyz * (
    (normal_104.x * normal_104.x)
   - 
    (normal_104.y * normal_104.y)
  )));
  highp vec3 lightColor0_107;
  lightColor0_107 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_108;
  lightColor1_108 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_109;
  lightColor2_109 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_110;
  lightColor3_110 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_111;
  lightAttenSq_111 = unity_4LightAtten0;
  highp vec3 normal_112;
  normal_112 = worldNormal_3;
  highp vec4 tmpvar_113;
  tmpvar_113 = (unity_4LightPosX0 - tmpvar_97.x);
  highp vec4 tmpvar_114;
  tmpvar_114 = (unity_4LightPosY0 - tmpvar_97.y);
  highp vec4 tmpvar_115;
  tmpvar_115 = (unity_4LightPosZ0 - tmpvar_97.z);
  highp vec4 tmpvar_116;
  tmpvar_116 = (((tmpvar_113 * tmpvar_113) + (tmpvar_114 * tmpvar_114)) + (tmpvar_115 * tmpvar_115));
  highp vec4 tmpvar_117;
  tmpvar_117 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_113 * normal_112.x) + (tmpvar_114 * normal_112.y)) + (tmpvar_115 * normal_112.z))
   * 
    inversesqrt(tmpvar_116)
  )) * (1.0/((1.0 + 
    (tmpvar_116 * lightAttenSq_111)
  ))));
  highp vec3 tmpvar_118;
  tmpvar_118 = (tmpvar_103 + ((
    ((lightColor0_107 * tmpvar_117.x) + (lightColor1_108 * tmpvar_117.y))
   + 
    (lightColor2_109 * tmpvar_117.z)
  ) + (lightColor3_110 * tmpvar_117.w)));
  tmpvar_6 = tmpvar_118;
  highp vec4 tmpvar_119;
  tmpvar_119 = (unity_World2Shadow[0] * (_Object2World * tmpvar_12));
  tmpvar_7 = tmpvar_119;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_97;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_15;
  lowp float tmpvar_16;
  mediump float dist_17;
  lowp float tmpvar_18;
  tmpvar_18 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x;
  dist_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (float((dist_17 > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_16 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_20;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_16;
  mediump vec3 normalWorld_21;
  normalWorld_21 = tmpvar_5;
  mediump vec3 tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_21;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  tmpvar_22 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_27 = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_9 * tmpvar_22) * diff_27);
  c_26.xyz = tmpvar_29;
  c_26.w = tmpvar_10;
  c_25.w = c_26.w;
  mediump vec3 tmpvar_30;
  tmpvar_30 = (c_26.xyz + (tmpvar_9 * (xlv_TEXCOORD4 + x1_24)));
  c_25.xyz = tmpvar_30;
  c_4.xyz = c_25.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_9;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_15 = tmpvar_20;
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_17 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (tmpvar_20 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp vec3 tmpvar_40;
      tmpvar_40 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_41;
      tmpvar_41 = ((tmpvar_40.x + tmpvar_40.y) + tmpvar_40.z);
      highp vec4 tmpvar_42;
      tmpvar_42.x = (tmpvar_32 + tmpvar_41);
      tmpvar_42.y = ((tmpvar_32 * 0.75) - tmpvar_41);
      tmpvar_42.z = ((tmpvar_32 * 0.01) + tmpvar_41);
      tmpvar_42.w = (tmpvar_32 + tmpvar_41);
      highp vec4 tmpvar_43;
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      tmpvar_43 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_46;
      fAngle_46 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_43.x + (tmpvar_43.y * tmpvar_43.y)));
      highp vec2 vSinCos_47;
      vSinCos_47.x = sin(fAngle_46);
      vSinCos_47.y = cos(fAngle_46);
      highp float tmpvar_48;
      tmpvar_48 = (1.0 - vSinCos_47.y);
      highp mat3 tmpvar_49;
      tmpvar_49[0].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_47.y);
      tmpvar_49[0].y = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_47.x * tmpvar_31.z));
      tmpvar_49[0].z = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_47.x * tmpvar_31.y));
      tmpvar_49[1].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_47.x * tmpvar_31.z));
      tmpvar_49[1].y = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_47.y);
      tmpvar_49[1].z = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_47.x * tmpvar_31.x));
      tmpvar_49[2].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_47.x * tmpvar_31.y));
      tmpvar_49[2].y = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_47.x * tmpvar_31.x));
      tmpvar_49[2].z = (((tmpvar_48 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_47.y);
      highp vec3 tmpvar_50;
      tmpvar_50 = ((tmpvar_31.yzx * vRotatedWindVector_14.zxy) - (tmpvar_31.zxy * vRotatedWindVector_14.yzx));
      vAxis_39.xz = tmpvar_50.xz;
      highp float tmpvar_51;
      tmpvar_51 = clamp (dot (vRotatedWindVector_14, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_50.y + tmpvar_51);
      highp vec3 tmpvar_52;
      tmpvar_52 = normalize(vAxis_39);
      vAxis_39 = tmpvar_52;
      highp float tmpvar_53;
      tmpvar_53 = (1.570796 - (sign(tmpvar_51) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_51))) * (1.570796 + (abs(tmpvar_51) * (-0.2146018 + 
          (abs(tmpvar_51) * (0.08656672 + (abs(tmpvar_51) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_54;
      tmpvar_54 = (tmpvar_43.y - (tmpvar_43.x * tmpvar_43.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_55;
        fTime_55 = (tmpvar_36.z + tmpvar_41);
        highp vec4 tmpvar_56;
        tmpvar_56.zw = vec2(0.0, 0.0);
        tmpvar_56.x = fTime_55;
        tmpvar_56.y = (0.87 * fTime_55);
        highp vec4 tmpvar_57;
        highp vec4 tmpvar_58;
        tmpvar_58 = abs(((
          fract((tmpvar_56 + 0.5))
         * 2.0) - 1.0));
        tmpvar_57 = (((
          (tmpvar_58 * tmpvar_58)
         * 
          (3.0 - (2.0 * tmpvar_58))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_57.x * tmpvar_57.y) * tmpvar_57.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_59;
      fAngle_59 = (_glesMultiTexCoord2.x * ((
        (tmpvar_53 * tmpvar_35)
       + 
        (tmpvar_54 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_60;
      vSinCos_60.x = sin(fAngle_59);
      vSinCos_60.y = cos(fAngle_59);
      highp float tmpvar_61;
      tmpvar_61 = (1.0 - vSinCos_60.y);
      highp mat3 tmpvar_62;
      tmpvar_62[0].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.x) + vSinCos_60.y);
      tmpvar_62[0].y = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.y) + (vSinCos_60.x * tmpvar_52.z));
      tmpvar_62[0].z = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.z) - (vSinCos_60.x * tmpvar_52.y));
      tmpvar_62[1].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.y) - (vSinCos_60.x * tmpvar_52.z));
      tmpvar_62[1].y = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.y) + vSinCos_60.y);
      tmpvar_62[1].z = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.z) + (vSinCos_60.x * tmpvar_52.x));
      tmpvar_62[2].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.z) + (vSinCos_60.x * tmpvar_52.y));
      tmpvar_62[2].y = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.z) - (vSinCos_60.x * tmpvar_52.x));
      tmpvar_62[2].z = (((tmpvar_61 * tmpvar_52.z) * tmpvar_52.z) + vSinCos_60.y);
      highp mat3 tmpvar_63;
      tmpvar_63 = (tmpvar_49 * tmpvar_62);
      vDirection_25 = (tmpvar_63 * _glesNormal);
      vPos_24 = (normalize((tmpvar_63 * vPos_28)) * tmpvar_45);
    };
    tmpvar_12 = vDirection_25;
    FinalPosition_15 = vPos_24;
  };
  highp vec3 tmpvar_64;
  tmpvar_64 = (FinalPosition_15 + _glesMultiTexCoord1.xyz);
  FinalPosition_15 = tmpvar_64;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = tmpvar_64;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = tmpvar_64;
      highp float fAdherenceScale_67;
      highp vec3 tmpvar_68;
      tmpvar_68 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_69;
      tmpvar_69 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (tmpvar_69 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((tmpvar_69 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_69 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((tmpvar_69 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        (mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_70.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (tmpvar_64 + ((tmpvar_68 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((tmpvar_69 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_67 = (1.0 - ((
        ((tmpvar_78.x * tmpvar_78.y) * tmpvar_78.x)
       * tmpvar_78.y) * _ST_WindTurbulences.x));
      fAdherenceScale_67 = (fAdherenceScale_67 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_13 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_67) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp vec3 tmpvar_81;
      tmpvar_81 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_82;
      tmpvar_82 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_83;
      highp float fAmount_84;
      highp float fTarget_85;
      highp vec4 tmpvar_86;
      tmpvar_86.w = 0.0;
      tmpvar_86.x = (tmpvar_82 + _glesMultiTexCoord0.w);
      tmpvar_86.y = ((tmpvar_82 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_86.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_82 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_87;
      tmpvar_87 = abs(((
        fract((tmpvar_86 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_87 * tmpvar_87)
       * 
        (3.0 - (2.0 * tmpvar_87))
      ) - 0.5) * 2.0);
      highp float tmpvar_88;
      tmpvar_88 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_85 = 1.0;
      fAmount_84 = tmpvar_88;
      if ((tmpvar_88 < 0.0)) {
        fTarget_85 = -1.0;
        fAmount_84 = -(tmpvar_88);
      };
      vPos_80 = (vPos_65 + ((tmpvar_81 * 
        (((mix (
          mix (tmpvar_88, fTarget_85, fAmount_84)
        , fTarget_85, fAmount_84) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_15 = vPos_65;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_89;
    vPos_89 = FinalPosition_15;
    highp float fAdjust_90;
    highp float fLength_91;
    fLength_91 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_92;
    tmpvar_92 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_90 = tmpvar_92;
    if ((tmpvar_92 != 0.0)) {
      fAdjust_90 = pow (tmpvar_92, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_93;
    tmpvar_93.zw = vec2(0.0, 0.0);
    tmpvar_93.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_93.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_94;
    highp vec4 tmpvar_95;
    tmpvar_95 = abs(((
      fract((tmpvar_93 + 0.5))
     * 2.0) - 1.0));
    tmpvar_94 = (((
      (tmpvar_95 * tmpvar_95)
     * 
      (3.0 - (2.0 * tmpvar_95))
    ) - 0.5) * 2.0);
    vPos_89.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_94.x + (tmpvar_94.y * tmpvar_94.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_90)));
    vPos_89 = (normalize(vPos_89) * fLength_91);
    FinalPosition_15 = vPos_89;
  };
  tmpvar_11.xyz = FinalPosition_15;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_96;
  v_96.x = _World2Object[0].x;
  v_96.y = _World2Object[1].x;
  v_96.z = _World2Object[2].x;
  v_96.w = _World2Object[3].x;
  highp vec4 v_97;
  v_97.x = _World2Object[0].y;
  v_97.y = _World2Object[1].y;
  v_97.z = _World2Object[2].y;
  v_97.w = _World2Object[3].y;
  highp vec4 v_98;
  v_98.x = _World2Object[0].z;
  v_98.y = _World2Object[1].z;
  v_98.z = _World2Object[2].z;
  v_98.w = _World2Object[3].z;
  highp vec3 tmpvar_99;
  tmpvar_99 = normalize(((
    (v_96.xyz * tmpvar_12.x)
   + 
    (v_97.xyz * tmpvar_12.y)
  ) + (v_98.xyz * tmpvar_12.z)));
  worldNormal_3 = tmpvar_99;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_100;
  tmpvar_100.w = 1.0;
  tmpvar_100.xyz = worldNormal_3;
  mediump vec4 normal_101;
  normal_101 = tmpvar_100;
  mediump vec3 x2_102;
  mediump vec4 tmpvar_103;
  tmpvar_103 = (normal_101.xyzz * normal_101.yzzx);
  x2_102.x = dot (unity_SHBr, tmpvar_103);
  x2_102.y = dot (unity_SHBg, tmpvar_103);
  x2_102.z = dot (unity_SHBb, tmpvar_103);
  highp vec4 tmpvar_104;
  tmpvar_104 = (unity_World2Shadow[0] * (_Object2World * tmpvar_11));
  tmpvar_6 = tmpvar_104;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = (x2_102 + (unity_SHC.xyz * (
    (normal_101.x * normal_101.x)
   - 
    (normal_101.y * normal_101.y)
  )));
  xlv_TEXCOORD5 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_15;
  lowp float shadow_16;
  lowp float tmpvar_17;
  tmpvar_17 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz);
  mediump float tmpvar_18;
  tmpvar_18 = (_LightShadowData.x + (tmpvar_17 * (1.0 - _LightShadowData.x)));
  shadow_16 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_19;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_16;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_5;
  mediump vec3 tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_20;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  tmpvar_21 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_26 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tmpvar_9 * tmpvar_21) * diff_26);
  c_25.xyz = tmpvar_28;
  c_25.w = tmpvar_10;
  c_24.w = c_25.w;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (c_25.xyz + (tmpvar_9 * (xlv_TEXCOORD4 + x1_23)));
  c_24.xyz = tmpvar_29;
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_9;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_15 = tmpvar_20;
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_17 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (tmpvar_20 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp vec3 tmpvar_40;
      tmpvar_40 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_41;
      tmpvar_41 = ((tmpvar_40.x + tmpvar_40.y) + tmpvar_40.z);
      highp vec4 tmpvar_42;
      tmpvar_42.x = (tmpvar_32 + tmpvar_41);
      tmpvar_42.y = ((tmpvar_32 * 0.75) - tmpvar_41);
      tmpvar_42.z = ((tmpvar_32 * 0.01) + tmpvar_41);
      tmpvar_42.w = (tmpvar_32 + tmpvar_41);
      highp vec4 tmpvar_43;
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      tmpvar_43 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_46;
      fAngle_46 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_43.x + (tmpvar_43.y * tmpvar_43.y)));
      highp vec2 vSinCos_47;
      vSinCos_47.x = sin(fAngle_46);
      vSinCos_47.y = cos(fAngle_46);
      highp float tmpvar_48;
      tmpvar_48 = (1.0 - vSinCos_47.y);
      highp mat3 tmpvar_49;
      tmpvar_49[0].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_47.y);
      tmpvar_49[0].y = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_47.x * tmpvar_31.z));
      tmpvar_49[0].z = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_47.x * tmpvar_31.y));
      tmpvar_49[1].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_47.x * tmpvar_31.z));
      tmpvar_49[1].y = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_47.y);
      tmpvar_49[1].z = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_47.x * tmpvar_31.x));
      tmpvar_49[2].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_47.x * tmpvar_31.y));
      tmpvar_49[2].y = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_47.x * tmpvar_31.x));
      tmpvar_49[2].z = (((tmpvar_48 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_47.y);
      highp vec3 tmpvar_50;
      tmpvar_50 = ((tmpvar_31.yzx * vRotatedWindVector_14.zxy) - (tmpvar_31.zxy * vRotatedWindVector_14.yzx));
      vAxis_39.xz = tmpvar_50.xz;
      highp float tmpvar_51;
      tmpvar_51 = clamp (dot (vRotatedWindVector_14, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_50.y + tmpvar_51);
      highp vec3 tmpvar_52;
      tmpvar_52 = normalize(vAxis_39);
      vAxis_39 = tmpvar_52;
      highp float tmpvar_53;
      tmpvar_53 = (1.570796 - (sign(tmpvar_51) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_51))) * (1.570796 + (abs(tmpvar_51) * (-0.2146018 + 
          (abs(tmpvar_51) * (0.08656672 + (abs(tmpvar_51) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_54;
      tmpvar_54 = (tmpvar_43.y - (tmpvar_43.x * tmpvar_43.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_55;
        fTime_55 = (tmpvar_36.z + tmpvar_41);
        highp vec4 tmpvar_56;
        tmpvar_56.zw = vec2(0.0, 0.0);
        tmpvar_56.x = fTime_55;
        tmpvar_56.y = (0.87 * fTime_55);
        highp vec4 tmpvar_57;
        highp vec4 tmpvar_58;
        tmpvar_58 = abs(((
          fract((tmpvar_56 + 0.5))
         * 2.0) - 1.0));
        tmpvar_57 = (((
          (tmpvar_58 * tmpvar_58)
         * 
          (3.0 - (2.0 * tmpvar_58))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_57.x * tmpvar_57.y) * tmpvar_57.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_59;
      fAngle_59 = (_glesMultiTexCoord2.x * ((
        (tmpvar_53 * tmpvar_35)
       + 
        (tmpvar_54 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_60;
      vSinCos_60.x = sin(fAngle_59);
      vSinCos_60.y = cos(fAngle_59);
      highp float tmpvar_61;
      tmpvar_61 = (1.0 - vSinCos_60.y);
      highp mat3 tmpvar_62;
      tmpvar_62[0].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.x) + vSinCos_60.y);
      tmpvar_62[0].y = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.y) + (vSinCos_60.x * tmpvar_52.z));
      tmpvar_62[0].z = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.z) - (vSinCos_60.x * tmpvar_52.y));
      tmpvar_62[1].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.y) - (vSinCos_60.x * tmpvar_52.z));
      tmpvar_62[1].y = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.y) + vSinCos_60.y);
      tmpvar_62[1].z = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.z) + (vSinCos_60.x * tmpvar_52.x));
      tmpvar_62[2].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.z) + (vSinCos_60.x * tmpvar_52.y));
      tmpvar_62[2].y = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.z) - (vSinCos_60.x * tmpvar_52.x));
      tmpvar_62[2].z = (((tmpvar_61 * tmpvar_52.z) * tmpvar_52.z) + vSinCos_60.y);
      highp mat3 tmpvar_63;
      tmpvar_63 = (tmpvar_49 * tmpvar_62);
      vDirection_25 = (tmpvar_63 * _glesNormal);
      vPos_24 = (normalize((tmpvar_63 * vPos_28)) * tmpvar_45);
    };
    tmpvar_12 = vDirection_25;
    FinalPosition_15 = vPos_24;
  };
  highp vec3 tmpvar_64;
  tmpvar_64 = (FinalPosition_15 + _glesMultiTexCoord1.xyz);
  FinalPosition_15 = tmpvar_64;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = tmpvar_64;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = tmpvar_64;
      highp float fAdherenceScale_67;
      highp vec3 tmpvar_68;
      tmpvar_68 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_69;
      tmpvar_69 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (tmpvar_69 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((tmpvar_69 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_69 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((tmpvar_69 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        (mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_70.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (tmpvar_64 + ((tmpvar_68 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((tmpvar_69 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_67 = (1.0 - ((
        ((tmpvar_78.x * tmpvar_78.y) * tmpvar_78.x)
       * tmpvar_78.y) * _ST_WindTurbulences.x));
      fAdherenceScale_67 = (fAdherenceScale_67 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_13 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_67) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp vec3 tmpvar_81;
      tmpvar_81 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_82;
      tmpvar_82 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_83;
      highp float fAmount_84;
      highp float fTarget_85;
      highp vec4 tmpvar_86;
      tmpvar_86.w = 0.0;
      tmpvar_86.x = (tmpvar_82 + _glesMultiTexCoord0.w);
      tmpvar_86.y = ((tmpvar_82 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_86.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_82 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_87;
      tmpvar_87 = abs(((
        fract((tmpvar_86 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_87 * tmpvar_87)
       * 
        (3.0 - (2.0 * tmpvar_87))
      ) - 0.5) * 2.0);
      highp float tmpvar_88;
      tmpvar_88 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_85 = 1.0;
      fAmount_84 = tmpvar_88;
      if ((tmpvar_88 < 0.0)) {
        fTarget_85 = -1.0;
        fAmount_84 = -(tmpvar_88);
      };
      vPos_80 = (vPos_65 + ((tmpvar_81 * 
        (((mix (
          mix (tmpvar_88, fTarget_85, fAmount_84)
        , fTarget_85, fAmount_84) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_15 = vPos_65;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_89;
    vPos_89 = FinalPosition_15;
    highp float fAdjust_90;
    highp float fLength_91;
    fLength_91 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_92;
    tmpvar_92 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_90 = tmpvar_92;
    if ((tmpvar_92 != 0.0)) {
      fAdjust_90 = pow (tmpvar_92, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_93;
    tmpvar_93.zw = vec2(0.0, 0.0);
    tmpvar_93.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_93.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_94;
    highp vec4 tmpvar_95;
    tmpvar_95 = abs(((
      fract((tmpvar_93 + 0.5))
     * 2.0) - 1.0));
    tmpvar_94 = (((
      (tmpvar_95 * tmpvar_95)
     * 
      (3.0 - (2.0 * tmpvar_95))
    ) - 0.5) * 2.0);
    vPos_89.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_94.x + (tmpvar_94.y * tmpvar_94.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_90)));
    vPos_89 = (normalize(vPos_89) * fLength_91);
    FinalPosition_15 = vPos_89;
  };
  tmpvar_11.xyz = FinalPosition_15;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_96;
  v_96.x = _World2Object[0].x;
  v_96.y = _World2Object[1].x;
  v_96.z = _World2Object[2].x;
  v_96.w = _World2Object[3].x;
  highp vec4 v_97;
  v_97.x = _World2Object[0].y;
  v_97.y = _World2Object[1].y;
  v_97.z = _World2Object[2].y;
  v_97.w = _World2Object[3].y;
  highp vec4 v_98;
  v_98.x = _World2Object[0].z;
  v_98.y = _World2Object[1].z;
  v_98.z = _World2Object[2].z;
  v_98.w = _World2Object[3].z;
  highp vec3 tmpvar_99;
  tmpvar_99 = normalize(((
    (v_96.xyz * tmpvar_12.x)
   + 
    (v_97.xyz * tmpvar_12.y)
  ) + (v_98.xyz * tmpvar_12.z)));
  worldNormal_3 = tmpvar_99;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_100;
  tmpvar_100.w = 1.0;
  tmpvar_100.xyz = worldNormal_3;
  mediump vec4 normal_101;
  normal_101 = tmpvar_100;
  mediump vec3 x2_102;
  mediump vec4 tmpvar_103;
  tmpvar_103 = (normal_101.xyzz * normal_101.yzzx);
  x2_102.x = dot (unity_SHBr, tmpvar_103);
  x2_102.y = dot (unity_SHBg, tmpvar_103);
  x2_102.z = dot (unity_SHBb, tmpvar_103);
  highp vec4 tmpvar_104;
  tmpvar_104 = (unity_World2Shadow[0] * (_Object2World * tmpvar_11));
  tmpvar_6 = tmpvar_104;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = (x2_102 + (unity_SHC.xyz * (
    (normal_101.x * normal_101.x)
   - 
    (normal_101.y * normal_101.y)
  )));
  xlv_TEXCOORD5 = tmpvar_6;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_15;
  lowp float shadow_16;
  mediump float tmpvar_17;
  tmpvar_17 = texture (_ShadowMapTexture, xlv_TEXCOORD5.xyz);
  lowp float tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump float tmpvar_19;
  tmpvar_19 = (_LightShadowData.x + (tmpvar_18 * (1.0 - _LightShadowData.x)));
  shadow_16 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_20;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_16;
  mediump vec3 normalWorld_21;
  normalWorld_21 = tmpvar_5;
  mediump vec3 tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_21;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  tmpvar_22 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_27 = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_9 * tmpvar_22) * diff_27);
  c_26.xyz = tmpvar_29;
  c_26.w = tmpvar_10;
  c_25.w = c_26.w;
  mediump vec3 tmpvar_30;
  tmpvar_30 = (c_26.xyz + (tmpvar_9 * (xlv_TEXCOORD4 + x1_24)));
  c_25.xyz = tmpvar_30;
  c_4.xyz = c_25.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_10;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_16 = tmpvar_21;
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_22;
    tmpvar_22 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_23;
    isBestWind_23 = (tmpvar_18 == 4.0);
    bool bLeaf2_24;
    bLeaf2_24 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    highp vec3 vDirection_26;
    vDirection_26 = tmpvar_2;
    highp float tmpvar_27;
    if (bLeaf2_24) {
      tmpvar_27 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_28;
    if (bLeaf2_24) {
      tmpvar_28 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_29;
    highp vec4 tmpvar_30;
    tmpvar_30.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_30.x = (tmpvar_27 + tmpvar_22);
    highp vec4 tmpvar_31;
    tmpvar_31 = abs(((
      fract((tmpvar_30 + 0.5))
     * 2.0) - 1.0));
    vPos_29 = (tmpvar_21 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_28 * (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_26 = tmpvar_2;
    vPos_25 = vPos_29;
    if (isBestWind_23) {
      highp vec3 tmpvar_32;
      tmpvar_32 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_33;
      if (bLeaf2_24) {
        tmpvar_33 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_34;
      if (bLeaf2_24) {
        tmpvar_34 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_35;
      if (bLeaf2_24) {
        tmpvar_35 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_36;
      if (bLeaf2_24) {
        tmpvar_36 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_37;
      if (bLeaf2_24) {
        tmpvar_37 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_37 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_38;
      if (bLeaf2_24) {
        tmpvar_38 = bool(1);
      } else {
        tmpvar_38 = bool(1);
      };
      highp float fTwitch_39;
      highp vec3 vAxis_40;
      highp vec3 tmpvar_41;
      tmpvar_41 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_42;
      tmpvar_42 = ((tmpvar_41.x + tmpvar_41.y) + tmpvar_41.z);
      highp vec4 tmpvar_43;
      tmpvar_43.x = (tmpvar_33 + tmpvar_42);
      tmpvar_43.y = ((tmpvar_33 * 0.75) - tmpvar_42);
      tmpvar_43.z = ((tmpvar_33 * 0.01) + tmpvar_42);
      tmpvar_43.w = (tmpvar_33 + tmpvar_42);
      highp vec4 tmpvar_44;
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      tmpvar_44 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = sqrt(dot (vPos_29, vPos_29));
      highp float fAngle_47;
      fAngle_47 = ((_glesMultiTexCoord2.x * tmpvar_35) * (tmpvar_44.x + (tmpvar_44.y * tmpvar_44.y)));
      highp vec2 vSinCos_48;
      vSinCos_48.x = sin(fAngle_47);
      vSinCos_48.y = cos(fAngle_47);
      highp float tmpvar_49;
      tmpvar_49 = (1.0 - vSinCos_48.y);
      highp mat3 tmpvar_50;
      tmpvar_50[0].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.x) + vSinCos_48.y);
      tmpvar_50[0].y = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.y) + (vSinCos_48.x * tmpvar_32.z));
      tmpvar_50[0].z = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.z) - (vSinCos_48.x * tmpvar_32.y));
      tmpvar_50[1].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.y) - (vSinCos_48.x * tmpvar_32.z));
      tmpvar_50[1].y = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.y) + vSinCos_48.y);
      tmpvar_50[1].z = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.z) + (vSinCos_48.x * tmpvar_32.x));
      tmpvar_50[2].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.z) + (vSinCos_48.x * tmpvar_32.y));
      tmpvar_50[2].y = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.z) - (vSinCos_48.x * tmpvar_32.x));
      tmpvar_50[2].z = (((tmpvar_49 * tmpvar_32.z) * tmpvar_32.z) + vSinCos_48.y);
      highp vec3 tmpvar_51;
      tmpvar_51 = ((tmpvar_32.yzx * vRotatedWindVector_15.zxy) - (tmpvar_32.zxy * vRotatedWindVector_15.yzx));
      vAxis_40.xz = tmpvar_51.xz;
      highp float tmpvar_52;
      tmpvar_52 = clamp (dot (vRotatedWindVector_15, tmpvar_32), -1.0, 1.0);
      vAxis_40.y = (tmpvar_51.y + tmpvar_52);
      highp vec3 tmpvar_53;
      tmpvar_53 = normalize(vAxis_40);
      vAxis_40 = tmpvar_53;
      highp float tmpvar_54;
      tmpvar_54 = (1.570796 - (sign(tmpvar_52) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_52))) * (1.570796 + (abs(tmpvar_52) * (-0.2146018 + 
          (abs(tmpvar_52) * (0.08656672 + (abs(tmpvar_52) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_55;
      tmpvar_55 = (tmpvar_44.y - (tmpvar_44.x * tmpvar_44.x));
      fTwitch_39 = 0.0;
      if (tmpvar_38) {
        highp float fTime_56;
        fTime_56 = (tmpvar_37.z + tmpvar_42);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_39 = (tmpvar_37.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_37.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_54 * tmpvar_36)
       + 
        (tmpvar_55 * tmpvar_34)
      ) + fTwitch_39));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.y) + (vSinCos_61.x * tmpvar_53.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.z) - (vSinCos_61.x * tmpvar_53.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.y) - (vSinCos_61.x * tmpvar_53.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.z) + (vSinCos_61.x * tmpvar_53.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.z) + (vSinCos_61.x * tmpvar_53.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.z) - (vSinCos_61.x * tmpvar_53.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_53.z) * tmpvar_53.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_50 * tmpvar_63);
      vDirection_26 = (tmpvar_64 * _glesNormal);
      vPos_25 = (normalize((tmpvar_64 * vPos_29)) * tmpvar_46);
    };
    tmpvar_13 = vDirection_26;
    FinalPosition_16 = vPos_25;
  };
  highp vec3 tmpvar_65;
  tmpvar_65 = (FinalPosition_16 + _glesMultiTexCoord1.xyz);
  FinalPosition_16 = tmpvar_65;
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_66;
    vPos_66 = tmpvar_65;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_67;
      vPos_67 = tmpvar_65;
      highp float fAdherenceScale_68;
      highp vec3 tmpvar_69;
      tmpvar_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_70;
      tmpvar_70 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_71;
      highp float fOscillation_72;
      fOscillation_72 = 1.0;
      highp float fAmount_73;
      highp float fTarget_74;
      highp vec4 tmpvar_75;
      tmpvar_75.x = (tmpvar_70 + _glesMultiTexCoord0.w);
      tmpvar_75.y = ((tmpvar_70 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_75.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_70 + _glesMultiTexCoord0.w));
      tmpvar_75.w = ((tmpvar_70 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      vOscillations_71 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      highp float tmpvar_77;
      tmpvar_77 = (vOscillations_71.y * vOscillations_71.z);
      fTarget_74 = 1.0;
      fAmount_73 = tmpvar_77;
      if ((tmpvar_77 < 0.0)) {
        fTarget_74 = -1.0;
        fAmount_73 = -(tmpvar_77);
      };
      fOscillation_72 = (((
        (mix (mix (tmpvar_77, fTarget_74, fAmount_73), fTarget_74, fAmount_73) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_71.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_71.w * _ST_WindBranchWhip.x)));
      vPos_67 = (tmpvar_65 + ((tmpvar_69 * fOscillation_72) * _ST_WindBranch.y));
      highp vec4 tmpvar_78;
      tmpvar_78.zw = vec2(0.0, 0.0);
      tmpvar_78.x = ((tmpvar_70 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_78.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_79;
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      tmpvar_79 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((
        ((tmpvar_79.x * tmpvar_79.y) * tmpvar_79.x)
       * tmpvar_79.y) * _ST_WindTurbulences.x));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_71.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_67 = (vPos_67 + ((
        ((vRotatedBranchAnchor_14 - vPos_67) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_66 = vPos_67;
    } else {
      highp vec3 vPos_81;
      vPos_81 = vPos_66;
      highp vec3 tmpvar_82;
      tmpvar_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_83;
      tmpvar_83 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_84;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (tmpvar_83 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((tmpvar_83 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_83 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_84 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_84.y * vOscillations_84.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      vPos_81 = (vPos_66 + ((tmpvar_82 * 
        (((mix (
          mix (tmpvar_89, fTarget_86, fAmount_85)
        , fTarget_86, fAmount_85) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_84.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_66 = vPos_81;
    };
    FinalPosition_16 = vPos_66;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = FinalPosition_16;
    highp float fAdjust_91;
    highp float fLength_92;
    fLength_92 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_93;
    tmpvar_93 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_91 = tmpvar_93;
    if ((tmpvar_93 != 0.0)) {
      fAdjust_91 = pow (tmpvar_93, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_94;
    tmpvar_94.zw = vec2(0.0, 0.0);
    tmpvar_94.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_94.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_95;
    highp vec4 tmpvar_96;
    tmpvar_96 = abs(((
      fract((tmpvar_94 + 0.5))
     * 2.0) - 1.0));
    tmpvar_95 = (((
      (tmpvar_96 * tmpvar_96)
     * 
      (3.0 - (2.0 * tmpvar_96))
    ) - 0.5) * 2.0);
    vPos_90.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_95.x + (tmpvar_95.y * tmpvar_95.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_91)));
    vPos_90 = (normalize(vPos_90) * fLength_92);
    FinalPosition_16 = vPos_90;
  };
  tmpvar_12.xyz = FinalPosition_16;
  tmpvar_5 = tmpvar_8;
  highp vec3 tmpvar_97;
  tmpvar_97 = (_Object2World * tmpvar_12).xyz;
  highp vec4 v_98;
  v_98.x = _World2Object[0].x;
  v_98.y = _World2Object[1].x;
  v_98.z = _World2Object[2].x;
  v_98.w = _World2Object[3].x;
  highp vec4 v_99;
  v_99.x = _World2Object[0].y;
  v_99.y = _World2Object[1].y;
  v_99.z = _World2Object[2].y;
  v_99.w = _World2Object[3].y;
  highp vec4 v_100;
  v_100.x = _World2Object[0].z;
  v_100.y = _World2Object[1].z;
  v_100.z = _World2Object[2].z;
  v_100.w = _World2Object[3].z;
  highp vec3 tmpvar_101;
  tmpvar_101 = normalize(((
    (v_98.xyz * tmpvar_13.x)
   + 
    (v_99.xyz * tmpvar_13.y)
  ) + (v_100.xyz * tmpvar_13.z)));
  worldNormal_3 = tmpvar_101;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_102;
  tmpvar_102.w = 1.0;
  tmpvar_102.xyz = worldNormal_3;
  mediump vec3 tmpvar_103;
  mediump vec4 normal_104;
  normal_104 = tmpvar_102;
  mediump vec3 x2_105;
  mediump vec4 tmpvar_106;
  tmpvar_106 = (normal_104.xyzz * normal_104.yzzx);
  x2_105.x = dot (unity_SHBr, tmpvar_106);
  x2_105.y = dot (unity_SHBg, tmpvar_106);
  x2_105.z = dot (unity_SHBb, tmpvar_106);
  tmpvar_103 = (x2_105 + (unity_SHC.xyz * (
    (normal_104.x * normal_104.x)
   - 
    (normal_104.y * normal_104.y)
  )));
  highp vec3 lightColor0_107;
  lightColor0_107 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_108;
  lightColor1_108 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_109;
  lightColor2_109 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_110;
  lightColor3_110 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_111;
  lightAttenSq_111 = unity_4LightAtten0;
  highp vec3 normal_112;
  normal_112 = worldNormal_3;
  highp vec4 tmpvar_113;
  tmpvar_113 = (unity_4LightPosX0 - tmpvar_97.x);
  highp vec4 tmpvar_114;
  tmpvar_114 = (unity_4LightPosY0 - tmpvar_97.y);
  highp vec4 tmpvar_115;
  tmpvar_115 = (unity_4LightPosZ0 - tmpvar_97.z);
  highp vec4 tmpvar_116;
  tmpvar_116 = (((tmpvar_113 * tmpvar_113) + (tmpvar_114 * tmpvar_114)) + (tmpvar_115 * tmpvar_115));
  highp vec4 tmpvar_117;
  tmpvar_117 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_113 * normal_112.x) + (tmpvar_114 * normal_112.y)) + (tmpvar_115 * normal_112.z))
   * 
    inversesqrt(tmpvar_116)
  )) * (1.0/((1.0 + 
    (tmpvar_116 * lightAttenSq_111)
  ))));
  highp vec3 tmpvar_118;
  tmpvar_118 = (tmpvar_103 + ((
    ((lightColor0_107 * tmpvar_117.x) + (lightColor1_108 * tmpvar_117.y))
   + 
    (lightColor2_109 * tmpvar_117.z)
  ) + (lightColor3_110 * tmpvar_117.w)));
  tmpvar_6 = tmpvar_118;
  highp vec4 tmpvar_119;
  tmpvar_119 = (unity_World2Shadow[0] * (_Object2World * tmpvar_12));
  tmpvar_7 = tmpvar_119;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_97;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_15;
  lowp float shadow_16;
  lowp float tmpvar_17;
  tmpvar_17 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz);
  mediump float tmpvar_18;
  tmpvar_18 = (_LightShadowData.x + (tmpvar_17 * (1.0 - _LightShadowData.x)));
  shadow_16 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_19;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_16;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_5;
  mediump vec3 tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_20;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  tmpvar_21 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_26 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tmpvar_9 * tmpvar_21) * diff_26);
  c_25.xyz = tmpvar_28;
  c_25.w = tmpvar_10;
  c_24.w = c_25.w;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (c_25.xyz + (tmpvar_9 * (xlv_TEXCOORD4 + x1_23)));
  c_24.xyz = tmpvar_29;
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_10;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_16 = tmpvar_21;
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_22;
    tmpvar_22 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_23;
    isBestWind_23 = (tmpvar_18 == 4.0);
    bool bLeaf2_24;
    bLeaf2_24 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    highp vec3 vDirection_26;
    vDirection_26 = tmpvar_2;
    highp float tmpvar_27;
    if (bLeaf2_24) {
      tmpvar_27 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_28;
    if (bLeaf2_24) {
      tmpvar_28 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_29;
    highp vec4 tmpvar_30;
    tmpvar_30.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_30.x = (tmpvar_27 + tmpvar_22);
    highp vec4 tmpvar_31;
    tmpvar_31 = abs(((
      fract((tmpvar_30 + 0.5))
     * 2.0) - 1.0));
    vPos_29 = (tmpvar_21 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_28 * (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_26 = tmpvar_2;
    vPos_25 = vPos_29;
    if (isBestWind_23) {
      highp vec3 tmpvar_32;
      tmpvar_32 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_33;
      if (bLeaf2_24) {
        tmpvar_33 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_34;
      if (bLeaf2_24) {
        tmpvar_34 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_35;
      if (bLeaf2_24) {
        tmpvar_35 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_36;
      if (bLeaf2_24) {
        tmpvar_36 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_37;
      if (bLeaf2_24) {
        tmpvar_37 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_37 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_38;
      if (bLeaf2_24) {
        tmpvar_38 = bool(1);
      } else {
        tmpvar_38 = bool(1);
      };
      highp float fTwitch_39;
      highp vec3 vAxis_40;
      highp vec3 tmpvar_41;
      tmpvar_41 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_42;
      tmpvar_42 = ((tmpvar_41.x + tmpvar_41.y) + tmpvar_41.z);
      highp vec4 tmpvar_43;
      tmpvar_43.x = (tmpvar_33 + tmpvar_42);
      tmpvar_43.y = ((tmpvar_33 * 0.75) - tmpvar_42);
      tmpvar_43.z = ((tmpvar_33 * 0.01) + tmpvar_42);
      tmpvar_43.w = (tmpvar_33 + tmpvar_42);
      highp vec4 tmpvar_44;
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      tmpvar_44 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = sqrt(dot (vPos_29, vPos_29));
      highp float fAngle_47;
      fAngle_47 = ((_glesMultiTexCoord2.x * tmpvar_35) * (tmpvar_44.x + (tmpvar_44.y * tmpvar_44.y)));
      highp vec2 vSinCos_48;
      vSinCos_48.x = sin(fAngle_47);
      vSinCos_48.y = cos(fAngle_47);
      highp float tmpvar_49;
      tmpvar_49 = (1.0 - vSinCos_48.y);
      highp mat3 tmpvar_50;
      tmpvar_50[0].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.x) + vSinCos_48.y);
      tmpvar_50[0].y = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.y) + (vSinCos_48.x * tmpvar_32.z));
      tmpvar_50[0].z = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.z) - (vSinCos_48.x * tmpvar_32.y));
      tmpvar_50[1].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.y) - (vSinCos_48.x * tmpvar_32.z));
      tmpvar_50[1].y = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.y) + vSinCos_48.y);
      tmpvar_50[1].z = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.z) + (vSinCos_48.x * tmpvar_32.x));
      tmpvar_50[2].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.z) + (vSinCos_48.x * tmpvar_32.y));
      tmpvar_50[2].y = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.z) - (vSinCos_48.x * tmpvar_32.x));
      tmpvar_50[2].z = (((tmpvar_49 * tmpvar_32.z) * tmpvar_32.z) + vSinCos_48.y);
      highp vec3 tmpvar_51;
      tmpvar_51 = ((tmpvar_32.yzx * vRotatedWindVector_15.zxy) - (tmpvar_32.zxy * vRotatedWindVector_15.yzx));
      vAxis_40.xz = tmpvar_51.xz;
      highp float tmpvar_52;
      tmpvar_52 = clamp (dot (vRotatedWindVector_15, tmpvar_32), -1.0, 1.0);
      vAxis_40.y = (tmpvar_51.y + tmpvar_52);
      highp vec3 tmpvar_53;
      tmpvar_53 = normalize(vAxis_40);
      vAxis_40 = tmpvar_53;
      highp float tmpvar_54;
      tmpvar_54 = (1.570796 - (sign(tmpvar_52) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_52))) * (1.570796 + (abs(tmpvar_52) * (-0.2146018 + 
          (abs(tmpvar_52) * (0.08656672 + (abs(tmpvar_52) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_55;
      tmpvar_55 = (tmpvar_44.y - (tmpvar_44.x * tmpvar_44.x));
      fTwitch_39 = 0.0;
      if (tmpvar_38) {
        highp float fTime_56;
        fTime_56 = (tmpvar_37.z + tmpvar_42);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_39 = (tmpvar_37.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_37.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_54 * tmpvar_36)
       + 
        (tmpvar_55 * tmpvar_34)
      ) + fTwitch_39));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.y) + (vSinCos_61.x * tmpvar_53.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.z) - (vSinCos_61.x * tmpvar_53.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.y) - (vSinCos_61.x * tmpvar_53.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.z) + (vSinCos_61.x * tmpvar_53.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.z) + (vSinCos_61.x * tmpvar_53.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.z) - (vSinCos_61.x * tmpvar_53.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_53.z) * tmpvar_53.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_50 * tmpvar_63);
      vDirection_26 = (tmpvar_64 * _glesNormal);
      vPos_25 = (normalize((tmpvar_64 * vPos_29)) * tmpvar_46);
    };
    tmpvar_13 = vDirection_26;
    FinalPosition_16 = vPos_25;
  };
  highp vec3 tmpvar_65;
  tmpvar_65 = (FinalPosition_16 + _glesMultiTexCoord1.xyz);
  FinalPosition_16 = tmpvar_65;
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_66;
    vPos_66 = tmpvar_65;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_67;
      vPos_67 = tmpvar_65;
      highp float fAdherenceScale_68;
      highp vec3 tmpvar_69;
      tmpvar_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_70;
      tmpvar_70 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_71;
      highp float fOscillation_72;
      fOscillation_72 = 1.0;
      highp float fAmount_73;
      highp float fTarget_74;
      highp vec4 tmpvar_75;
      tmpvar_75.x = (tmpvar_70 + _glesMultiTexCoord0.w);
      tmpvar_75.y = ((tmpvar_70 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_75.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_70 + _glesMultiTexCoord0.w));
      tmpvar_75.w = ((tmpvar_70 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      vOscillations_71 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      highp float tmpvar_77;
      tmpvar_77 = (vOscillations_71.y * vOscillations_71.z);
      fTarget_74 = 1.0;
      fAmount_73 = tmpvar_77;
      if ((tmpvar_77 < 0.0)) {
        fTarget_74 = -1.0;
        fAmount_73 = -(tmpvar_77);
      };
      fOscillation_72 = (((
        (mix (mix (tmpvar_77, fTarget_74, fAmount_73), fTarget_74, fAmount_73) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_71.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_71.w * _ST_WindBranchWhip.x)));
      vPos_67 = (tmpvar_65 + ((tmpvar_69 * fOscillation_72) * _ST_WindBranch.y));
      highp vec4 tmpvar_78;
      tmpvar_78.zw = vec2(0.0, 0.0);
      tmpvar_78.x = ((tmpvar_70 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_78.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_79;
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      tmpvar_79 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((
        ((tmpvar_79.x * tmpvar_79.y) * tmpvar_79.x)
       * tmpvar_79.y) * _ST_WindTurbulences.x));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_71.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_67 = (vPos_67 + ((
        ((vRotatedBranchAnchor_14 - vPos_67) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_66 = vPos_67;
    } else {
      highp vec3 vPos_81;
      vPos_81 = vPos_66;
      highp vec3 tmpvar_82;
      tmpvar_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_83;
      tmpvar_83 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_84;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (tmpvar_83 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((tmpvar_83 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_83 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_84 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_84.y * vOscillations_84.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      vPos_81 = (vPos_66 + ((tmpvar_82 * 
        (((mix (
          mix (tmpvar_89, fTarget_86, fAmount_85)
        , fTarget_86, fAmount_85) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_84.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_66 = vPos_81;
    };
    FinalPosition_16 = vPos_66;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = FinalPosition_16;
    highp float fAdjust_91;
    highp float fLength_92;
    fLength_92 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_93;
    tmpvar_93 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_91 = tmpvar_93;
    if ((tmpvar_93 != 0.0)) {
      fAdjust_91 = pow (tmpvar_93, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_94;
    tmpvar_94.zw = vec2(0.0, 0.0);
    tmpvar_94.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_94.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_95;
    highp vec4 tmpvar_96;
    tmpvar_96 = abs(((
      fract((tmpvar_94 + 0.5))
     * 2.0) - 1.0));
    tmpvar_95 = (((
      (tmpvar_96 * tmpvar_96)
     * 
      (3.0 - (2.0 * tmpvar_96))
    ) - 0.5) * 2.0);
    vPos_90.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_95.x + (tmpvar_95.y * tmpvar_95.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_91)));
    vPos_90 = (normalize(vPos_90) * fLength_92);
    FinalPosition_16 = vPos_90;
  };
  tmpvar_12.xyz = FinalPosition_16;
  tmpvar_5 = tmpvar_8;
  highp vec3 tmpvar_97;
  tmpvar_97 = (_Object2World * tmpvar_12).xyz;
  highp vec4 v_98;
  v_98.x = _World2Object[0].x;
  v_98.y = _World2Object[1].x;
  v_98.z = _World2Object[2].x;
  v_98.w = _World2Object[3].x;
  highp vec4 v_99;
  v_99.x = _World2Object[0].y;
  v_99.y = _World2Object[1].y;
  v_99.z = _World2Object[2].y;
  v_99.w = _World2Object[3].y;
  highp vec4 v_100;
  v_100.x = _World2Object[0].z;
  v_100.y = _World2Object[1].z;
  v_100.z = _World2Object[2].z;
  v_100.w = _World2Object[3].z;
  highp vec3 tmpvar_101;
  tmpvar_101 = normalize(((
    (v_98.xyz * tmpvar_13.x)
   + 
    (v_99.xyz * tmpvar_13.y)
  ) + (v_100.xyz * tmpvar_13.z)));
  worldNormal_3 = tmpvar_101;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_102;
  tmpvar_102.w = 1.0;
  tmpvar_102.xyz = worldNormal_3;
  mediump vec3 tmpvar_103;
  mediump vec4 normal_104;
  normal_104 = tmpvar_102;
  mediump vec3 x2_105;
  mediump vec4 tmpvar_106;
  tmpvar_106 = (normal_104.xyzz * normal_104.yzzx);
  x2_105.x = dot (unity_SHBr, tmpvar_106);
  x2_105.y = dot (unity_SHBg, tmpvar_106);
  x2_105.z = dot (unity_SHBb, tmpvar_106);
  tmpvar_103 = (x2_105 + (unity_SHC.xyz * (
    (normal_104.x * normal_104.x)
   - 
    (normal_104.y * normal_104.y)
  )));
  highp vec3 lightColor0_107;
  lightColor0_107 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_108;
  lightColor1_108 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_109;
  lightColor2_109 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_110;
  lightColor3_110 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_111;
  lightAttenSq_111 = unity_4LightAtten0;
  highp vec3 normal_112;
  normal_112 = worldNormal_3;
  highp vec4 tmpvar_113;
  tmpvar_113 = (unity_4LightPosX0 - tmpvar_97.x);
  highp vec4 tmpvar_114;
  tmpvar_114 = (unity_4LightPosY0 - tmpvar_97.y);
  highp vec4 tmpvar_115;
  tmpvar_115 = (unity_4LightPosZ0 - tmpvar_97.z);
  highp vec4 tmpvar_116;
  tmpvar_116 = (((tmpvar_113 * tmpvar_113) + (tmpvar_114 * tmpvar_114)) + (tmpvar_115 * tmpvar_115));
  highp vec4 tmpvar_117;
  tmpvar_117 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_113 * normal_112.x) + (tmpvar_114 * normal_112.y)) + (tmpvar_115 * normal_112.z))
   * 
    inversesqrt(tmpvar_116)
  )) * (1.0/((1.0 + 
    (tmpvar_116 * lightAttenSq_111)
  ))));
  highp vec3 tmpvar_118;
  tmpvar_118 = (tmpvar_103 + ((
    ((lightColor0_107 * tmpvar_117.x) + (lightColor1_108 * tmpvar_117.y))
   + 
    (lightColor2_109 * tmpvar_117.z)
  ) + (lightColor3_110 * tmpvar_117.w)));
  tmpvar_6 = tmpvar_118;
  highp vec4 tmpvar_119;
  tmpvar_119 = (unity_World2Shadow[0] * (_Object2World * tmpvar_12));
  tmpvar_7 = tmpvar_119;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_97;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_15;
  lowp float shadow_16;
  mediump float tmpvar_17;
  tmpvar_17 = texture (_ShadowMapTexture, xlv_TEXCOORD5.xyz);
  lowp float tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump float tmpvar_19;
  tmpvar_19 = (_LightShadowData.x + (tmpvar_18 * (1.0 - _LightShadowData.x)));
  shadow_16 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_20;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_16;
  mediump vec3 normalWorld_21;
  normalWorld_21 = tmpvar_5;
  mediump vec3 tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_21;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  tmpvar_22 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_27 = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_9 * tmpvar_22) * diff_27);
  c_26.xyz = tmpvar_29;
  c_26.w = tmpvar_10;
  c_25.w = c_26.w;
  mediump vec3 tmpvar_30;
  tmpvar_30 = (c_26.xyz + (tmpvar_9 * (xlv_TEXCOORD4 + x1_24)));
  c_25.xyz = tmpvar_30;
  c_4.xyz = c_25.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_8;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_9;
  highp float cse_10;
  cse_10 = _Object2World[3].x;
  highp float cse_11;
  cse_11 = _Object2World[3].y;
  highp float tmpvar_12;
  tmpvar_12 = clamp (((
    fract(((cse_10 + cse_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_12;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_17 = tmpvar_21;
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_22;
    tmpvar_22 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_23;
    isBestWind_23 = (tmpvar_18 == 4.0);
    bool bLeaf2_24;
    bLeaf2_24 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    highp vec3 vDirection_26;
    vDirection_26 = tmpvar_2;
    highp float tmpvar_27;
    if (bLeaf2_24) {
      tmpvar_27 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_28;
    if (bLeaf2_24) {
      tmpvar_28 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_29;
    highp vec4 tmpvar_30;
    tmpvar_30.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_30.x = (tmpvar_27 + tmpvar_22);
    highp vec4 tmpvar_31;
    tmpvar_31 = abs(((
      fract((tmpvar_30 + 0.5))
     * 2.0) - 1.0));
    vPos_29 = (tmpvar_21 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_28 * (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_26 = tmpvar_2;
    vPos_25 = vPos_29;
    if (isBestWind_23) {
      highp vec3 tmpvar_32;
      tmpvar_32 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_33;
      if (bLeaf2_24) {
        tmpvar_33 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_34;
      if (bLeaf2_24) {
        tmpvar_34 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_35;
      if (bLeaf2_24) {
        tmpvar_35 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_36;
      if (bLeaf2_24) {
        tmpvar_36 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_37;
      if (bLeaf2_24) {
        tmpvar_37 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_37 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_38;
      if (bLeaf2_24) {
        tmpvar_38 = bool(1);
      } else {
        tmpvar_38 = bool(1);
      };
      highp float fTwitch_39;
      highp vec3 vAxis_40;
      highp vec3 tmpvar_41;
      tmpvar_41 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_42;
      tmpvar_42 = ((tmpvar_41.x + tmpvar_41.y) + tmpvar_41.z);
      highp vec4 tmpvar_43;
      tmpvar_43.x = (tmpvar_33 + tmpvar_42);
      tmpvar_43.y = ((tmpvar_33 * 0.75) - tmpvar_42);
      tmpvar_43.z = ((tmpvar_33 * 0.01) + tmpvar_42);
      tmpvar_43.w = (tmpvar_33 + tmpvar_42);
      highp vec4 tmpvar_44;
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      tmpvar_44 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = sqrt(dot (vPos_29, vPos_29));
      highp float fAngle_47;
      fAngle_47 = ((_glesMultiTexCoord2.x * tmpvar_35) * (tmpvar_44.x + (tmpvar_44.y * tmpvar_44.y)));
      highp vec2 vSinCos_48;
      vSinCos_48.x = sin(fAngle_47);
      vSinCos_48.y = cos(fAngle_47);
      highp float tmpvar_49;
      tmpvar_49 = (1.0 - vSinCos_48.y);
      highp mat3 tmpvar_50;
      tmpvar_50[0].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.x) + vSinCos_48.y);
      tmpvar_50[0].y = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.y) + (vSinCos_48.x * tmpvar_32.z));
      tmpvar_50[0].z = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.z) - (vSinCos_48.x * tmpvar_32.y));
      tmpvar_50[1].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.y) - (vSinCos_48.x * tmpvar_32.z));
      tmpvar_50[1].y = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.y) + vSinCos_48.y);
      tmpvar_50[1].z = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.z) + (vSinCos_48.x * tmpvar_32.x));
      tmpvar_50[2].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.z) + (vSinCos_48.x * tmpvar_32.y));
      tmpvar_50[2].y = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.z) - (vSinCos_48.x * tmpvar_32.x));
      tmpvar_50[2].z = (((tmpvar_49 * tmpvar_32.z) * tmpvar_32.z) + vSinCos_48.y);
      highp vec3 tmpvar_51;
      tmpvar_51 = ((tmpvar_32.yzx * vRotatedWindVector_16.zxy) - (tmpvar_32.zxy * vRotatedWindVector_16.yzx));
      vAxis_40.xz = tmpvar_51.xz;
      highp float tmpvar_52;
      tmpvar_52 = clamp (dot (vRotatedWindVector_16, tmpvar_32), -1.0, 1.0);
      vAxis_40.y = (tmpvar_51.y + tmpvar_52);
      highp vec3 tmpvar_53;
      tmpvar_53 = normalize(vAxis_40);
      vAxis_40 = tmpvar_53;
      highp float tmpvar_54;
      tmpvar_54 = (1.570796 - (sign(tmpvar_52) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_52))) * (1.570796 + (abs(tmpvar_52) * (-0.2146018 + 
          (abs(tmpvar_52) * (0.08656672 + (abs(tmpvar_52) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_55;
      tmpvar_55 = (tmpvar_44.y - (tmpvar_44.x * tmpvar_44.x));
      fTwitch_39 = 0.0;
      if (tmpvar_38) {
        highp float fTime_56;
        fTime_56 = (tmpvar_37.z + tmpvar_42);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_39 = (tmpvar_37.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_37.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_54 * tmpvar_36)
       + 
        (tmpvar_55 * tmpvar_34)
      ) + fTwitch_39));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.y) + (vSinCos_61.x * tmpvar_53.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.z) - (vSinCos_61.x * tmpvar_53.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.y) - (vSinCos_61.x * tmpvar_53.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.z) + (vSinCos_61.x * tmpvar_53.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.z) + (vSinCos_61.x * tmpvar_53.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.z) - (vSinCos_61.x * tmpvar_53.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_53.z) * tmpvar_53.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_50 * tmpvar_63);
      vDirection_26 = (tmpvar_64 * _glesNormal);
      vPos_25 = (normalize((tmpvar_64 * vPos_29)) * tmpvar_46);
    };
    tmpvar_14 = vDirection_26;
    FinalPosition_17 = vPos_25;
  };
  highp vec3 tmpvar_65;
  tmpvar_65 = (FinalPosition_17 + _glesMultiTexCoord1.xyz);
  FinalPosition_17 = tmpvar_65;
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_66;
    vPos_66 = tmpvar_65;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_67;
      vPos_67 = tmpvar_65;
      highp float fAdherenceScale_68;
      highp vec3 tmpvar_69;
      tmpvar_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_70;
      tmpvar_70 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_71;
      highp float fOscillation_72;
      fOscillation_72 = 1.0;
      highp float fAmount_73;
      highp float fTarget_74;
      highp vec4 tmpvar_75;
      tmpvar_75.x = (tmpvar_70 + _glesMultiTexCoord0.w);
      tmpvar_75.y = ((tmpvar_70 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_75.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_70 + _glesMultiTexCoord0.w));
      tmpvar_75.w = ((tmpvar_70 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      vOscillations_71 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      highp float tmpvar_77;
      tmpvar_77 = (vOscillations_71.y * vOscillations_71.z);
      fTarget_74 = 1.0;
      fAmount_73 = tmpvar_77;
      if ((tmpvar_77 < 0.0)) {
        fTarget_74 = -1.0;
        fAmount_73 = -(tmpvar_77);
      };
      fOscillation_72 = (((
        (mix (mix (tmpvar_77, fTarget_74, fAmount_73), fTarget_74, fAmount_73) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_71.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_71.w * _ST_WindBranchWhip.x)));
      vPos_67 = (tmpvar_65 + ((tmpvar_69 * fOscillation_72) * _ST_WindBranch.y));
      highp vec4 tmpvar_78;
      tmpvar_78.zw = vec2(0.0, 0.0);
      tmpvar_78.x = ((tmpvar_70 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_78.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_79;
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      tmpvar_79 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((
        ((tmpvar_79.x * tmpvar_79.y) * tmpvar_79.x)
       * tmpvar_79.y) * _ST_WindTurbulences.x));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_71.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_67 = (vPos_67 + ((
        ((vRotatedBranchAnchor_15 - vPos_67) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_66 = vPos_67;
    } else {
      highp vec3 vPos_81;
      vPos_81 = vPos_66;
      highp vec3 tmpvar_82;
      tmpvar_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_83;
      tmpvar_83 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_84;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (tmpvar_83 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((tmpvar_83 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_83 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_84 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_84.y * vOscillations_84.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      vPos_81 = (vPos_66 + ((tmpvar_82 * 
        (((mix (
          mix (tmpvar_89, fTarget_86, fAmount_85)
        , fTarget_86, fAmount_85) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_84.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_66 = vPos_81;
    };
    FinalPosition_17 = vPos_66;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = FinalPosition_17;
    highp float fAdjust_91;
    highp float fLength_92;
    fLength_92 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_93;
    tmpvar_93 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_91 = tmpvar_93;
    if ((tmpvar_93 != 0.0)) {
      fAdjust_91 = pow (tmpvar_93, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_94;
    tmpvar_94.zw = vec2(0.0, 0.0);
    tmpvar_94.x = (cse_10 + _ST_WindGlobal.x);
    tmpvar_94.y = (cse_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_95;
    highp vec4 tmpvar_96;
    tmpvar_96 = abs(((
      fract((tmpvar_94 + 0.5))
     * 2.0) - 1.0));
    tmpvar_95 = (((
      (tmpvar_96 * tmpvar_96)
     * 
      (3.0 - (2.0 * tmpvar_96))
    ) - 0.5) * 2.0);
    vPos_90.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * (
      ((_ST_WindGlobal.y * (tmpvar_95.x + (tmpvar_95.y * tmpvar_95.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_91)));
    vPos_90 = (normalize(vPos_90) * fLength_92);
    FinalPosition_17 = vPos_90;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_97;
  v_97.x = _World2Object[0].x;
  v_97.y = _World2Object[1].x;
  v_97.z = _World2Object[2].x;
  v_97.w = _World2Object[3].x;
  highp vec4 v_98;
  v_98.x = _World2Object[0].y;
  v_98.y = _World2Object[1].y;
  v_98.z = _World2Object[2].y;
  v_98.w = _World2Object[3].y;
  highp vec4 v_99;
  v_99.x = _World2Object[0].z;
  v_99.y = _World2Object[1].z;
  v_99.z = _World2Object[2].z;
  v_99.w = _World2Object[3].z;
  highp vec3 tmpvar_100;
  tmpvar_100 = normalize(((
    (v_97.xyz * tmpvar_14.x)
   + 
    (v_98.xyz * tmpvar_14.y)
  ) + (v_99.xyz * tmpvar_14.z)));
  worldNormal_3 = tmpvar_100;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_101;
  tmpvar_101.w = 1.0;
  tmpvar_101.xyz = worldNormal_3;
  mediump vec4 normal_102;
  normal_102 = tmpvar_101;
  mediump vec3 x2_103;
  mediump vec4 tmpvar_104;
  tmpvar_104 = (normal_102.xyzz * normal_102.yzzx);
  x2_103.x = dot (unity_SHBr, tmpvar_104);
  x2_103.y = dot (unity_SHBg, tmpvar_104);
  x2_103.z = dot (unity_SHBb, tmpvar_104);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = (x2_103 + (unity_SHC.xyz * (
    (normal_102.x * normal_102.x)
   - 
    (normal_102.y * normal_102.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_12;
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_14 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_15;
  lowp vec3 tmpvar_16;
  tmpvar_16 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_16;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_4;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_17;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_22 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.xyz = tmpvar_24;
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (c_21.xyz + (tmpvar_8 * (xlv_TEXCOORD4 + x1_19)));
  c_20.xyz = tmpvar_25;
  c_3.xyz = c_20.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_8;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_9;
  highp float cse_10;
  cse_10 = _Object2World[3].x;
  highp float cse_11;
  cse_11 = _Object2World[3].y;
  highp float tmpvar_12;
  tmpvar_12 = clamp (((
    fract(((cse_10 + cse_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_12;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_17 = tmpvar_21;
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_22;
    tmpvar_22 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_23;
    isBestWind_23 = (tmpvar_18 == 4.0);
    bool bLeaf2_24;
    bLeaf2_24 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    highp vec3 vDirection_26;
    vDirection_26 = tmpvar_2;
    highp float tmpvar_27;
    if (bLeaf2_24) {
      tmpvar_27 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_28;
    if (bLeaf2_24) {
      tmpvar_28 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_29;
    highp vec4 tmpvar_30;
    tmpvar_30.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_30.x = (tmpvar_27 + tmpvar_22);
    highp vec4 tmpvar_31;
    tmpvar_31 = abs(((
      fract((tmpvar_30 + 0.5))
     * 2.0) - 1.0));
    vPos_29 = (tmpvar_21 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_28 * (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_26 = tmpvar_2;
    vPos_25 = vPos_29;
    if (isBestWind_23) {
      highp vec3 tmpvar_32;
      tmpvar_32 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_33;
      if (bLeaf2_24) {
        tmpvar_33 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_34;
      if (bLeaf2_24) {
        tmpvar_34 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_35;
      if (bLeaf2_24) {
        tmpvar_35 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_36;
      if (bLeaf2_24) {
        tmpvar_36 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_37;
      if (bLeaf2_24) {
        tmpvar_37 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_37 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_38;
      if (bLeaf2_24) {
        tmpvar_38 = bool(1);
      } else {
        tmpvar_38 = bool(1);
      };
      highp float fTwitch_39;
      highp vec3 vAxis_40;
      highp vec3 tmpvar_41;
      tmpvar_41 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_42;
      tmpvar_42 = ((tmpvar_41.x + tmpvar_41.y) + tmpvar_41.z);
      highp vec4 tmpvar_43;
      tmpvar_43.x = (tmpvar_33 + tmpvar_42);
      tmpvar_43.y = ((tmpvar_33 * 0.75) - tmpvar_42);
      tmpvar_43.z = ((tmpvar_33 * 0.01) + tmpvar_42);
      tmpvar_43.w = (tmpvar_33 + tmpvar_42);
      highp vec4 tmpvar_44;
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      tmpvar_44 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = sqrt(dot (vPos_29, vPos_29));
      highp float fAngle_47;
      fAngle_47 = ((_glesMultiTexCoord2.x * tmpvar_35) * (tmpvar_44.x + (tmpvar_44.y * tmpvar_44.y)));
      highp vec2 vSinCos_48;
      vSinCos_48.x = sin(fAngle_47);
      vSinCos_48.y = cos(fAngle_47);
      highp float tmpvar_49;
      tmpvar_49 = (1.0 - vSinCos_48.y);
      highp mat3 tmpvar_50;
      tmpvar_50[0].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.x) + vSinCos_48.y);
      tmpvar_50[0].y = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.y) + (vSinCos_48.x * tmpvar_32.z));
      tmpvar_50[0].z = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.z) - (vSinCos_48.x * tmpvar_32.y));
      tmpvar_50[1].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.y) - (vSinCos_48.x * tmpvar_32.z));
      tmpvar_50[1].y = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.y) + vSinCos_48.y);
      tmpvar_50[1].z = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.z) + (vSinCos_48.x * tmpvar_32.x));
      tmpvar_50[2].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.z) + (vSinCos_48.x * tmpvar_32.y));
      tmpvar_50[2].y = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.z) - (vSinCos_48.x * tmpvar_32.x));
      tmpvar_50[2].z = (((tmpvar_49 * tmpvar_32.z) * tmpvar_32.z) + vSinCos_48.y);
      highp vec3 tmpvar_51;
      tmpvar_51 = ((tmpvar_32.yzx * vRotatedWindVector_16.zxy) - (tmpvar_32.zxy * vRotatedWindVector_16.yzx));
      vAxis_40.xz = tmpvar_51.xz;
      highp float tmpvar_52;
      tmpvar_52 = clamp (dot (vRotatedWindVector_16, tmpvar_32), -1.0, 1.0);
      vAxis_40.y = (tmpvar_51.y + tmpvar_52);
      highp vec3 tmpvar_53;
      tmpvar_53 = normalize(vAxis_40);
      vAxis_40 = tmpvar_53;
      highp float tmpvar_54;
      tmpvar_54 = (1.570796 - (sign(tmpvar_52) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_52))) * (1.570796 + (abs(tmpvar_52) * (-0.2146018 + 
          (abs(tmpvar_52) * (0.08656672 + (abs(tmpvar_52) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_55;
      tmpvar_55 = (tmpvar_44.y - (tmpvar_44.x * tmpvar_44.x));
      fTwitch_39 = 0.0;
      if (tmpvar_38) {
        highp float fTime_56;
        fTime_56 = (tmpvar_37.z + tmpvar_42);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_39 = (tmpvar_37.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_37.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_54 * tmpvar_36)
       + 
        (tmpvar_55 * tmpvar_34)
      ) + fTwitch_39));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.y) + (vSinCos_61.x * tmpvar_53.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.z) - (vSinCos_61.x * tmpvar_53.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.y) - (vSinCos_61.x * tmpvar_53.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.z) + (vSinCos_61.x * tmpvar_53.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.z) + (vSinCos_61.x * tmpvar_53.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.z) - (vSinCos_61.x * tmpvar_53.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_53.z) * tmpvar_53.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_50 * tmpvar_63);
      vDirection_26 = (tmpvar_64 * _glesNormal);
      vPos_25 = (normalize((tmpvar_64 * vPos_29)) * tmpvar_46);
    };
    tmpvar_14 = vDirection_26;
    FinalPosition_17 = vPos_25;
  };
  highp vec3 tmpvar_65;
  tmpvar_65 = (FinalPosition_17 + _glesMultiTexCoord1.xyz);
  FinalPosition_17 = tmpvar_65;
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_66;
    vPos_66 = tmpvar_65;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_67;
      vPos_67 = tmpvar_65;
      highp float fAdherenceScale_68;
      highp vec3 tmpvar_69;
      tmpvar_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_70;
      tmpvar_70 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_71;
      highp float fOscillation_72;
      fOscillation_72 = 1.0;
      highp float fAmount_73;
      highp float fTarget_74;
      highp vec4 tmpvar_75;
      tmpvar_75.x = (tmpvar_70 + _glesMultiTexCoord0.w);
      tmpvar_75.y = ((tmpvar_70 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_75.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_70 + _glesMultiTexCoord0.w));
      tmpvar_75.w = ((tmpvar_70 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      vOscillations_71 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      highp float tmpvar_77;
      tmpvar_77 = (vOscillations_71.y * vOscillations_71.z);
      fTarget_74 = 1.0;
      fAmount_73 = tmpvar_77;
      if ((tmpvar_77 < 0.0)) {
        fTarget_74 = -1.0;
        fAmount_73 = -(tmpvar_77);
      };
      fOscillation_72 = (((
        (mix (mix (tmpvar_77, fTarget_74, fAmount_73), fTarget_74, fAmount_73) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_71.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_71.w * _ST_WindBranchWhip.x)));
      vPos_67 = (tmpvar_65 + ((tmpvar_69 * fOscillation_72) * _ST_WindBranch.y));
      highp vec4 tmpvar_78;
      tmpvar_78.zw = vec2(0.0, 0.0);
      tmpvar_78.x = ((tmpvar_70 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_78.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_79;
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      tmpvar_79 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((
        ((tmpvar_79.x * tmpvar_79.y) * tmpvar_79.x)
       * tmpvar_79.y) * _ST_WindTurbulences.x));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_71.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_67 = (vPos_67 + ((
        ((vRotatedBranchAnchor_15 - vPos_67) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_66 = vPos_67;
    } else {
      highp vec3 vPos_81;
      vPos_81 = vPos_66;
      highp vec3 tmpvar_82;
      tmpvar_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_83;
      tmpvar_83 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_84;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (tmpvar_83 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((tmpvar_83 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_83 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_84 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_84.y * vOscillations_84.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      vPos_81 = (vPos_66 + ((tmpvar_82 * 
        (((mix (
          mix (tmpvar_89, fTarget_86, fAmount_85)
        , fTarget_86, fAmount_85) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_84.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_66 = vPos_81;
    };
    FinalPosition_17 = vPos_66;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = FinalPosition_17;
    highp float fAdjust_91;
    highp float fLength_92;
    fLength_92 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_93;
    tmpvar_93 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_91 = tmpvar_93;
    if ((tmpvar_93 != 0.0)) {
      fAdjust_91 = pow (tmpvar_93, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_94;
    tmpvar_94.zw = vec2(0.0, 0.0);
    tmpvar_94.x = (cse_10 + _ST_WindGlobal.x);
    tmpvar_94.y = (cse_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_95;
    highp vec4 tmpvar_96;
    tmpvar_96 = abs(((
      fract((tmpvar_94 + 0.5))
     * 2.0) - 1.0));
    tmpvar_95 = (((
      (tmpvar_96 * tmpvar_96)
     * 
      (3.0 - (2.0 * tmpvar_96))
    ) - 0.5) * 2.0);
    vPos_90.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * (
      ((_ST_WindGlobal.y * (tmpvar_95.x + (tmpvar_95.y * tmpvar_95.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_91)));
    vPos_90 = (normalize(vPos_90) * fLength_92);
    FinalPosition_17 = vPos_90;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_97;
  v_97.x = _World2Object[0].x;
  v_97.y = _World2Object[1].x;
  v_97.z = _World2Object[2].x;
  v_97.w = _World2Object[3].x;
  highp vec4 v_98;
  v_98.x = _World2Object[0].y;
  v_98.y = _World2Object[1].y;
  v_98.z = _World2Object[2].y;
  v_98.w = _World2Object[3].y;
  highp vec4 v_99;
  v_99.x = _World2Object[0].z;
  v_99.y = _World2Object[1].z;
  v_99.z = _World2Object[2].z;
  v_99.w = _World2Object[3].z;
  highp vec3 tmpvar_100;
  tmpvar_100 = normalize(((
    (v_97.xyz * tmpvar_14.x)
   + 
    (v_98.xyz * tmpvar_14.y)
  ) + (v_99.xyz * tmpvar_14.z)));
  worldNormal_3 = tmpvar_100;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_101;
  tmpvar_101.w = 1.0;
  tmpvar_101.xyz = worldNormal_3;
  mediump vec4 normal_102;
  normal_102 = tmpvar_101;
  mediump vec3 x2_103;
  mediump vec4 tmpvar_104;
  tmpvar_104 = (normal_102.xyzz * normal_102.yzzx);
  x2_103.x = dot (unity_SHBr, tmpvar_104);
  x2_103.y = dot (unity_SHBg, tmpvar_104);
  x2_103.z = dot (unity_SHBb, tmpvar_104);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = (x2_103 + (unity_SHC.xyz * (
    (normal_102.x * normal_102.x)
   - 
    (normal_102.y * normal_102.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_12;
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_14 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_15;
  lowp vec3 tmpvar_16;
  tmpvar_16 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_16;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_4;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_17;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_22 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.xyz = tmpvar_24;
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (c_21.xyz + (tmpvar_8 * (xlv_TEXCOORD4 + x1_19)));
  c_20.xyz = tmpvar_25;
  c_3.xyz = c_20.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_9;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_13;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_22;
  tmpvar_22 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_18 = tmpvar_22;
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_23;
    tmpvar_23 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_24;
    isBestWind_24 = (tmpvar_19 == 4.0);
    bool bLeaf2_25;
    bLeaf2_25 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    highp vec3 vDirection_27;
    vDirection_27 = tmpvar_2;
    highp float tmpvar_28;
    if (bLeaf2_25) {
      tmpvar_28 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_29;
    if (bLeaf2_25) {
      tmpvar_29 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_30;
    highp vec4 tmpvar_31;
    tmpvar_31.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_31.x = (tmpvar_28 + tmpvar_23);
    highp vec4 tmpvar_32;
    tmpvar_32 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    vPos_30 = (tmpvar_22 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_29 * (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_27 = tmpvar_2;
    vPos_26 = vPos_30;
    if (isBestWind_24) {
      highp vec3 tmpvar_33;
      tmpvar_33 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_34;
      if (bLeaf2_25) {
        tmpvar_34 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_35;
      if (bLeaf2_25) {
        tmpvar_35 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_36;
      if (bLeaf2_25) {
        tmpvar_36 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_37;
      if (bLeaf2_25) {
        tmpvar_37 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_38;
      if (bLeaf2_25) {
        tmpvar_38 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_38 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_39;
      if (bLeaf2_25) {
        tmpvar_39 = bool(1);
      } else {
        tmpvar_39 = bool(1);
      };
      highp float fTwitch_40;
      highp vec3 vAxis_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_34 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_34 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_34 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_34 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_30, vPos_30));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_36) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) + (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) - (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_33.z) * tmpvar_33.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_33.yzx * vRotatedWindVector_17.zxy) - (tmpvar_33.zxy * vRotatedWindVector_17.yzx));
      vAxis_41.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_17, tmpvar_33), -1.0, 1.0);
      vAxis_41.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_41);
      vAxis_41 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_56;
      tmpvar_56 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_40 = 0.0;
      if (tmpvar_39) {
        highp float fTime_57;
        fTime_57 = (tmpvar_38.z + tmpvar_43);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_40 = (tmpvar_38.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_38.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_37)
       + 
        (tmpvar_56 * tmpvar_35)
      ) + fTwitch_40));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_51 * tmpvar_64);
      vDirection_27 = (tmpvar_65 * _glesNormal);
      vPos_26 = (normalize((tmpvar_65 * vPos_30)) * tmpvar_47);
    };
    tmpvar_15 = vDirection_27;
    FinalPosition_18 = vPos_26;
  };
  highp vec3 tmpvar_66;
  tmpvar_66 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  FinalPosition_18 = tmpvar_66;
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_67;
    vPos_67 = tmpvar_66;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_68;
      vPos_68 = tmpvar_66;
      highp float fAdherenceScale_69;
      highp vec3 tmpvar_70;
      tmpvar_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_71;
      tmpvar_71 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_72;
      highp float fOscillation_73;
      fOscillation_73 = 1.0;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.x = (tmpvar_71 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((tmpvar_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_71 + _glesMultiTexCoord0.w));
      tmpvar_76.w = ((tmpvar_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_72 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_72.y * vOscillations_72.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      fOscillation_73 = (((
        (mix (mix (tmpvar_78, fTarget_75, fAmount_74), fTarget_75, fAmount_74) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_72.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_72.w * _ST_WindBranchWhip.x)));
      vPos_68 = (tmpvar_66 + ((tmpvar_70 * fOscillation_73) * _ST_WindBranch.y));
      highp vec4 tmpvar_79;
      tmpvar_79.zw = vec2(0.0, 0.0);
      tmpvar_79.x = ((tmpvar_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_79.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_80;
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      tmpvar_80 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((
        ((tmpvar_80.x * tmpvar_80.y) * tmpvar_80.x)
       * tmpvar_80.y) * _ST_WindTurbulences.x));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_72.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_68 = (vPos_68 + ((
        ((vRotatedBranchAnchor_16 - vPos_68) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_67 = vPos_68;
    } else {
      highp vec3 vPos_82;
      vPos_82 = vPos_67;
      highp vec3 tmpvar_83;
      tmpvar_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_84;
      tmpvar_84 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_85;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (tmpvar_84 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((tmpvar_84 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_84 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_85 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_85.y * vOscillations_85.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      vPos_82 = (vPos_67 + ((tmpvar_83 * 
        (((mix (
          mix (tmpvar_90, fTarget_87, fAmount_86)
        , fTarget_87, fAmount_86) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_85.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_67 = vPos_82;
    };
    FinalPosition_18 = vPos_67;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_18;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_95.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    vPos_91.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_96.x + (tmpvar_96.y * tmpvar_96.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_92)));
    vPos_91 = (normalize(vPos_91) * fLength_93);
    FinalPosition_18 = vPos_91;
  };
  tmpvar_14.xyz = FinalPosition_18;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_98;
  v_98.x = _World2Object[0].x;
  v_98.y = _World2Object[1].x;
  v_98.z = _World2Object[2].x;
  v_98.w = _World2Object[3].x;
  highp vec4 v_99;
  v_99.x = _World2Object[0].y;
  v_99.y = _World2Object[1].y;
  v_99.z = _World2Object[2].y;
  v_99.w = _World2Object[3].y;
  highp vec4 v_100;
  v_100.x = _World2Object[0].z;
  v_100.y = _World2Object[1].z;
  v_100.z = _World2Object[2].z;
  v_100.w = _World2Object[3].z;
  highp vec3 tmpvar_101;
  tmpvar_101 = normalize(((
    (v_98.xyz * tmpvar_15.x)
   + 
    (v_99.xyz * tmpvar_15.y)
  ) + (v_100.xyz * tmpvar_15.z)));
  worldNormal_3 = tmpvar_101;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_102;
  tmpvar_102.w = 1.0;
  tmpvar_102.xyz = worldNormal_3;
  mediump vec4 normal_103;
  normal_103 = tmpvar_102;
  mediump vec3 x2_104;
  mediump vec4 tmpvar_105;
  tmpvar_105 = (normal_103.xyzz * normal_103.yzzx);
  x2_104.x = dot (unity_SHBr, tmpvar_105);
  x2_104.y = dot (unity_SHBg, tmpvar_105);
  x2_104.z = dot (unity_SHBb, tmpvar_105);
  highp vec4 tmpvar_106;
  tmpvar_106 = (unity_World2Shadow[0] * (_Object2World * tmpvar_14));
  tmpvar_6 = tmpvar_106;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = (x2_104 + (unity_SHC.xyz * (
    (normal_103.x * normal_103.x)
   - 
    (normal_103.y * normal_103.y)
  )));
  xlv_TEXCOORD5 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  lowp float tmpvar_17;
  mediump float dist_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x;
  dist_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (float((dist_18 > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_17 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_21;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_17;
  mediump vec3 normalWorld_22;
  normalWorld_22 = tmpvar_5;
  mediump vec3 tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_22;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  tmpvar_23 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_23;
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_28 = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tmpvar_9 * tmpvar_23) * diff_28);
  c_27.xyz = tmpvar_30;
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  mediump vec3 tmpvar_31;
  tmpvar_31 = (c_27.xyz + (tmpvar_9 * (xlv_TEXCOORD4 + x1_25)));
  c_26.xyz = tmpvar_31;
  c_4.xyz = c_26.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_9;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_13;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_22;
  tmpvar_22 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_18 = tmpvar_22;
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_23;
    tmpvar_23 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_24;
    isBestWind_24 = (tmpvar_19 == 4.0);
    bool bLeaf2_25;
    bLeaf2_25 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    highp vec3 vDirection_27;
    vDirection_27 = tmpvar_2;
    highp float tmpvar_28;
    if (bLeaf2_25) {
      tmpvar_28 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_29;
    if (bLeaf2_25) {
      tmpvar_29 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_30;
    highp vec4 tmpvar_31;
    tmpvar_31.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_31.x = (tmpvar_28 + tmpvar_23);
    highp vec4 tmpvar_32;
    tmpvar_32 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    vPos_30 = (tmpvar_22 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_29 * (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_27 = tmpvar_2;
    vPos_26 = vPos_30;
    if (isBestWind_24) {
      highp vec3 tmpvar_33;
      tmpvar_33 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_34;
      if (bLeaf2_25) {
        tmpvar_34 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_35;
      if (bLeaf2_25) {
        tmpvar_35 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_36;
      if (bLeaf2_25) {
        tmpvar_36 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_37;
      if (bLeaf2_25) {
        tmpvar_37 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_38;
      if (bLeaf2_25) {
        tmpvar_38 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_38 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_39;
      if (bLeaf2_25) {
        tmpvar_39 = bool(1);
      } else {
        tmpvar_39 = bool(1);
      };
      highp float fTwitch_40;
      highp vec3 vAxis_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_34 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_34 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_34 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_34 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_30, vPos_30));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_36) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) + (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) - (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_33.z) * tmpvar_33.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_33.yzx * vRotatedWindVector_17.zxy) - (tmpvar_33.zxy * vRotatedWindVector_17.yzx));
      vAxis_41.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_17, tmpvar_33), -1.0, 1.0);
      vAxis_41.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_41);
      vAxis_41 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_56;
      tmpvar_56 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_40 = 0.0;
      if (tmpvar_39) {
        highp float fTime_57;
        fTime_57 = (tmpvar_38.z + tmpvar_43);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_40 = (tmpvar_38.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_38.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_37)
       + 
        (tmpvar_56 * tmpvar_35)
      ) + fTwitch_40));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_51 * tmpvar_64);
      vDirection_27 = (tmpvar_65 * _glesNormal);
      vPos_26 = (normalize((tmpvar_65 * vPos_30)) * tmpvar_47);
    };
    tmpvar_15 = vDirection_27;
    FinalPosition_18 = vPos_26;
  };
  highp vec3 tmpvar_66;
  tmpvar_66 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  FinalPosition_18 = tmpvar_66;
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_67;
    vPos_67 = tmpvar_66;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_68;
      vPos_68 = tmpvar_66;
      highp float fAdherenceScale_69;
      highp vec3 tmpvar_70;
      tmpvar_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_71;
      tmpvar_71 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_72;
      highp float fOscillation_73;
      fOscillation_73 = 1.0;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.x = (tmpvar_71 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((tmpvar_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_71 + _glesMultiTexCoord0.w));
      tmpvar_76.w = ((tmpvar_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_72 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_72.y * vOscillations_72.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      fOscillation_73 = (((
        (mix (mix (tmpvar_78, fTarget_75, fAmount_74), fTarget_75, fAmount_74) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_72.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_72.w * _ST_WindBranchWhip.x)));
      vPos_68 = (tmpvar_66 + ((tmpvar_70 * fOscillation_73) * _ST_WindBranch.y));
      highp vec4 tmpvar_79;
      tmpvar_79.zw = vec2(0.0, 0.0);
      tmpvar_79.x = ((tmpvar_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_79.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_80;
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      tmpvar_80 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((
        ((tmpvar_80.x * tmpvar_80.y) * tmpvar_80.x)
       * tmpvar_80.y) * _ST_WindTurbulences.x));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_72.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_68 = (vPos_68 + ((
        ((vRotatedBranchAnchor_16 - vPos_68) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_67 = vPos_68;
    } else {
      highp vec3 vPos_82;
      vPos_82 = vPos_67;
      highp vec3 tmpvar_83;
      tmpvar_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_84;
      tmpvar_84 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_85;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (tmpvar_84 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((tmpvar_84 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_84 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_85 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_85.y * vOscillations_85.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      vPos_82 = (vPos_67 + ((tmpvar_83 * 
        (((mix (
          mix (tmpvar_90, fTarget_87, fAmount_86)
        , fTarget_87, fAmount_86) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_85.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_67 = vPos_82;
    };
    FinalPosition_18 = vPos_67;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_18;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_95.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    vPos_91.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_96.x + (tmpvar_96.y * tmpvar_96.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_92)));
    vPos_91 = (normalize(vPos_91) * fLength_93);
    FinalPosition_18 = vPos_91;
  };
  tmpvar_14.xyz = FinalPosition_18;
  tmpvar_5 = tmpvar_7;
  highp vec3 tmpvar_98;
  tmpvar_98 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_99;
  v_99.x = _World2Object[0].x;
  v_99.y = _World2Object[1].x;
  v_99.z = _World2Object[2].x;
  v_99.w = _World2Object[3].x;
  highp vec4 v_100;
  v_100.x = _World2Object[0].y;
  v_100.y = _World2Object[1].y;
  v_100.z = _World2Object[2].y;
  v_100.w = _World2Object[3].y;
  highp vec4 v_101;
  v_101.x = _World2Object[0].z;
  v_101.y = _World2Object[1].z;
  v_101.z = _World2Object[2].z;
  v_101.w = _World2Object[3].z;
  highp vec3 tmpvar_102;
  tmpvar_102 = normalize(((
    (v_99.xyz * tmpvar_15.x)
   + 
    (v_100.xyz * tmpvar_15.y)
  ) + (v_101.xyz * tmpvar_15.z)));
  worldNormal_3 = tmpvar_102;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_103;
  tmpvar_103.w = 1.0;
  tmpvar_103.xyz = worldNormal_3;
  mediump vec3 tmpvar_104;
  mediump vec4 normal_105;
  normal_105 = tmpvar_103;
  mediump vec3 x2_106;
  mediump vec4 tmpvar_107;
  tmpvar_107 = (normal_105.xyzz * normal_105.yzzx);
  x2_106.x = dot (unity_SHBr, tmpvar_107);
  x2_106.y = dot (unity_SHBg, tmpvar_107);
  x2_106.z = dot (unity_SHBb, tmpvar_107);
  tmpvar_104 = (x2_106 + (unity_SHC.xyz * (
    (normal_105.x * normal_105.x)
   - 
    (normal_105.y * normal_105.y)
  )));
  highp vec3 lightColor0_108;
  lightColor0_108 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_109;
  lightColor1_109 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_110;
  lightColor2_110 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_111;
  lightColor3_111 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_112;
  lightAttenSq_112 = unity_4LightAtten0;
  highp vec3 normal_113;
  normal_113 = worldNormal_3;
  highp vec4 tmpvar_114;
  tmpvar_114 = (unity_4LightPosX0 - tmpvar_98.x);
  highp vec4 tmpvar_115;
  tmpvar_115 = (unity_4LightPosY0 - tmpvar_98.y);
  highp vec4 tmpvar_116;
  tmpvar_116 = (unity_4LightPosZ0 - tmpvar_98.z);
  highp vec4 tmpvar_117;
  tmpvar_117 = (((tmpvar_114 * tmpvar_114) + (tmpvar_115 * tmpvar_115)) + (tmpvar_116 * tmpvar_116));
  highp vec4 tmpvar_118;
  tmpvar_118 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_114 * normal_113.x) + (tmpvar_115 * normal_113.y)) + (tmpvar_116 * normal_113.z))
   * 
    inversesqrt(tmpvar_117)
  )) * (1.0/((1.0 + 
    (tmpvar_117 * lightAttenSq_112)
  ))));
  highp vec3 tmpvar_119;
  tmpvar_119 = (tmpvar_104 + ((
    ((lightColor0_108 * tmpvar_118.x) + (lightColor1_109 * tmpvar_118.y))
   + 
    (lightColor2_110 * tmpvar_118.z)
  ) + (lightColor3_111 * tmpvar_118.w)));
  tmpvar_6 = tmpvar_119;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_98;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_12;
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_14 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_15;
  lowp vec3 tmpvar_16;
  tmpvar_16 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_16;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_4;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_17;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_22 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.xyz = tmpvar_24;
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (c_21.xyz + (tmpvar_8 * (xlv_TEXCOORD4 + x1_19)));
  c_20.xyz = tmpvar_25;
  c_3.xyz = c_20.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_9;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_13;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_22;
  tmpvar_22 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_18 = tmpvar_22;
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_23;
    tmpvar_23 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_24;
    isBestWind_24 = (tmpvar_19 == 4.0);
    bool bLeaf2_25;
    bLeaf2_25 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    highp vec3 vDirection_27;
    vDirection_27 = tmpvar_2;
    highp float tmpvar_28;
    if (bLeaf2_25) {
      tmpvar_28 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_29;
    if (bLeaf2_25) {
      tmpvar_29 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_30;
    highp vec4 tmpvar_31;
    tmpvar_31.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_31.x = (tmpvar_28 + tmpvar_23);
    highp vec4 tmpvar_32;
    tmpvar_32 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    vPos_30 = (tmpvar_22 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_29 * (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_27 = tmpvar_2;
    vPos_26 = vPos_30;
    if (isBestWind_24) {
      highp vec3 tmpvar_33;
      tmpvar_33 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_34;
      if (bLeaf2_25) {
        tmpvar_34 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_35;
      if (bLeaf2_25) {
        tmpvar_35 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_36;
      if (bLeaf2_25) {
        tmpvar_36 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_37;
      if (bLeaf2_25) {
        tmpvar_37 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_38;
      if (bLeaf2_25) {
        tmpvar_38 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_38 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_39;
      if (bLeaf2_25) {
        tmpvar_39 = bool(1);
      } else {
        tmpvar_39 = bool(1);
      };
      highp float fTwitch_40;
      highp vec3 vAxis_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_34 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_34 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_34 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_34 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_30, vPos_30));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_36) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) + (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) - (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_33.z) * tmpvar_33.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_33.yzx * vRotatedWindVector_17.zxy) - (tmpvar_33.zxy * vRotatedWindVector_17.yzx));
      vAxis_41.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_17, tmpvar_33), -1.0, 1.0);
      vAxis_41.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_41);
      vAxis_41 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_56;
      tmpvar_56 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_40 = 0.0;
      if (tmpvar_39) {
        highp float fTime_57;
        fTime_57 = (tmpvar_38.z + tmpvar_43);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_40 = (tmpvar_38.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_38.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_37)
       + 
        (tmpvar_56 * tmpvar_35)
      ) + fTwitch_40));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_51 * tmpvar_64);
      vDirection_27 = (tmpvar_65 * _glesNormal);
      vPos_26 = (normalize((tmpvar_65 * vPos_30)) * tmpvar_47);
    };
    tmpvar_15 = vDirection_27;
    FinalPosition_18 = vPos_26;
  };
  highp vec3 tmpvar_66;
  tmpvar_66 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  FinalPosition_18 = tmpvar_66;
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_67;
    vPos_67 = tmpvar_66;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_68;
      vPos_68 = tmpvar_66;
      highp float fAdherenceScale_69;
      highp vec3 tmpvar_70;
      tmpvar_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_71;
      tmpvar_71 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_72;
      highp float fOscillation_73;
      fOscillation_73 = 1.0;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.x = (tmpvar_71 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((tmpvar_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_71 + _glesMultiTexCoord0.w));
      tmpvar_76.w = ((tmpvar_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_72 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_72.y * vOscillations_72.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      fOscillation_73 = (((
        (mix (mix (tmpvar_78, fTarget_75, fAmount_74), fTarget_75, fAmount_74) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_72.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_72.w * _ST_WindBranchWhip.x)));
      vPos_68 = (tmpvar_66 + ((tmpvar_70 * fOscillation_73) * _ST_WindBranch.y));
      highp vec4 tmpvar_79;
      tmpvar_79.zw = vec2(0.0, 0.0);
      tmpvar_79.x = ((tmpvar_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_79.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_80;
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      tmpvar_80 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((
        ((tmpvar_80.x * tmpvar_80.y) * tmpvar_80.x)
       * tmpvar_80.y) * _ST_WindTurbulences.x));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_72.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_68 = (vPos_68 + ((
        ((vRotatedBranchAnchor_16 - vPos_68) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_67 = vPos_68;
    } else {
      highp vec3 vPos_82;
      vPos_82 = vPos_67;
      highp vec3 tmpvar_83;
      tmpvar_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_84;
      tmpvar_84 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_85;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (tmpvar_84 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((tmpvar_84 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_84 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_85 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_85.y * vOscillations_85.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      vPos_82 = (vPos_67 + ((tmpvar_83 * 
        (((mix (
          mix (tmpvar_90, fTarget_87, fAmount_86)
        , fTarget_87, fAmount_86) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_85.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_67 = vPos_82;
    };
    FinalPosition_18 = vPos_67;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_18;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_95.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    vPos_91.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_96.x + (tmpvar_96.y * tmpvar_96.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_92)));
    vPos_91 = (normalize(vPos_91) * fLength_93);
    FinalPosition_18 = vPos_91;
  };
  tmpvar_14.xyz = FinalPosition_18;
  tmpvar_5 = tmpvar_7;
  highp vec3 tmpvar_98;
  tmpvar_98 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_99;
  v_99.x = _World2Object[0].x;
  v_99.y = _World2Object[1].x;
  v_99.z = _World2Object[2].x;
  v_99.w = _World2Object[3].x;
  highp vec4 v_100;
  v_100.x = _World2Object[0].y;
  v_100.y = _World2Object[1].y;
  v_100.z = _World2Object[2].y;
  v_100.w = _World2Object[3].y;
  highp vec4 v_101;
  v_101.x = _World2Object[0].z;
  v_101.y = _World2Object[1].z;
  v_101.z = _World2Object[2].z;
  v_101.w = _World2Object[3].z;
  highp vec3 tmpvar_102;
  tmpvar_102 = normalize(((
    (v_99.xyz * tmpvar_15.x)
   + 
    (v_100.xyz * tmpvar_15.y)
  ) + (v_101.xyz * tmpvar_15.z)));
  worldNormal_3 = tmpvar_102;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_103;
  tmpvar_103.w = 1.0;
  tmpvar_103.xyz = worldNormal_3;
  mediump vec3 tmpvar_104;
  mediump vec4 normal_105;
  normal_105 = tmpvar_103;
  mediump vec3 x2_106;
  mediump vec4 tmpvar_107;
  tmpvar_107 = (normal_105.xyzz * normal_105.yzzx);
  x2_106.x = dot (unity_SHBr, tmpvar_107);
  x2_106.y = dot (unity_SHBg, tmpvar_107);
  x2_106.z = dot (unity_SHBb, tmpvar_107);
  tmpvar_104 = (x2_106 + (unity_SHC.xyz * (
    (normal_105.x * normal_105.x)
   - 
    (normal_105.y * normal_105.y)
  )));
  highp vec3 lightColor0_108;
  lightColor0_108 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_109;
  lightColor1_109 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_110;
  lightColor2_110 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_111;
  lightColor3_111 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_112;
  lightAttenSq_112 = unity_4LightAtten0;
  highp vec3 normal_113;
  normal_113 = worldNormal_3;
  highp vec4 tmpvar_114;
  tmpvar_114 = (unity_4LightPosX0 - tmpvar_98.x);
  highp vec4 tmpvar_115;
  tmpvar_115 = (unity_4LightPosY0 - tmpvar_98.y);
  highp vec4 tmpvar_116;
  tmpvar_116 = (unity_4LightPosZ0 - tmpvar_98.z);
  highp vec4 tmpvar_117;
  tmpvar_117 = (((tmpvar_114 * tmpvar_114) + (tmpvar_115 * tmpvar_115)) + (tmpvar_116 * tmpvar_116));
  highp vec4 tmpvar_118;
  tmpvar_118 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_114 * normal_113.x) + (tmpvar_115 * normal_113.y)) + (tmpvar_116 * normal_113.z))
   * 
    inversesqrt(tmpvar_117)
  )) * (1.0/((1.0 + 
    (tmpvar_117 * lightAttenSq_112)
  ))));
  highp vec3 tmpvar_119;
  tmpvar_119 = (tmpvar_104 + ((
    ((lightColor0_108 * tmpvar_118.x) + (lightColor1_109 * tmpvar_118.y))
   + 
    (lightColor2_110 * tmpvar_118.z)
  ) + (lightColor3_111 * tmpvar_118.w)));
  tmpvar_6 = tmpvar_119;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_98;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_6;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_12;
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_14 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_15;
  lowp vec3 tmpvar_16;
  tmpvar_16 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_16;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_4;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_17;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_22 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.xyz = tmpvar_24;
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (c_21.xyz + (tmpvar_8 * (xlv_TEXCOORD4 + x1_19)));
  c_20.xyz = tmpvar_25;
  c_3.xyz = c_20.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_10;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_14;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_23;
  tmpvar_23 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_23;
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_24;
    tmpvar_24 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_25;
    isBestWind_25 = (tmpvar_20 == 4.0);
    bool bLeaf2_26;
    bLeaf2_26 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_27;
    vPos_27 = tmpvar_23;
    highp vec3 vDirection_28;
    vDirection_28 = tmpvar_2;
    highp float tmpvar_29;
    if (bLeaf2_26) {
      tmpvar_29 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_30;
    if (bLeaf2_26) {
      tmpvar_30 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_31;
    highp vec4 tmpvar_32;
    tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_32.x = (tmpvar_29 + tmpvar_24);
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    vPos_31 = (tmpvar_23 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_30 * (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_28 = tmpvar_2;
    vPos_27 = vPos_31;
    if (isBestWind_25) {
      highp vec3 tmpvar_34;
      tmpvar_34 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_35;
      if (bLeaf2_26) {
        tmpvar_35 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_36;
      if (bLeaf2_26) {
        tmpvar_36 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_37;
      if (bLeaf2_26) {
        tmpvar_37 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_38;
      if (bLeaf2_26) {
        tmpvar_38 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_39;
      if (bLeaf2_26) {
        tmpvar_39 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_39 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_40;
      if (bLeaf2_26) {
        tmpvar_40 = bool(1);
      } else {
        tmpvar_40 = bool(1);
      };
      highp float fTwitch_41;
      highp vec3 vAxis_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_35 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_35 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_35 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_35 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_31, vPos_31));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_37) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) + (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) - (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_34.z) * tmpvar_34.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_34.yzx * vRotatedWindVector_18.zxy) - (tmpvar_34.zxy * vRotatedWindVector_18.yzx));
      vAxis_42.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_18, tmpvar_34), -1.0, 1.0);
      vAxis_42.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_42);
      vAxis_42 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_57;
      tmpvar_57 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_41 = 0.0;
      if (tmpvar_40) {
        highp float fTime_58;
        fTime_58 = (tmpvar_39.z + tmpvar_44);
        highp vec4 tmpvar_59;
        tmpvar_59.zw = vec2(0.0, 0.0);
        tmpvar_59.x = fTime_58;
        tmpvar_59.y = (0.87 * fTime_58);
        highp vec4 tmpvar_60;
        highp vec4 tmpvar_61;
        tmpvar_61 = abs(((
          fract((tmpvar_59 + 0.5))
         * 2.0) - 1.0));
        tmpvar_60 = (((
          (tmpvar_61 * tmpvar_61)
         * 
          (3.0 - (2.0 * tmpvar_61))
        ) - 0.5) * 2.0);
        fTwitch_41 = (tmpvar_39.x * pow (clamp (
          ((((tmpvar_60.x * tmpvar_60.y) * tmpvar_60.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_39.y));
      };
      highp float fAngle_62;
      fAngle_62 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_38)
       + 
        (tmpvar_57 * tmpvar_36)
      ) + fTwitch_41));
      highp vec2 vSinCos_63;
      vSinCos_63.x = sin(fAngle_62);
      vSinCos_63.y = cos(fAngle_62);
      highp float tmpvar_64;
      tmpvar_64 = (1.0 - vSinCos_63.y);
      highp mat3 tmpvar_65;
      tmpvar_65[0].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_63.y);
      tmpvar_65[0].y = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[0].z = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[1].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[1].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_63.y);
      tmpvar_65[1].z = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[2].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].z = (((tmpvar_64 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_63.y);
      highp mat3 tmpvar_66;
      tmpvar_66 = (tmpvar_52 * tmpvar_65);
      vDirection_28 = (tmpvar_66 * _glesNormal);
      vPos_27 = (normalize((tmpvar_66 * vPos_31)) * tmpvar_48);
    };
    tmpvar_16 = vDirection_28;
    FinalPosition_19 = vPos_27;
  };
  highp vec3 tmpvar_67;
  tmpvar_67 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_67;
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_68;
    vPos_68 = tmpvar_67;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_69;
      vPos_69 = tmpvar_67;
      highp float fAdherenceScale_70;
      highp vec3 tmpvar_71;
      tmpvar_71 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_72;
      tmpvar_72 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_73;
      highp float fOscillation_74;
      fOscillation_74 = 1.0;
      highp float fAmount_75;
      highp float fTarget_76;
      highp vec4 tmpvar_77;
      tmpvar_77.x = (tmpvar_72 + _glesMultiTexCoord0.w);
      tmpvar_77.y = ((tmpvar_72 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_77.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_72 + _glesMultiTexCoord0.w));
      tmpvar_77.w = ((tmpvar_72 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      vOscillations_73 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      highp float tmpvar_79;
      tmpvar_79 = (vOscillations_73.y * vOscillations_73.z);
      fTarget_76 = 1.0;
      fAmount_75 = tmpvar_79;
      if ((tmpvar_79 < 0.0)) {
        fTarget_76 = -1.0;
        fAmount_75 = -(tmpvar_79);
      };
      fOscillation_74 = (((
        (mix (mix (tmpvar_79, fTarget_76, fAmount_75), fTarget_76, fAmount_75) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_73.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_73.w * _ST_WindBranchWhip.x)));
      vPos_69 = (tmpvar_67 + ((tmpvar_71 * fOscillation_74) * _ST_WindBranch.y));
      highp vec4 tmpvar_80;
      tmpvar_80.zw = vec2(0.0, 0.0);
      tmpvar_80.x = ((tmpvar_72 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_80.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_81;
      highp vec4 tmpvar_82;
      tmpvar_82 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      tmpvar_81 = (((
        (tmpvar_82 * tmpvar_82)
       * 
        (3.0 - (2.0 * tmpvar_82))
      ) - 0.5) * 2.0);
      fAdherenceScale_70 = (1.0 - ((
        ((tmpvar_81.x * tmpvar_81.y) * tmpvar_81.x)
       * tmpvar_81.y) * _ST_WindTurbulences.x));
      fAdherenceScale_70 = (fAdherenceScale_70 + ((vOscillations_73.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_69 = (vPos_69 + ((
        ((vRotatedBranchAnchor_17 - vPos_69) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_70) * _glesMultiTexCoord0.z));
      vPos_68 = vPos_69;
    } else {
      highp vec3 vPos_83;
      vPos_83 = vPos_68;
      highp vec3 tmpvar_84;
      tmpvar_84 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_85;
      tmpvar_85 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_86;
      highp float fAmount_87;
      highp float fTarget_88;
      highp vec4 tmpvar_89;
      tmpvar_89.w = 0.0;
      tmpvar_89.x = (tmpvar_85 + _glesMultiTexCoord0.w);
      tmpvar_89.y = ((tmpvar_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_89.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_90;
      tmpvar_90 = abs(((
        fract((tmpvar_89 + 0.5))
       * 2.0) - 1.0));
      vOscillations_86 = (((
        (tmpvar_90 * tmpvar_90)
       * 
        (3.0 - (2.0 * tmpvar_90))
      ) - 0.5) * 2.0);
      highp float tmpvar_91;
      tmpvar_91 = (vOscillations_86.y * vOscillations_86.z);
      fTarget_88 = 1.0;
      fAmount_87 = tmpvar_91;
      if ((tmpvar_91 < 0.0)) {
        fTarget_88 = -1.0;
        fAmount_87 = -(tmpvar_91);
      };
      vPos_83 = (vPos_68 + ((tmpvar_84 * 
        (((mix (
          mix (tmpvar_91, fTarget_88, fAmount_87)
        , fTarget_88, fAmount_87) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_86.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_68 = vPos_83;
    };
    FinalPosition_19 = vPos_68;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_92;
    vPos_92 = FinalPosition_19;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_96.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    vPos_92.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_97.x + (tmpvar_97.y * tmpvar_97.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_93)));
    vPos_92 = (normalize(vPos_92) * fLength_94);
    FinalPosition_19 = vPos_92;
  };
  tmpvar_15.xyz = FinalPosition_19;
  tmpvar_5 = tmpvar_8;
  highp vec3 tmpvar_99;
  tmpvar_99 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_100;
  v_100.x = _World2Object[0].x;
  v_100.y = _World2Object[1].x;
  v_100.z = _World2Object[2].x;
  v_100.w = _World2Object[3].x;
  highp vec4 v_101;
  v_101.x = _World2Object[0].y;
  v_101.y = _World2Object[1].y;
  v_101.z = _World2Object[2].y;
  v_101.w = _World2Object[3].y;
  highp vec4 v_102;
  v_102.x = _World2Object[0].z;
  v_102.y = _World2Object[1].z;
  v_102.z = _World2Object[2].z;
  v_102.w = _World2Object[3].z;
  highp vec3 tmpvar_103;
  tmpvar_103 = normalize(((
    (v_100.xyz * tmpvar_16.x)
   + 
    (v_101.xyz * tmpvar_16.y)
  ) + (v_102.xyz * tmpvar_16.z)));
  worldNormal_3 = tmpvar_103;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_104;
  tmpvar_104.w = 1.0;
  tmpvar_104.xyz = worldNormal_3;
  mediump vec3 tmpvar_105;
  mediump vec4 normal_106;
  normal_106 = tmpvar_104;
  mediump vec3 x2_107;
  mediump vec4 tmpvar_108;
  tmpvar_108 = (normal_106.xyzz * normal_106.yzzx);
  x2_107.x = dot (unity_SHBr, tmpvar_108);
  x2_107.y = dot (unity_SHBg, tmpvar_108);
  x2_107.z = dot (unity_SHBb, tmpvar_108);
  tmpvar_105 = (x2_107 + (unity_SHC.xyz * (
    (normal_106.x * normal_106.x)
   - 
    (normal_106.y * normal_106.y)
  )));
  highp vec3 lightColor0_109;
  lightColor0_109 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_110;
  lightColor1_110 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_111;
  lightColor2_111 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_112;
  lightColor3_112 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_113;
  lightAttenSq_113 = unity_4LightAtten0;
  highp vec3 normal_114;
  normal_114 = worldNormal_3;
  highp vec4 tmpvar_115;
  tmpvar_115 = (unity_4LightPosX0 - tmpvar_99.x);
  highp vec4 tmpvar_116;
  tmpvar_116 = (unity_4LightPosY0 - tmpvar_99.y);
  highp vec4 tmpvar_117;
  tmpvar_117 = (unity_4LightPosZ0 - tmpvar_99.z);
  highp vec4 tmpvar_118;
  tmpvar_118 = (((tmpvar_115 * tmpvar_115) + (tmpvar_116 * tmpvar_116)) + (tmpvar_117 * tmpvar_117));
  highp vec4 tmpvar_119;
  tmpvar_119 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_115 * normal_114.x) + (tmpvar_116 * normal_114.y)) + (tmpvar_117 * normal_114.z))
   * 
    inversesqrt(tmpvar_118)
  )) * (1.0/((1.0 + 
    (tmpvar_118 * lightAttenSq_113)
  ))));
  highp vec3 tmpvar_120;
  tmpvar_120 = (tmpvar_105 + ((
    ((lightColor0_109 * tmpvar_119.x) + (lightColor1_110 * tmpvar_119.y))
   + 
    (lightColor2_111 * tmpvar_119.z)
  ) + (lightColor3_112 * tmpvar_119.w)));
  tmpvar_6 = tmpvar_120;
  highp vec4 tmpvar_121;
  tmpvar_121 = (unity_World2Shadow[0] * (_Object2World * tmpvar_15));
  tmpvar_7 = tmpvar_121;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_99;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  lowp float tmpvar_17;
  mediump float dist_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x;
  dist_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (float((dist_18 > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_17 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_21;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_17;
  mediump vec3 normalWorld_22;
  normalWorld_22 = tmpvar_5;
  mediump vec3 tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_22;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  tmpvar_23 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_23;
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_28 = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tmpvar_9 * tmpvar_23) * diff_28);
  c_27.xyz = tmpvar_30;
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  mediump vec3 tmpvar_31;
  tmpvar_31 = (c_27.xyz + (tmpvar_9 * (xlv_TEXCOORD4 + x1_25)));
  c_26.xyz = tmpvar_31;
  c_4.xyz = c_26.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_9;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_13;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_22;
  tmpvar_22 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_18 = tmpvar_22;
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_23;
    tmpvar_23 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_24;
    isBestWind_24 = (tmpvar_19 == 4.0);
    bool bLeaf2_25;
    bLeaf2_25 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    highp vec3 vDirection_27;
    vDirection_27 = tmpvar_2;
    highp float tmpvar_28;
    if (bLeaf2_25) {
      tmpvar_28 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_29;
    if (bLeaf2_25) {
      tmpvar_29 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_30;
    highp vec4 tmpvar_31;
    tmpvar_31.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_31.x = (tmpvar_28 + tmpvar_23);
    highp vec4 tmpvar_32;
    tmpvar_32 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    vPos_30 = (tmpvar_22 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_29 * (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_27 = tmpvar_2;
    vPos_26 = vPos_30;
    if (isBestWind_24) {
      highp vec3 tmpvar_33;
      tmpvar_33 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_34;
      if (bLeaf2_25) {
        tmpvar_34 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_35;
      if (bLeaf2_25) {
        tmpvar_35 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_36;
      if (bLeaf2_25) {
        tmpvar_36 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_37;
      if (bLeaf2_25) {
        tmpvar_37 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_38;
      if (bLeaf2_25) {
        tmpvar_38 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_38 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_39;
      if (bLeaf2_25) {
        tmpvar_39 = bool(1);
      } else {
        tmpvar_39 = bool(1);
      };
      highp float fTwitch_40;
      highp vec3 vAxis_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_34 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_34 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_34 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_34 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_30, vPos_30));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_36) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) + (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) - (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_33.z) * tmpvar_33.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_33.yzx * vRotatedWindVector_17.zxy) - (tmpvar_33.zxy * vRotatedWindVector_17.yzx));
      vAxis_41.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_17, tmpvar_33), -1.0, 1.0);
      vAxis_41.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_41);
      vAxis_41 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_56;
      tmpvar_56 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_40 = 0.0;
      if (tmpvar_39) {
        highp float fTime_57;
        fTime_57 = (tmpvar_38.z + tmpvar_43);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_40 = (tmpvar_38.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_38.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_37)
       + 
        (tmpvar_56 * tmpvar_35)
      ) + fTwitch_40));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_51 * tmpvar_64);
      vDirection_27 = (tmpvar_65 * _glesNormal);
      vPos_26 = (normalize((tmpvar_65 * vPos_30)) * tmpvar_47);
    };
    tmpvar_15 = vDirection_27;
    FinalPosition_18 = vPos_26;
  };
  highp vec3 tmpvar_66;
  tmpvar_66 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  FinalPosition_18 = tmpvar_66;
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_67;
    vPos_67 = tmpvar_66;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_68;
      vPos_68 = tmpvar_66;
      highp float fAdherenceScale_69;
      highp vec3 tmpvar_70;
      tmpvar_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_71;
      tmpvar_71 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_72;
      highp float fOscillation_73;
      fOscillation_73 = 1.0;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.x = (tmpvar_71 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((tmpvar_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_71 + _glesMultiTexCoord0.w));
      tmpvar_76.w = ((tmpvar_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_72 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_72.y * vOscillations_72.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      fOscillation_73 = (((
        (mix (mix (tmpvar_78, fTarget_75, fAmount_74), fTarget_75, fAmount_74) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_72.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_72.w * _ST_WindBranchWhip.x)));
      vPos_68 = (tmpvar_66 + ((tmpvar_70 * fOscillation_73) * _ST_WindBranch.y));
      highp vec4 tmpvar_79;
      tmpvar_79.zw = vec2(0.0, 0.0);
      tmpvar_79.x = ((tmpvar_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_79.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_80;
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      tmpvar_80 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((
        ((tmpvar_80.x * tmpvar_80.y) * tmpvar_80.x)
       * tmpvar_80.y) * _ST_WindTurbulences.x));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_72.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_68 = (vPos_68 + ((
        ((vRotatedBranchAnchor_16 - vPos_68) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_67 = vPos_68;
    } else {
      highp vec3 vPos_82;
      vPos_82 = vPos_67;
      highp vec3 tmpvar_83;
      tmpvar_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_84;
      tmpvar_84 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_85;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (tmpvar_84 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((tmpvar_84 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_84 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_85 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_85.y * vOscillations_85.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      vPos_82 = (vPos_67 + ((tmpvar_83 * 
        (((mix (
          mix (tmpvar_90, fTarget_87, fAmount_86)
        , fTarget_87, fAmount_86) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_85.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_67 = vPos_82;
    };
    FinalPosition_18 = vPos_67;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_18;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_95.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    vPos_91.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_96.x + (tmpvar_96.y * tmpvar_96.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_92)));
    vPos_91 = (normalize(vPos_91) * fLength_93);
    FinalPosition_18 = vPos_91;
  };
  tmpvar_14.xyz = FinalPosition_18;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_98;
  v_98.x = _World2Object[0].x;
  v_98.y = _World2Object[1].x;
  v_98.z = _World2Object[2].x;
  v_98.w = _World2Object[3].x;
  highp vec4 v_99;
  v_99.x = _World2Object[0].y;
  v_99.y = _World2Object[1].y;
  v_99.z = _World2Object[2].y;
  v_99.w = _World2Object[3].y;
  highp vec4 v_100;
  v_100.x = _World2Object[0].z;
  v_100.y = _World2Object[1].z;
  v_100.z = _World2Object[2].z;
  v_100.w = _World2Object[3].z;
  highp vec3 tmpvar_101;
  tmpvar_101 = normalize(((
    (v_98.xyz * tmpvar_15.x)
   + 
    (v_99.xyz * tmpvar_15.y)
  ) + (v_100.xyz * tmpvar_15.z)));
  worldNormal_3 = tmpvar_101;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_102;
  tmpvar_102.w = 1.0;
  tmpvar_102.xyz = worldNormal_3;
  mediump vec4 normal_103;
  normal_103 = tmpvar_102;
  mediump vec3 x2_104;
  mediump vec4 tmpvar_105;
  tmpvar_105 = (normal_103.xyzz * normal_103.yzzx);
  x2_104.x = dot (unity_SHBr, tmpvar_105);
  x2_104.y = dot (unity_SHBg, tmpvar_105);
  x2_104.z = dot (unity_SHBb, tmpvar_105);
  highp vec4 tmpvar_106;
  tmpvar_106 = (unity_World2Shadow[0] * (_Object2World * tmpvar_14));
  tmpvar_6 = tmpvar_106;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = (x2_104 + (unity_SHC.xyz * (
    (normal_103.x * normal_103.x)
   - 
    (normal_103.y * normal_103.y)
  )));
  xlv_TEXCOORD5 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  lowp float shadow_17;
  lowp float tmpvar_18;
  tmpvar_18 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz);
  mediump float tmpvar_19;
  tmpvar_19 = (_LightShadowData.x + (tmpvar_18 * (1.0 - _LightShadowData.x)));
  shadow_17 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_20;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_17;
  mediump vec3 normalWorld_21;
  normalWorld_21 = tmpvar_5;
  mediump vec3 tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_21;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  tmpvar_22 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_27 = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_9 * tmpvar_22) * diff_27);
  c_26.xyz = tmpvar_29;
  c_26.w = tmpvar_10;
  c_25.w = c_26.w;
  mediump vec3 tmpvar_30;
  tmpvar_30 = (c_26.xyz + (tmpvar_9 * (xlv_TEXCOORD4 + x1_24)));
  c_25.xyz = tmpvar_30;
  c_4.xyz = c_25.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_9;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_13;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_22;
  tmpvar_22 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_18 = tmpvar_22;
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_23;
    tmpvar_23 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_24;
    isBestWind_24 = (tmpvar_19 == 4.0);
    bool bLeaf2_25;
    bLeaf2_25 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    highp vec3 vDirection_27;
    vDirection_27 = tmpvar_2;
    highp float tmpvar_28;
    if (bLeaf2_25) {
      tmpvar_28 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_29;
    if (bLeaf2_25) {
      tmpvar_29 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_30;
    highp vec4 tmpvar_31;
    tmpvar_31.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_31.x = (tmpvar_28 + tmpvar_23);
    highp vec4 tmpvar_32;
    tmpvar_32 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    vPos_30 = (tmpvar_22 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_29 * (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_27 = tmpvar_2;
    vPos_26 = vPos_30;
    if (isBestWind_24) {
      highp vec3 tmpvar_33;
      tmpvar_33 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_34;
      if (bLeaf2_25) {
        tmpvar_34 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_35;
      if (bLeaf2_25) {
        tmpvar_35 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_36;
      if (bLeaf2_25) {
        tmpvar_36 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_37;
      if (bLeaf2_25) {
        tmpvar_37 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_38;
      if (bLeaf2_25) {
        tmpvar_38 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_38 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_39;
      if (bLeaf2_25) {
        tmpvar_39 = bool(1);
      } else {
        tmpvar_39 = bool(1);
      };
      highp float fTwitch_40;
      highp vec3 vAxis_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_34 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_34 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_34 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_34 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_30, vPos_30));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_36) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) + (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) - (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_33.z) * tmpvar_33.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_33.yzx * vRotatedWindVector_17.zxy) - (tmpvar_33.zxy * vRotatedWindVector_17.yzx));
      vAxis_41.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_17, tmpvar_33), -1.0, 1.0);
      vAxis_41.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_41);
      vAxis_41 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_56;
      tmpvar_56 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_40 = 0.0;
      if (tmpvar_39) {
        highp float fTime_57;
        fTime_57 = (tmpvar_38.z + tmpvar_43);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_40 = (tmpvar_38.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_38.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_37)
       + 
        (tmpvar_56 * tmpvar_35)
      ) + fTwitch_40));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_51 * tmpvar_64);
      vDirection_27 = (tmpvar_65 * _glesNormal);
      vPos_26 = (normalize((tmpvar_65 * vPos_30)) * tmpvar_47);
    };
    tmpvar_15 = vDirection_27;
    FinalPosition_18 = vPos_26;
  };
  highp vec3 tmpvar_66;
  tmpvar_66 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  FinalPosition_18 = tmpvar_66;
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_67;
    vPos_67 = tmpvar_66;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_68;
      vPos_68 = tmpvar_66;
      highp float fAdherenceScale_69;
      highp vec3 tmpvar_70;
      tmpvar_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_71;
      tmpvar_71 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_72;
      highp float fOscillation_73;
      fOscillation_73 = 1.0;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.x = (tmpvar_71 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((tmpvar_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_71 + _glesMultiTexCoord0.w));
      tmpvar_76.w = ((tmpvar_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_72 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_72.y * vOscillations_72.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      fOscillation_73 = (((
        (mix (mix (tmpvar_78, fTarget_75, fAmount_74), fTarget_75, fAmount_74) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_72.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_72.w * _ST_WindBranchWhip.x)));
      vPos_68 = (tmpvar_66 + ((tmpvar_70 * fOscillation_73) * _ST_WindBranch.y));
      highp vec4 tmpvar_79;
      tmpvar_79.zw = vec2(0.0, 0.0);
      tmpvar_79.x = ((tmpvar_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_79.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_80;
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      tmpvar_80 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((
        ((tmpvar_80.x * tmpvar_80.y) * tmpvar_80.x)
       * tmpvar_80.y) * _ST_WindTurbulences.x));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_72.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_68 = (vPos_68 + ((
        ((vRotatedBranchAnchor_16 - vPos_68) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_67 = vPos_68;
    } else {
      highp vec3 vPos_82;
      vPos_82 = vPos_67;
      highp vec3 tmpvar_83;
      tmpvar_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_84;
      tmpvar_84 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_85;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (tmpvar_84 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((tmpvar_84 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_84 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_85 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_85.y * vOscillations_85.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      vPos_82 = (vPos_67 + ((tmpvar_83 * 
        (((mix (
          mix (tmpvar_90, fTarget_87, fAmount_86)
        , fTarget_87, fAmount_86) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_85.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_67 = vPos_82;
    };
    FinalPosition_18 = vPos_67;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_18;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_95.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    vPos_91.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_96.x + (tmpvar_96.y * tmpvar_96.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_92)));
    vPos_91 = (normalize(vPos_91) * fLength_93);
    FinalPosition_18 = vPos_91;
  };
  tmpvar_14.xyz = FinalPosition_18;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_98;
  v_98.x = _World2Object[0].x;
  v_98.y = _World2Object[1].x;
  v_98.z = _World2Object[2].x;
  v_98.w = _World2Object[3].x;
  highp vec4 v_99;
  v_99.x = _World2Object[0].y;
  v_99.y = _World2Object[1].y;
  v_99.z = _World2Object[2].y;
  v_99.w = _World2Object[3].y;
  highp vec4 v_100;
  v_100.x = _World2Object[0].z;
  v_100.y = _World2Object[1].z;
  v_100.z = _World2Object[2].z;
  v_100.w = _World2Object[3].z;
  highp vec3 tmpvar_101;
  tmpvar_101 = normalize(((
    (v_98.xyz * tmpvar_15.x)
   + 
    (v_99.xyz * tmpvar_15.y)
  ) + (v_100.xyz * tmpvar_15.z)));
  worldNormal_3 = tmpvar_101;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_102;
  tmpvar_102.w = 1.0;
  tmpvar_102.xyz = worldNormal_3;
  mediump vec4 normal_103;
  normal_103 = tmpvar_102;
  mediump vec3 x2_104;
  mediump vec4 tmpvar_105;
  tmpvar_105 = (normal_103.xyzz * normal_103.yzzx);
  x2_104.x = dot (unity_SHBr, tmpvar_105);
  x2_104.y = dot (unity_SHBg, tmpvar_105);
  x2_104.z = dot (unity_SHBb, tmpvar_105);
  highp vec4 tmpvar_106;
  tmpvar_106 = (unity_World2Shadow[0] * (_Object2World * tmpvar_14));
  tmpvar_6 = tmpvar_106;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = (x2_104 + (unity_SHC.xyz * (
    (normal_103.x * normal_103.x)
   - 
    (normal_103.y * normal_103.y)
  )));
  xlv_TEXCOORD5 = tmpvar_6;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  lowp float shadow_17;
  mediump float tmpvar_18;
  tmpvar_18 = texture (_ShadowMapTexture, xlv_TEXCOORD5.xyz);
  lowp float tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump float tmpvar_20;
  tmpvar_20 = (_LightShadowData.x + (tmpvar_19 * (1.0 - _LightShadowData.x)));
  shadow_17 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_21;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_17;
  mediump vec3 normalWorld_22;
  normalWorld_22 = tmpvar_5;
  mediump vec3 tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_22;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  tmpvar_23 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_23;
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_28 = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tmpvar_9 * tmpvar_23) * diff_28);
  c_27.xyz = tmpvar_30;
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  mediump vec3 tmpvar_31;
  tmpvar_31 = (c_27.xyz + (tmpvar_9 * (xlv_TEXCOORD4 + x1_25)));
  c_26.xyz = tmpvar_31;
  c_4.xyz = c_26.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_10;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_14;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_23;
  tmpvar_23 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_23;
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_24;
    tmpvar_24 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_25;
    isBestWind_25 = (tmpvar_20 == 4.0);
    bool bLeaf2_26;
    bLeaf2_26 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_27;
    vPos_27 = tmpvar_23;
    highp vec3 vDirection_28;
    vDirection_28 = tmpvar_2;
    highp float tmpvar_29;
    if (bLeaf2_26) {
      tmpvar_29 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_30;
    if (bLeaf2_26) {
      tmpvar_30 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_31;
    highp vec4 tmpvar_32;
    tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_32.x = (tmpvar_29 + tmpvar_24);
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    vPos_31 = (tmpvar_23 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_30 * (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_28 = tmpvar_2;
    vPos_27 = vPos_31;
    if (isBestWind_25) {
      highp vec3 tmpvar_34;
      tmpvar_34 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_35;
      if (bLeaf2_26) {
        tmpvar_35 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_36;
      if (bLeaf2_26) {
        tmpvar_36 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_37;
      if (bLeaf2_26) {
        tmpvar_37 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_38;
      if (bLeaf2_26) {
        tmpvar_38 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_39;
      if (bLeaf2_26) {
        tmpvar_39 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_39 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_40;
      if (bLeaf2_26) {
        tmpvar_40 = bool(1);
      } else {
        tmpvar_40 = bool(1);
      };
      highp float fTwitch_41;
      highp vec3 vAxis_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_35 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_35 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_35 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_35 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_31, vPos_31));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_37) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) + (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) - (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_34.z) * tmpvar_34.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_34.yzx * vRotatedWindVector_18.zxy) - (tmpvar_34.zxy * vRotatedWindVector_18.yzx));
      vAxis_42.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_18, tmpvar_34), -1.0, 1.0);
      vAxis_42.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_42);
      vAxis_42 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_57;
      tmpvar_57 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_41 = 0.0;
      if (tmpvar_40) {
        highp float fTime_58;
        fTime_58 = (tmpvar_39.z + tmpvar_44);
        highp vec4 tmpvar_59;
        tmpvar_59.zw = vec2(0.0, 0.0);
        tmpvar_59.x = fTime_58;
        tmpvar_59.y = (0.87 * fTime_58);
        highp vec4 tmpvar_60;
        highp vec4 tmpvar_61;
        tmpvar_61 = abs(((
          fract((tmpvar_59 + 0.5))
         * 2.0) - 1.0));
        tmpvar_60 = (((
          (tmpvar_61 * tmpvar_61)
         * 
          (3.0 - (2.0 * tmpvar_61))
        ) - 0.5) * 2.0);
        fTwitch_41 = (tmpvar_39.x * pow (clamp (
          ((((tmpvar_60.x * tmpvar_60.y) * tmpvar_60.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_39.y));
      };
      highp float fAngle_62;
      fAngle_62 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_38)
       + 
        (tmpvar_57 * tmpvar_36)
      ) + fTwitch_41));
      highp vec2 vSinCos_63;
      vSinCos_63.x = sin(fAngle_62);
      vSinCos_63.y = cos(fAngle_62);
      highp float tmpvar_64;
      tmpvar_64 = (1.0 - vSinCos_63.y);
      highp mat3 tmpvar_65;
      tmpvar_65[0].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_63.y);
      tmpvar_65[0].y = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[0].z = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[1].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[1].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_63.y);
      tmpvar_65[1].z = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[2].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].z = (((tmpvar_64 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_63.y);
      highp mat3 tmpvar_66;
      tmpvar_66 = (tmpvar_52 * tmpvar_65);
      vDirection_28 = (tmpvar_66 * _glesNormal);
      vPos_27 = (normalize((tmpvar_66 * vPos_31)) * tmpvar_48);
    };
    tmpvar_16 = vDirection_28;
    FinalPosition_19 = vPos_27;
  };
  highp vec3 tmpvar_67;
  tmpvar_67 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_67;
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_68;
    vPos_68 = tmpvar_67;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_69;
      vPos_69 = tmpvar_67;
      highp float fAdherenceScale_70;
      highp vec3 tmpvar_71;
      tmpvar_71 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_72;
      tmpvar_72 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_73;
      highp float fOscillation_74;
      fOscillation_74 = 1.0;
      highp float fAmount_75;
      highp float fTarget_76;
      highp vec4 tmpvar_77;
      tmpvar_77.x = (tmpvar_72 + _glesMultiTexCoord0.w);
      tmpvar_77.y = ((tmpvar_72 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_77.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_72 + _glesMultiTexCoord0.w));
      tmpvar_77.w = ((tmpvar_72 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      vOscillations_73 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      highp float tmpvar_79;
      tmpvar_79 = (vOscillations_73.y * vOscillations_73.z);
      fTarget_76 = 1.0;
      fAmount_75 = tmpvar_79;
      if ((tmpvar_79 < 0.0)) {
        fTarget_76 = -1.0;
        fAmount_75 = -(tmpvar_79);
      };
      fOscillation_74 = (((
        (mix (mix (tmpvar_79, fTarget_76, fAmount_75), fTarget_76, fAmount_75) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_73.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_73.w * _ST_WindBranchWhip.x)));
      vPos_69 = (tmpvar_67 + ((tmpvar_71 * fOscillation_74) * _ST_WindBranch.y));
      highp vec4 tmpvar_80;
      tmpvar_80.zw = vec2(0.0, 0.0);
      tmpvar_80.x = ((tmpvar_72 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_80.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_81;
      highp vec4 tmpvar_82;
      tmpvar_82 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      tmpvar_81 = (((
        (tmpvar_82 * tmpvar_82)
       * 
        (3.0 - (2.0 * tmpvar_82))
      ) - 0.5) * 2.0);
      fAdherenceScale_70 = (1.0 - ((
        ((tmpvar_81.x * tmpvar_81.y) * tmpvar_81.x)
       * tmpvar_81.y) * _ST_WindTurbulences.x));
      fAdherenceScale_70 = (fAdherenceScale_70 + ((vOscillations_73.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_69 = (vPos_69 + ((
        ((vRotatedBranchAnchor_17 - vPos_69) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_70) * _glesMultiTexCoord0.z));
      vPos_68 = vPos_69;
    } else {
      highp vec3 vPos_83;
      vPos_83 = vPos_68;
      highp vec3 tmpvar_84;
      tmpvar_84 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_85;
      tmpvar_85 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_86;
      highp float fAmount_87;
      highp float fTarget_88;
      highp vec4 tmpvar_89;
      tmpvar_89.w = 0.0;
      tmpvar_89.x = (tmpvar_85 + _glesMultiTexCoord0.w);
      tmpvar_89.y = ((tmpvar_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_89.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_90;
      tmpvar_90 = abs(((
        fract((tmpvar_89 + 0.5))
       * 2.0) - 1.0));
      vOscillations_86 = (((
        (tmpvar_90 * tmpvar_90)
       * 
        (3.0 - (2.0 * tmpvar_90))
      ) - 0.5) * 2.0);
      highp float tmpvar_91;
      tmpvar_91 = (vOscillations_86.y * vOscillations_86.z);
      fTarget_88 = 1.0;
      fAmount_87 = tmpvar_91;
      if ((tmpvar_91 < 0.0)) {
        fTarget_88 = -1.0;
        fAmount_87 = -(tmpvar_91);
      };
      vPos_83 = (vPos_68 + ((tmpvar_84 * 
        (((mix (
          mix (tmpvar_91, fTarget_88, fAmount_87)
        , fTarget_88, fAmount_87) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_86.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_68 = vPos_83;
    };
    FinalPosition_19 = vPos_68;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_92;
    vPos_92 = FinalPosition_19;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_96.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    vPos_92.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_97.x + (tmpvar_97.y * tmpvar_97.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_93)));
    vPos_92 = (normalize(vPos_92) * fLength_94);
    FinalPosition_19 = vPos_92;
  };
  tmpvar_15.xyz = FinalPosition_19;
  tmpvar_5 = tmpvar_8;
  highp vec3 tmpvar_99;
  tmpvar_99 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_100;
  v_100.x = _World2Object[0].x;
  v_100.y = _World2Object[1].x;
  v_100.z = _World2Object[2].x;
  v_100.w = _World2Object[3].x;
  highp vec4 v_101;
  v_101.x = _World2Object[0].y;
  v_101.y = _World2Object[1].y;
  v_101.z = _World2Object[2].y;
  v_101.w = _World2Object[3].y;
  highp vec4 v_102;
  v_102.x = _World2Object[0].z;
  v_102.y = _World2Object[1].z;
  v_102.z = _World2Object[2].z;
  v_102.w = _World2Object[3].z;
  highp vec3 tmpvar_103;
  tmpvar_103 = normalize(((
    (v_100.xyz * tmpvar_16.x)
   + 
    (v_101.xyz * tmpvar_16.y)
  ) + (v_102.xyz * tmpvar_16.z)));
  worldNormal_3 = tmpvar_103;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_104;
  tmpvar_104.w = 1.0;
  tmpvar_104.xyz = worldNormal_3;
  mediump vec3 tmpvar_105;
  mediump vec4 normal_106;
  normal_106 = tmpvar_104;
  mediump vec3 x2_107;
  mediump vec4 tmpvar_108;
  tmpvar_108 = (normal_106.xyzz * normal_106.yzzx);
  x2_107.x = dot (unity_SHBr, tmpvar_108);
  x2_107.y = dot (unity_SHBg, tmpvar_108);
  x2_107.z = dot (unity_SHBb, tmpvar_108);
  tmpvar_105 = (x2_107 + (unity_SHC.xyz * (
    (normal_106.x * normal_106.x)
   - 
    (normal_106.y * normal_106.y)
  )));
  highp vec3 lightColor0_109;
  lightColor0_109 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_110;
  lightColor1_110 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_111;
  lightColor2_111 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_112;
  lightColor3_112 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_113;
  lightAttenSq_113 = unity_4LightAtten0;
  highp vec3 normal_114;
  normal_114 = worldNormal_3;
  highp vec4 tmpvar_115;
  tmpvar_115 = (unity_4LightPosX0 - tmpvar_99.x);
  highp vec4 tmpvar_116;
  tmpvar_116 = (unity_4LightPosY0 - tmpvar_99.y);
  highp vec4 tmpvar_117;
  tmpvar_117 = (unity_4LightPosZ0 - tmpvar_99.z);
  highp vec4 tmpvar_118;
  tmpvar_118 = (((tmpvar_115 * tmpvar_115) + (tmpvar_116 * tmpvar_116)) + (tmpvar_117 * tmpvar_117));
  highp vec4 tmpvar_119;
  tmpvar_119 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_115 * normal_114.x) + (tmpvar_116 * normal_114.y)) + (tmpvar_117 * normal_114.z))
   * 
    inversesqrt(tmpvar_118)
  )) * (1.0/((1.0 + 
    (tmpvar_118 * lightAttenSq_113)
  ))));
  highp vec3 tmpvar_120;
  tmpvar_120 = (tmpvar_105 + ((
    ((lightColor0_109 * tmpvar_119.x) + (lightColor1_110 * tmpvar_119.y))
   + 
    (lightColor2_111 * tmpvar_119.z)
  ) + (lightColor3_112 * tmpvar_119.w)));
  tmpvar_6 = tmpvar_120;
  highp vec4 tmpvar_121;
  tmpvar_121 = (unity_World2Shadow[0] * (_Object2World * tmpvar_15));
  tmpvar_7 = tmpvar_121;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_99;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  lowp float shadow_17;
  lowp float tmpvar_18;
  tmpvar_18 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz);
  mediump float tmpvar_19;
  tmpvar_19 = (_LightShadowData.x + (tmpvar_18 * (1.0 - _LightShadowData.x)));
  shadow_17 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_20;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_17;
  mediump vec3 normalWorld_21;
  normalWorld_21 = tmpvar_5;
  mediump vec3 tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_21;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  tmpvar_22 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_27 = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_9 * tmpvar_22) * diff_27);
  c_26.xyz = tmpvar_29;
  c_26.w = tmpvar_10;
  c_25.w = c_26.w;
  mediump vec3 tmpvar_30;
  tmpvar_30 = (c_26.xyz + (tmpvar_9 * (xlv_TEXCOORD4 + x1_24)));
  c_25.xyz = tmpvar_30;
  c_4.xyz = c_25.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_10;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_14;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_23;
  tmpvar_23 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_23;
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_24;
    tmpvar_24 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_25;
    isBestWind_25 = (tmpvar_20 == 4.0);
    bool bLeaf2_26;
    bLeaf2_26 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_27;
    vPos_27 = tmpvar_23;
    highp vec3 vDirection_28;
    vDirection_28 = tmpvar_2;
    highp float tmpvar_29;
    if (bLeaf2_26) {
      tmpvar_29 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_30;
    if (bLeaf2_26) {
      tmpvar_30 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_31;
    highp vec4 tmpvar_32;
    tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_32.x = (tmpvar_29 + tmpvar_24);
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    vPos_31 = (tmpvar_23 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_30 * (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_28 = tmpvar_2;
    vPos_27 = vPos_31;
    if (isBestWind_25) {
      highp vec3 tmpvar_34;
      tmpvar_34 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_35;
      if (bLeaf2_26) {
        tmpvar_35 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_36;
      if (bLeaf2_26) {
        tmpvar_36 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_37;
      if (bLeaf2_26) {
        tmpvar_37 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_38;
      if (bLeaf2_26) {
        tmpvar_38 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_39;
      if (bLeaf2_26) {
        tmpvar_39 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_39 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_40;
      if (bLeaf2_26) {
        tmpvar_40 = bool(1);
      } else {
        tmpvar_40 = bool(1);
      };
      highp float fTwitch_41;
      highp vec3 vAxis_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_35 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_35 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_35 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_35 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_31, vPos_31));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_37) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) + (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) - (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_34.z) * tmpvar_34.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_34.yzx * vRotatedWindVector_18.zxy) - (tmpvar_34.zxy * vRotatedWindVector_18.yzx));
      vAxis_42.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_18, tmpvar_34), -1.0, 1.0);
      vAxis_42.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_42);
      vAxis_42 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_57;
      tmpvar_57 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_41 = 0.0;
      if (tmpvar_40) {
        highp float fTime_58;
        fTime_58 = (tmpvar_39.z + tmpvar_44);
        highp vec4 tmpvar_59;
        tmpvar_59.zw = vec2(0.0, 0.0);
        tmpvar_59.x = fTime_58;
        tmpvar_59.y = (0.87 * fTime_58);
        highp vec4 tmpvar_60;
        highp vec4 tmpvar_61;
        tmpvar_61 = abs(((
          fract((tmpvar_59 + 0.5))
         * 2.0) - 1.0));
        tmpvar_60 = (((
          (tmpvar_61 * tmpvar_61)
         * 
          (3.0 - (2.0 * tmpvar_61))
        ) - 0.5) * 2.0);
        fTwitch_41 = (tmpvar_39.x * pow (clamp (
          ((((tmpvar_60.x * tmpvar_60.y) * tmpvar_60.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_39.y));
      };
      highp float fAngle_62;
      fAngle_62 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_38)
       + 
        (tmpvar_57 * tmpvar_36)
      ) + fTwitch_41));
      highp vec2 vSinCos_63;
      vSinCos_63.x = sin(fAngle_62);
      vSinCos_63.y = cos(fAngle_62);
      highp float tmpvar_64;
      tmpvar_64 = (1.0 - vSinCos_63.y);
      highp mat3 tmpvar_65;
      tmpvar_65[0].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_63.y);
      tmpvar_65[0].y = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[0].z = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[1].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[1].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_63.y);
      tmpvar_65[1].z = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[2].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].z = (((tmpvar_64 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_63.y);
      highp mat3 tmpvar_66;
      tmpvar_66 = (tmpvar_52 * tmpvar_65);
      vDirection_28 = (tmpvar_66 * _glesNormal);
      vPos_27 = (normalize((tmpvar_66 * vPos_31)) * tmpvar_48);
    };
    tmpvar_16 = vDirection_28;
    FinalPosition_19 = vPos_27;
  };
  highp vec3 tmpvar_67;
  tmpvar_67 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_67;
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_68;
    vPos_68 = tmpvar_67;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_69;
      vPos_69 = tmpvar_67;
      highp float fAdherenceScale_70;
      highp vec3 tmpvar_71;
      tmpvar_71 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_72;
      tmpvar_72 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_73;
      highp float fOscillation_74;
      fOscillation_74 = 1.0;
      highp float fAmount_75;
      highp float fTarget_76;
      highp vec4 tmpvar_77;
      tmpvar_77.x = (tmpvar_72 + _glesMultiTexCoord0.w);
      tmpvar_77.y = ((tmpvar_72 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_77.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_72 + _glesMultiTexCoord0.w));
      tmpvar_77.w = ((tmpvar_72 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      vOscillations_73 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      highp float tmpvar_79;
      tmpvar_79 = (vOscillations_73.y * vOscillations_73.z);
      fTarget_76 = 1.0;
      fAmount_75 = tmpvar_79;
      if ((tmpvar_79 < 0.0)) {
        fTarget_76 = -1.0;
        fAmount_75 = -(tmpvar_79);
      };
      fOscillation_74 = (((
        (mix (mix (tmpvar_79, fTarget_76, fAmount_75), fTarget_76, fAmount_75) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_73.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_73.w * _ST_WindBranchWhip.x)));
      vPos_69 = (tmpvar_67 + ((tmpvar_71 * fOscillation_74) * _ST_WindBranch.y));
      highp vec4 tmpvar_80;
      tmpvar_80.zw = vec2(0.0, 0.0);
      tmpvar_80.x = ((tmpvar_72 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_80.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_81;
      highp vec4 tmpvar_82;
      tmpvar_82 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      tmpvar_81 = (((
        (tmpvar_82 * tmpvar_82)
       * 
        (3.0 - (2.0 * tmpvar_82))
      ) - 0.5) * 2.0);
      fAdherenceScale_70 = (1.0 - ((
        ((tmpvar_81.x * tmpvar_81.y) * tmpvar_81.x)
       * tmpvar_81.y) * _ST_WindTurbulences.x));
      fAdherenceScale_70 = (fAdherenceScale_70 + ((vOscillations_73.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_69 = (vPos_69 + ((
        ((vRotatedBranchAnchor_17 - vPos_69) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_70) * _glesMultiTexCoord0.z));
      vPos_68 = vPos_69;
    } else {
      highp vec3 vPos_83;
      vPos_83 = vPos_68;
      highp vec3 tmpvar_84;
      tmpvar_84 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_85;
      tmpvar_85 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_86;
      highp float fAmount_87;
      highp float fTarget_88;
      highp vec4 tmpvar_89;
      tmpvar_89.w = 0.0;
      tmpvar_89.x = (tmpvar_85 + _glesMultiTexCoord0.w);
      tmpvar_89.y = ((tmpvar_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_89.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_90;
      tmpvar_90 = abs(((
        fract((tmpvar_89 + 0.5))
       * 2.0) - 1.0));
      vOscillations_86 = (((
        (tmpvar_90 * tmpvar_90)
       * 
        (3.0 - (2.0 * tmpvar_90))
      ) - 0.5) * 2.0);
      highp float tmpvar_91;
      tmpvar_91 = (vOscillations_86.y * vOscillations_86.z);
      fTarget_88 = 1.0;
      fAmount_87 = tmpvar_91;
      if ((tmpvar_91 < 0.0)) {
        fTarget_88 = -1.0;
        fAmount_87 = -(tmpvar_91);
      };
      vPos_83 = (vPos_68 + ((tmpvar_84 * 
        (((mix (
          mix (tmpvar_91, fTarget_88, fAmount_87)
        , fTarget_88, fAmount_87) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_86.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_68 = vPos_83;
    };
    FinalPosition_19 = vPos_68;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_92;
    vPos_92 = FinalPosition_19;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_96.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    vPos_92.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_97.x + (tmpvar_97.y * tmpvar_97.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_93)));
    vPos_92 = (normalize(vPos_92) * fLength_94);
    FinalPosition_19 = vPos_92;
  };
  tmpvar_15.xyz = FinalPosition_19;
  tmpvar_5 = tmpvar_8;
  highp vec3 tmpvar_99;
  tmpvar_99 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_100;
  v_100.x = _World2Object[0].x;
  v_100.y = _World2Object[1].x;
  v_100.z = _World2Object[2].x;
  v_100.w = _World2Object[3].x;
  highp vec4 v_101;
  v_101.x = _World2Object[0].y;
  v_101.y = _World2Object[1].y;
  v_101.z = _World2Object[2].y;
  v_101.w = _World2Object[3].y;
  highp vec4 v_102;
  v_102.x = _World2Object[0].z;
  v_102.y = _World2Object[1].z;
  v_102.z = _World2Object[2].z;
  v_102.w = _World2Object[3].z;
  highp vec3 tmpvar_103;
  tmpvar_103 = normalize(((
    (v_100.xyz * tmpvar_16.x)
   + 
    (v_101.xyz * tmpvar_16.y)
  ) + (v_102.xyz * tmpvar_16.z)));
  worldNormal_3 = tmpvar_103;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_104;
  tmpvar_104.w = 1.0;
  tmpvar_104.xyz = worldNormal_3;
  mediump vec3 tmpvar_105;
  mediump vec4 normal_106;
  normal_106 = tmpvar_104;
  mediump vec3 x2_107;
  mediump vec4 tmpvar_108;
  tmpvar_108 = (normal_106.xyzz * normal_106.yzzx);
  x2_107.x = dot (unity_SHBr, tmpvar_108);
  x2_107.y = dot (unity_SHBg, tmpvar_108);
  x2_107.z = dot (unity_SHBb, tmpvar_108);
  tmpvar_105 = (x2_107 + (unity_SHC.xyz * (
    (normal_106.x * normal_106.x)
   - 
    (normal_106.y * normal_106.y)
  )));
  highp vec3 lightColor0_109;
  lightColor0_109 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_110;
  lightColor1_110 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_111;
  lightColor2_111 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_112;
  lightColor3_112 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_113;
  lightAttenSq_113 = unity_4LightAtten0;
  highp vec3 normal_114;
  normal_114 = worldNormal_3;
  highp vec4 tmpvar_115;
  tmpvar_115 = (unity_4LightPosX0 - tmpvar_99.x);
  highp vec4 tmpvar_116;
  tmpvar_116 = (unity_4LightPosY0 - tmpvar_99.y);
  highp vec4 tmpvar_117;
  tmpvar_117 = (unity_4LightPosZ0 - tmpvar_99.z);
  highp vec4 tmpvar_118;
  tmpvar_118 = (((tmpvar_115 * tmpvar_115) + (tmpvar_116 * tmpvar_116)) + (tmpvar_117 * tmpvar_117));
  highp vec4 tmpvar_119;
  tmpvar_119 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_115 * normal_114.x) + (tmpvar_116 * normal_114.y)) + (tmpvar_117 * normal_114.z))
   * 
    inversesqrt(tmpvar_118)
  )) * (1.0/((1.0 + 
    (tmpvar_118 * lightAttenSq_113)
  ))));
  highp vec3 tmpvar_120;
  tmpvar_120 = (tmpvar_105 + ((
    ((lightColor0_109 * tmpvar_119.x) + (lightColor1_110 * tmpvar_119.y))
   + 
    (lightColor2_111 * tmpvar_119.z)
  ) + (lightColor3_112 * tmpvar_119.w)));
  tmpvar_6 = tmpvar_120;
  highp vec4 tmpvar_121;
  tmpvar_121 = (unity_World2Shadow[0] * (_Object2World * tmpvar_15));
  tmpvar_7 = tmpvar_121;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_99;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  lowp float shadow_17;
  mediump float tmpvar_18;
  tmpvar_18 = texture (_ShadowMapTexture, xlv_TEXCOORD5.xyz);
  lowp float tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump float tmpvar_20;
  tmpvar_20 = (_LightShadowData.x + (tmpvar_19 * (1.0 - _LightShadowData.x)));
  shadow_17 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_21;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_17;
  mediump vec3 normalWorld_22;
  normalWorld_22 = tmpvar_5;
  mediump vec3 tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_22;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  tmpvar_23 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_23;
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_28 = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tmpvar_9 * tmpvar_23) * diff_28);
  c_27.xyz = tmpvar_30;
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  mediump vec3 tmpvar_31;
  tmpvar_31 = (c_27.xyz + (tmpvar_9 * (xlv_TEXCOORD4 + x1_25)));
  c_26.xyz = tmpvar_31;
  c_4.xyz = c_26.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_9;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_13;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_22;
  tmpvar_22 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_18 = tmpvar_22;
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_23;
    tmpvar_23 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_24;
    isBestWind_24 = (tmpvar_19 == 4.0);
    bool bLeaf2_25;
    bLeaf2_25 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    highp vec3 vDirection_27;
    vDirection_27 = tmpvar_2;
    highp float tmpvar_28;
    if (bLeaf2_25) {
      tmpvar_28 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_29;
    if (bLeaf2_25) {
      tmpvar_29 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_30;
    highp vec4 tmpvar_31;
    tmpvar_31.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_31.x = (tmpvar_28 + tmpvar_23);
    highp vec4 tmpvar_32;
    tmpvar_32 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    vPos_30 = (tmpvar_22 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_29 * (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_27 = tmpvar_2;
    vPos_26 = vPos_30;
    if (isBestWind_24) {
      highp vec3 tmpvar_33;
      tmpvar_33 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_34;
      if (bLeaf2_25) {
        tmpvar_34 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_35;
      if (bLeaf2_25) {
        tmpvar_35 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_36;
      if (bLeaf2_25) {
        tmpvar_36 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_37;
      if (bLeaf2_25) {
        tmpvar_37 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_38;
      if (bLeaf2_25) {
        tmpvar_38 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_38 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_39;
      if (bLeaf2_25) {
        tmpvar_39 = bool(1);
      } else {
        tmpvar_39 = bool(1);
      };
      highp float fTwitch_40;
      highp vec3 vAxis_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_34 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_34 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_34 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_34 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_30, vPos_30));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_36) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) + (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) - (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_33.z) * tmpvar_33.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_33.yzx * vRotatedWindVector_17.zxy) - (tmpvar_33.zxy * vRotatedWindVector_17.yzx));
      vAxis_41.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_17, tmpvar_33), -1.0, 1.0);
      vAxis_41.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_41);
      vAxis_41 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_56;
      tmpvar_56 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_40 = 0.0;
      if (tmpvar_39) {
        highp float fTime_57;
        fTime_57 = (tmpvar_38.z + tmpvar_43);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_40 = (tmpvar_38.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_38.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_37)
       + 
        (tmpvar_56 * tmpvar_35)
      ) + fTwitch_40));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_51 * tmpvar_64);
      vDirection_27 = (tmpvar_65 * _glesNormal);
      vPos_26 = (normalize((tmpvar_65 * vPos_30)) * tmpvar_47);
    };
    tmpvar_15 = vDirection_27;
    FinalPosition_18 = vPos_26;
  };
  highp vec3 tmpvar_66;
  tmpvar_66 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  FinalPosition_18 = tmpvar_66;
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_67;
    vPos_67 = tmpvar_66;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_68;
      vPos_68 = tmpvar_66;
      highp float fAdherenceScale_69;
      highp vec3 tmpvar_70;
      tmpvar_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_71;
      tmpvar_71 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_72;
      highp float fOscillation_73;
      fOscillation_73 = 1.0;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.x = (tmpvar_71 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((tmpvar_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_71 + _glesMultiTexCoord0.w));
      tmpvar_76.w = ((tmpvar_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_72 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_72.y * vOscillations_72.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      fOscillation_73 = (((
        (mix (mix (tmpvar_78, fTarget_75, fAmount_74), fTarget_75, fAmount_74) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_72.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_72.w * _ST_WindBranchWhip.x)));
      vPos_68 = (tmpvar_66 + ((tmpvar_70 * fOscillation_73) * _ST_WindBranch.y));
      highp vec4 tmpvar_79;
      tmpvar_79.zw = vec2(0.0, 0.0);
      tmpvar_79.x = ((tmpvar_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_79.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_80;
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      tmpvar_80 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((
        ((tmpvar_80.x * tmpvar_80.y) * tmpvar_80.x)
       * tmpvar_80.y) * _ST_WindTurbulences.x));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_72.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_68 = (vPos_68 + ((
        ((vRotatedBranchAnchor_16 - vPos_68) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_67 = vPos_68;
    } else {
      highp vec3 vPos_82;
      vPos_82 = vPos_67;
      highp vec3 tmpvar_83;
      tmpvar_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_84;
      tmpvar_84 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_85;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (tmpvar_84 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((tmpvar_84 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_84 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_85 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_85.y * vOscillations_85.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      vPos_82 = (vPos_67 + ((tmpvar_83 * 
        (((mix (
          mix (tmpvar_90, fTarget_87, fAmount_86)
        , fTarget_87, fAmount_86) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_85.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_67 = vPos_82;
    };
    FinalPosition_18 = vPos_67;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_18;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_95.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    vPos_91.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_96.x + (tmpvar_96.y * tmpvar_96.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_92)));
    vPos_91 = (normalize(vPos_91) * fLength_93);
    FinalPosition_18 = vPos_91;
  };
  tmpvar_14.xyz = FinalPosition_18;
  tmpvar_6 = tmpvar_7;
  highp vec3 tmpvar_98;
  tmpvar_98 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_99;
  v_99.x = _World2Object[0].x;
  v_99.y = _World2Object[1].x;
  v_99.z = _World2Object[2].x;
  v_99.w = _World2Object[3].x;
  highp vec4 v_100;
  v_100.x = _World2Object[0].y;
  v_100.y = _World2Object[1].y;
  v_100.z = _World2Object[2].y;
  v_100.w = _World2Object[3].y;
  highp vec4 v_101;
  v_101.x = _World2Object[0].z;
  v_101.y = _World2Object[1].z;
  v_101.z = _World2Object[2].z;
  v_101.w = _World2Object[3].z;
  highp vec3 tmpvar_102;
  tmpvar_102 = normalize(((
    (v_99.xyz * tmpvar_15.x)
   + 
    (v_100.xyz * tmpvar_15.y)
  ) + (v_101.xyz * tmpvar_15.z)));
  worldNormal_5 = tmpvar_102;
  highp mat3 tmpvar_103;
  tmpvar_103[0] = _Object2World[0].xyz;
  tmpvar_103[1] = _Object2World[1].xyz;
  tmpvar_103[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_104;
  tmpvar_104 = normalize((tmpvar_103 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_104;
  lowp vec3 tmpvar_105;
  tmpvar_105 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_106;
  tmpvar_106 = (tmpvar_105 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_106;
  highp vec4 tmpvar_107;
  tmpvar_107.x = worldTangent_4.x;
  tmpvar_107.y = worldBinormal_3.x;
  tmpvar_107.z = worldNormal_5.x;
  tmpvar_107.w = tmpvar_98.x;
  highp vec4 tmpvar_108;
  tmpvar_108.x = worldTangent_4.y;
  tmpvar_108.y = worldBinormal_3.y;
  tmpvar_108.z = worldNormal_5.y;
  tmpvar_108.w = tmpvar_98.y;
  highp vec4 tmpvar_109;
  tmpvar_109.x = worldTangent_4.z;
  tmpvar_109.y = worldBinormal_3.z;
  tmpvar_109.z = worldNormal_5.z;
  tmpvar_109.w = tmpvar_98.z;
  lowp vec4 tmpvar_110;
  tmpvar_110.w = 1.0;
  tmpvar_110.xyz = worldNormal_5;
  mediump vec4 normal_111;
  normal_111 = tmpvar_110;
  mediump vec3 x2_112;
  mediump vec4 tmpvar_113;
  tmpvar_113 = (normal_111.xyzz * normal_111.yzzx);
  x2_112.x = dot (unity_SHBr, tmpvar_113);
  x2_112.y = dot (unity_SHBg, tmpvar_113);
  x2_112.z = dot (unity_SHBb, tmpvar_113);
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_107;
  xlv_TEXCOORD1 = tmpvar_108;
  xlv_TEXCOORD2 = tmpvar_109;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = (x2_112 + (unity_SHC.xyz * (
    (normal_111.x * normal_111.x)
   - 
    (normal_111.y * normal_111.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_12;
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_14 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_15;
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_3.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_3.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_3.z = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_20;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_21;
  normalWorld_21 = worldN_3;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_21;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_26 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tmpvar_8 * tmpvar_1) * diff_26);
  c_25.xyz = tmpvar_28;
  c_25.w = tmpvar_9;
  c_24.w = c_25.w;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (c_25.xyz + (tmpvar_8 * (xlv_TEXCOORD5 + x1_23)));
  c_24.xyz = tmpvar_29;
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
in vec4 _glesTANGENT;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_9;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_13;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_22;
  tmpvar_22 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_18 = tmpvar_22;
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_23;
    tmpvar_23 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_24;
    isBestWind_24 = (tmpvar_19 == 4.0);
    bool bLeaf2_25;
    bLeaf2_25 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    highp vec3 vDirection_27;
    vDirection_27 = tmpvar_2;
    highp float tmpvar_28;
    if (bLeaf2_25) {
      tmpvar_28 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_29;
    if (bLeaf2_25) {
      tmpvar_29 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_30;
    highp vec4 tmpvar_31;
    tmpvar_31.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_31.x = (tmpvar_28 + tmpvar_23);
    highp vec4 tmpvar_32;
    tmpvar_32 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    vPos_30 = (tmpvar_22 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_29 * (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_27 = tmpvar_2;
    vPos_26 = vPos_30;
    if (isBestWind_24) {
      highp vec3 tmpvar_33;
      tmpvar_33 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_34;
      if (bLeaf2_25) {
        tmpvar_34 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_35;
      if (bLeaf2_25) {
        tmpvar_35 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_36;
      if (bLeaf2_25) {
        tmpvar_36 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_37;
      if (bLeaf2_25) {
        tmpvar_37 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_38;
      if (bLeaf2_25) {
        tmpvar_38 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_38 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_39;
      if (bLeaf2_25) {
        tmpvar_39 = bool(1);
      } else {
        tmpvar_39 = bool(1);
      };
      highp float fTwitch_40;
      highp vec3 vAxis_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_34 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_34 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_34 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_34 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_30, vPos_30));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_36) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) + (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) - (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_33.z) * tmpvar_33.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_33.yzx * vRotatedWindVector_17.zxy) - (tmpvar_33.zxy * vRotatedWindVector_17.yzx));
      vAxis_41.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_17, tmpvar_33), -1.0, 1.0);
      vAxis_41.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_41);
      vAxis_41 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_56;
      tmpvar_56 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_40 = 0.0;
      if (tmpvar_39) {
        highp float fTime_57;
        fTime_57 = (tmpvar_38.z + tmpvar_43);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_40 = (tmpvar_38.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_38.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_37)
       + 
        (tmpvar_56 * tmpvar_35)
      ) + fTwitch_40));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_51 * tmpvar_64);
      vDirection_27 = (tmpvar_65 * _glesNormal);
      vPos_26 = (normalize((tmpvar_65 * vPos_30)) * tmpvar_47);
    };
    tmpvar_15 = vDirection_27;
    FinalPosition_18 = vPos_26;
  };
  highp vec3 tmpvar_66;
  tmpvar_66 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  FinalPosition_18 = tmpvar_66;
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_67;
    vPos_67 = tmpvar_66;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_68;
      vPos_68 = tmpvar_66;
      highp float fAdherenceScale_69;
      highp vec3 tmpvar_70;
      tmpvar_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_71;
      tmpvar_71 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_72;
      highp float fOscillation_73;
      fOscillation_73 = 1.0;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.x = (tmpvar_71 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((tmpvar_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_71 + _glesMultiTexCoord0.w));
      tmpvar_76.w = ((tmpvar_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_72 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_72.y * vOscillations_72.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      fOscillation_73 = (((
        (mix (mix (tmpvar_78, fTarget_75, fAmount_74), fTarget_75, fAmount_74) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_72.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_72.w * _ST_WindBranchWhip.x)));
      vPos_68 = (tmpvar_66 + ((tmpvar_70 * fOscillation_73) * _ST_WindBranch.y));
      highp vec4 tmpvar_79;
      tmpvar_79.zw = vec2(0.0, 0.0);
      tmpvar_79.x = ((tmpvar_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_79.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_80;
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      tmpvar_80 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((
        ((tmpvar_80.x * tmpvar_80.y) * tmpvar_80.x)
       * tmpvar_80.y) * _ST_WindTurbulences.x));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_72.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_68 = (vPos_68 + ((
        ((vRotatedBranchAnchor_16 - vPos_68) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_67 = vPos_68;
    } else {
      highp vec3 vPos_82;
      vPos_82 = vPos_67;
      highp vec3 tmpvar_83;
      tmpvar_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_84;
      tmpvar_84 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_85;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (tmpvar_84 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((tmpvar_84 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_84 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_85 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_85.y * vOscillations_85.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      vPos_82 = (vPos_67 + ((tmpvar_83 * 
        (((mix (
          mix (tmpvar_90, fTarget_87, fAmount_86)
        , fTarget_87, fAmount_86) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_85.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_67 = vPos_82;
    };
    FinalPosition_18 = vPos_67;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_18;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_95.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    vPos_91.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_96.x + (tmpvar_96.y * tmpvar_96.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_92)));
    vPos_91 = (normalize(vPos_91) * fLength_93);
    FinalPosition_18 = vPos_91;
  };
  tmpvar_14.xyz = FinalPosition_18;
  tmpvar_6 = tmpvar_7;
  highp vec3 tmpvar_98;
  tmpvar_98 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_99;
  v_99.x = _World2Object[0].x;
  v_99.y = _World2Object[1].x;
  v_99.z = _World2Object[2].x;
  v_99.w = _World2Object[3].x;
  highp vec4 v_100;
  v_100.x = _World2Object[0].y;
  v_100.y = _World2Object[1].y;
  v_100.z = _World2Object[2].y;
  v_100.w = _World2Object[3].y;
  highp vec4 v_101;
  v_101.x = _World2Object[0].z;
  v_101.y = _World2Object[1].z;
  v_101.z = _World2Object[2].z;
  v_101.w = _World2Object[3].z;
  highp vec3 tmpvar_102;
  tmpvar_102 = normalize(((
    (v_99.xyz * tmpvar_15.x)
   + 
    (v_100.xyz * tmpvar_15.y)
  ) + (v_101.xyz * tmpvar_15.z)));
  worldNormal_5 = tmpvar_102;
  highp mat3 tmpvar_103;
  tmpvar_103[0] = _Object2World[0].xyz;
  tmpvar_103[1] = _Object2World[1].xyz;
  tmpvar_103[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_104;
  tmpvar_104 = normalize((tmpvar_103 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_104;
  lowp vec3 tmpvar_105;
  tmpvar_105 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_106;
  tmpvar_106 = (tmpvar_105 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_106;
  highp vec4 tmpvar_107;
  tmpvar_107.x = worldTangent_4.x;
  tmpvar_107.y = worldBinormal_3.x;
  tmpvar_107.z = worldNormal_5.x;
  tmpvar_107.w = tmpvar_98.x;
  highp vec4 tmpvar_108;
  tmpvar_108.x = worldTangent_4.y;
  tmpvar_108.y = worldBinormal_3.y;
  tmpvar_108.z = worldNormal_5.y;
  tmpvar_108.w = tmpvar_98.y;
  highp vec4 tmpvar_109;
  tmpvar_109.x = worldTangent_4.z;
  tmpvar_109.y = worldBinormal_3.z;
  tmpvar_109.z = worldNormal_5.z;
  tmpvar_109.w = tmpvar_98.z;
  lowp vec4 tmpvar_110;
  tmpvar_110.w = 1.0;
  tmpvar_110.xyz = worldNormal_5;
  mediump vec4 normal_111;
  normal_111 = tmpvar_110;
  mediump vec3 x2_112;
  mediump vec4 tmpvar_113;
  tmpvar_113 = (normal_111.xyzz * normal_111.yzzx);
  x2_112.x = dot (unity_SHBr, tmpvar_113);
  x2_112.y = dot (unity_SHBg, tmpvar_113);
  x2_112.z = dot (unity_SHBb, tmpvar_113);
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_107;
  xlv_TEXCOORD1 = tmpvar_108;
  xlv_TEXCOORD2 = tmpvar_109;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = (x2_112 + (unity_SHC.xyz * (
    (normal_111.x * normal_111.x)
   - 
    (normal_111.y * normal_111.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_12;
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_14 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_15;
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_3.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_3.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_3.z = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_20;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_21;
  normalWorld_21 = worldN_3;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_21;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_26 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tmpvar_8 * tmpvar_1) * diff_26);
  c_25.xyz = tmpvar_28;
  c_25.w = tmpvar_9;
  c_24.w = c_25.w;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (c_25.xyz + (tmpvar_8 * (xlv_TEXCOORD5 + x1_23)));
  c_24.xyz = tmpvar_29;
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_10;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_14;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_23;
  tmpvar_23 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_23;
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_24;
    tmpvar_24 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_25;
    isBestWind_25 = (tmpvar_20 == 4.0);
    bool bLeaf2_26;
    bLeaf2_26 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_27;
    vPos_27 = tmpvar_23;
    highp vec3 vDirection_28;
    vDirection_28 = tmpvar_2;
    highp float tmpvar_29;
    if (bLeaf2_26) {
      tmpvar_29 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_30;
    if (bLeaf2_26) {
      tmpvar_30 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_31;
    highp vec4 tmpvar_32;
    tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_32.x = (tmpvar_29 + tmpvar_24);
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    vPos_31 = (tmpvar_23 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_30 * (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_28 = tmpvar_2;
    vPos_27 = vPos_31;
    if (isBestWind_25) {
      highp vec3 tmpvar_34;
      tmpvar_34 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_35;
      if (bLeaf2_26) {
        tmpvar_35 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_36;
      if (bLeaf2_26) {
        tmpvar_36 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_37;
      if (bLeaf2_26) {
        tmpvar_37 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_38;
      if (bLeaf2_26) {
        tmpvar_38 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_39;
      if (bLeaf2_26) {
        tmpvar_39 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_39 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_40;
      if (bLeaf2_26) {
        tmpvar_40 = bool(1);
      } else {
        tmpvar_40 = bool(1);
      };
      highp float fTwitch_41;
      highp vec3 vAxis_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_35 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_35 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_35 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_35 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_31, vPos_31));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_37) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) + (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) - (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_34.z) * tmpvar_34.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_34.yzx * vRotatedWindVector_18.zxy) - (tmpvar_34.zxy * vRotatedWindVector_18.yzx));
      vAxis_42.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_18, tmpvar_34), -1.0, 1.0);
      vAxis_42.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_42);
      vAxis_42 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_57;
      tmpvar_57 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_41 = 0.0;
      if (tmpvar_40) {
        highp float fTime_58;
        fTime_58 = (tmpvar_39.z + tmpvar_44);
        highp vec4 tmpvar_59;
        tmpvar_59.zw = vec2(0.0, 0.0);
        tmpvar_59.x = fTime_58;
        tmpvar_59.y = (0.87 * fTime_58);
        highp vec4 tmpvar_60;
        highp vec4 tmpvar_61;
        tmpvar_61 = abs(((
          fract((tmpvar_59 + 0.5))
         * 2.0) - 1.0));
        tmpvar_60 = (((
          (tmpvar_61 * tmpvar_61)
         * 
          (3.0 - (2.0 * tmpvar_61))
        ) - 0.5) * 2.0);
        fTwitch_41 = (tmpvar_39.x * pow (clamp (
          ((((tmpvar_60.x * tmpvar_60.y) * tmpvar_60.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_39.y));
      };
      highp float fAngle_62;
      fAngle_62 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_38)
       + 
        (tmpvar_57 * tmpvar_36)
      ) + fTwitch_41));
      highp vec2 vSinCos_63;
      vSinCos_63.x = sin(fAngle_62);
      vSinCos_63.y = cos(fAngle_62);
      highp float tmpvar_64;
      tmpvar_64 = (1.0 - vSinCos_63.y);
      highp mat3 tmpvar_65;
      tmpvar_65[0].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_63.y);
      tmpvar_65[0].y = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[0].z = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[1].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[1].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_63.y);
      tmpvar_65[1].z = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[2].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].z = (((tmpvar_64 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_63.y);
      highp mat3 tmpvar_66;
      tmpvar_66 = (tmpvar_52 * tmpvar_65);
      vDirection_28 = (tmpvar_66 * _glesNormal);
      vPos_27 = (normalize((tmpvar_66 * vPos_31)) * tmpvar_48);
    };
    tmpvar_16 = vDirection_28;
    FinalPosition_19 = vPos_27;
  };
  highp vec3 tmpvar_67;
  tmpvar_67 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_67;
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_68;
    vPos_68 = tmpvar_67;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_69;
      vPos_69 = tmpvar_67;
      highp float fAdherenceScale_70;
      highp vec3 tmpvar_71;
      tmpvar_71 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_72;
      tmpvar_72 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_73;
      highp float fOscillation_74;
      fOscillation_74 = 1.0;
      highp float fAmount_75;
      highp float fTarget_76;
      highp vec4 tmpvar_77;
      tmpvar_77.x = (tmpvar_72 + _glesMultiTexCoord0.w);
      tmpvar_77.y = ((tmpvar_72 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_77.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_72 + _glesMultiTexCoord0.w));
      tmpvar_77.w = ((tmpvar_72 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      vOscillations_73 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      highp float tmpvar_79;
      tmpvar_79 = (vOscillations_73.y * vOscillations_73.z);
      fTarget_76 = 1.0;
      fAmount_75 = tmpvar_79;
      if ((tmpvar_79 < 0.0)) {
        fTarget_76 = -1.0;
        fAmount_75 = -(tmpvar_79);
      };
      fOscillation_74 = (((
        (mix (mix (tmpvar_79, fTarget_76, fAmount_75), fTarget_76, fAmount_75) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_73.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_73.w * _ST_WindBranchWhip.x)));
      vPos_69 = (tmpvar_67 + ((tmpvar_71 * fOscillation_74) * _ST_WindBranch.y));
      highp vec4 tmpvar_80;
      tmpvar_80.zw = vec2(0.0, 0.0);
      tmpvar_80.x = ((tmpvar_72 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_80.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_81;
      highp vec4 tmpvar_82;
      tmpvar_82 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      tmpvar_81 = (((
        (tmpvar_82 * tmpvar_82)
       * 
        (3.0 - (2.0 * tmpvar_82))
      ) - 0.5) * 2.0);
      fAdherenceScale_70 = (1.0 - ((
        ((tmpvar_81.x * tmpvar_81.y) * tmpvar_81.x)
       * tmpvar_81.y) * _ST_WindTurbulences.x));
      fAdherenceScale_70 = (fAdherenceScale_70 + ((vOscillations_73.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_69 = (vPos_69 + ((
        ((vRotatedBranchAnchor_17 - vPos_69) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_70) * _glesMultiTexCoord0.z));
      vPos_68 = vPos_69;
    } else {
      highp vec3 vPos_83;
      vPos_83 = vPos_68;
      highp vec3 tmpvar_84;
      tmpvar_84 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_85;
      tmpvar_85 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_86;
      highp float fAmount_87;
      highp float fTarget_88;
      highp vec4 tmpvar_89;
      tmpvar_89.w = 0.0;
      tmpvar_89.x = (tmpvar_85 + _glesMultiTexCoord0.w);
      tmpvar_89.y = ((tmpvar_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_89.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_90;
      tmpvar_90 = abs(((
        fract((tmpvar_89 + 0.5))
       * 2.0) - 1.0));
      vOscillations_86 = (((
        (tmpvar_90 * tmpvar_90)
       * 
        (3.0 - (2.0 * tmpvar_90))
      ) - 0.5) * 2.0);
      highp float tmpvar_91;
      tmpvar_91 = (vOscillations_86.y * vOscillations_86.z);
      fTarget_88 = 1.0;
      fAmount_87 = tmpvar_91;
      if ((tmpvar_91 < 0.0)) {
        fTarget_88 = -1.0;
        fAmount_87 = -(tmpvar_91);
      };
      vPos_83 = (vPos_68 + ((tmpvar_84 * 
        (((mix (
          mix (tmpvar_91, fTarget_88, fAmount_87)
        , fTarget_88, fAmount_87) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_86.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_68 = vPos_83;
    };
    FinalPosition_19 = vPos_68;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_92;
    vPos_92 = FinalPosition_19;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_96.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    vPos_92.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_97.x + (tmpvar_97.y * tmpvar_97.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_93)));
    vPos_92 = (normalize(vPos_92) * fLength_94);
    FinalPosition_19 = vPos_92;
  };
  tmpvar_15.xyz = FinalPosition_19;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_99;
  tmpvar_99 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_100;
  v_100.x = _World2Object[0].x;
  v_100.y = _World2Object[1].x;
  v_100.z = _World2Object[2].x;
  v_100.w = _World2Object[3].x;
  highp vec4 v_101;
  v_101.x = _World2Object[0].y;
  v_101.y = _World2Object[1].y;
  v_101.z = _World2Object[2].y;
  v_101.w = _World2Object[3].y;
  highp vec4 v_102;
  v_102.x = _World2Object[0].z;
  v_102.y = _World2Object[1].z;
  v_102.z = _World2Object[2].z;
  v_102.w = _World2Object[3].z;
  highp vec3 tmpvar_103;
  tmpvar_103 = normalize(((
    (v_100.xyz * tmpvar_16.x)
   + 
    (v_101.xyz * tmpvar_16.y)
  ) + (v_102.xyz * tmpvar_16.z)));
  worldNormal_5 = tmpvar_103;
  highp mat3 tmpvar_104;
  tmpvar_104[0] = _Object2World[0].xyz;
  tmpvar_104[1] = _Object2World[1].xyz;
  tmpvar_104[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_105;
  tmpvar_105 = normalize((tmpvar_104 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_105;
  lowp vec3 tmpvar_106;
  tmpvar_106 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_107;
  tmpvar_107 = (tmpvar_106 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_107;
  highp vec4 tmpvar_108;
  tmpvar_108.x = worldTangent_4.x;
  tmpvar_108.y = worldBinormal_3.x;
  tmpvar_108.z = worldNormal_5.x;
  tmpvar_108.w = tmpvar_99.x;
  highp vec4 tmpvar_109;
  tmpvar_109.x = worldTangent_4.y;
  tmpvar_109.y = worldBinormal_3.y;
  tmpvar_109.z = worldNormal_5.y;
  tmpvar_109.w = tmpvar_99.y;
  highp vec4 tmpvar_110;
  tmpvar_110.x = worldTangent_4.z;
  tmpvar_110.y = worldBinormal_3.z;
  tmpvar_110.z = worldNormal_5.z;
  tmpvar_110.w = tmpvar_99.z;
  lowp vec4 tmpvar_111;
  tmpvar_111.w = 1.0;
  tmpvar_111.xyz = worldNormal_5;
  mediump vec4 normal_112;
  normal_112 = tmpvar_111;
  mediump vec3 x2_113;
  mediump vec4 tmpvar_114;
  tmpvar_114 = (normal_112.xyzz * normal_112.yzzx);
  x2_113.x = dot (unity_SHBr, tmpvar_114);
  x2_113.y = dot (unity_SHBg, tmpvar_114);
  x2_113.z = dot (unity_SHBb, tmpvar_114);
  highp vec4 tmpvar_115;
  tmpvar_115 = (unity_World2Shadow[0] * (_Object2World * tmpvar_15));
  tmpvar_7 = tmpvar_115;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_108;
  xlv_TEXCOORD1 = tmpvar_109;
  xlv_TEXCOORD2 = tmpvar_110;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = (x2_113 + (unity_SHC.xyz * (
    (normal_112.x * normal_112.x)
   - 
    (normal_112.y * normal_112.y)
  )));
  xlv_TEXCOORD6 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_18;
  mediump float dist_19;
  lowp float tmpvar_20;
  tmpvar_20 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x;
  dist_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (float((dist_19 > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_4.x = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_4.y = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_4.z = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_25;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_18;
  mediump vec3 normalWorld_26;
  normalWorld_26 = worldN_4;
  mediump vec3 tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = normalWorld_26;
  mediump vec3 x1_29;
  x1_29.x = dot (unity_SHAr, tmpvar_28);
  x1_29.y = dot (unity_SHAg, tmpvar_28);
  x1_29.z = dot (unity_SHAb, tmpvar_28);
  tmpvar_27 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_27;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_32 = tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_9 * tmpvar_27) * diff_32);
  c_31.xyz = tmpvar_34;
  c_31.w = tmpvar_10;
  c_30.w = c_31.w;
  mediump vec3 tmpvar_35;
  tmpvar_35 = (c_31.xyz + (tmpvar_9 * (xlv_TEXCOORD5 + x1_29)));
  c_30.xyz = tmpvar_35;
  c_5.xyz = c_30.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_10;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_14;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_23;
  tmpvar_23 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_23;
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_24;
    tmpvar_24 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_25;
    isBestWind_25 = (tmpvar_20 == 4.0);
    bool bLeaf2_26;
    bLeaf2_26 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_27;
    vPos_27 = tmpvar_23;
    highp vec3 vDirection_28;
    vDirection_28 = tmpvar_2;
    highp float tmpvar_29;
    if (bLeaf2_26) {
      tmpvar_29 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_30;
    if (bLeaf2_26) {
      tmpvar_30 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_31;
    highp vec4 tmpvar_32;
    tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_32.x = (tmpvar_29 + tmpvar_24);
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    vPos_31 = (tmpvar_23 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_30 * (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_28 = tmpvar_2;
    vPos_27 = vPos_31;
    if (isBestWind_25) {
      highp vec3 tmpvar_34;
      tmpvar_34 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_35;
      if (bLeaf2_26) {
        tmpvar_35 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_36;
      if (bLeaf2_26) {
        tmpvar_36 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_37;
      if (bLeaf2_26) {
        tmpvar_37 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_38;
      if (bLeaf2_26) {
        tmpvar_38 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_39;
      if (bLeaf2_26) {
        tmpvar_39 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_39 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_40;
      if (bLeaf2_26) {
        tmpvar_40 = bool(1);
      } else {
        tmpvar_40 = bool(1);
      };
      highp float fTwitch_41;
      highp vec3 vAxis_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_35 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_35 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_35 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_35 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_31, vPos_31));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_37) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) + (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) - (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_34.z) * tmpvar_34.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_34.yzx * vRotatedWindVector_18.zxy) - (tmpvar_34.zxy * vRotatedWindVector_18.yzx));
      vAxis_42.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_18, tmpvar_34), -1.0, 1.0);
      vAxis_42.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_42);
      vAxis_42 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_57;
      tmpvar_57 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_41 = 0.0;
      if (tmpvar_40) {
        highp float fTime_58;
        fTime_58 = (tmpvar_39.z + tmpvar_44);
        highp vec4 tmpvar_59;
        tmpvar_59.zw = vec2(0.0, 0.0);
        tmpvar_59.x = fTime_58;
        tmpvar_59.y = (0.87 * fTime_58);
        highp vec4 tmpvar_60;
        highp vec4 tmpvar_61;
        tmpvar_61 = abs(((
          fract((tmpvar_59 + 0.5))
         * 2.0) - 1.0));
        tmpvar_60 = (((
          (tmpvar_61 * tmpvar_61)
         * 
          (3.0 - (2.0 * tmpvar_61))
        ) - 0.5) * 2.0);
        fTwitch_41 = (tmpvar_39.x * pow (clamp (
          ((((tmpvar_60.x * tmpvar_60.y) * tmpvar_60.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_39.y));
      };
      highp float fAngle_62;
      fAngle_62 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_38)
       + 
        (tmpvar_57 * tmpvar_36)
      ) + fTwitch_41));
      highp vec2 vSinCos_63;
      vSinCos_63.x = sin(fAngle_62);
      vSinCos_63.y = cos(fAngle_62);
      highp float tmpvar_64;
      tmpvar_64 = (1.0 - vSinCos_63.y);
      highp mat3 tmpvar_65;
      tmpvar_65[0].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_63.y);
      tmpvar_65[0].y = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[0].z = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[1].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[1].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_63.y);
      tmpvar_65[1].z = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[2].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].z = (((tmpvar_64 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_63.y);
      highp mat3 tmpvar_66;
      tmpvar_66 = (tmpvar_52 * tmpvar_65);
      vDirection_28 = (tmpvar_66 * _glesNormal);
      vPos_27 = (normalize((tmpvar_66 * vPos_31)) * tmpvar_48);
    };
    tmpvar_16 = vDirection_28;
    FinalPosition_19 = vPos_27;
  };
  highp vec3 tmpvar_67;
  tmpvar_67 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_67;
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_68;
    vPos_68 = tmpvar_67;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_69;
      vPos_69 = tmpvar_67;
      highp float fAdherenceScale_70;
      highp vec3 tmpvar_71;
      tmpvar_71 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_72;
      tmpvar_72 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_73;
      highp float fOscillation_74;
      fOscillation_74 = 1.0;
      highp float fAmount_75;
      highp float fTarget_76;
      highp vec4 tmpvar_77;
      tmpvar_77.x = (tmpvar_72 + _glesMultiTexCoord0.w);
      tmpvar_77.y = ((tmpvar_72 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_77.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_72 + _glesMultiTexCoord0.w));
      tmpvar_77.w = ((tmpvar_72 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      vOscillations_73 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      highp float tmpvar_79;
      tmpvar_79 = (vOscillations_73.y * vOscillations_73.z);
      fTarget_76 = 1.0;
      fAmount_75 = tmpvar_79;
      if ((tmpvar_79 < 0.0)) {
        fTarget_76 = -1.0;
        fAmount_75 = -(tmpvar_79);
      };
      fOscillation_74 = (((
        (mix (mix (tmpvar_79, fTarget_76, fAmount_75), fTarget_76, fAmount_75) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_73.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_73.w * _ST_WindBranchWhip.x)));
      vPos_69 = (tmpvar_67 + ((tmpvar_71 * fOscillation_74) * _ST_WindBranch.y));
      highp vec4 tmpvar_80;
      tmpvar_80.zw = vec2(0.0, 0.0);
      tmpvar_80.x = ((tmpvar_72 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_80.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_81;
      highp vec4 tmpvar_82;
      tmpvar_82 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      tmpvar_81 = (((
        (tmpvar_82 * tmpvar_82)
       * 
        (3.0 - (2.0 * tmpvar_82))
      ) - 0.5) * 2.0);
      fAdherenceScale_70 = (1.0 - ((
        ((tmpvar_81.x * tmpvar_81.y) * tmpvar_81.x)
       * tmpvar_81.y) * _ST_WindTurbulences.x));
      fAdherenceScale_70 = (fAdherenceScale_70 + ((vOscillations_73.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_69 = (vPos_69 + ((
        ((vRotatedBranchAnchor_17 - vPos_69) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_70) * _glesMultiTexCoord0.z));
      vPos_68 = vPos_69;
    } else {
      highp vec3 vPos_83;
      vPos_83 = vPos_68;
      highp vec3 tmpvar_84;
      tmpvar_84 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_85;
      tmpvar_85 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_86;
      highp float fAmount_87;
      highp float fTarget_88;
      highp vec4 tmpvar_89;
      tmpvar_89.w = 0.0;
      tmpvar_89.x = (tmpvar_85 + _glesMultiTexCoord0.w);
      tmpvar_89.y = ((tmpvar_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_89.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_90;
      tmpvar_90 = abs(((
        fract((tmpvar_89 + 0.5))
       * 2.0) - 1.0));
      vOscillations_86 = (((
        (tmpvar_90 * tmpvar_90)
       * 
        (3.0 - (2.0 * tmpvar_90))
      ) - 0.5) * 2.0);
      highp float tmpvar_91;
      tmpvar_91 = (vOscillations_86.y * vOscillations_86.z);
      fTarget_88 = 1.0;
      fAmount_87 = tmpvar_91;
      if ((tmpvar_91 < 0.0)) {
        fTarget_88 = -1.0;
        fAmount_87 = -(tmpvar_91);
      };
      vPos_83 = (vPos_68 + ((tmpvar_84 * 
        (((mix (
          mix (tmpvar_91, fTarget_88, fAmount_87)
        , fTarget_88, fAmount_87) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_86.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_68 = vPos_83;
    };
    FinalPosition_19 = vPos_68;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_92;
    vPos_92 = FinalPosition_19;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_96.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    vPos_92.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_97.x + (tmpvar_97.y * tmpvar_97.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_93)));
    vPos_92 = (normalize(vPos_92) * fLength_94);
    FinalPosition_19 = vPos_92;
  };
  tmpvar_15.xyz = FinalPosition_19;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_99;
  tmpvar_99 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_100;
  v_100.x = _World2Object[0].x;
  v_100.y = _World2Object[1].x;
  v_100.z = _World2Object[2].x;
  v_100.w = _World2Object[3].x;
  highp vec4 v_101;
  v_101.x = _World2Object[0].y;
  v_101.y = _World2Object[1].y;
  v_101.z = _World2Object[2].y;
  v_101.w = _World2Object[3].y;
  highp vec4 v_102;
  v_102.x = _World2Object[0].z;
  v_102.y = _World2Object[1].z;
  v_102.z = _World2Object[2].z;
  v_102.w = _World2Object[3].z;
  highp vec3 tmpvar_103;
  tmpvar_103 = normalize(((
    (v_100.xyz * tmpvar_16.x)
   + 
    (v_101.xyz * tmpvar_16.y)
  ) + (v_102.xyz * tmpvar_16.z)));
  worldNormal_5 = tmpvar_103;
  highp mat3 tmpvar_104;
  tmpvar_104[0] = _Object2World[0].xyz;
  tmpvar_104[1] = _Object2World[1].xyz;
  tmpvar_104[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_105;
  tmpvar_105 = normalize((tmpvar_104 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_105;
  lowp vec3 tmpvar_106;
  tmpvar_106 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_107;
  tmpvar_107 = (tmpvar_106 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_107;
  highp vec4 tmpvar_108;
  tmpvar_108.x = worldTangent_4.x;
  tmpvar_108.y = worldBinormal_3.x;
  tmpvar_108.z = worldNormal_5.x;
  tmpvar_108.w = tmpvar_99.x;
  highp vec4 tmpvar_109;
  tmpvar_109.x = worldTangent_4.y;
  tmpvar_109.y = worldBinormal_3.y;
  tmpvar_109.z = worldNormal_5.y;
  tmpvar_109.w = tmpvar_99.y;
  highp vec4 tmpvar_110;
  tmpvar_110.x = worldTangent_4.z;
  tmpvar_110.y = worldBinormal_3.z;
  tmpvar_110.z = worldNormal_5.z;
  tmpvar_110.w = tmpvar_99.z;
  lowp vec4 tmpvar_111;
  tmpvar_111.w = 1.0;
  tmpvar_111.xyz = worldNormal_5;
  mediump vec3 tmpvar_112;
  mediump vec4 normal_113;
  normal_113 = tmpvar_111;
  mediump vec3 x2_114;
  mediump vec4 tmpvar_115;
  tmpvar_115 = (normal_113.xyzz * normal_113.yzzx);
  x2_114.x = dot (unity_SHBr, tmpvar_115);
  x2_114.y = dot (unity_SHBg, tmpvar_115);
  x2_114.z = dot (unity_SHBb, tmpvar_115);
  tmpvar_112 = (x2_114 + (unity_SHC.xyz * (
    (normal_113.x * normal_113.x)
   - 
    (normal_113.y * normal_113.y)
  )));
  highp vec3 lightColor0_116;
  lightColor0_116 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_117;
  lightColor1_117 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_118;
  lightColor2_118 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_119;
  lightColor3_119 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_120;
  lightAttenSq_120 = unity_4LightAtten0;
  highp vec3 normal_121;
  normal_121 = worldNormal_5;
  highp vec4 tmpvar_122;
  tmpvar_122 = (unity_4LightPosX0 - tmpvar_99.x);
  highp vec4 tmpvar_123;
  tmpvar_123 = (unity_4LightPosY0 - tmpvar_99.y);
  highp vec4 tmpvar_124;
  tmpvar_124 = (unity_4LightPosZ0 - tmpvar_99.z);
  highp vec4 tmpvar_125;
  tmpvar_125 = (((tmpvar_122 * tmpvar_122) + (tmpvar_123 * tmpvar_123)) + (tmpvar_124 * tmpvar_124));
  highp vec4 tmpvar_126;
  tmpvar_126 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_122 * normal_121.x) + (tmpvar_123 * normal_121.y)) + (tmpvar_124 * normal_121.z))
   * 
    inversesqrt(tmpvar_125)
  )) * (1.0/((1.0 + 
    (tmpvar_125 * lightAttenSq_120)
  ))));
  highp vec3 tmpvar_127;
  tmpvar_127 = (tmpvar_112 + ((
    ((lightColor0_116 * tmpvar_126.x) + (lightColor1_117 * tmpvar_126.y))
   + 
    (lightColor2_118 * tmpvar_126.z)
  ) + (lightColor3_119 * tmpvar_126.w)));
  tmpvar_7 = tmpvar_127;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_108;
  xlv_TEXCOORD1 = tmpvar_109;
  xlv_TEXCOORD2 = tmpvar_110;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_12;
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_14 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_15;
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_3.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_3.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_3.z = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_20;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_21;
  normalWorld_21 = worldN_3;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_21;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_26 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tmpvar_8 * tmpvar_1) * diff_26);
  c_25.xyz = tmpvar_28;
  c_25.w = tmpvar_9;
  c_24.w = c_25.w;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (c_25.xyz + (tmpvar_8 * (xlv_TEXCOORD5 + x1_23)));
  c_24.xyz = tmpvar_29;
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
in vec4 _glesTANGENT;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_10;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_14;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_23;
  tmpvar_23 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_23;
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_24;
    tmpvar_24 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_25;
    isBestWind_25 = (tmpvar_20 == 4.0);
    bool bLeaf2_26;
    bLeaf2_26 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_27;
    vPos_27 = tmpvar_23;
    highp vec3 vDirection_28;
    vDirection_28 = tmpvar_2;
    highp float tmpvar_29;
    if (bLeaf2_26) {
      tmpvar_29 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_30;
    if (bLeaf2_26) {
      tmpvar_30 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_31;
    highp vec4 tmpvar_32;
    tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_32.x = (tmpvar_29 + tmpvar_24);
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    vPos_31 = (tmpvar_23 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_30 * (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_28 = tmpvar_2;
    vPos_27 = vPos_31;
    if (isBestWind_25) {
      highp vec3 tmpvar_34;
      tmpvar_34 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_35;
      if (bLeaf2_26) {
        tmpvar_35 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_36;
      if (bLeaf2_26) {
        tmpvar_36 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_37;
      if (bLeaf2_26) {
        tmpvar_37 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_38;
      if (bLeaf2_26) {
        tmpvar_38 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_39;
      if (bLeaf2_26) {
        tmpvar_39 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_39 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_40;
      if (bLeaf2_26) {
        tmpvar_40 = bool(1);
      } else {
        tmpvar_40 = bool(1);
      };
      highp float fTwitch_41;
      highp vec3 vAxis_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_35 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_35 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_35 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_35 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_31, vPos_31));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_37) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) + (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) - (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_34.z) * tmpvar_34.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_34.yzx * vRotatedWindVector_18.zxy) - (tmpvar_34.zxy * vRotatedWindVector_18.yzx));
      vAxis_42.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_18, tmpvar_34), -1.0, 1.0);
      vAxis_42.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_42);
      vAxis_42 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_57;
      tmpvar_57 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_41 = 0.0;
      if (tmpvar_40) {
        highp float fTime_58;
        fTime_58 = (tmpvar_39.z + tmpvar_44);
        highp vec4 tmpvar_59;
        tmpvar_59.zw = vec2(0.0, 0.0);
        tmpvar_59.x = fTime_58;
        tmpvar_59.y = (0.87 * fTime_58);
        highp vec4 tmpvar_60;
        highp vec4 tmpvar_61;
        tmpvar_61 = abs(((
          fract((tmpvar_59 + 0.5))
         * 2.0) - 1.0));
        tmpvar_60 = (((
          (tmpvar_61 * tmpvar_61)
         * 
          (3.0 - (2.0 * tmpvar_61))
        ) - 0.5) * 2.0);
        fTwitch_41 = (tmpvar_39.x * pow (clamp (
          ((((tmpvar_60.x * tmpvar_60.y) * tmpvar_60.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_39.y));
      };
      highp float fAngle_62;
      fAngle_62 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_38)
       + 
        (tmpvar_57 * tmpvar_36)
      ) + fTwitch_41));
      highp vec2 vSinCos_63;
      vSinCos_63.x = sin(fAngle_62);
      vSinCos_63.y = cos(fAngle_62);
      highp float tmpvar_64;
      tmpvar_64 = (1.0 - vSinCos_63.y);
      highp mat3 tmpvar_65;
      tmpvar_65[0].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_63.y);
      tmpvar_65[0].y = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[0].z = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[1].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[1].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_63.y);
      tmpvar_65[1].z = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[2].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].z = (((tmpvar_64 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_63.y);
      highp mat3 tmpvar_66;
      tmpvar_66 = (tmpvar_52 * tmpvar_65);
      vDirection_28 = (tmpvar_66 * _glesNormal);
      vPos_27 = (normalize((tmpvar_66 * vPos_31)) * tmpvar_48);
    };
    tmpvar_16 = vDirection_28;
    FinalPosition_19 = vPos_27;
  };
  highp vec3 tmpvar_67;
  tmpvar_67 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_67;
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_68;
    vPos_68 = tmpvar_67;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_69;
      vPos_69 = tmpvar_67;
      highp float fAdherenceScale_70;
      highp vec3 tmpvar_71;
      tmpvar_71 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_72;
      tmpvar_72 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_73;
      highp float fOscillation_74;
      fOscillation_74 = 1.0;
      highp float fAmount_75;
      highp float fTarget_76;
      highp vec4 tmpvar_77;
      tmpvar_77.x = (tmpvar_72 + _glesMultiTexCoord0.w);
      tmpvar_77.y = ((tmpvar_72 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_77.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_72 + _glesMultiTexCoord0.w));
      tmpvar_77.w = ((tmpvar_72 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      vOscillations_73 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      highp float tmpvar_79;
      tmpvar_79 = (vOscillations_73.y * vOscillations_73.z);
      fTarget_76 = 1.0;
      fAmount_75 = tmpvar_79;
      if ((tmpvar_79 < 0.0)) {
        fTarget_76 = -1.0;
        fAmount_75 = -(tmpvar_79);
      };
      fOscillation_74 = (((
        (mix (mix (tmpvar_79, fTarget_76, fAmount_75), fTarget_76, fAmount_75) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_73.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_73.w * _ST_WindBranchWhip.x)));
      vPos_69 = (tmpvar_67 + ((tmpvar_71 * fOscillation_74) * _ST_WindBranch.y));
      highp vec4 tmpvar_80;
      tmpvar_80.zw = vec2(0.0, 0.0);
      tmpvar_80.x = ((tmpvar_72 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_80.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_81;
      highp vec4 tmpvar_82;
      tmpvar_82 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      tmpvar_81 = (((
        (tmpvar_82 * tmpvar_82)
       * 
        (3.0 - (2.0 * tmpvar_82))
      ) - 0.5) * 2.0);
      fAdherenceScale_70 = (1.0 - ((
        ((tmpvar_81.x * tmpvar_81.y) * tmpvar_81.x)
       * tmpvar_81.y) * _ST_WindTurbulences.x));
      fAdherenceScale_70 = (fAdherenceScale_70 + ((vOscillations_73.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_69 = (vPos_69 + ((
        ((vRotatedBranchAnchor_17 - vPos_69) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_70) * _glesMultiTexCoord0.z));
      vPos_68 = vPos_69;
    } else {
      highp vec3 vPos_83;
      vPos_83 = vPos_68;
      highp vec3 tmpvar_84;
      tmpvar_84 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_85;
      tmpvar_85 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_86;
      highp float fAmount_87;
      highp float fTarget_88;
      highp vec4 tmpvar_89;
      tmpvar_89.w = 0.0;
      tmpvar_89.x = (tmpvar_85 + _glesMultiTexCoord0.w);
      tmpvar_89.y = ((tmpvar_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_89.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_90;
      tmpvar_90 = abs(((
        fract((tmpvar_89 + 0.5))
       * 2.0) - 1.0));
      vOscillations_86 = (((
        (tmpvar_90 * tmpvar_90)
       * 
        (3.0 - (2.0 * tmpvar_90))
      ) - 0.5) * 2.0);
      highp float tmpvar_91;
      tmpvar_91 = (vOscillations_86.y * vOscillations_86.z);
      fTarget_88 = 1.0;
      fAmount_87 = tmpvar_91;
      if ((tmpvar_91 < 0.0)) {
        fTarget_88 = -1.0;
        fAmount_87 = -(tmpvar_91);
      };
      vPos_83 = (vPos_68 + ((tmpvar_84 * 
        (((mix (
          mix (tmpvar_91, fTarget_88, fAmount_87)
        , fTarget_88, fAmount_87) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_86.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_68 = vPos_83;
    };
    FinalPosition_19 = vPos_68;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_92;
    vPos_92 = FinalPosition_19;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_96.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    vPos_92.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_97.x + (tmpvar_97.y * tmpvar_97.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_93)));
    vPos_92 = (normalize(vPos_92) * fLength_94);
    FinalPosition_19 = vPos_92;
  };
  tmpvar_15.xyz = FinalPosition_19;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_99;
  tmpvar_99 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_100;
  v_100.x = _World2Object[0].x;
  v_100.y = _World2Object[1].x;
  v_100.z = _World2Object[2].x;
  v_100.w = _World2Object[3].x;
  highp vec4 v_101;
  v_101.x = _World2Object[0].y;
  v_101.y = _World2Object[1].y;
  v_101.z = _World2Object[2].y;
  v_101.w = _World2Object[3].y;
  highp vec4 v_102;
  v_102.x = _World2Object[0].z;
  v_102.y = _World2Object[1].z;
  v_102.z = _World2Object[2].z;
  v_102.w = _World2Object[3].z;
  highp vec3 tmpvar_103;
  tmpvar_103 = normalize(((
    (v_100.xyz * tmpvar_16.x)
   + 
    (v_101.xyz * tmpvar_16.y)
  ) + (v_102.xyz * tmpvar_16.z)));
  worldNormal_5 = tmpvar_103;
  highp mat3 tmpvar_104;
  tmpvar_104[0] = _Object2World[0].xyz;
  tmpvar_104[1] = _Object2World[1].xyz;
  tmpvar_104[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_105;
  tmpvar_105 = normalize((tmpvar_104 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_105;
  lowp vec3 tmpvar_106;
  tmpvar_106 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_107;
  tmpvar_107 = (tmpvar_106 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_107;
  highp vec4 tmpvar_108;
  tmpvar_108.x = worldTangent_4.x;
  tmpvar_108.y = worldBinormal_3.x;
  tmpvar_108.z = worldNormal_5.x;
  tmpvar_108.w = tmpvar_99.x;
  highp vec4 tmpvar_109;
  tmpvar_109.x = worldTangent_4.y;
  tmpvar_109.y = worldBinormal_3.y;
  tmpvar_109.z = worldNormal_5.y;
  tmpvar_109.w = tmpvar_99.y;
  highp vec4 tmpvar_110;
  tmpvar_110.x = worldTangent_4.z;
  tmpvar_110.y = worldBinormal_3.z;
  tmpvar_110.z = worldNormal_5.z;
  tmpvar_110.w = tmpvar_99.z;
  lowp vec4 tmpvar_111;
  tmpvar_111.w = 1.0;
  tmpvar_111.xyz = worldNormal_5;
  mediump vec3 tmpvar_112;
  mediump vec4 normal_113;
  normal_113 = tmpvar_111;
  mediump vec3 x2_114;
  mediump vec4 tmpvar_115;
  tmpvar_115 = (normal_113.xyzz * normal_113.yzzx);
  x2_114.x = dot (unity_SHBr, tmpvar_115);
  x2_114.y = dot (unity_SHBg, tmpvar_115);
  x2_114.z = dot (unity_SHBb, tmpvar_115);
  tmpvar_112 = (x2_114 + (unity_SHC.xyz * (
    (normal_113.x * normal_113.x)
   - 
    (normal_113.y * normal_113.y)
  )));
  highp vec3 lightColor0_116;
  lightColor0_116 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_117;
  lightColor1_117 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_118;
  lightColor2_118 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_119;
  lightColor3_119 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_120;
  lightAttenSq_120 = unity_4LightAtten0;
  highp vec3 normal_121;
  normal_121 = worldNormal_5;
  highp vec4 tmpvar_122;
  tmpvar_122 = (unity_4LightPosX0 - tmpvar_99.x);
  highp vec4 tmpvar_123;
  tmpvar_123 = (unity_4LightPosY0 - tmpvar_99.y);
  highp vec4 tmpvar_124;
  tmpvar_124 = (unity_4LightPosZ0 - tmpvar_99.z);
  highp vec4 tmpvar_125;
  tmpvar_125 = (((tmpvar_122 * tmpvar_122) + (tmpvar_123 * tmpvar_123)) + (tmpvar_124 * tmpvar_124));
  highp vec4 tmpvar_126;
  tmpvar_126 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_122 * normal_121.x) + (tmpvar_123 * normal_121.y)) + (tmpvar_124 * normal_121.z))
   * 
    inversesqrt(tmpvar_125)
  )) * (1.0/((1.0 + 
    (tmpvar_125 * lightAttenSq_120)
  ))));
  highp vec3 tmpvar_127;
  tmpvar_127 = (tmpvar_112 + ((
    ((lightColor0_116 * tmpvar_126.x) + (lightColor1_117 * tmpvar_126.y))
   + 
    (lightColor2_118 * tmpvar_126.z)
  ) + (lightColor3_119 * tmpvar_126.w)));
  tmpvar_7 = tmpvar_127;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_108;
  xlv_TEXCOORD1 = tmpvar_109;
  xlv_TEXCOORD2 = tmpvar_110;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_12;
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_14 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_15;
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_3.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_3.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_3.z = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_20;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_21;
  normalWorld_21 = worldN_3;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_21;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_26 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tmpvar_8 * tmpvar_1) * diff_26);
  c_25.xyz = tmpvar_28;
  c_25.w = tmpvar_9;
  c_24.w = c_25.w;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (c_25.xyz + (tmpvar_8 * (xlv_TEXCOORD5 + x1_23)));
  c_24.xyz = tmpvar_29;
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_10.xy = tmpvar_11;
  tmpvar_9.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_9.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_15;
  highp vec4 tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_16 = tmpvar_1;
  tmpvar_17 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  FinalPosition_20 = tmpvar_1.xyz;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_24;
  tmpvar_24 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_20 = tmpvar_24;
  if (((tmpvar_21 > 1.0) && (tmpvar_21 < 5.0))) {
    highp float tmpvar_25;
    tmpvar_25 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_26;
    isBestWind_26 = (tmpvar_21 == 4.0);
    bool bLeaf2_27;
    bLeaf2_27 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_28;
    vPos_28 = tmpvar_24;
    highp vec3 vDirection_29;
    vDirection_29 = tmpvar_2;
    highp float tmpvar_30;
    if (bLeaf2_27) {
      tmpvar_30 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_31;
    if (bLeaf2_27) {
      tmpvar_31 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_32;
    highp vec4 tmpvar_33;
    tmpvar_33.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_33.x = (tmpvar_30 + tmpvar_25);
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    vPos_32 = (tmpvar_24 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_31 * (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_29 = tmpvar_2;
    vPos_28 = vPos_32;
    if (isBestWind_26) {
      highp vec3 tmpvar_35;
      tmpvar_35 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_36;
      if (bLeaf2_27) {
        tmpvar_36 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_37;
      if (bLeaf2_27) {
        tmpvar_37 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_38;
      if (bLeaf2_27) {
        tmpvar_38 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_39;
      if (bLeaf2_27) {
        tmpvar_39 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_40;
      if (bLeaf2_27) {
        tmpvar_40 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_40 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_41;
      if (bLeaf2_27) {
        tmpvar_41 = bool(1);
      } else {
        tmpvar_41 = bool(1);
      };
      highp float fTwitch_42;
      highp vec3 vAxis_43;
      highp vec3 tmpvar_44;
      tmpvar_44 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_45;
      tmpvar_45 = ((tmpvar_44.x + tmpvar_44.y) + tmpvar_44.z);
      highp vec4 tmpvar_46;
      tmpvar_46.x = (tmpvar_36 + tmpvar_45);
      tmpvar_46.y = ((tmpvar_36 * 0.75) - tmpvar_45);
      tmpvar_46.z = ((tmpvar_36 * 0.01) + tmpvar_45);
      tmpvar_46.w = (tmpvar_36 + tmpvar_45);
      highp vec4 tmpvar_47;
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      tmpvar_47 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = sqrt(dot (vPos_32, vPos_32));
      highp float fAngle_50;
      fAngle_50 = ((_glesMultiTexCoord2.x * tmpvar_38) * (tmpvar_47.x + (tmpvar_47.y * tmpvar_47.y)));
      highp vec2 vSinCos_51;
      vSinCos_51.x = sin(fAngle_50);
      vSinCos_51.y = cos(fAngle_50);
      highp float tmpvar_52;
      tmpvar_52 = (1.0 - vSinCos_51.y);
      highp mat3 tmpvar_53;
      tmpvar_53[0].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.x) + vSinCos_51.y);
      tmpvar_53[0].y = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.y) + (vSinCos_51.x * tmpvar_35.z));
      tmpvar_53[0].z = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.z) - (vSinCos_51.x * tmpvar_35.y));
      tmpvar_53[1].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.y) - (vSinCos_51.x * tmpvar_35.z));
      tmpvar_53[1].y = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.y) + vSinCos_51.y);
      tmpvar_53[1].z = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.z) + (vSinCos_51.x * tmpvar_35.x));
      tmpvar_53[2].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.z) + (vSinCos_51.x * tmpvar_35.y));
      tmpvar_53[2].y = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.z) - (vSinCos_51.x * tmpvar_35.x));
      tmpvar_53[2].z = (((tmpvar_52 * tmpvar_35.z) * tmpvar_35.z) + vSinCos_51.y);
      highp vec3 tmpvar_54;
      tmpvar_54 = ((tmpvar_35.yzx * vRotatedWindVector_19.zxy) - (tmpvar_35.zxy * vRotatedWindVector_19.yzx));
      vAxis_43.xz = tmpvar_54.xz;
      highp float tmpvar_55;
      tmpvar_55 = clamp (dot (vRotatedWindVector_19, tmpvar_35), -1.0, 1.0);
      vAxis_43.y = (tmpvar_54.y + tmpvar_55);
      highp vec3 tmpvar_56;
      tmpvar_56 = normalize(vAxis_43);
      vAxis_43 = tmpvar_56;
      highp float tmpvar_57;
      tmpvar_57 = (1.570796 - (sign(tmpvar_55) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_55))) * (1.570796 + (abs(tmpvar_55) * (-0.2146018 + 
          (abs(tmpvar_55) * (0.08656672 + (abs(tmpvar_55) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_58;
      tmpvar_58 = (tmpvar_47.y - (tmpvar_47.x * tmpvar_47.x));
      fTwitch_42 = 0.0;
      if (tmpvar_41) {
        highp float fTime_59;
        fTime_59 = (tmpvar_40.z + tmpvar_45);
        highp vec4 tmpvar_60;
        tmpvar_60.zw = vec2(0.0, 0.0);
        tmpvar_60.x = fTime_59;
        tmpvar_60.y = (0.87 * fTime_59);
        highp vec4 tmpvar_61;
        highp vec4 tmpvar_62;
        tmpvar_62 = abs(((
          fract((tmpvar_60 + 0.5))
         * 2.0) - 1.0));
        tmpvar_61 = (((
          (tmpvar_62 * tmpvar_62)
         * 
          (3.0 - (2.0 * tmpvar_62))
        ) - 0.5) * 2.0);
        fTwitch_42 = (tmpvar_40.x * pow (clamp (
          ((((tmpvar_61.x * tmpvar_61.y) * tmpvar_61.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_40.y));
      };
      highp float fAngle_63;
      fAngle_63 = (_glesMultiTexCoord2.x * ((
        (tmpvar_57 * tmpvar_39)
       + 
        (tmpvar_58 * tmpvar_37)
      ) + fTwitch_42));
      highp vec2 vSinCos_64;
      vSinCos_64.x = sin(fAngle_63);
      vSinCos_64.y = cos(fAngle_63);
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - vSinCos_64.y);
      highp mat3 tmpvar_66;
      tmpvar_66[0].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.x) + vSinCos_64.y);
      tmpvar_66[0].y = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.y) + (vSinCos_64.x * tmpvar_56.z));
      tmpvar_66[0].z = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.z) - (vSinCos_64.x * tmpvar_56.y));
      tmpvar_66[1].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.y) - (vSinCos_64.x * tmpvar_56.z));
      tmpvar_66[1].y = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.y) + vSinCos_64.y);
      tmpvar_66[1].z = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.z) + (vSinCos_64.x * tmpvar_56.x));
      tmpvar_66[2].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.z) + (vSinCos_64.x * tmpvar_56.y));
      tmpvar_66[2].y = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.z) - (vSinCos_64.x * tmpvar_56.x));
      tmpvar_66[2].z = (((tmpvar_65 * tmpvar_56.z) * tmpvar_56.z) + vSinCos_64.y);
      highp mat3 tmpvar_67;
      tmpvar_67 = (tmpvar_53 * tmpvar_66);
      vDirection_29 = (tmpvar_67 * _glesNormal);
      vPos_28 = (normalize((tmpvar_67 * vPos_32)) * tmpvar_49);
    };
    tmpvar_17 = vDirection_29;
    FinalPosition_20 = vPos_28;
  };
  highp vec3 tmpvar_68;
  tmpvar_68 = (FinalPosition_20 + _glesMultiTexCoord1.xyz);
  FinalPosition_20 = tmpvar_68;
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_69;
    vPos_69 = tmpvar_68;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_70;
      vPos_70 = tmpvar_68;
      highp float fAdherenceScale_71;
      highp vec3 tmpvar_72;
      tmpvar_72 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_73;
      tmpvar_73 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_74;
      highp float fOscillation_75;
      fOscillation_75 = 1.0;
      highp float fAmount_76;
      highp float fTarget_77;
      highp vec4 tmpvar_78;
      tmpvar_78.x = (tmpvar_73 + _glesMultiTexCoord0.w);
      tmpvar_78.y = ((tmpvar_73 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_78.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_73 + _glesMultiTexCoord0.w));
      tmpvar_78.w = ((tmpvar_73 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      vOscillations_74 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      highp float tmpvar_80;
      tmpvar_80 = (vOscillations_74.y * vOscillations_74.z);
      fTarget_77 = 1.0;
      fAmount_76 = tmpvar_80;
      if ((tmpvar_80 < 0.0)) {
        fTarget_77 = -1.0;
        fAmount_76 = -(tmpvar_80);
      };
      fOscillation_75 = (((
        (mix (mix (tmpvar_80, fTarget_77, fAmount_76), fTarget_77, fAmount_76) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_74.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_74.w * _ST_WindBranchWhip.x)));
      vPos_70 = (tmpvar_68 + ((tmpvar_72 * fOscillation_75) * _ST_WindBranch.y));
      highp vec4 tmpvar_81;
      tmpvar_81.zw = vec2(0.0, 0.0);
      tmpvar_81.x = ((tmpvar_73 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_81.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_82;
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_81 + 0.5))
       * 2.0) - 1.0));
      tmpvar_82 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      fAdherenceScale_71 = (1.0 - ((
        ((tmpvar_82.x * tmpvar_82.y) * tmpvar_82.x)
       * tmpvar_82.y) * _ST_WindTurbulences.x));
      fAdherenceScale_71 = (fAdherenceScale_71 + ((vOscillations_74.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_70 = (vPos_70 + ((
        ((vRotatedBranchAnchor_18 - vPos_70) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_71) * _glesMultiTexCoord0.z));
      vPos_69 = vPos_70;
    } else {
      highp vec3 vPos_84;
      vPos_84 = vPos_69;
      highp vec3 tmpvar_85;
      tmpvar_85 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_86;
      tmpvar_86 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_87;
      highp float fAmount_88;
      highp float fTarget_89;
      highp vec4 tmpvar_90;
      tmpvar_90.w = 0.0;
      tmpvar_90.x = (tmpvar_86 + _glesMultiTexCoord0.w);
      tmpvar_90.y = ((tmpvar_86 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_90.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_86 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_91;
      tmpvar_91 = abs(((
        fract((tmpvar_90 + 0.5))
       * 2.0) - 1.0));
      vOscillations_87 = (((
        (tmpvar_91 * tmpvar_91)
       * 
        (3.0 - (2.0 * tmpvar_91))
      ) - 0.5) * 2.0);
      highp float tmpvar_92;
      tmpvar_92 = (vOscillations_87.y * vOscillations_87.z);
      fTarget_89 = 1.0;
      fAmount_88 = tmpvar_92;
      if ((tmpvar_92 < 0.0)) {
        fTarget_89 = -1.0;
        fAmount_88 = -(tmpvar_92);
      };
      vPos_84 = (vPos_69 + ((tmpvar_85 * 
        (((mix (
          mix (tmpvar_92, fTarget_89, fAmount_88)
        , fTarget_89, fAmount_88) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_87.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_69 = vPos_84;
    };
    FinalPosition_20 = vPos_69;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_93;
    vPos_93 = FinalPosition_20;
    highp float fAdjust_94;
    highp float fLength_95;
    fLength_95 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_96;
    tmpvar_96 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_94 = tmpvar_96;
    if ((tmpvar_96 != 0.0)) {
      fAdjust_94 = pow (tmpvar_96, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_97;
    tmpvar_97.zw = vec2(0.0, 0.0);
    tmpvar_97.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_97.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_98;
    highp vec4 tmpvar_99;
    tmpvar_99 = abs(((
      fract((tmpvar_97 + 0.5))
     * 2.0) - 1.0));
    tmpvar_98 = (((
      (tmpvar_99 * tmpvar_99)
     * 
      (3.0 - (2.0 * tmpvar_99))
    ) - 0.5) * 2.0);
    vPos_93.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_98.x + (tmpvar_98.y * tmpvar_98.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_94)));
    vPos_93 = (normalize(vPos_93) * fLength_95);
    FinalPosition_20 = vPos_93;
  };
  tmpvar_16.xyz = FinalPosition_20;
  tmpvar_6 = tmpvar_9;
  highp vec3 tmpvar_100;
  tmpvar_100 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_101;
  v_101.x = _World2Object[0].x;
  v_101.y = _World2Object[1].x;
  v_101.z = _World2Object[2].x;
  v_101.w = _World2Object[3].x;
  highp vec4 v_102;
  v_102.x = _World2Object[0].y;
  v_102.y = _World2Object[1].y;
  v_102.z = _World2Object[2].y;
  v_102.w = _World2Object[3].y;
  highp vec4 v_103;
  v_103.x = _World2Object[0].z;
  v_103.y = _World2Object[1].z;
  v_103.z = _World2Object[2].z;
  v_103.w = _World2Object[3].z;
  highp vec3 tmpvar_104;
  tmpvar_104 = normalize(((
    (v_101.xyz * tmpvar_17.x)
   + 
    (v_102.xyz * tmpvar_17.y)
  ) + (v_103.xyz * tmpvar_17.z)));
  worldNormal_5 = tmpvar_104;
  highp mat3 tmpvar_105;
  tmpvar_105[0] = _Object2World[0].xyz;
  tmpvar_105[1] = _Object2World[1].xyz;
  tmpvar_105[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_106;
  tmpvar_106 = normalize((tmpvar_105 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_106;
  lowp vec3 tmpvar_107;
  tmpvar_107 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_108;
  tmpvar_108 = (tmpvar_107 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_108;
  highp vec4 tmpvar_109;
  tmpvar_109.x = worldTangent_4.x;
  tmpvar_109.y = worldBinormal_3.x;
  tmpvar_109.z = worldNormal_5.x;
  tmpvar_109.w = tmpvar_100.x;
  highp vec4 tmpvar_110;
  tmpvar_110.x = worldTangent_4.y;
  tmpvar_110.y = worldBinormal_3.y;
  tmpvar_110.z = worldNormal_5.y;
  tmpvar_110.w = tmpvar_100.y;
  highp vec4 tmpvar_111;
  tmpvar_111.x = worldTangent_4.z;
  tmpvar_111.y = worldBinormal_3.z;
  tmpvar_111.z = worldNormal_5.z;
  tmpvar_111.w = tmpvar_100.z;
  lowp vec4 tmpvar_112;
  tmpvar_112.w = 1.0;
  tmpvar_112.xyz = worldNormal_5;
  mediump vec3 tmpvar_113;
  mediump vec4 normal_114;
  normal_114 = tmpvar_112;
  mediump vec3 x2_115;
  mediump vec4 tmpvar_116;
  tmpvar_116 = (normal_114.xyzz * normal_114.yzzx);
  x2_115.x = dot (unity_SHBr, tmpvar_116);
  x2_115.y = dot (unity_SHBg, tmpvar_116);
  x2_115.z = dot (unity_SHBb, tmpvar_116);
  tmpvar_113 = (x2_115 + (unity_SHC.xyz * (
    (normal_114.x * normal_114.x)
   - 
    (normal_114.y * normal_114.y)
  )));
  highp vec3 lightColor0_117;
  lightColor0_117 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_118;
  lightColor1_118 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_119;
  lightColor2_119 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_120;
  lightColor3_120 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_121;
  lightAttenSq_121 = unity_4LightAtten0;
  highp vec3 normal_122;
  normal_122 = worldNormal_5;
  highp vec4 tmpvar_123;
  tmpvar_123 = (unity_4LightPosX0 - tmpvar_100.x);
  highp vec4 tmpvar_124;
  tmpvar_124 = (unity_4LightPosY0 - tmpvar_100.y);
  highp vec4 tmpvar_125;
  tmpvar_125 = (unity_4LightPosZ0 - tmpvar_100.z);
  highp vec4 tmpvar_126;
  tmpvar_126 = (((tmpvar_123 * tmpvar_123) + (tmpvar_124 * tmpvar_124)) + (tmpvar_125 * tmpvar_125));
  highp vec4 tmpvar_127;
  tmpvar_127 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_123 * normal_122.x) + (tmpvar_124 * normal_122.y)) + (tmpvar_125 * normal_122.z))
   * 
    inversesqrt(tmpvar_126)
  )) * (1.0/((1.0 + 
    (tmpvar_126 * lightAttenSq_121)
  ))));
  highp vec3 tmpvar_128;
  tmpvar_128 = (tmpvar_113 + ((
    ((lightColor0_117 * tmpvar_127.x) + (lightColor1_118 * tmpvar_127.y))
   + 
    (lightColor2_119 * tmpvar_127.z)
  ) + (lightColor3_120 * tmpvar_127.w)));
  tmpvar_7 = tmpvar_128;
  highp vec4 tmpvar_129;
  tmpvar_129 = (unity_World2Shadow[0] * (_Object2World * tmpvar_16));
  tmpvar_8 = tmpvar_129;
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_109;
  xlv_TEXCOORD1 = tmpvar_110;
  xlv_TEXCOORD2 = tmpvar_111;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_18;
  mediump float dist_19;
  lowp float tmpvar_20;
  tmpvar_20 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x;
  dist_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (float((dist_19 > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_4.x = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_4.y = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_4.z = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_25;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_18;
  mediump vec3 normalWorld_26;
  normalWorld_26 = worldN_4;
  mediump vec3 tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = normalWorld_26;
  mediump vec3 x1_29;
  x1_29.x = dot (unity_SHAr, tmpvar_28);
  x1_29.y = dot (unity_SHAg, tmpvar_28);
  x1_29.z = dot (unity_SHAb, tmpvar_28);
  tmpvar_27 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_27;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_32 = tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_9 * tmpvar_27) * diff_32);
  c_31.xyz = tmpvar_34;
  c_31.w = tmpvar_10;
  c_30.w = c_31.w;
  mediump vec3 tmpvar_35;
  tmpvar_35 = (c_31.xyz + (tmpvar_9 * (xlv_TEXCOORD5 + x1_29)));
  c_30.xyz = tmpvar_35;
  c_5.xyz = c_30.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_10;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_14;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_23;
  tmpvar_23 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_23;
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_24;
    tmpvar_24 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_25;
    isBestWind_25 = (tmpvar_20 == 4.0);
    bool bLeaf2_26;
    bLeaf2_26 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_27;
    vPos_27 = tmpvar_23;
    highp vec3 vDirection_28;
    vDirection_28 = tmpvar_2;
    highp float tmpvar_29;
    if (bLeaf2_26) {
      tmpvar_29 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_30;
    if (bLeaf2_26) {
      tmpvar_30 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_31;
    highp vec4 tmpvar_32;
    tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_32.x = (tmpvar_29 + tmpvar_24);
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    vPos_31 = (tmpvar_23 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_30 * (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_28 = tmpvar_2;
    vPos_27 = vPos_31;
    if (isBestWind_25) {
      highp vec3 tmpvar_34;
      tmpvar_34 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_35;
      if (bLeaf2_26) {
        tmpvar_35 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_36;
      if (bLeaf2_26) {
        tmpvar_36 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_37;
      if (bLeaf2_26) {
        tmpvar_37 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_38;
      if (bLeaf2_26) {
        tmpvar_38 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_39;
      if (bLeaf2_26) {
        tmpvar_39 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_39 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_40;
      if (bLeaf2_26) {
        tmpvar_40 = bool(1);
      } else {
        tmpvar_40 = bool(1);
      };
      highp float fTwitch_41;
      highp vec3 vAxis_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_35 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_35 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_35 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_35 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_31, vPos_31));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_37) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) + (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) - (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_34.z) * tmpvar_34.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_34.yzx * vRotatedWindVector_18.zxy) - (tmpvar_34.zxy * vRotatedWindVector_18.yzx));
      vAxis_42.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_18, tmpvar_34), -1.0, 1.0);
      vAxis_42.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_42);
      vAxis_42 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_57;
      tmpvar_57 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_41 = 0.0;
      if (tmpvar_40) {
        highp float fTime_58;
        fTime_58 = (tmpvar_39.z + tmpvar_44);
        highp vec4 tmpvar_59;
        tmpvar_59.zw = vec2(0.0, 0.0);
        tmpvar_59.x = fTime_58;
        tmpvar_59.y = (0.87 * fTime_58);
        highp vec4 tmpvar_60;
        highp vec4 tmpvar_61;
        tmpvar_61 = abs(((
          fract((tmpvar_59 + 0.5))
         * 2.0) - 1.0));
        tmpvar_60 = (((
          (tmpvar_61 * tmpvar_61)
         * 
          (3.0 - (2.0 * tmpvar_61))
        ) - 0.5) * 2.0);
        fTwitch_41 = (tmpvar_39.x * pow (clamp (
          ((((tmpvar_60.x * tmpvar_60.y) * tmpvar_60.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_39.y));
      };
      highp float fAngle_62;
      fAngle_62 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_38)
       + 
        (tmpvar_57 * tmpvar_36)
      ) + fTwitch_41));
      highp vec2 vSinCos_63;
      vSinCos_63.x = sin(fAngle_62);
      vSinCos_63.y = cos(fAngle_62);
      highp float tmpvar_64;
      tmpvar_64 = (1.0 - vSinCos_63.y);
      highp mat3 tmpvar_65;
      tmpvar_65[0].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_63.y);
      tmpvar_65[0].y = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[0].z = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[1].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[1].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_63.y);
      tmpvar_65[1].z = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[2].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].z = (((tmpvar_64 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_63.y);
      highp mat3 tmpvar_66;
      tmpvar_66 = (tmpvar_52 * tmpvar_65);
      vDirection_28 = (tmpvar_66 * _glesNormal);
      vPos_27 = (normalize((tmpvar_66 * vPos_31)) * tmpvar_48);
    };
    tmpvar_16 = vDirection_28;
    FinalPosition_19 = vPos_27;
  };
  highp vec3 tmpvar_67;
  tmpvar_67 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_67;
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_68;
    vPos_68 = tmpvar_67;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_69;
      vPos_69 = tmpvar_67;
      highp float fAdherenceScale_70;
      highp vec3 tmpvar_71;
      tmpvar_71 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_72;
      tmpvar_72 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_73;
      highp float fOscillation_74;
      fOscillation_74 = 1.0;
      highp float fAmount_75;
      highp float fTarget_76;
      highp vec4 tmpvar_77;
      tmpvar_77.x = (tmpvar_72 + _glesMultiTexCoord0.w);
      tmpvar_77.y = ((tmpvar_72 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_77.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_72 + _glesMultiTexCoord0.w));
      tmpvar_77.w = ((tmpvar_72 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      vOscillations_73 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      highp float tmpvar_79;
      tmpvar_79 = (vOscillations_73.y * vOscillations_73.z);
      fTarget_76 = 1.0;
      fAmount_75 = tmpvar_79;
      if ((tmpvar_79 < 0.0)) {
        fTarget_76 = -1.0;
        fAmount_75 = -(tmpvar_79);
      };
      fOscillation_74 = (((
        (mix (mix (tmpvar_79, fTarget_76, fAmount_75), fTarget_76, fAmount_75) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_73.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_73.w * _ST_WindBranchWhip.x)));
      vPos_69 = (tmpvar_67 + ((tmpvar_71 * fOscillation_74) * _ST_WindBranch.y));
      highp vec4 tmpvar_80;
      tmpvar_80.zw = vec2(0.0, 0.0);
      tmpvar_80.x = ((tmpvar_72 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_80.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_81;
      highp vec4 tmpvar_82;
      tmpvar_82 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      tmpvar_81 = (((
        (tmpvar_82 * tmpvar_82)
       * 
        (3.0 - (2.0 * tmpvar_82))
      ) - 0.5) * 2.0);
      fAdherenceScale_70 = (1.0 - ((
        ((tmpvar_81.x * tmpvar_81.y) * tmpvar_81.x)
       * tmpvar_81.y) * _ST_WindTurbulences.x));
      fAdherenceScale_70 = (fAdherenceScale_70 + ((vOscillations_73.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_69 = (vPos_69 + ((
        ((vRotatedBranchAnchor_17 - vPos_69) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_70) * _glesMultiTexCoord0.z));
      vPos_68 = vPos_69;
    } else {
      highp vec3 vPos_83;
      vPos_83 = vPos_68;
      highp vec3 tmpvar_84;
      tmpvar_84 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_85;
      tmpvar_85 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_86;
      highp float fAmount_87;
      highp float fTarget_88;
      highp vec4 tmpvar_89;
      tmpvar_89.w = 0.0;
      tmpvar_89.x = (tmpvar_85 + _glesMultiTexCoord0.w);
      tmpvar_89.y = ((tmpvar_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_89.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_90;
      tmpvar_90 = abs(((
        fract((tmpvar_89 + 0.5))
       * 2.0) - 1.0));
      vOscillations_86 = (((
        (tmpvar_90 * tmpvar_90)
       * 
        (3.0 - (2.0 * tmpvar_90))
      ) - 0.5) * 2.0);
      highp float tmpvar_91;
      tmpvar_91 = (vOscillations_86.y * vOscillations_86.z);
      fTarget_88 = 1.0;
      fAmount_87 = tmpvar_91;
      if ((tmpvar_91 < 0.0)) {
        fTarget_88 = -1.0;
        fAmount_87 = -(tmpvar_91);
      };
      vPos_83 = (vPos_68 + ((tmpvar_84 * 
        (((mix (
          mix (tmpvar_91, fTarget_88, fAmount_87)
        , fTarget_88, fAmount_87) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_86.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_68 = vPos_83;
    };
    FinalPosition_19 = vPos_68;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_92;
    vPos_92 = FinalPosition_19;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_96.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    vPos_92.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_97.x + (tmpvar_97.y * tmpvar_97.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_93)));
    vPos_92 = (normalize(vPos_92) * fLength_94);
    FinalPosition_19 = vPos_92;
  };
  tmpvar_15.xyz = FinalPosition_19;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_99;
  tmpvar_99 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_100;
  v_100.x = _World2Object[0].x;
  v_100.y = _World2Object[1].x;
  v_100.z = _World2Object[2].x;
  v_100.w = _World2Object[3].x;
  highp vec4 v_101;
  v_101.x = _World2Object[0].y;
  v_101.y = _World2Object[1].y;
  v_101.z = _World2Object[2].y;
  v_101.w = _World2Object[3].y;
  highp vec4 v_102;
  v_102.x = _World2Object[0].z;
  v_102.y = _World2Object[1].z;
  v_102.z = _World2Object[2].z;
  v_102.w = _World2Object[3].z;
  highp vec3 tmpvar_103;
  tmpvar_103 = normalize(((
    (v_100.xyz * tmpvar_16.x)
   + 
    (v_101.xyz * tmpvar_16.y)
  ) + (v_102.xyz * tmpvar_16.z)));
  worldNormal_5 = tmpvar_103;
  highp mat3 tmpvar_104;
  tmpvar_104[0] = _Object2World[0].xyz;
  tmpvar_104[1] = _Object2World[1].xyz;
  tmpvar_104[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_105;
  tmpvar_105 = normalize((tmpvar_104 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_105;
  lowp vec3 tmpvar_106;
  tmpvar_106 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_107;
  tmpvar_107 = (tmpvar_106 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_107;
  highp vec4 tmpvar_108;
  tmpvar_108.x = worldTangent_4.x;
  tmpvar_108.y = worldBinormal_3.x;
  tmpvar_108.z = worldNormal_5.x;
  tmpvar_108.w = tmpvar_99.x;
  highp vec4 tmpvar_109;
  tmpvar_109.x = worldTangent_4.y;
  tmpvar_109.y = worldBinormal_3.y;
  tmpvar_109.z = worldNormal_5.y;
  tmpvar_109.w = tmpvar_99.y;
  highp vec4 tmpvar_110;
  tmpvar_110.x = worldTangent_4.z;
  tmpvar_110.y = worldBinormal_3.z;
  tmpvar_110.z = worldNormal_5.z;
  tmpvar_110.w = tmpvar_99.z;
  lowp vec4 tmpvar_111;
  tmpvar_111.w = 1.0;
  tmpvar_111.xyz = worldNormal_5;
  mediump vec4 normal_112;
  normal_112 = tmpvar_111;
  mediump vec3 x2_113;
  mediump vec4 tmpvar_114;
  tmpvar_114 = (normal_112.xyzz * normal_112.yzzx);
  x2_113.x = dot (unity_SHBr, tmpvar_114);
  x2_113.y = dot (unity_SHBg, tmpvar_114);
  x2_113.z = dot (unity_SHBb, tmpvar_114);
  highp vec4 tmpvar_115;
  tmpvar_115 = (unity_World2Shadow[0] * (_Object2World * tmpvar_15));
  tmpvar_7 = tmpvar_115;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_108;
  xlv_TEXCOORD1 = tmpvar_109;
  xlv_TEXCOORD2 = tmpvar_110;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = (x2_113 + (unity_SHC.xyz * (
    (normal_112.x * normal_112.x)
   - 
    (normal_112.y * normal_112.y)
  )));
  xlv_TEXCOORD6 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_18;
  lowp float tmpvar_19;
  tmpvar_19 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz);
  mediump float tmpvar_20;
  tmpvar_20 = (_LightShadowData.x + (tmpvar_19 * (1.0 - _LightShadowData.x)));
  shadow_18 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_4.x = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_4.y = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_4.z = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_24;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_18;
  mediump vec3 normalWorld_25;
  normalWorld_25 = worldN_4;
  mediump vec3 tmpvar_26;
  mediump vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = normalWorld_25;
  mediump vec3 x1_28;
  x1_28.x = dot (unity_SHAr, tmpvar_27);
  x1_28.y = dot (unity_SHAg, tmpvar_27);
  x1_28.z = dot (unity_SHAb, tmpvar_27);
  tmpvar_26 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_26;
  lowp vec4 c_29;
  lowp vec4 c_30;
  lowp float diff_31;
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_31 = tmpvar_32;
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((tmpvar_9 * tmpvar_26) * diff_31);
  c_30.xyz = tmpvar_33;
  c_30.w = tmpvar_10;
  c_29.w = c_30.w;
  mediump vec3 tmpvar_34;
  tmpvar_34 = (c_30.xyz + (tmpvar_9 * (xlv_TEXCOORD5 + x1_28)));
  c_29.xyz = tmpvar_34;
  c_5.xyz = c_29.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
in vec4 _glesTANGENT;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_10;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_14;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_23;
  tmpvar_23 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_23;
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_24;
    tmpvar_24 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_25;
    isBestWind_25 = (tmpvar_20 == 4.0);
    bool bLeaf2_26;
    bLeaf2_26 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_27;
    vPos_27 = tmpvar_23;
    highp vec3 vDirection_28;
    vDirection_28 = tmpvar_2;
    highp float tmpvar_29;
    if (bLeaf2_26) {
      tmpvar_29 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_30;
    if (bLeaf2_26) {
      tmpvar_30 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_31;
    highp vec4 tmpvar_32;
    tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_32.x = (tmpvar_29 + tmpvar_24);
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    vPos_31 = (tmpvar_23 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_30 * (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_28 = tmpvar_2;
    vPos_27 = vPos_31;
    if (isBestWind_25) {
      highp vec3 tmpvar_34;
      tmpvar_34 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_35;
      if (bLeaf2_26) {
        tmpvar_35 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_36;
      if (bLeaf2_26) {
        tmpvar_36 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_37;
      if (bLeaf2_26) {
        tmpvar_37 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_38;
      if (bLeaf2_26) {
        tmpvar_38 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_39;
      if (bLeaf2_26) {
        tmpvar_39 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_39 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_40;
      if (bLeaf2_26) {
        tmpvar_40 = bool(1);
      } else {
        tmpvar_40 = bool(1);
      };
      highp float fTwitch_41;
      highp vec3 vAxis_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_35 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_35 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_35 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_35 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_31, vPos_31));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_37) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) + (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) - (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_34.z) * tmpvar_34.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_34.yzx * vRotatedWindVector_18.zxy) - (tmpvar_34.zxy * vRotatedWindVector_18.yzx));
      vAxis_42.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_18, tmpvar_34), -1.0, 1.0);
      vAxis_42.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_42);
      vAxis_42 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_57;
      tmpvar_57 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_41 = 0.0;
      if (tmpvar_40) {
        highp float fTime_58;
        fTime_58 = (tmpvar_39.z + tmpvar_44);
        highp vec4 tmpvar_59;
        tmpvar_59.zw = vec2(0.0, 0.0);
        tmpvar_59.x = fTime_58;
        tmpvar_59.y = (0.87 * fTime_58);
        highp vec4 tmpvar_60;
        highp vec4 tmpvar_61;
        tmpvar_61 = abs(((
          fract((tmpvar_59 + 0.5))
         * 2.0) - 1.0));
        tmpvar_60 = (((
          (tmpvar_61 * tmpvar_61)
         * 
          (3.0 - (2.0 * tmpvar_61))
        ) - 0.5) * 2.0);
        fTwitch_41 = (tmpvar_39.x * pow (clamp (
          ((((tmpvar_60.x * tmpvar_60.y) * tmpvar_60.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_39.y));
      };
      highp float fAngle_62;
      fAngle_62 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_38)
       + 
        (tmpvar_57 * tmpvar_36)
      ) + fTwitch_41));
      highp vec2 vSinCos_63;
      vSinCos_63.x = sin(fAngle_62);
      vSinCos_63.y = cos(fAngle_62);
      highp float tmpvar_64;
      tmpvar_64 = (1.0 - vSinCos_63.y);
      highp mat3 tmpvar_65;
      tmpvar_65[0].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_63.y);
      tmpvar_65[0].y = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[0].z = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[1].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[1].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_63.y);
      tmpvar_65[1].z = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[2].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].z = (((tmpvar_64 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_63.y);
      highp mat3 tmpvar_66;
      tmpvar_66 = (tmpvar_52 * tmpvar_65);
      vDirection_28 = (tmpvar_66 * _glesNormal);
      vPos_27 = (normalize((tmpvar_66 * vPos_31)) * tmpvar_48);
    };
    tmpvar_16 = vDirection_28;
    FinalPosition_19 = vPos_27;
  };
  highp vec3 tmpvar_67;
  tmpvar_67 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  FinalPosition_19 = tmpvar_67;
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_68;
    vPos_68 = tmpvar_67;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_69;
      vPos_69 = tmpvar_67;
      highp float fAdherenceScale_70;
      highp vec3 tmpvar_71;
      tmpvar_71 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_72;
      tmpvar_72 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_73;
      highp float fOscillation_74;
      fOscillation_74 = 1.0;
      highp float fAmount_75;
      highp float fTarget_76;
      highp vec4 tmpvar_77;
      tmpvar_77.x = (tmpvar_72 + _glesMultiTexCoord0.w);
      tmpvar_77.y = ((tmpvar_72 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_77.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_72 + _glesMultiTexCoord0.w));
      tmpvar_77.w = ((tmpvar_72 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      vOscillations_73 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      highp float tmpvar_79;
      tmpvar_79 = (vOscillations_73.y * vOscillations_73.z);
      fTarget_76 = 1.0;
      fAmount_75 = tmpvar_79;
      if ((tmpvar_79 < 0.0)) {
        fTarget_76 = -1.0;
        fAmount_75 = -(tmpvar_79);
      };
      fOscillation_74 = (((
        (mix (mix (tmpvar_79, fTarget_76, fAmount_75), fTarget_76, fAmount_75) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_73.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_73.w * _ST_WindBranchWhip.x)));
      vPos_69 = (tmpvar_67 + ((tmpvar_71 * fOscillation_74) * _ST_WindBranch.y));
      highp vec4 tmpvar_80;
      tmpvar_80.zw = vec2(0.0, 0.0);
      tmpvar_80.x = ((tmpvar_72 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_80.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_81;
      highp vec4 tmpvar_82;
      tmpvar_82 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      tmpvar_81 = (((
        (tmpvar_82 * tmpvar_82)
       * 
        (3.0 - (2.0 * tmpvar_82))
      ) - 0.5) * 2.0);
      fAdherenceScale_70 = (1.0 - ((
        ((tmpvar_81.x * tmpvar_81.y) * tmpvar_81.x)
       * tmpvar_81.y) * _ST_WindTurbulences.x));
      fAdherenceScale_70 = (fAdherenceScale_70 + ((vOscillations_73.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_69 = (vPos_69 + ((
        ((vRotatedBranchAnchor_17 - vPos_69) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_70) * _glesMultiTexCoord0.z));
      vPos_68 = vPos_69;
    } else {
      highp vec3 vPos_83;
      vPos_83 = vPos_68;
      highp vec3 tmpvar_84;
      tmpvar_84 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_85;
      tmpvar_85 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_86;
      highp float fAmount_87;
      highp float fTarget_88;
      highp vec4 tmpvar_89;
      tmpvar_89.w = 0.0;
      tmpvar_89.x = (tmpvar_85 + _glesMultiTexCoord0.w);
      tmpvar_89.y = ((tmpvar_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_89.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_90;
      tmpvar_90 = abs(((
        fract((tmpvar_89 + 0.5))
       * 2.0) - 1.0));
      vOscillations_86 = (((
        (tmpvar_90 * tmpvar_90)
       * 
        (3.0 - (2.0 * tmpvar_90))
      ) - 0.5) * 2.0);
      highp float tmpvar_91;
      tmpvar_91 = (vOscillations_86.y * vOscillations_86.z);
      fTarget_88 = 1.0;
      fAmount_87 = tmpvar_91;
      if ((tmpvar_91 < 0.0)) {
        fTarget_88 = -1.0;
        fAmount_87 = -(tmpvar_91);
      };
      vPos_83 = (vPos_68 + ((tmpvar_84 * 
        (((mix (
          mix (tmpvar_91, fTarget_88, fAmount_87)
        , fTarget_88, fAmount_87) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_86.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_68 = vPos_83;
    };
    FinalPosition_19 = vPos_68;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_92;
    vPos_92 = FinalPosition_19;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_96.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    vPos_92.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_97.x + (tmpvar_97.y * tmpvar_97.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_93)));
    vPos_92 = (normalize(vPos_92) * fLength_94);
    FinalPosition_19 = vPos_92;
  };
  tmpvar_15.xyz = FinalPosition_19;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_99;
  tmpvar_99 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_100;
  v_100.x = _World2Object[0].x;
  v_100.y = _World2Object[1].x;
  v_100.z = _World2Object[2].x;
  v_100.w = _World2Object[3].x;
  highp vec4 v_101;
  v_101.x = _World2Object[0].y;
  v_101.y = _World2Object[1].y;
  v_101.z = _World2Object[2].y;
  v_101.w = _World2Object[3].y;
  highp vec4 v_102;
  v_102.x = _World2Object[0].z;
  v_102.y = _World2Object[1].z;
  v_102.z = _World2Object[2].z;
  v_102.w = _World2Object[3].z;
  highp vec3 tmpvar_103;
  tmpvar_103 = normalize(((
    (v_100.xyz * tmpvar_16.x)
   + 
    (v_101.xyz * tmpvar_16.y)
  ) + (v_102.xyz * tmpvar_16.z)));
  worldNormal_5 = tmpvar_103;
  highp mat3 tmpvar_104;
  tmpvar_104[0] = _Object2World[0].xyz;
  tmpvar_104[1] = _Object2World[1].xyz;
  tmpvar_104[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_105;
  tmpvar_105 = normalize((tmpvar_104 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_105;
  lowp vec3 tmpvar_106;
  tmpvar_106 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_107;
  tmpvar_107 = (tmpvar_106 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_107;
  highp vec4 tmpvar_108;
  tmpvar_108.x = worldTangent_4.x;
  tmpvar_108.y = worldBinormal_3.x;
  tmpvar_108.z = worldNormal_5.x;
  tmpvar_108.w = tmpvar_99.x;
  highp vec4 tmpvar_109;
  tmpvar_109.x = worldTangent_4.y;
  tmpvar_109.y = worldBinormal_3.y;
  tmpvar_109.z = worldNormal_5.y;
  tmpvar_109.w = tmpvar_99.y;
  highp vec4 tmpvar_110;
  tmpvar_110.x = worldTangent_4.z;
  tmpvar_110.y = worldBinormal_3.z;
  tmpvar_110.z = worldNormal_5.z;
  tmpvar_110.w = tmpvar_99.z;
  lowp vec4 tmpvar_111;
  tmpvar_111.w = 1.0;
  tmpvar_111.xyz = worldNormal_5;
  mediump vec4 normal_112;
  normal_112 = tmpvar_111;
  mediump vec3 x2_113;
  mediump vec4 tmpvar_114;
  tmpvar_114 = (normal_112.xyzz * normal_112.yzzx);
  x2_113.x = dot (unity_SHBr, tmpvar_114);
  x2_113.y = dot (unity_SHBg, tmpvar_114);
  x2_113.z = dot (unity_SHBb, tmpvar_114);
  highp vec4 tmpvar_115;
  tmpvar_115 = (unity_World2Shadow[0] * (_Object2World * tmpvar_15));
  tmpvar_7 = tmpvar_115;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_108;
  xlv_TEXCOORD1 = tmpvar_109;
  xlv_TEXCOORD2 = tmpvar_110;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = (x2_113 + (unity_SHC.xyz * (
    (normal_112.x * normal_112.x)
   - 
    (normal_112.y * normal_112.y)
  )));
  xlv_TEXCOORD6 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_18;
  mediump float tmpvar_19;
  tmpvar_19 = texture (_ShadowMapTexture, xlv_TEXCOORD6.xyz);
  lowp float tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump float tmpvar_21;
  tmpvar_21 = (_LightShadowData.x + (tmpvar_20 * (1.0 - _LightShadowData.x)));
  shadow_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_4.x = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_4.y = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_4.z = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_25;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_18;
  mediump vec3 normalWorld_26;
  normalWorld_26 = worldN_4;
  mediump vec3 tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = normalWorld_26;
  mediump vec3 x1_29;
  x1_29.x = dot (unity_SHAr, tmpvar_28);
  x1_29.y = dot (unity_SHAg, tmpvar_28);
  x1_29.z = dot (unity_SHAb, tmpvar_28);
  tmpvar_27 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_27;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_32 = tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_9 * tmpvar_27) * diff_32);
  c_31.xyz = tmpvar_34;
  c_31.w = tmpvar_10;
  c_30.w = c_31.w;
  mediump vec3 tmpvar_35;
  tmpvar_35 = (c_31.xyz + (tmpvar_9 * (xlv_TEXCOORD5 + x1_29)));
  c_30.xyz = tmpvar_35;
  c_5.xyz = c_30.xyz;
  c_5.w = 1.0;
  _glesFragData[0] = c_5;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_10.xy = tmpvar_11;
  tmpvar_9.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_9.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_15;
  highp vec4 tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_16 = tmpvar_1;
  tmpvar_17 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  FinalPosition_20 = tmpvar_1.xyz;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_24;
  tmpvar_24 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_20 = tmpvar_24;
  if (((tmpvar_21 > 1.0) && (tmpvar_21 < 5.0))) {
    highp float tmpvar_25;
    tmpvar_25 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_26;
    isBestWind_26 = (tmpvar_21 == 4.0);
    bool bLeaf2_27;
    bLeaf2_27 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_28;
    vPos_28 = tmpvar_24;
    highp vec3 vDirection_29;
    vDirection_29 = tmpvar_2;
    highp float tmpvar_30;
    if (bLeaf2_27) {
      tmpvar_30 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_31;
    if (bLeaf2_27) {
      tmpvar_31 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_32;
    highp vec4 tmpvar_33;
    tmpvar_33.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_33.x = (tmpvar_30 + tmpvar_25);
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    vPos_32 = (tmpvar_24 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_31 * (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_29 = tmpvar_2;
    vPos_28 = vPos_32;
    if (isBestWind_26) {
      highp vec3 tmpvar_35;
      tmpvar_35 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_36;
      if (bLeaf2_27) {
        tmpvar_36 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_37;
      if (bLeaf2_27) {
        tmpvar_37 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_38;
      if (bLeaf2_27) {
        tmpvar_38 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_39;
      if (bLeaf2_27) {
        tmpvar_39 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_40;
      if (bLeaf2_27) {
        tmpvar_40 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_40 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_41;
      if (bLeaf2_27) {
        tmpvar_41 = bool(1);
      } else {
        tmpvar_41 = bool(1);
      };
      highp float fTwitch_42;
      highp vec3 vAxis_43;
      highp vec3 tmpvar_44;
      tmpvar_44 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_45;
      tmpvar_45 = ((tmpvar_44.x + tmpvar_44.y) + tmpvar_44.z);
      highp vec4 tmpvar_46;
      tmpvar_46.x = (tmpvar_36 + tmpvar_45);
      tmpvar_46.y = ((tmpvar_36 * 0.75) - tmpvar_45);
      tmpvar_46.z = ((tmpvar_36 * 0.01) + tmpvar_45);
      tmpvar_46.w = (tmpvar_36 + tmpvar_45);
      highp vec4 tmpvar_47;
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      tmpvar_47 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = sqrt(dot (vPos_32, vPos_32));
      highp float fAngle_50;
      fAngle_50 = ((_glesMultiTexCoord2.x * tmpvar_38) * (tmpvar_47.x + (tmpvar_47.y * tmpvar_47.y)));
      highp vec2 vSinCos_51;
      vSinCos_51.x = sin(fAngle_50);
      vSinCos_51.y = cos(fAngle_50);
      highp float tmpvar_52;
      tmpvar_52 = (1.0 - vSinCos_51.y);
      highp mat3 tmpvar_53;
      tmpvar_53[0].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.x) + vSinCos_51.y);
      tmpvar_53[0].y = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.y) + (vSinCos_51.x * tmpvar_35.z));
      tmpvar_53[0].z = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.z) - (vSinCos_51.x * tmpvar_35.y));
      tmpvar_53[1].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.y) - (vSinCos_51.x * tmpvar_35.z));
      tmpvar_53[1].y = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.y) + vSinCos_51.y);
      tmpvar_53[1].z = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.z) + (vSinCos_51.x * tmpvar_35.x));
      tmpvar_53[2].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.z) + (vSinCos_51.x * tmpvar_35.y));
      tmpvar_53[2].y = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.z) - (vSinCos_51.x * tmpvar_35.x));
      tmpvar_53[2].z = (((tmpvar_52 * tmpvar_35.z) * tmpvar_35.z) + vSinCos_51.y);
      highp vec3 tmpvar_54;
      tmpvar_54 = ((tmpvar_35.yzx * vRotatedWindVector_19.zxy) - (tmpvar_35.zxy * vRotatedWindVector_19.yzx));
      vAxis_43.xz = tmpvar_54.xz;
      highp float tmpvar_55;
      tmpvar_55 = clamp (dot (vRotatedWindVector_19, tmpvar_35), -1.0, 1.0);
      vAxis_43.y = (tmpvar_54.y + tmpvar_55);
      highp vec3 tmpvar_56;
      tmpvar_56 = normalize(vAxis_43);
      vAxis_43 = tmpvar_56;
      highp float tmpvar_57;
      tmpvar_57 = (1.570796 - (sign(tmpvar_55) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_55))) * (1.570796 + (abs(tmpvar_55) * (-0.2146018 + 
          (abs(tmpvar_55) * (0.08656672 + (abs(tmpvar_55) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_58;
      tmpvar_58 = (tmpvar_47.y - (tmpvar_47.x * tmpvar_47.x));
      fTwitch_42 = 0.0;
      if (tmpvar_41) {
        highp float fTime_59;
        fTime_59 = (tmpvar_40.z + tmpvar_45);
        highp vec4 tmpvar_60;
        tmpvar_60.zw = vec2(0.0, 0.0);
        tmpvar_60.x = fTime_59;
        tmpvar_60.y = (0.87 * fTime_59);
        highp vec4 tmpvar_61;
        highp vec4 tmpvar_62;
        tmpvar_62 = abs(((
          fract((tmpvar_60 + 0.5))
         * 2.0) - 1.0));
        tmpvar_61 = (((
          (tmpvar_62 * tmpvar_62)
         * 
          (3.0 - (2.0 * tmpvar_62))
        ) - 0.5) * 2.0);
        fTwitch_42 = (tmpvar_40.x * pow (clamp (
          ((((tmpvar_61.x * tmpvar_61.y) * tmpvar_61.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_40.y));
      };
      highp float fAngle_63;
      fAngle_63 = (_glesMultiTexCoord2.x * ((
        (tmpvar_57 * tmpvar_39)
       + 
        (tmpvar_58 * tmpvar_37)
      ) + fTwitch_42));
      highp vec2 vSinCos_64;
      vSinCos_64.x = sin(fAngle_63);
      vSinCos_64.y = cos(fAngle_63);
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - vSinCos_64.y);
      highp mat3 tmpvar_66;
      tmpvar_66[0].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.x) + vSinCos_64.y);
      tmpvar_66[0].y = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.y) + (vSinCos_64.x * tmpvar_56.z));
      tmpvar_66[0].z = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.z) - (vSinCos_64.x * tmpvar_56.y));
      tmpvar_66[1].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.y) - (vSinCos_64.x * tmpvar_56.z));
      tmpvar_66[1].y = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.y) + vSinCos_64.y);
      tmpvar_66[1].z = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.z) + (vSinCos_64.x * tmpvar_56.x));
      tmpvar_66[2].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.z) + (vSinCos_64.x * tmpvar_56.y));
      tmpvar_66[2].y = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.z) - (vSinCos_64.x * tmpvar_56.x));
      tmpvar_66[2].z = (((tmpvar_65 * tmpvar_56.z) * tmpvar_56.z) + vSinCos_64.y);
      highp mat3 tmpvar_67;
      tmpvar_67 = (tmpvar_53 * tmpvar_66);
      vDirection_29 = (tmpvar_67 * _glesNormal);
      vPos_28 = (normalize((tmpvar_67 * vPos_32)) * tmpvar_49);
    };
    tmpvar_17 = vDirection_29;
    FinalPosition_20 = vPos_28;
  };
  highp vec3 tmpvar_68;
  tmpvar_68 = (FinalPosition_20 + _glesMultiTexCoord1.xyz);
  FinalPosition_20 = tmpvar_68;
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_69;
    vPos_69 = tmpvar_68;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_70;
      vPos_70 = tmpvar_68;
      highp float fAdherenceScale_71;
      highp vec3 tmpvar_72;
      tmpvar_72 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_73;
      tmpvar_73 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_74;
      highp float fOscillation_75;
      fOscillation_75 = 1.0;
      highp float fAmount_76;
      highp float fTarget_77;
      highp vec4 tmpvar_78;
      tmpvar_78.x = (tmpvar_73 + _glesMultiTexCoord0.w);
      tmpvar_78.y = ((tmpvar_73 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_78.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_73 + _glesMultiTexCoord0.w));
      tmpvar_78.w = ((tmpvar_73 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      vOscillations_74 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      highp float tmpvar_80;
      tmpvar_80 = (vOscillations_74.y * vOscillations_74.z);
      fTarget_77 = 1.0;
      fAmount_76 = tmpvar_80;
      if ((tmpvar_80 < 0.0)) {
        fTarget_77 = -1.0;
        fAmount_76 = -(tmpvar_80);
      };
      fOscillation_75 = (((
        (mix (mix (tmpvar_80, fTarget_77, fAmount_76), fTarget_77, fAmount_76) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_74.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_74.w * _ST_WindBranchWhip.x)));
      vPos_70 = (tmpvar_68 + ((tmpvar_72 * fOscillation_75) * _ST_WindBranch.y));
      highp vec4 tmpvar_81;
      tmpvar_81.zw = vec2(0.0, 0.0);
      tmpvar_81.x = ((tmpvar_73 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_81.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_82;
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_81 + 0.5))
       * 2.0) - 1.0));
      tmpvar_82 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      fAdherenceScale_71 = (1.0 - ((
        ((tmpvar_82.x * tmpvar_82.y) * tmpvar_82.x)
       * tmpvar_82.y) * _ST_WindTurbulences.x));
      fAdherenceScale_71 = (fAdherenceScale_71 + ((vOscillations_74.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_70 = (vPos_70 + ((
        ((vRotatedBranchAnchor_18 - vPos_70) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_71) * _glesMultiTexCoord0.z));
      vPos_69 = vPos_70;
    } else {
      highp vec3 vPos_84;
      vPos_84 = vPos_69;
      highp vec3 tmpvar_85;
      tmpvar_85 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_86;
      tmpvar_86 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_87;
      highp float fAmount_88;
      highp float fTarget_89;
      highp vec4 tmpvar_90;
      tmpvar_90.w = 0.0;
      tmpvar_90.x = (tmpvar_86 + _glesMultiTexCoord0.w);
      tmpvar_90.y = ((tmpvar_86 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_90.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_86 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_91;
      tmpvar_91 = abs(((
        fract((tmpvar_90 + 0.5))
       * 2.0) - 1.0));
      vOscillations_87 = (((
        (tmpvar_91 * tmpvar_91)
       * 
        (3.0 - (2.0 * tmpvar_91))
      ) - 0.5) * 2.0);
      highp float tmpvar_92;
      tmpvar_92 = (vOscillations_87.y * vOscillations_87.z);
      fTarget_89 = 1.0;
      fAmount_88 = tmpvar_92;
      if ((tmpvar_92 < 0.0)) {
        fTarget_89 = -1.0;
        fAmount_88 = -(tmpvar_92);
      };
      vPos_84 = (vPos_69 + ((tmpvar_85 * 
        (((mix (
          mix (tmpvar_92, fTarget_89, fAmount_88)
        , fTarget_89, fAmount_88) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_87.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_69 = vPos_84;
    };
    FinalPosition_20 = vPos_69;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_93;
    vPos_93 = FinalPosition_20;
    highp float fAdjust_94;
    highp float fLength_95;
    fLength_95 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_96;
    tmpvar_96 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_94 = tmpvar_96;
    if ((tmpvar_96 != 0.0)) {
      fAdjust_94 = pow (tmpvar_96, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_97;
    tmpvar_97.zw = vec2(0.0, 0.0);
    tmpvar_97.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_97.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_98;
    highp vec4 tmpvar_99;
    tmpvar_99 = abs(((
      fract((tmpvar_97 + 0.5))
     * 2.0) - 1.0));
    tmpvar_98 = (((
      (tmpvar_99 * tmpvar_99)
     * 
      (3.0 - (2.0 * tmpvar_99))
    ) - 0.5) * 2.0);
    vPos_93.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_98.x + (tmpvar_98.y * tmpvar_98.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_94)));
    vPos_93 = (normalize(vPos_93) * fLength_95);
    FinalPosition_20 = vPos_93;
  };
  tmpvar_16.xyz = FinalPosition_20;
  tmpvar_6 = tmpvar_9;
  highp vec3 tmpvar_100;
  tmpvar_100 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_101;
  v_101.x = _World2Object[0].x;
  v_101.y = _World2Object[1].x;
  v_101.z = _World2Object[2].x;
  v_101.w = _World2Object[3].x;
  highp vec4 v_102;
  v_102.x = _World2Object[0].y;
  v_102.y = _World2Object[1].y;
  v_102.z = _World2Object[2].y;
  v_102.w = _World2Object[3].y;
  highp vec4 v_103;
  v_103.x = _World2Object[0].z;
  v_103.y = _World2Object[1].z;
  v_103.z = _World2Object[2].z;
  v_103.w = _World2Object[3].z;
  highp vec3 tmpvar_104;
  tmpvar_104 = normalize(((
    (v_101.xyz * tmpvar_17.x)
   + 
    (v_102.xyz * tmpvar_17.y)
  ) + (v_103.xyz * tmpvar_17.z)));
  worldNormal_5 = tmpvar_104;
  highp mat3 tmpvar_105;
  tmpvar_105[0] = _Object2World[0].xyz;
  tmpvar_105[1] = _Object2World[1].xyz;
  tmpvar_105[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_106;
  tmpvar_106 = normalize((tmpvar_105 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_106;
  lowp vec3 tmpvar_107;
  tmpvar_107 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_108;
  tmpvar_108 = (tmpvar_107 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_108;
  highp vec4 tmpvar_109;
  tmpvar_109.x = worldTangent_4.x;
  tmpvar_109.y = worldBinormal_3.x;
  tmpvar_109.z = worldNormal_5.x;
  tmpvar_109.w = tmpvar_100.x;
  highp vec4 tmpvar_110;
  tmpvar_110.x = worldTangent_4.y;
  tmpvar_110.y = worldBinormal_3.y;
  tmpvar_110.z = worldNormal_5.y;
  tmpvar_110.w = tmpvar_100.y;
  highp vec4 tmpvar_111;
  tmpvar_111.x = worldTangent_4.z;
  tmpvar_111.y = worldBinormal_3.z;
  tmpvar_111.z = worldNormal_5.z;
  tmpvar_111.w = tmpvar_100.z;
  lowp vec4 tmpvar_112;
  tmpvar_112.w = 1.0;
  tmpvar_112.xyz = worldNormal_5;
  mediump vec3 tmpvar_113;
  mediump vec4 normal_114;
  normal_114 = tmpvar_112;
  mediump vec3 x2_115;
  mediump vec4 tmpvar_116;
  tmpvar_116 = (normal_114.xyzz * normal_114.yzzx);
  x2_115.x = dot (unity_SHBr, tmpvar_116);
  x2_115.y = dot (unity_SHBg, tmpvar_116);
  x2_115.z = dot (unity_SHBb, tmpvar_116);
  tmpvar_113 = (x2_115 + (unity_SHC.xyz * (
    (normal_114.x * normal_114.x)
   - 
    (normal_114.y * normal_114.y)
  )));
  highp vec3 lightColor0_117;
  lightColor0_117 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_118;
  lightColor1_118 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_119;
  lightColor2_119 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_120;
  lightColor3_120 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_121;
  lightAttenSq_121 = unity_4LightAtten0;
  highp vec3 normal_122;
  normal_122 = worldNormal_5;
  highp vec4 tmpvar_123;
  tmpvar_123 = (unity_4LightPosX0 - tmpvar_100.x);
  highp vec4 tmpvar_124;
  tmpvar_124 = (unity_4LightPosY0 - tmpvar_100.y);
  highp vec4 tmpvar_125;
  tmpvar_125 = (unity_4LightPosZ0 - tmpvar_100.z);
  highp vec4 tmpvar_126;
  tmpvar_126 = (((tmpvar_123 * tmpvar_123) + (tmpvar_124 * tmpvar_124)) + (tmpvar_125 * tmpvar_125));
  highp vec4 tmpvar_127;
  tmpvar_127 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_123 * normal_122.x) + (tmpvar_124 * normal_122.y)) + (tmpvar_125 * normal_122.z))
   * 
    inversesqrt(tmpvar_126)
  )) * (1.0/((1.0 + 
    (tmpvar_126 * lightAttenSq_121)
  ))));
  highp vec3 tmpvar_128;
  tmpvar_128 = (tmpvar_113 + ((
    ((lightColor0_117 * tmpvar_127.x) + (lightColor1_118 * tmpvar_127.y))
   + 
    (lightColor2_119 * tmpvar_127.z)
  ) + (lightColor3_120 * tmpvar_127.w)));
  tmpvar_7 = tmpvar_128;
  highp vec4 tmpvar_129;
  tmpvar_129 = (unity_World2Shadow[0] * (_Object2World * tmpvar_16));
  tmpvar_8 = tmpvar_129;
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_109;
  xlv_TEXCOORD1 = tmpvar_110;
  xlv_TEXCOORD2 = tmpvar_111;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_18;
  lowp float tmpvar_19;
  tmpvar_19 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz);
  mediump float tmpvar_20;
  tmpvar_20 = (_LightShadowData.x + (tmpvar_19 * (1.0 - _LightShadowData.x)));
  shadow_18 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_4.x = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_4.y = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_4.z = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_24;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_18;
  mediump vec3 normalWorld_25;
  normalWorld_25 = worldN_4;
  mediump vec3 tmpvar_26;
  mediump vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = normalWorld_25;
  mediump vec3 x1_28;
  x1_28.x = dot (unity_SHAr, tmpvar_27);
  x1_28.y = dot (unity_SHAg, tmpvar_27);
  x1_28.z = dot (unity_SHAb, tmpvar_27);
  tmpvar_26 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_26;
  lowp vec4 c_29;
  lowp vec4 c_30;
  lowp float diff_31;
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_31 = tmpvar_32;
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((tmpvar_9 * tmpvar_26) * diff_31);
  c_30.xyz = tmpvar_33;
  c_30.w = tmpvar_10;
  c_29.w = c_30.w;
  mediump vec3 tmpvar_34;
  tmpvar_34 = (c_30.xyz + (tmpvar_9 * (xlv_TEXCOORD5 + x1_28)));
  c_29.xyz = tmpvar_34;
  c_5.xyz = c_29.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
in vec4 _glesTANGENT;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_10.xy = tmpvar_11;
  tmpvar_9.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_9.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_15;
  highp vec4 tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_16 = tmpvar_1;
  tmpvar_17 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  FinalPosition_20 = tmpvar_1.xyz;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_24;
  tmpvar_24 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_20 = tmpvar_24;
  if (((tmpvar_21 > 1.0) && (tmpvar_21 < 5.0))) {
    highp float tmpvar_25;
    tmpvar_25 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_26;
    isBestWind_26 = (tmpvar_21 == 4.0);
    bool bLeaf2_27;
    bLeaf2_27 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_28;
    vPos_28 = tmpvar_24;
    highp vec3 vDirection_29;
    vDirection_29 = tmpvar_2;
    highp float tmpvar_30;
    if (bLeaf2_27) {
      tmpvar_30 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_31;
    if (bLeaf2_27) {
      tmpvar_31 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_32;
    highp vec4 tmpvar_33;
    tmpvar_33.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_33.x = (tmpvar_30 + tmpvar_25);
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    vPos_32 = (tmpvar_24 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_31 * (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_29 = tmpvar_2;
    vPos_28 = vPos_32;
    if (isBestWind_26) {
      highp vec3 tmpvar_35;
      tmpvar_35 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_36;
      if (bLeaf2_27) {
        tmpvar_36 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_37;
      if (bLeaf2_27) {
        tmpvar_37 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_38;
      if (bLeaf2_27) {
        tmpvar_38 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_39;
      if (bLeaf2_27) {
        tmpvar_39 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_40;
      if (bLeaf2_27) {
        tmpvar_40 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_40 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_41;
      if (bLeaf2_27) {
        tmpvar_41 = bool(1);
      } else {
        tmpvar_41 = bool(1);
      };
      highp float fTwitch_42;
      highp vec3 vAxis_43;
      highp vec3 tmpvar_44;
      tmpvar_44 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_45;
      tmpvar_45 = ((tmpvar_44.x + tmpvar_44.y) + tmpvar_44.z);
      highp vec4 tmpvar_46;
      tmpvar_46.x = (tmpvar_36 + tmpvar_45);
      tmpvar_46.y = ((tmpvar_36 * 0.75) - tmpvar_45);
      tmpvar_46.z = ((tmpvar_36 * 0.01) + tmpvar_45);
      tmpvar_46.w = (tmpvar_36 + tmpvar_45);
      highp vec4 tmpvar_47;
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      tmpvar_47 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = sqrt(dot (vPos_32, vPos_32));
      highp float fAngle_50;
      fAngle_50 = ((_glesMultiTexCoord2.x * tmpvar_38) * (tmpvar_47.x + (tmpvar_47.y * tmpvar_47.y)));
      highp vec2 vSinCos_51;
      vSinCos_51.x = sin(fAngle_50);
      vSinCos_51.y = cos(fAngle_50);
      highp float tmpvar_52;
      tmpvar_52 = (1.0 - vSinCos_51.y);
      highp mat3 tmpvar_53;
      tmpvar_53[0].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.x) + vSinCos_51.y);
      tmpvar_53[0].y = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.y) + (vSinCos_51.x * tmpvar_35.z));
      tmpvar_53[0].z = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.z) - (vSinCos_51.x * tmpvar_35.y));
      tmpvar_53[1].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.y) - (vSinCos_51.x * tmpvar_35.z));
      tmpvar_53[1].y = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.y) + vSinCos_51.y);
      tmpvar_53[1].z = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.z) + (vSinCos_51.x * tmpvar_35.x));
      tmpvar_53[2].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.z) + (vSinCos_51.x * tmpvar_35.y));
      tmpvar_53[2].y = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.z) - (vSinCos_51.x * tmpvar_35.x));
      tmpvar_53[2].z = (((tmpvar_52 * tmpvar_35.z) * tmpvar_35.z) + vSinCos_51.y);
      highp vec3 tmpvar_54;
      tmpvar_54 = ((tmpvar_35.yzx * vRotatedWindVector_19.zxy) - (tmpvar_35.zxy * vRotatedWindVector_19.yzx));
      vAxis_43.xz = tmpvar_54.xz;
      highp float tmpvar_55;
      tmpvar_55 = clamp (dot (vRotatedWindVector_19, tmpvar_35), -1.0, 1.0);
      vAxis_43.y = (tmpvar_54.y + tmpvar_55);
      highp vec3 tmpvar_56;
      tmpvar_56 = normalize(vAxis_43);
      vAxis_43 = tmpvar_56;
      highp float tmpvar_57;
      tmpvar_57 = (1.570796 - (sign(tmpvar_55) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_55))) * (1.570796 + (abs(tmpvar_55) * (-0.2146018 + 
          (abs(tmpvar_55) * (0.08656672 + (abs(tmpvar_55) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_58;
      tmpvar_58 = (tmpvar_47.y - (tmpvar_47.x * tmpvar_47.x));
      fTwitch_42 = 0.0;
      if (tmpvar_41) {
        highp float fTime_59;
        fTime_59 = (tmpvar_40.z + tmpvar_45);
        highp vec4 tmpvar_60;
        tmpvar_60.zw = vec2(0.0, 0.0);
        tmpvar_60.x = fTime_59;
        tmpvar_60.y = (0.87 * fTime_59);
        highp vec4 tmpvar_61;
        highp vec4 tmpvar_62;
        tmpvar_62 = abs(((
          fract((tmpvar_60 + 0.5))
         * 2.0) - 1.0));
        tmpvar_61 = (((
          (tmpvar_62 * tmpvar_62)
         * 
          (3.0 - (2.0 * tmpvar_62))
        ) - 0.5) * 2.0);
        fTwitch_42 = (tmpvar_40.x * pow (clamp (
          ((((tmpvar_61.x * tmpvar_61.y) * tmpvar_61.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_40.y));
      };
      highp float fAngle_63;
      fAngle_63 = (_glesMultiTexCoord2.x * ((
        (tmpvar_57 * tmpvar_39)
       + 
        (tmpvar_58 * tmpvar_37)
      ) + fTwitch_42));
      highp vec2 vSinCos_64;
      vSinCos_64.x = sin(fAngle_63);
      vSinCos_64.y = cos(fAngle_63);
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - vSinCos_64.y);
      highp mat3 tmpvar_66;
      tmpvar_66[0].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.x) + vSinCos_64.y);
      tmpvar_66[0].y = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.y) + (vSinCos_64.x * tmpvar_56.z));
      tmpvar_66[0].z = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.z) - (vSinCos_64.x * tmpvar_56.y));
      tmpvar_66[1].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.y) - (vSinCos_64.x * tmpvar_56.z));
      tmpvar_66[1].y = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.y) + vSinCos_64.y);
      tmpvar_66[1].z = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.z) + (vSinCos_64.x * tmpvar_56.x));
      tmpvar_66[2].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.z) + (vSinCos_64.x * tmpvar_56.y));
      tmpvar_66[2].y = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.z) - (vSinCos_64.x * tmpvar_56.x));
      tmpvar_66[2].z = (((tmpvar_65 * tmpvar_56.z) * tmpvar_56.z) + vSinCos_64.y);
      highp mat3 tmpvar_67;
      tmpvar_67 = (tmpvar_53 * tmpvar_66);
      vDirection_29 = (tmpvar_67 * _glesNormal);
      vPos_28 = (normalize((tmpvar_67 * vPos_32)) * tmpvar_49);
    };
    tmpvar_17 = vDirection_29;
    FinalPosition_20 = vPos_28;
  };
  highp vec3 tmpvar_68;
  tmpvar_68 = (FinalPosition_20 + _glesMultiTexCoord1.xyz);
  FinalPosition_20 = tmpvar_68;
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_69;
    vPos_69 = tmpvar_68;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_70;
      vPos_70 = tmpvar_68;
      highp float fAdherenceScale_71;
      highp vec3 tmpvar_72;
      tmpvar_72 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_73;
      tmpvar_73 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_74;
      highp float fOscillation_75;
      fOscillation_75 = 1.0;
      highp float fAmount_76;
      highp float fTarget_77;
      highp vec4 tmpvar_78;
      tmpvar_78.x = (tmpvar_73 + _glesMultiTexCoord0.w);
      tmpvar_78.y = ((tmpvar_73 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_78.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_73 + _glesMultiTexCoord0.w));
      tmpvar_78.w = ((tmpvar_73 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      vOscillations_74 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      highp float tmpvar_80;
      tmpvar_80 = (vOscillations_74.y * vOscillations_74.z);
      fTarget_77 = 1.0;
      fAmount_76 = tmpvar_80;
      if ((tmpvar_80 < 0.0)) {
        fTarget_77 = -1.0;
        fAmount_76 = -(tmpvar_80);
      };
      fOscillation_75 = (((
        (mix (mix (tmpvar_80, fTarget_77, fAmount_76), fTarget_77, fAmount_76) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_74.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_74.w * _ST_WindBranchWhip.x)));
      vPos_70 = (tmpvar_68 + ((tmpvar_72 * fOscillation_75) * _ST_WindBranch.y));
      highp vec4 tmpvar_81;
      tmpvar_81.zw = vec2(0.0, 0.0);
      tmpvar_81.x = ((tmpvar_73 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_81.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_82;
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_81 + 0.5))
       * 2.0) - 1.0));
      tmpvar_82 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      fAdherenceScale_71 = (1.0 - ((
        ((tmpvar_82.x * tmpvar_82.y) * tmpvar_82.x)
       * tmpvar_82.y) * _ST_WindTurbulences.x));
      fAdherenceScale_71 = (fAdherenceScale_71 + ((vOscillations_74.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_70 = (vPos_70 + ((
        ((vRotatedBranchAnchor_18 - vPos_70) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_71) * _glesMultiTexCoord0.z));
      vPos_69 = vPos_70;
    } else {
      highp vec3 vPos_84;
      vPos_84 = vPos_69;
      highp vec3 tmpvar_85;
      tmpvar_85 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_86;
      tmpvar_86 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_87;
      highp float fAmount_88;
      highp float fTarget_89;
      highp vec4 tmpvar_90;
      tmpvar_90.w = 0.0;
      tmpvar_90.x = (tmpvar_86 + _glesMultiTexCoord0.w);
      tmpvar_90.y = ((tmpvar_86 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_90.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_86 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_91;
      tmpvar_91 = abs(((
        fract((tmpvar_90 + 0.5))
       * 2.0) - 1.0));
      vOscillations_87 = (((
        (tmpvar_91 * tmpvar_91)
       * 
        (3.0 - (2.0 * tmpvar_91))
      ) - 0.5) * 2.0);
      highp float tmpvar_92;
      tmpvar_92 = (vOscillations_87.y * vOscillations_87.z);
      fTarget_89 = 1.0;
      fAmount_88 = tmpvar_92;
      if ((tmpvar_92 < 0.0)) {
        fTarget_89 = -1.0;
        fAmount_88 = -(tmpvar_92);
      };
      vPos_84 = (vPos_69 + ((tmpvar_85 * 
        (((mix (
          mix (tmpvar_92, fTarget_89, fAmount_88)
        , fTarget_89, fAmount_88) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_87.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_69 = vPos_84;
    };
    FinalPosition_20 = vPos_69;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_93;
    vPos_93 = FinalPosition_20;
    highp float fAdjust_94;
    highp float fLength_95;
    fLength_95 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_96;
    tmpvar_96 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_94 = tmpvar_96;
    if ((tmpvar_96 != 0.0)) {
      fAdjust_94 = pow (tmpvar_96, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_97;
    tmpvar_97.zw = vec2(0.0, 0.0);
    tmpvar_97.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_97.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_98;
    highp vec4 tmpvar_99;
    tmpvar_99 = abs(((
      fract((tmpvar_97 + 0.5))
     * 2.0) - 1.0));
    tmpvar_98 = (((
      (tmpvar_99 * tmpvar_99)
     * 
      (3.0 - (2.0 * tmpvar_99))
    ) - 0.5) * 2.0);
    vPos_93.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_98.x + (tmpvar_98.y * tmpvar_98.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_94)));
    vPos_93 = (normalize(vPos_93) * fLength_95);
    FinalPosition_20 = vPos_93;
  };
  tmpvar_16.xyz = FinalPosition_20;
  tmpvar_6 = tmpvar_9;
  highp vec3 tmpvar_100;
  tmpvar_100 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_101;
  v_101.x = _World2Object[0].x;
  v_101.y = _World2Object[1].x;
  v_101.z = _World2Object[2].x;
  v_101.w = _World2Object[3].x;
  highp vec4 v_102;
  v_102.x = _World2Object[0].y;
  v_102.y = _World2Object[1].y;
  v_102.z = _World2Object[2].y;
  v_102.w = _World2Object[3].y;
  highp vec4 v_103;
  v_103.x = _World2Object[0].z;
  v_103.y = _World2Object[1].z;
  v_103.z = _World2Object[2].z;
  v_103.w = _World2Object[3].z;
  highp vec3 tmpvar_104;
  tmpvar_104 = normalize(((
    (v_101.xyz * tmpvar_17.x)
   + 
    (v_102.xyz * tmpvar_17.y)
  ) + (v_103.xyz * tmpvar_17.z)));
  worldNormal_5 = tmpvar_104;
  highp mat3 tmpvar_105;
  tmpvar_105[0] = _Object2World[0].xyz;
  tmpvar_105[1] = _Object2World[1].xyz;
  tmpvar_105[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_106;
  tmpvar_106 = normalize((tmpvar_105 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_106;
  lowp vec3 tmpvar_107;
  tmpvar_107 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_108;
  tmpvar_108 = (tmpvar_107 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_108;
  highp vec4 tmpvar_109;
  tmpvar_109.x = worldTangent_4.x;
  tmpvar_109.y = worldBinormal_3.x;
  tmpvar_109.z = worldNormal_5.x;
  tmpvar_109.w = tmpvar_100.x;
  highp vec4 tmpvar_110;
  tmpvar_110.x = worldTangent_4.y;
  tmpvar_110.y = worldBinormal_3.y;
  tmpvar_110.z = worldNormal_5.y;
  tmpvar_110.w = tmpvar_100.y;
  highp vec4 tmpvar_111;
  tmpvar_111.x = worldTangent_4.z;
  tmpvar_111.y = worldBinormal_3.z;
  tmpvar_111.z = worldNormal_5.z;
  tmpvar_111.w = tmpvar_100.z;
  lowp vec4 tmpvar_112;
  tmpvar_112.w = 1.0;
  tmpvar_112.xyz = worldNormal_5;
  mediump vec3 tmpvar_113;
  mediump vec4 normal_114;
  normal_114 = tmpvar_112;
  mediump vec3 x2_115;
  mediump vec4 tmpvar_116;
  tmpvar_116 = (normal_114.xyzz * normal_114.yzzx);
  x2_115.x = dot (unity_SHBr, tmpvar_116);
  x2_115.y = dot (unity_SHBg, tmpvar_116);
  x2_115.z = dot (unity_SHBb, tmpvar_116);
  tmpvar_113 = (x2_115 + (unity_SHC.xyz * (
    (normal_114.x * normal_114.x)
   - 
    (normal_114.y * normal_114.y)
  )));
  highp vec3 lightColor0_117;
  lightColor0_117 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_118;
  lightColor1_118 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_119;
  lightColor2_119 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_120;
  lightColor3_120 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_121;
  lightAttenSq_121 = unity_4LightAtten0;
  highp vec3 normal_122;
  normal_122 = worldNormal_5;
  highp vec4 tmpvar_123;
  tmpvar_123 = (unity_4LightPosX0 - tmpvar_100.x);
  highp vec4 tmpvar_124;
  tmpvar_124 = (unity_4LightPosY0 - tmpvar_100.y);
  highp vec4 tmpvar_125;
  tmpvar_125 = (unity_4LightPosZ0 - tmpvar_100.z);
  highp vec4 tmpvar_126;
  tmpvar_126 = (((tmpvar_123 * tmpvar_123) + (tmpvar_124 * tmpvar_124)) + (tmpvar_125 * tmpvar_125));
  highp vec4 tmpvar_127;
  tmpvar_127 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_123 * normal_122.x) + (tmpvar_124 * normal_122.y)) + (tmpvar_125 * normal_122.z))
   * 
    inversesqrt(tmpvar_126)
  )) * (1.0/((1.0 + 
    (tmpvar_126 * lightAttenSq_121)
  ))));
  highp vec3 tmpvar_128;
  tmpvar_128 = (tmpvar_113 + ((
    ((lightColor0_117 * tmpvar_127.x) + (lightColor1_118 * tmpvar_127.y))
   + 
    (lightColor2_119 * tmpvar_127.z)
  ) + (lightColor3_120 * tmpvar_127.w)));
  tmpvar_7 = tmpvar_128;
  highp vec4 tmpvar_129;
  tmpvar_129 = (unity_World2Shadow[0] * (_Object2World * tmpvar_16));
  tmpvar_8 = tmpvar_129;
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_109;
  xlv_TEXCOORD1 = tmpvar_110;
  xlv_TEXCOORD2 = tmpvar_111;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_18;
  mediump float tmpvar_19;
  tmpvar_19 = texture (_ShadowMapTexture, xlv_TEXCOORD6.xyz);
  lowp float tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump float tmpvar_21;
  tmpvar_21 = (_LightShadowData.x + (tmpvar_20 * (1.0 - _LightShadowData.x)));
  shadow_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_4.x = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_4.y = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_4.z = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_25;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_18;
  mediump vec3 normalWorld_26;
  normalWorld_26 = worldN_4;
  mediump vec3 tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = normalWorld_26;
  mediump vec3 x1_29;
  x1_29.x = dot (unity_SHAr, tmpvar_28);
  x1_29.y = dot (unity_SHAg, tmpvar_28);
  x1_29.z = dot (unity_SHAb, tmpvar_28);
  tmpvar_27 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_27;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_32 = tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_9 * tmpvar_27) * diff_32);
  c_31.xyz = tmpvar_34;
  c_31.w = tmpvar_10;
  c_30.w = c_31.w;
  mediump vec3 tmpvar_35;
  tmpvar_35 = (c_31.xyz + (tmpvar_9 * (xlv_TEXCOORD5 + x1_29)));
  c_30.xyz = tmpvar_35;
  c_5.xyz = c_30.xyz;
  c_5.w = 1.0;
  _glesFragData[0] = c_5;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_FACING_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_8;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_20;
  tmpvar_20[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_20[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_20[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_21;
  tmpvar_21 = (normalize((tmpvar_19 * tmpvar_20)) * sqrt(dot (tmpvar_19, tmpvar_19)));
  FinalPosition_14 = tmpvar_21;
  if (((tmpvar_16 > 1.0) && (tmpvar_16 < 5.0))) {
    highp float tmpvar_22;
    tmpvar_22 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_23;
    isBestWind_23 = (tmpvar_16 == 4.0);
    bool bLeaf2_24;
    bLeaf2_24 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    highp vec3 vDirection_26;
    vDirection_26 = tmpvar_2;
    highp float tmpvar_27;
    if (bLeaf2_24) {
      tmpvar_27 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_28;
    if (bLeaf2_24) {
      tmpvar_28 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_29;
    highp vec4 tmpvar_30;
    tmpvar_30.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_30.x = (tmpvar_27 + tmpvar_22);
    highp vec4 tmpvar_31;
    tmpvar_31 = abs(((
      fract((tmpvar_30 + 0.5))
     * 2.0) - 1.0));
    vPos_29 = (tmpvar_21 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_28 * (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_26 = tmpvar_2;
    vPos_25 = vPos_29;
    if (isBestWind_23) {
      highp vec3 tmpvar_32;
      tmpvar_32 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_33;
      if (bLeaf2_24) {
        tmpvar_33 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_34;
      if (bLeaf2_24) {
        tmpvar_34 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_35;
      if (bLeaf2_24) {
        tmpvar_35 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_36;
      if (bLeaf2_24) {
        tmpvar_36 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_37;
      if (bLeaf2_24) {
        tmpvar_37 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_37 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_38;
      if (bLeaf2_24) {
        tmpvar_38 = bool(1);
      } else {
        tmpvar_38 = bool(1);
      };
      highp float fTwitch_39;
      highp vec3 vAxis_40;
      highp vec3 tmpvar_41;
      tmpvar_41 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_42;
      tmpvar_42 = ((tmpvar_41.x + tmpvar_41.y) + tmpvar_41.z);
      highp vec4 tmpvar_43;
      tmpvar_43.x = (tmpvar_33 + tmpvar_42);
      tmpvar_43.y = ((tmpvar_33 * 0.75) - tmpvar_42);
      tmpvar_43.z = ((tmpvar_33 * 0.01) + tmpvar_42);
      tmpvar_43.w = (tmpvar_33 + tmpvar_42);
      highp vec4 tmpvar_44;
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      tmpvar_44 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = sqrt(dot (vPos_29, vPos_29));
      highp float fAngle_47;
      fAngle_47 = ((_glesMultiTexCoord2.x * tmpvar_35) * (tmpvar_44.x + (tmpvar_44.y * tmpvar_44.y)));
      highp vec2 vSinCos_48;
      vSinCos_48.x = sin(fAngle_47);
      vSinCos_48.y = cos(fAngle_47);
      highp float tmpvar_49;
      tmpvar_49 = (1.0 - vSinCos_48.y);
      highp mat3 tmpvar_50;
      tmpvar_50[0].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.x) + vSinCos_48.y);
      tmpvar_50[0].y = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.y) + (vSinCos_48.x * tmpvar_32.z));
      tmpvar_50[0].z = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.z) - (vSinCos_48.x * tmpvar_32.y));
      tmpvar_50[1].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.y) - (vSinCos_48.x * tmpvar_32.z));
      tmpvar_50[1].y = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.y) + vSinCos_48.y);
      tmpvar_50[1].z = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.z) + (vSinCos_48.x * tmpvar_32.x));
      tmpvar_50[2].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.z) + (vSinCos_48.x * tmpvar_32.y));
      tmpvar_50[2].y = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.z) - (vSinCos_48.x * tmpvar_32.x));
      tmpvar_50[2].z = (((tmpvar_49 * tmpvar_32.z) * tmpvar_32.z) + vSinCos_48.y);
      highp vec3 tmpvar_51;
      tmpvar_51 = ((tmpvar_32.yzx * vRotatedWindVector_13.zxy) - (tmpvar_32.zxy * vRotatedWindVector_13.yzx));
      vAxis_40.xz = tmpvar_51.xz;
      highp float tmpvar_52;
      tmpvar_52 = clamp (dot (vRotatedWindVector_13, tmpvar_32), -1.0, 1.0);
      vAxis_40.y = (tmpvar_51.y + tmpvar_52);
      highp vec3 tmpvar_53;
      tmpvar_53 = normalize(vAxis_40);
      vAxis_40 = tmpvar_53;
      highp float tmpvar_54;
      tmpvar_54 = (1.570796 - (sign(tmpvar_52) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_52))) * (1.570796 + (abs(tmpvar_52) * (-0.2146018 + 
          (abs(tmpvar_52) * (0.08656672 + (abs(tmpvar_52) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_55;
      tmpvar_55 = (tmpvar_44.y - (tmpvar_44.x * tmpvar_44.x));
      fTwitch_39 = 0.0;
      if (tmpvar_38) {
        highp float fTime_56;
        fTime_56 = (tmpvar_37.z + tmpvar_42);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_39 = (tmpvar_37.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_37.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_54 * tmpvar_36)
       + 
        (tmpvar_55 * tmpvar_34)
      ) + fTwitch_39));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.y) + (vSinCos_61.x * tmpvar_53.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.z) - (vSinCos_61.x * tmpvar_53.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.y) - (vSinCos_61.x * tmpvar_53.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.z) + (vSinCos_61.x * tmpvar_53.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.z) + (vSinCos_61.x * tmpvar_53.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.z) - (vSinCos_61.x * tmpvar_53.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_53.z) * tmpvar_53.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_50 * tmpvar_63);
      vDirection_26 = (tmpvar_64 * _glesNormal);
      vPos_25 = (normalize((tmpvar_64 * vPos_29)) * tmpvar_46);
    };
    tmpvar_11 = vDirection_26;
    FinalPosition_14 = vPos_25;
  };
  highp vec3 tmpvar_65;
  tmpvar_65 = (FinalPosition_14 + _glesMultiTexCoord1.xyz);
  FinalPosition_14 = tmpvar_65;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_66;
    vPos_66 = tmpvar_65;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_67;
      vPos_67 = tmpvar_65;
      highp float fAdherenceScale_68;
      highp vec3 tmpvar_69;
      tmpvar_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_70;
      tmpvar_70 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_71;
      highp float fOscillation_72;
      fOscillation_72 = 1.0;
      highp float fAmount_73;
      highp float fTarget_74;
      highp vec4 tmpvar_75;
      tmpvar_75.x = (tmpvar_70 + _glesMultiTexCoord0.w);
      tmpvar_75.y = ((tmpvar_70 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_75.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_70 + _glesMultiTexCoord0.w));
      tmpvar_75.w = ((tmpvar_70 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      vOscillations_71 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      highp float tmpvar_77;
      tmpvar_77 = (vOscillations_71.y * vOscillations_71.z);
      fTarget_74 = 1.0;
      fAmount_73 = tmpvar_77;
      if ((tmpvar_77 < 0.0)) {
        fTarget_74 = -1.0;
        fAmount_73 = -(tmpvar_77);
      };
      fOscillation_72 = (((
        (mix (mix (tmpvar_77, fTarget_74, fAmount_73), fTarget_74, fAmount_73) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_71.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_71.w * _ST_WindBranchWhip.x)));
      vPos_67 = (tmpvar_65 + ((tmpvar_69 * fOscillation_72) * _ST_WindBranch.y));
      highp vec4 tmpvar_78;
      tmpvar_78.zw = vec2(0.0, 0.0);
      tmpvar_78.x = ((tmpvar_70 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_78.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_79;
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      tmpvar_79 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((
        ((tmpvar_79.x * tmpvar_79.y) * tmpvar_79.x)
       * tmpvar_79.y) * _ST_WindTurbulences.x));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_71.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_67 = (vPos_67 + ((
        ((vRotatedBranchAnchor_12 - vPos_67) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_66 = vPos_67;
    } else {
      highp vec3 vPos_81;
      vPos_81 = vPos_66;
      highp vec3 tmpvar_82;
      tmpvar_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_83;
      tmpvar_83 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_84;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (tmpvar_83 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((tmpvar_83 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_83 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_84 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_84.y * vOscillations_84.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      vPos_81 = (vPos_66 + ((tmpvar_82 * 
        (((mix (
          mix (tmpvar_89, fTarget_86, fAmount_85)
        , fTarget_86, fAmount_85) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_84.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_66 = vPos_81;
    };
    FinalPosition_14 = vPos_66;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = FinalPosition_14;
    highp float fAdjust_91;
    highp float fLength_92;
    fLength_92 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_93;
    tmpvar_93 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_91 = tmpvar_93;
    if ((tmpvar_93 != 0.0)) {
      fAdjust_91 = pow (tmpvar_93, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_94;
    tmpvar_94.zw = vec2(0.0, 0.0);
    tmpvar_94.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_94.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_95;
    highp vec4 tmpvar_96;
    tmpvar_96 = abs(((
      fract((tmpvar_94 + 0.5))
     * 2.0) - 1.0));
    tmpvar_95 = (((
      (tmpvar_96 * tmpvar_96)
     * 
      (3.0 - (2.0 * tmpvar_96))
    ) - 0.5) * 2.0);
    vPos_90.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * (
      ((_ST_WindGlobal.y * (tmpvar_95.x + (tmpvar_95.y * tmpvar_95.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_91)));
    vPos_90 = (normalize(vPos_90) * fLength_92);
    FinalPosition_14 = vPos_90;
  };
  tmpvar_10.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_97;
  v_97.x = _World2Object[0].x;
  v_97.y = _World2Object[1].x;
  v_97.z = _World2Object[2].x;
  v_97.w = _World2Object[3].x;
  highp vec4 v_98;
  v_98.x = _World2Object[0].y;
  v_98.y = _World2Object[1].y;
  v_98.z = _World2Object[2].y;
  v_98.w = _World2Object[3].y;
  highp vec4 v_99;
  v_99.x = _World2Object[0].z;
  v_99.y = _World2Object[1].z;
  v_99.z = _World2Object[2].z;
  v_99.w = _World2Object[3].z;
  highp vec3 tmpvar_100;
  tmpvar_100 = normalize(((
    (v_97.xyz * tmpvar_11.x)
   + 
    (v_98.xyz * tmpvar_11.y)
  ) + (v_99.xyz * tmpvar_11.z)));
  worldNormal_3 = tmpvar_100;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_101;
  tmpvar_101.w = 1.0;
  tmpvar_101.xyz = worldNormal_3;
  mediump vec4 normal_102;
  normal_102 = tmpvar_101;
  mediump vec3 x2_103;
  mediump vec4 tmpvar_104;
  tmpvar_104 = (normal_102.xyzz * normal_102.yzzx);
  x2_103.x = dot (unity_SHBr, tmpvar_104);
  x2_103.y = dot (unity_SHBg, tmpvar_104);
  x2_103.z = dot (unity_SHBb, tmpvar_104);
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = (x2_103 + (unity_SHC.xyz * (
    (normal_102.x * normal_102.x)
   - 
    (normal_102.y * normal_102.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_12;
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_15;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_4;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_16;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_21 = tmpvar_22;
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.xyz = tmpvar_23;
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (c_20.xyz + (tmpvar_8 * (xlv_TEXCOORD4 + x1_18)));
  c_19.xyz = tmpvar_24;
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_8;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_20;
  tmpvar_20[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_20[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_20[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_21;
  tmpvar_21 = (normalize((tmpvar_19 * tmpvar_20)) * sqrt(dot (tmpvar_19, tmpvar_19)));
  FinalPosition_14 = tmpvar_21;
  if (((tmpvar_16 > 1.0) && (tmpvar_16 < 5.0))) {
    highp float tmpvar_22;
    tmpvar_22 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_23;
    isBestWind_23 = (tmpvar_16 == 4.0);
    bool bLeaf2_24;
    bLeaf2_24 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    highp vec3 vDirection_26;
    vDirection_26 = tmpvar_2;
    highp float tmpvar_27;
    if (bLeaf2_24) {
      tmpvar_27 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_28;
    if (bLeaf2_24) {
      tmpvar_28 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_29;
    highp vec4 tmpvar_30;
    tmpvar_30.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_30.x = (tmpvar_27 + tmpvar_22);
    highp vec4 tmpvar_31;
    tmpvar_31 = abs(((
      fract((tmpvar_30 + 0.5))
     * 2.0) - 1.0));
    vPos_29 = (tmpvar_21 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_28 * (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_26 = tmpvar_2;
    vPos_25 = vPos_29;
    if (isBestWind_23) {
      highp vec3 tmpvar_32;
      tmpvar_32 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_33;
      if (bLeaf2_24) {
        tmpvar_33 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_34;
      if (bLeaf2_24) {
        tmpvar_34 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_35;
      if (bLeaf2_24) {
        tmpvar_35 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_36;
      if (bLeaf2_24) {
        tmpvar_36 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_37;
      if (bLeaf2_24) {
        tmpvar_37 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_37 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_38;
      if (bLeaf2_24) {
        tmpvar_38 = bool(1);
      } else {
        tmpvar_38 = bool(1);
      };
      highp float fTwitch_39;
      highp vec3 vAxis_40;
      highp vec3 tmpvar_41;
      tmpvar_41 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_42;
      tmpvar_42 = ((tmpvar_41.x + tmpvar_41.y) + tmpvar_41.z);
      highp vec4 tmpvar_43;
      tmpvar_43.x = (tmpvar_33 + tmpvar_42);
      tmpvar_43.y = ((tmpvar_33 * 0.75) - tmpvar_42);
      tmpvar_43.z = ((tmpvar_33 * 0.01) + tmpvar_42);
      tmpvar_43.w = (tmpvar_33 + tmpvar_42);
      highp vec4 tmpvar_44;
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      tmpvar_44 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = sqrt(dot (vPos_29, vPos_29));
      highp float fAngle_47;
      fAngle_47 = ((_glesMultiTexCoord2.x * tmpvar_35) * (tmpvar_44.x + (tmpvar_44.y * tmpvar_44.y)));
      highp vec2 vSinCos_48;
      vSinCos_48.x = sin(fAngle_47);
      vSinCos_48.y = cos(fAngle_47);
      highp float tmpvar_49;
      tmpvar_49 = (1.0 - vSinCos_48.y);
      highp mat3 tmpvar_50;
      tmpvar_50[0].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.x) + vSinCos_48.y);
      tmpvar_50[0].y = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.y) + (vSinCos_48.x * tmpvar_32.z));
      tmpvar_50[0].z = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.z) - (vSinCos_48.x * tmpvar_32.y));
      tmpvar_50[1].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.y) - (vSinCos_48.x * tmpvar_32.z));
      tmpvar_50[1].y = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.y) + vSinCos_48.y);
      tmpvar_50[1].z = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.z) + (vSinCos_48.x * tmpvar_32.x));
      tmpvar_50[2].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.z) + (vSinCos_48.x * tmpvar_32.y));
      tmpvar_50[2].y = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.z) - (vSinCos_48.x * tmpvar_32.x));
      tmpvar_50[2].z = (((tmpvar_49 * tmpvar_32.z) * tmpvar_32.z) + vSinCos_48.y);
      highp vec3 tmpvar_51;
      tmpvar_51 = ((tmpvar_32.yzx * vRotatedWindVector_13.zxy) - (tmpvar_32.zxy * vRotatedWindVector_13.yzx));
      vAxis_40.xz = tmpvar_51.xz;
      highp float tmpvar_52;
      tmpvar_52 = clamp (dot (vRotatedWindVector_13, tmpvar_32), -1.0, 1.0);
      vAxis_40.y = (tmpvar_51.y + tmpvar_52);
      highp vec3 tmpvar_53;
      tmpvar_53 = normalize(vAxis_40);
      vAxis_40 = tmpvar_53;
      highp float tmpvar_54;
      tmpvar_54 = (1.570796 - (sign(tmpvar_52) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_52))) * (1.570796 + (abs(tmpvar_52) * (-0.2146018 + 
          (abs(tmpvar_52) * (0.08656672 + (abs(tmpvar_52) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_55;
      tmpvar_55 = (tmpvar_44.y - (tmpvar_44.x * tmpvar_44.x));
      fTwitch_39 = 0.0;
      if (tmpvar_38) {
        highp float fTime_56;
        fTime_56 = (tmpvar_37.z + tmpvar_42);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_39 = (tmpvar_37.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_37.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_54 * tmpvar_36)
       + 
        (tmpvar_55 * tmpvar_34)
      ) + fTwitch_39));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.y) + (vSinCos_61.x * tmpvar_53.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.z) - (vSinCos_61.x * tmpvar_53.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.y) - (vSinCos_61.x * tmpvar_53.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.z) + (vSinCos_61.x * tmpvar_53.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.z) + (vSinCos_61.x * tmpvar_53.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.z) - (vSinCos_61.x * tmpvar_53.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_53.z) * tmpvar_53.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_50 * tmpvar_63);
      vDirection_26 = (tmpvar_64 * _glesNormal);
      vPos_25 = (normalize((tmpvar_64 * vPos_29)) * tmpvar_46);
    };
    tmpvar_11 = vDirection_26;
    FinalPosition_14 = vPos_25;
  };
  highp vec3 tmpvar_65;
  tmpvar_65 = (FinalPosition_14 + _glesMultiTexCoord1.xyz);
  FinalPosition_14 = tmpvar_65;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_66;
    vPos_66 = tmpvar_65;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_67;
      vPos_67 = tmpvar_65;
      highp float fAdherenceScale_68;
      highp vec3 tmpvar_69;
      tmpvar_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_70;
      tmpvar_70 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_71;
      highp float fOscillation_72;
      fOscillation_72 = 1.0;
      highp float fAmount_73;
      highp float fTarget_74;
      highp vec4 tmpvar_75;
      tmpvar_75.x = (tmpvar_70 + _glesMultiTexCoord0.w);
      tmpvar_75.y = ((tmpvar_70 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_75.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_70 + _glesMultiTexCoord0.w));
      tmpvar_75.w = ((tmpvar_70 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      vOscillations_71 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      highp float tmpvar_77;
      tmpvar_77 = (vOscillations_71.y * vOscillations_71.z);
      fTarget_74 = 1.0;
      fAmount_73 = tmpvar_77;
      if ((tmpvar_77 < 0.0)) {
        fTarget_74 = -1.0;
        fAmount_73 = -(tmpvar_77);
      };
      fOscillation_72 = (((
        (mix (mix (tmpvar_77, fTarget_74, fAmount_73), fTarget_74, fAmount_73) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_71.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_71.w * _ST_WindBranchWhip.x)));
      vPos_67 = (tmpvar_65 + ((tmpvar_69 * fOscillation_72) * _ST_WindBranch.y));
      highp vec4 tmpvar_78;
      tmpvar_78.zw = vec2(0.0, 0.0);
      tmpvar_78.x = ((tmpvar_70 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_78.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_79;
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      tmpvar_79 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((
        ((tmpvar_79.x * tmpvar_79.y) * tmpvar_79.x)
       * tmpvar_79.y) * _ST_WindTurbulences.x));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_71.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_67 = (vPos_67 + ((
        ((vRotatedBranchAnchor_12 - vPos_67) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_66 = vPos_67;
    } else {
      highp vec3 vPos_81;
      vPos_81 = vPos_66;
      highp vec3 tmpvar_82;
      tmpvar_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_83;
      tmpvar_83 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_84;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (tmpvar_83 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((tmpvar_83 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_83 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_84 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_84.y * vOscillations_84.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      vPos_81 = (vPos_66 + ((tmpvar_82 * 
        (((mix (
          mix (tmpvar_89, fTarget_86, fAmount_85)
        , fTarget_86, fAmount_85) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_84.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_66 = vPos_81;
    };
    FinalPosition_14 = vPos_66;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = FinalPosition_14;
    highp float fAdjust_91;
    highp float fLength_92;
    fLength_92 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_93;
    tmpvar_93 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_91 = tmpvar_93;
    if ((tmpvar_93 != 0.0)) {
      fAdjust_91 = pow (tmpvar_93, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_94;
    tmpvar_94.zw = vec2(0.0, 0.0);
    tmpvar_94.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_94.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_95;
    highp vec4 tmpvar_96;
    tmpvar_96 = abs(((
      fract((tmpvar_94 + 0.5))
     * 2.0) - 1.0));
    tmpvar_95 = (((
      (tmpvar_96 * tmpvar_96)
     * 
      (3.0 - (2.0 * tmpvar_96))
    ) - 0.5) * 2.0);
    vPos_90.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * (
      ((_ST_WindGlobal.y * (tmpvar_95.x + (tmpvar_95.y * tmpvar_95.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_91)));
    vPos_90 = (normalize(vPos_90) * fLength_92);
    FinalPosition_14 = vPos_90;
  };
  tmpvar_10.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_97;
  v_97.x = _World2Object[0].x;
  v_97.y = _World2Object[1].x;
  v_97.z = _World2Object[2].x;
  v_97.w = _World2Object[3].x;
  highp vec4 v_98;
  v_98.x = _World2Object[0].y;
  v_98.y = _World2Object[1].y;
  v_98.z = _World2Object[2].y;
  v_98.w = _World2Object[3].y;
  highp vec4 v_99;
  v_99.x = _World2Object[0].z;
  v_99.y = _World2Object[1].z;
  v_99.z = _World2Object[2].z;
  v_99.w = _World2Object[3].z;
  highp vec3 tmpvar_100;
  tmpvar_100 = normalize(((
    (v_97.xyz * tmpvar_11.x)
   + 
    (v_98.xyz * tmpvar_11.y)
  ) + (v_99.xyz * tmpvar_11.z)));
  worldNormal_3 = tmpvar_100;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_101;
  tmpvar_101.w = 1.0;
  tmpvar_101.xyz = worldNormal_3;
  mediump vec4 normal_102;
  normal_102 = tmpvar_101;
  mediump vec3 x2_103;
  mediump vec4 tmpvar_104;
  tmpvar_104 = (normal_102.xyzz * normal_102.yzzx);
  x2_103.x = dot (unity_SHBr, tmpvar_104);
  x2_103.y = dot (unity_SHBg, tmpvar_104);
  x2_103.z = dot (unity_SHBb, tmpvar_104);
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = (x2_103 + (unity_SHC.xyz * (
    (normal_102.x * normal_102.x)
   - 
    (normal_102.y * normal_102.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_12;
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_15;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_4;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_16;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_21 = tmpvar_22;
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.xyz = tmpvar_23;
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (c_20.xyz + (tmpvar_8 * (xlv_TEXCOORD4 + x1_18)));
  c_19.xyz = tmpvar_24;
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_FACING_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_9;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_21;
  tmpvar_21[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_21[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_21[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_22;
  tmpvar_22 = (normalize((tmpvar_20 * tmpvar_21)) * sqrt(dot (tmpvar_20, tmpvar_20)));
  FinalPosition_15 = tmpvar_22;
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_23;
    tmpvar_23 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_24;
    isBestWind_24 = (tmpvar_17 == 4.0);
    bool bLeaf2_25;
    bLeaf2_25 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    highp vec3 vDirection_27;
    vDirection_27 = tmpvar_2;
    highp float tmpvar_28;
    if (bLeaf2_25) {
      tmpvar_28 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_29;
    if (bLeaf2_25) {
      tmpvar_29 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_30;
    highp vec4 tmpvar_31;
    tmpvar_31.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_31.x = (tmpvar_28 + tmpvar_23);
    highp vec4 tmpvar_32;
    tmpvar_32 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    vPos_30 = (tmpvar_22 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_29 * (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_27 = tmpvar_2;
    vPos_26 = vPos_30;
    if (isBestWind_24) {
      highp vec3 tmpvar_33;
      tmpvar_33 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_34;
      if (bLeaf2_25) {
        tmpvar_34 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_35;
      if (bLeaf2_25) {
        tmpvar_35 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_36;
      if (bLeaf2_25) {
        tmpvar_36 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_37;
      if (bLeaf2_25) {
        tmpvar_37 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_38;
      if (bLeaf2_25) {
        tmpvar_38 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_38 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_39;
      if (bLeaf2_25) {
        tmpvar_39 = bool(1);
      } else {
        tmpvar_39 = bool(1);
      };
      highp float fTwitch_40;
      highp vec3 vAxis_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_34 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_34 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_34 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_34 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_30, vPos_30));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_36) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) + (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) - (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_33.z) * tmpvar_33.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_33.yzx * vRotatedWindVector_14.zxy) - (tmpvar_33.zxy * vRotatedWindVector_14.yzx));
      vAxis_41.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_14, tmpvar_33), -1.0, 1.0);
      vAxis_41.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_41);
      vAxis_41 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_56;
      tmpvar_56 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_40 = 0.0;
      if (tmpvar_39) {
        highp float fTime_57;
        fTime_57 = (tmpvar_38.z + tmpvar_43);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_40 = (tmpvar_38.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_38.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_37)
       + 
        (tmpvar_56 * tmpvar_35)
      ) + fTwitch_40));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_51 * tmpvar_64);
      vDirection_27 = (tmpvar_65 * _glesNormal);
      vPos_26 = (normalize((tmpvar_65 * vPos_30)) * tmpvar_47);
    };
    tmpvar_12 = vDirection_27;
    FinalPosition_15 = vPos_26;
  };
  highp vec3 tmpvar_66;
  tmpvar_66 = (FinalPosition_15 + _glesMultiTexCoord1.xyz);
  FinalPosition_15 = tmpvar_66;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_67;
    vPos_67 = tmpvar_66;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_68;
      vPos_68 = tmpvar_66;
      highp float fAdherenceScale_69;
      highp vec3 tmpvar_70;
      tmpvar_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_71;
      tmpvar_71 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_72;
      highp float fOscillation_73;
      fOscillation_73 = 1.0;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.x = (tmpvar_71 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((tmpvar_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_71 + _glesMultiTexCoord0.w));
      tmpvar_76.w = ((tmpvar_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_72 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_72.y * vOscillations_72.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      fOscillation_73 = (((
        (mix (mix (tmpvar_78, fTarget_75, fAmount_74), fTarget_75, fAmount_74) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_72.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_72.w * _ST_WindBranchWhip.x)));
      vPos_68 = (tmpvar_66 + ((tmpvar_70 * fOscillation_73) * _ST_WindBranch.y));
      highp vec4 tmpvar_79;
      tmpvar_79.zw = vec2(0.0, 0.0);
      tmpvar_79.x = ((tmpvar_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_79.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_80;
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      tmpvar_80 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((
        ((tmpvar_80.x * tmpvar_80.y) * tmpvar_80.x)
       * tmpvar_80.y) * _ST_WindTurbulences.x));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_72.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_68 = (vPos_68 + ((
        ((vRotatedBranchAnchor_13 - vPos_68) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_67 = vPos_68;
    } else {
      highp vec3 vPos_82;
      vPos_82 = vPos_67;
      highp vec3 tmpvar_83;
      tmpvar_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_84;
      tmpvar_84 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_85;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (tmpvar_84 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((tmpvar_84 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_84 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_85 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_85.y * vOscillations_85.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      vPos_82 = (vPos_67 + ((tmpvar_83 * 
        (((mix (
          mix (tmpvar_90, fTarget_87, fAmount_86)
        , fTarget_87, fAmount_86) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_85.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_67 = vPos_82;
    };
    FinalPosition_15 = vPos_67;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_15;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_95.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    vPos_91.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_96.x + (tmpvar_96.y * tmpvar_96.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_92)));
    vPos_91 = (normalize(vPos_91) * fLength_93);
    FinalPosition_15 = vPos_91;
  };
  tmpvar_11.xyz = FinalPosition_15;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_98;
  v_98.x = _World2Object[0].x;
  v_98.y = _World2Object[1].x;
  v_98.z = _World2Object[2].x;
  v_98.w = _World2Object[3].x;
  highp vec4 v_99;
  v_99.x = _World2Object[0].y;
  v_99.y = _World2Object[1].y;
  v_99.z = _World2Object[2].y;
  v_99.w = _World2Object[3].y;
  highp vec4 v_100;
  v_100.x = _World2Object[0].z;
  v_100.y = _World2Object[1].z;
  v_100.z = _World2Object[2].z;
  v_100.w = _World2Object[3].z;
  highp vec3 tmpvar_101;
  tmpvar_101 = normalize(((
    (v_98.xyz * tmpvar_12.x)
   + 
    (v_99.xyz * tmpvar_12.y)
  ) + (v_100.xyz * tmpvar_12.z)));
  worldNormal_3 = tmpvar_101;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_102;
  tmpvar_102.w = 1.0;
  tmpvar_102.xyz = worldNormal_3;
  mediump vec4 normal_103;
  normal_103 = tmpvar_102;
  mediump vec3 x2_104;
  mediump vec4 tmpvar_105;
  tmpvar_105 = (normal_103.xyzz * normal_103.yzzx);
  x2_104.x = dot (unity_SHBr, tmpvar_105);
  x2_104.y = dot (unity_SHBg, tmpvar_105);
  x2_104.z = dot (unity_SHBb, tmpvar_105);
  highp vec4 tmpvar_106;
  tmpvar_106 = (unity_World2Shadow[0] * (_Object2World * tmpvar_11));
  tmpvar_6 = tmpvar_106;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = (x2_104 + (unity_SHC.xyz * (
    (normal_103.x * normal_103.x)
   - 
    (normal_103.y * normal_103.y)
  )));
  xlv_TEXCOORD5 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_15;
  lowp float tmpvar_16;
  mediump float dist_17;
  lowp float tmpvar_18;
  tmpvar_18 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x;
  dist_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (float((dist_17 > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_16 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_20;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_16;
  mediump vec3 normalWorld_21;
  normalWorld_21 = tmpvar_5;
  mediump vec3 tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_21;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  tmpvar_22 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_27 = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_9 * tmpvar_22) * diff_27);
  c_26.xyz = tmpvar_29;
  c_26.w = tmpvar_10;
  c_25.w = c_26.w;
  mediump vec3 tmpvar_30;
  tmpvar_30 = (c_26.xyz + (tmpvar_9 * (xlv_TEXCOORD4 + x1_24)));
  c_25.xyz = tmpvar_30;
  c_4.xyz = c_25.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_FACING_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_9;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_21;
  tmpvar_21[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_21[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_21[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_22;
  tmpvar_22 = (normalize((tmpvar_20 * tmpvar_21)) * sqrt(dot (tmpvar_20, tmpvar_20)));
  FinalPosition_15 = tmpvar_22;
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_23;
    tmpvar_23 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_24;
    isBestWind_24 = (tmpvar_17 == 4.0);
    bool bLeaf2_25;
    bLeaf2_25 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    highp vec3 vDirection_27;
    vDirection_27 = tmpvar_2;
    highp float tmpvar_28;
    if (bLeaf2_25) {
      tmpvar_28 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_29;
    if (bLeaf2_25) {
      tmpvar_29 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_30;
    highp vec4 tmpvar_31;
    tmpvar_31.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_31.x = (tmpvar_28 + tmpvar_23);
    highp vec4 tmpvar_32;
    tmpvar_32 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    vPos_30 = (tmpvar_22 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_29 * (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_27 = tmpvar_2;
    vPos_26 = vPos_30;
    if (isBestWind_24) {
      highp vec3 tmpvar_33;
      tmpvar_33 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_34;
      if (bLeaf2_25) {
        tmpvar_34 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_35;
      if (bLeaf2_25) {
        tmpvar_35 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_36;
      if (bLeaf2_25) {
        tmpvar_36 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_37;
      if (bLeaf2_25) {
        tmpvar_37 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_38;
      if (bLeaf2_25) {
        tmpvar_38 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_38 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_39;
      if (bLeaf2_25) {
        tmpvar_39 = bool(1);
      } else {
        tmpvar_39 = bool(1);
      };
      highp float fTwitch_40;
      highp vec3 vAxis_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_34 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_34 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_34 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_34 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_30, vPos_30));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_36) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) + (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) - (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_33.z) * tmpvar_33.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_33.yzx * vRotatedWindVector_14.zxy) - (tmpvar_33.zxy * vRotatedWindVector_14.yzx));
      vAxis_41.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_14, tmpvar_33), -1.0, 1.0);
      vAxis_41.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_41);
      vAxis_41 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_56;
      tmpvar_56 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_40 = 0.0;
      if (tmpvar_39) {
        highp float fTime_57;
        fTime_57 = (tmpvar_38.z + tmpvar_43);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_40 = (tmpvar_38.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_38.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_37)
       + 
        (tmpvar_56 * tmpvar_35)
      ) + fTwitch_40));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_51 * tmpvar_64);
      vDirection_27 = (tmpvar_65 * _glesNormal);
      vPos_26 = (normalize((tmpvar_65 * vPos_30)) * tmpvar_47);
    };
    tmpvar_12 = vDirection_27;
    FinalPosition_15 = vPos_26;
  };
  highp vec3 tmpvar_66;
  tmpvar_66 = (FinalPosition_15 + _glesMultiTexCoord1.xyz);
  FinalPosition_15 = tmpvar_66;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_67;
    vPos_67 = tmpvar_66;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_68;
      vPos_68 = tmpvar_66;
      highp float fAdherenceScale_69;
      highp vec3 tmpvar_70;
      tmpvar_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_71;
      tmpvar_71 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_72;
      highp float fOscillation_73;
      fOscillation_73 = 1.0;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.x = (tmpvar_71 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((tmpvar_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_71 + _glesMultiTexCoord0.w));
      tmpvar_76.w = ((tmpvar_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_72 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_72.y * vOscillations_72.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      fOscillation_73 = (((
        (mix (mix (tmpvar_78, fTarget_75, fAmount_74), fTarget_75, fAmount_74) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_72.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_72.w * _ST_WindBranchWhip.x)));
      vPos_68 = (tmpvar_66 + ((tmpvar_70 * fOscillation_73) * _ST_WindBranch.y));
      highp vec4 tmpvar_79;
      tmpvar_79.zw = vec2(0.0, 0.0);
      tmpvar_79.x = ((tmpvar_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_79.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_80;
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      tmpvar_80 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((
        ((tmpvar_80.x * tmpvar_80.y) * tmpvar_80.x)
       * tmpvar_80.y) * _ST_WindTurbulences.x));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_72.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_68 = (vPos_68 + ((
        ((vRotatedBranchAnchor_13 - vPos_68) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_67 = vPos_68;
    } else {
      highp vec3 vPos_82;
      vPos_82 = vPos_67;
      highp vec3 tmpvar_83;
      tmpvar_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_84;
      tmpvar_84 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_85;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (tmpvar_84 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((tmpvar_84 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_84 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_85 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_85.y * vOscillations_85.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      vPos_82 = (vPos_67 + ((tmpvar_83 * 
        (((mix (
          mix (tmpvar_90, fTarget_87, fAmount_86)
        , fTarget_87, fAmount_86) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_85.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_67 = vPos_82;
    };
    FinalPosition_15 = vPos_67;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_15;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_95.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    vPos_91.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_96.x + (tmpvar_96.y * tmpvar_96.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_92)));
    vPos_91 = (normalize(vPos_91) * fLength_93);
    FinalPosition_15 = vPos_91;
  };
  tmpvar_11.xyz = FinalPosition_15;
  tmpvar_5 = tmpvar_7;
  highp vec3 tmpvar_98;
  tmpvar_98 = (_Object2World * tmpvar_11).xyz;
  highp vec4 v_99;
  v_99.x = _World2Object[0].x;
  v_99.y = _World2Object[1].x;
  v_99.z = _World2Object[2].x;
  v_99.w = _World2Object[3].x;
  highp vec4 v_100;
  v_100.x = _World2Object[0].y;
  v_100.y = _World2Object[1].y;
  v_100.z = _World2Object[2].y;
  v_100.w = _World2Object[3].y;
  highp vec4 v_101;
  v_101.x = _World2Object[0].z;
  v_101.y = _World2Object[1].z;
  v_101.z = _World2Object[2].z;
  v_101.w = _World2Object[3].z;
  highp vec3 tmpvar_102;
  tmpvar_102 = normalize(((
    (v_99.xyz * tmpvar_12.x)
   + 
    (v_100.xyz * tmpvar_12.y)
  ) + (v_101.xyz * tmpvar_12.z)));
  worldNormal_3 = tmpvar_102;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_103;
  tmpvar_103.w = 1.0;
  tmpvar_103.xyz = worldNormal_3;
  mediump vec3 tmpvar_104;
  mediump vec4 normal_105;
  normal_105 = tmpvar_103;
  mediump vec3 x2_106;
  mediump vec4 tmpvar_107;
  tmpvar_107 = (normal_105.xyzz * normal_105.yzzx);
  x2_106.x = dot (unity_SHBr, tmpvar_107);
  x2_106.y = dot (unity_SHBg, tmpvar_107);
  x2_106.z = dot (unity_SHBb, tmpvar_107);
  tmpvar_104 = (x2_106 + (unity_SHC.xyz * (
    (normal_105.x * normal_105.x)
   - 
    (normal_105.y * normal_105.y)
  )));
  highp vec3 lightColor0_108;
  lightColor0_108 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_109;
  lightColor1_109 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_110;
  lightColor2_110 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_111;
  lightColor3_111 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_112;
  lightAttenSq_112 = unity_4LightAtten0;
  highp vec3 normal_113;
  normal_113 = worldNormal_3;
  highp vec4 tmpvar_114;
  tmpvar_114 = (unity_4LightPosX0 - tmpvar_98.x);
  highp vec4 tmpvar_115;
  tmpvar_115 = (unity_4LightPosY0 - tmpvar_98.y);
  highp vec4 tmpvar_116;
  tmpvar_116 = (unity_4LightPosZ0 - tmpvar_98.z);
  highp vec4 tmpvar_117;
  tmpvar_117 = (((tmpvar_114 * tmpvar_114) + (tmpvar_115 * tmpvar_115)) + (tmpvar_116 * tmpvar_116));
  highp vec4 tmpvar_118;
  tmpvar_118 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_114 * normal_113.x) + (tmpvar_115 * normal_113.y)) + (tmpvar_116 * normal_113.z))
   * 
    inversesqrt(tmpvar_117)
  )) * (1.0/((1.0 + 
    (tmpvar_117 * lightAttenSq_112)
  ))));
  highp vec3 tmpvar_119;
  tmpvar_119 = (tmpvar_104 + ((
    ((lightColor0_108 * tmpvar_118.x) + (lightColor1_109 * tmpvar_118.y))
   + 
    (lightColor2_110 * tmpvar_118.z)
  ) + (lightColor3_111 * tmpvar_118.w)));
  tmpvar_6 = tmpvar_119;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_98;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_12;
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_15;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_4;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_16;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_21 = tmpvar_22;
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.xyz = tmpvar_23;
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (c_20.xyz + (tmpvar_8 * (xlv_TEXCOORD4 + x1_18)));
  c_19.xyz = tmpvar_24;
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_9;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_21;
  tmpvar_21[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_21[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_21[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_22;
  tmpvar_22 = (normalize((tmpvar_20 * tmpvar_21)) * sqrt(dot (tmpvar_20, tmpvar_20)));
  FinalPosition_15 = tmpvar_22;
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_23;
    tmpvar_23 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_24;
    isBestWind_24 = (tmpvar_17 == 4.0);
    bool bLeaf2_25;
    bLeaf2_25 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    highp vec3 vDirection_27;
    vDirection_27 = tmpvar_2;
    highp float tmpvar_28;
    if (bLeaf2_25) {
      tmpvar_28 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_29;
    if (bLeaf2_25) {
      tmpvar_29 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_30;
    highp vec4 tmpvar_31;
    tmpvar_31.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_31.x = (tmpvar_28 + tmpvar_23);
    highp vec4 tmpvar_32;
    tmpvar_32 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    vPos_30 = (tmpvar_22 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_29 * (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_27 = tmpvar_2;
    vPos_26 = vPos_30;
    if (isBestWind_24) {
      highp vec3 tmpvar_33;
      tmpvar_33 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_34;
      if (bLeaf2_25) {
        tmpvar_34 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_35;
      if (bLeaf2_25) {
        tmpvar_35 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_36;
      if (bLeaf2_25) {
        tmpvar_36 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_37;
      if (bLeaf2_25) {
        tmpvar_37 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_38;
      if (bLeaf2_25) {
        tmpvar_38 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_38 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_39;
      if (bLeaf2_25) {
        tmpvar_39 = bool(1);
      } else {
        tmpvar_39 = bool(1);
      };
      highp float fTwitch_40;
      highp vec3 vAxis_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_34 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_34 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_34 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_34 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_30, vPos_30));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_36) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) + (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) - (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_33.z) * tmpvar_33.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_33.yzx * vRotatedWindVector_14.zxy) - (tmpvar_33.zxy * vRotatedWindVector_14.yzx));
      vAxis_41.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_14, tmpvar_33), -1.0, 1.0);
      vAxis_41.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_41);
      vAxis_41 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_56;
      tmpvar_56 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_40 = 0.0;
      if (tmpvar_39) {
        highp float fTime_57;
        fTime_57 = (tmpvar_38.z + tmpvar_43);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_40 = (tmpvar_38.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_38.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_37)
       + 
        (tmpvar_56 * tmpvar_35)
      ) + fTwitch_40));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_51 * tmpvar_64);
      vDirection_27 = (tmpvar_65 * _glesNormal);
      vPos_26 = (normalize((tmpvar_65 * vPos_30)) * tmpvar_47);
    };
    tmpvar_12 = vDirection_27;
    FinalPosition_15 = vPos_26;
  };
  highp vec3 tmpvar_66;
  tmpvar_66 = (FinalPosition_15 + _glesMultiTexCoord1.xyz);
  FinalPosition_15 = tmpvar_66;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_67;
    vPos_67 = tmpvar_66;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_68;
      vPos_68 = tmpvar_66;
      highp float fAdherenceScale_69;
      highp vec3 tmpvar_70;
      tmpvar_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_71;
      tmpvar_71 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_72;
      highp float fOscillation_73;
      fOscillation_73 = 1.0;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.x = (tmpvar_71 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((tmpvar_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_71 + _glesMultiTexCoord0.w));
      tmpvar_76.w = ((tmpvar_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_72 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_72.y * vOscillations_72.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      fOscillation_73 = (((
        (mix (mix (tmpvar_78, fTarget_75, fAmount_74), fTarget_75, fAmount_74) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_72.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_72.w * _ST_WindBranchWhip.x)));
      vPos_68 = (tmpvar_66 + ((tmpvar_70 * fOscillation_73) * _ST_WindBranch.y));
      highp vec4 tmpvar_79;
      tmpvar_79.zw = vec2(0.0, 0.0);
      tmpvar_79.x = ((tmpvar_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_79.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_80;
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      tmpvar_80 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((
        ((tmpvar_80.x * tmpvar_80.y) * tmpvar_80.x)
       * tmpvar_80.y) * _ST_WindTurbulences.x));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_72.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_68 = (vPos_68 + ((
        ((vRotatedBranchAnchor_13 - vPos_68) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_67 = vPos_68;
    } else {
      highp vec3 vPos_82;
      vPos_82 = vPos_67;
      highp vec3 tmpvar_83;
      tmpvar_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_84;
      tmpvar_84 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_85;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (tmpvar_84 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((tmpvar_84 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_84 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_85 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_85.y * vOscillations_85.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      vPos_82 = (vPos_67 + ((tmpvar_83 * 
        (((mix (
          mix (tmpvar_90, fTarget_87, fAmount_86)
        , fTarget_87, fAmount_86) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_85.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_67 = vPos_82;
    };
    FinalPosition_15 = vPos_67;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_15;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_95.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    vPos_91.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_96.x + (tmpvar_96.y * tmpvar_96.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_92)));
    vPos_91 = (normalize(vPos_91) * fLength_93);
    FinalPosition_15 = vPos_91;
  };
  tmpvar_11.xyz = FinalPosition_15;
  tmpvar_5 = tmpvar_7;
  highp vec3 tmpvar_98;
  tmpvar_98 = (_Object2World * tmpvar_11).xyz;
  highp vec4 v_99;
  v_99.x = _World2Object[0].x;
  v_99.y = _World2Object[1].x;
  v_99.z = _World2Object[2].x;
  v_99.w = _World2Object[3].x;
  highp vec4 v_100;
  v_100.x = _World2Object[0].y;
  v_100.y = _World2Object[1].y;
  v_100.z = _World2Object[2].y;
  v_100.w = _World2Object[3].y;
  highp vec4 v_101;
  v_101.x = _World2Object[0].z;
  v_101.y = _World2Object[1].z;
  v_101.z = _World2Object[2].z;
  v_101.w = _World2Object[3].z;
  highp vec3 tmpvar_102;
  tmpvar_102 = normalize(((
    (v_99.xyz * tmpvar_12.x)
   + 
    (v_100.xyz * tmpvar_12.y)
  ) + (v_101.xyz * tmpvar_12.z)));
  worldNormal_3 = tmpvar_102;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_103;
  tmpvar_103.w = 1.0;
  tmpvar_103.xyz = worldNormal_3;
  mediump vec3 tmpvar_104;
  mediump vec4 normal_105;
  normal_105 = tmpvar_103;
  mediump vec3 x2_106;
  mediump vec4 tmpvar_107;
  tmpvar_107 = (normal_105.xyzz * normal_105.yzzx);
  x2_106.x = dot (unity_SHBr, tmpvar_107);
  x2_106.y = dot (unity_SHBg, tmpvar_107);
  x2_106.z = dot (unity_SHBb, tmpvar_107);
  tmpvar_104 = (x2_106 + (unity_SHC.xyz * (
    (normal_105.x * normal_105.x)
   - 
    (normal_105.y * normal_105.y)
  )));
  highp vec3 lightColor0_108;
  lightColor0_108 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_109;
  lightColor1_109 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_110;
  lightColor2_110 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_111;
  lightColor3_111 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_112;
  lightAttenSq_112 = unity_4LightAtten0;
  highp vec3 normal_113;
  normal_113 = worldNormal_3;
  highp vec4 tmpvar_114;
  tmpvar_114 = (unity_4LightPosX0 - tmpvar_98.x);
  highp vec4 tmpvar_115;
  tmpvar_115 = (unity_4LightPosY0 - tmpvar_98.y);
  highp vec4 tmpvar_116;
  tmpvar_116 = (unity_4LightPosZ0 - tmpvar_98.z);
  highp vec4 tmpvar_117;
  tmpvar_117 = (((tmpvar_114 * tmpvar_114) + (tmpvar_115 * tmpvar_115)) + (tmpvar_116 * tmpvar_116));
  highp vec4 tmpvar_118;
  tmpvar_118 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_114 * normal_113.x) + (tmpvar_115 * normal_113.y)) + (tmpvar_116 * normal_113.z))
   * 
    inversesqrt(tmpvar_117)
  )) * (1.0/((1.0 + 
    (tmpvar_117 * lightAttenSq_112)
  ))));
  highp vec3 tmpvar_119;
  tmpvar_119 = (tmpvar_104 + ((
    ((lightColor0_108 * tmpvar_118.x) + (lightColor1_109 * tmpvar_118.y))
   + 
    (lightColor2_110 * tmpvar_118.z)
  ) + (lightColor3_111 * tmpvar_118.w)));
  tmpvar_6 = tmpvar_119;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_98;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_6;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_12;
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_15;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_4;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_16;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_21 = tmpvar_22;
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.xyz = tmpvar_23;
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (c_20.xyz + (tmpvar_8 * (xlv_TEXCOORD4 + x1_18)));
  c_19.xyz = tmpvar_24;
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_FACING_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_10;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_22;
  tmpvar_22[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_22[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_22[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_23;
  tmpvar_23 = (normalize((tmpvar_21 * tmpvar_22)) * sqrt(dot (tmpvar_21, tmpvar_21)));
  FinalPosition_16 = tmpvar_23;
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_24;
    tmpvar_24 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_25;
    isBestWind_25 = (tmpvar_18 == 4.0);
    bool bLeaf2_26;
    bLeaf2_26 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_27;
    vPos_27 = tmpvar_23;
    highp vec3 vDirection_28;
    vDirection_28 = tmpvar_2;
    highp float tmpvar_29;
    if (bLeaf2_26) {
      tmpvar_29 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_30;
    if (bLeaf2_26) {
      tmpvar_30 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_31;
    highp vec4 tmpvar_32;
    tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_32.x = (tmpvar_29 + tmpvar_24);
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    vPos_31 = (tmpvar_23 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_30 * (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_28 = tmpvar_2;
    vPos_27 = vPos_31;
    if (isBestWind_25) {
      highp vec3 tmpvar_34;
      tmpvar_34 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_35;
      if (bLeaf2_26) {
        tmpvar_35 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_36;
      if (bLeaf2_26) {
        tmpvar_36 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_37;
      if (bLeaf2_26) {
        tmpvar_37 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_38;
      if (bLeaf2_26) {
        tmpvar_38 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_39;
      if (bLeaf2_26) {
        tmpvar_39 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_39 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_40;
      if (bLeaf2_26) {
        tmpvar_40 = bool(1);
      } else {
        tmpvar_40 = bool(1);
      };
      highp float fTwitch_41;
      highp vec3 vAxis_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_35 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_35 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_35 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_35 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_31, vPos_31));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_37) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) + (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) - (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_34.z) * tmpvar_34.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_34.yzx * vRotatedWindVector_15.zxy) - (tmpvar_34.zxy * vRotatedWindVector_15.yzx));
      vAxis_42.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_15, tmpvar_34), -1.0, 1.0);
      vAxis_42.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_42);
      vAxis_42 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_57;
      tmpvar_57 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_41 = 0.0;
      if (tmpvar_40) {
        highp float fTime_58;
        fTime_58 = (tmpvar_39.z + tmpvar_44);
        highp vec4 tmpvar_59;
        tmpvar_59.zw = vec2(0.0, 0.0);
        tmpvar_59.x = fTime_58;
        tmpvar_59.y = (0.87 * fTime_58);
        highp vec4 tmpvar_60;
        highp vec4 tmpvar_61;
        tmpvar_61 = abs(((
          fract((tmpvar_59 + 0.5))
         * 2.0) - 1.0));
        tmpvar_60 = (((
          (tmpvar_61 * tmpvar_61)
         * 
          (3.0 - (2.0 * tmpvar_61))
        ) - 0.5) * 2.0);
        fTwitch_41 = (tmpvar_39.x * pow (clamp (
          ((((tmpvar_60.x * tmpvar_60.y) * tmpvar_60.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_39.y));
      };
      highp float fAngle_62;
      fAngle_62 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_38)
       + 
        (tmpvar_57 * tmpvar_36)
      ) + fTwitch_41));
      highp vec2 vSinCos_63;
      vSinCos_63.x = sin(fAngle_62);
      vSinCos_63.y = cos(fAngle_62);
      highp float tmpvar_64;
      tmpvar_64 = (1.0 - vSinCos_63.y);
      highp mat3 tmpvar_65;
      tmpvar_65[0].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_63.y);
      tmpvar_65[0].y = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[0].z = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[1].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[1].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_63.y);
      tmpvar_65[1].z = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[2].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].z = (((tmpvar_64 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_63.y);
      highp mat3 tmpvar_66;
      tmpvar_66 = (tmpvar_52 * tmpvar_65);
      vDirection_28 = (tmpvar_66 * _glesNormal);
      vPos_27 = (normalize((tmpvar_66 * vPos_31)) * tmpvar_48);
    };
    tmpvar_13 = vDirection_28;
    FinalPosition_16 = vPos_27;
  };
  highp vec3 tmpvar_67;
  tmpvar_67 = (FinalPosition_16 + _glesMultiTexCoord1.xyz);
  FinalPosition_16 = tmpvar_67;
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_68;
    vPos_68 = tmpvar_67;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_69;
      vPos_69 = tmpvar_67;
      highp float fAdherenceScale_70;
      highp vec3 tmpvar_71;
      tmpvar_71 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_72;
      tmpvar_72 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_73;
      highp float fOscillation_74;
      fOscillation_74 = 1.0;
      highp float fAmount_75;
      highp float fTarget_76;
      highp vec4 tmpvar_77;
      tmpvar_77.x = (tmpvar_72 + _glesMultiTexCoord0.w);
      tmpvar_77.y = ((tmpvar_72 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_77.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_72 + _glesMultiTexCoord0.w));
      tmpvar_77.w = ((tmpvar_72 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      vOscillations_73 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      highp float tmpvar_79;
      tmpvar_79 = (vOscillations_73.y * vOscillations_73.z);
      fTarget_76 = 1.0;
      fAmount_75 = tmpvar_79;
      if ((tmpvar_79 < 0.0)) {
        fTarget_76 = -1.0;
        fAmount_75 = -(tmpvar_79);
      };
      fOscillation_74 = (((
        (mix (mix (tmpvar_79, fTarget_76, fAmount_75), fTarget_76, fAmount_75) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_73.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_73.w * _ST_WindBranchWhip.x)));
      vPos_69 = (tmpvar_67 + ((tmpvar_71 * fOscillation_74) * _ST_WindBranch.y));
      highp vec4 tmpvar_80;
      tmpvar_80.zw = vec2(0.0, 0.0);
      tmpvar_80.x = ((tmpvar_72 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_80.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_81;
      highp vec4 tmpvar_82;
      tmpvar_82 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      tmpvar_81 = (((
        (tmpvar_82 * tmpvar_82)
       * 
        (3.0 - (2.0 * tmpvar_82))
      ) - 0.5) * 2.0);
      fAdherenceScale_70 = (1.0 - ((
        ((tmpvar_81.x * tmpvar_81.y) * tmpvar_81.x)
       * tmpvar_81.y) * _ST_WindTurbulences.x));
      fAdherenceScale_70 = (fAdherenceScale_70 + ((vOscillations_73.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_69 = (vPos_69 + ((
        ((vRotatedBranchAnchor_14 - vPos_69) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_70) * _glesMultiTexCoord0.z));
      vPos_68 = vPos_69;
    } else {
      highp vec3 vPos_83;
      vPos_83 = vPos_68;
      highp vec3 tmpvar_84;
      tmpvar_84 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_85;
      tmpvar_85 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_86;
      highp float fAmount_87;
      highp float fTarget_88;
      highp vec4 tmpvar_89;
      tmpvar_89.w = 0.0;
      tmpvar_89.x = (tmpvar_85 + _glesMultiTexCoord0.w);
      tmpvar_89.y = ((tmpvar_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_89.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_90;
      tmpvar_90 = abs(((
        fract((tmpvar_89 + 0.5))
       * 2.0) - 1.0));
      vOscillations_86 = (((
        (tmpvar_90 * tmpvar_90)
       * 
        (3.0 - (2.0 * tmpvar_90))
      ) - 0.5) * 2.0);
      highp float tmpvar_91;
      tmpvar_91 = (vOscillations_86.y * vOscillations_86.z);
      fTarget_88 = 1.0;
      fAmount_87 = tmpvar_91;
      if ((tmpvar_91 < 0.0)) {
        fTarget_88 = -1.0;
        fAmount_87 = -(tmpvar_91);
      };
      vPos_83 = (vPos_68 + ((tmpvar_84 * 
        (((mix (
          mix (tmpvar_91, fTarget_88, fAmount_87)
        , fTarget_88, fAmount_87) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_86.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_68 = vPos_83;
    };
    FinalPosition_16 = vPos_68;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_92;
    vPos_92 = FinalPosition_16;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_96.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    vPos_92.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_97.x + (tmpvar_97.y * tmpvar_97.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_93)));
    vPos_92 = (normalize(vPos_92) * fLength_94);
    FinalPosition_16 = vPos_92;
  };
  tmpvar_12.xyz = FinalPosition_16;
  tmpvar_5 = tmpvar_8;
  highp vec3 tmpvar_99;
  tmpvar_99 = (_Object2World * tmpvar_12).xyz;
  highp vec4 v_100;
  v_100.x = _World2Object[0].x;
  v_100.y = _World2Object[1].x;
  v_100.z = _World2Object[2].x;
  v_100.w = _World2Object[3].x;
  highp vec4 v_101;
  v_101.x = _World2Object[0].y;
  v_101.y = _World2Object[1].y;
  v_101.z = _World2Object[2].y;
  v_101.w = _World2Object[3].y;
  highp vec4 v_102;
  v_102.x = _World2Object[0].z;
  v_102.y = _World2Object[1].z;
  v_102.z = _World2Object[2].z;
  v_102.w = _World2Object[3].z;
  highp vec3 tmpvar_103;
  tmpvar_103 = normalize(((
    (v_100.xyz * tmpvar_13.x)
   + 
    (v_101.xyz * tmpvar_13.y)
  ) + (v_102.xyz * tmpvar_13.z)));
  worldNormal_3 = tmpvar_103;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_104;
  tmpvar_104.w = 1.0;
  tmpvar_104.xyz = worldNormal_3;
  mediump vec3 tmpvar_105;
  mediump vec4 normal_106;
  normal_106 = tmpvar_104;
  mediump vec3 x2_107;
  mediump vec4 tmpvar_108;
  tmpvar_108 = (normal_106.xyzz * normal_106.yzzx);
  x2_107.x = dot (unity_SHBr, tmpvar_108);
  x2_107.y = dot (unity_SHBg, tmpvar_108);
  x2_107.z = dot (unity_SHBb, tmpvar_108);
  tmpvar_105 = (x2_107 + (unity_SHC.xyz * (
    (normal_106.x * normal_106.x)
   - 
    (normal_106.y * normal_106.y)
  )));
  highp vec3 lightColor0_109;
  lightColor0_109 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_110;
  lightColor1_110 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_111;
  lightColor2_111 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_112;
  lightColor3_112 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_113;
  lightAttenSq_113 = unity_4LightAtten0;
  highp vec3 normal_114;
  normal_114 = worldNormal_3;
  highp vec4 tmpvar_115;
  tmpvar_115 = (unity_4LightPosX0 - tmpvar_99.x);
  highp vec4 tmpvar_116;
  tmpvar_116 = (unity_4LightPosY0 - tmpvar_99.y);
  highp vec4 tmpvar_117;
  tmpvar_117 = (unity_4LightPosZ0 - tmpvar_99.z);
  highp vec4 tmpvar_118;
  tmpvar_118 = (((tmpvar_115 * tmpvar_115) + (tmpvar_116 * tmpvar_116)) + (tmpvar_117 * tmpvar_117));
  highp vec4 tmpvar_119;
  tmpvar_119 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_115 * normal_114.x) + (tmpvar_116 * normal_114.y)) + (tmpvar_117 * normal_114.z))
   * 
    inversesqrt(tmpvar_118)
  )) * (1.0/((1.0 + 
    (tmpvar_118 * lightAttenSq_113)
  ))));
  highp vec3 tmpvar_120;
  tmpvar_120 = (tmpvar_105 + ((
    ((lightColor0_109 * tmpvar_119.x) + (lightColor1_110 * tmpvar_119.y))
   + 
    (lightColor2_111 * tmpvar_119.z)
  ) + (lightColor3_112 * tmpvar_119.w)));
  tmpvar_6 = tmpvar_120;
  highp vec4 tmpvar_121;
  tmpvar_121 = (unity_World2Shadow[0] * (_Object2World * tmpvar_12));
  tmpvar_7 = tmpvar_121;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_99;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_15;
  lowp float tmpvar_16;
  mediump float dist_17;
  lowp float tmpvar_18;
  tmpvar_18 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x;
  dist_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (float((dist_17 > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_16 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_20;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_16;
  mediump vec3 normalWorld_21;
  normalWorld_21 = tmpvar_5;
  mediump vec3 tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_21;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  tmpvar_22 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_27 = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_9 * tmpvar_22) * diff_27);
  c_26.xyz = tmpvar_29;
  c_26.w = tmpvar_10;
  c_25.w = c_26.w;
  mediump vec3 tmpvar_30;
  tmpvar_30 = (c_26.xyz + (tmpvar_9 * (xlv_TEXCOORD4 + x1_24)));
  c_25.xyz = tmpvar_30;
  c_4.xyz = c_25.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_FACING_LEAF" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_9;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_21;
  tmpvar_21[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_21[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_21[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_22;
  tmpvar_22 = (normalize((tmpvar_20 * tmpvar_21)) * sqrt(dot (tmpvar_20, tmpvar_20)));
  FinalPosition_15 = tmpvar_22;
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_23;
    tmpvar_23 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_24;
    isBestWind_24 = (tmpvar_17 == 4.0);
    bool bLeaf2_25;
    bLeaf2_25 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    highp vec3 vDirection_27;
    vDirection_27 = tmpvar_2;
    highp float tmpvar_28;
    if (bLeaf2_25) {
      tmpvar_28 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_29;
    if (bLeaf2_25) {
      tmpvar_29 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_30;
    highp vec4 tmpvar_31;
    tmpvar_31.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_31.x = (tmpvar_28 + tmpvar_23);
    highp vec4 tmpvar_32;
    tmpvar_32 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    vPos_30 = (tmpvar_22 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_29 * (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_27 = tmpvar_2;
    vPos_26 = vPos_30;
    if (isBestWind_24) {
      highp vec3 tmpvar_33;
      tmpvar_33 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_34;
      if (bLeaf2_25) {
        tmpvar_34 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_35;
      if (bLeaf2_25) {
        tmpvar_35 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_36;
      if (bLeaf2_25) {
        tmpvar_36 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_37;
      if (bLeaf2_25) {
        tmpvar_37 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_38;
      if (bLeaf2_25) {
        tmpvar_38 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_38 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_39;
      if (bLeaf2_25) {
        tmpvar_39 = bool(1);
      } else {
        tmpvar_39 = bool(1);
      };
      highp float fTwitch_40;
      highp vec3 vAxis_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_34 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_34 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_34 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_34 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_30, vPos_30));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_36) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) + (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) - (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_33.z) * tmpvar_33.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_33.yzx * vRotatedWindVector_14.zxy) - (tmpvar_33.zxy * vRotatedWindVector_14.yzx));
      vAxis_41.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_14, tmpvar_33), -1.0, 1.0);
      vAxis_41.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_41);
      vAxis_41 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_56;
      tmpvar_56 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_40 = 0.0;
      if (tmpvar_39) {
        highp float fTime_57;
        fTime_57 = (tmpvar_38.z + tmpvar_43);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_40 = (tmpvar_38.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_38.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_37)
       + 
        (tmpvar_56 * tmpvar_35)
      ) + fTwitch_40));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_51 * tmpvar_64);
      vDirection_27 = (tmpvar_65 * _glesNormal);
      vPos_26 = (normalize((tmpvar_65 * vPos_30)) * tmpvar_47);
    };
    tmpvar_12 = vDirection_27;
    FinalPosition_15 = vPos_26;
  };
  highp vec3 tmpvar_66;
  tmpvar_66 = (FinalPosition_15 + _glesMultiTexCoord1.xyz);
  FinalPosition_15 = tmpvar_66;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_67;
    vPos_67 = tmpvar_66;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_68;
      vPos_68 = tmpvar_66;
      highp float fAdherenceScale_69;
      highp vec3 tmpvar_70;
      tmpvar_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_71;
      tmpvar_71 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_72;
      highp float fOscillation_73;
      fOscillation_73 = 1.0;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.x = (tmpvar_71 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((tmpvar_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_71 + _glesMultiTexCoord0.w));
      tmpvar_76.w = ((tmpvar_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_72 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_72.y * vOscillations_72.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      fOscillation_73 = (((
        (mix (mix (tmpvar_78, fTarget_75, fAmount_74), fTarget_75, fAmount_74) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_72.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_72.w * _ST_WindBranchWhip.x)));
      vPos_68 = (tmpvar_66 + ((tmpvar_70 * fOscillation_73) * _ST_WindBranch.y));
      highp vec4 tmpvar_79;
      tmpvar_79.zw = vec2(0.0, 0.0);
      tmpvar_79.x = ((tmpvar_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_79.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_80;
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      tmpvar_80 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((
        ((tmpvar_80.x * tmpvar_80.y) * tmpvar_80.x)
       * tmpvar_80.y) * _ST_WindTurbulences.x));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_72.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_68 = (vPos_68 + ((
        ((vRotatedBranchAnchor_13 - vPos_68) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_67 = vPos_68;
    } else {
      highp vec3 vPos_82;
      vPos_82 = vPos_67;
      highp vec3 tmpvar_83;
      tmpvar_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_84;
      tmpvar_84 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_85;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (tmpvar_84 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((tmpvar_84 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_84 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_85 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_85.y * vOscillations_85.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      vPos_82 = (vPos_67 + ((tmpvar_83 * 
        (((mix (
          mix (tmpvar_90, fTarget_87, fAmount_86)
        , fTarget_87, fAmount_86) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_85.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_67 = vPos_82;
    };
    FinalPosition_15 = vPos_67;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_15;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_95.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    vPos_91.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_96.x + (tmpvar_96.y * tmpvar_96.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_92)));
    vPos_91 = (normalize(vPos_91) * fLength_93);
    FinalPosition_15 = vPos_91;
  };
  tmpvar_11.xyz = FinalPosition_15;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_98;
  v_98.x = _World2Object[0].x;
  v_98.y = _World2Object[1].x;
  v_98.z = _World2Object[2].x;
  v_98.w = _World2Object[3].x;
  highp vec4 v_99;
  v_99.x = _World2Object[0].y;
  v_99.y = _World2Object[1].y;
  v_99.z = _World2Object[2].y;
  v_99.w = _World2Object[3].y;
  highp vec4 v_100;
  v_100.x = _World2Object[0].z;
  v_100.y = _World2Object[1].z;
  v_100.z = _World2Object[2].z;
  v_100.w = _World2Object[3].z;
  highp vec3 tmpvar_101;
  tmpvar_101 = normalize(((
    (v_98.xyz * tmpvar_12.x)
   + 
    (v_99.xyz * tmpvar_12.y)
  ) + (v_100.xyz * tmpvar_12.z)));
  worldNormal_3 = tmpvar_101;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_102;
  tmpvar_102.w = 1.0;
  tmpvar_102.xyz = worldNormal_3;
  mediump vec4 normal_103;
  normal_103 = tmpvar_102;
  mediump vec3 x2_104;
  mediump vec4 tmpvar_105;
  tmpvar_105 = (normal_103.xyzz * normal_103.yzzx);
  x2_104.x = dot (unity_SHBr, tmpvar_105);
  x2_104.y = dot (unity_SHBg, tmpvar_105);
  x2_104.z = dot (unity_SHBb, tmpvar_105);
  highp vec4 tmpvar_106;
  tmpvar_106 = (unity_World2Shadow[0] * (_Object2World * tmpvar_11));
  tmpvar_6 = tmpvar_106;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = (x2_104 + (unity_SHC.xyz * (
    (normal_103.x * normal_103.x)
   - 
    (normal_103.y * normal_103.y)
  )));
  xlv_TEXCOORD5 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_15;
  lowp float shadow_16;
  lowp float tmpvar_17;
  tmpvar_17 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz);
  mediump float tmpvar_18;
  tmpvar_18 = (_LightShadowData.x + (tmpvar_17 * (1.0 - _LightShadowData.x)));
  shadow_16 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_19;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_16;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_5;
  mediump vec3 tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_20;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  tmpvar_21 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_26 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tmpvar_9 * tmpvar_21) * diff_26);
  c_25.xyz = tmpvar_28;
  c_25.w = tmpvar_10;
  c_24.w = c_25.w;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (c_25.xyz + (tmpvar_9 * (xlv_TEXCOORD4 + x1_23)));
  c_24.xyz = tmpvar_29;
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_9;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_21;
  tmpvar_21[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_21[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_21[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_22;
  tmpvar_22 = (normalize((tmpvar_20 * tmpvar_21)) * sqrt(dot (tmpvar_20, tmpvar_20)));
  FinalPosition_15 = tmpvar_22;
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_23;
    tmpvar_23 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_24;
    isBestWind_24 = (tmpvar_17 == 4.0);
    bool bLeaf2_25;
    bLeaf2_25 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    highp vec3 vDirection_27;
    vDirection_27 = tmpvar_2;
    highp float tmpvar_28;
    if (bLeaf2_25) {
      tmpvar_28 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_29;
    if (bLeaf2_25) {
      tmpvar_29 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_30;
    highp vec4 tmpvar_31;
    tmpvar_31.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_31.x = (tmpvar_28 + tmpvar_23);
    highp vec4 tmpvar_32;
    tmpvar_32 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    vPos_30 = (tmpvar_22 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_29 * (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_27 = tmpvar_2;
    vPos_26 = vPos_30;
    if (isBestWind_24) {
      highp vec3 tmpvar_33;
      tmpvar_33 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_34;
      if (bLeaf2_25) {
        tmpvar_34 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_35;
      if (bLeaf2_25) {
        tmpvar_35 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_36;
      if (bLeaf2_25) {
        tmpvar_36 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_37;
      if (bLeaf2_25) {
        tmpvar_37 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_38;
      if (bLeaf2_25) {
        tmpvar_38 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_38 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_39;
      if (bLeaf2_25) {
        tmpvar_39 = bool(1);
      } else {
        tmpvar_39 = bool(1);
      };
      highp float fTwitch_40;
      highp vec3 vAxis_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_34 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_34 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_34 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_34 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_30, vPos_30));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_36) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) + (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) - (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_33.z) * tmpvar_33.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_33.yzx * vRotatedWindVector_14.zxy) - (tmpvar_33.zxy * vRotatedWindVector_14.yzx));
      vAxis_41.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_14, tmpvar_33), -1.0, 1.0);
      vAxis_41.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_41);
      vAxis_41 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_56;
      tmpvar_56 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_40 = 0.0;
      if (tmpvar_39) {
        highp float fTime_57;
        fTime_57 = (tmpvar_38.z + tmpvar_43);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_40 = (tmpvar_38.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_38.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_37)
       + 
        (tmpvar_56 * tmpvar_35)
      ) + fTwitch_40));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_51 * tmpvar_64);
      vDirection_27 = (tmpvar_65 * _glesNormal);
      vPos_26 = (normalize((tmpvar_65 * vPos_30)) * tmpvar_47);
    };
    tmpvar_12 = vDirection_27;
    FinalPosition_15 = vPos_26;
  };
  highp vec3 tmpvar_66;
  tmpvar_66 = (FinalPosition_15 + _glesMultiTexCoord1.xyz);
  FinalPosition_15 = tmpvar_66;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_67;
    vPos_67 = tmpvar_66;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_68;
      vPos_68 = tmpvar_66;
      highp float fAdherenceScale_69;
      highp vec3 tmpvar_70;
      tmpvar_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_71;
      tmpvar_71 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_72;
      highp float fOscillation_73;
      fOscillation_73 = 1.0;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.x = (tmpvar_71 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((tmpvar_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_71 + _glesMultiTexCoord0.w));
      tmpvar_76.w = ((tmpvar_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_72 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_72.y * vOscillations_72.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      fOscillation_73 = (((
        (mix (mix (tmpvar_78, fTarget_75, fAmount_74), fTarget_75, fAmount_74) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_72.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_72.w * _ST_WindBranchWhip.x)));
      vPos_68 = (tmpvar_66 + ((tmpvar_70 * fOscillation_73) * _ST_WindBranch.y));
      highp vec4 tmpvar_79;
      tmpvar_79.zw = vec2(0.0, 0.0);
      tmpvar_79.x = ((tmpvar_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_79.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_80;
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      tmpvar_80 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((
        ((tmpvar_80.x * tmpvar_80.y) * tmpvar_80.x)
       * tmpvar_80.y) * _ST_WindTurbulences.x));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_72.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_68 = (vPos_68 + ((
        ((vRotatedBranchAnchor_13 - vPos_68) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_67 = vPos_68;
    } else {
      highp vec3 vPos_82;
      vPos_82 = vPos_67;
      highp vec3 tmpvar_83;
      tmpvar_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_84;
      tmpvar_84 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_85;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (tmpvar_84 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((tmpvar_84 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_84 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_85 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_85.y * vOscillations_85.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      vPos_82 = (vPos_67 + ((tmpvar_83 * 
        (((mix (
          mix (tmpvar_90, fTarget_87, fAmount_86)
        , fTarget_87, fAmount_86) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_85.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_67 = vPos_82;
    };
    FinalPosition_15 = vPos_67;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_15;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_95.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    vPos_91.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_96.x + (tmpvar_96.y * tmpvar_96.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_92)));
    vPos_91 = (normalize(vPos_91) * fLength_93);
    FinalPosition_15 = vPos_91;
  };
  tmpvar_11.xyz = FinalPosition_15;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_98;
  v_98.x = _World2Object[0].x;
  v_98.y = _World2Object[1].x;
  v_98.z = _World2Object[2].x;
  v_98.w = _World2Object[3].x;
  highp vec4 v_99;
  v_99.x = _World2Object[0].y;
  v_99.y = _World2Object[1].y;
  v_99.z = _World2Object[2].y;
  v_99.w = _World2Object[3].y;
  highp vec4 v_100;
  v_100.x = _World2Object[0].z;
  v_100.y = _World2Object[1].z;
  v_100.z = _World2Object[2].z;
  v_100.w = _World2Object[3].z;
  highp vec3 tmpvar_101;
  tmpvar_101 = normalize(((
    (v_98.xyz * tmpvar_12.x)
   + 
    (v_99.xyz * tmpvar_12.y)
  ) + (v_100.xyz * tmpvar_12.z)));
  worldNormal_3 = tmpvar_101;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_102;
  tmpvar_102.w = 1.0;
  tmpvar_102.xyz = worldNormal_3;
  mediump vec4 normal_103;
  normal_103 = tmpvar_102;
  mediump vec3 x2_104;
  mediump vec4 tmpvar_105;
  tmpvar_105 = (normal_103.xyzz * normal_103.yzzx);
  x2_104.x = dot (unity_SHBr, tmpvar_105);
  x2_104.y = dot (unity_SHBg, tmpvar_105);
  x2_104.z = dot (unity_SHBb, tmpvar_105);
  highp vec4 tmpvar_106;
  tmpvar_106 = (unity_World2Shadow[0] * (_Object2World * tmpvar_11));
  tmpvar_6 = tmpvar_106;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = (x2_104 + (unity_SHC.xyz * (
    (normal_103.x * normal_103.x)
   - 
    (normal_103.y * normal_103.y)
  )));
  xlv_TEXCOORD5 = tmpvar_6;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_15;
  lowp float shadow_16;
  mediump float tmpvar_17;
  tmpvar_17 = texture (_ShadowMapTexture, xlv_TEXCOORD5.xyz);
  lowp float tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump float tmpvar_19;
  tmpvar_19 = (_LightShadowData.x + (tmpvar_18 * (1.0 - _LightShadowData.x)));
  shadow_16 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_20;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_16;
  mediump vec3 normalWorld_21;
  normalWorld_21 = tmpvar_5;
  mediump vec3 tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_21;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  tmpvar_22 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_27 = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_9 * tmpvar_22) * diff_27);
  c_26.xyz = tmpvar_29;
  c_26.w = tmpvar_10;
  c_25.w = c_26.w;
  mediump vec3 tmpvar_30;
  tmpvar_30 = (c_26.xyz + (tmpvar_9 * (xlv_TEXCOORD4 + x1_24)));
  c_25.xyz = tmpvar_30;
  c_4.xyz = c_25.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_FACING_LEAF" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_10;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_22;
  tmpvar_22[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_22[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_22[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_23;
  tmpvar_23 = (normalize((tmpvar_21 * tmpvar_22)) * sqrt(dot (tmpvar_21, tmpvar_21)));
  FinalPosition_16 = tmpvar_23;
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_24;
    tmpvar_24 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_25;
    isBestWind_25 = (tmpvar_18 == 4.0);
    bool bLeaf2_26;
    bLeaf2_26 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_27;
    vPos_27 = tmpvar_23;
    highp vec3 vDirection_28;
    vDirection_28 = tmpvar_2;
    highp float tmpvar_29;
    if (bLeaf2_26) {
      tmpvar_29 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_30;
    if (bLeaf2_26) {
      tmpvar_30 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_31;
    highp vec4 tmpvar_32;
    tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_32.x = (tmpvar_29 + tmpvar_24);
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    vPos_31 = (tmpvar_23 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_30 * (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_28 = tmpvar_2;
    vPos_27 = vPos_31;
    if (isBestWind_25) {
      highp vec3 tmpvar_34;
      tmpvar_34 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_35;
      if (bLeaf2_26) {
        tmpvar_35 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_36;
      if (bLeaf2_26) {
        tmpvar_36 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_37;
      if (bLeaf2_26) {
        tmpvar_37 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_38;
      if (bLeaf2_26) {
        tmpvar_38 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_39;
      if (bLeaf2_26) {
        tmpvar_39 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_39 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_40;
      if (bLeaf2_26) {
        tmpvar_40 = bool(1);
      } else {
        tmpvar_40 = bool(1);
      };
      highp float fTwitch_41;
      highp vec3 vAxis_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_35 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_35 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_35 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_35 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_31, vPos_31));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_37) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) + (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) - (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_34.z) * tmpvar_34.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_34.yzx * vRotatedWindVector_15.zxy) - (tmpvar_34.zxy * vRotatedWindVector_15.yzx));
      vAxis_42.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_15, tmpvar_34), -1.0, 1.0);
      vAxis_42.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_42);
      vAxis_42 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_57;
      tmpvar_57 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_41 = 0.0;
      if (tmpvar_40) {
        highp float fTime_58;
        fTime_58 = (tmpvar_39.z + tmpvar_44);
        highp vec4 tmpvar_59;
        tmpvar_59.zw = vec2(0.0, 0.0);
        tmpvar_59.x = fTime_58;
        tmpvar_59.y = (0.87 * fTime_58);
        highp vec4 tmpvar_60;
        highp vec4 tmpvar_61;
        tmpvar_61 = abs(((
          fract((tmpvar_59 + 0.5))
         * 2.0) - 1.0));
        tmpvar_60 = (((
          (tmpvar_61 * tmpvar_61)
         * 
          (3.0 - (2.0 * tmpvar_61))
        ) - 0.5) * 2.0);
        fTwitch_41 = (tmpvar_39.x * pow (clamp (
          ((((tmpvar_60.x * tmpvar_60.y) * tmpvar_60.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_39.y));
      };
      highp float fAngle_62;
      fAngle_62 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_38)
       + 
        (tmpvar_57 * tmpvar_36)
      ) + fTwitch_41));
      highp vec2 vSinCos_63;
      vSinCos_63.x = sin(fAngle_62);
      vSinCos_63.y = cos(fAngle_62);
      highp float tmpvar_64;
      tmpvar_64 = (1.0 - vSinCos_63.y);
      highp mat3 tmpvar_65;
      tmpvar_65[0].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_63.y);
      tmpvar_65[0].y = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[0].z = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[1].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[1].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_63.y);
      tmpvar_65[1].z = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[2].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].z = (((tmpvar_64 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_63.y);
      highp mat3 tmpvar_66;
      tmpvar_66 = (tmpvar_52 * tmpvar_65);
      vDirection_28 = (tmpvar_66 * _glesNormal);
      vPos_27 = (normalize((tmpvar_66 * vPos_31)) * tmpvar_48);
    };
    tmpvar_13 = vDirection_28;
    FinalPosition_16 = vPos_27;
  };
  highp vec3 tmpvar_67;
  tmpvar_67 = (FinalPosition_16 + _glesMultiTexCoord1.xyz);
  FinalPosition_16 = tmpvar_67;
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_68;
    vPos_68 = tmpvar_67;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_69;
      vPos_69 = tmpvar_67;
      highp float fAdherenceScale_70;
      highp vec3 tmpvar_71;
      tmpvar_71 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_72;
      tmpvar_72 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_73;
      highp float fOscillation_74;
      fOscillation_74 = 1.0;
      highp float fAmount_75;
      highp float fTarget_76;
      highp vec4 tmpvar_77;
      tmpvar_77.x = (tmpvar_72 + _glesMultiTexCoord0.w);
      tmpvar_77.y = ((tmpvar_72 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_77.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_72 + _glesMultiTexCoord0.w));
      tmpvar_77.w = ((tmpvar_72 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      vOscillations_73 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      highp float tmpvar_79;
      tmpvar_79 = (vOscillations_73.y * vOscillations_73.z);
      fTarget_76 = 1.0;
      fAmount_75 = tmpvar_79;
      if ((tmpvar_79 < 0.0)) {
        fTarget_76 = -1.0;
        fAmount_75 = -(tmpvar_79);
      };
      fOscillation_74 = (((
        (mix (mix (tmpvar_79, fTarget_76, fAmount_75), fTarget_76, fAmount_75) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_73.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_73.w * _ST_WindBranchWhip.x)));
      vPos_69 = (tmpvar_67 + ((tmpvar_71 * fOscillation_74) * _ST_WindBranch.y));
      highp vec4 tmpvar_80;
      tmpvar_80.zw = vec2(0.0, 0.0);
      tmpvar_80.x = ((tmpvar_72 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_80.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_81;
      highp vec4 tmpvar_82;
      tmpvar_82 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      tmpvar_81 = (((
        (tmpvar_82 * tmpvar_82)
       * 
        (3.0 - (2.0 * tmpvar_82))
      ) - 0.5) * 2.0);
      fAdherenceScale_70 = (1.0 - ((
        ((tmpvar_81.x * tmpvar_81.y) * tmpvar_81.x)
       * tmpvar_81.y) * _ST_WindTurbulences.x));
      fAdherenceScale_70 = (fAdherenceScale_70 + ((vOscillations_73.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_69 = (vPos_69 + ((
        ((vRotatedBranchAnchor_14 - vPos_69) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_70) * _glesMultiTexCoord0.z));
      vPos_68 = vPos_69;
    } else {
      highp vec3 vPos_83;
      vPos_83 = vPos_68;
      highp vec3 tmpvar_84;
      tmpvar_84 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_85;
      tmpvar_85 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_86;
      highp float fAmount_87;
      highp float fTarget_88;
      highp vec4 tmpvar_89;
      tmpvar_89.w = 0.0;
      tmpvar_89.x = (tmpvar_85 + _glesMultiTexCoord0.w);
      tmpvar_89.y = ((tmpvar_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_89.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_90;
      tmpvar_90 = abs(((
        fract((tmpvar_89 + 0.5))
       * 2.0) - 1.0));
      vOscillations_86 = (((
        (tmpvar_90 * tmpvar_90)
       * 
        (3.0 - (2.0 * tmpvar_90))
      ) - 0.5) * 2.0);
      highp float tmpvar_91;
      tmpvar_91 = (vOscillations_86.y * vOscillations_86.z);
      fTarget_88 = 1.0;
      fAmount_87 = tmpvar_91;
      if ((tmpvar_91 < 0.0)) {
        fTarget_88 = -1.0;
        fAmount_87 = -(tmpvar_91);
      };
      vPos_83 = (vPos_68 + ((tmpvar_84 * 
        (((mix (
          mix (tmpvar_91, fTarget_88, fAmount_87)
        , fTarget_88, fAmount_87) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_86.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_68 = vPos_83;
    };
    FinalPosition_16 = vPos_68;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_92;
    vPos_92 = FinalPosition_16;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_96.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    vPos_92.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_97.x + (tmpvar_97.y * tmpvar_97.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_93)));
    vPos_92 = (normalize(vPos_92) * fLength_94);
    FinalPosition_16 = vPos_92;
  };
  tmpvar_12.xyz = FinalPosition_16;
  tmpvar_5 = tmpvar_8;
  highp vec3 tmpvar_99;
  tmpvar_99 = (_Object2World * tmpvar_12).xyz;
  highp vec4 v_100;
  v_100.x = _World2Object[0].x;
  v_100.y = _World2Object[1].x;
  v_100.z = _World2Object[2].x;
  v_100.w = _World2Object[3].x;
  highp vec4 v_101;
  v_101.x = _World2Object[0].y;
  v_101.y = _World2Object[1].y;
  v_101.z = _World2Object[2].y;
  v_101.w = _World2Object[3].y;
  highp vec4 v_102;
  v_102.x = _World2Object[0].z;
  v_102.y = _World2Object[1].z;
  v_102.z = _World2Object[2].z;
  v_102.w = _World2Object[3].z;
  highp vec3 tmpvar_103;
  tmpvar_103 = normalize(((
    (v_100.xyz * tmpvar_13.x)
   + 
    (v_101.xyz * tmpvar_13.y)
  ) + (v_102.xyz * tmpvar_13.z)));
  worldNormal_3 = tmpvar_103;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_104;
  tmpvar_104.w = 1.0;
  tmpvar_104.xyz = worldNormal_3;
  mediump vec3 tmpvar_105;
  mediump vec4 normal_106;
  normal_106 = tmpvar_104;
  mediump vec3 x2_107;
  mediump vec4 tmpvar_108;
  tmpvar_108 = (normal_106.xyzz * normal_106.yzzx);
  x2_107.x = dot (unity_SHBr, tmpvar_108);
  x2_107.y = dot (unity_SHBg, tmpvar_108);
  x2_107.z = dot (unity_SHBb, tmpvar_108);
  tmpvar_105 = (x2_107 + (unity_SHC.xyz * (
    (normal_106.x * normal_106.x)
   - 
    (normal_106.y * normal_106.y)
  )));
  highp vec3 lightColor0_109;
  lightColor0_109 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_110;
  lightColor1_110 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_111;
  lightColor2_111 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_112;
  lightColor3_112 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_113;
  lightAttenSq_113 = unity_4LightAtten0;
  highp vec3 normal_114;
  normal_114 = worldNormal_3;
  highp vec4 tmpvar_115;
  tmpvar_115 = (unity_4LightPosX0 - tmpvar_99.x);
  highp vec4 tmpvar_116;
  tmpvar_116 = (unity_4LightPosY0 - tmpvar_99.y);
  highp vec4 tmpvar_117;
  tmpvar_117 = (unity_4LightPosZ0 - tmpvar_99.z);
  highp vec4 tmpvar_118;
  tmpvar_118 = (((tmpvar_115 * tmpvar_115) + (tmpvar_116 * tmpvar_116)) + (tmpvar_117 * tmpvar_117));
  highp vec4 tmpvar_119;
  tmpvar_119 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_115 * normal_114.x) + (tmpvar_116 * normal_114.y)) + (tmpvar_117 * normal_114.z))
   * 
    inversesqrt(tmpvar_118)
  )) * (1.0/((1.0 + 
    (tmpvar_118 * lightAttenSq_113)
  ))));
  highp vec3 tmpvar_120;
  tmpvar_120 = (tmpvar_105 + ((
    ((lightColor0_109 * tmpvar_119.x) + (lightColor1_110 * tmpvar_119.y))
   + 
    (lightColor2_111 * tmpvar_119.z)
  ) + (lightColor3_112 * tmpvar_119.w)));
  tmpvar_6 = tmpvar_120;
  highp vec4 tmpvar_121;
  tmpvar_121 = (unity_World2Shadow[0] * (_Object2World * tmpvar_12));
  tmpvar_7 = tmpvar_121;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_99;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_15;
  lowp float shadow_16;
  lowp float tmpvar_17;
  tmpvar_17 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz);
  mediump float tmpvar_18;
  tmpvar_18 = (_LightShadowData.x + (tmpvar_17 * (1.0 - _LightShadowData.x)));
  shadow_16 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_19;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_16;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_5;
  mediump vec3 tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_20;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  tmpvar_21 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_26 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tmpvar_9 * tmpvar_21) * diff_26);
  c_25.xyz = tmpvar_28;
  c_25.w = tmpvar_10;
  c_24.w = c_25.w;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (c_25.xyz + (tmpvar_9 * (xlv_TEXCOORD4 + x1_23)));
  c_24.xyz = tmpvar_29;
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_10;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_22;
  tmpvar_22[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_22[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_22[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_23;
  tmpvar_23 = (normalize((tmpvar_21 * tmpvar_22)) * sqrt(dot (tmpvar_21, tmpvar_21)));
  FinalPosition_16 = tmpvar_23;
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_24;
    tmpvar_24 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_25;
    isBestWind_25 = (tmpvar_18 == 4.0);
    bool bLeaf2_26;
    bLeaf2_26 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_27;
    vPos_27 = tmpvar_23;
    highp vec3 vDirection_28;
    vDirection_28 = tmpvar_2;
    highp float tmpvar_29;
    if (bLeaf2_26) {
      tmpvar_29 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_30;
    if (bLeaf2_26) {
      tmpvar_30 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_31;
    highp vec4 tmpvar_32;
    tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_32.x = (tmpvar_29 + tmpvar_24);
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    vPos_31 = (tmpvar_23 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_30 * (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_28 = tmpvar_2;
    vPos_27 = vPos_31;
    if (isBestWind_25) {
      highp vec3 tmpvar_34;
      tmpvar_34 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_35;
      if (bLeaf2_26) {
        tmpvar_35 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_36;
      if (bLeaf2_26) {
        tmpvar_36 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_37;
      if (bLeaf2_26) {
        tmpvar_37 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_38;
      if (bLeaf2_26) {
        tmpvar_38 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_39;
      if (bLeaf2_26) {
        tmpvar_39 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_39 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_40;
      if (bLeaf2_26) {
        tmpvar_40 = bool(1);
      } else {
        tmpvar_40 = bool(1);
      };
      highp float fTwitch_41;
      highp vec3 vAxis_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_35 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_35 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_35 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_35 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_31, vPos_31));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_37) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) + (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) - (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_34.z) * tmpvar_34.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_34.yzx * vRotatedWindVector_15.zxy) - (tmpvar_34.zxy * vRotatedWindVector_15.yzx));
      vAxis_42.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_15, tmpvar_34), -1.0, 1.0);
      vAxis_42.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_42);
      vAxis_42 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_57;
      tmpvar_57 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_41 = 0.0;
      if (tmpvar_40) {
        highp float fTime_58;
        fTime_58 = (tmpvar_39.z + tmpvar_44);
        highp vec4 tmpvar_59;
        tmpvar_59.zw = vec2(0.0, 0.0);
        tmpvar_59.x = fTime_58;
        tmpvar_59.y = (0.87 * fTime_58);
        highp vec4 tmpvar_60;
        highp vec4 tmpvar_61;
        tmpvar_61 = abs(((
          fract((tmpvar_59 + 0.5))
         * 2.0) - 1.0));
        tmpvar_60 = (((
          (tmpvar_61 * tmpvar_61)
         * 
          (3.0 - (2.0 * tmpvar_61))
        ) - 0.5) * 2.0);
        fTwitch_41 = (tmpvar_39.x * pow (clamp (
          ((((tmpvar_60.x * tmpvar_60.y) * tmpvar_60.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_39.y));
      };
      highp float fAngle_62;
      fAngle_62 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_38)
       + 
        (tmpvar_57 * tmpvar_36)
      ) + fTwitch_41));
      highp vec2 vSinCos_63;
      vSinCos_63.x = sin(fAngle_62);
      vSinCos_63.y = cos(fAngle_62);
      highp float tmpvar_64;
      tmpvar_64 = (1.0 - vSinCos_63.y);
      highp mat3 tmpvar_65;
      tmpvar_65[0].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_63.y);
      tmpvar_65[0].y = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[0].z = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[1].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[1].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_63.y);
      tmpvar_65[1].z = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[2].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].z = (((tmpvar_64 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_63.y);
      highp mat3 tmpvar_66;
      tmpvar_66 = (tmpvar_52 * tmpvar_65);
      vDirection_28 = (tmpvar_66 * _glesNormal);
      vPos_27 = (normalize((tmpvar_66 * vPos_31)) * tmpvar_48);
    };
    tmpvar_13 = vDirection_28;
    FinalPosition_16 = vPos_27;
  };
  highp vec3 tmpvar_67;
  tmpvar_67 = (FinalPosition_16 + _glesMultiTexCoord1.xyz);
  FinalPosition_16 = tmpvar_67;
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_68;
    vPos_68 = tmpvar_67;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_69;
      vPos_69 = tmpvar_67;
      highp float fAdherenceScale_70;
      highp vec3 tmpvar_71;
      tmpvar_71 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_72;
      tmpvar_72 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_73;
      highp float fOscillation_74;
      fOscillation_74 = 1.0;
      highp float fAmount_75;
      highp float fTarget_76;
      highp vec4 tmpvar_77;
      tmpvar_77.x = (tmpvar_72 + _glesMultiTexCoord0.w);
      tmpvar_77.y = ((tmpvar_72 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_77.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_72 + _glesMultiTexCoord0.w));
      tmpvar_77.w = ((tmpvar_72 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      vOscillations_73 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      highp float tmpvar_79;
      tmpvar_79 = (vOscillations_73.y * vOscillations_73.z);
      fTarget_76 = 1.0;
      fAmount_75 = tmpvar_79;
      if ((tmpvar_79 < 0.0)) {
        fTarget_76 = -1.0;
        fAmount_75 = -(tmpvar_79);
      };
      fOscillation_74 = (((
        (mix (mix (tmpvar_79, fTarget_76, fAmount_75), fTarget_76, fAmount_75) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_73.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_73.w * _ST_WindBranchWhip.x)));
      vPos_69 = (tmpvar_67 + ((tmpvar_71 * fOscillation_74) * _ST_WindBranch.y));
      highp vec4 tmpvar_80;
      tmpvar_80.zw = vec2(0.0, 0.0);
      tmpvar_80.x = ((tmpvar_72 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_80.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_81;
      highp vec4 tmpvar_82;
      tmpvar_82 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      tmpvar_81 = (((
        (tmpvar_82 * tmpvar_82)
       * 
        (3.0 - (2.0 * tmpvar_82))
      ) - 0.5) * 2.0);
      fAdherenceScale_70 = (1.0 - ((
        ((tmpvar_81.x * tmpvar_81.y) * tmpvar_81.x)
       * tmpvar_81.y) * _ST_WindTurbulences.x));
      fAdherenceScale_70 = (fAdherenceScale_70 + ((vOscillations_73.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_69 = (vPos_69 + ((
        ((vRotatedBranchAnchor_14 - vPos_69) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_70) * _glesMultiTexCoord0.z));
      vPos_68 = vPos_69;
    } else {
      highp vec3 vPos_83;
      vPos_83 = vPos_68;
      highp vec3 tmpvar_84;
      tmpvar_84 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_85;
      tmpvar_85 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_86;
      highp float fAmount_87;
      highp float fTarget_88;
      highp vec4 tmpvar_89;
      tmpvar_89.w = 0.0;
      tmpvar_89.x = (tmpvar_85 + _glesMultiTexCoord0.w);
      tmpvar_89.y = ((tmpvar_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_89.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_90;
      tmpvar_90 = abs(((
        fract((tmpvar_89 + 0.5))
       * 2.0) - 1.0));
      vOscillations_86 = (((
        (tmpvar_90 * tmpvar_90)
       * 
        (3.0 - (2.0 * tmpvar_90))
      ) - 0.5) * 2.0);
      highp float tmpvar_91;
      tmpvar_91 = (vOscillations_86.y * vOscillations_86.z);
      fTarget_88 = 1.0;
      fAmount_87 = tmpvar_91;
      if ((tmpvar_91 < 0.0)) {
        fTarget_88 = -1.0;
        fAmount_87 = -(tmpvar_91);
      };
      vPos_83 = (vPos_68 + ((tmpvar_84 * 
        (((mix (
          mix (tmpvar_91, fTarget_88, fAmount_87)
        , fTarget_88, fAmount_87) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_86.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_68 = vPos_83;
    };
    FinalPosition_16 = vPos_68;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_92;
    vPos_92 = FinalPosition_16;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_96.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    vPos_92.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_97.x + (tmpvar_97.y * tmpvar_97.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_93)));
    vPos_92 = (normalize(vPos_92) * fLength_94);
    FinalPosition_16 = vPos_92;
  };
  tmpvar_12.xyz = FinalPosition_16;
  tmpvar_5 = tmpvar_8;
  highp vec3 tmpvar_99;
  tmpvar_99 = (_Object2World * tmpvar_12).xyz;
  highp vec4 v_100;
  v_100.x = _World2Object[0].x;
  v_100.y = _World2Object[1].x;
  v_100.z = _World2Object[2].x;
  v_100.w = _World2Object[3].x;
  highp vec4 v_101;
  v_101.x = _World2Object[0].y;
  v_101.y = _World2Object[1].y;
  v_101.z = _World2Object[2].y;
  v_101.w = _World2Object[3].y;
  highp vec4 v_102;
  v_102.x = _World2Object[0].z;
  v_102.y = _World2Object[1].z;
  v_102.z = _World2Object[2].z;
  v_102.w = _World2Object[3].z;
  highp vec3 tmpvar_103;
  tmpvar_103 = normalize(((
    (v_100.xyz * tmpvar_13.x)
   + 
    (v_101.xyz * tmpvar_13.y)
  ) + (v_102.xyz * tmpvar_13.z)));
  worldNormal_3 = tmpvar_103;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_104;
  tmpvar_104.w = 1.0;
  tmpvar_104.xyz = worldNormal_3;
  mediump vec3 tmpvar_105;
  mediump vec4 normal_106;
  normal_106 = tmpvar_104;
  mediump vec3 x2_107;
  mediump vec4 tmpvar_108;
  tmpvar_108 = (normal_106.xyzz * normal_106.yzzx);
  x2_107.x = dot (unity_SHBr, tmpvar_108);
  x2_107.y = dot (unity_SHBg, tmpvar_108);
  x2_107.z = dot (unity_SHBb, tmpvar_108);
  tmpvar_105 = (x2_107 + (unity_SHC.xyz * (
    (normal_106.x * normal_106.x)
   - 
    (normal_106.y * normal_106.y)
  )));
  highp vec3 lightColor0_109;
  lightColor0_109 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_110;
  lightColor1_110 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_111;
  lightColor2_111 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_112;
  lightColor3_112 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_113;
  lightAttenSq_113 = unity_4LightAtten0;
  highp vec3 normal_114;
  normal_114 = worldNormal_3;
  highp vec4 tmpvar_115;
  tmpvar_115 = (unity_4LightPosX0 - tmpvar_99.x);
  highp vec4 tmpvar_116;
  tmpvar_116 = (unity_4LightPosY0 - tmpvar_99.y);
  highp vec4 tmpvar_117;
  tmpvar_117 = (unity_4LightPosZ0 - tmpvar_99.z);
  highp vec4 tmpvar_118;
  tmpvar_118 = (((tmpvar_115 * tmpvar_115) + (tmpvar_116 * tmpvar_116)) + (tmpvar_117 * tmpvar_117));
  highp vec4 tmpvar_119;
  tmpvar_119 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_115 * normal_114.x) + (tmpvar_116 * normal_114.y)) + (tmpvar_117 * normal_114.z))
   * 
    inversesqrt(tmpvar_118)
  )) * (1.0/((1.0 + 
    (tmpvar_118 * lightAttenSq_113)
  ))));
  highp vec3 tmpvar_120;
  tmpvar_120 = (tmpvar_105 + ((
    ((lightColor0_109 * tmpvar_119.x) + (lightColor1_110 * tmpvar_119.y))
   + 
    (lightColor2_111 * tmpvar_119.z)
  ) + (lightColor3_112 * tmpvar_119.w)));
  tmpvar_6 = tmpvar_120;
  highp vec4 tmpvar_121;
  tmpvar_121 = (unity_World2Shadow[0] * (_Object2World * tmpvar_12));
  tmpvar_7 = tmpvar_121;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_99;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_15;
  lowp float shadow_16;
  mediump float tmpvar_17;
  tmpvar_17 = texture (_ShadowMapTexture, xlv_TEXCOORD5.xyz);
  lowp float tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump float tmpvar_19;
  tmpvar_19 = (_LightShadowData.x + (tmpvar_18 * (1.0 - _LightShadowData.x)));
  shadow_16 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_20;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_16;
  mediump vec3 normalWorld_21;
  normalWorld_21 = tmpvar_5;
  mediump vec3 tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_21;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  tmpvar_22 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_27 = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_9 * tmpvar_22) * diff_27);
  c_26.xyz = tmpvar_29;
  c_26.w = tmpvar_10;
  c_25.w = c_26.w;
  mediump vec3 tmpvar_30;
  tmpvar_30 = (c_26.xyz + (tmpvar_9 * (xlv_TEXCOORD4 + x1_24)));
  c_25.xyz = tmpvar_30;
  c_4.xyz = c_25.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_8;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_9;
  highp float cse_10;
  cse_10 = _Object2World[3].x;
  highp float cse_11;
  cse_11 = _Object2World[3].y;
  highp float tmpvar_12;
  tmpvar_12 = clamp (((
    fract(((cse_10 + cse_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_12;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_22;
  tmpvar_22[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_22[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_22[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_23;
  tmpvar_23 = (normalize((tmpvar_21 * tmpvar_22)) * sqrt(dot (tmpvar_21, tmpvar_21)));
  FinalPosition_17 = tmpvar_23;
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_24;
    tmpvar_24 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_25;
    isBestWind_25 = (tmpvar_18 == 4.0);
    bool bLeaf2_26;
    bLeaf2_26 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_27;
    vPos_27 = tmpvar_23;
    highp vec3 vDirection_28;
    vDirection_28 = tmpvar_2;
    highp float tmpvar_29;
    if (bLeaf2_26) {
      tmpvar_29 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_30;
    if (bLeaf2_26) {
      tmpvar_30 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_31;
    highp vec4 tmpvar_32;
    tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_32.x = (tmpvar_29 + tmpvar_24);
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    vPos_31 = (tmpvar_23 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_30 * (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_28 = tmpvar_2;
    vPos_27 = vPos_31;
    if (isBestWind_25) {
      highp vec3 tmpvar_34;
      tmpvar_34 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_35;
      if (bLeaf2_26) {
        tmpvar_35 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_36;
      if (bLeaf2_26) {
        tmpvar_36 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_37;
      if (bLeaf2_26) {
        tmpvar_37 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_38;
      if (bLeaf2_26) {
        tmpvar_38 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_39;
      if (bLeaf2_26) {
        tmpvar_39 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_39 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_40;
      if (bLeaf2_26) {
        tmpvar_40 = bool(1);
      } else {
        tmpvar_40 = bool(1);
      };
      highp float fTwitch_41;
      highp vec3 vAxis_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_35 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_35 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_35 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_35 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_31, vPos_31));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_37) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) + (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) - (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_34.z) * tmpvar_34.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_34.yzx * vRotatedWindVector_16.zxy) - (tmpvar_34.zxy * vRotatedWindVector_16.yzx));
      vAxis_42.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_16, tmpvar_34), -1.0, 1.0);
      vAxis_42.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_42);
      vAxis_42 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_57;
      tmpvar_57 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_41 = 0.0;
      if (tmpvar_40) {
        highp float fTime_58;
        fTime_58 = (tmpvar_39.z + tmpvar_44);
        highp vec4 tmpvar_59;
        tmpvar_59.zw = vec2(0.0, 0.0);
        tmpvar_59.x = fTime_58;
        tmpvar_59.y = (0.87 * fTime_58);
        highp vec4 tmpvar_60;
        highp vec4 tmpvar_61;
        tmpvar_61 = abs(((
          fract((tmpvar_59 + 0.5))
         * 2.0) - 1.0));
        tmpvar_60 = (((
          (tmpvar_61 * tmpvar_61)
         * 
          (3.0 - (2.0 * tmpvar_61))
        ) - 0.5) * 2.0);
        fTwitch_41 = (tmpvar_39.x * pow (clamp (
          ((((tmpvar_60.x * tmpvar_60.y) * tmpvar_60.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_39.y));
      };
      highp float fAngle_62;
      fAngle_62 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_38)
       + 
        (tmpvar_57 * tmpvar_36)
      ) + fTwitch_41));
      highp vec2 vSinCos_63;
      vSinCos_63.x = sin(fAngle_62);
      vSinCos_63.y = cos(fAngle_62);
      highp float tmpvar_64;
      tmpvar_64 = (1.0 - vSinCos_63.y);
      highp mat3 tmpvar_65;
      tmpvar_65[0].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_63.y);
      tmpvar_65[0].y = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[0].z = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[1].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[1].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_63.y);
      tmpvar_65[1].z = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[2].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].z = (((tmpvar_64 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_63.y);
      highp mat3 tmpvar_66;
      tmpvar_66 = (tmpvar_52 * tmpvar_65);
      vDirection_28 = (tmpvar_66 * _glesNormal);
      vPos_27 = (normalize((tmpvar_66 * vPos_31)) * tmpvar_48);
    };
    tmpvar_14 = vDirection_28;
    FinalPosition_17 = vPos_27;
  };
  highp vec3 tmpvar_67;
  tmpvar_67 = (FinalPosition_17 + _glesMultiTexCoord1.xyz);
  FinalPosition_17 = tmpvar_67;
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_68;
    vPos_68 = tmpvar_67;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_69;
      vPos_69 = tmpvar_67;
      highp float fAdherenceScale_70;
      highp vec3 tmpvar_71;
      tmpvar_71 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_72;
      tmpvar_72 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_73;
      highp float fOscillation_74;
      fOscillation_74 = 1.0;
      highp float fAmount_75;
      highp float fTarget_76;
      highp vec4 tmpvar_77;
      tmpvar_77.x = (tmpvar_72 + _glesMultiTexCoord0.w);
      tmpvar_77.y = ((tmpvar_72 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_77.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_72 + _glesMultiTexCoord0.w));
      tmpvar_77.w = ((tmpvar_72 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      vOscillations_73 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      highp float tmpvar_79;
      tmpvar_79 = (vOscillations_73.y * vOscillations_73.z);
      fTarget_76 = 1.0;
      fAmount_75 = tmpvar_79;
      if ((tmpvar_79 < 0.0)) {
        fTarget_76 = -1.0;
        fAmount_75 = -(tmpvar_79);
      };
      fOscillation_74 = (((
        (mix (mix (tmpvar_79, fTarget_76, fAmount_75), fTarget_76, fAmount_75) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_73.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_73.w * _ST_WindBranchWhip.x)));
      vPos_69 = (tmpvar_67 + ((tmpvar_71 * fOscillation_74) * _ST_WindBranch.y));
      highp vec4 tmpvar_80;
      tmpvar_80.zw = vec2(0.0, 0.0);
      tmpvar_80.x = ((tmpvar_72 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_80.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_81;
      highp vec4 tmpvar_82;
      tmpvar_82 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      tmpvar_81 = (((
        (tmpvar_82 * tmpvar_82)
       * 
        (3.0 - (2.0 * tmpvar_82))
      ) - 0.5) * 2.0);
      fAdherenceScale_70 = (1.0 - ((
        ((tmpvar_81.x * tmpvar_81.y) * tmpvar_81.x)
       * tmpvar_81.y) * _ST_WindTurbulences.x));
      fAdherenceScale_70 = (fAdherenceScale_70 + ((vOscillations_73.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_69 = (vPos_69 + ((
        ((vRotatedBranchAnchor_15 - vPos_69) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_70) * _glesMultiTexCoord0.z));
      vPos_68 = vPos_69;
    } else {
      highp vec3 vPos_83;
      vPos_83 = vPos_68;
      highp vec3 tmpvar_84;
      tmpvar_84 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_85;
      tmpvar_85 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_86;
      highp float fAmount_87;
      highp float fTarget_88;
      highp vec4 tmpvar_89;
      tmpvar_89.w = 0.0;
      tmpvar_89.x = (tmpvar_85 + _glesMultiTexCoord0.w);
      tmpvar_89.y = ((tmpvar_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_89.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_90;
      tmpvar_90 = abs(((
        fract((tmpvar_89 + 0.5))
       * 2.0) - 1.0));
      vOscillations_86 = (((
        (tmpvar_90 * tmpvar_90)
       * 
        (3.0 - (2.0 * tmpvar_90))
      ) - 0.5) * 2.0);
      highp float tmpvar_91;
      tmpvar_91 = (vOscillations_86.y * vOscillations_86.z);
      fTarget_88 = 1.0;
      fAmount_87 = tmpvar_91;
      if ((tmpvar_91 < 0.0)) {
        fTarget_88 = -1.0;
        fAmount_87 = -(tmpvar_91);
      };
      vPos_83 = (vPos_68 + ((tmpvar_84 * 
        (((mix (
          mix (tmpvar_91, fTarget_88, fAmount_87)
        , fTarget_88, fAmount_87) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_86.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_68 = vPos_83;
    };
    FinalPosition_17 = vPos_68;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_92;
    vPos_92 = FinalPosition_17;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (cse_10 + _ST_WindGlobal.x);
    tmpvar_96.y = (cse_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    vPos_92.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * (
      ((_ST_WindGlobal.y * (tmpvar_97.x + (tmpvar_97.y * tmpvar_97.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_93)));
    vPos_92 = (normalize(vPos_92) * fLength_94);
    FinalPosition_17 = vPos_92;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_99;
  v_99.x = _World2Object[0].x;
  v_99.y = _World2Object[1].x;
  v_99.z = _World2Object[2].x;
  v_99.w = _World2Object[3].x;
  highp vec4 v_100;
  v_100.x = _World2Object[0].y;
  v_100.y = _World2Object[1].y;
  v_100.z = _World2Object[2].y;
  v_100.w = _World2Object[3].y;
  highp vec4 v_101;
  v_101.x = _World2Object[0].z;
  v_101.y = _World2Object[1].z;
  v_101.z = _World2Object[2].z;
  v_101.w = _World2Object[3].z;
  highp vec3 tmpvar_102;
  tmpvar_102 = normalize(((
    (v_99.xyz * tmpvar_14.x)
   + 
    (v_100.xyz * tmpvar_14.y)
  ) + (v_101.xyz * tmpvar_14.z)));
  worldNormal_3 = tmpvar_102;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_103;
  tmpvar_103.w = 1.0;
  tmpvar_103.xyz = worldNormal_3;
  mediump vec4 normal_104;
  normal_104 = tmpvar_103;
  mediump vec3 x2_105;
  mediump vec4 tmpvar_106;
  tmpvar_106 = (normal_104.xyzz * normal_104.yzzx);
  x2_105.x = dot (unity_SHBr, tmpvar_106);
  x2_105.y = dot (unity_SHBg, tmpvar_106);
  x2_105.z = dot (unity_SHBb, tmpvar_106);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = (x2_105 + (unity_SHC.xyz * (
    (normal_104.x * normal_104.x)
   - 
    (normal_104.y * normal_104.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_12;
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_14 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_15;
  lowp vec3 tmpvar_16;
  tmpvar_16 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_16;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_4;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_17;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_22 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.xyz = tmpvar_24;
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (c_21.xyz + (tmpvar_8 * (xlv_TEXCOORD4 + x1_19)));
  c_20.xyz = tmpvar_25;
  c_3.xyz = c_20.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_8;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_9;
  highp float cse_10;
  cse_10 = _Object2World[3].x;
  highp float cse_11;
  cse_11 = _Object2World[3].y;
  highp float tmpvar_12;
  tmpvar_12 = clamp (((
    fract(((cse_10 + cse_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_12;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_22;
  tmpvar_22[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_22[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_22[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_23;
  tmpvar_23 = (normalize((tmpvar_21 * tmpvar_22)) * sqrt(dot (tmpvar_21, tmpvar_21)));
  FinalPosition_17 = tmpvar_23;
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_24;
    tmpvar_24 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_25;
    isBestWind_25 = (tmpvar_18 == 4.0);
    bool bLeaf2_26;
    bLeaf2_26 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_27;
    vPos_27 = tmpvar_23;
    highp vec3 vDirection_28;
    vDirection_28 = tmpvar_2;
    highp float tmpvar_29;
    if (bLeaf2_26) {
      tmpvar_29 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_30;
    if (bLeaf2_26) {
      tmpvar_30 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_31;
    highp vec4 tmpvar_32;
    tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_32.x = (tmpvar_29 + tmpvar_24);
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    vPos_31 = (tmpvar_23 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_30 * (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_28 = tmpvar_2;
    vPos_27 = vPos_31;
    if (isBestWind_25) {
      highp vec3 tmpvar_34;
      tmpvar_34 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_35;
      if (bLeaf2_26) {
        tmpvar_35 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_36;
      if (bLeaf2_26) {
        tmpvar_36 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_37;
      if (bLeaf2_26) {
        tmpvar_37 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_38;
      if (bLeaf2_26) {
        tmpvar_38 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_39;
      if (bLeaf2_26) {
        tmpvar_39 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_39 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_40;
      if (bLeaf2_26) {
        tmpvar_40 = bool(1);
      } else {
        tmpvar_40 = bool(1);
      };
      highp float fTwitch_41;
      highp vec3 vAxis_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_35 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_35 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_35 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_35 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_31, vPos_31));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_37) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) + (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.y) - (vSinCos_50.x * tmpvar_34.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_34.x) * tmpvar_34.z) + (vSinCos_50.x * tmpvar_34.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_34.y) * tmpvar_34.z) - (vSinCos_50.x * tmpvar_34.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_34.z) * tmpvar_34.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_34.yzx * vRotatedWindVector_16.zxy) - (tmpvar_34.zxy * vRotatedWindVector_16.yzx));
      vAxis_42.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_16, tmpvar_34), -1.0, 1.0);
      vAxis_42.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_42);
      vAxis_42 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_57;
      tmpvar_57 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_41 = 0.0;
      if (tmpvar_40) {
        highp float fTime_58;
        fTime_58 = (tmpvar_39.z + tmpvar_44);
        highp vec4 tmpvar_59;
        tmpvar_59.zw = vec2(0.0, 0.0);
        tmpvar_59.x = fTime_58;
        tmpvar_59.y = (0.87 * fTime_58);
        highp vec4 tmpvar_60;
        highp vec4 tmpvar_61;
        tmpvar_61 = abs(((
          fract((tmpvar_59 + 0.5))
         * 2.0) - 1.0));
        tmpvar_60 = (((
          (tmpvar_61 * tmpvar_61)
         * 
          (3.0 - (2.0 * tmpvar_61))
        ) - 0.5) * 2.0);
        fTwitch_41 = (tmpvar_39.x * pow (clamp (
          ((((tmpvar_60.x * tmpvar_60.y) * tmpvar_60.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_39.y));
      };
      highp float fAngle_62;
      fAngle_62 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_38)
       + 
        (tmpvar_57 * tmpvar_36)
      ) + fTwitch_41));
      highp vec2 vSinCos_63;
      vSinCos_63.x = sin(fAngle_62);
      vSinCos_63.y = cos(fAngle_62);
      highp float tmpvar_64;
      tmpvar_64 = (1.0 - vSinCos_63.y);
      highp mat3 tmpvar_65;
      tmpvar_65[0].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_63.y);
      tmpvar_65[0].y = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[0].z = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[1].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_63.x * tmpvar_55.z));
      tmpvar_65[1].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_63.y);
      tmpvar_65[1].z = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].x = (((tmpvar_64 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_63.x * tmpvar_55.y));
      tmpvar_65[2].y = (((tmpvar_64 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_63.x * tmpvar_55.x));
      tmpvar_65[2].z = (((tmpvar_64 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_63.y);
      highp mat3 tmpvar_66;
      tmpvar_66 = (tmpvar_52 * tmpvar_65);
      vDirection_28 = (tmpvar_66 * _glesNormal);
      vPos_27 = (normalize((tmpvar_66 * vPos_31)) * tmpvar_48);
    };
    tmpvar_14 = vDirection_28;
    FinalPosition_17 = vPos_27;
  };
  highp vec3 tmpvar_67;
  tmpvar_67 = (FinalPosition_17 + _glesMultiTexCoord1.xyz);
  FinalPosition_17 = tmpvar_67;
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_68;
    vPos_68 = tmpvar_67;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_69;
      vPos_69 = tmpvar_67;
      highp float fAdherenceScale_70;
      highp vec3 tmpvar_71;
      tmpvar_71 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_72;
      tmpvar_72 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_73;
      highp float fOscillation_74;
      fOscillation_74 = 1.0;
      highp float fAmount_75;
      highp float fTarget_76;
      highp vec4 tmpvar_77;
      tmpvar_77.x = (tmpvar_72 + _glesMultiTexCoord0.w);
      tmpvar_77.y = ((tmpvar_72 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_77.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_72 + _glesMultiTexCoord0.w));
      tmpvar_77.w = ((tmpvar_72 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      vOscillations_73 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      highp float tmpvar_79;
      tmpvar_79 = (vOscillations_73.y * vOscillations_73.z);
      fTarget_76 = 1.0;
      fAmount_75 = tmpvar_79;
      if ((tmpvar_79 < 0.0)) {
        fTarget_76 = -1.0;
        fAmount_75 = -(tmpvar_79);
      };
      fOscillation_74 = (((
        (mix (mix (tmpvar_79, fTarget_76, fAmount_75), fTarget_76, fAmount_75) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_73.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_73.w * _ST_WindBranchWhip.x)));
      vPos_69 = (tmpvar_67 + ((tmpvar_71 * fOscillation_74) * _ST_WindBranch.y));
      highp vec4 tmpvar_80;
      tmpvar_80.zw = vec2(0.0, 0.0);
      tmpvar_80.x = ((tmpvar_72 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_80.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_81;
      highp vec4 tmpvar_82;
      tmpvar_82 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      tmpvar_81 = (((
        (tmpvar_82 * tmpvar_82)
       * 
        (3.0 - (2.0 * tmpvar_82))
      ) - 0.5) * 2.0);
      fAdherenceScale_70 = (1.0 - ((
        ((tmpvar_81.x * tmpvar_81.y) * tmpvar_81.x)
       * tmpvar_81.y) * _ST_WindTurbulences.x));
      fAdherenceScale_70 = (fAdherenceScale_70 + ((vOscillations_73.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_69 = (vPos_69 + ((
        ((vRotatedBranchAnchor_15 - vPos_69) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_70) * _glesMultiTexCoord0.z));
      vPos_68 = vPos_69;
    } else {
      highp vec3 vPos_83;
      vPos_83 = vPos_68;
      highp vec3 tmpvar_84;
      tmpvar_84 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_85;
      tmpvar_85 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_86;
      highp float fAmount_87;
      highp float fTarget_88;
      highp vec4 tmpvar_89;
      tmpvar_89.w = 0.0;
      tmpvar_89.x = (tmpvar_85 + _glesMultiTexCoord0.w);
      tmpvar_89.y = ((tmpvar_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_89.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_90;
      tmpvar_90 = abs(((
        fract((tmpvar_89 + 0.5))
       * 2.0) - 1.0));
      vOscillations_86 = (((
        (tmpvar_90 * tmpvar_90)
       * 
        (3.0 - (2.0 * tmpvar_90))
      ) - 0.5) * 2.0);
      highp float tmpvar_91;
      tmpvar_91 = (vOscillations_86.y * vOscillations_86.z);
      fTarget_88 = 1.0;
      fAmount_87 = tmpvar_91;
      if ((tmpvar_91 < 0.0)) {
        fTarget_88 = -1.0;
        fAmount_87 = -(tmpvar_91);
      };
      vPos_83 = (vPos_68 + ((tmpvar_84 * 
        (((mix (
          mix (tmpvar_91, fTarget_88, fAmount_87)
        , fTarget_88, fAmount_87) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_86.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_68 = vPos_83;
    };
    FinalPosition_17 = vPos_68;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_92;
    vPos_92 = FinalPosition_17;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (cse_10 + _ST_WindGlobal.x);
    tmpvar_96.y = (cse_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    vPos_92.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * (
      ((_ST_WindGlobal.y * (tmpvar_97.x + (tmpvar_97.y * tmpvar_97.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_93)));
    vPos_92 = (normalize(vPos_92) * fLength_94);
    FinalPosition_17 = vPos_92;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_99;
  v_99.x = _World2Object[0].x;
  v_99.y = _World2Object[1].x;
  v_99.z = _World2Object[2].x;
  v_99.w = _World2Object[3].x;
  highp vec4 v_100;
  v_100.x = _World2Object[0].y;
  v_100.y = _World2Object[1].y;
  v_100.z = _World2Object[2].y;
  v_100.w = _World2Object[3].y;
  highp vec4 v_101;
  v_101.x = _World2Object[0].z;
  v_101.y = _World2Object[1].z;
  v_101.z = _World2Object[2].z;
  v_101.w = _World2Object[3].z;
  highp vec3 tmpvar_102;
  tmpvar_102 = normalize(((
    (v_99.xyz * tmpvar_14.x)
   + 
    (v_100.xyz * tmpvar_14.y)
  ) + (v_101.xyz * tmpvar_14.z)));
  worldNormal_3 = tmpvar_102;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_103;
  tmpvar_103.w = 1.0;
  tmpvar_103.xyz = worldNormal_3;
  mediump vec4 normal_104;
  normal_104 = tmpvar_103;
  mediump vec3 x2_105;
  mediump vec4 tmpvar_106;
  tmpvar_106 = (normal_104.xyzz * normal_104.yzzx);
  x2_105.x = dot (unity_SHBr, tmpvar_106);
  x2_105.y = dot (unity_SHBg, tmpvar_106);
  x2_105.z = dot (unity_SHBb, tmpvar_106);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = (x2_105 + (unity_SHC.xyz * (
    (normal_104.x * normal_104.x)
   - 
    (normal_104.y * normal_104.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_12;
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_14 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_15;
  lowp vec3 tmpvar_16;
  tmpvar_16 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_16;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_4;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_17;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_22 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.xyz = tmpvar_24;
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (c_21.xyz + (tmpvar_8 * (xlv_TEXCOORD4 + x1_19)));
  c_20.xyz = tmpvar_25;
  c_3.xyz = c_20.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_9;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_13;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_22;
  tmpvar_22 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_23;
  tmpvar_23[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_23[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_23[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_24;
  tmpvar_24 = (normalize((tmpvar_22 * tmpvar_23)) * sqrt(dot (tmpvar_22, tmpvar_22)));
  FinalPosition_18 = tmpvar_24;
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_25;
    tmpvar_25 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_26;
    isBestWind_26 = (tmpvar_19 == 4.0);
    bool bLeaf2_27;
    bLeaf2_27 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_28;
    vPos_28 = tmpvar_24;
    highp vec3 vDirection_29;
    vDirection_29 = tmpvar_2;
    highp float tmpvar_30;
    if (bLeaf2_27) {
      tmpvar_30 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_31;
    if (bLeaf2_27) {
      tmpvar_31 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_32;
    highp vec4 tmpvar_33;
    tmpvar_33.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_33.x = (tmpvar_30 + tmpvar_25);
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    vPos_32 = (tmpvar_24 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_31 * (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_29 = tmpvar_2;
    vPos_28 = vPos_32;
    if (isBestWind_26) {
      highp vec3 tmpvar_35;
      tmpvar_35 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_36;
      if (bLeaf2_27) {
        tmpvar_36 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_37;
      if (bLeaf2_27) {
        tmpvar_37 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_38;
      if (bLeaf2_27) {
        tmpvar_38 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_39;
      if (bLeaf2_27) {
        tmpvar_39 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_40;
      if (bLeaf2_27) {
        tmpvar_40 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_40 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_41;
      if (bLeaf2_27) {
        tmpvar_41 = bool(1);
      } else {
        tmpvar_41 = bool(1);
      };
      highp float fTwitch_42;
      highp vec3 vAxis_43;
      highp vec3 tmpvar_44;
      tmpvar_44 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_45;
      tmpvar_45 = ((tmpvar_44.x + tmpvar_44.y) + tmpvar_44.z);
      highp vec4 tmpvar_46;
      tmpvar_46.x = (tmpvar_36 + tmpvar_45);
      tmpvar_46.y = ((tmpvar_36 * 0.75) - tmpvar_45);
      tmpvar_46.z = ((tmpvar_36 * 0.01) + tmpvar_45);
      tmpvar_46.w = (tmpvar_36 + tmpvar_45);
      highp vec4 tmpvar_47;
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      tmpvar_47 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = sqrt(dot (vPos_32, vPos_32));
      highp float fAngle_50;
      fAngle_50 = ((_glesMultiTexCoord2.x * tmpvar_38) * (tmpvar_47.x + (tmpvar_47.y * tmpvar_47.y)));
      highp vec2 vSinCos_51;
      vSinCos_51.x = sin(fAngle_50);
      vSinCos_51.y = cos(fAngle_50);
      highp float tmpvar_52;
      tmpvar_52 = (1.0 - vSinCos_51.y);
      highp mat3 tmpvar_53;
      tmpvar_53[0].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.x) + vSinCos_51.y);
      tmpvar_53[0].y = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.y) + (vSinCos_51.x * tmpvar_35.z));
      tmpvar_53[0].z = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.z) - (vSinCos_51.x * tmpvar_35.y));
      tmpvar_53[1].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.y) - (vSinCos_51.x * tmpvar_35.z));
      tmpvar_53[1].y = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.y) + vSinCos_51.y);
      tmpvar_53[1].z = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.z) + (vSinCos_51.x * tmpvar_35.x));
      tmpvar_53[2].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.z) + (vSinCos_51.x * tmpvar_35.y));
      tmpvar_53[2].y = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.z) - (vSinCos_51.x * tmpvar_35.x));
      tmpvar_53[2].z = (((tmpvar_52 * tmpvar_35.z) * tmpvar_35.z) + vSinCos_51.y);
      highp vec3 tmpvar_54;
      tmpvar_54 = ((tmpvar_35.yzx * vRotatedWindVector_17.zxy) - (tmpvar_35.zxy * vRotatedWindVector_17.yzx));
      vAxis_43.xz = tmpvar_54.xz;
      highp float tmpvar_55;
      tmpvar_55 = clamp (dot (vRotatedWindVector_17, tmpvar_35), -1.0, 1.0);
      vAxis_43.y = (tmpvar_54.y + tmpvar_55);
      highp vec3 tmpvar_56;
      tmpvar_56 = normalize(vAxis_43);
      vAxis_43 = tmpvar_56;
      highp float tmpvar_57;
      tmpvar_57 = (1.570796 - (sign(tmpvar_55) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_55))) * (1.570796 + (abs(tmpvar_55) * (-0.2146018 + 
          (abs(tmpvar_55) * (0.08656672 + (abs(tmpvar_55) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_58;
      tmpvar_58 = (tmpvar_47.y - (tmpvar_47.x * tmpvar_47.x));
      fTwitch_42 = 0.0;
      if (tmpvar_41) {
        highp float fTime_59;
        fTime_59 = (tmpvar_40.z + tmpvar_45);
        highp vec4 tmpvar_60;
        tmpvar_60.zw = vec2(0.0, 0.0);
        tmpvar_60.x = fTime_59;
        tmpvar_60.y = (0.87 * fTime_59);
        highp vec4 tmpvar_61;
        highp vec4 tmpvar_62;
        tmpvar_62 = abs(((
          fract((tmpvar_60 + 0.5))
         * 2.0) - 1.0));
        tmpvar_61 = (((
          (tmpvar_62 * tmpvar_62)
         * 
          (3.0 - (2.0 * tmpvar_62))
        ) - 0.5) * 2.0);
        fTwitch_42 = (tmpvar_40.x * pow (clamp (
          ((((tmpvar_61.x * tmpvar_61.y) * tmpvar_61.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_40.y));
      };
      highp float fAngle_63;
      fAngle_63 = (_glesMultiTexCoord2.x * ((
        (tmpvar_57 * tmpvar_39)
       + 
        (tmpvar_58 * tmpvar_37)
      ) + fTwitch_42));
      highp vec2 vSinCos_64;
      vSinCos_64.x = sin(fAngle_63);
      vSinCos_64.y = cos(fAngle_63);
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - vSinCos_64.y);
      highp mat3 tmpvar_66;
      tmpvar_66[0].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.x) + vSinCos_64.y);
      tmpvar_66[0].y = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.y) + (vSinCos_64.x * tmpvar_56.z));
      tmpvar_66[0].z = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.z) - (vSinCos_64.x * tmpvar_56.y));
      tmpvar_66[1].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.y) - (vSinCos_64.x * tmpvar_56.z));
      tmpvar_66[1].y = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.y) + vSinCos_64.y);
      tmpvar_66[1].z = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.z) + (vSinCos_64.x * tmpvar_56.x));
      tmpvar_66[2].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.z) + (vSinCos_64.x * tmpvar_56.y));
      tmpvar_66[2].y = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.z) - (vSinCos_64.x * tmpvar_56.x));
      tmpvar_66[2].z = (((tmpvar_65 * tmpvar_56.z) * tmpvar_56.z) + vSinCos_64.y);
      highp mat3 tmpvar_67;
      tmpvar_67 = (tmpvar_53 * tmpvar_66);
      vDirection_29 = (tmpvar_67 * _glesNormal);
      vPos_28 = (normalize((tmpvar_67 * vPos_32)) * tmpvar_49);
    };
    tmpvar_15 = vDirection_29;
    FinalPosition_18 = vPos_28;
  };
  highp vec3 tmpvar_68;
  tmpvar_68 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  FinalPosition_18 = tmpvar_68;
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_69;
    vPos_69 = tmpvar_68;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_70;
      vPos_70 = tmpvar_68;
      highp float fAdherenceScale_71;
      highp vec3 tmpvar_72;
      tmpvar_72 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_73;
      tmpvar_73 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_74;
      highp float fOscillation_75;
      fOscillation_75 = 1.0;
      highp float fAmount_76;
      highp float fTarget_77;
      highp vec4 tmpvar_78;
      tmpvar_78.x = (tmpvar_73 + _glesMultiTexCoord0.w);
      tmpvar_78.y = ((tmpvar_73 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_78.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_73 + _glesMultiTexCoord0.w));
      tmpvar_78.w = ((tmpvar_73 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      vOscillations_74 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      highp float tmpvar_80;
      tmpvar_80 = (vOscillations_74.y * vOscillations_74.z);
      fTarget_77 = 1.0;
      fAmount_76 = tmpvar_80;
      if ((tmpvar_80 < 0.0)) {
        fTarget_77 = -1.0;
        fAmount_76 = -(tmpvar_80);
      };
      fOscillation_75 = (((
        (mix (mix (tmpvar_80, fTarget_77, fAmount_76), fTarget_77, fAmount_76) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_74.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_74.w * _ST_WindBranchWhip.x)));
      vPos_70 = (tmpvar_68 + ((tmpvar_72 * fOscillation_75) * _ST_WindBranch.y));
      highp vec4 tmpvar_81;
      tmpvar_81.zw = vec2(0.0, 0.0);
      tmpvar_81.x = ((tmpvar_73 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_81.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_82;
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_81 + 0.5))
       * 2.0) - 1.0));
      tmpvar_82 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      fAdherenceScale_71 = (1.0 - ((
        ((tmpvar_82.x * tmpvar_82.y) * tmpvar_82.x)
       * tmpvar_82.y) * _ST_WindTurbulences.x));
      fAdherenceScale_71 = (fAdherenceScale_71 + ((vOscillations_74.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_70 = (vPos_70 + ((
        ((vRotatedBranchAnchor_16 - vPos_70) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_71) * _glesMultiTexCoord0.z));
      vPos_69 = vPos_70;
    } else {
      highp vec3 vPos_84;
      vPos_84 = vPos_69;
      highp vec3 tmpvar_85;
      tmpvar_85 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_86;
      tmpvar_86 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_87;
      highp float fAmount_88;
      highp float fTarget_89;
      highp vec4 tmpvar_90;
      tmpvar_90.w = 0.0;
      tmpvar_90.x = (tmpvar_86 + _glesMultiTexCoord0.w);
      tmpvar_90.y = ((tmpvar_86 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_90.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_86 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_91;
      tmpvar_91 = abs(((
        fract((tmpvar_90 + 0.5))
       * 2.0) - 1.0));
      vOscillations_87 = (((
        (tmpvar_91 * tmpvar_91)
       * 
        (3.0 - (2.0 * tmpvar_91))
      ) - 0.5) * 2.0);
      highp float tmpvar_92;
      tmpvar_92 = (vOscillations_87.y * vOscillations_87.z);
      fTarget_89 = 1.0;
      fAmount_88 = tmpvar_92;
      if ((tmpvar_92 < 0.0)) {
        fTarget_89 = -1.0;
        fAmount_88 = -(tmpvar_92);
      };
      vPos_84 = (vPos_69 + ((tmpvar_85 * 
        (((mix (
          mix (tmpvar_92, fTarget_89, fAmount_88)
        , fTarget_89, fAmount_88) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_87.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_69 = vPos_84;
    };
    FinalPosition_18 = vPos_69;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_93;
    vPos_93 = FinalPosition_18;
    highp float fAdjust_94;
    highp float fLength_95;
    fLength_95 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_96;
    tmpvar_96 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_94 = tmpvar_96;
    if ((tmpvar_96 != 0.0)) {
      fAdjust_94 = pow (tmpvar_96, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_97;
    tmpvar_97.zw = vec2(0.0, 0.0);
    tmpvar_97.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_97.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_98;
    highp vec4 tmpvar_99;
    tmpvar_99 = abs(((
      fract((tmpvar_97 + 0.5))
     * 2.0) - 1.0));
    tmpvar_98 = (((
      (tmpvar_99 * tmpvar_99)
     * 
      (3.0 - (2.0 * tmpvar_99))
    ) - 0.5) * 2.0);
    vPos_93.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_98.x + (tmpvar_98.y * tmpvar_98.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_94)));
    vPos_93 = (normalize(vPos_93) * fLength_95);
    FinalPosition_18 = vPos_93;
  };
  tmpvar_14.xyz = FinalPosition_18;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_100;
  v_100.x = _World2Object[0].x;
  v_100.y = _World2Object[1].x;
  v_100.z = _World2Object[2].x;
  v_100.w = _World2Object[3].x;
  highp vec4 v_101;
  v_101.x = _World2Object[0].y;
  v_101.y = _World2Object[1].y;
  v_101.z = _World2Object[2].y;
  v_101.w = _World2Object[3].y;
  highp vec4 v_102;
  v_102.x = _World2Object[0].z;
  v_102.y = _World2Object[1].z;
  v_102.z = _World2Object[2].z;
  v_102.w = _World2Object[3].z;
  highp vec3 tmpvar_103;
  tmpvar_103 = normalize(((
    (v_100.xyz * tmpvar_15.x)
   + 
    (v_101.xyz * tmpvar_15.y)
  ) + (v_102.xyz * tmpvar_15.z)));
  worldNormal_3 = tmpvar_103;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_104;
  tmpvar_104.w = 1.0;
  tmpvar_104.xyz = worldNormal_3;
  mediump vec4 normal_105;
  normal_105 = tmpvar_104;
  mediump vec3 x2_106;
  mediump vec4 tmpvar_107;
  tmpvar_107 = (normal_105.xyzz * normal_105.yzzx);
  x2_106.x = dot (unity_SHBr, tmpvar_107);
  x2_106.y = dot (unity_SHBg, tmpvar_107);
  x2_106.z = dot (unity_SHBb, tmpvar_107);
  highp vec4 tmpvar_108;
  tmpvar_108 = (unity_World2Shadow[0] * (_Object2World * tmpvar_14));
  tmpvar_6 = tmpvar_108;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = (x2_106 + (unity_SHC.xyz * (
    (normal_105.x * normal_105.x)
   - 
    (normal_105.y * normal_105.y)
  )));
  xlv_TEXCOORD5 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  lowp float tmpvar_17;
  mediump float dist_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x;
  dist_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (float((dist_18 > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_17 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_21;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_17;
  mediump vec3 normalWorld_22;
  normalWorld_22 = tmpvar_5;
  mediump vec3 tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_22;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  tmpvar_23 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_23;
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_28 = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tmpvar_9 * tmpvar_23) * diff_28);
  c_27.xyz = tmpvar_30;
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  mediump vec3 tmpvar_31;
  tmpvar_31 = (c_27.xyz + (tmpvar_9 * (xlv_TEXCOORD4 + x1_25)));
  c_26.xyz = tmpvar_31;
  c_4.xyz = c_26.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_9;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_13;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_22;
  tmpvar_22 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_23;
  tmpvar_23[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_23[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_23[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_24;
  tmpvar_24 = (normalize((tmpvar_22 * tmpvar_23)) * sqrt(dot (tmpvar_22, tmpvar_22)));
  FinalPosition_18 = tmpvar_24;
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_25;
    tmpvar_25 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_26;
    isBestWind_26 = (tmpvar_19 == 4.0);
    bool bLeaf2_27;
    bLeaf2_27 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_28;
    vPos_28 = tmpvar_24;
    highp vec3 vDirection_29;
    vDirection_29 = tmpvar_2;
    highp float tmpvar_30;
    if (bLeaf2_27) {
      tmpvar_30 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_31;
    if (bLeaf2_27) {
      tmpvar_31 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_32;
    highp vec4 tmpvar_33;
    tmpvar_33.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_33.x = (tmpvar_30 + tmpvar_25);
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    vPos_32 = (tmpvar_24 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_31 * (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_29 = tmpvar_2;
    vPos_28 = vPos_32;
    if (isBestWind_26) {
      highp vec3 tmpvar_35;
      tmpvar_35 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_36;
      if (bLeaf2_27) {
        tmpvar_36 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_37;
      if (bLeaf2_27) {
        tmpvar_37 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_38;
      if (bLeaf2_27) {
        tmpvar_38 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_39;
      if (bLeaf2_27) {
        tmpvar_39 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_40;
      if (bLeaf2_27) {
        tmpvar_40 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_40 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_41;
      if (bLeaf2_27) {
        tmpvar_41 = bool(1);
      } else {
        tmpvar_41 = bool(1);
      };
      highp float fTwitch_42;
      highp vec3 vAxis_43;
      highp vec3 tmpvar_44;
      tmpvar_44 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_45;
      tmpvar_45 = ((tmpvar_44.x + tmpvar_44.y) + tmpvar_44.z);
      highp vec4 tmpvar_46;
      tmpvar_46.x = (tmpvar_36 + tmpvar_45);
      tmpvar_46.y = ((tmpvar_36 * 0.75) - tmpvar_45);
      tmpvar_46.z = ((tmpvar_36 * 0.01) + tmpvar_45);
      tmpvar_46.w = (tmpvar_36 + tmpvar_45);
      highp vec4 tmpvar_47;
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      tmpvar_47 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = sqrt(dot (vPos_32, vPos_32));
      highp float fAngle_50;
      fAngle_50 = ((_glesMultiTexCoord2.x * tmpvar_38) * (tmpvar_47.x + (tmpvar_47.y * tmpvar_47.y)));
      highp vec2 vSinCos_51;
      vSinCos_51.x = sin(fAngle_50);
      vSinCos_51.y = cos(fAngle_50);
      highp float tmpvar_52;
      tmpvar_52 = (1.0 - vSinCos_51.y);
      highp mat3 tmpvar_53;
      tmpvar_53[0].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.x) + vSinCos_51.y);
      tmpvar_53[0].y = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.y) + (vSinCos_51.x * tmpvar_35.z));
      tmpvar_53[0].z = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.z) - (vSinCos_51.x * tmpvar_35.y));
      tmpvar_53[1].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.y) - (vSinCos_51.x * tmpvar_35.z));
      tmpvar_53[1].y = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.y) + vSinCos_51.y);
      tmpvar_53[1].z = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.z) + (vSinCos_51.x * tmpvar_35.x));
      tmpvar_53[2].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.z) + (vSinCos_51.x * tmpvar_35.y));
      tmpvar_53[2].y = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.z) - (vSinCos_51.x * tmpvar_35.x));
      tmpvar_53[2].z = (((tmpvar_52 * tmpvar_35.z) * tmpvar_35.z) + vSinCos_51.y);
      highp vec3 tmpvar_54;
      tmpvar_54 = ((tmpvar_35.yzx * vRotatedWindVector_17.zxy) - (tmpvar_35.zxy * vRotatedWindVector_17.yzx));
      vAxis_43.xz = tmpvar_54.xz;
      highp float tmpvar_55;
      tmpvar_55 = clamp (dot (vRotatedWindVector_17, tmpvar_35), -1.0, 1.0);
      vAxis_43.y = (tmpvar_54.y + tmpvar_55);
      highp vec3 tmpvar_56;
      tmpvar_56 = normalize(vAxis_43);
      vAxis_43 = tmpvar_56;
      highp float tmpvar_57;
      tmpvar_57 = (1.570796 - (sign(tmpvar_55) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_55))) * (1.570796 + (abs(tmpvar_55) * (-0.2146018 + 
          (abs(tmpvar_55) * (0.08656672 + (abs(tmpvar_55) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_58;
      tmpvar_58 = (tmpvar_47.y - (tmpvar_47.x * tmpvar_47.x));
      fTwitch_42 = 0.0;
      if (tmpvar_41) {
        highp float fTime_59;
        fTime_59 = (tmpvar_40.z + tmpvar_45);
        highp vec4 tmpvar_60;
        tmpvar_60.zw = vec2(0.0, 0.0);
        tmpvar_60.x = fTime_59;
        tmpvar_60.y = (0.87 * fTime_59);
        highp vec4 tmpvar_61;
        highp vec4 tmpvar_62;
        tmpvar_62 = abs(((
          fract((tmpvar_60 + 0.5))
         * 2.0) - 1.0));
        tmpvar_61 = (((
          (tmpvar_62 * tmpvar_62)
         * 
          (3.0 - (2.0 * tmpvar_62))
        ) - 0.5) * 2.0);
        fTwitch_42 = (tmpvar_40.x * pow (clamp (
          ((((tmpvar_61.x * tmpvar_61.y) * tmpvar_61.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_40.y));
      };
      highp float fAngle_63;
      fAngle_63 = (_glesMultiTexCoord2.x * ((
        (tmpvar_57 * tmpvar_39)
       + 
        (tmpvar_58 * tmpvar_37)
      ) + fTwitch_42));
      highp vec2 vSinCos_64;
      vSinCos_64.x = sin(fAngle_63);
      vSinCos_64.y = cos(fAngle_63);
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - vSinCos_64.y);
      highp mat3 tmpvar_66;
      tmpvar_66[0].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.x) + vSinCos_64.y);
      tmpvar_66[0].y = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.y) + (vSinCos_64.x * tmpvar_56.z));
      tmpvar_66[0].z = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.z) - (vSinCos_64.x * tmpvar_56.y));
      tmpvar_66[1].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.y) - (vSinCos_64.x * tmpvar_56.z));
      tmpvar_66[1].y = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.y) + vSinCos_64.y);
      tmpvar_66[1].z = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.z) + (vSinCos_64.x * tmpvar_56.x));
      tmpvar_66[2].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.z) + (vSinCos_64.x * tmpvar_56.y));
      tmpvar_66[2].y = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.z) - (vSinCos_64.x * tmpvar_56.x));
      tmpvar_66[2].z = (((tmpvar_65 * tmpvar_56.z) * tmpvar_56.z) + vSinCos_64.y);
      highp mat3 tmpvar_67;
      tmpvar_67 = (tmpvar_53 * tmpvar_66);
      vDirection_29 = (tmpvar_67 * _glesNormal);
      vPos_28 = (normalize((tmpvar_67 * vPos_32)) * tmpvar_49);
    };
    tmpvar_15 = vDirection_29;
    FinalPosition_18 = vPos_28;
  };
  highp vec3 tmpvar_68;
  tmpvar_68 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  FinalPosition_18 = tmpvar_68;
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_69;
    vPos_69 = tmpvar_68;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_70;
      vPos_70 = tmpvar_68;
      highp float fAdherenceScale_71;
      highp vec3 tmpvar_72;
      tmpvar_72 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_73;
      tmpvar_73 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_74;
      highp float fOscillation_75;
      fOscillation_75 = 1.0;
      highp float fAmount_76;
      highp float fTarget_77;
      highp vec4 tmpvar_78;
      tmpvar_78.x = (tmpvar_73 + _glesMultiTexCoord0.w);
      tmpvar_78.y = ((tmpvar_73 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_78.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_73 + _glesMultiTexCoord0.w));
      tmpvar_78.w = ((tmpvar_73 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      vOscillations_74 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      highp float tmpvar_80;
      tmpvar_80 = (vOscillations_74.y * vOscillations_74.z);
      fTarget_77 = 1.0;
      fAmount_76 = tmpvar_80;
      if ((tmpvar_80 < 0.0)) {
        fTarget_77 = -1.0;
        fAmount_76 = -(tmpvar_80);
      };
      fOscillation_75 = (((
        (mix (mix (tmpvar_80, fTarget_77, fAmount_76), fTarget_77, fAmount_76) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_74.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_74.w * _ST_WindBranchWhip.x)));
      vPos_70 = (tmpvar_68 + ((tmpvar_72 * fOscillation_75) * _ST_WindBranch.y));
      highp vec4 tmpvar_81;
      tmpvar_81.zw = vec2(0.0, 0.0);
      tmpvar_81.x = ((tmpvar_73 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_81.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_82;
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_81 + 0.5))
       * 2.0) - 1.0));
      tmpvar_82 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      fAdherenceScale_71 = (1.0 - ((
        ((tmpvar_82.x * tmpvar_82.y) * tmpvar_82.x)
       * tmpvar_82.y) * _ST_WindTurbulences.x));
      fAdherenceScale_71 = (fAdherenceScale_71 + ((vOscillations_74.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_70 = (vPos_70 + ((
        ((vRotatedBranchAnchor_16 - vPos_70) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_71) * _glesMultiTexCoord0.z));
      vPos_69 = vPos_70;
    } else {
      highp vec3 vPos_84;
      vPos_84 = vPos_69;
      highp vec3 tmpvar_85;
      tmpvar_85 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_86;
      tmpvar_86 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_87;
      highp float fAmount_88;
      highp float fTarget_89;
      highp vec4 tmpvar_90;
      tmpvar_90.w = 0.0;
      tmpvar_90.x = (tmpvar_86 + _glesMultiTexCoord0.w);
      tmpvar_90.y = ((tmpvar_86 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_90.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_86 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_91;
      tmpvar_91 = abs(((
        fract((tmpvar_90 + 0.5))
       * 2.0) - 1.0));
      vOscillations_87 = (((
        (tmpvar_91 * tmpvar_91)
       * 
        (3.0 - (2.0 * tmpvar_91))
      ) - 0.5) * 2.0);
      highp float tmpvar_92;
      tmpvar_92 = (vOscillations_87.y * vOscillations_87.z);
      fTarget_89 = 1.0;
      fAmount_88 = tmpvar_92;
      if ((tmpvar_92 < 0.0)) {
        fTarget_89 = -1.0;
        fAmount_88 = -(tmpvar_92);
      };
      vPos_84 = (vPos_69 + ((tmpvar_85 * 
        (((mix (
          mix (tmpvar_92, fTarget_89, fAmount_88)
        , fTarget_89, fAmount_88) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_87.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_69 = vPos_84;
    };
    FinalPosition_18 = vPos_69;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_93;
    vPos_93 = FinalPosition_18;
    highp float fAdjust_94;
    highp float fLength_95;
    fLength_95 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_96;
    tmpvar_96 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_94 = tmpvar_96;
    if ((tmpvar_96 != 0.0)) {
      fAdjust_94 = pow (tmpvar_96, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_97;
    tmpvar_97.zw = vec2(0.0, 0.0);
    tmpvar_97.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_97.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_98;
    highp vec4 tmpvar_99;
    tmpvar_99 = abs(((
      fract((tmpvar_97 + 0.5))
     * 2.0) - 1.0));
    tmpvar_98 = (((
      (tmpvar_99 * tmpvar_99)
     * 
      (3.0 - (2.0 * tmpvar_99))
    ) - 0.5) * 2.0);
    vPos_93.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_98.x + (tmpvar_98.y * tmpvar_98.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_94)));
    vPos_93 = (normalize(vPos_93) * fLength_95);
    FinalPosition_18 = vPos_93;
  };
  tmpvar_14.xyz = FinalPosition_18;
  tmpvar_5 = tmpvar_7;
  highp vec3 tmpvar_100;
  tmpvar_100 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_101;
  v_101.x = _World2Object[0].x;
  v_101.y = _World2Object[1].x;
  v_101.z = _World2Object[2].x;
  v_101.w = _World2Object[3].x;
  highp vec4 v_102;
  v_102.x = _World2Object[0].y;
  v_102.y = _World2Object[1].y;
  v_102.z = _World2Object[2].y;
  v_102.w = _World2Object[3].y;
  highp vec4 v_103;
  v_103.x = _World2Object[0].z;
  v_103.y = _World2Object[1].z;
  v_103.z = _World2Object[2].z;
  v_103.w = _World2Object[3].z;
  highp vec3 tmpvar_104;
  tmpvar_104 = normalize(((
    (v_101.xyz * tmpvar_15.x)
   + 
    (v_102.xyz * tmpvar_15.y)
  ) + (v_103.xyz * tmpvar_15.z)));
  worldNormal_3 = tmpvar_104;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_105;
  tmpvar_105.w = 1.0;
  tmpvar_105.xyz = worldNormal_3;
  mediump vec3 tmpvar_106;
  mediump vec4 normal_107;
  normal_107 = tmpvar_105;
  mediump vec3 x2_108;
  mediump vec4 tmpvar_109;
  tmpvar_109 = (normal_107.xyzz * normal_107.yzzx);
  x2_108.x = dot (unity_SHBr, tmpvar_109);
  x2_108.y = dot (unity_SHBg, tmpvar_109);
  x2_108.z = dot (unity_SHBb, tmpvar_109);
  tmpvar_106 = (x2_108 + (unity_SHC.xyz * (
    (normal_107.x * normal_107.x)
   - 
    (normal_107.y * normal_107.y)
  )));
  highp vec3 lightColor0_110;
  lightColor0_110 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_111;
  lightColor1_111 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_112;
  lightColor2_112 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_113;
  lightColor3_113 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_114;
  lightAttenSq_114 = unity_4LightAtten0;
  highp vec3 normal_115;
  normal_115 = worldNormal_3;
  highp vec4 tmpvar_116;
  tmpvar_116 = (unity_4LightPosX0 - tmpvar_100.x);
  highp vec4 tmpvar_117;
  tmpvar_117 = (unity_4LightPosY0 - tmpvar_100.y);
  highp vec4 tmpvar_118;
  tmpvar_118 = (unity_4LightPosZ0 - tmpvar_100.z);
  highp vec4 tmpvar_119;
  tmpvar_119 = (((tmpvar_116 * tmpvar_116) + (tmpvar_117 * tmpvar_117)) + (tmpvar_118 * tmpvar_118));
  highp vec4 tmpvar_120;
  tmpvar_120 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_116 * normal_115.x) + (tmpvar_117 * normal_115.y)) + (tmpvar_118 * normal_115.z))
   * 
    inversesqrt(tmpvar_119)
  )) * (1.0/((1.0 + 
    (tmpvar_119 * lightAttenSq_114)
  ))));
  highp vec3 tmpvar_121;
  tmpvar_121 = (tmpvar_106 + ((
    ((lightColor0_110 * tmpvar_120.x) + (lightColor1_111 * tmpvar_120.y))
   + 
    (lightColor2_112 * tmpvar_120.z)
  ) + (lightColor3_113 * tmpvar_120.w)));
  tmpvar_6 = tmpvar_121;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_100;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_12;
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_14 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_15;
  lowp vec3 tmpvar_16;
  tmpvar_16 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_16;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_4;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_17;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_22 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.xyz = tmpvar_24;
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (c_21.xyz + (tmpvar_8 * (xlv_TEXCOORD4 + x1_19)));
  c_20.xyz = tmpvar_25;
  c_3.xyz = c_20.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_9;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_13;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_22;
  tmpvar_22 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_23;
  tmpvar_23[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_23[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_23[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_24;
  tmpvar_24 = (normalize((tmpvar_22 * tmpvar_23)) * sqrt(dot (tmpvar_22, tmpvar_22)));
  FinalPosition_18 = tmpvar_24;
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_25;
    tmpvar_25 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_26;
    isBestWind_26 = (tmpvar_19 == 4.0);
    bool bLeaf2_27;
    bLeaf2_27 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_28;
    vPos_28 = tmpvar_24;
    highp vec3 vDirection_29;
    vDirection_29 = tmpvar_2;
    highp float tmpvar_30;
    if (bLeaf2_27) {
      tmpvar_30 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_31;
    if (bLeaf2_27) {
      tmpvar_31 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_32;
    highp vec4 tmpvar_33;
    tmpvar_33.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_33.x = (tmpvar_30 + tmpvar_25);
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    vPos_32 = (tmpvar_24 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_31 * (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_29 = tmpvar_2;
    vPos_28 = vPos_32;
    if (isBestWind_26) {
      highp vec3 tmpvar_35;
      tmpvar_35 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_36;
      if (bLeaf2_27) {
        tmpvar_36 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_37;
      if (bLeaf2_27) {
        tmpvar_37 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_38;
      if (bLeaf2_27) {
        tmpvar_38 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_39;
      if (bLeaf2_27) {
        tmpvar_39 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_40;
      if (bLeaf2_27) {
        tmpvar_40 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_40 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_41;
      if (bLeaf2_27) {
        tmpvar_41 = bool(1);
      } else {
        tmpvar_41 = bool(1);
      };
      highp float fTwitch_42;
      highp vec3 vAxis_43;
      highp vec3 tmpvar_44;
      tmpvar_44 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_45;
      tmpvar_45 = ((tmpvar_44.x + tmpvar_44.y) + tmpvar_44.z);
      highp vec4 tmpvar_46;
      tmpvar_46.x = (tmpvar_36 + tmpvar_45);
      tmpvar_46.y = ((tmpvar_36 * 0.75) - tmpvar_45);
      tmpvar_46.z = ((tmpvar_36 * 0.01) + tmpvar_45);
      tmpvar_46.w = (tmpvar_36 + tmpvar_45);
      highp vec4 tmpvar_47;
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      tmpvar_47 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = sqrt(dot (vPos_32, vPos_32));
      highp float fAngle_50;
      fAngle_50 = ((_glesMultiTexCoord2.x * tmpvar_38) * (tmpvar_47.x + (tmpvar_47.y * tmpvar_47.y)));
      highp vec2 vSinCos_51;
      vSinCos_51.x = sin(fAngle_50);
      vSinCos_51.y = cos(fAngle_50);
      highp float tmpvar_52;
      tmpvar_52 = (1.0 - vSinCos_51.y);
      highp mat3 tmpvar_53;
      tmpvar_53[0].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.x) + vSinCos_51.y);
      tmpvar_53[0].y = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.y) + (vSinCos_51.x * tmpvar_35.z));
      tmpvar_53[0].z = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.z) - (vSinCos_51.x * tmpvar_35.y));
      tmpvar_53[1].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.y) - (vSinCos_51.x * tmpvar_35.z));
      tmpvar_53[1].y = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.y) + vSinCos_51.y);
      tmpvar_53[1].z = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.z) + (vSinCos_51.x * tmpvar_35.x));
      tmpvar_53[2].x = (((tmpvar_52 * tmpvar_35.x) * tmpvar_35.z) + (vSinCos_51.x * tmpvar_35.y));
      tmpvar_53[2].y = (((tmpvar_52 * tmpvar_35.y) * tmpvar_35.z) - (vSinCos_51.x * tmpvar_35.x));
      tmpvar_53[2].z = (((tmpvar_52 * tmpvar_35.z) * tmpvar_35.z) + vSinCos_51.y);
      highp vec3 tmpvar_54;
      tmpvar_54 = ((tmpvar_35.yzx * vRotatedWindVector_17.zxy) - (tmpvar_35.zxy * vRotatedWindVector_17.yzx));
      vAxis_43.xz = tmpvar_54.xz;
      highp float tmpvar_55;
      tmpvar_55 = clamp (dot (vRotatedWindVector_17, tmpvar_35), -1.0, 1.0);
      vAxis_43.y = (tmpvar_54.y + tmpvar_55);
      highp vec3 tmpvar_56;
      tmpvar_56 = normalize(vAxis_43);
      vAxis_43 = tmpvar_56;
      highp float tmpvar_57;
      tmpvar_57 = (1.570796 - (sign(tmpvar_55) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_55))) * (1.570796 + (abs(tmpvar_55) * (-0.2146018 + 
          (abs(tmpvar_55) * (0.08656672 + (abs(tmpvar_55) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_58;
      tmpvar_58 = (tmpvar_47.y - (tmpvar_47.x * tmpvar_47.x));
      fTwitch_42 = 0.0;
      if (tmpvar_41) {
        highp float fTime_59;
        fTime_59 = (tmpvar_40.z + tmpvar_45);
        highp vec4 tmpvar_60;
        tmpvar_60.zw = vec2(0.0, 0.0);
        tmpvar_60.x = fTime_59;
        tmpvar_60.y = (0.87 * fTime_59);
        highp vec4 tmpvar_61;
        highp vec4 tmpvar_62;
        tmpvar_62 = abs(((
          fract((tmpvar_60 + 0.5))
         * 2.0) - 1.0));
        tmpvar_61 = (((
          (tmpvar_62 * tmpvar_62)
         * 
          (3.0 - (2.0 * tmpvar_62))
        ) - 0.5) * 2.0);
        fTwitch_42 = (tmpvar_40.x * pow (clamp (
          ((((tmpvar_61.x * tmpvar_61.y) * tmpvar_61.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_40.y));
      };
      highp float fAngle_63;
      fAngle_63 = (_glesMultiTexCoord2.x * ((
        (tmpvar_57 * tmpvar_39)
       + 
        (tmpvar_58 * tmpvar_37)
      ) + fTwitch_42));
      highp vec2 vSinCos_64;
      vSinCos_64.x = sin(fAngle_63);
      vSinCos_64.y = cos(fAngle_63);
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - vSinCos_64.y);
      highp mat3 tmpvar_66;
      tmpvar_66[0].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.x) + vSinCos_64.y);
      tmpvar_66[0].y = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.y) + (vSinCos_64.x * tmpvar_56.z));
      tmpvar_66[0].z = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.z) - (vSinCos_64.x * tmpvar_56.y));
      tmpvar_66[1].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.y) - (vSinCos_64.x * tmpvar_56.z));
      tmpvar_66[1].y = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.y) + vSinCos_64.y);
      tmpvar_66[1].z = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.z) + (vSinCos_64.x * tmpvar_56.x));
      tmpvar_66[2].x = (((tmpvar_65 * tmpvar_56.x) * tmpvar_56.z) + (vSinCos_64.x * tmpvar_56.y));
      tmpvar_66[2].y = (((tmpvar_65 * tmpvar_56.y) * tmpvar_56.z) - (vSinCos_64.x * tmpvar_56.x));
      tmpvar_66[2].z = (((tmpvar_65 * tmpvar_56.z) * tmpvar_56.z) + vSinCos_64.y);
      highp mat3 tmpvar_67;
      tmpvar_67 = (tmpvar_53 * tmpvar_66);
      vDirection_29 = (tmpvar_67 * _glesNormal);
      vPos_28 = (normalize((tmpvar_67 * vPos_32)) * tmpvar_49);
    };
    tmpvar_15 = vDirection_29;
    FinalPosition_18 = vPos_28;
  };
  highp vec3 tmpvar_68;
  tmpvar_68 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  FinalPosition_18 = tmpvar_68;
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_69;
    vPos_69 = tmpvar_68;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_70;
      vPos_70 = tmpvar_68;
      highp float fAdherenceScale_71;
      highp vec3 tmpvar_72;
      tmpvar_72 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_73;
      tmpvar_73 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_74;
      highp float fOscillation_75;
      fOscillation_75 = 1.0;
      highp float fAmount_76;
      highp float fTarget_77;
      highp vec4 tmpvar_78;
      tmpvar_78.x = (tmpvar_73 + _glesMultiTexCoord0.w);
      tmpvar_78.y = ((tmpvar_73 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_78.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_73 + _glesMultiTexCoord0.w));
      tmpvar_78.w = ((tmpvar_73 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      vOscillations_74 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      highp float tmpvar_80;
      tmpvar_80 = (vOscillations_74.y * vOscillations_74.z);
      fTarget_77 = 1.0;
      fAmount_76 = tmpvar_80;
      if ((tmpvar_80 < 0.0)) {
        fTarget_77 = -1.0;
        fAmount_76 = -(tmpvar_80);
      };
      fOscillation_75 = (((
        (mix (mix (tmpvar_80, fTarget_77, fAmount_76), fTarget_77, fAmount_76) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_74.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_74.w * _ST_WindBranchWhip.x)));
      vPos_70 = (tmpvar_68 + ((tmpvar_72 * fOscillation_75) * _ST_WindBranch.y));
      highp vec4 tmpvar_81;
      tmpvar_81.zw = vec2(0.0, 0.0);
      tmpvar_81.x = ((tmpvar_73 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_81.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_82;
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_81 + 0.5))
       * 2.0) - 1.0));
      tmpvar_82 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      fAdherenceScale_71 = (1.0 - ((
        ((tmpvar_82.x * tmpvar_82.y) * tmpvar_82.x)
       * tmpvar_82.y) * _ST_WindTurbulences.x));
      fAdherenceScale_71 = (fAdherenceScale_71 + ((vOscillations_74.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_70 = (vPos_70 + ((
        ((vRotatedBranchAnchor_16 - vPos_70) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_71) * _glesMultiTexCoord0.z));
      vPos_69 = vPos_70;
    } else {
      highp vec3 vPos_84;
      vPos_84 = vPos_69;
      highp vec3 tmpvar_85;
      tmpvar_85 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_86;
      tmpvar_86 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_87;
      highp float fAmount_88;
      highp float fTarget_89;
      highp vec4 tmpvar_90;
      tmpvar_90.w = 0.0;
      tmpvar_90.x = (tmpvar_86 + _glesMultiTexCoord0.w);
      tmpvar_90.y = ((tmpvar_86 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_90.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_86 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_91;
      tmpvar_91 = abs(((
        fract((tmpvar_90 + 0.5))
       * 2.0) - 1.0));
      vOscillations_87 = (((
        (tmpvar_91 * tmpvar_91)
       * 
        (3.0 - (2.0 * tmpvar_91))
      ) - 0.5) * 2.0);
      highp float tmpvar_92;
      tmpvar_92 = (vOscillations_87.y * vOscillations_87.z);
      fTarget_89 = 1.0;
      fAmount_88 = tmpvar_92;
      if ((tmpvar_92 < 0.0)) {
        fTarget_89 = -1.0;
        fAmount_88 = -(tmpvar_92);
      };
      vPos_84 = (vPos_69 + ((tmpvar_85 * 
        (((mix (
          mix (tmpvar_92, fTarget_89, fAmount_88)
        , fTarget_89, fAmount_88) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_87.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_69 = vPos_84;
    };
    FinalPosition_18 = vPos_69;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_93;
    vPos_93 = FinalPosition_18;
    highp float fAdjust_94;
    highp float fLength_95;
    fLength_95 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_96;
    tmpvar_96 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_94 = tmpvar_96;
    if ((tmpvar_96 != 0.0)) {
      fAdjust_94 = pow (tmpvar_96, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_97;
    tmpvar_97.zw = vec2(0.0, 0.0);
    tmpvar_97.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_97.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_98;
    highp vec4 tmpvar_99;
    tmpvar_99 = abs(((
      fract((tmpvar_97 + 0.5))
     * 2.0) - 1.0));
    tmpvar_98 = (((
      (tmpvar_99 * tmpvar_99)
     * 
      (3.0 - (2.0 * tmpvar_99))
    ) - 0.5) * 2.0);
    vPos_93.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_98.x + (tmpvar_98.y * tmpvar_98.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_94)));
    vPos_93 = (normalize(vPos_93) * fLength_95);
    FinalPosition_18 = vPos_93;
  };
  tmpvar_14.xyz = FinalPosition_18;
  tmpvar_5 = tmpvar_7;
  highp vec3 tmpvar_100;
  tmpvar_100 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_101;
  v_101.x = _World2Object[0].x;
  v_101.y = _World2Object[1].x;
  v_101.z = _World2Object[2].x;
  v_101.w = _World2Object[3].x;
  highp vec4 v_102;
  v_102.x = _World2Object[0].y;
  v_102.y = _World2Object[1].y;
  v_102.z = _World2Object[2].y;
  v_102.w = _World2Object[3].y;
  highp vec4 v_103;
  v_103.x = _World2Object[0].z;
  v_103.y = _World2Object[1].z;
  v_103.z = _World2Object[2].z;
  v_103.w = _World2Object[3].z;
  highp vec3 tmpvar_104;
  tmpvar_104 = normalize(((
    (v_101.xyz * tmpvar_15.x)
   + 
    (v_102.xyz * tmpvar_15.y)
  ) + (v_103.xyz * tmpvar_15.z)));
  worldNormal_3 = tmpvar_104;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_105;
  tmpvar_105.w = 1.0;
  tmpvar_105.xyz = worldNormal_3;
  mediump vec3 tmpvar_106;
  mediump vec4 normal_107;
  normal_107 = tmpvar_105;
  mediump vec3 x2_108;
  mediump vec4 tmpvar_109;
  tmpvar_109 = (normal_107.xyzz * normal_107.yzzx);
  x2_108.x = dot (unity_SHBr, tmpvar_109);
  x2_108.y = dot (unity_SHBg, tmpvar_109);
  x2_108.z = dot (unity_SHBb, tmpvar_109);
  tmpvar_106 = (x2_108 + (unity_SHC.xyz * (
    (normal_107.x * normal_107.x)
   - 
    (normal_107.y * normal_107.y)
  )));
  highp vec3 lightColor0_110;
  lightColor0_110 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_111;
  lightColor1_111 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_112;
  lightColor2_112 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_113;
  lightColor3_113 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_114;
  lightAttenSq_114 = unity_4LightAtten0;
  highp vec3 normal_115;
  normal_115 = worldNormal_3;
  highp vec4 tmpvar_116;
  tmpvar_116 = (unity_4LightPosX0 - tmpvar_100.x);
  highp vec4 tmpvar_117;
  tmpvar_117 = (unity_4LightPosY0 - tmpvar_100.y);
  highp vec4 tmpvar_118;
  tmpvar_118 = (unity_4LightPosZ0 - tmpvar_100.z);
  highp vec4 tmpvar_119;
  tmpvar_119 = (((tmpvar_116 * tmpvar_116) + (tmpvar_117 * tmpvar_117)) + (tmpvar_118 * tmpvar_118));
  highp vec4 tmpvar_120;
  tmpvar_120 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_116 * normal_115.x) + (tmpvar_117 * normal_115.y)) + (tmpvar_118 * normal_115.z))
   * 
    inversesqrt(tmpvar_119)
  )) * (1.0/((1.0 + 
    (tmpvar_119 * lightAttenSq_114)
  ))));
  highp vec3 tmpvar_121;
  tmpvar_121 = (tmpvar_106 + ((
    ((lightColor0_110 * tmpvar_120.x) + (lightColor1_111 * tmpvar_120.y))
   + 
    (lightColor2_112 * tmpvar_120.z)
  ) + (lightColor3_113 * tmpvar_120.w)));
  tmpvar_6 = tmpvar_121;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_100;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_6;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_12;
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_14 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_15;
  lowp vec3 tmpvar_16;
  tmpvar_16 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_16;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_4;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_17;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_22 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.xyz = tmpvar_24;
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (c_21.xyz + (tmpvar_8 * (xlv_TEXCOORD4 + x1_19)));
  c_20.xyz = tmpvar_25;
  c_3.xyz = c_20.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_10;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_14;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpva