.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        (mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_28.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (_glesVertex.xyz + ((tmpvar_26 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((tmpvar_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((
        ((tmpvar_36.x * tmpvar_36.y) * tmpvar_36.x)
       * tmpvar_36.y) * _ST_WindTurbulences.x));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp vec3 tmpvar_39;
      tmpvar_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_40;
      tmpvar_40 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_41;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (tmpvar_40 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((tmpvar_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      vPos_38 = (vPos_23 + ((tmpvar_39 * 
        (((mix (
          mix (tmpvar_46, fTarget_43, fAmount_42)
        , fTarget_43, fAmount_42) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_18;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_51.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    vPos_47.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_52.x + (tmpvar_52.y * tmpvar_52.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_48)));
    vPos_47 = (normalize(vPos_47) * fLength_49);
    FinalPosition_18 = vPos_47;
  };
  tmpvar_15.xyz = FinalPosition_18;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_54;
  v_54.x = _World2Object[0].x;
  v_54.y = _World2Object[1].x;
  v_54.z = _World2Object[2].x;
  v_54.w = _World2Object[3].x;
  highp vec4 v_55;
  v_55.x = _World2Object[0].y;
  v_55.y = _World2Object[1].y;
  v_55.z = _World2Object[2].y;
  v_55.w = _World2Object[3].y;
  highp vec4 v_56;
  v_56.x = _World2Object[0].z;
  v_56.y = _World2Object[1].z;
  v_56.z = _World2Object[2].z;
  v_56.w = _World2Object[3].z;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(((
    (v_54.xyz * _glesNormal.x)
   + 
    (v_55.xyz * _glesNormal.y)
  ) + (v_56.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_57;
  highp mat3 tmpvar_58;
  tmpvar_58[0] = _Object2World[0].xyz;
  tmpvar_58[1] = _Object2World[1].xyz;
  tmpvar_58[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize((tmpvar_58 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_59;
  lowp vec3 tmpvar_60;
  tmpvar_60 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_61;
  tmpvar_61 = (tmpvar_60 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_61;
  lowp vec3 tmpvar_62;
  tmpvar_62.x = worldTangent_3.x;
  tmpvar_62.y = worldBinormal_2.x;
  tmpvar_62.z = worldNormal_4.x;
  lowp vec3 tmpvar_63;
  tmpvar_63.x = worldTangent_3.y;
  tmpvar_63.y = worldBinormal_2.y;
  tmpvar_63.z = worldNormal_4.y;
  lowp vec3 tmpvar_64;
  tmpvar_64.x = worldTangent_3.z;
  tmpvar_64.y = worldBinormal_2.z;
  tmpvar_64.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_62;
  xlv_TEXCOORD1 = tmpvar_63;
  xlv_TEXCOORD2 = tmpvar_64;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec3 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 detailColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_DetailTex, xlv_TEXCOORD6.xy);
  detailColor_11 = tmpvar_15;
  diffuseColor_12.xyz = mix (diffuseColor_12.xyz, detailColor_11.xyz, detailColor_11.www);
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_16 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_17;
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_20;
  tmpvar_20 = (_LightMatrix0 * tmpvar_19).xyz;
  lightCoord_5 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = dot (lightCoord_5, lightCoord_5);
  lowp float tmpvar_22;
  tmpvar_22 = (texture2D (_LightTextureB0, vec2(tmpvar_21)).w * textureCube (_LightTexture0, lightCoord_5).w);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_18);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_18);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_18);
  lowp vec3 tmpvar_23;
  tmpvar_23 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_23;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_22);
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_26 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tmpvar_9 * tmpvar_1) * diff_26);
  c_25.xyz = tmpvar_28;
  c_25.w = tmpvar_10;
  c_24.w = c_25.w;
  mediump vec3 tmpvar_29;
  tmpvar_29 = c_25.xyz;
  c_24.xyz = tmpvar_29;
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
in vec4 _glesTANGENT;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out lowp vec3 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out mediump vec4 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_13;
  highp vec2 tmpvar_14;
  tmpvar_14 = _glesMultiTexCoord2.xy;
  tmpvar_8.xy = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_19;
      highp float fAdherenceScale_25;
      highp vec3 tmpvar_26;
      tmpvar_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_27;
      tmpvar_27 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (tmpvar_27 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_27 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((tmpvar_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        (mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_28.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (_glesVertex.xyz + ((tmpvar_26 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((tmpvar_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((
        ((tmpvar_36.x * tmpvar_36.y) * tmpvar_36.x)
       * tmpvar_36.y) * _ST_WindTurbulences.x));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp vec3 tmpvar_39;
      tmpvar_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_40;
      tmpvar_40 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_41;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (tmpvar_40 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((tmpvar_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      vPos_38 = (vPos_23 + ((tmpvar_39 * 
        (((mix (
          mix (tmpvar_46, fTarget_43, fAmount_42)
        , fTarget_43, fAmount_42) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_18;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_51.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    vPos_47.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_52.x + (tmpvar_52.y * tmpvar_52.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_48)));
    vPos_47 = (normalize(vPos_47) * fLength_49);
    FinalPosition_18 = vPos_47;
  };
  tmpvar_15.xyz = FinalPosition_18;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_54;
  v_54.x = _World2Object[0].x;
  v_54.y = _World2Object[1].x;
  v_54.z = _World2Object[2].x;
  v_54.w = _World2Object[3].x;
  highp vec4 v_55;
  v_55.x = _World2Object[0].y;
  v_55.y = _World2Object[1].y;
  v_55.z = _World2Object[2].y;
  v_55.w = _World2Object[3].y;
  highp vec4 v_56;
  v_56.x = _World2Object[0].z;
  v_56.y = _World2Object[1].z;
  v_56.z = _World2Object[2].z;
  v_56.w = _World2Object[3].z;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(((
    (v_54.xyz * _glesNormal.x)
   + 
    (v_55.xyz * _glesNormal.y)
  ) + (v_56.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_57;
  highp mat3 tmpvar_58;
  tmpvar_58[0] = _Object2World[0].xyz;
  tmpvar_58[1] = _Object2World[1].xyz;
  tmpvar_58[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize((tmpvar_58 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_59;
  lowp vec3 tmpvar_60;
  tmpvar_60 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_61;
  tmpvar_61 = (tmpvar_60 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_61;
  lowp vec3 tmpvar_62;
  tmpvar_62.x = worldTangent_3.x;
  tmpvar_62.y = worldBinormal_2.x;
  tmpvar_62.z = worldNormal_4.x;
  lowp vec3 tmpvar_63;
  tmpvar_63.x = worldTangent_3.y;
  tmpvar_63.y = worldBinormal_2.y;
  tmpvar_63.z = worldNormal_4.y;
  lowp vec3 tmpvar_64;
  tmpvar_64.x = worldTangent_3.z;
  tmpvar_64.y = worldBinormal_2.z;
  tmpvar_64.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_62;
  xlv_TEXCOORD1 = tmpvar_63;
  xlv_TEXCOORD2 = tmpvar_64;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
in lowp vec3 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in mediump vec4 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec3 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 detailColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture (_DetailTex, xlv_TEXCOORD6.xy);
  detailColor_11 = tmpvar_15;
  diffuseColor_12.xyz = mix (diffuseColor_12.xyz, detailColor_11.xyz, detailColor_11.www);
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_16 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_17;
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_20;
  tmpvar_20 = (_LightMatrix0 * tmpvar_19).xyz;
  lightCoord_5 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = dot (lightCoord_5, lightCoord_5);
  lowp float tmpvar_22;
  tmpvar_22 = (texture (_LightTextureB0, vec2(tmpvar_21)).w * texture (_LightTexture0, lightCoord_5).w);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_18);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_18);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_18);
  lowp vec3 tmpvar_23;
  tmpvar_23 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_23;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_22);
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_26 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tmpvar_9 * tmpvar_1) * diff_26);
  c_25.xyz = tmpvar_28;
  c_25.w = tmpvar_10;
  c_24.w = c_25.w;
  mediump vec3 tmpvar_29;
  tmpvar_29 = c_25.xyz;
  c_24.xyz = tmpvar_29;
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_13;
  highp vec2 tmpvar_14;
  tmpvar_14 = _glesMultiTexCoord2.xy;
  tmpvar_8.xy = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_19;
      highp float fAdherenceScale_25;
      highp vec3 tmpvar_26;
      tmpvar_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_27;
      tmpvar_27 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (tmpvar_27 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_27 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((tmpvar_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        (mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_28.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (_glesVertex.xyz + ((tmpvar_26 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((tmpvar_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((
        ((tmpvar_36.x * tmpvar_36.y) * tmpvar_36.x)
       * tmpvar_36.y) * _ST_WindTurbulences.x));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp vec3 tmpvar_39;
      tmpvar_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_40;
      tmpvar_40 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_41;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (tmpvar_40 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((tmpvar_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      vPos_38 = (vPos_23 + ((tmpvar_39 * 
        (((mix (
          mix (tmpvar_46, fTarget_43, fAmount_42)
        , fTarget_43, fAmount_42) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_18;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_51.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    vPos_47.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_52.x + (tmpvar_52.y * tmpvar_52.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_48)));
    vPos_47 = (normalize(vPos_47) * fLength_49);
    FinalPosition_18 = vPos_47;
  };
  tmpvar_15.xyz = FinalPosition_18;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_54;
  v_54.x = _World2Object[0].x;
  v_54.y = _World2Object[1].x;
  v_54.z = _World2Object[2].x;
  v_54.w = _World2Object[3].x;
  highp vec4 v_55;
  v_55.x = _World2Object[0].y;
  v_55.y = _World2Object[1].y;
  v_55.z = _World2Object[2].y;
  v_55.w = _World2Object[3].y;
  highp vec4 v_56;
  v_56.x = _World2Object[0].z;
  v_56.y = _World2Object[1].z;
  v_56.z = _World2Object[2].z;
  v_56.w = _World2Object[3].z;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(((
    (v_54.xyz * _glesNormal.x)
   + 
    (v_55.xyz * _glesNormal.y)
  ) + (v_56.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_57;
  highp mat3 tmpvar_58;
  tmpvar_58[0] = _Object2World[0].xyz;
  tmpvar_58[1] = _Object2World[1].xyz;
  tmpvar_58[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize((tmpvar_58 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_59;
  lowp vec3 tmpvar_60;
  tmpvar_60 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_61;
  tmpvar_61 = (tmpvar_60 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_61;
  lowp vec3 tmpvar_62;
  tmpvar_62.x = worldTangent_3.x;
  tmpvar_62.y = worldBinormal_2.x;
  tmpvar_62.z = worldNormal_4.x;
  lowp vec3 tmpvar_63;
  tmpvar_63.x = worldTangent_3.y;
  tmpvar_63.y = worldBinormal_2.y;
  tmpvar_63.z = worldNormal_4.y;
  lowp vec3 tmpvar_64;
  tmpvar_64.x = worldTangent_3.z;
  tmpvar_64.y = worldBinormal_2.z;
  tmpvar_64.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_62;
  xlv_TEXCOORD1 = tmpvar_63;
  xlv_TEXCOORD2 = tmpvar_64;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec2 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 detailColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_DetailTex, xlv_TEXCOORD6.xy);
  detailColor_11 = tmpvar_15;
  diffuseColor_12.xyz = mix (diffuseColor_12.xyz, detailColor_11.xyz, detailColor_11.www);
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_16 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_17;
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = xlv_TEXCOORD3;
  highp vec2 tmpvar_20;
  tmpvar_20 = (_LightMatrix0 * tmpvar_19).xy;
  lightCoord_5 = tmpvar_20;
  lowp float tmpvar_21;
  tmpvar_21 = texture2D (_LightTexture0, lightCoord_5).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_18);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_18);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_18);
  lowp vec3 tmpvar_22;
  tmpvar_22 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_22;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_21);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_25 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_9 * tmpvar_1) * diff_25);
  c_24.xyz = tmpvar_27;
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  mediump vec3 tmpvar_28;
  tmpvar_28 = c_24.xyz;
  c_23.xyz = tmpvar_28;
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
in vec4 _glesTANGENT;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out lowp vec3 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out mediump vec4 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_13;
  highp vec2 tmpvar_14;
  tmpvar_14 = _glesMultiTexCoord2.xy;
  tmpvar_8.xy = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_19;
      highp float fAdherenceScale_25;
      highp vec3 tmpvar_26;
      tmpvar_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_27;
      tmpvar_27 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (tmpvar_27 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_27 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((tmpvar_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        (mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_28.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (_glesVertex.xyz + ((tmpvar_26 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((tmpvar_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((
        ((tmpvar_36.x * tmpvar_36.y) * tmpvar_36.x)
       * tmpvar_36.y) * _ST_WindTurbulences.x));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp vec3 tmpvar_39;
      tmpvar_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_40;
      tmpvar_40 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_41;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (tmpvar_40 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((tmpvar_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      vPos_38 = (vPos_23 + ((tmpvar_39 * 
        (((mix (
          mix (tmpvar_46, fTarget_43, fAmount_42)
        , fTarget_43, fAmount_42) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_18;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_51.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    vPos_47.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_52.x + (tmpvar_52.y * tmpvar_52.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_48)));
    vPos_47 = (normalize(vPos_47) * fLength_49);
    FinalPosition_18 = vPos_47;
  };
  tmpvar_15.xyz = FinalPosition_18;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_54;
  v_54.x = _World2Object[0].x;
  v_54.y = _World2Object[1].x;
  v_54.z = _World2Object[2].x;
  v_54.w = _World2Object[3].x;
  highp vec4 v_55;
  v_55.x = _World2Object[0].y;
  v_55.y = _World2Object[1].y;
  v_55.z = _World2Object[2].y;
  v_55.w = _World2Object[3].y;
  highp vec4 v_56;
  v_56.x = _World2Object[0].z;
  v_56.y = _World2Object[1].z;
  v_56.z = _World2Object[2].z;
  v_56.w = _World2Object[3].z;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(((
    (v_54.xyz * _glesNormal.x)
   + 
    (v_55.xyz * _glesNormal.y)
  ) + (v_56.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_57;
  highp mat3 tmpvar_58;
  tmpvar_58[0] = _Object2World[0].xyz;
  tmpvar_58[1] = _Object2World[1].xyz;
  tmpvar_58[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize((tmpvar_58 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_59;
  lowp vec3 tmpvar_60;
  tmpvar_60 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_61;
  tmpvar_61 = (tmpvar_60 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_61;
  lowp vec3 tmpvar_62;
  tmpvar_62.x = worldTangent_3.x;
  tmpvar_62.y = worldBinormal_2.x;
  tmpvar_62.z = worldNormal_4.x;
  lowp vec3 tmpvar_63;
  tmpvar_63.x = worldTangent_3.y;
  tmpvar_63.y = worldBinormal_2.y;
  tmpvar_63.z = worldNormal_4.y;
  lowp vec3 tmpvar_64;
  tmpvar_64.x = worldTangent_3.z;
  tmpvar_64.y = worldBinormal_2.z;
  tmpvar_64.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_62;
  xlv_TEXCOORD1 = tmpvar_63;
  xlv_TEXCOORD2 = tmpvar_64;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
in lowp vec3 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in mediump vec4 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec2 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 detailColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture (_DetailTex, xlv_TEXCOORD6.xy);
  detailColor_11 = tmpvar_15;
  diffuseColor_12.xyz = mix (diffuseColor_12.xyz, detailColor_11.xyz, detailColor_11.www);
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_16 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_17;
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = xlv_TEXCOORD3;
  highp vec2 tmpvar_20;
  tmpvar_20 = (_LightMatrix0 * tmpvar_19).xy;
  lightCoord_5 = tmpvar_20;
  lowp float tmpvar_21;
  tmpvar_21 = texture (_LightTexture0, lightCoord_5).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_18);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_18);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_18);
  lowp vec3 tmpvar_22;
  tmpvar_22 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_22;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_21);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_25 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_9 * tmpvar_1) * diff_25);
  c_24.xyz = tmpvar_27;
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  mediump vec3 tmpvar_28;
  tmpvar_28 = c_24.xyz;
  c_23.xyz = tmpvar_28;
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_8;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10.xy = _glesMultiTexCoord2.zw;
  tmpvar_10.z = _glesMultiTexCoord1.w;
  tmpvar_7 = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_15;
      highp float fAdherenceScale_22;
      highp vec3 tmpvar_23;
      tmpvar_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_24;
      tmpvar_24 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (tmpvar_24 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((tmpvar_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_24 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((tmpvar_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        (mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_25.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((tmpvar_23 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((tmpvar_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((
        ((tmpvar_33.x * tmpvar_33.y) * tmpvar_33.x)
       * tmpvar_33.y) * _ST_WindTurbulences.x));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_12 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp vec3 tmpvar_36;
      tmpvar_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_37;
      tmpvar_37 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_38;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (tmpvar_37 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((tmpvar_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      vPos_35 = (vPos_20 + ((tmpvar_36 * 
        (((mix (
          mix (tmpvar_43, fTarget_40, fAmount_39)
        , fTarget_40, fAmount_39) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_14;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_47;
    tmpvar_47 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    vPos_44.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * (
      ((_ST_WindGlobal.y * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_45)));
    vPos_44 = (normalize(vPos_44) * fLength_46);
    FinalPosition_14 = vPos_44;
  };
  tmpvar_11.xyz = FinalPosition_14;
  tmpvar_4 = tmpvar_5;
  highp vec4 v_51;
  v_51.x = _World2Object[0].x;
  v_51.y = _World2Object[1].x;
  v_51.z = _World2Object[2].x;
  v_51.w = _World2Object[3].x;
  highp vec4 v_52;
  v_52.x = _World2Object[0].y;
  v_52.y = _World2Object[1].y;
  v_52.z = _World2Object[2].y;
  v_52.w = _World2Object[3].y;
  highp vec4 v_53;
  v_53.x = _World2Object[0].z;
  v_53.y = _World2Object[1].z;
  v_53.z = _World2Object[2].z;
  v_53.w = _World2Object[3].z;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(((
    (v_51.xyz * _glesNormal.x)
   + 
    (v_52.xyz * _glesNormal.y)
  ) + (v_53.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_54;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_15;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (_LightMatrix0 * tmpvar_17).xyz;
  lightCoord_4 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_20;
  tmpvar_20 = texture2D (_LightTexture0, vec2(tmpvar_19)).w;
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_21;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_20);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_24 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tmpvar_9 * tmpvar_1) * diff_24);
  c_23.xyz = tmpvar_26;
  c_23.w = tmpvar_10;
  c_22.w = c_23.w;
  mediump vec3 tmpvar_27;
  tmpvar_27 = c_23.xyz;
  c_22.xyz = tmpvar_27;
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_8;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10.xy = _glesMultiTexCoord2.zw;
  tmpvar_10.z = _glesMultiTexCoord1.w;
  tmpvar_7 = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_15;
      highp float fAdherenceScale_22;
      highp vec3 tmpvar_23;
      tmpvar_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_24;
      tmpvar_24 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (tmpvar_24 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((tmpvar_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_24 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((tmpvar_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        (mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_25.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((tmpvar_23 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((tmpvar_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((
        ((tmpvar_33.x * tmpvar_33.y) * tmpvar_33.x)
       * tmpvar_33.y) * _ST_WindTurbulences.x));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_12 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp vec3 tmpvar_36;
      tmpvar_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_37;
      tmpvar_37 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_38;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (tmpvar_37 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((tmpvar_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      vPos_35 = (vPos_20 + ((tmpvar_36 * 
        (((mix (
          mix (tmpvar_43, fTarget_40, fAmount_39)
        , fTarget_40, fAmount_39) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_14;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_47;
    tmpvar_47 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    vPos_44.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * (
      ((_ST_WindGlobal.y * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_45)));
    vPos_44 = (normalize(vPos_44) * fLength_46);
    FinalPosition_14 = vPos_44;
  };
  tmpvar_11.xyz = FinalPosition_14;
  tmpvar_4 = tmpvar_5;
  highp vec4 v_51;
  v_51.x = _World2Object[0].x;
  v_51.y = _World2Object[1].x;
  v_51.z = _World2Object[2].x;
  v_51.w = _World2Object[3].x;
  highp vec4 v_52;
  v_52.x = _World2Object[0].y;
  v_52.y = _World2Object[1].y;
  v_52.z = _World2Object[2].y;
  v_52.w = _World2Object[3].y;
  highp vec4 v_53;
  v_53.x = _World2Object[0].z;
  v_53.y = _World2Object[1].z;
  v_53.z = _World2Object[2].z;
  v_53.w = _World2Object[3].z;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(((
    (v_51.xyz * _glesNormal.x)
   + 
    (v_52.xyz * _glesNormal.y)
  ) + (v_53.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_54;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_15;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (_LightMatrix0 * tmpvar_17).xyz;
  lightCoord_4 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_20;
  tmpvar_20 = texture (_LightTexture0, vec2(tmpvar_19)).w;
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_21;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_20);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_24 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tmpvar_9 * tmpvar_1) * diff_24);
  c_23.xyz = tmpvar_26;
  c_23.w = tmpvar_10;
  c_22.w = c_23.w;
  mediump vec3 tmpvar_27;
  tmpvar_27 = c_23.xyz;
  c_22.xyz = tmpvar_27;
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_8;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10.xy = _glesMultiTexCoord2.zw;
  tmpvar_10.z = _glesMultiTexCoord1.w;
  tmpvar_7 = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_15;
      highp float fAdherenceScale_22;
      highp vec3 tmpvar_23;
      tmpvar_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_24;
      tmpvar_24 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (tmpvar_24 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((tmpvar_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_24 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((tmpvar_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        (mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_25.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((tmpvar_23 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((tmpvar_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((
        ((tmpvar_33.x * tmpvar_33.y) * tmpvar_33.x)
       * tmpvar_33.y) * _ST_WindTurbulences.x));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_12 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp vec3 tmpvar_36;
      tmpvar_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_37;
      tmpvar_37 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_38;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (tmpvar_37 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((tmpvar_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      vPos_35 = (vPos_20 + ((tmpvar_36 * 
        (((mix (
          mix (tmpvar_43, fTarget_40, fAmount_39)
        , fTarget_40, fAmount_39) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_14;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_47;
    tmpvar_47 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    vPos_44.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * (
      ((_ST_WindGlobal.y * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_45)));
    vPos_44 = (normalize(vPos_44) * fLength_46);
    FinalPosition_14 = vPos_44;
  };
  tmpvar_11.xyz = FinalPosition_14;
  tmpvar_4 = tmpvar_5;
  highp vec4 v_51;
  v_51.x = _World2Object[0].x;
  v_51.y = _World2Object[1].x;
  v_51.z = _World2Object[2].x;
  v_51.w = _World2Object[3].x;
  highp vec4 v_52;
  v_52.x = _World2Object[0].y;
  v_52.y = _World2Object[1].y;
  v_52.z = _World2Object[2].y;
  v_52.w = _World2Object[3].y;
  highp vec4 v_53;
  v_53.x = _World2Object[0].z;
  v_53.y = _World2Object[1].z;
  v_53.z = _World2Object[2].z;
  v_53.w = _World2Object[3].z;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(((
    (v_51.xyz * _glesNormal.x)
   + 
    (v_52.xyz * _glesNormal.y)
  ) + (v_53.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_54;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 blendColor_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_10 = tmpvar_14;
  diffuseColor_11.xyz = mix (blendColor_10.xyz, diffuseColor_11.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_15;
  lowp vec3 tmpvar_16;
  tmpvar_16 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_16;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_19 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.xyz = tmpvar_21;
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  mediump vec3 tmpvar_22;
  tmpvar_22 = c_18.xyz;
  c_17.xyz = tmpvar_22;
  c_3.xyz = c_17.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_8;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10.xy = _glesMultiTexCoord2.zw;
  tmpvar_10.z = _glesMultiTexCoord1.w;
  tmpvar_7 = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_15;
      highp float fAdherenceScale_22;
      highp vec3 tmpvar_23;
      tmpvar_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_24;
      tmpvar_24 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (tmpvar_24 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((tmpvar_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_24 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((tmpvar_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        (mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_25.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((tmpvar_23 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((tmpvar_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((
        ((tmpvar_33.x * tmpvar_33.y) * tmpvar_33.x)
       * tmpvar_33.y) * _ST_WindTurbulences.x));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_12 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp vec3 tmpvar_36;
      tmpvar_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_37;
      tmpvar_37 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_38;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (tmpvar_37 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((tmpvar_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      vPos_35 = (vPos_20 + ((tmpvar_36 * 
        (((mix (
          mix (tmpvar_43, fTarget_40, fAmount_39)
        , fTarget_40, fAmount_39) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_14;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_47;
    tmpvar_47 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    vPos_44.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * (
      ((_ST_WindGlobal.y * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_45)));
    vPos_44 = (normalize(vPos_44) * fLength_46);
    FinalPosition_14 = vPos_44;
  };
  tmpvar_11.xyz = FinalPosition_14;
  tmpvar_4 = tmpvar_5;
  highp vec4 v_51;
  v_51.x = _World2Object[0].x;
  v_51.y = _World2Object[1].x;
  v_51.z = _World2Object[2].x;
  v_51.w = _World2Object[3].x;
  highp vec4 v_52;
  v_52.x = _World2Object[0].y;
  v_52.y = _World2Object[1].y;
  v_52.z = _World2Object[2].y;
  v_52.w = _World2Object[3].y;
  highp vec4 v_53;
  v_53.x = _World2Object[0].z;
  v_53.y = _World2Object[1].z;
  v_53.z = _World2Object[2].z;
  v_53.w = _World2Object[3].z;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(((
    (v_51.xyz * _glesNormal.x)
   + 
    (v_52.xyz * _glesNormal.y)
  ) + (v_53.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_54;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 blendColor_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_10 = tmpvar_14;
  diffuseColor_11.xyz = mix (blendColor_10.xyz, diffuseColor_11.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_15;
  lowp vec3 tmpvar_16;
  tmpvar_16 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_16;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_19 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.xyz = tmpvar_21;
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  mediump vec3 tmpvar_22;
  tmpvar_22 = c_18.xyz;
  c_17.xyz = tmpvar_22;
  c_3.xyz = c_17.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "SPOT" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_8;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10.xy = _glesMultiTexCoord2.zw;
  tmpvar_10.z = _glesMultiTexCoord1.w;
  tmpvar_7 = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_15;
      highp float fAdherenceScale_22;
      highp vec3 tmpvar_23;
      tmpvar_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_24;
      tmpvar_24 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (tmpvar_24 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((tmpvar_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_24 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((tmpvar_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        (mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_25.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((tmpvar_23 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((tmpvar_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((
        ((tmpvar_33.x * tmpvar_33.y) * tmpvar_33.x)
       * tmpvar_33.y) * _ST_WindTurbulences.x));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_12 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp vec3 tmpvar_36;
      tmpvar_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_37;
      tmpvar_37 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_38;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (tmpvar_37 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((tmpvar_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      vPos_35 = (vPos_20 + ((tmpvar_36 * 
        (((mix (
          mix (tmpvar_43, fTarget_40, fAmount_39)
        , fTarget_40, fAmount_39) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_14;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_47;
    tmpvar_47 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    vPos_44.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * (
      ((_ST_WindGlobal.y * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_45)));
    vPos_44 = (normalize(vPos_44) * fLength_46);
    FinalPosition_14 = vPos_44;
  };
  tmpvar_11.xyz = FinalPosition_14;
  tmpvar_4 = tmpvar_5;
  highp vec4 v_51;
  v_51.x = _World2Object[0].x;
  v_51.y = _World2Object[1].x;
  v_51.z = _World2Object[2].x;
  v_51.w = _World2Object[3].x;
  highp vec4 v_52;
  v_52.x = _World2Object[0].y;
  v_52.y = _World2Object[1].y;
  v_52.z = _World2Object[2].y;
  v_52.w = _World2Object[3].y;
  highp vec4 v_53;
  v_53.x = _World2Object[0].z;
  v_53.y = _World2Object[1].z;
  v_53.z = _World2Object[2].z;
  v_53.w = _World2Object[3].z;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(((
    (v_51.xyz * _glesNormal.x)
   + 
    (v_52.xyz * _glesNormal.y)
  ) + (v_53.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_54;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 blendColor_12;
  mediump vec4 diffuseColor_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_13 = tmpvar_14;
  mediump float tmpvar_15;
  tmpvar_15 = (diffuseColor_13.w * _Color.w);
  tmpvar_11 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_12 = tmpvar_16;
  diffuseColor_13.xyz = mix (blendColor_12.xyz, diffuseColor_13.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_13.xyz * tmpvar_8.xyz);
  tmpvar_10 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18);
  lightCoord_5 = tmpvar_19;
  lowp vec4 tmpvar_20;
  mediump vec2 P_21;
  P_21 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_20 = texture2D (_LightTexture0, P_21);
  mediump float tmpvar_22;
  tmpvar_22 = dot (lightCoord_5.xyz, lightCoord_5.xyz);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_LightTextureB0, vec2(tmpvar_22));
  mediump float tmpvar_24;
  tmpvar_24 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_20.w) * tmpvar_23.w);
  atten_4 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_25;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_28 = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tmpvar_10 * tmpvar_1) * diff_28);
  c_27.xyz = tmpvar_30;
  c_27.w = tmpvar_11;
  c_26.w = c_27.w;
  mediump vec3 tmpvar_31;
  tmpvar_31 = c_27.xyz;
  c_26.xyz = tmpvar_31;
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SPOT" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_8;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10.xy = _glesMultiTexCoord2.zw;
  tmpvar_10.z = _glesMultiTexCoord1.w;
  tmpvar_7 = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_15;
      highp float fAdherenceScale_22;
      highp vec3 tmpvar_23;
      tmpvar_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_24;
      tmpvar_24 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (tmpvar_24 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((tmpvar_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_24 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((tmpvar_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        (mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_25.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((tmpvar_23 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((tmpvar_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((
        ((tmpvar_33.x * tmpvar_33.y) * tmpvar_33.x)
       * tmpvar_33.y) * _ST_WindTurbulences.x));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_12 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp vec3 tmpvar_36;
      tmpvar_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_37;
      tmpvar_37 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_38;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (tmpvar_37 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((tmpvar_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      vPos_35 = (vPos_20 + ((tmpvar_36 * 
        (((mix (
          mix (tmpvar_43, fTarget_40, fAmount_39)
        , fTarget_40, fAmount_39) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_14;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_47;
    tmpvar_47 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    vPos_44.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * (
      ((_ST_WindGlobal.y * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_45)));
    vPos_44 = (normalize(vPos_44) * fLength_46);
    FinalPosition_14 = vPos_44;
  };
  tmpvar_11.xyz = FinalPosition_14;
  tmpvar_4 = tmpvar_5;
  highp vec4 v_51;
  v_51.x = _World2Object[0].x;
  v_51.y = _World2Object[1].x;
  v_51.z = _World2Object[2].x;
  v_51.w = _World2Object[3].x;
  highp vec4 v_52;
  v_52.x = _World2Object[0].y;
  v_52.y = _World2Object[1].y;
  v_52.z = _World2Object[2].y;
  v_52.w = _World2Object[3].y;
  highp vec4 v_53;
  v_53.x = _World2Object[0].z;
  v_53.y = _World2Object[1].z;
  v_53.z = _World2Object[2].z;
  v_53.w = _World2Object[3].z;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(((
    (v_51.xyz * _glesNormal.x)
   + 
    (v_52.xyz * _glesNormal.y)
  ) + (v_53.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_54;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 blendColor_12;
  mediump vec4 diffuseColor_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_13 = tmpvar_14;
  mediump float tmpvar_15;
  tmpvar_15 = (diffuseColor_13.w * _Color.w);
  tmpvar_11 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_12 = tmpvar_16;
  diffuseColor_13.xyz = mix (blendColor_12.xyz, diffuseColor_13.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_13.xyz * tmpvar_8.xyz);
  tmpvar_10 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18);
  lightCoord_5 = tmpvar_19;
  lowp vec4 tmpvar_20;
  mediump vec2 P_21;
  P_21 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_20 = texture (_LightTexture0, P_21);
  mediump float tmpvar_22;
  tmpvar_22 = dot (lightCoord_5.xyz, lightCoord_5.xyz);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture (_LightTextureB0, vec2(tmpvar_22));
  mediump float tmpvar_24;
  tmpvar_24 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_20.w) * tmpvar_23.w);
  atten_4 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_25;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_28 = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tmpvar_10 * tmpvar_1) * diff_28);
  c_27.xyz = tmpvar_30;
  c_27.w = tmpvar_11;
  c_26.w = c_27.w;
  mediump vec3 tmpvar_31;
  tmpvar_31 = c_27.xyz;
  c_26.xyz = tmpvar_31;
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_8;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10.xy = _glesMultiTexCoord2.zw;
  tmpvar_10.z = _glesMultiTexCoord1.w;
  tmpvar_7 = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_15;
      highp float fAdherenceScale_22;
      highp vec3 tmpvar_23;
      tmpvar_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_24;
      tmpvar_24 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (tmpvar_24 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((tmpvar_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_24 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((tmpvar_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        (mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_25.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((tmpvar_23 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((tmpvar_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((
        ((tmpvar_33.x * tmpvar_33.y) * tmpvar_33.x)
       * tmpvar_33.y) * _ST_WindTurbulences.x));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_12 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp vec3 tmpvar_36;
      tmpvar_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_37;
      tmpvar_37 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_38;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (tmpvar_37 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((tmpvar_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      vPos_35 = (vPos_20 + ((tmpvar_36 * 
        (((mix (
          mix (tmpvar_43, fTarget_40, fAmount_39)
        , fTarget_40, fAmount_39) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_14;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_47;
    tmpvar_47 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    vPos_44.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * (
      ((_ST_WindGlobal.y * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_45)));
    vPos_44 = (normalize(vPos_44) * fLength_46);
    FinalPosition_14 = vPos_44;
  };
  tmpvar_11.xyz = FinalPosition_14;
  tmpvar_4 = tmpvar_5;
  highp vec4 v_51;
  v_51.x = _World2Object[0].x;
  v_51.y = _World2Object[1].x;
  v_51.z = _World2Object[2].x;
  v_51.w = _World2Object[3].x;
  highp vec4 v_52;
  v_52.x = _World2Object[0].y;
  v_52.y = _World2Object[1].y;
  v_52.z = _World2Object[2].y;
  v_52.w = _World2Object[3].y;
  highp vec4 v_53;
  v_53.x = _World2Object[0].z;
  v_53.y = _World2Object[1].z;
  v_53.z = _World2Object[2].z;
  v_53.w = _World2Object[3].z;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(((
    (v_51.xyz * _glesNormal.x)
   + 
    (v_52.xyz * _glesNormal.y)
  ) + (v_53.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_54;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_15;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (_LightMatrix0 * tmpvar_17).xyz;
  lightCoord_4 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_20;
  tmpvar_20 = (texture2D (_LightTextureB0, vec2(tmpvar_19)).w * textureCube (_LightTexture0, lightCoord_4).w);
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_21;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_20);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_24 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tmpvar_9 * tmpvar_1) * diff_24);
  c_23.xyz = tmpvar_26;
  c_23.w = tmpvar_10;
  c_22.w = c_23.w;
  mediump vec3 tmpvar_27;
  tmpvar_27 = c_23.xyz;
  c_22.xyz = tmpvar_27;
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_8;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10.xy = _glesMultiTexCoord2.zw;
  tmpvar_10.z = _glesMultiTexCoord1.w;
  tmpvar_7 = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_15;
      highp float fAdherenceScale_22;
      highp vec3 tmpvar_23;
      tmpvar_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_24;
      tmpvar_24 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (tmpvar_24 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((tmpvar_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_24 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((tmpvar_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        (mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_25.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((tmpvar_23 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((tmpvar_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((
        ((tmpvar_33.x * tmpvar_33.y) * tmpvar_33.x)
       * tmpvar_33.y) * _ST_WindTurbulences.x));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_12 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp vec3 tmpvar_36;
      tmpvar_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_37;
      tmpvar_37 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_38;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (tmpvar_37 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((tmpvar_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      vPos_35 = (vPos_20 + ((tmpvar_36 * 
        (((mix (
          mix (tmpvar_43, fTarget_40, fAmount_39)
        , fTarget_40, fAmount_39) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_14;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_47;
    tmpvar_47 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    vPos_44.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * (
      ((_ST_WindGlobal.y * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_45)));
    vPos_44 = (normalize(vPos_44) * fLength_46);
    FinalPosition_14 = vPos_44;
  };
  tmpvar_11.xyz = FinalPosition_14;
  tmpvar_4 = tmpvar_5;
  highp vec4 v_51;
  v_51.x = _World2Object[0].x;
  v_51.y = _World2Object[1].x;
  v_51.z = _World2Object[2].x;
  v_51.w = _World2Object[3].x;
  highp vec4 v_52;
  v_52.x = _World2Object[0].y;
  v_52.y = _World2Object[1].y;
  v_52.z = _World2Object[2].y;
  v_52.w = _World2Object[3].y;
  highp vec4 v_53;
  v_53.x = _World2Object[0].z;
  v_53.y = _World2Object[1].z;
  v_53.z = _World2Object[2].z;
  v_53.w = _World2Object[3].z;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(((
    (v_51.xyz * _glesNormal.x)
   + 
    (v_52.xyz * _glesNormal.y)
  ) + (v_53.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_54;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_15;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (_LightMatrix0 * tmpvar_17).xyz;
  lightCoord_4 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_20;
  tmpvar_20 = (texture (_LightTextureB0, vec2(tmpvar_19)).w * texture (_LightTexture0, lightCoord_4).w);
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_21;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_20);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_24 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tmpvar_9 * tmpvar_1) * diff_24);
  c_23.xyz = tmpvar_26;
  c_23.w = tmpvar_10;
  c_22.w = c_23.w;
  mediump vec3 tmpvar_27;
  tmpvar_27 = c_23.xyz;
  c_22.xyz = tmpvar_27;
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_8;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10.xy = _glesMultiTexCoord2.zw;
  tmpvar_10.z = _glesMultiTexCoord1.w;
  tmpvar_7 = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_15;
      highp float fAdherenceScale_22;
      highp vec3 tmpvar_23;
      tmpvar_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_24;
      tmpvar_24 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (tmpvar_24 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((tmpvar_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_24 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((tmpvar_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        (mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_25.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((tmpvar_23 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((tmpvar_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((
        ((tmpvar_33.x * tmpvar_33.y) * tmpvar_33.x)
       * tmpvar_33.y) * _ST_WindTurbulences.x));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_12 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp vec3 tmpvar_36;
      tmpvar_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_37;
      tmpvar_37 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_38;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (tmpvar_37 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((tmpvar_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      vPos_35 = (vPos_20 + ((tmpvar_36 * 
        (((mix (
          mix (tmpvar_43, fTarget_40, fAmount_39)
        , fTarget_40, fAmount_39) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_14;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_47;
    tmpvar_47 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    vPos_44.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * (
      ((_ST_WindGlobal.y * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_45)));
    vPos_44 = (normalize(vPos_44) * fLength_46);
    FinalPosition_14 = vPos_44;
  };
  tmpvar_11.xyz = FinalPosition_14;
  tmpvar_4 = tmpvar_5;
  highp vec4 v_51;
  v_51.x = _World2Object[0].x;
  v_51.y = _World2Object[1].x;
  v_51.z = _World2Object[2].x;
  v_51.w = _World2Object[3].x;
  highp vec4 v_52;
  v_52.x = _World2Object[0].y;
  v_52.y = _World2Object[1].y;
  v_52.z = _World2Object[2].y;
  v_52.w = _World2Object[3].y;
  highp vec4 v_53;
  v_53.x = _World2Object[0].z;
  v_53.y = _World2Object[1].z;
  v_53.z = _World2Object[2].z;
  v_53.w = _World2Object[3].z;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(((
    (v_51.xyz * _glesNormal.x)
   + 
    (v_52.xyz * _glesNormal.y)
  ) + (v_53.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_54;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec2 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_15;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_18;
  tmpvar_18 = (_LightMatrix0 * tmpvar_17).xy;
  lightCoord_4 = tmpvar_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, lightCoord_4).w;
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_20;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_19);
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_23 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tmpvar_9 * tmpvar_1) * diff_23);
  c_22.xyz = tmpvar_25;
  c_22.w = tmpvar_10;
  c_21.w = c_22.w;
  mediump vec3 tmpvar_26;
  tmpvar_26 = c_22.xyz;
  c_21.xyz = tmpvar_26;
  c_3.xyz = c_21.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_8;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10.xy = _glesMultiTexCoord2.zw;
  tmpvar_10.z = _glesMultiTexCoord1.w;
  tmpvar_7 = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_15;
      highp float fAdherenceScale_22;
      highp vec3 tmpvar_23;
      tmpvar_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_24;
      tmpvar_24 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (tmpvar_24 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((tmpvar_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_24 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((tmpvar_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        (mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_25.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((tmpvar_23 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((tmpvar_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((
        ((tmpvar_33.x * tmpvar_33.y) * tmpvar_33.x)
       * tmpvar_33.y) * _ST_WindTurbulences.x));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_12 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp vec3 tmpvar_36;
      tmpvar_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_37;
      tmpvar_37 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_38;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (tmpvar_37 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((tmpvar_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      vPos_35 = (vPos_20 + ((tmpvar_36 * 
        (((mix (
          mix (tmpvar_43, fTarget_40, fAmount_39)
        , fTarget_40, fAmount_39) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_14;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_47;
    tmpvar_47 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    vPos_44.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * (
      ((_ST_WindGlobal.y * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_45)));
    vPos_44 = (normalize(vPos_44) * fLength_46);
    FinalPosition_14 = vPos_44;
  };
  tmpvar_11.xyz = FinalPosition_14;
  tmpvar_4 = tmpvar_5;
  highp vec4 v_51;
  v_51.x = _World2Object[0].x;
  v_51.y = _World2Object[1].x;
  v_51.z = _World2Object[2].x;
  v_51.w = _World2Object[3].x;
  highp vec4 v_52;
  v_52.x = _World2Object[0].y;
  v_52.y = _World2Object[1].y;
  v_52.z = _World2Object[2].y;
  v_52.w = _World2Object[3].y;
  highp vec4 v_53;
  v_53.x = _World2Object[0].z;
  v_53.y = _World2Object[1].z;
  v_53.z = _World2Object[2].z;
  v_53.w = _World2Object[3].z;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(((
    (v_51.xyz * _glesNormal.x)
   + 
    (v_52.xyz * _glesNormal.y)
  ) + (v_53.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_54;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec2 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_15;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_18;
  tmpvar_18 = (_LightMatrix0 * tmpvar_17).xy;
  lightCoord_4 = tmpvar_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture (_LightTexture0, lightCoord_4).w;
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_20;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_19);
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_23 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tmpvar_9 * tmpvar_1) * diff_23);
  c_22.xyz = tmpvar_25;
  c_22.w = tmpvar_10;
  c_21.w = c_22.w;
  mediump vec3 tmpvar_26;
  tmpvar_26 = c_22.xyz;
  c_21.xyz = tmpvar_26;
  c_3.xyz = c_21.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_8;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_9;
  highp float cse_10;
  cse_10 = _Object2World[3].x;
  highp float cse_11;
  cse_11 = _Object2World[3].y;
  highp float tmpvar_12;
  tmpvar_12 = clamp (((
    fract(((cse_10 + cse_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_7 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fAdherenceScale_24;
      highp vec3 tmpvar_25;
      tmpvar_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_26;
      tmpvar_26 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (tmpvar_26 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((tmpvar_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_26 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((tmpvar_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        (mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_27.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((tmpvar_25 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((tmpvar_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((
        ((tmpvar_35.x * tmpvar_35.y) * tmpvar_35.x)
       * tmpvar_35.y) * _ST_WindTurbulences.x));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp vec3 tmpvar_38;
      tmpvar_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_39;
      tmpvar_39 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_40;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (tmpvar_39 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((tmpvar_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      vPos_37 = (vPos_22 + ((tmpvar_38 * 
        (((mix (
          mix (tmpvar_45, fTarget_42, fAmount_41)
        , fTarget_42, fAmount_41) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_17;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (cse_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (cse_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    vPos_46.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * (
      ((_ST_WindGlobal.y * (tmpvar_51.x + (tmpvar_51.y * tmpvar_51.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_47)));
    vPos_46 = (normalize(vPos_46) * fLength_48);
    FinalPosition_17 = vPos_46;
  };
  tmpvar_14.xyz = FinalPosition_17;
  tmpvar_4 = tmpvar_5;
  highp vec4 v_53;
  v_53.x = _World2Object[0].x;
  v_53.y = _World2Object[1].x;
  v_53.z = _World2Object[2].x;
  v_53.w = _World2Object[3].x;
  highp vec4 v_54;
  v_54.x = _World2Object[0].y;
  v_54.y = _World2Object[1].y;
  v_54.z = _World2Object[2].y;
  v_54.w = _World2Object[3].y;
  highp vec4 v_55;
  v_55.x = _World2Object[0].z;
  v_55.y = _World2Object[1].z;
  v_55.z = _World2Object[2].z;
  v_55.w = _World2Object[3].z;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(((
    (v_53.xyz * _glesNormal.x)
   + 
    (v_54.xyz * _glesNormal.y)
  ) + (v_55.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_56;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_15;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_16 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18).xyz;
  lightCoord_4 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_21;
  tmpvar_21 = texture2D (_LightTexture0, vec2(tmpvar_20)).w;
  lowp vec3 tmpvar_22;
  tmpvar_22 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_22;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_21);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_25 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_9 * tmpvar_1) * diff_25);
  c_24.xyz = tmpvar_27;
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  mediump vec3 tmpvar_28;
  tmpvar_28 = c_24.xyz;
  c_23.xyz = tmpvar_28;
  c_3.xyz = c_23.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_8;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_9;
  highp float cse_10;
  cse_10 = _Object2World[3].x;
  highp float cse_11;
  cse_11 = _Object2World[3].y;
  highp float tmpvar_12;
  tmpvar_12 = clamp (((
    fract(((cse_10 + cse_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_7 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fAdherenceScale_24;
      highp vec3 tmpvar_25;
      tmpvar_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_26;
      tmpvar_26 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (tmpvar_26 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((tmpvar_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_26 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((tmpvar_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        (mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_27.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((tmpvar_25 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((tmpvar_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((
        ((tmpvar_35.x * tmpvar_35.y) * tmpvar_35.x)
       * tmpvar_35.y) * _ST_WindTurbulences.x));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp vec3 tmpvar_38;
      tmpvar_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_39;
      tmpvar_39 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_40;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (tmpvar_39 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((tmpvar_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      vPos_37 = (vPos_22 + ((tmpvar_38 * 
        (((mix (
          mix (tmpvar_45, fTarget_42, fAmount_41)
        , fTarget_42, fAmount_41) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_17;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (cse_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (cse_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    vPos_46.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * (
      ((_ST_WindGlobal.y * (tmpvar_51.x + (tmpvar_51.y * tmpvar_51.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_47)));
    vPos_46 = (normalize(vPos_46) * fLength_48);
    FinalPosition_17 = vPos_46;
  };
  tmpvar_14.xyz = FinalPosition_17;
  tmpvar_4 = tmpvar_5;
  highp vec4 v_53;
  v_53.x = _World2Object[0].x;
  v_53.y = _World2Object[1].x;
  v_53.z = _World2Object[2].x;
  v_53.w = _World2Object[3].x;
  highp vec4 v_54;
  v_54.x = _World2Object[0].y;
  v_54.y = _World2Object[1].y;
  v_54.z = _World2Object[2].y;
  v_54.w = _World2Object[3].y;
  highp vec4 v_55;
  v_55.x = _World2Object[0].z;
  v_55.y = _World2Object[1].z;
  v_55.z = _World2Object[2].z;
  v_55.w = _World2Object[3].z;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(((
    (v_53.xyz * _glesNormal.x)
   + 
    (v_54.xyz * _glesNormal.y)
  ) + (v_55.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_56;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_15;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_16 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18).xyz;
  lightCoord_4 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_21;
  tmpvar_21 = texture (_LightTexture0, vec2(tmpvar_20)).w;
  lowp vec3 tmpvar_22;
  tmpvar_22 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_22;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_21);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_25 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_9 * tmpvar_1) * diff_25);
  c_24.xyz = tmpvar_27;
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  mediump vec3 tmpvar_28;
  tmpvar_28 = c_24.xyz;
  c_23.xyz = tmpvar_28;
  c_3.xyz = c_23.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_8;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_9;
  highp float cse_10;
  cse_10 = _Object2World[3].x;
  highp float cse_11;
  cse_11 = _Object2World[3].y;
  highp float tmpvar_12;
  tmpvar_12 = clamp (((
    fract(((cse_10 + cse_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_7 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fAdherenceScale_24;
      highp vec3 tmpvar_25;
      tmpvar_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_26;
      tmpvar_26 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (tmpvar_26 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((tmpvar_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_26 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((tmpvar_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        (mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_27.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((tmpvar_25 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((tmpvar_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((
        ((tmpvar_35.x * tmpvar_35.y) * tmpvar_35.x)
       * tmpvar_35.y) * _ST_WindTurbulences.x));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp vec3 tmpvar_38;
      tmpvar_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_39;
      tmpvar_39 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_40;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (tmpvar_39 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((tmpvar_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      vPos_37 = (vPos_22 + ((tmpvar_38 * 
        (((mix (
          mix (tmpvar_45, fTarget_42, fAmount_41)
        , fTarget_42, fAmount_41) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_17;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (cse_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (cse_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    vPos_46.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * (
      ((_ST_WindGlobal.y * (tmpvar_51.x + (tmpvar_51.y * tmpvar_51.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_47)));
    vPos_46 = (normalize(vPos_46) * fLength_48);
    FinalPosition_17 = vPos_46;
  };
  tmpvar_14.xyz = FinalPosition_17;
  tmpvar_4 = tmpvar_5;
  highp vec4 v_53;
  v_53.x = _World2Object[0].x;
  v_53.y = _World2Object[1].x;
  v_53.z = _World2Object[2].x;
  v_53.w = _World2Object[3].x;
  highp vec4 v_54;
  v_54.x = _World2Object[0].y;
  v_54.y = _World2Object[1].y;
  v_54.z = _World2Object[2].y;
  v_54.w = _World2Object[3].y;
  highp vec4 v_55;
  v_55.x = _World2Object[0].z;
  v_55.y = _World2Object[1].z;
  v_55.z = _World2Object[2].z;
  v_55.w = _World2Object[3].z;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(((
    (v_53.xyz * _glesNormal.x)
   + 
    (v_54.xyz * _glesNormal.y)
  ) + (v_55.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_56;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 blendColor_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_10 = tmpvar_14;
  diffuseColor_11.xyz = mix (blendColor_10.xyz, diffuseColor_11.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_17;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_20 = tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = ((tmpvar_8 * tmpvar_1) * diff_20);
  c_19.xyz = tmpvar_22;
  c_19.w = tmpvar_9;
  c_18.w = c_19.w;
  mediump vec3 tmpvar_23;
  tmpvar_23 = c_19.xyz;
  c_18.xyz = tmpvar_23;
  c_3.xyz = c_18.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_8;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_9;
  highp float cse_10;
  cse_10 = _Object2World[3].x;
  highp float cse_11;
  cse_11 = _Object2World[3].y;
  highp float tmpvar_12;
  tmpvar_12 = clamp (((
    fract(((cse_10 + cse_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_7 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fAdherenceScale_24;
      highp vec3 tmpvar_25;
      tmpvar_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_26;
      tmpvar_26 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (tmpvar_26 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((tmpvar_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_26 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((tmpvar_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        (mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_27.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((tmpvar_25 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((tmpvar_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((
        ((tmpvar_35.x * tmpvar_35.y) * tmpvar_35.x)
       * tmpvar_35.y) * _ST_WindTurbulences.x));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp vec3 tmpvar_38;
      tmpvar_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_39;
      tmpvar_39 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_40;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (tmpvar_39 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((tmpvar_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      vPos_37 = (vPos_22 + ((tmpvar_38 * 
        (((mix (
          mix (tmpvar_45, fTarget_42, fAmount_41)
        , fTarget_42, fAmount_41) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_17;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (cse_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (cse_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    vPos_46.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * (
      ((_ST_WindGlobal.y * (tmpvar_51.x + (tmpvar_51.y * tmpvar_51.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_47)));
    vPos_46 = (normalize(vPos_46) * fLength_48);
    FinalPosition_17 = vPos_46;
  };
  tmpvar_14.xyz = FinalPosition_17;
  tmpvar_4 = tmpvar_5;
  highp vec4 v_53;
  v_53.x = _World2Object[0].x;
  v_53.y = _World2Object[1].x;
  v_53.z = _World2Object[2].x;
  v_53.w = _World2Object[3].x;
  highp vec4 v_54;
  v_54.x = _World2Object[0].y;
  v_54.y = _World2Object[1].y;
  v_54.z = _World2Object[2].y;
  v_54.w = _World2Object[3].y;
  highp vec4 v_55;
  v_55.x = _World2Object[0].z;
  v_55.y = _World2Object[1].z;
  v_55.z = _World2Object[2].z;
  v_55.w = _World2Object[3].z;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(((
    (v_53.xyz * _glesNormal.x)
   + 
    (v_54.xyz * _glesNormal.y)
  ) + (v_55.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_56;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 blendColor_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_10 = tmpvar_14;
  diffuseColor_11.xyz = mix (blendColor_10.xyz, diffuseColor_11.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_17;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_20 = tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = ((tmpvar_8 * tmpvar_1) * diff_20);
  c_19.xyz = tmpvar_22;
  c_19.w = tmpvar_9;
  c_18.w = c_19.w;
  mediump vec3 tmpvar_23;
  tmpvar_23 = c_19.xyz;
  c_18.xyz = tmpvar_23;
  c_3.xyz = c_18.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "SPOT" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_8;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_9;
  highp float cse_10;
  cse_10 = _Object2World[3].x;
  highp float cse_11;
  cse_11 = _Object2World[3].y;
  highp float tmpvar_12;
  tmpvar_12 = clamp (((
    fract(((cse_10 + cse_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_7 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fAdherenceScale_24;
      highp vec3 tmpvar_25;
      tmpvar_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_26;
      tmpvar_26 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (tmpvar_26 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((tmpvar_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_26 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((tmpvar_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        (mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_27.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((tmpvar_25 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((tmpvar_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((
        ((tmpvar_35.x * tmpvar_35.y) * tmpvar_35.x)
       * tmpvar_35.y) * _ST_WindTurbulences.x));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp vec3 tmpvar_38;
      tmpvar_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_39;
      tmpvar_39 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_40;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (tmpvar_39 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((tmpvar_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      vPos_37 = (vPos_22 + ((tmpvar_38 * 
        (((mix (
          mix (tmpvar_45, fTarget_42, fAmount_41)
        , fTarget_42, fAmount_41) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_17;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (cse_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (cse_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    vPos_46.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * (
      ((_ST_WindGlobal.y * (tmpvar_51.x + (tmpvar_51.y * tmpvar_51.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_47)));
    vPos_46 = (normalize(vPos_46) * fLength_48);
    FinalPosition_17 = vPos_46;
  };
  tmpvar_14.xyz = FinalPosition_17;
  tmpvar_4 = tmpvar_5;
  highp vec4 v_53;
  v_53.x = _World2Object[0].x;
  v_53.y = _World2Object[1].x;
  v_53.z = _World2Object[2].x;
  v_53.w = _World2Object[3].x;
  highp vec4 v_54;
  v_54.x = _World2Object[0].y;
  v_54.y = _World2Object[1].y;
  v_54.z = _World2Object[2].y;
  v_54.w = _World2Object[3].y;
  highp vec4 v_55;
  v_55.x = _World2Object[0].z;
  v_55.y = _World2Object[1].z;
  v_55.z = _World2Object[2].z;
  v_55.w = _World2Object[3].z;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(((
    (v_53.xyz * _glesNormal.x)
   + 
    (v_54.xyz * _glesNormal.y)
  ) + (v_55.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_56;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 blendColor_12;
  mediump vec4 diffuseColor_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_13 = tmpvar_14;
  mediump float tmpvar_15;
  tmpvar_15 = (diffuseColor_13.w * _Color.w);
  tmpvar_11 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_12 = tmpvar_16;
  diffuseColor_13.xyz = mix (blendColor_12.xyz, diffuseColor_13.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_13.xyz = clamp ((tmpvar_17 * (
    ((max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_18;
  tmpvar_18 = (diffuseColor_13.xyz * tmpvar_8.xyz);
  tmpvar_10 = tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_20;
  tmpvar_20 = (_LightMatrix0 * tmpvar_19);
  lightCoord_5 = tmpvar_20;
  lowp vec4 tmpvar_21;
  mediump vec2 P_22;
  P_22 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_21 = texture2D (_LightTexture0, P_22);
  mediump float tmpvar_23;
  tmpvar_23 = dot (lightCoord_5.xyz, lightCoord_5.xyz);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTextureB0, vec2(tmpvar_23));
  mediump float tmpvar_25;
  tmpvar_25 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_21.w) * tmpvar_24.w);
  atten_4 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_26;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_29 = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tmpvar_10 * tmpvar_1) * diff_29);
  c_28.xyz = tmpvar_31;
  c_28.w = tmpvar_11;
  c_27.w = c_28.w;
  mediump vec3 tmpvar_32;
  tmpvar_32 = c_28.xyz;
  c_27.xyz = tmpvar_32;
  c_3.xyz = c_27.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SPOT" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_8;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_9;
  highp float cse_10;
  cse_10 = _Object2World[3].x;
  highp float cse_11;
  cse_11 = _Object2World[3].y;
  highp float tmpvar_12;
  tmpvar_12 = clamp (((
    fract(((cse_10 + cse_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_7 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fAdherenceScale_24;
      highp vec3 tmpvar_25;
      tmpvar_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_26;
      tmpvar_26 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (tmpvar_26 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((tmpvar_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_26 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((tmpvar_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        (mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_27.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((tmpvar_25 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((tmpvar_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((
        ((tmpvar_35.x * tmpvar_35.y) * tmpvar_35.x)
       * tmpvar_35.y) * _ST_WindTurbulences.x));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp vec3 tmpvar_38;
      tmpvar_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_39;
      tmpvar_39 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_40;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (tmpvar_39 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((tmpvar_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      vPos_37 = (vPos_22 + ((tmpvar_38 * 
        (((mix (
          mix (tmpvar_45, fTarget_42, fAmount_41)
        , fTarget_42, fAmount_41) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_17;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (cse_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (cse_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    vPos_46.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * (
      ((_ST_WindGlobal.y * (tmpvar_51.x + (tmpvar_51.y * tmpvar_51.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_47)));
    vPos_46 = (normalize(vPos_46) * fLength_48);
    FinalPosition_17 = vPos_46;
  };
  tmpvar_14.xyz = FinalPosition_17;
  tmpvar_4 = tmpvar_5;
  highp vec4 v_53;
  v_53.x = _World2Object[0].x;
  v_53.y = _World2Object[1].x;
  v_53.z = _World2Object[2].x;
  v_53.w = _World2Object[3].x;
  highp vec4 v_54;
  v_54.x = _World2Object[0].y;
  v_54.y = _World2Object[1].y;
  v_54.z = _World2Object[2].y;
  v_54.w = _World2Object[3].y;
  highp vec4 v_55;
  v_55.x = _World2Object[0].z;
  v_55.y = _World2Object[1].z;
  v_55.z = _World2Object[2].z;
  v_55.w = _World2Object[3].z;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(((
    (v_53.xyz * _glesNormal.x)
   + 
    (v_54.xyz * _glesNormal.y)
  ) + (v_55.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_56;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 blendColor_12;
  mediump vec4 diffuseColor_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_13 = tmpvar_14;
  mediump float tmpvar_15;
  tmpvar_15 = (diffuseColor_13.w * _Color.w);
  tmpvar_11 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_12 = tmpvar_16;
  diffuseColor_13.xyz = mix (blendColor_12.xyz, diffuseColor_13.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_13.xyz = clamp ((tmpvar_17 * (
    ((max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_18;
  tmpvar_18 = (diffuseColor_13.xyz * tmpvar_8.xyz);
  tmpvar_10 = tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_20;
  tmpvar_20 = (_LightMatrix0 * tmpvar_19);
  lightCoord_5 = tmpvar_20;
  lowp vec4 tmpvar_21;
  mediump vec2 P_22;
  P_22 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_21 = texture (_LightTexture0, P_22);
  mediump float tmpvar_23;
  tmpvar_23 = dot (lightCoord_5.xyz, lightCoord_5.xyz);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture (_LightTextureB0, vec2(tmpvar_23));
  mediump float tmpvar_25;
  tmpvar_25 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_21.w) * tmpvar_24.w);
  atten_4 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_26;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_29 = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tmpvar_10 * tmpvar_1) * diff_29);
  c_28.xyz = tmpvar_31;
  c_28.w = tmpvar_11;
  c_27.w = c_28.w;
  mediump vec3 tmpvar_32;
  tmpvar_32 = c_28.xyz;
  c_27.xyz = tmpvar_32;
  c_3.xyz = c_27.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_8;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_9;
  highp float cse_10;
  cse_10 = _Object2World[3].x;
  highp float cse_11;
  cse_11 = _Object2World[3].y;
  highp float tmpvar_12;
  tmpvar_12 = clamp (((
    fract(((cse_10 + cse_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_7 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fAdherenceScale_24;
      highp vec3 tmpvar_25;
      tmpvar_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_26;
      tmpvar_26 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (tmpvar_26 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((tmpvar_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_26 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((tmpvar_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        (mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_27.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((tmpvar_25 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((tmpvar_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((
        ((tmpvar_35.x * tmpvar_35.y) * tmpvar_35.x)
       * tmpvar_35.y) * _ST_WindTurbulences.x));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp vec3 tmpvar_38;
      tmpvar_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_39;
      tmpvar_39 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_40;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (tmpvar_39 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((tmpvar_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      vPos_37 = (vPos_22 + ((tmpvar_38 * 
        (((mix (
          mix (tmpvar_45, fTarget_42, fAmount_41)
        , fTarget_42, fAmount_41) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_17;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (cse_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (cse_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    vPos_46.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * (
      ((_ST_WindGlobal.y * (tmpvar_51.x + (tmpvar_51.y * tmpvar_51.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_47)));
    vPos_46 = (normalize(vPos_46) * fLength_48);
    FinalPosition_17 = vPos_46;
  };
  tmpvar_14.xyz = FinalPosition_17;
  tmpvar_4 = tmpvar_5;
  highp vec4 v_53;
  v_53.x = _World2Object[0].x;
  v_53.y = _World2Object[1].x;
  v_53.z = _World2Object[2].x;
  v_53.w = _World2Object[3].x;
  highp vec4 v_54;
  v_54.x = _World2Object[0].y;
  v_54.y = _World2Object[1].y;
  v_54.z = _World2Object[2].y;
  v_54.w = _World2Object[3].y;
  highp vec4 v_55;
  v_55.x = _World2Object[0].z;
  v_55.y = _World2Object[1].z;
  v_55.z = _World2Object[2].z;
  v_55.w = _World2Object[3].z;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(((
    (v_53.xyz * _glesNormal.x)
   + 
    (v_54.xyz * _glesNormal.y)
  ) + (v_55.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_56;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_15;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_16 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18).xyz;
  lightCoord_4 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_21;
  tmpvar_21 = (texture2D (_LightTextureB0, vec2(tmpvar_20)).w * textureCube (_LightTexture0, lightCoord_4).w);
  lowp vec3 tmpvar_22;
  tmpvar_22 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_22;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_21);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_25 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_9 * tmpvar_1) * diff_25);
  c_24.xyz = tmpvar_27;
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  mediump vec3 tmpvar_28;
  tmpvar_28 = c_24.xyz;
  c_23.xyz = tmpvar_28;
  c_3.xyz = c_23.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_8;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_9;
  highp float cse_10;
  cse_10 = _Object2World[3].x;
  highp float cse_11;
  cse_11 = _Object2World[3].y;
  highp float tmpvar_12;
  tmpvar_12 = clamp (((
    fract(((cse_10 + cse_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_7 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fAdherenceScale_24;
      highp vec3 tmpvar_25;
      tmpvar_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_26;
      tmpvar_26 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (tmpvar_26 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((tmpvar_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_26 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((tmpvar_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        (mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_27.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((tmpvar_25 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((tmpvar_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((
        ((tmpvar_35.x * tmpvar_35.y) * tmpvar_35.x)
       * tmpvar_35.y) * _ST_WindTurbulences.x));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp vec3 tmpvar_38;
      tmpvar_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_39;
      tmpvar_39 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_40;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (tmpvar_39 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((tmpvar_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      vPos_37 = (vPos_22 + ((tmpvar_38 * 
        (((mix (
          mix (tmpvar_45, fTarget_42, fAmount_41)
        , fTarget_42, fAmount_41) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_17;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (cse_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (cse_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    vPos_46.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * (
      ((_ST_WindGlobal.y * (tmpvar_51.x + (tmpvar_51.y * tmpvar_51.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_47)));
    vPos_46 = (normalize(vPos_46) * fLength_48);
    FinalPosition_17 = vPos_46;
  };
  tmpvar_14.xyz = FinalPosition_17;
  tmpvar_4 = tmpvar_5;
  highp vec4 v_53;
  v_53.x = _World2Object[0].x;
  v_53.y = _World2Object[1].x;
  v_53.z = _World2Object[2].x;
  v_53.w = _World2Object[3].x;
  highp vec4 v_54;
  v_54.x = _World2Object[0].y;
  v_54.y = _World2Object[1].y;
  v_54.z = _World2Object[2].y;
  v_54.w = _World2Object[3].y;
  highp vec4 v_55;
  v_55.x = _World2Object[0].z;
  v_55.y = _World2Object[1].z;
  v_55.z = _World2Object[2].z;
  v_55.w = _World2Object[3].z;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(((
    (v_53.xyz * _glesNormal.x)
   + 
    (v_54.xyz * _glesNormal.y)
  ) + (v_55.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_56;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_15;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_16 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18).xyz;
  lightCoord_4 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_21;
  tmpvar_21 = (texture (_LightTextureB0, vec2(tmpvar_20)).w * texture (_LightTexture0, lightCoord_4).w);
  lowp vec3 tmpvar_22;
  tmpvar_22 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_22;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_21);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_25 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_9 * tmpvar_1) * diff_25);
  c_24.xyz = tmpvar_27;
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  mediump vec3 tmpvar_28;
  tmpvar_28 = c_24.xyz;
  c_23.xyz = tmpvar_28;
  c_3.xyz = c_23.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_8;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_9;
  highp float cse_10;
  cse_10 = _Object2World[3].x;
  highp float cse_11;
  cse_11 = _Object2World[3].y;
  highp float tmpvar_12;
  tmpvar_12 = clamp (((
    fract(((cse_10 + cse_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_7 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fAdherenceScale_24;
      highp vec3 tmpvar_25;
      tmpvar_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_26;
      tmpvar_26 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (tmpvar_26 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((tmpvar_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_26 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((tmpvar_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        (mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_27.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((tmpvar_25 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((tmpvar_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((
        ((tmpvar_35.x * tmpvar_35.y) * tmpvar_35.x)
       * tmpvar_35.y) * _ST_WindTurbulences.x));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp vec3 tmpvar_38;
      tmpvar_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_39;
      tmpvar_39 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_40;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (tmpvar_39 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((tmpvar_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      vPos_37 = (vPos_22 + ((tmpvar_38 * 
        (((mix (
          mix (tmpvar_45, fTarget_42, fAmount_41)
        , fTarget_42, fAmount_41) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_17;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (cse_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (cse_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    vPos_46.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * (
      ((_ST_WindGlobal.y * (tmpvar_51.x + (tmpvar_51.y * tmpvar_51.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_47)));
    vPos_46 = (normalize(vPos_46) * fLength_48);
    FinalPosition_17 = vPos_46;
  };
  tmpvar_14.xyz = FinalPosition_17;
  tmpvar_4 = tmpvar_5;
  highp vec4 v_53;
  v_53.x = _World2Object[0].x;
  v_53.y = _World2Object[1].x;
  v_53.z = _World2Object[2].x;
  v_53.w = _World2Object[3].x;
  highp vec4 v_54;
  v_54.x = _World2Object[0].y;
  v_54.y = _World2Object[1].y;
  v_54.z = _World2Object[2].y;
  v_54.w = _World2Object[3].y;
  highp vec4 v_55;
  v_55.x = _World2Object[0].z;
  v_55.y = _World2Object[1].z;
  v_55.z = _World2Object[2].z;
  v_55.w = _World2Object[3].z;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(((
    (v_53.xyz * _glesNormal.x)
   + 
    (v_54.xyz * _glesNormal.y)
  ) + (v_55.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_56;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec2 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_15;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_16 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18).xy;
  lightCoord_4 = tmpvar_19;
  lowp float tmpvar_20;
  tmpvar_20 = texture2D (_LightTexture0, lightCoord_4).w;
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_21;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_20);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_24 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tmpvar_9 * tmpvar_1) * diff_24);
  c_23.xyz = tmpvar_26;
  c_23.w = tmpvar_10;
  c_22.w = c_23.w;
  mediump vec3 tmpvar_27;
  tmpvar_27 = c_23.xyz;
  c_22.xyz = tmpvar_27;
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_8;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_9;
  highp float cse_10;
  cse_10 = _Object2World[3].x;
  highp float cse_11;
  cse_11 = _Object2World[3].y;
  highp float tmpvar_12;
  tmpvar_12 = clamp (((
    fract(((cse_10 + cse_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_7 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fAdherenceScale_24;
      highp vec3 tmpvar_25;
      tmpvar_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_26;
      tmpvar_26 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (tmpvar_26 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((tmpvar_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_26 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((tmpvar_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        (mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_27.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((tmpvar_25 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((tmpvar_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((
        ((tmpvar_35.x * tmpvar_35.y) * tmpvar_35.x)
       * tmpvar_35.y) * _ST_WindTurbulences.x));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp vec3 tmpvar_38;
      tmpvar_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_39;
      tmpvar_39 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_40;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (tmpvar_39 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((tmpvar_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      vPos_37 = (vPos_22 + ((tmpvar_38 * 
        (((mix (
          mix (tmpvar_45, fTarget_42, fAmount_41)
        , fTarget_42, fAmount_41) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_17;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (cse_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (cse_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    vPos_46.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * (
      ((_ST_WindGlobal.y * (tmpvar_51.x + (tmpvar_51.y * tmpvar_51.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_47)));
    vPos_46 = (normalize(vPos_46) * fLength_48);
    FinalPosition_17 = vPos_46;
  };
  tmpvar_14.xyz = FinalPosition_17;
  tmpvar_4 = tmpvar_5;
  highp vec4 v_53;
  v_53.x = _World2Object[0].x;
  v_53.y = _World2Object[1].x;
  v_53.z = _World2Object[2].x;
  v_53.w = _World2Object[3].x;
  highp vec4 v_54;
  v_54.x = _World2Object[0].y;
  v_54.y = _World2Object[1].y;
  v_54.z = _World2Object[2].y;
  v_54.w = _World2Object[3].y;
  highp vec4 v_55;
  v_55.x = _World2Object[0].z;
  v_55.y = _World2Object[1].z;
  v_55.z = _World2Object[2].z;
  v_55.w = _World2Object[3].z;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(((
    (v_53.xyz * _glesNormal.x)
   + 
    (v_54.xyz * _glesNormal.y)
  ) + (v_55.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_56;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec2 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_15;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_16 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18).xy;
  lightCoord_4 = tmpvar_19;
  lowp float tmpvar_20;
  tmpvar_20 = texture (_LightTexture0, lightCoord_4).w;
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_21;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_20);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_24 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tmpvar_9 * tmpvar_1) * diff_24);
  c_23.xyz = tmpvar_26;
  c_23.w = tmpvar_10;
  c_22.w = c_23.w;
  mediump vec3 tmpvar_27;
  tmpvar_27 = c_23.xyz;
  c_22.xyz = tmpvar_27;
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14.xy = _glesMultiTexCoord2.zw;
  tmpvar_14.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_19;
      highp float fAdherenceScale_25;
      highp vec3 tmpvar_26;
      tmpvar_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_27;
      tmpvar_27 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (tmpvar_27 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_27 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((tmpvar_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        (mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_28.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (_glesVertex.xyz + ((tmpvar_26 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((tmpvar_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((
        ((tmpvar_36.x * tmpvar_36.y) * tmpvar_36.x)
       * tmpvar_36.y) * _ST_WindTurbulences.x));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp vec3 tmpvar_39;
      tmpvar_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_40;
      tmpvar_40 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_41;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (tmpvar_40 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((tmpvar_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      vPos_38 = (vPos_23 + ((tmpvar_39 * 
        (((mix (
          mix (tmpvar_46, fTarget_43, fAmount_42)
        , fTarget_43, fAmount_42) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_18;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_51.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    vPos_47.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_52.x + (tmpvar_52.y * tmpvar_52.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_48)));
    vPos_47 = (normalize(vPos_47) * fLength_49);
    FinalPosition_18 = vPos_47;
  };
  tmpvar_15.xyz = FinalPosition_18;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_54;
  v_54.x = _World2Object[0].x;
  v_54.y = _World2Object[1].x;
  v_54.z = _World2Object[2].x;
  v_54.w = _World2Object[3].x;
  highp vec4 v_55;
  v_55.x = _World2Object[0].y;
  v_55.y = _World2Object[1].y;
  v_55.z = _World2Object[2].y;
  v_55.w = _World2Object[3].y;
  highp vec4 v_56;
  v_56.x = _World2Object[0].z;
  v_56.y = _World2Object[1].z;
  v_56.z = _World2Object[2].z;
  v_56.w = _World2Object[3].z;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(((
    (v_54.xyz * _glesNormal.x)
   + 
    (v_55.xyz * _glesNormal.y)
  ) + (v_56.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_57;
  highp mat3 tmpvar_58;
  tmpvar_58[0] = _Object2World[0].xyz;
  tmpvar_58[1] = _Object2World[1].xyz;
  tmpvar_58[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize((tmpvar_58 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_59;
  lowp vec3 tmpvar_60;
  tmpvar_60 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_61;
  tmpvar_61 = (tmpvar_60 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_61;
  lowp vec3 tmpvar_62;
  tmpvar_62.x = worldTangent_3.x;
  tmpvar_62.y = worldBinormal_2.x;
  tmpvar_62.z = worldNormal_4.x;
  lowp vec3 tmpvar_63;
  tmpvar_63.x = worldTangent_3.y;
  tmpvar_63.y = worldBinormal_2.y;
  tmpvar_63.z = worldNormal_4.y;
  lowp vec3 tmpvar_64;
  tmpvar_64.x = worldTangent_3.z;
  tmpvar_64.y = worldBinormal_2.z;
  tmpvar_64.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_62;
  xlv_TEXCOORD1 = tmpvar_63;
  xlv_TEXCOORD2 = tmpvar_64;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec3 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD6.xy);
  blendColor_11 = tmpvar_15;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD6.z, 0.0, 1.0)));
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_16 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_17;
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_20;
  tmpvar_20 = (_LightMatrix0 * tmpvar_19).xyz;
  lightCoord_5 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = dot (lightCoord_5, lightCoord_5);
  lowp float tmpvar_22;
  tmpvar_22 = texture2D (_LightTexture0, vec2(tmpvar_21)).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_18);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_18);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_18);
  lowp vec3 tmpvar_23;
  tmpvar_23 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_23;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_22);
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_26 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tmpvar_9 * tmpvar_1) * diff_26);
  c_25.xyz = tmpvar_28;
  c_25.w = tmpvar_10;
  c_24.w = c_25.w;
  mediump vec3 tmpvar_29;
  tmpvar_29 = c_25.xyz;
  c_24.xyz = tmpvar_29;
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
in vec4 _glesTANGENT;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out lowp vec3 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out mediump vec4 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14.xy = _glesMultiTexCoord2.zw;
  tmpvar_14.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_19;
      highp float fAdherenceScale_25;
      highp vec3 tmpvar_26;
      tmpvar_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_27;
      tmpvar_27 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (tmpvar_27 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_27 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((tmpvar_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        (mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_28.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (_glesVertex.xyz + ((tmpvar_26 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((tmpvar_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((
        ((tmpvar_36.x * tmpvar_36.y) * tmpvar_36.x)
       * tmpvar_36.y) * _ST_WindTurbulences.x));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp vec3 tmpvar_39;
      tmpvar_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_40;
      tmpvar_40 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_41;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (tmpvar_40 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((tmpvar_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      vPos_38 = (vPos_23 + ((tmpvar_39 * 
        (((mix (
          mix (tmpvar_46, fTarget_43, fAmount_42)
        , fTarget_43, fAmount_42) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_18;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_51.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    vPos_47.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_52.x + (tmpvar_52.y * tmpvar_52.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_48)));
    vPos_47 = (normalize(vPos_47) * fLength_49);
    FinalPosition_18 = vPos_47;
  };
  tmpvar_15.xyz = FinalPosition_18;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_54;
  v_54.x = _World2Object[0].x;
  v_54.y = _World2Object[1].x;
  v_54.z = _World2Object[2].x;
  v_54.w = _World2Object[3].x;
  highp vec4 v_55;
  v_55.x = _World2Object[0].y;
  v_55.y = _World2Object[1].y;
  v_55.z = _World2Object[2].y;
  v_55.w = _World2Object[3].y;
  highp vec4 v_56;
  v_56.x = _World2Object[0].z;
  v_56.y = _World2Object[1].z;
  v_56.z = _World2Object[2].z;
  v_56.w = _World2Object[3].z;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(((
    (v_54.xyz * _glesNormal.x)
   + 
    (v_55.xyz * _glesNormal.y)
  ) + (v_56.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_57;
  highp mat3 tmpvar_58;
  tmpvar_58[0] = _Object2World[0].xyz;
  tmpvar_58[1] = _Object2World[1].xyz;
  tmpvar_58[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize((tmpvar_58 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_59;
  lowp vec3 tmpvar_60;
  tmpvar_60 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_61;
  tmpvar_61 = (tmpvar_60 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_61;
  lowp vec3 tmpvar_62;
  tmpvar_62.x = worldTangent_3.x;
  tmpvar_62.y = worldBinormal_2.x;
  tmpvar_62.z = worldNormal_4.x;
  lowp vec3 tmpvar_63;
  tmpvar_63.x = worldTangent_3.y;
  tmpvar_63.y = worldBinormal_2.y;
  tmpvar_63.z = worldNormal_4.y;
  lowp vec3 tmpvar_64;
  tmpvar_64.x = worldTangent_3.z;
  tmpvar_64.y = worldBinormal_2.z;
  tmpvar_64.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_62;
  xlv_TEXCOORD1 = tmpvar_63;
  xlv_TEXCOORD2 = tmpvar_64;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
in lowp vec3 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in mediump vec4 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec3 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture (_MainTex, xlv_TEXCOORD6.xy);
  blendColor_11 = tmpvar_15;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD6.z, 0.0, 1.0)));
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_16 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_17;
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_20;
  tmpvar_20 = (_LightMatrix0 * tmpvar_19).xyz;
  lightCoord_5 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = dot (lightCoord_5, lightCoord_5);
  lowp float tmpvar_22;
  tmpvar_22 = texture (_LightTexture0, vec2(tmpvar_21)).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_18);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_18);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_18);
  lowp vec3 tmpvar_23;
  tmpvar_23 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_23;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_22);
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_26 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tmpvar_9 * tmpvar_1) * diff_26);
  c_25.xyz = tmpvar_28;
  c_25.w = tmpvar_10;
  c_24.w = c_25.w;
  mediump vec3 tmpvar_29;
  tmpvar_29 = c_25.xyz;
  c_24.xyz = tmpvar_29;
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14.xy = _glesMultiTexCoord2.zw;
  tmpvar_14.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_19;
      highp float fAdherenceScale_25;
      highp vec3 tmpvar_26;
      tmpvar_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_27;
      tmpvar_27 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (tmpvar_27 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_27 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((tmpvar_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        (mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_28.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (_glesVertex.xyz + ((tmpvar_26 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((tmpvar_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((
        ((tmpvar_36.x * tmpvar_36.y) * tmpvar_36.x)
       * tmpvar_36.y) * _ST_WindTurbulences.x));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp vec3 tmpvar_39;
      tmpvar_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_40;
      tmpvar_40 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_41;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (tmpvar_40 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((tmpvar_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      vPos_38 = (vPos_23 + ((tmpvar_39 * 
        (((mix (
          mix (tmpvar_46, fTarget_43, fAmount_42)
        , fTarget_43, fAmount_42) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_18;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_51.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    vPos_47.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_52.x + (tmpvar_52.y * tmpvar_52.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_48)));
    vPos_47 = (normalize(vPos_47) * fLength_49);
    FinalPosition_18 = vPos_47;
  };
  tmpvar_15.xyz = FinalPosition_18;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_54;
  v_54.x = _World2Object[0].x;
  v_54.y = _World2Object[1].x;
  v_54.z = _World2Object[2].x;
  v_54.w = _World2Object[3].x;
  highp vec4 v_55;
  v_55.x = _World2Object[0].y;
  v_55.y = _World2Object[1].y;
  v_55.z = _World2Object[2].y;
  v_55.w = _World2Object[3].y;
  highp vec4 v_56;
  v_56.x = _World2Object[0].z;
  v_56.y = _World2Object[1].z;
  v_56.z = _World2Object[2].z;
  v_56.w = _World2Object[3].z;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(((
    (v_54.xyz * _glesNormal.x)
   + 
    (v_55.xyz * _glesNormal.y)
  ) + (v_56.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_57;
  highp mat3 tmpvar_58;
  tmpvar_58[0] = _Object2World[0].xyz;
  tmpvar_58[1] = _Object2World[1].xyz;
  tmpvar_58[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize((tmpvar_58 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_59;
  lowp vec3 tmpvar_60;
  tmpvar_60 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_61;
  tmpvar_61 = (tmpvar_60 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_61;
  lowp vec3 tmpvar_62;
  tmpvar_62.x = worldTangent_3.x;
  tmpvar_62.y = worldBinormal_2.x;
  tmpvar_62.z = worldNormal_4.x;
  lowp vec3 tmpvar_63;
  tmpvar_63.x = worldTangent_3.y;
  tmpvar_63.y = worldBinormal_2.y;
  tmpvar_63.z = worldNormal_4.y;
  lowp vec3 tmpvar_64;
  tmpvar_64.x = worldTangent_3.z;
  tmpvar_64.y = worldBinormal_2.z;
  tmpvar_64.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_62;
  xlv_TEXCOORD1 = tmpvar_63;
  xlv_TEXCOORD2 = tmpvar_64;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 blendColor_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD6.xy);
  blendColor_10 = tmpvar_14;
  diffuseColor_11.xyz = mix (blendColor_10.xyz, diffuseColor_11.xyz, vec3(clamp (xlv_TEXCOORD6.z, 0.0, 1.0)));
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_17);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_17);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_17);
  lowp vec3 tmpvar_18;
  tmpvar_18 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_18;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_21 = tmpvar_22;
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.xyz = tmpvar_23;
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  mediump vec3 tmpvar_24;
  tmpvar_24 = c_20.xyz;
  c_19.xyz = tmpvar_24;
  c_4.xyz = c_19.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
in vec4 _glesTANGENT;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out lowp vec3 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out mediump vec4 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14.xy = _glesMultiTexCoord2.zw;
  tmpvar_14.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_19;
      highp float fAdherenceScale_25;
      highp vec3 tmpvar_26;
      tmpvar_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_27;
      tmpvar_27 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (tmpvar_27 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_27 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((tmpvar_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        (mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_28.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (_glesVertex.xyz + ((tmpvar_26 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((tmpvar_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((
        ((tmpvar_36.x * tmpvar_36.y) * tmpvar_36.x)
       * tmpvar_36.y) * _ST_WindTurbulences.x));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp vec3 tmpvar_39;
      tmpvar_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_40;
      tmpvar_40 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_41;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (tmpvar_40 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((tmpvar_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      vPos_38 = (vPos_23 + ((tmpvar_39 * 
        (((mix (
          mix (tmpvar_46, fTarget_43, fAmount_42)
        , fTarget_43, fAmount_42) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_18;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_51.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    vPos_47.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_52.x + (tmpvar_52.y * tmpvar_52.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_48)));
    vPos_47 = (normalize(vPos_47) * fLength_49);
    FinalPosition_18 = vPos_47;
  };
  tmpvar_15.xyz = FinalPosition_18;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_54;
  v_54.x = _World2Object[0].x;
  v_54.y = _World2Object[1].x;
  v_54.z = _World2Object[2].x;
  v_54.w = _World2Object[3].x;
  highp vec4 v_55;
  v_55.x = _World2Object[0].y;
  v_55.y = _World2Object[1].y;
  v_55.z = _World2Object[2].y;
  v_55.w = _World2Object[3].y;
  highp vec4 v_56;
  v_56.x = _World2Object[0].z;
  v_56.y = _World2Object[1].z;
  v_56.z = _World2Object[2].z;
  v_56.w = _World2Object[3].z;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(((
    (v_54.xyz * _glesNormal.x)
   + 
    (v_55.xyz * _glesNormal.y)
  ) + (v_56.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_57;
  highp mat3 tmpvar_58;
  tmpvar_58[0] = _Object2World[0].xyz;
  tmpvar_58[1] = _Object2World[1].xyz;
  tmpvar_58[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize((tmpvar_58 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_59;
  lowp vec3 tmpvar_60;
  tmpvar_60 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_61;
  tmpvar_61 = (tmpvar_60 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_61;
  lowp vec3 tmpvar_62;
  tmpvar_62.x = worldTangent_3.x;
  tmpvar_62.y = worldBinormal_2.x;
  tmpvar_62.z = worldNormal_4.x;
  lowp vec3 tmpvar_63;
  tmpvar_63.x = worldTangent_3.y;
  tmpvar_63.y = worldBinormal_2.y;
  tmpvar_63.z = worldNormal_4.y;
  lowp vec3 tmpvar_64;
  tmpvar_64.x = worldTangent_3.z;
  tmpvar_64.y = worldBinormal_2.z;
  tmpvar_64.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_62;
  xlv_TEXCOORD1 = tmpvar_63;
  xlv_TEXCOORD2 = tmpvar_64;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
in lowp vec3 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 blendColor_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture (_MainTex, xlv_TEXCOORD6.xy);
  blendColor_10 = tmpvar_14;
  diffuseColor_11.xyz = mix (blendColor_10.xyz, diffuseColor_11.xyz, vec3(clamp (xlv_TEXCOORD6.z, 0.0, 1.0)));
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_17);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_17);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_17);
  lowp vec3 tmpvar_18;
  tmpvar_18 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_18;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_21 = tmpvar_22;
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.xyz = tmpvar_23;
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  mediump vec3 tmpvar_24;
  tmpvar_24 = c_20.xyz;
  c_19.xyz = tmpvar_24;
  c_4.xyz = c_19.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "SPOT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14.xy = _glesMultiTexCoord2.zw;
  tmpvar_14.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_19;
      highp float fAdherenceScale_25;
      highp vec3 tmpvar_26;
      tmpvar_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_27;
      tmpvar_27 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (tmpvar_27 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_27 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((tmpvar_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        (mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_28.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (_glesVertex.xyz + ((tmpvar_26 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((tmpvar_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((
        ((tmpvar_36.x * tmpvar_36.y) * tmpvar_36.x)
       * tmpvar_36.y) * _ST_WindTurbulences.x));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp vec3 tmpvar_39;
      tmpvar_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_40;
      tmpvar_40 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_41;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (tmpvar_40 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((tmpvar_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      vPos_38 = (vPos_23 + ((tmpvar_39 * 
        (((mix (
          mix (tmpvar_46, fTarget_43, fAmount_42)
        , fTarget_43, fAmount_42) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_18;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_51.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    vPos_47.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_52.x + (tmpvar_52.y * tmpvar_52.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_48)));
    vPos_47 = (normalize(vPos_47) * fLength_49);
    FinalPosition_18 = vPos_47;
  };
  tmpvar_15.xyz = FinalPosition_18;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_54;
  v_54.x = _World2Object[0].x;
  v_54.y = _World2Object[1].x;
  v_54.z = _World2Object[2].x;
  v_54.w = _World2Object[3].x;
  highp vec4 v_55;
  v_55.x = _World2Object[0].y;
  v_55.y = _World2Object[1].y;
  v_55.z = _World2Object[2].y;
  v_55.w = _World2Object[3].y;
  highp vec4 v_56;
  v_56.x = _World2Object[0].z;
  v_56.y = _World2Object[1].z;
  v_56.z = _World2Object[2].z;
  v_56.w = _World2Object[3].z;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(((
    (v_54.xyz * _glesNormal.x)
   + 
    (v_55.xyz * _glesNormal.y)
  ) + (v_56.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_57;
  highp mat3 tmpvar_58;
  tmpvar_58[0] = _Object2World[0].xyz;
  tmpvar_58[1] = _Object2World[1].xyz;
  tmpvar_58[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize((tmpvar_58 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_59;
  lowp vec3 tmpvar_60;
  tmpvar_60 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_61;
  tmpvar_61 = (tmpvar_60 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_61;
  lowp vec3 tmpvar_62;
  tmpvar_62.x = worldTangent_3.x;
  tmpvar_62.y = worldBinormal_2.x;
  tmpvar_62.z = worldNormal_4.x;
  lowp vec3 tmpvar_63;
  tmpvar_63.x = worldTangent_3.y;
  tmpvar_63.y = worldBinormal_2.y;
  tmpvar_63.z = worldNormal_4.y;
  lowp vec3 tmpvar_64;
  tmpvar_64.x = worldTangent_3.z;
  tmpvar_64.y = worldBinormal_2.z;
  tmpvar_64.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_62;
  xlv_TEXCOORD1 = tmpvar_63;
  xlv_TEXCOORD2 = tmpvar_64;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp float atten_5;
  mediump vec4 lightCoord_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD4;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_7 = tmpvar_9;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 blendColor_12;
  mediump vec4 diffuseColor_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_13 = tmpvar_14;
  mediump float tmpvar_15;
  tmpvar_15 = (diffuseColor_13.w * _Color.w);
  tmpvar_11 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD6.xy);
  blendColor_12 = tmpvar_16;
  diffuseColor_13.xyz = mix (blendColor_12.xyz, diffuseColor_13.xyz, vec3(clamp (xlv_TEXCOORD6.z, 0.0, 1.0)));
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_13.xyz = clamp ((tmpvar_17 * (
    ((max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_18;
  tmpvar_18 = (diffuseColor_13.xyz * tmpvar_8.xyz);
  tmpvar_10 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = xlv_TEXCOORD3;
  highp vec4 tmpvar_21;
  tmpvar_21 = (_LightMatrix0 * tmpvar_20);
  lightCoord_6 = tmpvar_21;
  lowp vec4 tmpvar_22;
  mediump vec2 P_23;
  P_23 = ((lightCoord_6.xy / lightCoord_6.w) + 0.5);
  tmpvar_22 = texture2D (_LightTexture0, P_23);
  mediump float tmpvar_24;
  tmpvar_24 = dot (lightCoord_6.xyz, lightCoord_6.xyz);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_LightTextureB0, vec2(tmpvar_24));
  mediump float tmpvar_26;
  tmpvar_26 = ((float(
    (lightCoord_6.z > 0.0)
  ) * tmpvar_22.w) * tmpvar_25.w);
  atten_5 = tmpvar_26;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_19);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_19);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_19);
  lowp vec3 tmpvar_27;
  tmpvar_27 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_27;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_5);
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_30 = tmpvar_31;
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tmpvar_10 * tmpvar_1) * diff_30);
  c_29.xyz = tmpvar_32;
  c_29.w = tmpvar_11;
  c_28.w = c_29.w;
  mediump vec3 tmpvar_33;
  tmpvar_33 = c_29.xyz;
  c_28.xyz = tmpvar_33;
  c_4.xyz = c_28.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SPOT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
in vec4 _glesTANGENT;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out lowp vec3 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out mediump vec4 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14.xy = _glesMultiTexCoord2.zw;
  tmpvar_14.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_19;
      highp float fAdherenceScale_25;
      highp vec3 tmpvar_26;
      tmpvar_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_27;
      tmpvar_27 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (tmpvar_27 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_27 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((tmpvar_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        (mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_28.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (_glesVertex.xyz + ((tmpvar_26 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((tmpvar_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((
        ((tmpvar_36.x * tmpvar_36.y) * tmpvar_36.x)
       * tmpvar_36.y) * _ST_WindTurbulences.x));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp vec3 tmpvar_39;
      tmpvar_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_40;
      tmpvar_40 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_41;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (tmpvar_40 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((tmpvar_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      vPos_38 = (vPos_23 + ((tmpvar_39 * 
        (((mix (
          mix (tmpvar_46, fTarget_43, fAmount_42)
        , fTarget_43, fAmount_42) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_18;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_51.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    vPos_47.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_52.x + (tmpvar_52.y * tmpvar_52.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_48)));
    vPos_47 = (normalize(vPos_47) * fLength_49);
    FinalPosition_18 = vPos_47;
  };
  tmpvar_15.xyz = FinalPosition_18;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_54;
  v_54.x = _World2Object[0].x;
  v_54.y = _World2Object[1].x;
  v_54.z = _World2Object[2].x;
  v_54.w = _World2Object[3].x;
  highp vec4 v_55;
  v_55.x = _World2Object[0].y;
  v_55.y = _World2Object[1].y;
  v_55.z = _World2Object[2].y;
  v_55.w = _World2Object[3].y;
  highp vec4 v_56;
  v_56.x = _World2Object[0].z;
  v_56.y = _World2Object[1].z;
  v_56.z = _World2Object[2].z;
  v_56.w = _World2Object[3].z;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(((
    (v_54.xyz * _glesNormal.x)
   + 
    (v_55.xyz * _glesNormal.y)
  ) + (v_56.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_57;
  highp mat3 tmpvar_58;
  tmpvar_58[0] = _Object2World[0].xyz;
  tmpvar_58[1] = _Object2World[1].xyz;
  tmpvar_58[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize((tmpvar_58 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_59;
  lowp vec3 tmpvar_60;
  tmpvar_60 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_61;
  tmpvar_61 = (tmpvar_60 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_61;
  lowp vec3 tmpvar_62;
  tmpvar_62.x = worldTangent_3.x;
  tmpvar_62.y = worldBinormal_2.x;
  tmpvar_62.z = worldNormal_4.x;
  lowp vec3 tmpvar_63;
  tmpvar_63.x = worldTangent_3.y;
  tmpvar_63.y = worldBinormal_2.y;
  tmpvar_63.z = worldNormal_4.y;
  lowp vec3 tmpvar_64;
  tmpvar_64.x = worldTangent_3.z;
  tmpvar_64.y = worldBinormal_2.z;
  tmpvar_64.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_62;
  xlv_TEXCOORD1 = tmpvar_63;
  xlv_TEXCOORD2 = tmpvar_64;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
in lowp vec3 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in mediump vec4 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp float atten_5;
  mediump vec4 lightCoord_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD4;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_7 = tmpvar_9;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 blendColor_12;
  mediump vec4 diffuseColor_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_13 = tmpvar_14;
  mediump float tmpvar_15;
  tmpvar_15 = (diffuseColor_13.w * _Color.w);
  tmpvar_11 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (_MainTex, xlv_TEXCOORD6.xy);
  blendColor_12 = tmpvar_16;
  diffuseColor_13.xyz = mix (blendColor_12.xyz, diffuseColor_13.xyz, vec3(clamp (xlv_TEXCOORD6.z, 0.0, 1.0)));
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_13.xyz = clamp ((tmpvar_17 * (
    ((max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_18;
  tmpvar_18 = (diffuseColor_13.xyz * tmpvar_8.xyz);
  tmpvar_10 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = ((texture (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = xlv_TEXCOORD3;
  highp vec4 tmpvar_21;
  tmpvar_21 = (_LightMatrix0 * tmpvar_20);
  lightCoord_6 = tmpvar_21;
  lowp vec4 tmpvar_22;
  mediump vec2 P_23;
  P_23 = ((lightCoord_6.xy / lightCoord_6.w) + 0.5);
  tmpvar_22 = texture (_LightTexture0, P_23);
  mediump float tmpvar_24;
  tmpvar_24 = dot (lightCoord_6.xyz, lightCoord_6.xyz);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture (_LightTextureB0, vec2(tmpvar_24));
  mediump float tmpvar_26;
  tmpvar_26 = ((float(
    (lightCoord_6.z > 0.0)
  ) * tmpvar_22.w) * tmpvar_25.w);
  atten_5 = tmpvar_26;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_19);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_19);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_19);
  lowp vec3 tmpvar_27;
  tmpvar_27 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_27;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_5);
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_30 = tmpvar_31;
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tmpvar_10 * tmpvar_1) * diff_30);
  c_29.xyz = tmpvar_32;
  c_29.w = tmpvar_11;
  c_28.w = c_29.w;
  mediump vec3 tmpvar_33;
  tmpvar_33 = c_29.xyz;
  c_28.xyz = tmpvar_33;
  c_4.xyz = c_28.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14.xy = _glesMultiTexCoord2.zw;
  tmpvar_14.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_19;
      highp float fAdherenceScale_25;
      highp vec3 tmpvar_26;
      tmpvar_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_27;
      tmpvar_27 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (tmpvar_27 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_27 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((tmpvar_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        (mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_28.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (_glesVertex.xyz + ((tmpvar_26 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((tmpvar_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((
        ((tmpvar_36.x * tmpvar_36.y) * tmpvar_36.x)
       * tmpvar_36.y) * _ST_WindTurbulences.x));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp vec3 tmpvar_39;
      tmpvar_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_40;
      tmpvar_40 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_41;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (tmpvar_40 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((tmpvar_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      vPos_38 = (vPos_23 + ((tmpvar_39 * 
        (((mix (
          mix (tmpvar_46, fTarget_43, fAmount_42)
        , fTarget_43, fAmount_42) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_18;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_51.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    vPos_47.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_52.x + (tmpvar_52.y * tmpvar_52.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_48)));
    vPos_47 = (normalize(vPos_47) * fLength_49);
    FinalPosition_18 = vPos_47;
  };
  tmpvar_15.xyz = FinalPosition_18;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_54;
  v_54.x = _World2Object[0].x;
  v_54.y = _World2Object[1].x;
  v_54.z = _World2Object[2].x;
  v_54.w = _World2Object[3].x;
  highp vec4 v_55;
  v_55.x = _World2Object[0].y;
  v_55.y = _World2Object[1].y;
  v_55.z = _World2Object[2].y;
  v_55.w = _World2Object[3].y;
  highp vec4 v_56;
  v_56.x = _World2Object[0].z;
  v_56.y = _World2Object[1].z;
  v_56.z = _World2Object[2].z;
  v_56.w = _World2Object[3].z;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(((
    (v_54.xyz * _glesNormal.x)
   + 
    (v_55.xyz * _glesNormal.y)
  ) + (v_56.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_57;
  highp mat3 tmpvar_58;
  tmpvar_58[0] = _Object2World[0].xyz;
  tmpvar_58[1] = _Object2World[1].xyz;
  tmpvar_58[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize((tmpvar_58 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_59;
  lowp vec3 tmpvar_60;
  tmpvar_60 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_61;
  tmpvar_61 = (tmpvar_60 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_61;
  lowp vec3 tmpvar_62;
  tmpvar_62.x = worldTangent_3.x;
  tmpvar_62.y = worldBinormal_2.x;
  tmpvar_62.z = worldNormal_4.x;
  lowp vec3 tmpvar_63;
  tmpvar_63.x = worldTangent_3.y;
  tmpvar_63.y = worldBinormal_2.y;
  tmpvar_63.z = worldNormal_4.y;
  lowp vec3 tmpvar_64;
  tmpvar_64.x = worldTangent_3.z;
  tmpvar_64.y = worldBinormal_2.z;
  tmpvar_64.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_62;
  xlv_TEXCOORD1 = tmpvar_63;
  xlv_TEXCOORD2 = tmpvar_64;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec3 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD6.xy);
  blendColor_11 = tmpvar_15;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD6.z, 0.0, 1.0)));
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_16 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_17;
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_20;
  tmpvar_20 = (_LightMatrix0 * tmpvar_19).xyz;
  lightCoord_5 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = dot (lightCoord_5, lightCoord_5);
  lowp float tmpvar_22;
  tmpvar_22 = (texture2D (_LightTextureB0, vec2(tmpvar_21)).w * textureCube (_LightTexture0, lightCoord_5).w);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_18);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_18);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_18);
  lowp vec3 tmpvar_23;
  tmpvar_23 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_23;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_22);
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_26 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tmpvar_9 * tmpvar_1) * diff_26);
  c_25.xyz = tmpvar_28;
  c_25.w = tmpvar_10;
  c_24.w = c_25.w;
  mediump vec3 tmpvar_29;
  tmpvar_29 = c_25.xyz;
  c_24.xyz = tmpvar_29;
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
in vec4 _glesTANGENT;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out lowp vec3 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out mediump vec4 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14.xy = _glesMultiTexCoord2.zw;
  tmpvar_14.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_19;
      highp float fAdherenceScale_25;
      highp vec3 tmpvar_26;
      tmpvar_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_27;
      tmpvar_27 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (tmpvar_27 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_27 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((tmpvar_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        (mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_28.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (_glesVertex.xyz + ((tmpvar_26 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((tmpvar_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((
        ((tmpvar_36.x * tmpvar_36.y) * tmpvar_36.x)
       * tmpvar_36.y) * _ST_WindTurbulences.x));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp vec3 tmpvar_39;
      tmpvar_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_40;
      tmpvar_40 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_41;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (tmpvar_40 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((tmpvar_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      vPos_38 = (vPos_23 + ((tmpvar_39 * 
        (((mix (
          mix (tmpvar_46, fTarget_43, fAmount_42)
        , fTarget_43, fAmount_42) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_18;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_51.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    vPos_47.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_52.x + (tmpvar_52.y * tmpvar_52.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_48)));
    vPos_47 = (normalize(vPos_47) * fLength_49);
    FinalPosition_18 = vPos_47;
  };
  tmpvar_15.xyz = FinalPosition_18;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_54;
  v_54.x = _World2Object[0].x;
  v_54.y = _World2Object[1].x;
  v_54.z = _World2Object[2].x;
  v_54.w = _World2Object[3].x;
  highp vec4 v_55;
  v_55.x = _World2Object[0].y;
  v_55.y = _World2Object[1].y;
  v_55.z = _World2Object[2].y;
  v_55.w = _World2Object[3].y;
  highp vec4 v_56;
  v_56.x = _World2Object[0].z;
  v_56.y = _World2Object[1].z;
  v_56.z = _World2Object[2].z;
  v_56.w = _World2Object[3].z;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(((
    (v_54.xyz * _glesNormal.x)
   + 
    (v_55.xyz * _glesNormal.y)
  ) + (v_56.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_57;
  highp mat3 tmpvar_58;
  tmpvar_58[0] = _Object2World[0].xyz;
  tmpvar_58[1] = _Object2World[1].xyz;
  tmpvar_58[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize((tmpvar_58 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_59;
  lowp vec3 tmpvar_60;
  tmpvar_60 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_61;
  tmpvar_61 = (tmpvar_60 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_61;
  lowp vec3 tmpvar_62;
  tmpvar_62.x = worldTangent_3.x;
  tmpvar_62.y = worldBinormal_2.x;
  tmpvar_62.z = worldNormal_4.x;
  lowp vec3 tmpvar_63;
  tmpvar_63.x = worldTangent_3.y;
  tmpvar_63.y = worldBinormal_2.y;
  tmpvar_63.z = worldNormal_4.y;
  lowp vec3 tmpvar_64;
  tmpvar_64.x = worldTangent_3.z;
  tmpvar_64.y = worldBinormal_2.z;
  tmpvar_64.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_62;
  xlv_TEXCOORD1 = tmpvar_63;
  xlv_TEXCOORD2 = tmpvar_64;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
in lowp vec3 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in mediump vec4 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec3 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture (_MainTex, xlv_TEXCOORD6.xy);
  blendColor_11 = tmpvar_15;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD6.z, 0.0, 1.0)));
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_16 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_17;
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_20;
  tmpvar_20 = (_LightMatrix0 * tmpvar_19).xyz;
  lightCoord_5 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = dot (lightCoord_5, lightCoord_5);
  lowp float tmpvar_22;
  tmpvar_22 = (texture (_LightTextureB0, vec2(tmpvar_21)).w * texture (_LightTexture0, lightCoord_5).w);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_18);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_18);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_18);
  lowp vec3 tmpvar_23;
  tmpvar_23 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_23;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_22);
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_26 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tmpvar_9 * tmpvar_1) * diff_26);
  c_25.xyz = tmpvar_28;
  c_25.w = tmpvar_10;
  c_24.w = c_25.w;
  mediump vec3 tmpvar_29;
  tmpvar_29 = c_25.xyz;
  c_24.xyz = tmpvar_29;
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14.xy = _glesMultiTexCoord2.zw;
  tmpvar_14.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_19;
      highp float fAdherenceScale_25;
      highp vec3 tmpvar_26;
      tmpvar_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_27;
      tmpvar_27 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (tmpvar_27 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_27 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((tmpvar_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        (mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_28.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (_glesVertex.xyz + ((tmpvar_26 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((tmpvar_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((
        ((tmpvar_36.x * tmpvar_36.y) * tmpvar_36.x)
       * tmpvar_36.y) * _ST_WindTurbulences.x));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp vec3 tmpvar_39;
      tmpvar_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_40;
      tmpvar_40 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_41;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (tmpvar_40 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((tmpvar_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      vPos_38 = (vPos_23 + ((tmpvar_39 * 
        (((mix (
          mix (tmpvar_46, fTarget_43, fAmount_42)
        , fTarget_43, fAmount_42) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_18;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_51.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    vPos_47.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_52.x + (tmpvar_52.y * tmpvar_52.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_48)));
    vPos_47 = (normalize(vPos_47) * fLength_49);
    FinalPosition_18 = vPos_47;
  };
  tmpvar_15.xyz = FinalPosition_18;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_54;
  v_54.x = _World2Object[0].x;
  v_54.y = _World2Object[1].x;
  v_54.z = _World2Object[2].x;
  v_54.w = _World2Object[3].x;
  highp vec4 v_55;
  v_55.x = _World2Object[0].y;
  v_55.y = _World2Object[1].y;
  v_55.z = _World2Object[2].y;
  v_55.w = _World2Object[3].y;
  highp vec4 v_56;
  v_56.x = _World2Object[0].z;
  v_56.y = _World2Object[1].z;
  v_56.z = _World2Object[2].z;
  v_56.w = _World2Object[3].z;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(((
    (v_54.xyz * _glesNormal.x)
   + 
    (v_55.xyz * _glesNormal.y)
  ) + (v_56.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_57;
  highp mat3 tmpvar_58;
  tmpvar_58[0] = _Object2World[0].xyz;
  tmpvar_58[1] = _Object2World[1].xyz;
  tmpvar_58[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize((tmpvar_58 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_59;
  lowp vec3 tmpvar_60;
  tmpvar_60 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_61;
  tmpvar_61 = (tmpvar_60 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_61;
  lowp vec3 tmpvar_62;
  tmpvar_62.x = worldTangent_3.x;
  tmpvar_62.y = worldBinormal_2.x;
  tmpvar_62.z = worldNormal_4.x;
  lowp vec3 tmpvar_63;
  tmpvar_63.x = worldTangent_3.y;
  tmpvar_63.y = worldBinormal_2.y;
  tmpvar_63.z = worldNormal_4.y;
  lowp vec3 tmpvar_64;
  tmpvar_64.x = worldTangent_3.z;
  tmpvar_64.y = worldBinormal_2.z;
  tmpvar_64.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_62;
  xlv_TEXCOORD1 = tmpvar_63;
  xlv_TEXCOORD2 = tmpvar_64;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec2 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD6.xy);
  blendColor_11 = tmpvar_15;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD6.z, 0.0, 1.0)));
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_16 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_17;
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = xlv_TEXCOORD3;
  highp vec2 tmpvar_20;
  tmpvar_20 = (_LightMatrix0 * tmpvar_19).xy;
  lightCoord_5 = tmpvar_20;
  lowp float tmpvar_21;
  tmpvar_21 = texture2D (_LightTexture0, lightCoord_5).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_18);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_18);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_18);
  lowp vec3 tmpvar_22;
  tmpvar_22 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_22;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_21);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_25 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_9 * tmpvar_1) * diff_25);
  c_24.xyz = tmpvar_27;
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  mediump vec3 tmpvar_28;
  tmpvar_28 = c_24.xyz;
  c_23.xyz = tmpvar_28;
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
in vec4 _glesTANGENT;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out lowp vec3 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out mediump vec4 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14.xy = _glesMultiTexCoord2.zw;
  tmpvar_14.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_19;
      highp float fAdherenceScale_25;
      highp vec3 tmpvar_26;
      tmpvar_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_27;
      tmpvar_27 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (tmpvar_27 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_27 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((tmpvar_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        (mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_28.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (_glesVertex.xyz + ((tmpvar_26 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((tmpvar_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((
        ((tmpvar_36.x * tmpvar_36.y) * tmpvar_36.x)
       * tmpvar_36.y) * _ST_WindTurbulences.x));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp vec3 tmpvar_39;
      tmpvar_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_40;
      tmpvar_40 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_41;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (tmpvar_40 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((tmpvar_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      vPos_38 = (vPos_23 + ((tmpvar_39 * 
        (((mix (
          mix (tmpvar_46, fTarget_43, fAmount_42)
        , fTarget_43, fAmount_42) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_18;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_51.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    vPos_47.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_52.x + (tmpvar_52.y * tmpvar_52.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_48)));
    vPos_47 = (normalize(vPos_47) * fLength_49);
    FinalPosition_18 = vPos_47;
  };
  tmpvar_15.xyz = FinalPosition_18;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_54;
  v_54.x = _World2Object[0].x;
  v_54.y = _World2Object[1].x;
  v_54.z = _World2Object[2].x;
  v_54.w = _World2Object[3].x;
  highp vec4 v_55;
  v_55.x = _World2Object[0].y;
  v_55.y = _World2Object[1].y;
  v_55.z = _World2Object[2].y;
  v_55.w = _World2Object[3].y;
  highp vec4 v_56;
  v_56.x = _World2Object[0].z;
  v_56.y = _World2Object[1].z;
  v_56.z = _World2Object[2].z;
  v_56.w = _World2Object[3].z;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(((
    (v_54.xyz * _glesNormal.x)
   + 
    (v_55.xyz * _glesNormal.y)
  ) + (v_56.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_57;
  highp mat3 tmpvar_58;
  tmpvar_58[0] = _Object2World[0].xyz;
  tmpvar_58[1] = _Object2World[1].xyz;
  tmpvar_58[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize((tmpvar_58 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_59;
  lowp vec3 tmpvar_60;
  tmpvar_60 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_61;
  tmpvar_61 = (tmpvar_60 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_61;
  lowp vec3 tmpvar_62;
  tmpvar_62.x = worldTangent_3.x;
  tmpvar_62.y = worldBinormal_2.x;
  tmpvar_62.z = worldNormal_4.x;
  lowp vec3 tmpvar_63;
  tmpvar_63.x = worldTangent_3.y;
  tmpvar_63.y = worldBinormal_2.y;
  tmpvar_63.z = worldNormal_4.y;
  lowp vec3 tmpvar_64;
  tmpvar_64.x = worldTangent_3.z;
  tmpvar_64.y = worldBinormal_2.z;
  tmpvar_64.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_62;
  xlv_TEXCOORD1 = tmpvar_63;
  xlv_TEXCOORD2 = tmpvar_64;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
in lowp vec3 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in mediump vec4 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec2 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture (_MainTex, xlv_TEXCOORD6.xy);
  blendColor_11 = tmpvar_15;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD6.z, 0.0, 1.0)));
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_16 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_17;
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = xlv_TEXCOORD3;
  highp vec2 tmpvar_20;
  tmpvar_20 = (_LightMatrix0 * tmpvar_19).xy;
  lightCoord_5 = tmpvar_20;
  lowp float tmpvar_21;
  tmpvar_21 = texture (_LightTexture0, lightCoord_5).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_18);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_18);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_18);
  lowp vec3 tmpvar_22;
  tmpvar_22 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_22;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_21);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_25 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_9 * tmpvar_1) * diff_25);
  c_24.xyz = tmpvar_27;
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  mediump vec3 tmpvar_28;
  tmpvar_28 = c_24.xyz;
  c_23.xyz = tmpvar_28;
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_8;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 == 5.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    highp float fOffset_21;
    fOffset_21 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_21 = 0.75;
    };
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_21);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_20 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_11 = tmpvar_2;
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_14;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = FinalPosition_14;
      highp float fAdherenceScale_26;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((tmpvar_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        (mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_29.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (FinalPosition_14 + ((tmpvar_27 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((tmpvar_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((
        ((tmpvar_37.x * tmpvar_37.y) * tmpvar_37.x)
       * tmpvar_37.y) * _ST_WindTurbulences.x));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_12 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp vec3 tmpvar_40;
      tmpvar_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_41;
      tmpvar_41 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_42;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (tmpvar_41 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((tmpvar_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      vPos_39 = (vPos_24 + ((tmpvar_40 * 
        (((mix (
          mix (tmpvar_47, fTarget_44, fAmount_43)
        , fTarget_44, fAmount_43) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_14 = vPos_24;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_14;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    vPos_48.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * (
      ((_ST_WindGlobal.y * (tmpvar_53.x + (tmpvar_53.y * tmpvar_53.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_49)));
    vPos_48 = (normalize(vPos_48) * fLength_50);
    FinalPosition_14 = vPos_48;
  };
  tmpvar_10.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_55;
  v_55.x = _World2Object[0].x;
  v_55.y = _World2Object[1].x;
  v_55.z = _World2Object[2].x;
  v_55.w = _World2Object[3].x;
  highp vec4 v_56;
  v_56.x = _World2Object[0].y;
  v_56.y = _World2Object[1].y;
  v_56.z = _World2Object[2].y;
  v_56.w = _World2Object[3].y;
  highp vec4 v_57;
  v_57.x = _World2Object[0].z;
  v_57.y = _World2Object[1].z;
  v_57.z = _World2Object[2].z;
  v_57.w = _World2Object[3].z;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(((
    (v_55.xyz * tmpvar_11.x)
   + 
    (v_56.xyz * tmpvar_11.y)
  ) + (v_57.xyz * tmpvar_11.z)));
  worldNormal_3 = tmpvar_58;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xyz;
  lightCoord_4 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, vec2(tmpvar_18)).w;
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_20;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_19);
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_23 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tmpvar_9 * tmpvar_1) * diff_23);
  c_22.xyz = tmpvar_25;
  c_22.w = tmpvar_10;
  c_21.w = c_22.w;
  mediump vec3 tmpvar_26;
  tmpvar_26 = c_22.xyz;
  c_21.xyz = tmpvar_26;
  c_3.xyz = c_21.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT" "GEOM_TYPE_FROND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_8;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 == 5.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    highp float fOffset_21;
    fOffset_21 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_21 = 0.75;
    };
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_21);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_20 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_11 = tmpvar_2;
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_14;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = FinalPosition_14;
      highp float fAdherenceScale_26;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((tmpvar_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        (mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_29.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (FinalPosition_14 + ((tmpvar_27 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((tmpvar_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((
        ((tmpvar_37.x * tmpvar_37.y) * tmpvar_37.x)
       * tmpvar_37.y) * _ST_WindTurbulences.x));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_12 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp vec3 tmpvar_40;
      tmpvar_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_41;
      tmpvar_41 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_42;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (tmpvar_41 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((tmpvar_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      vPos_39 = (vPos_24 + ((tmpvar_40 * 
        (((mix (
          mix (tmpvar_47, fTarget_44, fAmount_43)
        , fTarget_44, fAmount_43) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_14 = vPos_24;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_14;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    vPos_48.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * (
      ((_ST_WindGlobal.y * (tmpvar_53.x + (tmpvar_53.y * tmpvar_53.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_49)));
    vPos_48 = (normalize(vPos_48) * fLength_50);
    FinalPosition_14 = vPos_48;
  };
  tmpvar_10.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_55;
  v_55.x = _World2Object[0].x;
  v_55.y = _World2Object[1].x;
  v_55.z = _World2Object[2].x;
  v_55.w = _World2Object[3].x;
  highp vec4 v_56;
  v_56.x = _World2Object[0].y;
  v_56.y = _World2Object[1].y;
  v_56.z = _World2Object[2].y;
  v_56.w = _World2Object[3].y;
  highp vec4 v_57;
  v_57.x = _World2Object[0].z;
  v_57.y = _World2Object[1].z;
  v_57.z = _World2Object[2].z;
  v_57.w = _World2Object[3].z;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(((
    (v_55.xyz * tmpvar_11.x)
   + 
    (v_56.xyz * tmpvar_11.y)
  ) + (v_57.xyz * tmpvar_11.z)));
  worldNormal_3 = tmpvar_58;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xyz;
  lightCoord_4 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_19;
  tmpvar_19 = texture (_LightTexture0, vec2(tmpvar_18)).w;
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_20;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_19);
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_23 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tmpvar_9 * tmpvar_1) * diff_23);
  c_22.xyz = tmpvar_25;
  c_22.w = tmpvar_10;
  c_21.w = c_22.w;
  mediump vec3 tmpvar_26;
  tmpvar_26 = c_22.xyz;
  c_21.xyz = tmpvar_26;
  c_3.xyz = c_21.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_8;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 == 5.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    highp float fOffset_21;
    fOffset_21 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_21 = 0.75;
    };
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_21);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_20 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_11 = tmpvar_2;
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_14;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = FinalPosition_14;
      highp float fAdherenceScale_26;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((tmpvar_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        (mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_29.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (FinalPosition_14 + ((tmpvar_27 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((tmpvar_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((
        ((tmpvar_37.x * tmpvar_37.y) * tmpvar_37.x)
       * tmpvar_37.y) * _ST_WindTurbulences.x));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_12 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp vec3 tmpvar_40;
      tmpvar_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_41;
      tmpvar_41 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_42;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (tmpvar_41 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((tmpvar_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      vPos_39 = (vPos_24 + ((tmpvar_40 * 
        (((mix (
          mix (tmpvar_47, fTarget_44, fAmount_43)
        , fTarget_44, fAmount_43) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_14 = vPos_24;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_14;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    vPos_48.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * (
      ((_ST_WindGlobal.y * (tmpvar_53.x + (tmpvar_53.y * tmpvar_53.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_49)));
    vPos_48 = (normalize(vPos_48) * fLength_50);
    FinalPosition_14 = vPos_48;
  };
  tmpvar_10.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_55;
  v_55.x = _World2Object[0].x;
  v_55.y = _World2Object[1].x;
  v_55.z = _World2Object[2].x;
  v_55.w = _World2Object[3].x;
  highp vec4 v_56;
  v_56.x = _World2Object[0].y;
  v_56.y = _World2Object[1].y;
  v_56.z = _World2Object[2].y;
  v_56.w = _World2Object[3].y;
  highp vec4 v_57;
  v_57.x = _World2Object[0].z;
  v_57.y = _World2Object[1].z;
  v_57.z = _World2Object[2].z;
  v_57.w = _World2Object[3].z;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(((
    (v_55.xyz * tmpvar_11.x)
   + 
    (v_56.xyz * tmpvar_11.y)
  ) + (v_57.xyz * tmpvar_11.z)));
  worldNormal_3 = tmpvar_58;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_12;
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_15;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_18 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = ((tmpvar_8 * tmpvar_1) * diff_18);
  c_17.xyz = tmpvar_20;
  c_17.w = tmpvar_9;
  c_16.w = c_17.w;
  mediump vec3 tmpvar_21;
  tmpvar_21 = c_17.xyz;
  c_16.xyz = tmpvar_21;
  c_3.xyz = c_16.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "GEOM_TYPE_FROND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_8;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 == 5.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    highp float fOffset_21;
    fOffset_21 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_21 = 0.75;
    };
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_21);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_20 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_11 = tmpvar_2;
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_14;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = FinalPosition_14;
      highp float fAdherenceScale_26;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((tmpvar_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        (mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_29.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (FinalPosition_14 + ((tmpvar_27 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((tmpvar_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((
        ((tmpvar_37.x * tmpvar_37.y) * tmpvar_37.x)
       * tmpvar_37.y) * _ST_WindTurbulences.x));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_12 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp vec3 tmpvar_40;
      tmpvar_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_41;
      tmpvar_41 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_42;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (tmpvar_41 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((tmpvar_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      vPos_39 = (vPos_24 + ((tmpvar_40 * 
        (((mix (
          mix (tmpvar_47, fTarget_44, fAmount_43)
        , fTarget_44, fAmount_43) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_14 = vPos_24;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_14;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    vPos_48.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * (
      ((_ST_WindGlobal.y * (tmpvar_53.x + (tmpvar_53.y * tmpvar_53.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_49)));
    vPos_48 = (normalize(vPos_48) * fLength_50);
    FinalPosition_14 = vPos_48;
  };
  tmpvar_10.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_55;
  v_55.x = _World2Object[0].x;
  v_55.y = _World2Object[1].x;
  v_55.z = _World2Object[2].x;
  v_55.w = _World2Object[3].x;
  highp vec4 v_56;
  v_56.x = _World2Object[0].y;
  v_56.y = _World2Object[1].y;
  v_56.z = _World2Object[2].y;
  v_56.w = _World2Object[3].y;
  highp vec4 v_57;
  v_57.x = _World2Object[0].z;
  v_57.y = _World2Object[1].z;
  v_57.z = _World2Object[2].z;
  v_57.w = _World2Object[3].z;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(((
    (v_55.xyz * tmpvar_11.x)
   + 
    (v_56.xyz * tmpvar_11.y)
  ) + (v_57.xyz * tmpvar_11.z)));
  worldNormal_3 = tmpvar_58;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_12;
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_15;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_18 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = ((tmpvar_8 * tmpvar_1) * diff_18);
  c_17.xyz = tmpvar_20;
  c_17.w = tmpvar_9;
  c_16.w = c_17.w;
  mediump vec3 tmpvar_21;
  tmpvar_21 = c_17.xyz;
  c_16.xyz = tmpvar_21;
  c_3.xyz = c_16.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "SPOT" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_8;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 == 5.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    highp float fOffset_21;
    fOffset_21 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_21 = 0.75;
    };
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_21);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_20 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_11 = tmpvar_2;
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_14;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = FinalPosition_14;
      highp float fAdherenceScale_26;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((tmpvar_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        (mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_29.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (FinalPosition_14 + ((tmpvar_27 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((tmpvar_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((
        ((tmpvar_37.x * tmpvar_37.y) * tmpvar_37.x)
       * tmpvar_37.y) * _ST_WindTurbulences.x));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_12 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp vec3 tmpvar_40;
      tmpvar_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_41;
      tmpvar_41 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_42;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (tmpvar_41 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((tmpvar_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      vPos_39 = (vPos_24 + ((tmpvar_40 * 
        (((mix (
          mix (tmpvar_47, fTarget_44, fAmount_43)
        , fTarget_44, fAmount_43) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_14 = vPos_24;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_14;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    vPos_48.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * (
      ((_ST_WindGlobal.y * (tmpvar_53.x + (tmpvar_53.y * tmpvar_53.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_49)));
    vPos_48 = (normalize(vPos_48) * fLength_50);
    FinalPosition_14 = vPos_48;
  };
  tmpvar_10.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_55;
  v_55.x = _World2Object[0].x;
  v_55.y = _World2Object[1].x;
  v_55.z = _World2Object[2].x;
  v_55.w = _World2Object[3].x;
  highp vec4 v_56;
  v_56.x = _World2Object[0].y;
  v_56.y = _World2Object[1].y;
  v_56.z = _World2Object[2].y;
  v_56.w = _World2Object[3].y;
  highp vec4 v_57;
  v_57.x = _World2Object[0].z;
  v_57.y = _World2Object[1].z;
  v_57.z = _World2Object[2].z;
  v_57.w = _World2Object[3].z;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(((
    (v_55.xyz * tmpvar_11.x)
   + 
    (v_56.xyz * tmpvar_11.y)
  ) + (v_57.xyz * tmpvar_11.z)));
  worldNormal_3 = tmpvar_58;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_12.w * _Color.w);
  tmpvar_11 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_11 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  tmpvar_10 = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (_LightMatrix0 * tmpvar_17);
  lightCoord_5 = tmpvar_18;
  lowp vec4 tmpvar_19;
  mediump vec2 P_20;
  P_20 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_19 = texture2D (_LightTexture0, P_20);
  mediump float tmpvar_21;
  tmpvar_21 = dot (lightCoord_5.xyz, lightCoord_5.xyz);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_LightTextureB0, vec2(tmpvar_21));
  mediump float tmpvar_23;
  tmpvar_23 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_19.w) * tmpvar_22.w);
  atten_4 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_24;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_27 = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_10 * tmpvar_1) * diff_27);
  c_26.xyz = tmpvar_29;
  c_26.w = tmpvar_11;
  c_25.w = c_26.w;
  mediump vec3 tmpvar_30;
  tmpvar_30 = c_26.xyz;
  c_25.xyz = tmpvar_30;
  c_3.xyz = c_25.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SPOT" "GEOM_TYPE_FROND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_8;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 == 5.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    highp float fOffset_21;
    fOffset_21 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_21 = 0.75;
    };
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_21);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_20 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_11 = tmpvar_2;
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_14;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = FinalPosition_14;
      highp float fAdherenceScale_26;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((tmpvar_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        (mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_29.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (FinalPosition_14 + ((tmpvar_27 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((tmpvar_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((
        ((tmpvar_37.x * tmpvar_37.y) * tmpvar_37.x)
       * tmpvar_37.y) * _ST_WindTurbulences.x));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_12 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp vec3 tmpvar_40;
      tmpvar_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_41;
      tmpvar_41 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_42;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (tmpvar_41 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((tmpvar_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      vPos_39 = (vPos_24 + ((tmpvar_40 * 
        (((mix (
          mix (tmpvar_47, fTarget_44, fAmount_43)
        , fTarget_44, fAmount_43) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_14 = vPos_24;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_14;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    vPos_48.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * (
      ((_ST_WindGlobal.y * (tmpvar_53.x + (tmpvar_53.y * tmpvar_53.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_49)));
    vPos_48 = (normalize(vPos_48) * fLength_50);
    FinalPosition_14 = vPos_48;
  };
  tmpvar_10.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_55;
  v_55.x = _World2Object[0].x;
  v_55.y = _World2Object[1].x;
  v_55.z = _World2Object[2].x;
  v_55.w = _World2Object[3].x;
  highp vec4 v_56;
  v_56.x = _World2Object[0].y;
  v_56.y = _World2Object[1].y;
  v_56.z = _World2Object[2].y;
  v_56.w = _World2Object[3].y;
  highp vec4 v_57;
  v_57.x = _World2Object[0].z;
  v_57.y = _World2Object[1].z;
  v_57.z = _World2Object[2].z;
  v_57.w = _World2Object[3].z;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(((
    (v_55.xyz * tmpvar_11.x)
   + 
    (v_56.xyz * tmpvar_11.y)
  ) + (v_57.xyz * tmpvar_11.z)));
  worldNormal_3 = tmpvar_58;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_12.w * _Color.w);
  tmpvar_11 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_11 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  tmpvar_10 = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (_LightMatrix0 * tmpvar_17);
  lightCoord_5 = tmpvar_18;
  lowp vec4 tmpvar_19;
  mediump vec2 P_20;
  P_20 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_19 = texture (_LightTexture0, P_20);
  mediump float tmpvar_21;
  tmpvar_21 = dot (lightCoord_5.xyz, lightCoord_5.xyz);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture (_LightTextureB0, vec2(tmpvar_21));
  mediump float tmpvar_23;
  tmpvar_23 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_19.w) * tmpvar_22.w);
  atten_4 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_24;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_27 = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_10 * tmpvar_1) * diff_27);
  c_26.xyz = tmpvar_29;
  c_26.w = tmpvar_11;
  c_25.w = c_26.w;
  mediump vec3 tmpvar_30;
  tmpvar_30 = c_26.xyz;
  c_25.xyz = tmpvar_30;
  c_3.xyz = c_25.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_8;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 == 5.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    highp float fOffset_21;
    fOffset_21 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_21 = 0.75;
    };
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_21);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_20 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_11 = tmpvar_2;
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_14;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = FinalPosition_14;
      highp float fAdherenceScale_26;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((tmpvar_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        (mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_29.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (FinalPosition_14 + ((tmpvar_27 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((tmpvar_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((
        ((tmpvar_37.x * tmpvar_37.y) * tmpvar_37.x)
       * tmpvar_37.y) * _ST_WindTurbulences.x));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_12 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp vec3 tmpvar_40;
      tmpvar_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_41;
      tmpvar_41 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_42;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (tmpvar_41 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((tmpvar_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      vPos_39 = (vPos_24 + ((tmpvar_40 * 
        (((mix (
          mix (tmpvar_47, fTarget_44, fAmount_43)
        , fTarget_44, fAmount_43) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_14 = vPos_24;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_14;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    vPos_48.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * (
      ((_ST_WindGlobal.y * (tmpvar_53.x + (tmpvar_53.y * tmpvar_53.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_49)));
    vPos_48 = (normalize(vPos_48) * fLength_50);
    FinalPosition_14 = vPos_48;
  };
  tmpvar_10.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_55;
  v_55.x = _World2Object[0].x;
  v_55.y = _World2Object[1].x;
  v_55.z = _World2Object[2].x;
  v_55.w = _World2Object[3].x;
  highp vec4 v_56;
  v_56.x = _World2Object[0].y;
  v_56.y = _World2Object[1].y;
  v_56.z = _World2Object[2].y;
  v_56.w = _World2Object[3].y;
  highp vec4 v_57;
  v_57.x = _World2Object[0].z;
  v_57.y = _World2Object[1].z;
  v_57.z = _World2Object[2].z;
  v_57.w = _World2Object[3].z;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(((
    (v_55.xyz * tmpvar_11.x)
   + 
    (v_56.xyz * tmpvar_11.y)
  ) + (v_57.xyz * tmpvar_11.z)));
  worldNormal_3 = tmpvar_58;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xyz;
  lightCoord_4 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_19;
  tmpvar_19 = (texture2D (_LightTextureB0, vec2(tmpvar_18)).w * textureCube (_LightTexture0, lightCoord_4).w);
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_20;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_19);
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_23 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tmpvar_9 * tmpvar_1) * diff_23);
  c_22.xyz = tmpvar_25;
  c_22.w = tmpvar_10;
  c_21.w = c_22.w;
  mediump vec3 tmpvar_26;
  tmpvar_26 = c_22.xyz;
  c_21.xyz = tmpvar_26;
  c_3.xyz = c_21.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "GEOM_TYPE_FROND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_8;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 == 5.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    highp float fOffset_21;
    fOffset_21 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_21 = 0.75;
    };
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_21);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_20 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_11 = tmpvar_2;
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_14;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = FinalPosition_14;
      highp float fAdherenceScale_26;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((tmpvar_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        (mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_29.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (FinalPosition_14 + ((tmpvar_27 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((tmpvar_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((
        ((tmpvar_37.x * tmpvar_37.y) * tmpvar_37.x)
       * tmpvar_37.y) * _ST_WindTurbulences.x));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_12 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp vec3 tmpvar_40;
      tmpvar_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_41;
      tmpvar_41 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_42;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (tmpvar_41 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((tmpvar_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      vPos_39 = (vPos_24 + ((tmpvar_40 * 
        (((mix (
          mix (tmpvar_47, fTarget_44, fAmount_43)
        , fTarget_44, fAmount_43) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_14 = vPos_24;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_14;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    vPos_48.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * (
      ((_ST_WindGlobal.y * (tmpvar_53.x + (tmpvar_53.y * tmpvar_53.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_49)));
    vPos_48 = (normalize(vPos_48) * fLength_50);
    FinalPosition_14 = vPos_48;
  };
  tmpvar_10.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_55;
  v_55.x = _World2Object[0].x;
  v_55.y = _World2Object[1].x;
  v_55.z = _World2Object[2].x;
  v_55.w = _World2Object[3].x;
  highp vec4 v_56;
  v_56.x = _World2Object[0].y;
  v_56.y = _World2Object[1].y;
  v_56.z = _World2Object[2].y;
  v_56.w = _World2Object[3].y;
  highp vec4 v_57;
  v_57.x = _World2Object[0].z;
  v_57.y = _World2Object[1].z;
  v_57.z = _World2Object[2].z;
  v_57.w = _World2Object[3].z;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(((
    (v_55.xyz * tmpvar_11.x)
   + 
    (v_56.xyz * tmpvar_11.y)
  ) + (v_57.xyz * tmpvar_11.z)));
  worldNormal_3 = tmpvar_58;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xyz;
  lightCoord_4 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_19;
  tmpvar_19 = (texture (_LightTextureB0, vec2(tmpvar_18)).w * texture (_LightTexture0, lightCoord_4).w);
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_20;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_19);
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_23 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tmpvar_9 * tmpvar_1) * diff_23);
  c_22.xyz = tmpvar_25;
  c_22.w = tmpvar_10;
  c_21.w = c_22.w;
  mediump vec3 tmpvar_26;
  tmpvar_26 = c_22.xyz;
  c_21.xyz = tmpvar_26;
  c_3.xyz = c_21.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_8;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 == 5.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    highp float fOffset_21;
    fOffset_21 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_21 = 0.75;
    };
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_21);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_20 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_11 = tmpvar_2;
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_14;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = FinalPosition_14;
      highp float fAdherenceScale_26;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((tmpvar_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        (mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_29.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (FinalPosition_14 + ((tmpvar_27 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((tmpvar_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((
        ((tmpvar_37.x * tmpvar_37.y) * tmpvar_37.x)
       * tmpvar_37.y) * _ST_WindTurbulences.x));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_12 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp vec3 tmpvar_40;
      tmpvar_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_41;
      tmpvar_41 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_42;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (tmpvar_41 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((tmpvar_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      vPos_39 = (vPos_24 + ((tmpvar_40 * 
        (((mix (
          mix (tmpvar_47, fTarget_44, fAmount_43)
        , fTarget_44, fAmount_43) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_14 = vPos_24;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_14;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    vPos_48.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * (
      ((_ST_WindGlobal.y * (tmpvar_53.x + (tmpvar_53.y * tmpvar_53.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_49)));
    vPos_48 = (normalize(vPos_48) * fLength_50);
    FinalPosition_14 = vPos_48;
  };
  tmpvar_10.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_55;
  v_55.x = _World2Object[0].x;
  v_55.y = _World2Object[1].x;
  v_55.z = _World2Object[2].x;
  v_55.w = _World2Object[3].x;
  highp vec4 v_56;
  v_56.x = _World2Object[0].y;
  v_56.y = _World2Object[1].y;
  v_56.z = _World2Object[2].y;
  v_56.w = _World2Object[3].y;
  highp vec4 v_57;
  v_57.x = _World2Object[0].z;
  v_57.y = _World2Object[1].z;
  v_57.z = _World2Object[2].z;
  v_57.w = _World2Object[3].z;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(((
    (v_55.xyz * tmpvar_11.x)
   + 
    (v_56.xyz * tmpvar_11.y)
  ) + (v_57.xyz * tmpvar_11.z)));
  worldNormal_3 = tmpvar_58;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec2 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xy;
  lightCoord_4 = tmpvar_17;
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_LightTexture0, lightCoord_4).w;
  lowp vec3 tmpvar_19;
  tmpvar_19 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_19;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_18);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_22 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tmpvar_9 * tmpvar_1) * diff_22);
  c_21.xyz = tmpvar_24;
  c_21.w = tmpvar_10;
  c_20.w = c_21.w;
  mediump vec3 tmpvar_25;
  tmpvar_25 = c_21.xyz;
  c_20.xyz = tmpvar_25;
  c_3.xyz = c_20.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "GEOM_TYPE_FROND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_8;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 == 5.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    highp float fOffset_21;
    fOffset_21 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_21 = 0.75;
    };
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_21);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_20 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_11 = tmpvar_2;
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_14;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = FinalPosition_14;
      highp float fAdherenceScale_26;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((tmpvar_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        (mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_29.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (FinalPosition_14 + ((tmpvar_27 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((tmpvar_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((
        ((tmpvar_37.x * tmpvar_37.y) * tmpvar_37.x)
       * tmpvar_37.y) * _ST_WindTurbulences.x));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_12 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp vec3 tmpvar_40;
      tmpvar_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_41;
      tmpvar_41 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_42;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (tmpvar_41 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((tmpvar_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      vPos_39 = (vPos_24 + ((tmpvar_40 * 
        (((mix (
          mix (tmpvar_47, fTarget_44, fAmount_43)
        , fTarget_44, fAmount_43) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_14 = vPos_24;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_14;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    vPos_48.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * (
      ((_ST_WindGlobal.y * (tmpvar_53.x + (tmpvar_53.y * tmpvar_53.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_49)));
    vPos_48 = (normalize(vPos_48) * fLength_50);
    FinalPosition_14 = vPos_48;
  };
  tmpvar_10.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_55;
  v_55.x = _World2Object[0].x;
  v_55.y = _World2Object[1].x;
  v_55.z = _World2Object[2].x;
  v_55.w = _World2Object[3].x;
  highp vec4 v_56;
  v_56.x = _World2Object[0].y;
  v_56.y = _World2Object[1].y;
  v_56.z = _World2Object[2].y;
  v_56.w = _World2Object[3].y;
  highp vec4 v_57;
  v_57.x = _World2Object[0].z;
  v_57.y = _World2Object[1].z;
  v_57.z = _World2Object[2].z;
  v_57.w = _World2Object[3].z;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(((
    (v_55.xyz * tmpvar_11.x)
   + 
    (v_56.xyz * tmpvar_11.y)
  ) + (v_57.xyz * tmpvar_11.z)));
  worldNormal_3 = tmpvar_58;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec2 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xy;
  lightCoord_4 = tmpvar_17;
  lowp float tmpvar_18;
  tmpvar_18 = texture (_LightTexture0, lightCoord_4).w;
  lowp vec3 tmpvar_19;
  tmpvar_19 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_19;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_18);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_22 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tmpvar_9 * tmpvar_1) * diff_22);
  c_21.xyz = tmpvar_24;
  c_21.w = tmpvar_10;
  c_20.w = c_21.w;
  mediump vec3 tmpvar_25;
  tmpvar_25 = c_21.xyz;
  c_20.xyz = tmpvar_25;
  c_3.xyz = c_20.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_8;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_9;
  highp float cse_10;
  cse_10 = _Object2World[3].x;
  highp float cse_11;
  cse_11 = _Object2World[3].y;
  highp float tmpvar_12;
  tmpvar_12 = clamp (((
    fract(((cse_10 + cse_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_12;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fAdherenceScale_28;
      highp vec3 tmpvar_29;
      tmpvar_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_30;
      tmpvar_30 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (tmpvar_30 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((tmpvar_30 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_30 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((tmpvar_30 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        (mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_31.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((tmpvar_29 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((tmpvar_30 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((
        ((tmpvar_39.x * tmpvar_39.y) * tmpvar_39.x)
       * tmpvar_39.y) * _ST_WindTurbulences.x));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp vec3 tmpvar_42;
      tmpvar_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_43;
      tmpvar_43 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_44;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (tmpvar_43 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((tmpvar_43 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_43 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      vPos_41 = (vPos_26 + ((tmpvar_42 * 
        (((mix (
          mix (tmpvar_49, fTarget_46, fAmount_45)
        , fTarget_46, fAmount_45) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_17;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (cse_10 + _ST_WindGlobal.x);
    tmpvar_54.y = (cse_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    vPos_50.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * (
      ((_ST_WindGlobal.y * (tmpvar_55.x + (tmpvar_55.y * tmpvar_55.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_51)));
    vPos_50 = (normalize(vPos_50) * fLength_52);
    FinalPosition_17 = vPos_50;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * tmpvar_14.x)
   + 
    (v_58.xyz * tmpvar_14.y)
  ) + (v_59.xyz * tmpvar_14.z)));
  worldNormal_3 = tmpvar_60;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (_LightMatrix0 * tmpvar_17).xyz;
  lightCoord_4 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_20;
  tmpvar_20 = texture2D (_LightTexture0, vec2(tmpvar_19)).w;
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_21;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_20);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_24 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tmpvar_9 * tmpvar_1) * diff_24);
  c_23.xyz = tmpvar_26;
  c_23.w = tmpvar_10;
  c_22.w = c_23.w;
  mediump vec3 tmpvar_27;
  tmpvar_27 = c_23.xyz;
  c_22.xyz = tmpvar_27;
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_8;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_9;
  highp float cse_10;
  cse_10 = _Object2World[3].x;
  highp float cse_11;
  cse_11 = _Object2World[3].y;
  highp float tmpvar_12;
  tmpvar_12 = clamp (((
    fract(((cse_10 + cse_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_12;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fAdherenceScale_28;
      highp vec3 tmpvar_29;
      tmpvar_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_30;
      tmpvar_30 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (tmpvar_30 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((tmpvar_30 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_30 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((tmpvar_30 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        (mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_31.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((tmpvar_29 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((tmpvar_30 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((
        ((tmpvar_39.x * tmpvar_39.y) * tmpvar_39.x)
       * tmpvar_39.y) * _ST_WindTurbulences.x));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp vec3 tmpvar_42;
      tmpvar_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_43;
      tmpvar_43 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_44;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (tmpvar_43 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((tmpvar_43 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_43 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      vPos_41 = (vPos_26 + ((tmpvar_42 * 
        (((mix (
          mix (tmpvar_49, fTarget_46, fAmount_45)
        , fTarget_46, fAmount_45) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_17;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (cse_10 + _ST_WindGlobal.x);
    tmpvar_54.y = (cse_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    vPos_50.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * (
      ((_ST_WindGlobal.y * (tmpvar_55.x + (tmpvar_55.y * tmpvar_55.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_51)));
    vPos_50 = (normalize(vPos_50) * fLength_52);
    FinalPosition_17 = vPos_50;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * tmpvar_14.x)
   + 
    (v_58.xyz * tmpvar_14.y)
  ) + (v_59.xyz * tmpvar_14.z)));
  worldNormal_3 = tmpvar_60;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (_LightMatrix0 * tmpvar_17).xyz;
  lightCoord_4 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_20;
  tmpvar_20 = texture (_LightTexture0, vec2(tmpvar_19)).w;
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_21;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_20);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_24 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tmpvar_9 * tmpvar_1) * diff_24);
  c_23.xyz = tmpvar_26;
  c_23.w = tmpvar_10;
  c_22.w = c_23.w;
  mediump vec3 tmpvar_27;
  tmpvar_27 = c_23.xyz;
  c_22.xyz = tmpvar_27;
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_8;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_9;
  highp float cse_10;
  cse_10 = _Object2World[3].x;
  highp float cse_11;
  cse_11 = _Object2World[3].y;
  highp float tmpvar_12;
  tmpvar_12 = clamp (((
    fract(((cse_10 + cse_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_12;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fAdherenceScale_28;
      highp vec3 tmpvar_29;
      tmpvar_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_30;
      tmpvar_30 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (tmpvar_30 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((tmpvar_30 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_30 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((tmpvar_30 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        (mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_31.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((tmpvar_29 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((tmpvar_30 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((
        ((tmpvar_39.x * tmpvar_39.y) * tmpvar_39.x)
       * tmpvar_39.y) * _ST_WindTurbulences.x));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp vec3 tmpvar_42;
      tmpvar_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_43;
      tmpvar_43 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_44;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (tmpvar_43 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((tmpvar_43 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_43 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      vPos_41 = (vPos_26 + ((tmpvar_42 * 
        (((mix (
          mix (tmpvar_49, fTarget_46, fAmount_45)
        , fTarget_46, fAmount_45) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_17;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (cse_10 + _ST_WindGlobal.x);
    tmpvar_54.y = (cse_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    vPos_50.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * (
      ((_ST_WindGlobal.y * (tmpvar_55.x + (tmpvar_55.y * tmpvar_55.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_51)));
    vPos_50 = (normalize(vPos_50) * fLength_52);
    FinalPosition_17 = vPos_50;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * tmpvar_14.x)
   + 
    (v_58.xyz * tmpvar_14.y)
  ) + (v_59.xyz * tmpvar_14.z)));
  worldNormal_3 = tmpvar_60;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_12;
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_14 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_15;
  lowp vec3 tmpvar_16;
  tmpvar_16 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_16;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_19 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.xyz = tmpvar_21;
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  mediump vec3 tmpvar_22;
  tmpvar_22 = c_18.xyz;
  c_17.xyz = tmpvar_22;
  c_3.xyz = c_17.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_8;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_9;
  highp float cse_10;
  cse_10 = _Object2World[3].x;
  highp float cse_11;
  cse_11 = _Object2World[3].y;
  highp float tmpvar_12;
  tmpvar_12 = clamp (((
    fract(((cse_10 + cse_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_12;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fAdherenceScale_28;
      highp vec3 tmpvar_29;
      tmpvar_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_30;
      tmpvar_30 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (tmpvar_30 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((tmpvar_30 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_30 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((tmpvar_30 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        (mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_31.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((tmpvar_29 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((tmpvar_30 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((
        ((tmpvar_39.x * tmpvar_39.y) * tmpvar_39.x)
       * tmpvar_39.y) * _ST_WindTurbulences.x));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp vec3 tmpvar_42;
      tmpvar_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_43;
      tmpvar_43 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_44;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (tmpvar_43 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((tmpvar_43 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_43 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      vPos_41 = (vPos_26 + ((tmpvar_42 * 
        (((mix (
          mix (tmpvar_49, fTarget_46, fAmount_45)
        , fTarget_46, fAmount_45) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_17;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (cse_10 + _ST_WindGlobal.x);
    tmpvar_54.y = (cse_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    vPos_50.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * (
      ((_ST_WindGlobal.y * (tmpvar_55.x + (tmpvar_55.y * tmpvar_55.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_51)));
    vPos_50 = (normalize(vPos_50) * fLength_52);
    FinalPosition_17 = vPos_50;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * tmpvar_14.x)
   + 
    (v_58.xyz * tmpvar_14.y)
  ) + (v_59.xyz * tmpvar_14.z)));
  worldNormal_3 = tmpvar_60;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_12;
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_14 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_15;
  lowp vec3 tmpvar_16;
  tmpvar_16 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_16;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_19 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.xyz = tmpvar_21;
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  mediump vec3 tmpvar_22;
  tmpvar_22 = c_18.xyz;
  c_17.xyz = tmpvar_22;
  c_3.xyz = c_17.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "SPOT" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_8;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_9;
  highp float cse_10;
  cse_10 = _Object2World[3].x;
  highp float cse_11;
  cse_11 = _Object2World[3].y;
  highp float tmpvar_12;
  tmpvar_12 = clamp (((
    fract(((cse_10 + cse_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_12;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fAdherenceScale_28;
      highp vec3 tmpvar_29;
      tmpvar_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_30;
      tmpvar_30 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (tmpvar_30 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((tmpvar_30 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_30 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((tmpvar_30 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        (mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_31.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((tmpvar_29 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((tmpvar_30 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((
        ((tmpvar_39.x * tmpvar_39.y) * tmpvar_39.x)
       * tmpvar_39.y) * _ST_WindTurbulences.x));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp vec3 tmpvar_42;
      tmpvar_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_43;
      tmpvar_43 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_44;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (tmpvar_43 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((tmpvar_43 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_43 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      vPos_41 = (vPos_26 + ((tmpvar_42 * 
        (((mix (
          mix (tmpvar_49, fTarget_46, fAmount_45)
        , fTarget_46, fAmount_45) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_17;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (cse_10 + _ST_WindGlobal.x);
    tmpvar_54.y = (cse_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    vPos_50.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * (
      ((_ST_WindGlobal.y * (tmpvar_55.x + (tmpvar_55.y * tmpvar_55.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_51)));
    vPos_50 = (normalize(vPos_50) * fLength_52);
    FinalPosition_17 = vPos_50;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * tmpvar_14.x)
   + 
    (v_58.xyz * tmpvar_14.y)
  ) + (v_59.xyz * tmpvar_14.z)));
  worldNormal_3 = tmpvar_60;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_12.w * _Color.w);
  tmpvar_11 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_11 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_16 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  tmpvar_10 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18);
  lightCoord_5 = tmpvar_19;
  lowp vec4 tmpvar_20;
  mediump vec2 P_21;
  P_21 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_20 = texture2D (_LightTexture0, P_21);
  mediump float tmpvar_22;
  tmpvar_22 = dot (lightCoord_5.xyz, lightCoord_5.xyz);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_LightTextureB0, vec2(tmpvar_22));
  mediump float tmpvar_24;
  tmpvar_24 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_20.w) * tmpvar_23.w);
  atten_4 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_25;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_28 = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tmpvar_10 * tmpvar_1) * diff_28);
  c_27.xyz = tmpvar_30;
  c_27.w = tmpvar_11;
  c_26.w = c_27.w;
  mediump vec3 tmpvar_31;
  tmpvar_31 = c_27.xyz;
  c_26.xyz = tmpvar_31;
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SPOT" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_8;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_9;
  highp float cse_10;
  cse_10 = _Object2World[3].x;
  highp float cse_11;
  cse_11 = _Object2World[3].y;
  highp float tmpvar_12;
  tmpvar_12 = clamp (((
    fract(((cse_10 + cse_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_12;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fAdherenceScale_28;
      highp vec3 tmpvar_29;
      tmpvar_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_30;
      tmpvar_30 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (tmpvar_30 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((tmpvar_30 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_30 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((tmpvar_30 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        (mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_31.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((tmpvar_29 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((tmpvar_30 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((
        ((tmpvar_39.x * tmpvar_39.y) * tmpvar_39.x)
       * tmpvar_39.y) * _ST_WindTurbulences.x));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp vec3 tmpvar_42;
      tmpvar_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_43;
      tmpvar_43 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_44;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (tmpvar_43 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((tmpvar_43 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_43 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      vPos_41 = (vPos_26 + ((tmpvar_42 * 
        (((mix (
          mix (tmpvar_49, fTarget_46, fAmount_45)
        , fTarget_46, fAmount_45) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_17;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (cse_10 + _ST_WindGlobal.x);
    tmpvar_54.y = (cse_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    vPos_50.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * (
      ((_ST_WindGlobal.y * (tmpvar_55.x + (tmpvar_55.y * tmpvar_55.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_51)));
    vPos_50 = (normalize(vPos_50) * fLength_52);
    FinalPosition_17 = vPos_50;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * tmpvar_14.x)
   + 
    (v_58.xyz * tmpvar_14.y)
  ) + (v_59.xyz * tmpvar_14.z)));
  worldNormal_3 = tmpvar_60;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_12.w * _Color.w);
  tmpvar_11 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_11 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_16 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  tmpvar_10 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18);
  lightCoord_5 = tmpvar_19;
  lowp vec4 tmpvar_20;
  mediump vec2 P_21;
  P_21 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_20 = texture (_LightTexture0, P_21);
  mediump float tmpvar_22;
  tmpvar_22 = dot (lightCoord_5.xyz, lightCoord_5.xyz);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture (_LightTextureB0, vec2(tmpvar_22));
  mediump float tmpvar_24;
  tmpvar_24 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_20.w) * tmpvar_23.w);
  atten_4 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_25;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_28 = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tmpvar_10 * tmpvar_1) * diff_28);
  c_27.xyz = tmpvar_30;
  c_27.w = tmpvar_11;
  c_26.w = c_27.w;
  mediump vec3 tmpvar_31;
  tmpvar_31 = c_27.xyz;
  c_26.xyz = tmpvar_31;
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_8;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_9;
  highp float cse_10;
  cse_10 = _Object2World[3].x;
  highp float cse_11;
  cse_11 = _Object2World[3].y;
  highp float tmpvar_12;
  tmpvar_12 = clamp (((
    fract(((cse_10 + cse_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_12;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fAdherenceScale_28;
      highp vec3 tmpvar_29;
      tmpvar_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_30;
      tmpvar_30 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (tmpvar_30 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((tmpvar_30 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_30 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((tmpvar_30 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        (mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_31.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((tmpvar_29 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((tmpvar_30 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((
        ((tmpvar_39.x * tmpvar_39.y) * tmpvar_39.x)
       * tmpvar_39.y) * _ST_WindTurbulences.x));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp vec3 tmpvar_42;
      tmpvar_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_43;
      tmpvar_43 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_44;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (tmpvar_43 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((tmpvar_43 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_43 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      vPos_41 = (vPos_26 + ((tmpvar_42 * 
        (((mix (
          mix (tmpvar_49, fTarget_46, fAmount_45)
        , fTarget_46, fAmount_45) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_17;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (cse_10 + _ST_WindGlobal.x);
    tmpvar_54.y = (cse_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    vPos_50.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * (
      ((_ST_WindGlobal.y * (tmpvar_55.x + (tmpvar_55.y * tmpvar_55.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_51)));
    vPos_50 = (normalize(vPos_50) * fLength_52);
    FinalPosition_17 = vPos_50;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * tmpvar_14.x)
   + 
    (v_58.xyz * tmpvar_14.y)
  ) + (v_59.xyz * tmpvar_14.z)));
  worldNormal_3 = tmpvar_60;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (_LightMatrix0 * tmpvar_17).xyz;
  lightCoord_4 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_20;
  tmpvar_20 = (texture2D (_LightTextureB0, vec2(tmpvar_19)).w * textureCube (_LightTexture0, lightCoord_4).w);
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_21;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_20);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_24 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tmpvar_9 * tmpvar_1) * diff_24);
  c_23.xyz = tmpvar_26;
  c_23.w = tmpvar_10;
  c_22.w = c_23.w;
  mediump vec3 tmpvar_27;
  tmpvar_27 = c_23.xyz;
  c_22.xyz = tmpvar_27;
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_8;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_9;
  highp float cse_10;
  cse_10 = _Object2World[3].x;
  highp float cse_11;
  cse_11 = _Object2World[3].y;
  highp float tmpvar_12;
  tmpvar_12 = clamp (((
    fract(((cse_10 + cse_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_12;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fAdherenceScale_28;
      highp vec3 tmpvar_29;
      tmpvar_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_30;
      tmpvar_30 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (tmpvar_30 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((tmpvar_30 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_30 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((tmpvar_30 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        (mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_31.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((tmpvar_29 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((tmpvar_30 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((
        ((tmpvar_39.x * tmpvar_39.y) * tmpvar_39.x)
       * tmpvar_39.y) * _ST_WindTurbulences.x));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp vec3 tmpvar_42;
      tmpvar_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_43;
      tmpvar_43 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_44;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (tmpvar_43 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((tmpvar_43 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_43 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      vPos_41 = (vPos_26 + ((tmpvar_42 * 
        (((mix (
          mix (tmpvar_49, fTarget_46, fAmount_45)
        , fTarget_46, fAmount_45) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_17;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (cse_10 + _ST_WindGlobal.x);
    tmpvar_54.y = (cse_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    vPos_50.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * (
      ((_ST_WindGlobal.y * (tmpvar_55.x + (tmpvar_55.y * tmpvar_55.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_51)));
    vPos_50 = (normalize(vPos_50) * fLength_52);
    FinalPosition_17 = vPos_50;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * tmpvar_14.x)
   + 
    (v_58.xyz * tmpvar_14.y)
  ) + (v_59.xyz * tmpvar_14.z)));
  worldNormal_3 = tmpvar_60;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (_LightMatrix0 * tmpvar_17).xyz;
  lightCoord_4 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_20;
  tmpvar_20 = (texture (_LightTextureB0, vec2(tmpvar_19)).w * texture (_LightTexture0, lightCoord_4).w);
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_21;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_20);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_24 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tmpvar_9 * tmpvar_1) * diff_24);
  c_23.xyz = tmpvar_26;
  c_23.w = tmpvar_10;
  c_22.w = c_23.w;
  mediump vec3 tmpvar_27;
  tmpvar_27 = c_23.xyz;
  c_22.xyz = tmpvar_27;
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_8;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_9;
  highp float cse_10;
  cse_10 = _Object2World[3].x;
  highp float cse_11;
  cse_11 = _Object2World[3].y;
  highp float tmpvar_12;
  tmpvar_12 = clamp (((
    fract(((cse_10 + cse_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_12;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fAdherenceScale_28;
      highp vec3 tmpvar_29;
      tmpvar_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_30;
      tmpvar_30 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (tmpvar_30 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((tmpvar_30 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_30 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((tmpvar_30 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        (mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_31.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((tmpvar_29 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((tmpvar_30 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((
        ((tmpvar_39.x * tmpvar_39.y) * tmpvar_39.x)
       * tmpvar_39.y) * _ST_WindTurbulences.x));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp vec3 tmpvar_42;
      tmpvar_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_43;
      tmpvar_43 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_44;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (tmpvar_43 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((tmpvar_43 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_43 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      vPos_41 = (vPos_26 + ((tmpvar_42 * 
        (((mix (
          mix (tmpvar_49, fTarget_46, fAmount_45)
        , fTarget_46, fAmount_45) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_17;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (cse_10 + _ST_WindGlobal.x);
    tmpvar_54.y = (cse_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    vPos_50.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * (
      ((_ST_WindGlobal.y * (tmpvar_55.x + (tmpvar_55.y * tmpvar_55.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_51)));
    vPos_50 = (normalize(vPos_50) * fLength_52);
    FinalPosition_17 = vPos_50;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * tmpvar_14.x)
   + 
    (v_58.xyz * tmpvar_14.y)
  ) + (v_59.xyz * tmpvar_14.z)));
  worldNormal_3 = tmpvar_60;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec2 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_18;
  tmpvar_18 = (_LightMatrix0 * tmpvar_17).xy;
  lightCoord_4 = tmpvar_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, lightCoord_4).w;
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_20;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_19);
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_23 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tmpvar_9 * tmpvar_1) * diff_23);
  c_22.xyz = tmpvar_25;
  c_22.w = tmpvar_10;
  c_21.w = c_22.w;
  mediump vec3 tmpvar_26;
  tmpvar_26 = c_22.xyz;
  c_21.xyz = tmpvar_26;
  c_3.xyz = c_21.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_8;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_9;
  highp float cse_10;
  cse_10 = _Object2World[3].x;
  highp float cse_11;
  cse_11 = _Object2World[3].y;
  highp float tmpvar_12;
  tmpvar_12 = clamp (((
    fract(((cse_10 + cse_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_12;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fAdherenceScale_28;
      highp vec3 tmpvar_29;
      tmpvar_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_30;
      tmpvar_30 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (tmpvar_30 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((tmpvar_30 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_30 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((tmpvar_30 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        (mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_31.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((tmpvar_29 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((tmpvar_30 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((
        ((tmpvar_39.x * tmpvar_39.y) * tmpvar_39.x)
       * tmpvar_39.y) * _ST_WindTurbulences.x));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp vec3 tmpvar_42;
      tmpvar_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_43;
      tmpvar_43 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_44;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (tmpvar_43 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((tmpvar_43 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_43 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      vPos_41 = (vPos_26 + ((tmpvar_42 * 
        (((mix (
          mix (tmpvar_49, fTarget_46, fAmount_45)
        , fTarget_46, fAmount_45) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_17;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (cse_10 + _ST_WindGlobal.x);
    tmpvar_54.y = (cse_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    vPos_50.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * (
      ((_ST_WindGlobal.y * (tmpvar_55.x + (tmpvar_55.y * tmpvar_55.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_51)));
    vPos_50 = (normalize(vPos_50) * fLength_52);
    FinalPosition_17 = vPos_50;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * tmpvar_14.x)
   + 
    (v_58.xyz * tmpvar_14.y)
  ) + (v_59.xyz * tmpvar_14.z)));
  worldNormal_3 = tmpvar_60;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec2 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_18;
  tmpvar_18 = (_LightMatrix0 * tmpvar_17).xy;
  lightCoord_4 = tmpvar_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture (_LightTexture0, lightCoord_4).w;
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_20;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_19);
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_23 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tmpvar_9 * tmpvar_1) * diff_23);
  c_22.xyz = tmpvar_25;
  c_22.w = tmpvar_10;
  c_21.w = c_22.w;
  mediump vec3 tmpvar_26;
  tmpvar_26 = c_22.xyz;
  c_21.xyz = tmpvar_26;
  c_3.xyz = c_21.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_9;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_13;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 == 5.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    highp float fOffset_24;
    fOffset_24 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_24 = 0.75;
    };
    highp vec4 tmpvar_25;
    tmpvar_25.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_25.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_24);
    highp vec4 tmpvar_26;
    tmpvar_26 = abs(((
      fract((tmpvar_25 + 0.5))
     * 2.0) - 1.0));
    vPos_23 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_15 = tmpvar_2;
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_27;
    vPos_27 = FinalPosition_18;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_28;
      vPos_28 = FinalPosition_18;
      highp float fAdherenceScale_29;
      highp vec3 tmpvar_30;
      tmpvar_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_31;
      tmpvar_31 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_32;
      highp float fOscillation_33;
      fOscillation_33 = 1.0;
      highp float fAmount_34;
      highp float fTarget_35;
      highp vec4 tmpvar_36;
      tmpvar_36.x = (tmpvar_31 + _glesMultiTexCoord0.w);
      tmpvar_36.y = ((tmpvar_31 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_36.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_31 + _glesMultiTexCoord0.w));
      tmpvar_36.w = ((tmpvar_31 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      vOscillations_32 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      highp float tmpvar_38;
      tmpvar_38 = (vOscillations_32.y * vOscillations_32.z);
      fTarget_35 = 1.0;
      fAmount_34 = tmpvar_38;
      if ((tmpvar_38 < 0.0)) {
        fTarget_35 = -1.0;
        fAmount_34 = -(tmpvar_38);
      };
      fOscillation_33 = (((
        (mix (mix (tmpvar_38, fTarget_35, fAmount_34), fTarget_35, fAmount_34) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_32.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_32.w * _ST_WindBranchWhip.x)));
      vPos_28 = (FinalPosition_18 + ((tmpvar_30 * fOscillation_33) * _ST_WindBranch.y));
      highp vec4 tmpvar_39;
      tmpvar_39.zw = vec2(0.0, 0.0);
      tmpvar_39.x = ((tmpvar_31 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_39.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_40;
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      tmpvar_40 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((
        ((tmpvar_40.x * tmpvar_40.y) * tmpvar_40.x)
       * tmpvar_40.y) * _ST_WindTurbulences.x));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_32.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_28 = (vPos_28 + ((
        ((vRotatedBranchAnchor_16 - vPos_28) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_27 = vPos_28;
    } else {
      highp vec3 vPos_42;
      vPos_42 = vPos_27;
      highp vec3 tmpvar_43;
      tmpvar_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_44;
      tmpvar_44 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_45;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (tmpvar_44 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((tmpvar_44 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_44 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_45 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_45.y * vOscillations_45.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      vPos_42 = (vPos_27 + ((tmpvar_43 * 
        (((mix (
          mix (tmpvar_50, fTarget_47, fAmount_46)
        , fTarget_47, fAmount_46) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_45.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_27 = vPos_42;
    };
    FinalPosition_18 = vPos_27;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_18;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_54;
    tmpvar_54 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_55.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    vPos_51.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_56.x + (tmpvar_56.y * tmpvar_56.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_52)));
    vPos_51 = (normalize(vPos_51) * fLength_53);
    FinalPosition_18 = vPos_51;
  };
  tmpvar_14.xyz = FinalPosition_18;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * tmpvar_15.x)
   + 
    (v_59.xyz * tmpvar_15.y)
  ) + (v_60.xyz * tmpvar_15.z)));
  worldNormal_5 = tmpvar_61;
  highp mat3 tmpvar_62;
  tmpvar_62[0] = _Object2World[0].xyz;
  tmpvar_62[1] = _Object2World[1].xyz;
  tmpvar_62[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((tmpvar_62 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_63;
  lowp vec3 tmpvar_64;
  tmpvar_64 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_65;
  tmpvar_65 = (tmpvar_64 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_65;
  lowp vec3 tmpvar_66;
  tmpvar_66.x = worldTangent_4.x;
  tmpvar_66.y = worldBinormal_3.x;
  tmpvar_66.z = worldNormal_5.x;
  lowp vec3 tmpvar_67;
  tmpvar_67.x = worldTangent_4.y;
  tmpvar_67.y = worldBinormal_3.y;
  tmpvar_67.z = worldNormal_5.y;
  lowp vec3 tmpvar_68;
  tmpvar_68.x = worldTangent_4.z;
  tmpvar_68.y = worldBinormal_3.z;
  tmpvar_68.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_66;
  xlv_TEXCOORD1 = tmpvar_67;
  xlv_TEXCOORD2 = tmpvar_68;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec3 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18).xyz;
  lightCoord_5 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = dot (lightCoord_5, lightCoord_5);
  lowp float tmpvar_21;
  tmpvar_21 = texture2D (_LightTexture0, vec2(tmpvar_20)).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_17);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_17);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_17);
  lowp vec3 tmpvar_22;
  tmpvar_22 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_22;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_21);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_25 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_9 * tmpvar_1) * diff_25);
  c_24.xyz = tmpvar_27;
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  mediump vec3 tmpvar_28;
  tmpvar_28 = c_24.xyz;
  c_23.xyz = tmpvar_28;
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
in vec4 _glesTANGENT;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out lowp vec3 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out mediump vec4 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_9;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_13;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 == 5.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    highp float fOffset_24;
    fOffset_24 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_24 = 0.75;
    };
    highp vec4 tmpvar_25;
    tmpvar_25.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_25.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_24);
    highp vec4 tmpvar_26;
    tmpvar_26 = abs(((
      fract((tmpvar_25 + 0.5))
     * 2.0) - 1.0));
    vPos_23 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_15 = tmpvar_2;
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_27;
    vPos_27 = FinalPosition_18;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_28;
      vPos_28 = FinalPosition_18;
      highp float fAdherenceScale_29;
      highp vec3 tmpvar_30;
      tmpvar_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_31;
      tmpvar_31 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_32;
      highp float fOscillation_33;
      fOscillation_33 = 1.0;
      highp float fAmount_34;
      highp float fTarget_35;
      highp vec4 tmpvar_36;
      tmpvar_36.x = (tmpvar_31 + _glesMultiTexCoord0.w);
      tmpvar_36.y = ((tmpvar_31 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_36.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_31 + _glesMultiTexCoord0.w));
      tmpvar_36.w = ((tmpvar_31 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      vOscillations_32 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      highp float tmpvar_38;
      tmpvar_38 = (vOscillations_32.y * vOscillations_32.z);
      fTarget_35 = 1.0;
      fAmount_34 = tmpvar_38;
      if ((tmpvar_38 < 0.0)) {
        fTarget_35 = -1.0;
        fAmount_34 = -(tmpvar_38);
      };
      fOscillation_33 = (((
        (mix (mix (tmpvar_38, fTarget_35, fAmount_34), fTarget_35, fAmount_34) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_32.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_32.w * _ST_WindBranchWhip.x)));
      vPos_28 = (FinalPosition_18 + ((tmpvar_30 * fOscillation_33) * _ST_WindBranch.y));
      highp vec4 tmpvar_39;
      tmpvar_39.zw = vec2(0.0, 0.0);
      tmpvar_39.x = ((tmpvar_31 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_39.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_40;
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      tmpvar_40 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((
        ((tmpvar_40.x * tmpvar_40.y) * tmpvar_40.x)
       * tmpvar_40.y) * _ST_WindTurbulences.x));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_32.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_28 = (vPos_28 + ((
        ((vRotatedBranchAnchor_16 - vPos_28) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_27 = vPos_28;
    } else {
      highp vec3 vPos_42;
      vPos_42 = vPos_27;
      highp vec3 tmpvar_43;
      tmpvar_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_44;
      tmpvar_44 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_45;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (tmpvar_44 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((tmpvar_44 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_44 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_45 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_45.y * vOscillations_45.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      vPos_42 = (vPos_27 + ((tmpvar_43 * 
        (((mix (
          mix (tmpvar_50, fTarget_47, fAmount_46)
        , fTarget_47, fAmount_46) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_45.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_27 = vPos_42;
    };
    FinalPosition_18 = vPos_27;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_18;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_54;
    tmpvar_54 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_55.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    vPos_51.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_56.x + (tmpvar_56.y * tmpvar_56.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_52)));
    vPos_51 = (normalize(vPos_51) * fLength_53);
    FinalPosition_18 = vPos_51;
  };
  tmpvar_14.xyz = FinalPosition_18;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * tmpvar_15.x)
   + 
    (v_59.xyz * tmpvar_15.y)
  ) + (v_60.xyz * tmpvar_15.z)));
  worldNormal_5 = tmpvar_61;
  highp mat3 tmpvar_62;
  tmpvar_62[0] = _Object2World[0].xyz;
  tmpvar_62[1] = _Object2World[1].xyz;
  tmpvar_62[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((tmpvar_62 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_63;
  lowp vec3 tmpvar_64;
  tmpvar_64 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_65;
  tmpvar_65 = (tmpvar_64 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_65;
  lowp vec3 tmpvar_66;
  tmpvar_66.x = worldTangent_4.x;
  tmpvar_66.y = worldBinormal_3.x;
  tmpvar_66.z = worldNormal_5.x;
  lowp vec3 tmpvar_67;
  tmpvar_67.x = worldTangent_4.y;
  tmpvar_67.y = worldBinormal_3.y;
  tmpvar_67.z = worldNormal_5.y;
  lowp vec3 tmpvar_68;
  tmpvar_68.x = worldTangent_4.z;
  tmpvar_68.y = worldBinormal_3.z;
  tmpvar_68.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_66;
  xlv_TEXCOORD1 = tmpvar_67;
  xlv_TEXCOORD2 = tmpvar_68;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
in lowp vec3 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in mediump vec4 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec3 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18).xyz;
  lightCoord_5 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = dot (lightCoord_5, lightCoord_5);
  lowp float tmpvar_21;
  tmpvar_21 = texture (_LightTexture0, vec2(tmpvar_20)).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_17);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_17);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_17);
  lowp vec3 tmpvar_22;
  tmpvar_22 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_22;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_21);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_25 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_9 * tmpvar_1) * diff_25);
  c_24.xyz = tmpvar_27;
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  mediump vec3 tmpvar_28;
  tmpvar_28 = c_24.xyz;
  c_23.xyz = tmpvar_28;
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_9;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_13;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 == 5.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    highp float fOffset_24;
    fOffset_24 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_24 = 0.75;
    };
    highp vec4 tmpvar_25;
    tmpvar_25.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_25.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_24);
    highp vec4 tmpvar_26;
    tmpvar_26 = abs(((
      fract((tmpvar_25 + 0.5))
     * 2.0) - 1.0));
    vPos_23 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_15 = tmpvar_2;
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_27;
    vPos_27 = FinalPosition_18;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_28;
      vPos_28 = FinalPosition_18;
      highp float fAdherenceScale_29;
      highp vec3 tmpvar_30;
      tmpvar_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_31;
      tmpvar_31 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_32;
      highp float fOscillation_33;
      fOscillation_33 = 1.0;
      highp float fAmount_34;
      highp float fTarget_35;
      highp vec4 tmpvar_36;
      tmpvar_36.x = (tmpvar_31 + _glesMultiTexCoord0.w);
      tmpvar_36.y = ((tmpvar_31 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_36.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_31 + _glesMultiTexCoord0.w));
      tmpvar_36.w = ((tmpvar_31 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      vOscillations_32 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      highp float tmpvar_38;
      tmpvar_38 = (vOscillations_32.y * vOscillations_32.z);
      fTarget_35 = 1.0;
      fAmount_34 = tmpvar_38;
      if ((tmpvar_38 < 0.0)) {
        fTarget_35 = -1.0;
        fAmount_34 = -(tmpvar_38);
      };
      fOscillation_33 = (((
        (mix (mix (tmpvar_38, fTarget_35, fAmount_34), fTarget_35, fAmount_34) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_32.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_32.w * _ST_WindBranchWhip.x)));
      vPos_28 = (FinalPosition_18 + ((tmpvar_30 * fOscillation_33) * _ST_WindBranch.y));
      highp vec4 tmpvar_39;
      tmpvar_39.zw = vec2(0.0, 0.0);
      tmpvar_39.x = ((tmpvar_31 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_39.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_40;
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      tmpvar_40 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((
        ((tmpvar_40.x * tmpvar_40.y) * tmpvar_40.x)
       * tmpvar_40.y) * _ST_WindTurbulences.x));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_32.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_28 = (vPos_28 + ((
        ((vRotatedBranchAnchor_16 - vPos_28) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_27 = vPos_28;
    } else {
      highp vec3 vPos_42;
      vPos_42 = vPos_27;
      highp vec3 tmpvar_43;
      tmpvar_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_44;
      tmpvar_44 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_45;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (tmpvar_44 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((tmpvar_44 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_44 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_45 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_45.y * vOscillations_45.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      vPos_42 = (vPos_27 + ((tmpvar_43 * 
        (((mix (
          mix (tmpvar_50, fTarget_47, fAmount_46)
        , fTarget_47, fAmount_46) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_45.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_27 = vPos_42;
    };
    FinalPosition_18 = vPos_27;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_18;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_54;
    tmpvar_54 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_55.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    vPos_51.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_56.x + (tmpvar_56.y * tmpvar_56.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_52)));
    vPos_51 = (normalize(vPos_51) * fLength_53);
    FinalPosition_18 = vPos_51;
  };
  tmpvar_14.xyz = FinalPosition_18;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * tmpvar_15.x)
   + 
    (v_59.xyz * tmpvar_15.y)
  ) + (v_60.xyz * tmpvar_15.z)));
  worldNormal_5 = tmpvar_61;
  highp mat3 tmpvar_62;
  tmpvar_62[0] = _Object2World[0].xyz;
  tmpvar_62[1] = _Object2World[1].xyz;
  tmpvar_62[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((tmpvar_62 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_63;
  lowp vec3 tmpvar_64;
  tmpvar_64 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_65;
  tmpvar_65 = (tmpvar_64 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_65;
  lowp vec3 tmpvar_66;
  tmpvar_66.x = worldTangent_4.x;
  tmpvar_66.y = worldBinormal_3.x;
  tmpvar_66.z = worldNormal_5.x;
  lowp vec3 tmpvar_67;
  tmpvar_67.x = worldTangent_4.y;
  tmpvar_67.y = worldBinormal_3.y;
  tmpvar_67.z = worldNormal_5.y;
  lowp vec3 tmpvar_68;
  tmpvar_68.x = worldTangent_4.z;
  tmpvar_68.y = worldBinormal_3.z;
  tmpvar_68.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_66;
  xlv_TEXCOORD1 = tmpvar_67;
  xlv_TEXCOORD2 = tmpvar_68;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_12;
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_14 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_15;
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_16);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_16);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_16);
  lowp vec3 tmpvar_17;
  tmpvar_17 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_17;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_20 = tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = ((tmpvar_8 * tmpvar_1) * diff_20);
  c_19.xyz = tmpvar_22;
  c_19.w = tmpvar_9;
  c_18.w = c_19.w;
  mediump vec3 tmpvar_23;
  tmpvar_23 = c_19.xyz;
  c_18.xyz = tmpvar_23;
  c_4.xyz = c_18.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
in vec4 _glesTANGENT;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out lowp vec3 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out mediump vec4 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_9;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_13;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 == 5.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    highp float fOffset_24;
    fOffset_24 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_24 = 0.75;
    };
    highp vec4 tmpvar_25;
    tmpvar_25.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_25.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_24);
    highp vec4 tmpvar_26;
    tmpvar_26 = abs(((
      fract((tmpvar_25 + 0.5))
     * 2.0) - 1.0));
    vPos_23 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_15 = tmpvar_2;
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_27;
    vPos_27 = FinalPosition_18;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_28;
      vPos_28 = FinalPosition_18;
      highp float fAdherenceScale_29;
      highp vec3 tmpvar_30;
      tmpvar_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_31;
      tmpvar_31 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_32;
      highp float fOscillation_33;
      fOscillation_33 = 1.0;
      highp float fAmount_34;
      highp float fTarget_35;
      highp vec4 tmpvar_36;
      tmpvar_36.x = (tmpvar_31 + _glesMultiTexCoord0.w);
      tmpvar_36.y = ((tmpvar_31 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_36.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_31 + _glesMultiTexCoord0.w));
      tmpvar_36.w = ((tmpvar_31 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      vOscillations_32 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      highp float tmpvar_38;
      tmpvar_38 = (vOscillations_32.y * vOscillations_32.z);
      fTarget_35 = 1.0;
      fAmount_34 = tmpvar_38;
      if ((tmpvar_38 < 0.0)) {
        fTarget_35 = -1.0;
        fAmount_34 = -(tmpvar_38);
      };
      fOscillation_33 = (((
        (mix (mix (tmpvar_38, fTarget_35, fAmount_34), fTarget_35, fAmount_34) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_32.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_32.w * _ST_WindBranchWhip.x)));
      vPos_28 = (FinalPosition_18 + ((tmpvar_30 * fOscillation_33) * _ST_WindBranch.y));
      highp vec4 tmpvar_39;
      tmpvar_39.zw = vec2(0.0, 0.0);
      tmpvar_39.x = ((tmpvar_31 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_39.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_40;
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      tmpvar_40 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((
        ((tmpvar_40.x * tmpvar_40.y) * tmpvar_40.x)
       * tmpvar_40.y) * _ST_WindTurbulences.x));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_32.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_28 = (vPos_28 + ((
        ((vRotatedBranchAnchor_16 - vPos_28) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_27 = vPos_28;
    } else {
      highp vec3 vPos_42;
      vPos_42 = vPos_27;
      highp vec3 tmpvar_43;
      tmpvar_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_44;
      tmpvar_44 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_45;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (tmpvar_44 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((tmpvar_44 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_44 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_45 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_45.y * vOscillations_45.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      vPos_42 = (vPos_27 + ((tmpvar_43 * 
        (((mix (
          mix (tmpvar_50, fTarget_47, fAmount_46)
        , fTarget_47, fAmount_46) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_45.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_27 = vPos_42;
    };
    FinalPosition_18 = vPos_27;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_18;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_54;
    tmpvar_54 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_55.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    vPos_51.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_56.x + (tmpvar_56.y * tmpvar_56.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_52)));
    vPos_51 = (normalize(vPos_51) * fLength_53);
    FinalPosition_18 = vPos_51;
  };
  tmpvar_14.xyz = FinalPosition_18;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * tmpvar_15.x)
   + 
    (v_59.xyz * tmpvar_15.y)
  ) + (v_60.xyz * tmpvar_15.z)));
  worldNormal_5 = tmpvar_61;
  highp mat3 tmpvar_62;
  tmpvar_62[0] = _Object2World[0].xyz;
  tmpvar_62[1] = _Object2World[1].xyz;
  tmpvar_62[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((tmpvar_62 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_63;
  lowp vec3 tmpvar_64;
  tmpvar_64 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_65;
  tmpvar_65 = (tmpvar_64 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_65;
  lowp vec3 tmpvar_66;
  tmpvar_66.x = worldTangent_4.x;
  tmpvar_66.y = worldBinormal_3.x;
  tmpvar_66.z = worldNormal_5.x;
  lowp vec3 tmpvar_67;
  tmpvar_67.x = worldTangent_4.y;
  tmpvar_67.y = worldBinormal_3.y;
  tmpvar_67.z = worldNormal_5.y;
  lowp vec3 tmpvar_68;
  tmpvar_68.x = worldTangent_4.z;
  tmpvar_68.y = worldBinormal_3.z;
  tmpvar_68.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_66;
  xlv_TEXCOORD1 = tmpvar_67;
  xlv_TEXCOORD2 = tmpvar_68;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
in lowp vec3 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_12;
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_14 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_15;
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_16);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_16);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_16);
  lowp vec3 tmpvar_17;
  tmpvar_17 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_17;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_20 = tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = ((tmpvar_8 * tmpvar_1) * diff_20);
  c_19.xyz = tmpvar_22;
  c_19.w = tmpvar_9;
  c_18.w = c_19.w;
  mediump vec3 tmpvar_23;
  tmpvar_23 = c_19.xyz;
  c_18.xyz = tmpvar_23;
  c_4.xyz = c_18.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "SPOT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_9;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_13;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 == 5.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    highp float fOffset_24;
    fOffset_24 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_24 = 0.75;
    };
    highp vec4 tmpvar_25;
    tmpvar_25.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_25.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_24);
    highp vec4 tmpvar_26;
    tmpvar_26 = abs(((
      fract((tmpvar_25 + 0.5))
     * 2.0) - 1.0));
    vPos_23 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_15 = tmpvar_2;
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_27;
    vPos_27 = FinalPosition_18;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_28;
      vPos_28 = FinalPosition_18;
      highp float fAdherenceScale_29;
      highp vec3 tmpvar_30;
      tmpvar_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_31;
      tmpvar_31 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_32;
      highp float fOscillation_33;
      fOscillation_33 = 1.0;
      highp float fAmount_34;
      highp float fTarget_35;
      highp vec4 tmpvar_36;
      tmpvar_36.x = (tmpvar_31 + _glesMultiTexCoord0.w);
      tmpvar_36.y = ((tmpvar_31 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_36.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_31 + _glesMultiTexCoord0.w));
      tmpvar_36.w = ((tmpvar_31 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      vOscillations_32 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      highp float tmpvar_38;
      tmpvar_38 = (vOscillations_32.y * vOscillations_32.z);
      fTarget_35 = 1.0;
      fAmount_34 = tmpvar_38;
      if ((tmpvar_38 < 0.0)) {
        fTarget_35 = -1.0;
        fAmount_34 = -(tmpvar_38);
      };
      fOscillation_33 = (((
        (mix (mix (tmpvar_38, fTarget_35, fAmount_34), fTarget_35, fAmount_34) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_32.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_32.w * _ST_WindBranchWhip.x)));
      vPos_28 = (FinalPosition_18 + ((tmpvar_30 * fOscillation_33) * _ST_WindBranch.y));
      highp vec4 tmpvar_39;
      tmpvar_39.zw = vec2(0.0, 0.0);
      tmpvar_39.x = ((tmpvar_31 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_39.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_40;
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      tmpvar_40 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((
        ((tmpvar_40.x * tmpvar_40.y) * tmpvar_40.x)
       * tmpvar_40.y) * _ST_WindTurbulences.x));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_32.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_28 = (vPos_28 + ((
        ((vRotatedBranchAnchor_16 - vPos_28) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_27 = vPos_28;
    } else {
      highp vec3 vPos_42;
      vPos_42 = vPos_27;
      highp vec3 tmpvar_43;
      tmpvar_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_44;
      tmpvar_44 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_45;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (tmpvar_44 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((tmpvar_44 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_44 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_45 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_45.y * vOscillations_45.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      vPos_42 = (vPos_27 + ((tmpvar_43 * 
        (((mix (
          mix (tmpvar_50, fTarget_47, fAmount_46)
        , fTarget_47, fAmount_46) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_45.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_27 = vPos_42;
    };
    FinalPosition_18 = vPos_27;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_18;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_54;
    tmpvar_54 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_55.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    vPos_51.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_56.x + (tmpvar_56.y * tmpvar_56.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_52)));
    vPos_51 = (normalize(vPos_51) * fLength_53);
    FinalPosition_18 = vPos_51;
  };
  tmpvar_14.xyz = FinalPosition_18;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * tmpvar_15.x)
   + 
    (v_59.xyz * tmpvar_15.y)
  ) + (v_60.xyz * tmpvar_15.z)));
  worldNormal_5 = tmpvar_61;
  highp mat3 tmpvar_62;
  tmpvar_62[0] = _Object2World[0].xyz;
  tmpvar_62[1] = _Object2World[1].xyz;
  tmpvar_62[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((tmpvar_62 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_63;
  lowp vec3 tmpvar_64;
  tmpvar_64 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_65;
  tmpvar_65 = (tmpvar_64 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_65;
  lowp vec3 tmpvar_66;
  tmpvar_66.x = worldTangent_4.x;
  tmpvar_66.y = worldBinormal_3.x;
  tmpvar_66.z = worldNormal_5.x;
  lowp vec3 tmpvar_67;
  tmpvar_67.x = worldTangent_4.y;
  tmpvar_67.y = worldBinormal_3.y;
  tmpvar_67.z = worldNormal_5.y;
  lowp vec3 tmpvar_68;
  tmpvar_68.x = worldTangent_4.z;
  tmpvar_68.y = worldBinormal_3.z;
  tmpvar_68.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_66;
  xlv_TEXCOORD1 = tmpvar_67;
  xlv_TEXCOORD2 = tmpvar_68;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp float atten_5;
  mediump vec4 lightCoord_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD4;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_7 = tmpvar_9;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_12.w * _Color.w);
  tmpvar_11 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_11 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_16 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  tmpvar_10 = tmpvar_17;
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = xlv_TEXCOORD3;
  highp vec4 tmpvar_20;
  tmpvar_20 = (_LightMatrix0 * tmpvar_19);
  lightCoord_6 = tmpvar_20;
  lowp vec4 tmpvar_21;
  mediump vec2 P_22;
  P_22 = ((lightCoord_6.xy / lightCoord_6.w) + 0.5);
  tmpvar_21 = texture2D (_LightTexture0, P_22);
  mediump float tmpvar_23;
  tmpvar_23 = dot (lightCoord_6.xyz, lightCoord_6.xyz);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTextureB0, vec2(tmpvar_23));
  mediump float tmpvar_25;
  tmpvar_25 = ((float(
    (lightCoord_6.z > 0.0)
  ) * tmpvar_21.w) * tmpvar_24.w);
  atten_5 = tmpvar_25;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_18);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_18);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_18);
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_26;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_5);
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_29 = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tmpvar_10 * tmpvar_1) * diff_29);
  c_28.xyz = tmpvar_31;
  c_28.w = tmpvar_11;
  c_27.w = c_28.w;
  mediump vec3 tmpvar_32;
  tmpvar_32 = c_28.xyz;
  c_27.xyz = tmpvar_32;
  c_4.xyz = c_27.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SPOT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
in vec4 _glesTANGENT;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out lowp vec3 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out mediump vec4 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_9;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_13;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 == 5.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    highp float fOffset_24;
    fOffset_24 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_24 = 0.75;
    };
    highp vec4 tmpvar_25;
    tmpvar_25.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_25.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_24);
    highp vec4 tmpvar_26;
    tmpvar_26 = abs(((
      fract((tmpvar_25 + 0.5))
     * 2.0) - 1.0));
    vPos_23 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_15 = tmpvar_2;
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_27;
    vPos_27 = FinalPosition_18;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_28;
      vPos_28 = FinalPosition_18;
      highp float fAdherenceScale_29;
      highp vec3 tmpvar_30;
      tmpvar_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_31;
      tmpvar_31 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_32;
      highp float fOscillation_33;
      fOscillation_33 = 1.0;
      highp float fAmount_34;
      highp float fTarget_35;
      highp vec4 tmpvar_36;
      tmpvar_36.x = (tmpvar_31 + _glesMultiTexCoord0.w);
      tmpvar_36.y = ((tmpvar_31 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_36.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_31 + _glesMultiTexCoord0.w));
      tmpvar_36.w = ((tmpvar_31 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      vOscillations_32 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      highp float tmpvar_38;
      tmpvar_38 = (vOscillations_32.y * vOscillations_32.z);
      fTarget_35 = 1.0;
      fAmount_34 = tmpvar_38;
      if ((tmpvar_38 < 0.0)) {
        fTarget_35 = -1.0;
        fAmount_34 = -(tmpvar_38);
      };
      fOscillation_33 = (((
        (mix (mix (tmpvar_38, fTarget_35, fAmount_34), fTarget_35, fAmount_34) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_32.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_32.w * _ST_WindBranchWhip.x)));
      vPos_28 = (FinalPosition_18 + ((tmpvar_30 * fOscillation_33) * _ST_WindBranch.y));
      highp vec4 tmpvar_39;
      tmpvar_39.zw = vec2(0.0, 0.0);
      tmpvar_39.x = ((tmpvar_31 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_39.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_40;
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      tmpvar_40 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((
        ((tmpvar_40.x * tmpvar_40.y) * tmpvar_40.x)
       * tmpvar_40.y) * _ST_WindTurbulences.x));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_32.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_28 = (vPos_28 + ((
        ((vRotatedBranchAnchor_16 - vPos_28) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_27 = vPos_28;
    } else {
      highp vec3 vPos_42;
      vPos_42 = vPos_27;
      highp vec3 tmpvar_43;
      tmpvar_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_44;
      tmpvar_44 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_45;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (tmpvar_44 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((tmpvar_44 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_44 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_45 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_45.y * vOscillations_45.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      vPos_42 = (vPos_27 + ((tmpvar_43 * 
        (((mix (
          mix (tmpvar_50, fTarget_47, fAmount_46)
        , fTarget_47, fAmount_46) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_45.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_27 = vPos_42;
    };
    FinalPosition_18 = vPos_27;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_18;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_54;
    tmpvar_54 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_55.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    vPos_51.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_56.x + (tmpvar_56.y * tmpvar_56.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_52)));
    vPos_51 = (normalize(vPos_51) * fLength_53);
    FinalPosition_18 = vPos_51;
  };
  tmpvar_14.xyz = FinalPosition_18;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * tmpvar_15.x)
   + 
    (v_59.xyz * tmpvar_15.y)
  ) + (v_60.xyz * tmpvar_15.z)));
  worldNormal_5 = tmpvar_61;
  highp mat3 tmpvar_62;
  tmpvar_62[0] = _Object2World[0].xyz;
  tmpvar_62[1] = _Object2World[1].xyz;
  tmpvar_62[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((tmpvar_62 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_63;
  lowp vec3 tmpvar_64;
  tmpvar_64 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_65;
  tmpvar_65 = (tmpvar_64 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_65;
  lowp vec3 tmpvar_66;
  tmpvar_66.x = worldTangent_4.x;
  tmpvar_66.y = worldBinormal_3.x;
  tmpvar_66.z = worldNormal_5.x;
  lowp vec3 tmpvar_67;
  tmpvar_67.x = worldTangent_4.y;
  tmpvar_67.y = worldBinormal_3.y;
  tmpvar_67.z = worldNormal_5.y;
  lowp vec3 tmpvar_68;
  tmpvar_68.x = worldTangent_4.z;
  tmpvar_68.y = worldBinormal_3.z;
  tmpvar_68.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_66;
  xlv_TEXCOORD1 = tmpvar_67;
  xlv_TEXCOORD2 = tmpvar_68;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
in lowp vec3 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in mediump vec4 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp float atten_5;
  mediump vec4 lightCoord_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD4;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_7 = tmpvar_9;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_12.w * _Color.w);
  tmpvar_11 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_11 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_16 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  tmpvar_10 = tmpvar_17;
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = xlv_TEXCOORD3;
  highp vec4 tmpvar_20;
  tmpvar_20 = (_LightMatrix0 * tmpvar_19);
  lightCoord_6 = tmpvar_20;
  lowp vec4 tmpvar_21;
  mediump vec2 P_22;
  P_22 = ((lightCoord_6.xy / lightCoord_6.w) + 0.5);
  tmpvar_21 = texture (_LightTexture0, P_22);
  mediump float tmpvar_23;
  tmpvar_23 = dot (lightCoord_6.xyz, lightCoord_6.xyz);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture (_LightTextureB0, vec2(tmpvar_23));
  mediump float tmpvar_25;
  tmpvar_25 = ((float(
    (lightCoord_6.z > 0.0)
  ) * tmpvar_21.w) * tmpvar_24.w);
  atten_5 = tmpvar_25;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_18);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_18);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_18);
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_26;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_5);
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_29 = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tmpvar_10 * tmpvar_1) * diff_29);
  c_28.xyz = tmpvar_31;
  c_28.w = tmpvar_11;
  c_27.w = c_28.w;
  mediump vec3 tmpvar_32;
  tmpvar_32 = c_28.xyz;
  c_27.xyz = tmpvar_32;
  c_4.xyz = c_27.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_9;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_13;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 == 5.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    highp float fOffset_24;
    fOffset_24 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_24 = 0.75;
    };
    highp vec4 tmpvar_25;
    tmpvar_25.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_25.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_24);
    highp vec4 tmpvar_26;
    tmpvar_26 = abs(((
      fract((tmpvar_25 + 0.5))
     * 2.0) - 1.0));
    vPos_23 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_15 = tmpvar_2;
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_27;
    vPos_27 = FinalPosition_18;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_28;
      vPos_28 = FinalPosition_18;
      highp float fAdherenceScale_29;
      highp vec3 tmpvar_30;
      tmpvar_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_31;
      tmpvar_31 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_32;
      highp float fOscillation_33;
      fOscillation_33 = 1.0;
      highp float fAmount_34;
      highp float fTarget_35;
      highp vec4 tmpvar_36;
      tmpvar_36.x = (tmpvar_31 + _glesMultiTexCoord0.w);
      tmpvar_36.y = ((tmpvar_31 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_36.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_31 + _glesMultiTexCoord0.w));
      tmpvar_36.w = ((tmpvar_31 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      vOscillations_32 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      highp float tmpvar_38;
      tmpvar_38 = (vOscillations_32.y * vOscillations_32.z);
      fTarget_35 = 1.0;
      fAmount_34 = tmpvar_38;
      if ((tmpvar_38 < 0.0)) {
        fTarget_35 = -1.0;
        fAmount_34 = -(tmpvar_38);
      };
      fOscillation_33 = (((
        (mix (mix (tmpvar_38, fTarget_35, fAmount_34), fTarget_35, fAmount_34) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_32.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_32.w * _ST_WindBranchWhip.x)));
      vPos_28 = (FinalPosition_18 + ((tmpvar_30 * fOscillation_33) * _ST_WindBranch.y));
      highp vec4 tmpvar_39;
      tmpvar_39.zw = vec2(0.0, 0.0);
      tmpvar_39.x = ((tmpvar_31 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_39.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_40;
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      tmpvar_40 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((
        ((tmpvar_40.x * tmpvar_40.y) * tmpvar_40.x)
       * tmpvar_40.y) * _ST_WindTurbulences.x));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_32.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_28 = (vPos_28 + ((
        ((vRotatedBranchAnchor_16 - vPos_28) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_27 = vPos_28;
    } else {
      highp vec3 vPos_42;
      vPos_42 = vPos_27;
      highp vec3 tmpvar_43;
      tmpvar_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_44;
      tmpvar_44 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_45;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (tmpvar_44 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((tmpvar_44 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_44 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_45 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_45.y * vOscillations_45.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      vPos_42 = (vPos_27 + ((tmpvar_43 * 
        (((mix (
          mix (tmpvar_50, fTarget_47, fAmount_46)
        , fTarget_47, fAmount_46) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_45.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_27 = vPos_42;
    };
    FinalPosition_18 = vPos_27;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_18;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_54;
    tmpvar_54 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_55.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    vPos_51.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_56.x + (tmpvar_56.y * tmpvar_56.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_52)));
    vPos_51 = (normalize(vPos_51) * fLength_53);
    FinalPosition_18 = vPos_51;
  };
  tmpvar_14.xyz = FinalPosition_18;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * tmpvar_15.x)
   + 
    (v_59.xyz * tmpvar_15.y)
  ) + (v_60.xyz * tmpvar_15.z)));
  worldNormal_5 = tmpvar_61;
  highp mat3 tmpvar_62;
  tmpvar_62[0] = _Object2World[0].xyz;
  tmpvar_62[1] = _Object2World[1].xyz;
  tmpvar_62[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((tmpvar_62 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_63;
  lowp vec3 tmpvar_64;
  tmpvar_64 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_65;
  tmpvar_65 = (tmpvar_64 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_65;
  lowp vec3 tmpvar_66;
  tmpvar_66.x = worldTangent_4.x;
  tmpvar_66.y = worldBinormal_3.x;
  tmpvar_66.z = worldNormal_5.x;
  lowp vec3 tmpvar_67;
  tmpvar_67.x = worldTangent_4.y;
  tmpvar_67.y = worldBinormal_3.y;
  tmpvar_67.z = worldNormal_5.y;
  lowp vec3 tmpvar_68;
  tmpvar_68.x = worldTangent_4.z;
  tmpvar_68.y = worldBinormal_3.z;
  tmpvar_68.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_66;
  xlv_TEXCOORD1 = tmpvar_67;
  xlv_TEXCOORD2 = tmpvar_68;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec3 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18).xyz;
  lightCoord_5 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = dot (lightCoord_5, lightCoord_5);
  lowp float tmpvar_21;
  tmpvar_21 = (texture2D (_LightTextureB0, vec2(tmpvar_20)).w * textureCube (_LightTexture0, lightCoord_5).w);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_17);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_17);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_17);
  lowp vec3 tmpvar_22;
  tmpvar_22 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_22;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_21);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_25 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_9 * tmpvar_1) * diff_25);
  c_24.xyz = tmpvar_27;
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  mediump vec3 tmpvar_28;
  tmpvar_28 = c_24.xyz;
  c_23.xyz = tmpvar_28;
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
in vec4 _glesTANGENT;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out lowp vec3 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out mediump vec4 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_9;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_13;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 == 5.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    highp float fOffset_24;
    fOffset_24 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_24 = 0.75;
    };
    highp vec4 tmpvar_25;
    tmpvar_25.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_25.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_24);
    highp vec4 tmpvar_26;
    tmpvar_26 = abs(((
      fract((tmpvar_25 + 0.5))
     * 2.0) - 1.0));
    vPos_23 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_15 = tmpvar_2;
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_27;
    vPos_27 = FinalPosition_18;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_28;
      vPos_28 = FinalPosition_18;
      highp float fAdherenceScale_29;
      highp vec3 tmpvar_30;
      tmpvar_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_31;
      tmpvar_31 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_32;
      highp float fOscillation_33;
      fOscillation_33 = 1.0;
      highp float fAmount_34;
      highp float fTarget_35;
      highp vec4 tmpvar_36;
      tmpvar_36.x = (tmpvar_31 + _glesMultiTexCoord0.w);
      tmpvar_36.y = ((tmpvar_31 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_36.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_31 + _glesMultiTexCoord0.w));
      tmpvar_36.w = ((tmpvar_31 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      vOscillations_32 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      highp float tmpvar_38;
      tmpvar_38 = (vOscillations_32.y * vOscillations_32.z);
      fTarget_35 = 1.0;
      fAmount_34 = tmpvar_38;
      if ((tmpvar_38 < 0.0)) {
        fTarget_35 = -1.0;
        fAmount_34 = -(tmpvar_38);
      };
      fOscillation_33 = (((
        (mix (mix (tmpvar_38, fTarget_35, fAmount_34), fTarget_35, fAmount_34) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_32.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_32.w * _ST_WindBranchWhip.x)));
      vPos_28 = (FinalPosition_18 + ((tmpvar_30 * fOscillation_33) * _ST_WindBranch.y));
      highp vec4 tmpvar_39;
      tmpvar_39.zw = vec2(0.0, 0.0);
      tmpvar_39.x = ((tmpvar_31 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_39.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_40;
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      tmpvar_40 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((
        ((tmpvar_40.x * tmpvar_40.y) * tmpvar_40.x)
       * tmpvar_40.y) * _ST_WindTurbulences.x));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_32.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_28 = (vPos_28 + ((
        ((vRotatedBranchAnchor_16 - vPos_28) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_27 = vPos_28;
    } else {
      highp vec3 vPos_42;
      vPos_42 = vPos_27;
      highp vec3 tmpvar_43;
      tmpvar_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_44;
      tmpvar_44 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_45;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (tmpvar_44 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((tmpvar_44 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_44 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_45 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_45.y * vOscillations_45.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      vPos_42 = (vPos_27 + ((tmpvar_43 * 
        (((mix (
          mix (tmpvar_50, fTarget_47, fAmount_46)
        , fTarget_47, fAmount_46) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_45.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_27 = vPos_42;
    };
    FinalPosition_18 = vPos_27;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_18;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_54;
    tmpvar_54 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_55.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    vPos_51.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_56.x + (tmpvar_56.y * tmpvar_56.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_52)));
    vPos_51 = (normalize(vPos_51) * fLength_53);
    FinalPosition_18 = vPos_51;
  };
  tmpvar_14.xyz = FinalPosition_18;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * tmpvar_15.x)
   + 
    (v_59.xyz * tmpvar_15.y)
  ) + (v_60.xyz * tmpvar_15.z)));
  worldNormal_5 = tmpvar_61;
  highp mat3 tmpvar_62;
  tmpvar_62[0] = _Object2World[0].xyz;
  tmpvar_62[1] = _Object2World[1].xyz;
  tmpvar_62[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((tmpvar_62 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_63;
  lowp vec3 tmpvar_64;
  tmpvar_64 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_65;
  tmpvar_65 = (tmpvar_64 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_65;
  lowp vec3 tmpvar_66;
  tmpvar_66.x = worldTangent_4.x;
  tmpvar_66.y = worldBinormal_3.x;
  tmpvar_66.z = worldNormal_5.x;
  lowp vec3 tmpvar_67;
  tmpvar_67.x = worldTangent_4.y;
  tmpvar_67.y = worldBinormal_3.y;
  tmpvar_67.z = worldNormal_5.y;
  lowp vec3 tmpvar_68;
  tmpvar_68.x = worldTangent_4.z;
  tmpvar_68.y = worldBinormal_3.z;
  tmpvar_68.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_66;
  xlv_TEXCOORD1 = tmpvar_67;
  xlv_TEXCOORD2 = tmpvar_68;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
in lowp vec3 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in mediump vec4 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec3 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18).xyz;
  lightCoord_5 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = dot (lightCoord_5, lightCoord_5);
  lowp float tmpvar_21;
  tmpvar_21 = (texture (_LightTextureB0, vec2(tmpvar_20)).w * texture (_LightTexture0, lightCoord_5).w);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_17);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_17);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_17);
  lowp vec3 tmpvar_22;
  tmpvar_22 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_22;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_21);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_25 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_9 * tmpvar_1) * diff_25);
  c_24.xyz = tmpvar_27;
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  mediump vec3 tmpvar_28;
  tmpvar_28 = c_24.xyz;
  c_23.xyz = tmpvar_28;
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_9;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_13;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 == 5.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    highp float fOffset_24;
    fOffset_24 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_24 = 0.75;
    };
    highp vec4 tmpvar_25;
    tmpvar_25.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_25.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_24);
    highp vec4 tmpvar_26;
    tmpvar_26 = abs(((
      fract((tmpvar_25 + 0.5))
     * 2.0) - 1.0));
    vPos_23 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_15 = tmpvar_2;
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_27;
    vPos_27 = FinalPosition_18;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_28;
      vPos_28 = FinalPosition_18;
      highp float fAdherenceScale_29;
      highp vec3 tmpvar_30;
      tmpvar_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_31;
      tmpvar_31 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_32;
      highp float fOscillation_33;
      fOscillation_33 = 1.0;
      highp float fAmount_34;
      highp float fTarget_35;
      highp vec4 tmpvar_36;
      tmpvar_36.x = (tmpvar_31 + _glesMultiTexCoord0.w);
      tmpvar_36.y = ((tmpvar_31 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_36.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_31 + _glesMultiTexCoord0.w));
      tmpvar_36.w = ((tmpvar_31 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      vOscillations_32 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      highp float tmpvar_38;
      tmpvar_38 = (vOscillations_32.y * vOscillations_32.z);
      fTarget_35 = 1.0;
      fAmount_34 = tmpvar_38;
      if ((tmpvar_38 < 0.0)) {
        fTarget_35 = -1.0;
        fAmount_34 = -(tmpvar_38);
      };
      fOscillation_33 = (((
        (mix (mix (tmpvar_38, fTarget_35, fAmount_34), fTarget_35, fAmount_34) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_32.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_32.w * _ST_WindBranchWhip.x)));
      vPos_28 = (FinalPosition_18 + ((tmpvar_30 * fOscillation_33) * _ST_WindBranch.y));
      highp vec4 tmpvar_39;
      tmpvar_39.zw = vec2(0.0, 0.0);
      tmpvar_39.x = ((tmpvar_31 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_39.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_40;
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      tmpvar_40 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((
        ((tmpvar_40.x * tmpvar_40.y) * tmpvar_40.x)
       * tmpvar_40.y) * _ST_WindTurbulences.x));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_32.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_28 = (vPos_28 + ((
        ((vRotatedBranchAnchor_16 - vPos_28) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_27 = vPos_28;
    } else {
      highp vec3 vPos_42;
      vPos_42 = vPos_27;
      highp vec3 tmpvar_43;
      tmpvar_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_44;
      tmpvar_44 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_45;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (tmpvar_44 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((tmpvar_44 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_44 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_45 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_45.y * vOscillations_45.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      vPos_42 = (vPos_27 + ((tmpvar_43 * 
        (((mix (
          mix (tmpvar_50, fTarget_47, fAmount_46)
        , fTarget_47, fAmount_46) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_45.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_27 = vPos_42;
    };
    FinalPosition_18 = vPos_27;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_18;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_54;
    tmpvar_54 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_55.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    vPos_51.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_56.x + (tmpvar_56.y * tmpvar_56.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_52)));
    vPos_51 = (normalize(vPos_51) * fLength_53);
    FinalPosition_18 = vPos_51;
  };
  tmpvar_14.xyz = FinalPosition_18;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * tmpvar_15.x)
   + 
    (v_59.xyz * tmpvar_15.y)
  ) + (v_60.xyz * tmpvar_15.z)));
  worldNormal_5 = tmpvar_61;
  highp mat3 tmpvar_62;
  tmpvar_62[0] = _Object2World[0].xyz;
  tmpvar_62[1] = _Object2World[1].xyz;
  tmpvar_62[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((tmpvar_62 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_63;
  lowp vec3 tmpvar_64;
  tmpvar_64 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_65;
  tmpvar_65 = (tmpvar_64 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_65;
  lowp vec3 tmpvar_66;
  tmpvar_66.x = worldTangent_4.x;
  tmpvar_66.y = worldBinormal_3.x;
  tmpvar_66.z = worldNormal_5.x;
  lowp vec3 tmpvar_67;
  tmpvar_67.x = worldTangent_4.y;
  tmpvar_67.y = worldBinormal_3.y;
  tmpvar_67.z = worldNormal_5.y;
  lowp vec3 tmpvar_68;
  tmpvar_68.x = worldTangent_4.z;
  tmpvar_68.y = worldBinormal_3.z;
  tmpvar_68.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_66;
  xlv_TEXCOORD1 = tmpvar_67;
  xlv_TEXCOORD2 = tmpvar_68;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec2 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD3;
  highp vec2 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18).xy;
  lightCoord_5 = tmpvar_19;
  lowp float tmpvar_20;
  tmpvar_20 = texture2D (_LightTexture0, lightCoord_5).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_17);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_17);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_17);
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_21;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_20);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_24 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tmpvar_9 * tmpvar_1) * diff_24);
  c_23.xyz = tmpvar_26;
  c_23.w = tmpvar_10;
  c_22.w = c_23.w;
  mediump vec3 tmpvar_27;
  tmpvar_27 = c_23.xyz;
  c_22.xyz = tmpvar_27;
  c_4.xyz = c_22.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
in vec4 _glesTANGENT;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out lowp vec3 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out mediump vec4 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_9;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_13;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 == 5.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    highp float fOffset_24;
    fOffset_24 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_24 = 0.75;
    };
    highp vec4 tmpvar_25;
    tmpvar_25.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_25.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_24);
    highp vec4 tmpvar_26;
    tmpvar_26 = abs(((
      fract((tmpvar_25 + 0.5))
     * 2.0) - 1.0));
    vPos_23 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_15 = tmpvar_2;
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_27;
    vPos_27 = FinalPosition_18;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_28;
      vPos_28 = FinalPosition_18;
      highp float fAdherenceScale_29;
      highp vec3 tmpvar_30;
      tmpvar_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_31;
      tmpvar_31 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_32;
      highp float fOscillation_33;
      fOscillation_33 = 1.0;
      highp float fAmount_34;
      highp float fTarget_35;
      highp vec4 tmpvar_36;
      tmpvar_36.x = (tmpvar_31 + _glesMultiTexCoord0.w);
      tmpvar_36.y = ((tmpvar_31 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_36.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_31 + _glesMultiTexCoord0.w));
      tmpvar_36.w = ((tmpvar_31 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      vOscillations_32 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      highp float tmpvar_38;
      tmpvar_38 = (vOscillations_32.y * vOscillations_32.z);
      fTarget_35 = 1.0;
      fAmount_34 = tmpvar_38;
      if ((tmpvar_38 < 0.0)) {
        fTarget_35 = -1.0;
        fAmount_34 = -(tmpvar_38);
      };
      fOscillation_33 = (((
        (mix (mix (tmpvar_38, fTarget_35, fAmount_34), fTarget_35, fAmount_34) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_32.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_32.w * _ST_WindBranchWhip.x)));
      vPos_28 = (FinalPosition_18 + ((tmpvar_30 * fOscillation_33) * _ST_WindBranch.y));
      highp vec4 tmpvar_39;
      tmpvar_39.zw = vec2(0.0, 0.0);
      tmpvar_39.x = ((tmpvar_31 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_39.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_40;
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      tmpvar_40 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((
        ((tmpvar_40.x * tmpvar_40.y) * tmpvar_40.x)
       * tmpvar_40.y) * _ST_WindTurbulences.x));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_32.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_28 = (vPos_28 + ((
        ((vRotatedBranchAnchor_16 - vPos_28) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_27 = vPos_28;
    } else {
      highp vec3 vPos_42;
      vPos_42 = vPos_27;
      highp vec3 tmpvar_43;
      tmpvar_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_44;
      tmpvar_44 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_45;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (tmpvar_44 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((tmpvar_44 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_44 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_45 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_45.y * vOscillations_45.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      vPos_42 = (vPos_27 + ((tmpvar_43 * 
        (((mix (
          mix (tmpvar_50, fTarget_47, fAmount_46)
        , fTarget_47, fAmount_46) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_45.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_27 = vPos_42;
    };
    FinalPosition_18 = vPos_27;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_18;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_54;
    tmpvar_54 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_55.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    vPos_51.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_56.x + (tmpvar_56.y * tmpvar_56.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_52)));
    vPos_51 = (normalize(vPos_51) * fLength_53);
    FinalPosition_18 = vPos_51;
  };
  tmpvar_14.xyz = FinalPosition_18;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * tmpvar_15.x)
   + 
    (v_59.xyz * tmpvar_15.y)
  ) + (v_60.xyz * tmpvar_15.z)));
  worldNormal_5 = tmpvar_61;
  highp mat3 tmpvar_62;
  tmpvar_62[0] = _Object2World[0].xyz;
  tmpvar_62[1] = _Object2World[1].xyz;
  tmpvar_62[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((tmpvar_62 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_63;
  lowp vec3 tmpvar_64;
  tmpvar_64 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_65;
  tmpvar_65 = (tmpvar_64 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_65;
  lowp vec3 tmpvar_66;
  tmpvar_66.x = worldTangent_4.x;
  tmpvar_66.y = worldBinormal_3.x;
  tmpvar_66.z = worldNormal_5.x;
  lowp vec3 tmpvar_67;
  tmpvar_67.x = worldTangent_4.y;
  tmpvar_67.y = worldBinormal_3.y;
  tmpvar_67.z = worldNormal_5.y;
  lowp vec3 tmpvar_68;
  tmpvar_68.x = worldTangent_4.z;
  tmpvar_68.y = worldBinormal_3.z;
  tmpvar_68.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_66;
  xlv_TEXCOORD1 = tmpvar_67;
  xlv_TEXCOORD2 = tmpvar_68;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
in lowp vec3 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in mediump vec4 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  mediump vec2 lightCoord_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD3;
  highp vec2 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18).xy;
  lightCoord_5 = tmpvar_19;
  lowp float tmpvar_20;
  tmpvar_20 = texture (_LightTexture0, lightCoord_5).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_17);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_17);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_17);
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_21;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_20);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_24 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tmpvar_9 * tmpvar_1) * diff_24);
  c_23.xyz = tmpvar_26;
  c_23.w = tmpvar_10;
  c_22.w = c_23.w;
  mediump vec3 tmpvar_27;
  tmpvar_27 = c_23.xyz;
  c_22.xyz = tmpvar_27;
  c_4.xyz = c_22.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_8;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_14 = tmpvar_19;
  if (((tmpvar_16 > 1.0) && (tmpvar_16 < 5.0))) {
    highp float tmpvar_20;
    tmpvar_20 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_21;
    isBestWind_21 = (tmpvar_16 == 4.0);
    bool bLeaf2_22;
    bLeaf2_22 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    highp vec3 vDirection_24;
    vDirection_24 = tmpvar_2;
    highp float tmpvar_25;
    if (bLeaf2_22) {
      tmpvar_25 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_26;
    if (bLeaf2_22) {
      tmpvar_26 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_27;
    highp vec4 tmpvar_28;
    tmpvar_28.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_28.x = (tmpvar_25 + tmpvar_20);
    highp vec4 tmpvar_29;
    tmpvar_29 = abs(((
      fract((tmpvar_28 + 0.5))
     * 2.0) - 1.0));
    vPos_27 = (tmpvar_19 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_26 * (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_24 = tmpvar_2;
    vPos_23 = vPos_27;
    if (isBestWind_21) {
      highp vec3 tmpvar_30;
      tmpvar_30 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_31;
      if (bLeaf2_22) {
        tmpvar_31 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_32;
      if (bLeaf2_22) {
        tmpvar_32 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_33;
      if (bLeaf2_22) {
        tmpvar_33 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_34;
      if (bLeaf2_22) {
        tmpvar_34 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_35;
      if (bLeaf2_22) {
        tmpvar_35 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_35 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_36;
      if (bLeaf2_22) {
        tmpvar_36 = bool(1);
      } else {
        tmpvar_36 = bool(1);
      };
      highp float fTwitch_37;
      highp vec3 vAxis_38;
      highp vec3 tmpvar_39;
      tmpvar_39 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_40;
      tmpvar_40 = ((tmpvar_39.x + tmpvar_39.y) + tmpvar_39.z);
      highp vec4 tmpvar_41;
      tmpvar_41.x = (tmpvar_31 + tmpvar_40);
      tmpvar_41.y = ((tmpvar_31 * 0.75) - tmpvar_40);
      tmpvar_41.z = ((tmpvar_31 * 0.01) + tmpvar_40);
      tmpvar_41.w = (tmpvar_31 + tmpvar_40);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = sqrt(dot (vPos_27, vPos_27));
      highp float fAngle_45;
      fAngle_45 = ((_glesMultiTexCoord2.x * tmpvar_33) * (tmpvar_42.x + (tmpvar_42.y * tmpvar_42.y)));
      highp vec2 vSinCos_46;
      vSinCos_46.x = sin(fAngle_45);
      vSinCos_46.y = cos(fAngle_45);
      highp float tmpvar_47;
      tmpvar_47 = (1.0 - vSinCos_46.y);
      highp mat3 tmpvar_48;
      tmpvar_48[0].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.x) + vSinCos_46.y);
      tmpvar_48[0].y = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.y) + (vSinCos_46.x * tmpvar_30.z));
      tmpvar_48[0].z = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.z) - (vSinCos_46.x * tmpvar_30.y));
      tmpvar_48[1].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.y) - (vSinCos_46.x * tmpvar_30.z));
      tmpvar_48[1].y = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.y) + vSinCos_46.y);
      tmpvar_48[1].z = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.z) + (vSinCos_46.x * tmpvar_30.x));
      tmpvar_48[2].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.z) + (vSinCos_46.x * tmpvar_30.y));
      tmpvar_48[2].y = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.z) - (vSinCos_46.x * tmpvar_30.x));
      tmpvar_48[2].z = (((tmpvar_47 * tmpvar_30.z) * tmpvar_30.z) + vSinCos_46.y);
      highp vec3 tmpvar_49;
      tmpvar_49 = ((tmpvar_30.yzx * vRotatedWindVector_13.zxy) - (tmpvar_30.zxy * vRotatedWindVector_13.yzx));
      vAxis_38.xz = tmpvar_49.xz;
      highp float tmpvar_50;
      tmpvar_50 = clamp (dot (vRotatedWindVector_13, tmpvar_30), -1.0, 1.0);
      vAxis_38.y = (tmpvar_49.y + tmpvar_50);
      highp vec3 tmpvar_51;
      tmpvar_51 = normalize(vAxis_38);
      vAxis_38 = tmpvar_51;
      highp float tmpvar_52;
      tmpvar_52 = (1.570796 - (sign(tmpvar_50) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_50))) * (1.570796 + (abs(tmpvar_50) * (-0.2146018 + 
          (abs(tmpvar_50) * (0.08656672 + (abs(tmpvar_50) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_53;
      tmpvar_53 = (tmpvar_42.y - (tmpvar_42.x * tmpvar_42.x));
      fTwitch_37 = 0.0;
      if (tmpvar_36) {
        highp float fTime_54;
        fTime_54 = (tmpvar_35.z + tmpvar_40);
        highp vec4 tmpvar_55;
        tmpvar_55.zw = vec2(0.0, 0.0);
        tmpvar_55.x = fTime_54;
        tmpvar_55.y = (0.87 * fTime_54);
        highp vec4 tmpvar_56;
        highp vec4 tmpvar_57;
        tmpvar_57 = abs(((
          fract((tmpvar_55 + 0.5))
         * 2.0) - 1.0));
        tmpvar_56 = (((
          (tmpvar_57 * tmpvar_57)
         * 
          (3.0 - (2.0 * tmpvar_57))
        ) - 0.5) * 2.0);
        fTwitch_37 = (tmpvar_35.x * pow (clamp (
          ((((tmpvar_56.x * tmpvar_56.y) * tmpvar_56.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_35.y));
      };
      highp float fAngle_58;
      fAngle_58 = (_glesMultiTexCoord2.x * ((
        (tmpvar_52 * tmpvar_34)
       + 
        (tmpvar_53 * tmpvar_32)
      ) + fTwitch_37));
      highp vec2 vSinCos_59;
      vSinCos_59.x = sin(fAngle_58);
      vSinCos_59.y = cos(fAngle_58);
      highp float tmpvar_60;
      tmpvar_60 = (1.0 - vSinCos_59.y);
      highp mat3 tmpvar_61;
      tmpvar_61[0].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.x) + vSinCos_59.y);
      tmpvar_61[0].y = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.y) + (vSinCos_59.x * tmpvar_51.z));
      tmpvar_61[0].z = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.z) - (vSinCos_59.x * tmpvar_51.y));
      tmpvar_61[1].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.y) - (vSinCos_59.x * tmpvar_51.z));
      tmpvar_61[1].y = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.y) + vSinCos_59.y);
      tmpvar_61[1].z = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.z) + (vSinCos_59.x * tmpvar_51.x));
      tmpvar_61[2].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.z) + (vSinCos_59.x * tmpvar_51.y));
      tmpvar_61[2].y = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.z) - (vSinCos_59.x * tmpvar_51.x));
      tmpvar_61[2].z = (((tmpvar_60 * tmpvar_51.z) * tmpvar_51.z) + vSinCos_59.y);
      highp mat3 tmpvar_62;
      tmpvar_62 = (tmpvar_48 * tmpvar_61);
      vDirection_24 = (tmpvar_62 * _glesNormal);
      vPos_23 = (normalize((tmpvar_62 * vPos_27)) * tmpvar_44);
    };
    tmpvar_11 = vDirection_24;
    FinalPosition_14 = vPos_23;
  };
  highp vec3 tmpvar_63;
  tmpvar_63 = (FinalPosition_14 + _glesMultiTexCoord1.xyz);
  FinalPosition_14 = tmpvar_63;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_64;
    vPos_64 = tmpvar_63;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_65;
      vPos_65 = tmpvar_63;
      highp float fAdherenceScale_66;
      highp vec3 tmpvar_67;
      tmpvar_67 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_68;
      tmpvar_68 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_69;
      highp float fOscillation_70;
      fOscillation_70 = 1.0;
      highp float fAmount_71;
      highp float fTarget_72;
      highp vec4 tmpvar_73;
      tmpvar_73.x = (tmpvar_68 + _glesMultiTexCoord0.w);
      tmpvar_73.y = ((tmpvar_68 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_73.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_68 + _glesMultiTexCoord0.w));
      tmpvar_73.w = ((tmpvar_68 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_74;
      tmpvar_74 = abs(((
        fract((tmpvar_73 + 0.5))
       * 2.0) - 1.0));
      vOscillations_69 = (((
        (tmpvar_74 * tmpvar_74)
       * 
        (3.0 - (2.0 * tmpvar_74))
      ) - 0.5) * 2.0);
      highp float tmpvar_75;
      tmpvar_75 = (vOscillations_69.y * vOscillations_69.z);
      fTarget_72 = 1.0;
      fAmount_71 = tmpvar_75;
      if ((tmpvar_75 < 0.0)) {
        fTarget_72 = -1.0;
        fAmount_71 = -(tmpvar_75);
      };
      fOscillation_70 = (((
        (mix (mix (tmpvar_75, fTarget_72, fAmount_71), fTarget_72, fAmount_71) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_69.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_69.w * _ST_WindBranchWhip.x)));
      vPos_65 = (tmpvar_63 + ((tmpvar_67 * fOscillation_70) * _ST_WindBranch.y));
      highp vec4 tmpvar_76;
      tmpvar_76.zw = vec2(0.0, 0.0);
      tmpvar_76.x = ((tmpvar_68 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_76.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_77;
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      tmpvar_77 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      fAdherenceScale_66 = (1.0 - ((
        ((tmpvar_77.x * tmpvar_77.y) * tmpvar_77.x)
       * tmpvar_77.y) * _ST_WindTurbulences.x));
      fAdherenceScale_66 = (fAdherenceScale_66 + ((vOscillations_69.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_65 = (vPos_65 + ((
        ((vRotatedBranchAnchor_12 - vPos_65) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_66) * _glesMultiTexCoord0.z));
      vPos_64 = vPos_65;
    } else {
      highp vec3 vPos_79;
      vPos_79 = vPos_64;
      highp vec3 tmpvar_80;
      tmpvar_80 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_81;
      tmpvar_81 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_82;
      highp float fAmount_83;
      highp float fTarget_84;
      highp vec4 tmpvar_85;
      tmpvar_85.w = 0.0;
      tmpvar_85.x = (tmpvar_81 + _glesMultiTexCoord0.w);
      tmpvar_85.y = ((tmpvar_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_85.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_86;
      tmpvar_86 = abs(((
        fract((tmpvar_85 + 0.5))
       * 2.0) - 1.0));
      vOscillations_82 = (((
        (tmpvar_86 * tmpvar_86)
       * 
        (3.0 - (2.0 * tmpvar_86))
      ) - 0.5) * 2.0);
      highp float tmpvar_87;
      tmpvar_87 = (vOscillations_82.y * vOscillations_82.z);
      fTarget_84 = 1.0;
      fAmount_83 = tmpvar_87;
      if ((tmpvar_87 < 0.0)) {
        fTarget_84 = -1.0;
        fAmount_83 = -(tmpvar_87);
      };
      vPos_79 = (vPos_64 + ((tmpvar_80 * 
        (((mix (
          mix (tmpvar_87, fTarget_84, fAmount_83)
        , fTarget_84, fAmount_83) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_82.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_64 = vPos_79;
    };
    FinalPosition_14 = vPos_64;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_88;
    vPos_88 = FinalPosition_14;
    highp float fAdjust_89;
    highp float fLength_90;
    fLength_90 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_91;
    tmpvar_91 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_89 = tmpvar_91;
    if ((tmpvar_91 != 0.0)) {
      fAdjust_89 = pow (tmpvar_91, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_92;
    tmpvar_92.zw = vec2(0.0, 0.0);
    tmpvar_92.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_92.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_93;
    highp vec4 tmpvar_94;
    tmpvar_94 = abs(((
      fract((tmpvar_92 + 0.5))
     * 2.0) - 1.0));
    tmpvar_93 = (((
      (tmpvar_94 * tmpvar_94)
     * 
      (3.0 - (2.0 * tmpvar_94))
    ) - 0.5) * 2.0);
    vPos_88.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * (
      ((_ST_WindGlobal.y * (tmpvar_93.x + (tmpvar_93.y * tmpvar_93.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_89)));
    vPos_88 = (normalize(vPos_88) * fLength_90);
    FinalPosition_14 = vPos_88;
  };
  tmpvar_10.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_95;
  v_95.x = _World2Object[0].x;
  v_95.y = _World2Object[1].x;
  v_95.z = _World2Object[2].x;
  v_95.w = _World2Object[3].x;
  highp vec4 v_96;
  v_96.x = _World2Object[0].y;
  v_96.y = _World2Object[1].y;
  v_96.z = _World2Object[2].y;
  v_96.w = _World2Object[3].y;
  highp vec4 v_97;
  v_97.x = _World2Object[0].z;
  v_97.y = _World2Object[1].z;
  v_97.z = _World2Object[2].z;
  v_97.w = _World2Object[3].z;
  highp vec3 tmpvar_98;
  tmpvar_98 = normalize(((
    (v_95.xyz * tmpvar_11.x)
   + 
    (v_96.xyz * tmpvar_11.y)
  ) + (v_97.xyz * tmpvar_11.z)));
  worldNormal_3 = tmpvar_98;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xyz;
  lightCoord_4 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, vec2(tmpvar_18)).w;
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_20;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_19);
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_23 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tmpvar_9 * tmpvar_1) * diff_23);
  c_22.xyz = tmpvar_25;
  c_22.w = tmpvar_10;
  c_21.w = c_22.w;
  mediump vec3 tmpvar_26;
  tmpvar_26 = c_22.xyz;
  c_21.xyz = tmpvar_26;
  c_3.xyz = c_21.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT" "GEOM_TYPE_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_8;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_14 = tmpvar_19;
  if (((tmpvar_16 > 1.0) && (tmpvar_16 < 5.0))) {
    highp float tmpvar_20;
    tmpvar_20 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_21;
    isBestWind_21 = (tmpvar_16 == 4.0);
    bool bLeaf2_22;
    bLeaf2_22 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    highp vec3 vDirection_24;
    vDirection_24 = tmpvar_2;
    highp float tmpvar_25;
    if (bLeaf2_22) {
      tmpvar_25 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_26;
    if (bLeaf2_22) {
      tmpvar_26 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_27;
    highp vec4 tmpvar_28;
    tmpvar_28.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_28.x = (tmpvar_25 + tmpvar_20);
    highp vec4 tmpvar_29;
    tmpvar_29 = abs(((
      fract((tmpvar_28 + 0.5))
     * 2.0) - 1.0));
    vPos_27 = (tmpvar_19 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_26 * (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_24 = tmpvar_2;
    vPos_23 = vPos_27;
    if (isBestWind_21) {
      highp vec3 tmpvar_30;
      tmpvar_30 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_31;
      if (bLeaf2_22) {
        tmpvar_31 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_32;
      if (bLeaf2_22) {
        tmpvar_32 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_33;
      if (bLeaf2_22) {
        tmpvar_33 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_34;
      if (bLeaf2_22) {
        tmpvar_34 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_35;
      if (bLeaf2_22) {
        tmpvar_35 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_35 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_36;
      if (bLeaf2_22) {
        tmpvar_36 = bool(1);
      } else {
        tmpvar_36 = bool(1);
      };
      highp float fTwitch_37;
      highp vec3 vAxis_38;
      highp vec3 tmpvar_39;
      tmpvar_39 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_40;
      tmpvar_40 = ((tmpvar_39.x + tmpvar_39.y) + tmpvar_39.z);
      highp vec4 tmpvar_41;
      tmpvar_41.x = (tmpvar_31 + tmpvar_40);
      tmpvar_41.y = ((tmpvar_31 * 0.75) - tmpvar_40);
      tmpvar_41.z = ((tmpvar_31 * 0.01) + tmpvar_40);
      tmpvar_41.w = (tmpvar_31 + tmpvar_40);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = sqrt(dot (vPos_27, vPos_27));
      highp float fAngle_45;
      fAngle_45 = ((_glesMultiTexCoord2.x * tmpvar_33) * (tmpvar_42.x + (tmpvar_42.y * tmpvar_42.y)));
      highp vec2 vSinCos_46;
      vSinCos_46.x = sin(fAngle_45);
      vSinCos_46.y = cos(fAngle_45);
      highp float tmpvar_47;
      tmpvar_47 = (1.0 - vSinCos_46.y);
      highp mat3 tmpvar_48;
      tmpvar_48[0].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.x) + vSinCos_46.y);
      tmpvar_48[0].y = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.y) + (vSinCos_46.x * tmpvar_30.z));
      tmpvar_48[0].z = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.z) - (vSinCos_46.x * tmpvar_30.y));
      tmpvar_48[1].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.y) - (vSinCos_46.x * tmpvar_30.z));
      tmpvar_48[1].y = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.y) + vSinCos_46.y);
      tmpvar_48[1].z = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.z) + (vSinCos_46.x * tmpvar_30.x));
      tmpvar_48[2].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.z) + (vSinCos_46.x * tmpvar_30.y));
      tmpvar_48[2].y = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.z) - (vSinCos_46.x * tmpvar_30.x));
      tmpvar_48[2].z = (((tmpvar_47 * tmpvar_30.z) * tmpvar_30.z) + vSinCos_46.y);
      highp vec3 tmpvar_49;
      tmpvar_49 = ((tmpvar_30.yzx * vRotatedWindVector_13.zxy) - (tmpvar_30.zxy * vRotatedWindVector_13.yzx));
      vAxis_38.xz = tmpvar_49.xz;
      highp float tmpvar_50;
      tmpvar_50 = clamp (dot (vRotatedWindVector_13, tmpvar_30), -1.0, 1.0);
      vAxis_38.y = (tmpvar_49.y + tmpvar_50);
      highp vec3 tmpvar_51;
      tmpvar_51 = normalize(vAxis_38);
      vAxis_38 = tmpvar_51;
      highp float tmpvar_52;
      tmpvar_52 = (1.570796 - (sign(tmpvar_50) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_50))) * (1.570796 + (abs(tmpvar_50) * (-0.2146018 + 
          (abs(tmpvar_50) * (0.08656672 + (abs(tmpvar_50) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_53;
      tmpvar_53 = (tmpvar_42.y - (tmpvar_42.x * tmpvar_42.x));
      fTwitch_37 = 0.0;
      if (tmpvar_36) {
        highp float fTime_54;
        fTime_54 = (tmpvar_35.z + tmpvar_40);
        highp vec4 tmpvar_55;
        tmpvar_55.zw = vec2(0.0, 0.0);
        tmpvar_55.x = fTime_54;
        tmpvar_55.y = (0.87 * fTime_54);
        highp vec4 tmpvar_56;
        highp vec4 tmpvar_57;
        tmpvar_57 = abs(((
          fract((tmpvar_55 + 0.5))
         * 2.0) - 1.0));
        tmpvar_56 = (((
          (tmpvar_57 * tmpvar_57)
         * 
          (3.0 - (2.0 * tmpvar_57))
        ) - 0.5) * 2.0);
        fTwitch_37 = (tmpvar_35.x * pow (clamp (
          ((((tmpvar_56.x * tmpvar_56.y) * tmpvar_56.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_35.y));
      };
      highp float fAngle_58;
      fAngle_58 = (_glesMultiTexCoord2.x * ((
        (tmpvar_52 * tmpvar_34)
       + 
        (tmpvar_53 * tmpvar_32)
      ) + fTwitch_37));
      highp vec2 vSinCos_59;
      vSinCos_59.x = sin(fAngle_58);
      vSinCos_59.y = cos(fAngle_58);
      highp float tmpvar_60;
      tmpvar_60 = (1.0 - vSinCos_59.y);
      highp mat3 tmpvar_61;
      tmpvar_61[0].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.x) + vSinCos_59.y);
      tmpvar_61[0].y = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.y) + (vSinCos_59.x * tmpvar_51.z));
      tmpvar_61[0].z = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.z) - (vSinCos_59.x * tmpvar_51.y));
      tmpvar_61[1].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.y) - (vSinCos_59.x * tmpvar_51.z));
      tmpvar_61[1].y = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.y) + vSinCos_59.y);
      tmpvar_61[1].z = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.z) + (vSinCos_59.x * tmpvar_51.x));
      tmpvar_61[2].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.z) + (vSinCos_59.x * tmpvar_51.y));
      tmpvar_61[2].y = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.z) - (vSinCos_59.x * tmpvar_51.x));
      tmpvar_61[2].z = (((tmpvar_60 * tmpvar_51.z) * tmpvar_51.z) + vSinCos_59.y);
      highp mat3 tmpvar_62;
      tmpvar_62 = (tmpvar_48 * tmpvar_61);
      vDirection_24 = (tmpvar_62 * _glesNormal);
      vPos_23 = (normalize((tmpvar_62 * vPos_27)) * tmpvar_44);
    };
    tmpvar_11 = vDirection_24;
    FinalPosition_14 = vPos_23;
  };
  highp vec3 tmpvar_63;
  tmpvar_63 = (FinalPosition_14 + _glesMultiTexCoord1.xyz);
  FinalPosition_14 = tmpvar_63;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_64;
    vPos_64 = tmpvar_63;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_65;
      vPos_65 = tmpvar_63;
      highp float fAdherenceScale_66;
      highp vec3 tmpvar_67;
      tmpvar_67 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_68;
      tmpvar_68 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_69;
      highp float fOscillation_70;
      fOscillation_70 = 1.0;
      highp float fAmount_71;
      highp float fTarget_72;
      highp vec4 tmpvar_73;
      tmpvar_73.x = (tmpvar_68 + _glesMultiTexCoord0.w);
      tmpvar_73.y = ((tmpvar_68 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_73.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_68 + _glesMultiTexCoord0.w));
      tmpvar_73.w = ((tmpvar_68 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_74;
      tmpvar_74 = abs(((
        fract((tmpvar_73 + 0.5))
       * 2.0) - 1.0));
      vOscillations_69 = (((
        (tmpvar_74 * tmpvar_74)
       * 
        (3.0 - (2.0 * tmpvar_74))
      ) - 0.5) * 2.0);
      highp float tmpvar_75;
      tmpvar_75 = (vOscillations_69.y * vOscillations_69.z);
      fTarget_72 = 1.0;
      fAmount_71 = tmpvar_75;
      if ((tmpvar_75 < 0.0)) {
        fTarget_72 = -1.0;
        fAmount_71 = -(tmpvar_75);
      };
      fOscillation_70 = (((
        (mix (mix (tmpvar_75, fTarget_72, fAmount_71), fTarget_72, fAmount_71) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_69.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_69.w * _ST_WindBranchWhip.x)));
      vPos_65 = (tmpvar_63 + ((tmpvar_67 * fOscillation_70) * _ST_WindBranch.y));
      highp vec4 tmpvar_76;
      tmpvar_76.zw = vec2(0.0, 0.0);
      tmpvar_76.x = ((tmpvar_68 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_76.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_77;
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      tmpvar_77 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      fAdherenceScale_66 = (1.0 - ((
        ((tmpvar_77.x * tmpvar_77.y) * tmpvar_77.x)
       * tmpvar_77.y) * _ST_WindTurbulences.x));
      fAdherenceScale_66 = (fAdherenceScale_66 + ((vOscillations_69.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_65 = (vPos_65 + ((
        ((vRotatedBranchAnchor_12 - vPos_65) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_66) * _glesMultiTexCoord0.z));
      vPos_64 = vPos_65;
    } else {
      highp vec3 vPos_79;
      vPos_79 = vPos_64;
      highp vec3 tmpvar_80;
      tmpvar_80 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_81;
      tmpvar_81 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_82;
      highp float fAmount_83;
      highp float fTarget_84;
      highp vec4 tmpvar_85;
      tmpvar_85.w = 0.0;
      tmpvar_85.x = (tmpvar_81 + _glesMultiTexCoord0.w);
      tmpvar_85.y = ((tmpvar_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_85.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_86;
      tmpvar_86 = abs(((
        fract((tmpvar_85 + 0.5))
       * 2.0) - 1.0));
      vOscillations_82 = (((
        (tmpvar_86 * tmpvar_86)
       * 
        (3.0 - (2.0 * tmpvar_86))
      ) - 0.5) * 2.0);
      highp float tmpvar_87;
      tmpvar_87 = (vOscillations_82.y * vOscillations_82.z);
      fTarget_84 = 1.0;
      fAmount_83 = tmpvar_87;
      if ((tmpvar_87 < 0.0)) {
        fTarget_84 = -1.0;
        fAmount_83 = -(tmpvar_87);
      };
      vPos_79 = (vPos_64 + ((tmpvar_80 * 
        (((mix (
          mix (tmpvar_87, fTarget_84, fAmount_83)
        , fTarget_84, fAmount_83) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_82.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_64 = vPos_79;
    };
    FinalPosition_14 = vPos_64;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_88;
    vPos_88 = FinalPosition_14;
    highp float fAdjust_89;
    highp float fLength_90;
    fLength_90 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_91;
    tmpvar_91 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_89 = tmpvar_91;
    if ((tmpvar_91 != 0.0)) {
      fAdjust_89 = pow (tmpvar_91, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_92;
    tmpvar_92.zw = vec2(0.0, 0.0);
    tmpvar_92.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_92.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_93;
    highp vec4 tmpvar_94;
    tmpvar_94 = abs(((
      fract((tmpvar_92 + 0.5))
     * 2.0) - 1.0));
    tmpvar_93 = (((
      (tmpvar_94 * tmpvar_94)
     * 
      (3.0 - (2.0 * tmpvar_94))
    ) - 0.5) * 2.0);
    vPos_88.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * (
      ((_ST_WindGlobal.y * (tmpvar_93.x + (tmpvar_93.y * tmpvar_93.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_89)));
    vPos_88 = (normalize(vPos_88) * fLength_90);
    FinalPosition_14 = vPos_88;
  };
  tmpvar_10.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_95;
  v_95.x = _World2Object[0].x;
  v_95.y = _World2Object[1].x;
  v_95.z = _World2Object[2].x;
  v_95.w = _World2Object[3].x;
  highp vec4 v_96;
  v_96.x = _World2Object[0].y;
  v_96.y = _World2Object[1].y;
  v_96.z = _World2Object[2].y;
  v_96.w = _World2Object[3].y;
  highp vec4 v_97;
  v_97.x = _World2Object[0].z;
  v_97.y = _World2Object[1].z;
  v_97.z = _World2Object[2].z;
  v_97.w = _World2Object[3].z;
  highp vec3 tmpvar_98;
  tmpvar_98 = normalize(((
    (v_95.xyz * tmpvar_11.x)
   + 
    (v_96.xyz * tmpvar_11.y)
  ) + (v_97.xyz * tmpvar_11.z)));
  worldNormal_3 = tmpvar_98;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xyz;
  lightCoord_4 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_19;
  tmpvar_19 = texture (_LightTexture0, vec2(tmpvar_18)).w;
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_20;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_19);
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_23 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tmpvar_9 * tmpvar_1) * diff_23);
  c_22.xyz = tmpvar_25;
  c_22.w = tmpvar_10;
  c_21.w = c_22.w;
  mediump vec3 tmpvar_26;
  tmpvar_26 = c_22.xyz;
  c_21.xyz = tmpvar_26;
  c_3.xyz = c_21.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_8;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_14 = tmpvar_19;
  if (((tmpvar_16 > 1.0) && (tmpvar_16 < 5.0))) {
    highp float tmpvar_20;
    tmpvar_20 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_21;
    isBestWind_21 = (tmpvar_16 == 4.0);
    bool bLeaf2_22;
    bLeaf2_22 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    highp vec3 vDirection_24;
    vDirection_24 = tmpvar_2;
    highp float tmpvar_25;
    if (bLeaf2_22) {
      tmpvar_25 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_26;
    if (bLeaf2_22) {
      tmpvar_26 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_27;
    highp vec4 tmpvar_28;
    tmpvar_28.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_28.x = (tmpvar_25 + tmpvar_20);
    highp vec4 tmpvar_29;
    tmpvar_29 = abs(((
      fract((tmpvar_28 + 0.5))
     * 2.0) - 1.0));
    vPos_27 = (tmpvar_19 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_26 * (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_24 = tmpvar_2;
    vPos_23 = vPos_27;
    if (isBestWind_21) {
      highp vec3 tmpvar_30;
      tmpvar_30 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_31;
      if (bLeaf2_22) {
        tmpvar_31 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_32;
      if (bLeaf2_22) {
        tmpvar_32 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_33;
      if (bLeaf2_22) {
        tmpvar_33 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_34;
      if (bLeaf2_22) {
        tmpvar_34 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_35;
      if (bLeaf2_22) {
        tmpvar_35 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_35 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_36;
      if (bLeaf2_22) {
        tmpvar_36 = bool(1);
      } else {
        tmpvar_36 = bool(1);
      };
      highp float fTwitch_37;
      highp vec3 vAxis_38;
      highp vec3 tmpvar_39;
      tmpvar_39 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_40;
      tmpvar_40 = ((tmpvar_39.x + tmpvar_39.y) + tmpvar_39.z);
      highp vec4 tmpvar_41;
      tmpvar_41.x = (tmpvar_31 + tmpvar_40);
      tmpvar_41.y = ((tmpvar_31 * 0.75) - tmpvar_40);
      tmpvar_41.z = ((tmpvar_31 * 0.01) + tmpvar_40);
      tmpvar_41.w = (tmpvar_31 + tmpvar_40);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = sqrt(dot (vPos_27, vPos_27));
      highp float fAngle_45;
      fAngle_45 = ((_glesMultiTexCoord2.x * tmpvar_33) * (tmpvar_42.x + (tmpvar_42.y * tmpvar_42.y)));
      highp vec2 vSinCos_46;
      vSinCos_46.x = sin(fAngle_45);
      vSinCos_46.y = cos(fAngle_45);
      highp float tmpvar_47;
      tmpvar_47 = (1.0 - vSinCos_46.y);
      highp mat3 tmpvar_48;
      tmpvar_48[0].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.x) + vSinCos_46.y);
      tmpvar_48[0].y = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.y) + (vSinCos_46.x * tmpvar_30.z));
      tmpvar_48[0].z = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.z) - (vSinCos_46.x * tmpvar_30.y));
      tmpvar_48[1].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.y) - (vSinCos_46.x * tmpvar_30.z));
      tmpvar_48[1].y = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.y) + vSinCos_46.y);
      tmpvar_48[1].z = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.z) + (vSinCos_46.x * tmpvar_30.x));
      tmpvar_48[2].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.z) + (vSinCos_46.x * tmpvar_30.y));
      tmpvar_48[2].y = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.z) - (vSinCos_46.x * tmpvar_30.x));
      tmpvar_48[2].z = (((tmpvar_47 * tmpvar_30.z) * tmpvar_30.z) + vSinCos_46.y);
      highp vec3 tmpvar_49;
      tmpvar_49 = ((tmpvar_30.yzx * vRotatedWindVector_13.zxy) - (tmpvar_30.zxy * vRotatedWindVector_13.yzx));
      vAxis_38.xz = tmpvar_49.xz;
      highp float tmpvar_50;
      tmpvar_50 = clamp (dot (vRotatedWindVector_13, tmpvar_30), -1.0, 1.0);
      vAxis_38.y = (tmpvar_49.y + tmpvar_50);
      highp vec3 tmpvar_51;
      tmpvar_51 = normalize(vAxis_38);
      vAxis_38 = tmpvar_51;
      highp float tmpvar_52;
      tmpvar_52 = (1.570796 - (sign(tmpvar_50) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_50))) * (1.570796 + (abs(tmpvar_50) * (-0.2146018 + 
          (abs(tmpvar_50) * (0.08656672 + (abs(tmpvar_50) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_53;
      tmpvar_53 = (tmpvar_42.y - (tmpvar_42.x * tmpvar_42.x));
      fTwitch_37 = 0.0;
      if (tmpvar_36) {
        highp float fTime_54;
        fTime_54 = (tmpvar_35.z + tmpvar_40);
        highp vec4 tmpvar_55;
        tmpvar_55.zw = vec2(0.0, 0.0);
        tmpvar_55.x = fTime_54;
        tmpvar_55.y = (0.87 * fTime_54);
        highp vec4 tmpvar_56;
        highp vec4 tmpvar_57;
        tmpvar_57 = abs(((
          fract((tmpvar_55 + 0.5))
         * 2.0) - 1.0));
        tmpvar_56 = (((
          (tmpvar_57 * tmpvar_57)
         * 
          (3.0 - (2.0 * tmpvar_57))
        ) - 0.5) * 2.0);
        fTwitch_37 = (tmpvar_35.x * pow (clamp (
          ((((tmpvar_56.x * tmpvar_56.y) * tmpvar_56.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_35.y));
      };
      highp float fAngle_58;
      fAngle_58 = (_glesMultiTexCoord2.x * ((
        (tmpvar_52 * tmpvar_34)
       + 
        (tmpvar_53 * tmpvar_32)
      ) + fTwitch_37));
      highp vec2 vSinCos_59;
      vSinCos_59.x = sin(fAngle_58);
      vSinCos_59.y = cos(fAngle_58);
      highp float tmpvar_60;
      tmpvar_60 = (1.0 - vSinCos_59.y);
      highp mat3 tmpvar_61;
      tmpvar_61[0].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.x) + vSinCos_59.y);
      tmpvar_61[0].y = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.y) + (vSinCos_59.x * tmpvar_51.z));
      tmpvar_61[0].z = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.z) - (vSinCos_59.x * tmpvar_51.y));
      tmpvar_61[1].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.y) - (vSinCos_59.x * tmpvar_51.z));
      tmpvar_61[1].y = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.y) + vSinCos_59.y);
      tmpvar_61[1].z = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.z) + (vSinCos_59.x * tmpvar_51.x));
      tmpvar_61[2].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.z) + (vSinCos_59.x * tmpvar_51.y));
      tmpvar_61[2].y = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.z) - (vSinCos_59.x * tmpvar_51.x));
      tmpvar_61[2].z = (((tmpvar_60 * tmpvar_51.z) * tmpvar_51.z) + vSinCos_59.y);
      highp mat3 tmpvar_62;
      tmpvar_62 = (tmpvar_48 * tmpvar_61);
      vDirection_24 = (tmpvar_62 * _glesNormal);
      vPos_23 = (normalize((tmpvar_62 * vPos_27)) * tmpvar_44);
    };
    tmpvar_11 = vDirection_24;
    FinalPosition_14 = vPos_23;
  };
  highp vec3 tmpvar_63;
  tmpvar_63 = (FinalPosition_14 + _glesMultiTexCoord1.xyz);
  FinalPosition_14 = tmpvar_63;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_64;
    vPos_64 = tmpvar_63;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_65;
      vPos_65 = tmpvar_63;
      highp float fAdherenceScale_66;
      highp vec3 tmpvar_67;
      tmpvar_67 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_68;
      tmpvar_68 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_69;
      highp float fOscillation_70;
      fOscillation_70 = 1.0;
      highp float fAmount_71;
      highp float fTarget_72;
      highp vec4 tmpvar_73;
      tmpvar_73.x = (tmpvar_68 + _glesMultiTexCoord0.w);
      tmpvar_73.y = ((tmpvar_68 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_73.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_68 + _glesMultiTexCoord0.w));
      tmpvar_73.w = ((tmpvar_68 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_74;
      tmpvar_74 = abs(((
        fract((tmpvar_73 + 0.5))
       * 2.0) - 1.0));
      vOscillations_69 = (((
        (tmpvar_74 * tmpvar_74)
       * 
        (3.0 - (2.0 * tmpvar_74))
      ) - 0.5) * 2.0);
      highp float tmpvar_75;
      tmpvar_75 = (vOscillations_69.y * vOscillations_69.z);
      fTarget_72 = 1.0;
      fAmount_71 = tmpvar_75;
      if ((tmpvar_75 < 0.0)) {
        fTarget_72 = -1.0;
        fAmount_71 = -(tmpvar_75);
      };
      fOscillation_70 = (((
        (mix (mix (tmpvar_75, fTarget_72, fAmount_71), fTarget_72, fAmount_71) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_69.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_69.w * _ST_WindBranchWhip.x)));
      vPos_65 = (tmpvar_63 + ((tmpvar_67 * fOscillation_70) * _ST_WindBranch.y));
      highp vec4 tmpvar_76;
      tmpvar_76.zw = vec2(0.0, 0.0);
      tmpvar_76.x = ((tmpvar_68 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_76.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_77;
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      tmpvar_77 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      fAdherenceScale_66 = (1.0 - ((
        ((tmpvar_77.x * tmpvar_77.y) * tmpvar_77.x)
       * tmpvar_77.y) * _ST_WindTurbulences.x));
      fAdherenceScale_66 = (fAdherenceScale_66 + ((vOscillations_69.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_65 = (vPos_65 + ((
        ((vRotatedBranchAnchor_12 - vPos_65) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_66) * _glesMultiTexCoord0.z));
      vPos_64 = vPos_65;
    } else {
      highp vec3 vPos_79;
      vPos_79 = vPos_64;
      highp vec3 tmpvar_80;
      tmpvar_80 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_81;
      tmpvar_81 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_82;
      highp float fAmount_83;
      highp float fTarget_84;
      highp vec4 tmpvar_85;
      tmpvar_85.w = 0.0;
      tmpvar_85.x = (tmpvar_81 + _glesMultiTexCoord0.w);
      tmpvar_85.y = ((tmpvar_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_85.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_86;
      tmpvar_86 = abs(((
        fract((tmpvar_85 + 0.5))
       * 2.0) - 1.0));
      vOscillations_82 = (((
        (tmpvar_86 * tmpvar_86)
       * 
        (3.0 - (2.0 * tmpvar_86))
      ) - 0.5) * 2.0);
      highp float tmpvar_87;
      tmpvar_87 = (vOscillations_82.y * vOscillations_82.z);
      fTarget_84 = 1.0;
      fAmount_83 = tmpvar_87;
      if ((tmpvar_87 < 0.0)) {
        fTarget_84 = -1.0;
        fAmount_83 = -(tmpvar_87);
      };
      vPos_79 = (vPos_64 + ((tmpvar_80 * 
        (((mix (
          mix (tmpvar_87, fTarget_84, fAmount_83)
        , fTarget_84, fAmount_83) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_82.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_64 = vPos_79;
    };
    FinalPosition_14 = vPos_64;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_88;
    vPos_88 = FinalPosition_14;
    highp float fAdjust_89;
    highp float fLength_90;
    fLength_90 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_91;
    tmpvar_91 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_89 = tmpvar_91;
    if ((tmpvar_91 != 0.0)) {
      fAdjust_89 = pow (tmpvar_91, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_92;
    tmpvar_92.zw = vec2(0.0, 0.0);
    tmpvar_92.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_92.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_93;
    highp vec4 tmpvar_94;
    tmpvar_94 = abs(((
      fract((tmpvar_92 + 0.5))
     * 2.0) - 1.0));
    tmpvar_93 = (((
      (tmpvar_94 * tmpvar_94)
     * 
      (3.0 - (2.0 * tmpvar_94))
    ) - 0.5) * 2.0);
    vPos_88.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * (
      ((_ST_WindGlobal.y * (tmpvar_93.x + (tmpvar_93.y * tmpvar_93.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_89)));
    vPos_88 = (normalize(vPos_88) * fLength_90);
    FinalPosition_14 = vPos_88;
  };
  tmpvar_10.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_95;
  v_95.x = _World2Object[0].x;
  v_95.y = _World2Object[1].x;
  v_95.z = _World2Object[2].x;
  v_95.w = _World2Object[3].x;
  highp vec4 v_96;
  v_96.x = _World2Object[0].y;
  v_96.y = _World2Object[1].y;
  v_96.z = _World2Object[2].y;
  v_96.w = _World2Object[3].y;
  highp vec4 v_97;
  v_97.x = _World2Object[0].z;
  v_97.y = _World2Object[1].z;
  v_97.z = _World2Object[2].z;
  v_97.w = _World2Object[3].z;
  highp vec3 tmpvar_98;
  tmpvar_98 = normalize(((
    (v_95.xyz * tmpvar_11.x)
   + 
    (v_96.xyz * tmpvar_11.y)
  ) + (v_97.xyz * tmpvar_11.z)));
  worldNormal_3 = tmpvar_98;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_12;
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_15;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_18 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = ((tmpvar_8 * tmpvar_1) * diff_18);
  c_17.xyz = tmpvar_20;
  c_17.w = tmpvar_9;
  c_16.w = c_17.w;
  mediump vec3 tmpvar_21;
  tmpvar_21 = c_17.xyz;
  c_16.xyz = tmpvar_21;
  c_3.xyz = c_16.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "GEOM_TYPE_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_8;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_14 = tmpvar_19;
  if (((tmpvar_16 > 1.0) && (tmpvar_16 < 5.0))) {
    highp float tmpvar_20;
    tmpvar_20 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_21;
    isBestWind_21 = (tmpvar_16 == 4.0);
    bool bLeaf2_22;
    bLeaf2_22 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    highp vec3 vDirection_24;
    vDirection_24 = tmpvar_2;
    highp float tmpvar_25;
    if (bLeaf2_22) {
      tmpvar_25 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_26;
    if (bLeaf2_22) {
      tmpvar_26 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_27;
    highp vec4 tmpvar_28;
    tmpvar_28.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_28.x = (tmpvar_25 + tmpvar_20);
    highp vec4 tmpvar_29;
    tmpvar_29 = abs(((
      fract((tmpvar_28 + 0.5))
     * 2.0) - 1.0));
    vPos_27 = (tmpvar_19 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_26 * (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_24 = tmpvar_2;
    vPos_23 = vPos_27;
    if (isBestWind_21) {
      highp vec3 tmpvar_30;
      tmpvar_30 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_31;
      if (bLeaf2_22) {
        tmpvar_31 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_32;
      if (bLeaf2_22) {
        tmpvar_32 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_33;
      if (bLeaf2_22) {
        tmpvar_33 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_34;
      if (bLeaf2_22) {
        tmpvar_34 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_35;
      if (bLeaf2_22) {
        tmpvar_35 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_35 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_36;
      if (bLeaf2_22) {
        tmpvar_36 = bool(1);
      } else {
        tmpvar_36 = bool(1);
      };
      highp float fTwitch_37;
      highp vec3 vAxis_38;
      highp vec3 tmpvar_39;
      tmpvar_39 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_40;
      tmpvar_40 = ((tmpvar_39.x + tmpvar_39.y) + tmpvar_39.z);
      highp vec4 tmpvar_41;
      tmpvar_41.x = (tmpvar_31 + tmpvar_40);
      tmpvar_41.y = ((tmpvar_31 * 0.75) - tmpvar_40);
      tmpvar_41.z = ((tmpvar_31 * 0.01) + tmpvar_40);
      tmpvar_41.w = (tmpvar_31 + tmpvar_40);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = sqrt(dot (vPos_27, vPos_27));
      highp float fAngle_45;
      fAngle_45 = ((_glesMultiTexCoord2.x * tmpvar_33) * (tmpvar_42.x + (tmpvar_42.y * tmpvar_42.y)));
      highp vec2 vSinCos_46;
      vSinCos_46.x = sin(fAngle_45);
      vSinCos_46.y = cos(fAngle_45);
      highp float tmpvar_47;
      tmpvar_47 = (1.0 - vSinCos_46.y);
      highp mat3 tmpvar_48;
      tmpvar_48[0].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.x) + vSinCos_46.y);
      tmpvar_48[0].y = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.y) + (vSinCos_46.x * tmpvar_30.z));
      tmpvar_48[0].z = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.z) - (vSinCos_46.x * tmpvar_30.y));
      tmpvar_48[1].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.y) - (vSinCos_46.x * tmpvar_30.z));
      tmpvar_48[1].y = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.y) + vSinCos_46.y);
      tmpvar_48[1].z = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.z) + (vSinCos_46.x * tmpvar_30.x));
      tmpvar_48[2].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.z) + (vSinCos_46.x * tmpvar_30.y));
      tmpvar_48[2].y = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.z) - (vSinCos_46.x * tmpvar_30.x));
      tmpvar_48[2].z = (((tmpvar_47 * tmpvar_30.z) * tmpvar_30.z) + vSinCos_46.y);
      highp vec3 tmpvar_49;
      tmpvar_49 = ((tmpvar_30.yzx * vRotatedWindVector_13.zxy) - (tmpvar_30.zxy * vRotatedWindVector_13.yzx));
      vAxis_38.xz = tmpvar_49.xz;
      highp float tmpvar_50;
      tmpvar_50 = clamp (dot (vRotatedWindVector_13, tmpvar_30), -1.0, 1.0);
      vAxis_38.y = (tmpvar_49.y + tmpvar_50);
      highp vec3 tmpvar_51;
      tmpvar_51 = normalize(vAxis_38);
      vAxis_38 = tmpvar_51;
      highp float tmpvar_52;
      tmpvar_52 = (1.570796 - (sign(tmpvar_50) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_50))) * (1.570796 + (abs(tmpvar_50) * (-0.2146018 + 
          (abs(tmpvar_50) * (0.08656672 + (abs(tmpvar_50) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_53;
      tmpvar_53 = (tmpvar_42.y - (tmpvar_42.x * tmpvar_42.x));
      fTwitch_37 = 0.0;
      if (tmpvar_36) {
        highp float fTime_54;
        fTime_54 = (tmpvar_35.z + tmpvar_40);
        highp vec4 tmpvar_55;
        tmpvar_55.zw = vec2(0.0, 0.0);
        tmpvar_55.x = fTime_54;
        tmpvar_55.y = (0.87 * fTime_54);
        highp vec4 tmpvar_56;
        highp vec4 tmpvar_57;
        tmpvar_57 = abs(((
          fract((tmpvar_55 + 0.5))
         * 2.0) - 1.0));
        tmpvar_56 = (((
          (tmpvar_57 * tmpvar_57)
         * 
          (3.0 - (2.0 * tmpvar_57))
        ) - 0.5) * 2.0);
        fTwitch_37 = (tmpvar_35.x * pow (clamp (
          ((((tmpvar_56.x * tmpvar_56.y) * tmpvar_56.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_35.y));
      };
      highp float fAngle_58;
      fAngle_58 = (_glesMultiTexCoord2.x * ((
        (tmpvar_52 * tmpvar_34)
       + 
        (tmpvar_53 * tmpvar_32)
      ) + fTwitch_37));
      highp vec2 vSinCos_59;
      vSinCos_59.x = sin(fAngle_58);
      vSinCos_59.y = cos(fAngle_58);
      highp float tmpvar_60;
      tmpvar_60 = (1.0 - vSinCos_59.y);
      highp mat3 tmpvar_61;
      tmpvar_61[0].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.x) + vSinCos_59.y);
      tmpvar_61[0].y = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.y) + (vSinCos_59.x * tmpvar_51.z));
      tmpvar_61[0].z = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.z) - (vSinCos_59.x * tmpvar_51.y));
      tmpvar_61[1].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.y) - (vSinCos_59.x * tmpvar_51.z));
      tmpvar_61[1].y = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.y) + vSinCos_59.y);
      tmpvar_61[1].z = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.z) + (vSinCos_59.x * tmpvar_51.x));
      tmpvar_61[2].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.z) + (vSinCos_59.x * tmpvar_51.y));
      tmpvar_61[2].y = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.z) - (vSinCos_59.x * tmpvar_51.x));
      tmpvar_61[2].z = (((tmpvar_60 * tmpvar_51.z) * tmpvar_51.z) + vSinCos_59.y);
      highp mat3 tmpvar_62;
      tmpvar_62 = (tmpvar_48 * tmpvar_61);
      vDirection_24 = (tmpvar_62 * _glesNormal);
      vPos_23 = (normalize((tmpvar_62 * vPos_27)) * tmpvar_44);
    };
    tmpvar_11 = vDirection_24;
    FinalPosition_14 = vPos_23;
  };
  highp vec3 tmpvar_63;
  tmpvar_63 = (FinalPosition_14 + _glesMultiTexCoord1.xyz);
  FinalPosition_14 = tmpvar_63;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_64;
    vPos_64 = tmpvar_63;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_65;
      vPos_65 = tmpvar_63;
      highp float fAdherenceScale_66;
      highp vec3 tmpvar_67;
      tmpvar_67 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_68;
      tmpvar_68 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_69;
      highp float fOscillation_70;
      fOscillation_70 = 1.0;
      highp float fAmount_71;
      highp float fTarget_72;
      highp vec4 tmpvar_73;
      tmpvar_73.x = (tmpvar_68 + _glesMultiTexCoord0.w);
      tmpvar_73.y = ((tmpvar_68 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_73.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_68 + _glesMultiTexCoord0.w));
      tmpvar_73.w = ((tmpvar_68 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_74;
      tmpvar_74 = abs(((
        fract((tmpvar_73 + 0.5))
       * 2.0) - 1.0));
      vOscillations_69 = (((
        (tmpvar_74 * tmpvar_74)
       * 
        (3.0 - (2.0 * tmpvar_74))
      ) - 0.5) * 2.0);
      highp float tmpvar_75;
      tmpvar_75 = (vOscillations_69.y * vOscillations_69.z);
      fTarget_72 = 1.0;
      fAmount_71 = tmpvar_75;
      if ((tmpvar_75 < 0.0)) {
        fTarget_72 = -1.0;
        fAmount_71 = -(tmpvar_75);
      };
      fOscillation_70 = (((
        (mix (mix (tmpvar_75, fTarget_72, fAmount_71), fTarget_72, fAmount_71) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_69.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_69.w * _ST_WindBranchWhip.x)));
      vPos_65 = (tmpvar_63 + ((tmpvar_67 * fOscillation_70) * _ST_WindBranch.y));
      highp vec4 tmpvar_76;
      tmpvar_76.zw = vec2(0.0, 0.0);
      tmpvar_76.x = ((tmpvar_68 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_76.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_77;
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      tmpvar_77 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      fAdherenceScale_66 = (1.0 - ((
        ((tmpvar_77.x * tmpvar_77.y) * tmpvar_77.x)
       * tmpvar_77.y) * _ST_WindTurbulences.x));
      fAdherenceScale_66 = (fAdherenceScale_66 + ((vOscillations_69.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_65 = (vPos_65 + ((
        ((vRotatedBranchAnchor_12 - vPos_65) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_66) * _glesMultiTexCoord0.z));
      vPos_64 = vPos_65;
    } else {
      highp vec3 vPos_79;
      vPos_79 = vPos_64;
      highp vec3 tmpvar_80;
      tmpvar_80 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_81;
      tmpvar_81 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_82;
      highp float fAmount_83;
      highp float fTarget_84;
      highp vec4 tmpvar_85;
      tmpvar_85.w = 0.0;
      tmpvar_85.x = (tmpvar_81 + _glesMultiTexCoord0.w);
      tmpvar_85.y = ((tmpvar_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_85.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_86;
      tmpvar_86 = abs(((
        fract((tmpvar_85 + 0.5))
       * 2.0) - 1.0));
      vOscillations_82 = (((
        (tmpvar_86 * tmpvar_86)
       * 
        (3.0 - (2.0 * tmpvar_86))
      ) - 0.5) * 2.0);
      highp float tmpvar_87;
      tmpvar_87 = (vOscillations_82.y * vOscillations_82.z);
      fTarget_84 = 1.0;
      fAmount_83 = tmpvar_87;
      if ((tmpvar_87 < 0.0)) {
        fTarget_84 = -1.0;
        fAmount_83 = -(tmpvar_87);
      };
      vPos_79 = (vPos_64 + ((tmpvar_80 * 
        (((mix (
          mix (tmpvar_87, fTarget_84, fAmount_83)
        , fTarget_84, fAmount_83) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_82.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_64 = vPos_79;
    };
    FinalPosition_14 = vPos_64;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_88;
    vPos_88 = FinalPosition_14;
    highp float fAdjust_89;
    highp float fLength_90;
    fLength_90 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_91;
    tmpvar_91 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_89 = tmpvar_91;
    if ((tmpvar_91 != 0.0)) {
      fAdjust_89 = pow (tmpvar_91, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_92;
    tmpvar_92.zw = vec2(0.0, 0.0);
    tmpvar_92.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_92.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_93;
    highp vec4 tmpvar_94;
    tmpvar_94 = abs(((
      fract((tmpvar_92 + 0.5))
     * 2.0) - 1.0));
    tmpvar_93 = (((
      (tmpvar_94 * tmpvar_94)
     * 
      (3.0 - (2.0 * tmpvar_94))
    ) - 0.5) * 2.0);
    vPos_88.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * (
      ((_ST_WindGlobal.y * (tmpvar_93.x + (tmpvar_93.y * tmpvar_93.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_89)));
    vPos_88 = (normalize(vPos_88) * fLength_90);
    FinalPosition_14 = vPos_88;
  };
  tmpvar_10.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_95;
  v_95.x = _World2Object[0].x;
  v_95.y = _World2Object[1].x;
  v_95.z = _World2Object[2].x;
  v_95.w = _World2Object[3].x;
  highp vec4 v_96;
  v_96.x = _World2Object[0].y;
  v_96.y = _World2Object[1].y;
  v_96.z = _World2Object[2].y;
  v_96.w = _World2Object[3].y;
  highp vec4 v_97;
  v_97.x = _World2Object[0].z;
  v_97.y = _World2Object[1].z;
  v_97.z = _World2Object[2].z;
  v_97.w = _World2Object[3].z;
  highp vec3 tmpvar_98;
  tmpvar_98 = normalize(((
    (v_95.xyz * tmpvar_11.x)
   + 
    (v_96.xyz * tmpvar_11.y)
  ) + (v_97.xyz * tmpvar_11.z)));
  worldNormal_3 = tmpvar_98;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_12;
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_15;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_18 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = ((tmpvar_8 * tmpvar_1) * diff_18);
  c_17.xyz = tmpvar_20;
  c_17.w = tmpvar_9;
  c_16.w = c_17.w;
  mediump vec3 tmpvar_21;
  tmpvar_21 = c_17.xyz;
  c_16.xyz = tmpvar_21;
  c_3.xyz = c_16.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "SPOT" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_8;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_14 = tmpvar_19;
  if (((tmpvar_16 > 1.0) && (tmpvar_16 < 5.0))) {
    highp float tmpvar_20;
    tmpvar_20 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_21;
    isBestWind_21 = (tmpvar_16 == 4.0);
    bool bLeaf2_22;
    bLeaf2_22 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    highp vec3 vDirection_24;
    vDirection_24 = tmpvar_2;
    highp float tmpvar_25;
    if (bLeaf2_22) {
      tmpvar_25 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_26;
    if (bLeaf2_22) {
      tmpvar_26 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_27;
    highp vec4 tmpvar_28;
    tmpvar_28.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_28.x = (tmpvar_25 + tmpvar_20);
    highp vec4 tmpvar_29;
    tmpvar_29 = abs(((
      fract((tmpvar_28 + 0.5))
     * 2.0) - 1.0));
    vPos_27 = (tmpvar_19 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_26 * (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_24 = tmpvar_2;
    vPos_23 = vPos_27;
    if (isBestWind_21) {
      highp vec3 tmpvar_30;
      tmpvar_30 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_31;
      if (bLeaf2_22) {
        tmpvar_31 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_32;
      if (bLeaf2_22) {
        tmpvar_32 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_33;
      if (bLeaf2_22) {
        tmpvar_33 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_34;
      if (bLeaf2_22) {
        tmpvar_34 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_35;
      if (bLeaf2_22) {
        tmpvar_35 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_35 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_36;
      if (bLeaf2_22) {
        tmpvar_36 = bool(1);
      } else {
        tmpvar_36 = bool(1);
      };
      highp float fTwitch_37;
      highp vec3 vAxis_38;
      highp vec3 tmpvar_39;
      tmpvar_39 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_40;
      tmpvar_40 = ((tmpvar_39.x + tmpvar_39.y) + tmpvar_39.z);
      highp vec4 tmpvar_41;
      tmpvar_41.x = (tmpvar_31 + tmpvar_40);
      tmpvar_41.y = ((tmpvar_31 * 0.75) - tmpvar_40);
      tmpvar_41.z = ((tmpvar_31 * 0.01) + tmpvar_40);
      tmpvar_41.w = (tmpvar_31 + tmpvar_40);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = sqrt(dot (vPos_27, vPos_27));
      highp float fAngle_45;
      fAngle_45 = ((_glesMultiTexCoord2.x * tmpvar_33) * (tmpvar_42.x + (tmpvar_42.y * tmpvar_42.y)));
      highp vec2 vSinCos_46;
      vSinCos_46.x = sin(fAngle_45);
      vSinCos_46.y = cos(fAngle_45);
      highp float tmpvar_47;
      tmpvar_47 = (1.0 - vSinCos_46.y);
      highp mat3 tmpvar_48;
      tmpvar_48[0].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.x) + vSinCos_46.y);
      tmpvar_48[0].y = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.y) + (vSinCos_46.x * tmpvar_30.z));
      tmpvar_48[0].z = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.z) - (vSinCos_46.x * tmpvar_30.y));
      tmpvar_48[1].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.y) - (vSinCos_46.x * tmpvar_30.z));
      tmpvar_48[1].y = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.y) + vSinCos_46.y);
      tmpvar_48[1].z = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.z) + (vSinCos_46.x * tmpvar_30.x));
      tmpvar_48[2].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.z) + (vSinCos_46.x * tmpvar_30.y));
      tmpvar_48[2].y = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.z) - (vSinCos_46.x * tmpvar_30.x));
      tmpvar_48[2].z = (((tmpvar_47 * tmpvar_30.z) * tmpvar_30.z) + vSinCos_46.y);
      highp vec3 tmpvar_49;
      tmpvar_49 = ((tmpvar_30.yzx * vRotatedWindVector_13.zxy) - (tmpvar_30.zxy * vRotatedWindVector_13.yzx));
      vAxis_38.xz = tmpvar_49.xz;
      highp float tmpvar_50;
      tmpvar_50 = clamp (dot (vRotatedWindVector_13, tmpvar_30), -1.0, 1.0);
      vAxis_38.y = (tmpvar_49.y + tmpvar_50);
      highp vec3 tmpvar_51;
      tmpvar_51 = normalize(vAxis_38);
      vAxis_38 = tmpvar_51;
      highp float tmpvar_52;
      tmpvar_52 = (1.570796 - (sign(tmpvar_50) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_50))) * (1.570796 + (abs(tmpvar_50) * (-0.2146018 + 
          (abs(tmpvar_50) * (0.08656672 + (abs(tmpvar_50) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_53;
      tmpvar_53 = (tmpvar_42.y - (tmpvar_42.x * tmpvar_42.x));
      fTwitch_37 = 0.0;
      if (tmpvar_36) {
        highp float fTime_54;
        fTime_54 = (tmpvar_35.z + tmpvar_40);
        highp vec4 tmpvar_55;
        tmpvar_55.zw = vec2(0.0, 0.0);
        tmpvar_55.x = fTime_54;
        tmpvar_55.y = (0.87 * fTime_54);
        highp vec4 tmpvar_56;
        highp vec4 tmpvar_57;
        tmpvar_57 = abs(((
          fract((tmpvar_55 + 0.5))
         * 2.0) - 1.0));
        tmpvar_56 = (((
          (tmpvar_57 * tmpvar_57)
         * 
          (3.0 - (2.0 * tmpvar_57))
        ) - 0.5) * 2.0);
        fTwitch_37 = (tmpvar_35.x * pow (clamp (
          ((((tmpvar_56.x * tmpvar_56.y) * tmpvar_56.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_35.y));
      };
      highp float fAngle_58;
      fAngle_58 = (_glesMultiTexCoord2.x * ((
        (tmpvar_52 * tmpvar_34)
       + 
        (tmpvar_53 * tmpvar_32)
      ) + fTwitch_37));
      highp vec2 vSinCos_59;
      vSinCos_59.x = sin(fAngle_58);
      vSinCos_59.y = cos(fAngle_58);
      highp float tmpvar_60;
      tmpvar_60 = (1.0 - vSinCos_59.y);
      highp mat3 tmpvar_61;
      tmpvar_61[0].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.x) + vSinCos_59.y);
      tmpvar_61[0].y = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.y) + (vSinCos_59.x * tmpvar_51.z));
      tmpvar_61[0].z = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.z) - (vSinCos_59.x * tmpvar_51.y));
      tmpvar_61[1].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.y) - (vSinCos_59.x * tmpvar_51.z));
      tmpvar_61[1].y = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.y) + vSinCos_59.y);
      tmpvar_61[1].z = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.z) + (vSinCos_59.x * tmpvar_51.x));
      tmpvar_61[2].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.z) + (vSinCos_59.x * tmpvar_51.y));
      tmpvar_61[2].y = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.z) - (vSinCos_59.x * tmpvar_51.x));
      tmpvar_61[2].z = (((tmpvar_60 * tmpvar_51.z) * tmpvar_51.z) + vSinCos_59.y);
      highp mat3 tmpvar_62;
      tmpvar_62 = (tmpvar_48 * tmpvar_61);
      vDirection_24 = (tmpvar_62 * _glesNormal);
      vPos_23 = (normalize((tmpvar_62 * vPos_27)) * tmpvar_44);
    };
    tmpvar_11 = vDirection_24;
    FinalPosition_14 = vPos_23;
  };
  highp vec3 tmpvar_63;
  tmpvar_63 = (FinalPosition_14 + _glesMultiTexCoord1.xyz);
  FinalPosition_14 = tmpvar_63;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_64;
    vPos_64 = tmpvar_63;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_65;
      vPos_65 = tmpvar_63;
      highp float fAdherenceScale_66;
      highp vec3 tmpvar_67;
      tmpvar_67 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_68;
      tmpvar_68 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_69;
      highp float fOscillation_70;
      fOscillation_70 = 1.0;
      highp float fAmount_71;
      highp float fTarget_72;
      highp vec4 tmpvar_73;
      tmpvar_73.x = (tmpvar_68 + _glesMultiTexCoord0.w);
      tmpvar_73.y = ((tmpvar_68 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_73.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_68 + _glesMultiTexCoord0.w));
      tmpvar_73.w = ((tmpvar_68 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_74;
      tmpvar_74 = abs(((
        fract((tmpvar_73 + 0.5))
       * 2.0) - 1.0));
      vOscillations_69 = (((
        (tmpvar_74 * tmpvar_74)
       * 
        (3.0 - (2.0 * tmpvar_74))
      ) - 0.5) * 2.0);
      highp float tmpvar_75;
      tmpvar_75 = (vOscillations_69.y * vOscillations_69.z);
      fTarget_72 = 1.0;
      fAmount_71 = tmpvar_75;
      if ((tmpvar_75 < 0.0)) {
        fTarget_72 = -1.0;
        fAmount_71 = -(tmpvar_75);
      };
      fOscillation_70 = (((
        (mix (mix (tmpvar_75, fTarget_72, fAmount_71), fTarget_72, fAmount_71) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_69.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_69.w * _ST_WindBranchWhip.x)));
      vPos_65 = (tmpvar_63 + ((tmpvar_67 * fOscillation_70) * _ST_WindBranch.y));
      highp vec4 tmpvar_76;
      tmpvar_76.zw = vec2(0.0, 0.0);
      tmpvar_76.x = ((tmpvar_68 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_76.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_77;
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      tmpvar_77 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      fAdherenceScale_66 = (1.0 - ((
        ((tmpvar_77.x * tmpvar_77.y) * tmpvar_77.x)
       * tmpvar_77.y) * _ST_WindTurbulences.x));
      fAdherenceScale_66 = (fAdherenceScale_66 + ((vOscillations_69.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_65 = (vPos_65 + ((
        ((vRotatedBranchAnchor_12 - vPos_65) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_66) * _glesMultiTexCoord0.z));
      vPos_64 = vPos_65;
    } else {
      highp vec3 vPos_79;
      vPos_79 = vPos_64;
      highp vec3 tmpvar_80;
      tmpvar_80 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_81;
      tmpvar_81 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_82;
      highp float fAmount_83;
      highp float fTarget_84;
      highp vec4 tmpvar_85;
      tmpvar_85.w = 0.0;
      tmpvar_85.x = (tmpvar_81 + _glesMultiTexCoord0.w);
      tmpvar_85.y = ((tmpvar_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_85.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_86;
      tmpvar_86 = abs(((
        fract((tmpvar_85 + 0.5))
       * 2.0) - 1.0));
      vOscillations_82 = (((
        (tmpvar_86 * tmpvar_86)
       * 
        (3.0 - (2.0 * tmpvar_86))
      ) - 0.5) * 2.0);
      highp float tmpvar_87;
      tmpvar_87 = (vOscillations_82.y * vOscillations_82.z);
      fTarget_84 = 1.0;
      fAmount_83 = tmpvar_87;
      if ((tmpvar_87 < 0.0)) {
        fTarget_84 = -1.0;
        fAmount_83 = -(tmpvar_87);
      };
      vPos_79 = (vPos_64 + ((tmpvar_80 * 
        (((mix (
          mix (tmpvar_87, fTarget_84, fAmount_83)
        , fTarget_84, fAmount_83) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_82.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_64 = vPos_79;
    };
    FinalPosition_14 = vPos_64;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_88;
    vPos_88 = FinalPosition_14;
    highp float fAdjust_89;
    highp float fLength_90;
    fLength_90 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_91;
    tmpvar_91 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_89 = tmpvar_91;
    if ((tmpvar_91 != 0.0)) {
      fAdjust_89 = pow (tmpvar_91, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_92;
    tmpvar_92.zw = vec2(0.0, 0.0);
    tmpvar_92.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_92.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_93;
    highp vec4 tmpvar_94;
    tmpvar_94 = abs(((
      fract((tmpvar_92 + 0.5))
     * 2.0) - 1.0));
    tmpvar_93 = (((
      (tmpvar_94 * tmpvar_94)
     * 
      (3.0 - (2.0 * tmpvar_94))
    ) - 0.5) * 2.0);
    vPos_88.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * (
      ((_ST_WindGlobal.y * (tmpvar_93.x + (tmpvar_93.y * tmpvar_93.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_89)));
    vPos_88 = (normalize(vPos_88) * fLength_90);
    FinalPosition_14 = vPos_88;
  };
  tmpvar_10.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_95;
  v_95.x = _World2Object[0].x;
  v_95.y = _World2Object[1].x;
  v_95.z = _World2Object[2].x;
  v_95.w = _World2Object[3].x;
  highp vec4 v_96;
  v_96.x = _World2Object[0].y;
  v_96.y = _World2Object[1].y;
  v_96.z = _World2Object[2].y;
  v_96.w = _World2Object[3].y;
  highp vec4 v_97;
  v_97.x = _World2Object[0].z;
  v_97.y = _World2Object[1].z;
  v_97.z = _World2Object[2].z;
  v_97.w = _World2Object[3].z;
  highp vec3 tmpvar_98;
  tmpvar_98 = normalize(((
    (v_95.xyz * tmpvar_11.x)
   + 
    (v_96.xyz * tmpvar_11.y)
  ) + (v_97.xyz * tmpvar_11.z)));
  worldNormal_3 = tmpvar_98;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_12.w * _Color.w);
  tmpvar_11 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_11 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  tmpvar_10 = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (_LightMatrix0 * tmpvar_17);
  lightCoord_5 = tmpvar_18;
  lowp vec4 tmpvar_19;
  mediump vec2 P_20;
  P_20 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_19 = texture2D (_LightTexture0, P_20);
  mediump float tmpvar_21;
  tmpvar_21 = dot (lightCoord_5.xyz, lightCoord_5.xyz);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_LightTextureB0, vec2(tmpvar_21));
  mediump float tmpvar_23;
  tmpvar_23 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_19.w) * tmpvar_22.w);
  atten_4 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_24;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_27 = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_10 * tmpvar_1) * diff_27);
  c_26.xyz = tmpvar_29;
  c_26.w = tmpvar_11;
  c_25.w = c_26.w;
  mediump vec3 tmpvar_30;
  tmpvar_30 = c_26.xyz;
  c_25.xyz = tmpvar_30;
  c_3.xyz = c_25.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SPOT" "GEOM_TYPE_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_8;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_14 = tmpvar_19;
  if (((tmpvar_16 > 1.0) && (tmpvar_16 < 5.0))) {
    highp float tmpvar_20;
    tmpvar_20 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_21;
    isBestWind_21 = (tmpvar_16 == 4.0);
    bool bLeaf2_22;
    bLeaf2_22 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    highp vec3 vDirection_24;
    vDirection_24 = tmpvar_2;
    highp float tmpvar_25;
    if (bLeaf2_22) {
      tmpvar_25 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_26;
    if (bLeaf2_22) {
      tmpvar_26 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_27;
    highp vec4 tmpvar_28;
    tmpvar_28.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_28.x = (tmpvar_25 + tmpvar_20);
    highp vec4 tmpvar_29;
    tmpvar_29 = abs(((
      fract((tmpvar_28 + 0.5))
     * 2.0) - 1.0));
    vPos_27 = (tmpvar_19 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_26 * (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_24 = tmpvar_2;
    vPos_23 = vPos_27;
    if (isBestWind_21) {
      highp vec3 tmpvar_30;
      tmpvar_30 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_31;
      if (bLeaf2_22) {
        tmpvar_31 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_32;
      if (bLeaf2_22) {
        tmpvar_32 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_33;
      if (bLeaf2_22) {
        tmpvar_33 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_34;
      if (bLeaf2_22) {
        tmpvar_34 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_35;
      if (bLeaf2_22) {
        tmpvar_35 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_35 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_36;
      if (bLeaf2_22) {
        tmpvar_36 = bool(1);
      } else {
        tmpvar_36 = bool(1);
      };
      highp float fTwitch_37;
      highp vec3 vAxis_38;
      highp vec3 tmpvar_39;
      tmpvar_39 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_40;
      tmpvar_40 = ((tmpvar_39.x + tmpvar_39.y) + tmpvar_39.z);
      highp vec4 tmpvar_41;
      tmpvar_41.x = (tmpvar_31 + tmpvar_40);
      tmpvar_41.y = ((tmpvar_31 * 0.75) - tmpvar_40);
      tmpvar_41.z = ((tmpvar_31 * 0.01) + tmpvar_40);
      tmpvar_41.w = (tmpvar_31 + tmpvar_40);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = sqrt(dot (vPos_27, vPos_27));
      highp float fAngle_45;
      fAngle_45 = ((_glesMultiTexCoord2.x * tmpvar_33) * (tmpvar_42.x + (tmpvar_42.y * tmpvar_42.y)));
      highp vec2 vSinCos_46;
      vSinCos_46.x = sin(fAngle_45);
      vSinCos_46.y = cos(fAngle_45);
      highp float tmpvar_47;
      tmpvar_47 = (1.0 - vSinCos_46.y);
      highp mat3 tmpvar_48;
      tmpvar_48[0].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.x) + vSinCos_46.y);
      tmpvar_48[0].y = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.y) + (vSinCos_46.x * tmpvar_30.z));
      tmpvar_48[0].z = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.z) - (vSinCos_46.x * tmpvar_30.y));
      tmpvar_48[1].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.y) - (vSinCos_46.x * tmpvar_30.z));
      tmpvar_48[1].y = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.y) + vSinCos_46.y);
      tmpvar_48[1].z = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.z) + (vSinCos_46.x * tmpvar_30.x));
      tmpvar_48[2].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.z) + (vSinCos_46.x * tmpvar_30.y));
      tmpvar_48[2].y = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.z) - (vSinCos_46.x * tmpvar_30.x));
      tmpvar_48[2].z = (((tmpvar_47 * tmpvar_30.z) * tmpvar_30.z) + vSinCos_46.y);
      highp vec3 tmpvar_49;
      tmpvar_49 = ((tmpvar_30.yzx * vRotatedWindVector_13.zxy) - (tmpvar_30.zxy * vRotatedWindVector_13.yzx));
      vAxis_38.xz = tmpvar_49.xz;
      highp float tmpvar_50;
      tmpvar_50 = clamp (dot (vRotatedWindVector_13, tmpvar_30), -1.0, 1.0);
      vAxis_38.y = (tmpvar_49.y + tmpvar_50);
      highp vec3 tmpvar_51;
      tmpvar_51 = normalize(vAxis_38);
      vAxis_38 = tmpvar_51;
      highp float tmpvar_52;
      tmpvar_52 = (1.570796 - (sign(tmpvar_50) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_50))) * (1.570796 + (abs(tmpvar_50) * (-0.2146018 + 
          (abs(tmpvar_50) * (0.08656672 + (abs(tmpvar_50) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_53;
      tmpvar_53 = (tmpvar_42.y - (tmpvar_42.x * tmpvar_42.x));
      fTwitch_37 = 0.0;
      if (tmpvar_36) {
        highp float fTime_54;
        fTime_54 = (tmpvar_35.z + tmpvar_40);
        highp vec4 tmpvar_55;
        tmpvar_55.zw = vec2(0.0, 0.0);
        tmpvar_55.x = fTime_54;
        tmpvar_55.y = (0.87 * fTime_54);
        highp vec4 tmpvar_56;
        highp vec4 tmpvar_57;
        tmpvar_57 = abs(((
          fract((tmpvar_55 + 0.5))
         * 2.0) - 1.0));
        tmpvar_56 = (((
          (tmpvar_57 * tmpvar_57)
         * 
          (3.0 - (2.0 * tmpvar_57))
        ) - 0.5) * 2.0);
        fTwitch_37 = (tmpvar_35.x * pow (clamp (
          ((((tmpvar_56.x * tmpvar_56.y) * tmpvar_56.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_35.y));
      };
      highp float fAngle_58;
      fAngle_58 = (_glesMultiTexCoord2.x * ((
        (tmpvar_52 * tmpvar_34)
       + 
        (tmpvar_53 * tmpvar_32)
      ) + fTwitch_37));
      highp vec2 vSinCos_59;
      vSinCos_59.x = sin(fAngle_58);
      vSinCos_59.y = cos(fAngle_58);
      highp float tmpvar_60;
      tmpvar_60 = (1.0 - vSinCos_59.y);
      highp mat3 tmpvar_61;
      tmpvar_61[0].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.x) + vSinCos_59.y);
      tmpvar_61[0].y = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.y) + (vSinCos_59.x * tmpvar_51.z));
      tmpvar_61[0].z = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.z) - (vSinCos_59.x * tmpvar_51.y));
      tmpvar_61[1].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.y) - (vSinCos_59.x * tmpvar_51.z));
      tmpvar_61[1].y = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.y) + vSinCos_59.y);
      tmpvar_61[1].z = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.z) + (vSinCos_59.x * tmpvar_51.x));
      tmpvar_61[2].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.z) + (vSinCos_59.x * tmpvar_51.y));
      tmpvar_61[2].y = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.z) - (vSinCos_59.x * tmpvar_51.x));
      tmpvar_61[2].z = (((tmpvar_60 * tmpvar_51.z) * tmpvar_51.z) + vSinCos_59.y);
      highp mat3 tmpvar_62;
      tmpvar_62 = (tmpvar_48 * tmpvar_61);
      vDirection_24 = (tmpvar_62 * _glesNormal);
      vPos_23 = (normalize((tmpvar_62 * vPos_27)) * tmpvar_44);
    };
    tmpvar_11 = vDirection_24;
    FinalPosition_14 = vPos_23;
  };
  highp vec3 tmpvar_63;
  tmpvar_63 = (FinalPosition_14 + _glesMultiTexCoord1.xyz);
  FinalPosition_14 = tmpvar_63;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_64;
    vPos_64 = tmpvar_63;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_65;
      vPos_65 = tmpvar_63;
      highp float fAdherenceScale_66;
      highp vec3 tmpvar_67;
      tmpvar_67 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_68;
      tmpvar_68 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_69;
      highp float fOscillation_70;
      fOscillation_70 = 1.0;
      highp float fAmount_71;
      highp float fTarget_72;
      highp vec4 tmpvar_73;
      tmpvar_73.x = (tmpvar_68 + _glesMultiTexCoord0.w);
      tmpvar_73.y = ((tmpvar_68 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_73.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_68 + _glesMultiTexCoord0.w));
      tmpvar_73.w = ((tmpvar_68 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_74;
      tmpvar_74 = abs(((
        fract((tmpvar_73 + 0.5))
       * 2.0) - 1.0));
      vOscillations_69 = (((
        (tmpvar_74 * tmpvar_74)
       * 
        (3.0 - (2.0 * tmpvar_74))
      ) - 0.5) * 2.0);
      highp float tmpvar_75;
      tmpvar_75 = (vOscillations_69.y * vOscillations_69.z);
      fTarget_72 = 1.0;
      fAmount_71 = tmpvar_75;
      if ((tmpvar_75 < 0.0)) {
        fTarget_72 = -1.0;
        fAmount_71 = -(tmpvar_75);
      };
      fOscillation_70 = (((
        (mix (mix (tmpvar_75, fTarget_72, fAmount_71), fTarget_72, fAmount_71) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_69.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_69.w * _ST_WindBranchWhip.x)));
      vPos_65 = (tmpvar_63 + ((tmpvar_67 * fOscillation_70) * _ST_WindBranch.y));
      highp vec4 tmpvar_76;
      tmpvar_76.zw = vec2(0.0, 0.0);
      tmpvar_76.x = ((tmpvar_68 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_76.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_77;
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      tmpvar_77 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      fAdherenceScale_66 = (1.0 - ((
        ((tmpvar_77.x * tmpvar_77.y) * tmpvar_77.x)
       * tmpvar_77.y) * _ST_WindTurbulences.x));
      fAdherenceScale_66 = (fAdherenceScale_66 + ((vOscillations_69.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_65 = (vPos_65 + ((
        ((vRotatedBranchAnchor_12 - vPos_65) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_66) * _glesMultiTexCoord0.z));
      vPos_64 = vPos_65;
    } else {
      highp vec3 vPos_79;
      vPos_79 = vPos_64;
      highp vec3 tmpvar_80;
      tmpvar_80 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_81;
      tmpvar_81 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_82;
      highp float fAmount_83;
      highp float fTarget_84;
      highp vec4 tmpvar_85;
      tmpvar_85.w = 0.0;
      tmpvar_85.x = (tmpvar_81 + _glesMultiTexCoord0.w);
      tmpvar_85.y = ((tmpvar_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_85.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_86;
      tmpvar_86 = abs(((
        fract((tmpvar_85 + 0.5))
       * 2.0) - 1.0));
      vOscillations_82 = (((
        (tmpvar_86 * tmpvar_86)
       * 
        (3.0 - (2.0 * tmpvar_86))
      ) - 0.5) * 2.0);
      highp float tmpvar_87;
      tmpvar_87 = (vOscillations_82.y * vOscillations_82.z);
      fTarget_84 = 1.0;
      fAmount_83 = tmpvar_87;
      if ((tmpvar_87 < 0.0)) {
        fTarget_84 = -1.0;
        fAmount_83 = -(tmpvar_87);
      };
      vPos_79 = (vPos_64 + ((tmpvar_80 * 
        (((mix (
          mix (tmpvar_87, fTarget_84, fAmount_83)
        , fTarget_84, fAmount_83) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_82.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_64 = vPos_79;
    };
    FinalPosition_14 = vPos_64;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_88;
    vPos_88 = FinalPosition_14;
    highp float fAdjust_89;
    highp float fLength_90;
    fLength_90 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_91;
    tmpvar_91 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_89 = tmpvar_91;
    if ((tmpvar_91 != 0.0)) {
      fAdjust_89 = pow (tmpvar_91, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_92;
    tmpvar_92.zw = vec2(0.0, 0.0);
    tmpvar_92.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_92.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_93;
    highp vec4 tmpvar_94;
    tmpvar_94 = abs(((
      fract((tmpvar_92 + 0.5))
     * 2.0) - 1.0));
    tmpvar_93 = (((
      (tmpvar_94 * tmpvar_94)
     * 
      (3.0 - (2.0 * tmpvar_94))
    ) - 0.5) * 2.0);
    vPos_88.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * (
      ((_ST_WindGlobal.y * (tmpvar_93.x + (tmpvar_93.y * tmpvar_93.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_89)));
    vPos_88 = (normalize(vPos_88) * fLength_90);
    FinalPosition_14 = vPos_88;
  };
  tmpvar_10.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_95;
  v_95.x = _World2Object[0].x;
  v_95.y = _World2Object[1].x;
  v_95.z = _World2Object[2].x;
  v_95.w = _World2Object[3].x;
  highp vec4 v_96;
  v_96.x = _World2Object[0].y;
  v_96.y = _World2Object[1].y;
  v_96.z = _World2Object[2].y;
  v_96.w = _World2Object[3].y;
  highp vec4 v_97;
  v_97.x = _World2Object[0].z;
  v_97.y = _World2Object[1].z;
  v_97.z = _World2Object[2].z;
  v_97.w = _World2Object[3].z;
  highp vec3 tmpvar_98;
  tmpvar_98 = normalize(((
    (v_95.xyz * tmpvar_11.x)
   + 
    (v_96.xyz * tmpvar_11.y)
  ) + (v_97.xyz * tmpvar_11.z)));
  worldNormal_3 = tmpvar_98;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_12.w * _Color.w);
  tmpvar_11 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_11 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  tmpvar_10 = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (_LightMatrix0 * tmpvar_17);
  lightCoord_5 = tmpvar_18;
  lowp vec4 tmpvar_19;
  mediump vec2 P_20;
  P_20 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_19 = texture (_LightTexture0, P_20);
  mediump float tmpvar_21;
  tmpvar_21 = dot (lightCoord_5.xyz, lightCoord_5.xyz);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture (_LightTextureB0, vec2(tmpvar_21));
  mediump float tmpvar_23;
  tmpvar_23 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_19.w) * tmpvar_22.w);
  atten_4 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_24;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_27 = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_10 * tmpvar_1) * diff_27);
  c_26.xyz = tmpvar_29;
  c_26.w = tmpvar_11;
  c_25.w = c_26.w;
  mediump vec3 tmpvar_30;
  tmpvar_30 = c_26.xyz;
  c_25.xyz = tmpvar_30;
  c_3.xyz = c_25.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_8;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_14 = tmpvar_19;
  if (((tmpvar_16 > 1.0) && (tmpvar_16 < 5.0))) {
    highp float tmpvar_20;
    tmpvar_20 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_21;
    isBestWind_21 = (tmpvar_16 == 4.0);
    bool bLeaf2_22;
    bLeaf2_22 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    highp vec3 vDirection_24;
    vDirection_24 = tmpvar_2;
    highp float tmpvar_25;
    if (bLeaf2_22) {
      tmpvar_25 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_26;
    if (bLeaf2_22) {
      tmpvar_26 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_27;
    highp vec4 tmpvar_28;
    tmpvar_28.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_28.x = (tmpvar_25 + tmpvar_20);
    highp vec4 tmpvar_29;
    tmpvar_29 = abs(((
      fract((tmpvar_28 + 0.5))
     * 2.0) - 1.0));
    vPos_27 = (tmpvar_19 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_26 * (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_24 = tmpvar_2;
    vPos_23 = vPos_27;
    if (isBestWind_21) {
      highp vec3 tmpvar_30;
      tmpvar_30 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_31;
      if (bLeaf2_22) {
        tmpvar_31 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_32;
      if (bLeaf2_22) {
        tmpvar_32 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_33;
      if (bLeaf2_22) {
        tmpvar_33 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_34;
      if (bLeaf2_22) {
        tmpvar_34 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_35;
      if (bLeaf2_22) {
        tmpvar_35 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_35 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_36;
      if (bLeaf2_22) {
        tmpvar_36 = bool(1);
      } else {
        tmpvar_36 = bool(1);
      };
      highp float fTwitch_37;
      highp vec3 vAxis_38;
      highp vec3 tmpvar_39;
      tmpvar_39 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_40;
      tmpvar_40 = ((tmpvar_39.x + tmpvar_39.y) + tmpvar_39.z);
      highp vec4 tmpvar_41;
      tmpvar_41.x = (tmpvar_31 + tmpvar_40);
      tmpvar_41.y = ((tmpvar_31 * 0.75) - tmpvar_40);
      tmpvar_41.z = ((tmpvar_31 * 0.01) + tmpvar_40);
      tmpvar_41.w = (tmpvar_31 + tmpvar_40);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = sqrt(dot (vPos_27, vPos_27));
      highp float fAngle_45;
      fAngle_45 = ((_glesMultiTexCoord2.x * tmpvar_33) * (tmpvar_42.x + (tmpvar_42.y * tmpvar_42.y)));
      highp vec2 vSinCos_46;
      vSinCos_46.x = sin(fAngle_45);
      vSinCos_46.y = cos(fAngle_45);
      highp float tmpvar_47;
      tmpvar_47 = (1.0 - vSinCos_46.y);
      highp mat3 tmpvar_48;
      tmpvar_48[0].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.x) + vSinCos_46.y);
      tmpvar_48[0].y = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.y) + (vSinCos_46.x * tmpvar_30.z));
      tmpvar_48[0].z = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.z) - (vSinCos_46.x * tmpvar_30.y));
      tmpvar_48[1].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.y) - (vSinCos_46.x * tmpvar_30.z));
      tmpvar_48[1].y = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.y) + vSinCos_46.y);
      tmpvar_48[1].z = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.z) + (vSinCos_46.x * tmpvar_30.x));
      tmpvar_48[2].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.z) + (vSinCos_46.x * tmpvar_30.y));
      tmpvar_48[2].y = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.z) - (vSinCos_46.x * tmpvar_30.x));
      tmpvar_48[2].z = (((tmpvar_47 * tmpvar_30.z) * tmpvar_30.z) + vSinCos_46.y);
      highp vec3 tmpvar_49;
      tmpvar_49 = ((tmpvar_30.yzx * vRotatedWindVector_13.zxy) - (tmpvar_30.zxy * vRotatedWindVector_13.yzx));
      vAxis_38.xz = tmpvar_49.xz;
      highp float tmpvar_50;
      tmpvar_50 = clamp (dot (vRotatedWindVector_13, tmpvar_30), -1.0, 1.0);
      vAxis_38.y = (tmpvar_49.y + tmpvar_50);
      highp vec3 tmpvar_51;
      tmpvar_51 = normalize(vAxis_38);
      vAxis_38 = tmpvar_51;
      highp float tmpvar_52;
      tmpvar_52 = (1.570796 - (sign(tmpvar_50) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_50))) * (1.570796 + (abs(tmpvar_50) * (-0.2146018 + 
          (abs(tmpvar_50) * (0.08656672 + (abs(tmpvar_50) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_53;
      tmpvar_53 = (tmpvar_42.y - (tmpvar_42.x * tmpvar_42.x));
      fTwitch_37 = 0.0;
      if (tmpvar_36) {
        highp float fTime_54;
        fTime_54 = (tmpvar_35.z + tmpvar_40);
        highp vec4 tmpvar_55;
        tmpvar_55.zw = vec2(0.0, 0.0);
        tmpvar_55.x = fTime_54;
        tmpvar_55.y = (0.87 * fTime_54);
        highp vec4 tmpvar_56;
        highp vec4 tmpvar_57;
        tmpvar_57 = abs(((
          fract((tmpvar_55 + 0.5))
         * 2.0) - 1.0));
        tmpvar_56 = (((
          (tmpvar_57 * tmpvar_57)
         * 
          (3.0 - (2.0 * tmpvar_57))
        ) - 0.5) * 2.0);
        fTwitch_37 = (tmpvar_35.x * pow (clamp (
          ((((tmpvar_56.x * tmpvar_56.y) * tmpvar_56.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_35.y));
      };
      highp float fAngle_58;
      fAngle_58 = (_glesMultiTexCoord2.x * ((
        (tmpvar_52 * tmpvar_34)
       + 
        (tmpvar_53 * tmpvar_32)
      ) + fTwitch_37));
      highp vec2 vSinCos_59;
      vSinCos_59.x = sin(fAngle_58);
      vSinCos_59.y = cos(fAngle_58);
      highp float tmpvar_60;
      tmpvar_60 = (1.0 - vSinCos_59.y);
      highp mat3 tmpvar_61;
      tmpvar_61[0].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.x) + vSinCos_59.y);
      tmpvar_61[0].y = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.y) + (vSinCos_59.x * tmpvar_51.z));
      tmpvar_61[0].z = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.z) - (vSinCos_59.x * tmpvar_51.y));
      tmpvar_61[1].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.y) - (vSinCos_59.x * tmpvar_51.z));
      tmpvar_61[1].y = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.y) + vSinCos_59.y);
      tmpvar_61[1].z = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.z) + (vSinCos_59.x * tmpvar_51.x));
      tmpvar_61[2].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.z) + (vSinCos_59.x * tmpvar_51.y));
      tmpvar_61[2].y = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.z) - (vSinCos_59.x * tmpvar_51.x));
      tmpvar_61[2].z = (((tmpvar_60 * tmpvar_51.z) * tmpvar_51.z) + vSinCos_59.y);
      highp mat3 tmpvar_62;
      tmpvar_62 = (tmpvar_48 * tmpvar_61);
      vDirection_24 = (tmpvar_62 * _glesNormal);
      vPos_23 = (normalize((tmpvar_62 * vPos_27)) * tmpvar_44);
    };
    tmpvar_11 = vDirection_24;
    FinalPosition_14 = vPos_23;
  };
  highp vec3 tmpvar_63;
  tmpvar_63 = (FinalPosition_14 + _glesMultiTexCoord1.xyz);
  FinalPosition_14 = tmpvar_63;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_64;
    vPos_64 = tmpvar_63;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_65;
      vPos_65 = tmpvar_63;
      highp float fAdherenceScale_66;
      highp vec3 tmpvar_67;
      tmpvar_67 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_68;
      tmpvar_68 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_69;
      highp float fOscillation_70;
      fOscillation_70 = 1.0;
      highp float fAmount_71;
      highp float fTarget_72;
      highp vec4 tmpvar_73;
      tmpvar_73.x = (tmpvar_68 + _glesMultiTexCoord0.w);
      tmpvar_73.y = ((tmpvar_68 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_73.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_68 + _glesMultiTexCoord0.w));
      tmpvar_73.w = ((tmpvar_68 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_74;
      tmpvar_74 = abs(((
        fract((tmpvar_73 + 0.5))
       * 2.0) - 1.0));
      vOscillations_69 = (((
        (tmpvar_74 * tmpvar_74)
       * 
        (3.0 - (2.0 * tmpvar_74))
      ) - 0.5) * 2.0);
      highp float tmpvar_75;
      tmpvar_75 = (vOscillations_69.y * vOscillations_69.z);
      fTarget_72 = 1.0;
      fAmount_71 = tmpvar_75;
      if ((tmpvar_75 < 0.0)) {
        fTarget_72 = -1.0;
        fAmount_71 = -(tmpvar_75);
      };
      fOscillation_70 = (((
        (mix (mix (tmpvar_75, fTarget_72, fAmount_71), fTarget_72, fAmount_71) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_69.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_69.w * _ST_WindBranchWhip.x)));
      vPos_65 = (tmpvar_63 + ((tmpvar_67 * fOscillation_70) * _ST_WindBranch.y));
      highp vec4 tmpvar_76;
      tmpvar_76.zw = vec2(0.0, 0.0);
      tmpvar_76.x = ((tmpvar_68 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_76.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_77;
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      tmpvar_77 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      fAdherenceScale_66 = (1.0 - ((
        ((tmpvar_77.x * tmpvar_77.y) * tmpvar_77.x)
       * tmpvar_77.y) * _ST_WindTurbulences.x));
      fAdherenceScale_66 = (fAdherenceScale_66 + ((vOscillations_69.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_65 = (vPos_65 + ((
        ((vRotatedBranchAnchor_12 - vPos_65) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_66) * _glesMultiTexCoord0.z));
      vPos_64 = vPos_65;
    } else {
      highp vec3 vPos_79;
      vPos_79 = vPos_64;
      highp vec3 tmpvar_80;
      tmpvar_80 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_81;
      tmpvar_81 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_82;
      highp float fAmount_83;
      highp float fTarget_84;
      highp vec4 tmpvar_85;
      tmpvar_85.w = 0.0;
      tmpvar_85.x = (tmpvar_81 + _glesMultiTexCoord0.w);
      tmpvar_85.y = ((tmpvar_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_85.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_86;
      tmpvar_86 = abs(((
        fract((tmpvar_85 + 0.5))
       * 2.0) - 1.0));
      vOscillations_82 = (((
        (tmpvar_86 * tmpvar_86)
       * 
        (3.0 - (2.0 * tmpvar_86))
      ) - 0.5) * 2.0);
      highp float tmpvar_87;
      tmpvar_87 = (vOscillations_82.y * vOscillations_82.z);
      fTarget_84 = 1.0;
      fAmount_83 = tmpvar_87;
      if ((tmpvar_87 < 0.0)) {
        fTarget_84 = -1.0;
        fAmount_83 = -(tmpvar_87);
      };
      vPos_79 = (vPos_64 + ((tmpvar_80 * 
        (((mix (
          mix (tmpvar_87, fTarget_84, fAmount_83)
        , fTarget_84, fAmount_83) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_82.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_64 = vPos_79;
    };
    FinalPosition_14 = vPos_64;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_88;
    vPos_88 = FinalPosition_14;
    highp float fAdjust_89;
    highp float fLength_90;
    fLength_90 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_91;
    tmpvar_91 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_89 = tmpvar_91;
    if ((tmpvar_91 != 0.0)) {
      fAdjust_89 = pow (tmpvar_91, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_92;
    tmpvar_92.zw = vec2(0.0, 0.0);
    tmpvar_92.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_92.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_93;
    highp vec4 tmpvar_94;
    tmpvar_94 = abs(((
      fract((tmpvar_92 + 0.5))
     * 2.0) - 1.0));
    tmpvar_93 = (((
      (tmpvar_94 * tmpvar_94)
     * 
      (3.0 - (2.0 * tmpvar_94))
    ) - 0.5) * 2.0);
    vPos_88.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * (
      ((_ST_WindGlobal.y * (tmpvar_93.x + (tmpvar_93.y * tmpvar_93.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_89)));
    vPos_88 = (normalize(vPos_88) * fLength_90);
    FinalPosition_14 = vPos_88;
  };
  tmpvar_10.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_95;
  v_95.x = _World2Object[0].x;
  v_95.y = _World2Object[1].x;
  v_95.z = _World2Object[2].x;
  v_95.w = _World2Object[3].x;
  highp vec4 v_96;
  v_96.x = _World2Object[0].y;
  v_96.y = _World2Object[1].y;
  v_96.z = _World2Object[2].y;
  v_96.w = _World2Object[3].y;
  highp vec4 v_97;
  v_97.x = _World2Object[0].z;
  v_97.y = _World2Object[1].z;
  v_97.z = _World2Object[2].z;
  v_97.w = _World2Object[3].z;
  highp vec3 tmpvar_98;
  tmpvar_98 = normalize(((
    (v_95.xyz * tmpvar_11.x)
   + 
    (v_96.xyz * tmpvar_11.y)
  ) + (v_97.xyz * tmpvar_11.z)));
  worldNormal_3 = tmpvar_98;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xyz;
  lightCoord_4 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_19;
  tmpvar_19 = (texture2D (_LightTextureB0, vec2(tmpvar_18)).w * textureCube (_LightTexture0, lightCoord_4).w);
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_20;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_19);
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_23 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tmpvar_9 * tmpvar_1) * diff_23);
  c_22.xyz = tmpvar_25;
  c_22.w = tmpvar_10;
  c_21.w = c_22.w;
  mediump vec3 tmpvar_26;
  tmpvar_26 = c_22.xyz;
  c_21.xyz = tmpvar_26;
  c_3.xyz = c_21.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "GEOM_TYPE_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_8;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_14 = tmpvar_19;
  if (((tmpvar_16 > 1.0) && (tmpvar_16 < 5.0))) {
    highp float tmpvar_20;
    tmpvar_20 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_21;
    isBestWind_21 = (tmpvar_16 == 4.0);
    bool bLeaf2_22;
    bLeaf2_22 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    highp vec3 vDirection_24;
    vDirection_24 = tmpvar_2;
    highp float tmpvar_25;
    if (bLeaf2_22) {
      tmpvar_25 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_26;
    if (bLeaf2_22) {
      tmpvar_26 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_27;
    highp vec4 tmpvar_28;
    tmpvar_28.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_28.x = (tmpvar_25 + tmpvar_20);
    highp vec4 tmpvar_29;
    tmpvar_29 = abs(((
      fract((tmpvar_28 + 0.5))
     * 2.0) - 1.0));
    vPos_27 = (tmpvar_19 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_26 * (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_24 = tmpvar_2;
    vPos_23 = vPos_27;
    if (isBestWind_21) {
      highp vec3 tmpvar_30;
      tmpvar_30 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_31;
      if (bLeaf2_22) {
        tmpvar_31 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_32;
      if (bLeaf2_22) {
        tmpvar_32 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_33;
      if (bLeaf2_22) {
        tmpvar_33 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_34;
      if (bLeaf2_22) {
        tmpvar_34 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_35;
      if (bLeaf2_22) {
        tmpvar_35 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_35 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_36;
      if (bLeaf2_22) {
        tmpvar_36 = bool(1);
      } else {
        tmpvar_36 = bool(1);
      };
      highp float fTwitch_37;
      highp vec3 vAxis_38;
      highp vec3 tmpvar_39;
      tmpvar_39 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_40;
      tmpvar_40 = ((tmpvar_39.x + tmpvar_39.y) + tmpvar_39.z);
      highp vec4 tmpvar_41;
      tmpvar_41.x = (tmpvar_31 + tmpvar_40);
      tmpvar_41.y = ((tmpvar_31 * 0.75) - tmpvar_40);
      tmpvar_41.z = ((tmpvar_31 * 0.01) + tmpvar_40);
      tmpvar_41.w = (tmpvar_31 + tmpvar_40);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = sqrt(dot (vPos_27, vPos_27));
      highp float fAngle_45;
      fAngle_45 = ((_glesMultiTexCoord2.x * tmpvar_33) * (tmpvar_42.x + (tmpvar_42.y * tmpvar_42.y)));
      highp vec2 vSinCos_46;
      vSinCos_46.x = sin(fAngle_45);
      vSinCos_46.y = cos(fAngle_45);
      highp float tmpvar_47;
      tmpvar_47 = (1.0 - vSinCos_46.y);
      highp mat3 tmpvar_48;
      tmpvar_48[0].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.x) + vSinCos_46.y);
      tmpvar_48[0].y = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.y) + (vSinCos_46.x * tmpvar_30.z));
      tmpvar_48[0].z = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.z) - (vSinCos_46.x * tmpvar_30.y));
      tmpvar_48[1].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.y) - (vSinCos_46.x * tmpvar_30.z));
      tmpvar_48[1].y = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.y) + vSinCos_46.y);
      tmpvar_48[1].z = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.z) + (vSinCos_46.x * tmpvar_30.x));
      tmpvar_48[2].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.z) + (vSinCos_46.x * tmpvar_30.y));
      tmpvar_48[2].y = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.z) - (vSinCos_46.x * tmpvar_30.x));
      tmpvar_48[2].z = (((tmpvar_47 * tmpvar_30.z) * tmpvar_30.z) + vSinCos_46.y);
      highp vec3 tmpvar_49;
      tmpvar_49 = ((tmpvar_30.yzx * vRotatedWindVector_13.zxy) - (tmpvar_30.zxy * vRotatedWindVector_13.yzx));
      vAxis_38.xz = tmpvar_49.xz;
      highp float tmpvar_50;
      tmpvar_50 = clamp (dot (vRotatedWindVector_13, tmpvar_30), -1.0, 1.0);
      vAxis_38.y = (tmpvar_49.y + tmpvar_50);
      highp vec3 tmpvar_51;
      tmpvar_51 = normalize(vAxis_38);
      vAxis_38 = tmpvar_51;
      highp float tmpvar_52;
      tmpvar_52 = (1.570796 - (sign(tmpvar_50) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_50))) * (1.570796 + (abs(tmpvar_50) * (-0.2146018 + 
          (abs(tmpvar_50) * (0.08656672 + (abs(tmpvar_50) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_53;
      tmpvar_53 = (tmpvar_42.y - (tmpvar_42.x * tmpvar_42.x));
      fTwitch_37 = 0.0;
      if (tmpvar_36) {
        highp float fTime_54;
        fTime_54 = (tmpvar_35.z + tmpvar_40);
        highp vec4 tmpvar_55;
        tmpvar_55.zw = vec2(0.0, 0.0);
        tmpvar_55.x = fTime_54;
        tmpvar_55.y = (0.87 * fTime_54);
        highp vec4 tmpvar_56;
        highp vec4 tmpvar_57;
        tmpvar_57 = abs(((
          fract((tmpvar_55 + 0.5))
         * 2.0) - 1.0));
        tmpvar_56 = (((
          (tmpvar_57 * tmpvar_57)
         * 
          (3.0 - (2.0 * tmpvar_57))
        ) - 0.5) * 2.0);
        fTwitch_37 = (tmpvar_35.x * pow (clamp (
          ((((tmpvar_56.x * tmpvar_56.y) * tmpvar_56.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_35.y));
      };
      highp float fAngle_58;
      fAngle_58 = (_glesMultiTexCoord2.x * ((
        (tmpvar_52 * tmpvar_34)
       + 
        (tmpvar_53 * tmpvar_32)
      ) + fTwitch_37));
      highp vec2 vSinCos_59;
      vSinCos_59.x = sin(fAngle_58);
      vSinCos_59.y = cos(fAngle_58);
      highp float tmpvar_60;
      tmpvar_60 = (1.0 - vSinCos_59.y);
      highp mat3 tmpvar_61;
      tmpvar_61[0].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.x) + vSinCos_59.y);
      tmpvar_61[0].y = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.y) + (vSinCos_59.x * tmpvar_51.z));
      tmpvar_61[0].z = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.z) - (vSinCos_59.x * tmpvar_51.y));
      tmpvar_61[1].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.y) - (vSinCos_59.x * tmpvar_51.z));
      tmpvar_61[1].y = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.y) + vSinCos_59.y);
      tmpvar_61[1].z = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.z) + (vSinCos_59.x * tmpvar_51.x));
      tmpvar_61[2].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.z) + (vSinCos_59.x * tmpvar_51.y));
      tmpvar_61[2].y = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.z) - (vSinCos_59.x * tmpvar_51.x));
      tmpvar_61[2].z = (((tmpvar_60 * tmpvar_51.z) * tmpvar_51.z) + vSinCos_59.y);
      highp mat3 tmpvar_62;
      tmpvar_62 = (tmpvar_48 * tmpvar_61);
      vDirection_24 = (tmpvar_62 * _glesNormal);
      vPos_23 = (normalize((tmpvar_62 * vPos_27)) * tmpvar_44);
    };
    tmpvar_11 = vDirection_24;
    FinalPosition_14 = vPos_23;
  };
  highp vec3 tmpvar_63;
  tmpvar_63 = (FinalPosition_14 + _glesMultiTexCoord1.xyz);
  FinalPosition_14 = tmpvar_63;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_64;
    vPos_64 = tmpvar_63;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_65;
      vPos_65 = tmpvar_63;
      highp float fAdherenceScale_66;
      highp vec3 tmpvar_67;
      tmpvar_67 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_68;
      tmpvar_68 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_69;
      highp float fOscillation_70;
      fOscillation_70 = 1.0;
      highp float fAmount_71;
      highp float fTarget_72;
      highp vec4 tmpvar_73;
      tmpvar_73.x = (tmpvar_68 + _glesMultiTexCoord0.w);
      tmpvar_73.y = ((tmpvar_68 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_73.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_68 + _glesMultiTexCoord0.w));
      tmpvar_73.w = ((tmpvar_68 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_74;
      tmpvar_74 = abs(((
        fract((tmpvar_73 + 0.5))
       * 2.0) - 1.0));
      vOscillations_69 = (((
        (tmpvar_74 * tmpvar_74)
       * 
        (3.0 - (2.0 * tmpvar_74))
      ) - 0.5) * 2.0);
      highp float tmpvar_75;
      tmpvar_75 = (vOscillations_69.y * vOscillations_69.z);
      fTarget_72 = 1.0;
      fAmount_71 = tmpvar_75;
      if ((tmpvar_75 < 0.0)) {
        fTarget_72 = -1.0;
        fAmount_71 = -(tmpvar_75);
      };
      fOscillation_70 = (((
        (mix (mix (tmpvar_75, fTarget_72, fAmount_71), fTarget_72, fAmount_71) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_69.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_69.w * _ST_WindBranchWhip.x)));
      vPos_65 = (tmpvar_63 + ((tmpvar_67 * fOscillation_70) * _ST_WindBranch.y));
      highp vec4 tmpvar_76;
      tmpvar_76.zw = vec2(0.0, 0.0);
      tmpvar_76.x = ((tmpvar_68 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_76.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_77;
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      tmpvar_77 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      fAdherenceScale_66 = (1.0 - ((
        ((tmpvar_77.x * tmpvar_77.y) * tmpvar_77.x)
       * tmpvar_77.y) * _ST_WindTurbulences.x));
      fAdherenceScale_66 = (fAdherenceScale_66 + ((vOscillations_69.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_65 = (vPos_65 + ((
        ((vRotatedBranchAnchor_12 - vPos_65) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_66) * _glesMultiTexCoord0.z));
      vPos_64 = vPos_65;
    } else {
      highp vec3 vPos_79;
      vPos_79 = vPos_64;
      highp vec3 tmpvar_80;
      tmpvar_80 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_81;
      tmpvar_81 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_82;
      highp float fAmount_83;
      highp float fTarget_84;
      highp vec4 tmpvar_85;
      tmpvar_85.w = 0.0;
      tmpvar_85.x = (tmpvar_81 + _glesMultiTexCoord0.w);
      tmpvar_85.y = ((tmpvar_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_85.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_86;
      tmpvar_86 = abs(((
        fract((tmpvar_85 + 0.5))
       * 2.0) - 1.0));
      vOscillations_82 = (((
        (tmpvar_86 * tmpvar_86)
       * 
        (3.0 - (2.0 * tmpvar_86))
      ) - 0.5) * 2.0);
      highp float tmpvar_87;
      tmpvar_87 = (vOscillations_82.y * vOscillations_82.z);
      fTarget_84 = 1.0;
      fAmount_83 = tmpvar_87;
      if ((tmpvar_87 < 0.0)) {
        fTarget_84 = -1.0;
        fAmount_83 = -(tmpvar_87);
      };
      vPos_79 = (vPos_64 + ((tmpvar_80 * 
        (((mix (
          mix (tmpvar_87, fTarget_84, fAmount_83)
        , fTarget_84, fAmount_83) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_82.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_64 = vPos_79;
    };
    FinalPosition_14 = vPos_64;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_88;
    vPos_88 = FinalPosition_14;
    highp float fAdjust_89;
    highp float fLength_90;
    fLength_90 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_91;
    tmpvar_91 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_89 = tmpvar_91;
    if ((tmpvar_91 != 0.0)) {
      fAdjust_89 = pow (tmpvar_91, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_92;
    tmpvar_92.zw = vec2(0.0, 0.0);
    tmpvar_92.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_92.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_93;
    highp vec4 tmpvar_94;
    tmpvar_94 = abs(((
      fract((tmpvar_92 + 0.5))
     * 2.0) - 1.0));
    tmpvar_93 = (((
      (tmpvar_94 * tmpvar_94)
     * 
      (3.0 - (2.0 * tmpvar_94))
    ) - 0.5) * 2.0);
    vPos_88.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * (
      ((_ST_WindGlobal.y * (tmpvar_93.x + (tmpvar_93.y * tmpvar_93.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_89)));
    vPos_88 = (normalize(vPos_88) * fLength_90);
    FinalPosition_14 = vPos_88;
  };
  tmpvar_10.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_95;
  v_95.x = _World2Object[0].x;
  v_95.y = _World2Object[1].x;
  v_95.z = _World2Object[2].x;
  v_95.w = _World2Object[3].x;
  highp vec4 v_96;
  v_96.x = _World2Object[0].y;
  v_96.y = _World2Object[1].y;
  v_96.z = _World2Object[2].y;
  v_96.w = _World2Object[3].y;
  highp vec4 v_97;
  v_97.x = _World2Object[0].z;
  v_97.y = _World2Object[1].z;
  v_97.z = _World2Object[2].z;
  v_97.w = _World2Object[3].z;
  highp vec3 tmpvar_98;
  tmpvar_98 = normalize(((
    (v_95.xyz * tmpvar_11.x)
   + 
    (v_96.xyz * tmpvar_11.y)
  ) + (v_97.xyz * tmpvar_11.z)));
  worldNormal_3 = tmpvar_98;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xyz;
  lightCoord_4 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_19;
  tmpvar_19 = (texture (_LightTextureB0, vec2(tmpvar_18)).w * texture (_LightTexture0, lightCoord_4).w);
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_20;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_19);
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_23 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tmpvar_9 * tmpvar_1) * diff_23);
  c_22.xyz = tmpvar_25;
  c_22.w = tmpvar_10;
  c_21.w = c_22.w;
  mediump vec3 tmpvar_26;
  tmpvar_26 = c_22.xyz;
  c_21.xyz = tmpvar_26;
  c_3.xyz = c_21.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_8;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_14 = tmpvar_19;
  if (((tmpvar_16 > 1.0) && (tmpvar_16 < 5.0))) {
    highp float tmpvar_20;
    tmpvar_20 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_21;
    isBestWind_21 = (tmpvar_16 == 4.0);
    bool bLeaf2_22;
    bLeaf2_22 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    highp vec3 vDirection_24;
    vDirection_24 = tmpvar_2;
    highp float tmpvar_25;
    if (bLeaf2_22) {
      tmpvar_25 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_26;
    if (bLeaf2_22) {
      tmpvar_26 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_27;
    highp vec4 tmpvar_28;
    tmpvar_28.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_28.x = (tmpvar_25 + tmpvar_20);
    highp vec4 tmpvar_29;
    tmpvar_29 = abs(((
      fract((tmpvar_28 + 0.5))
     * 2.0) - 1.0));
    vPos_27 = (tmpvar_19 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_26 * (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_24 = tmpvar_2;
    vPos_23 = vPos_27;
    if (isBestWind_21) {
      highp vec3 tmpvar_30;
      tmpvar_30 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_31;
      if (bLeaf2_22) {
        tmpvar_31 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_32;
      if (bLeaf2_22) {
        tmpvar_32 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_33;
      if (bLeaf2_22) {
        tmpvar_33 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_34;
      if (bLeaf2_22) {
        tmpvar_34 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_35;
      if (bLeaf2_22) {
        tmpvar_35 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_35 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_36;
      if (bLeaf2_22) {
        tmpvar_36 = bool(1);
      } else {
        tmpvar_36 = bool(1);
      };
      highp float fTwitch_37;
      highp vec3 vAxis_38;
      highp vec3 tmpvar_39;
      tmpvar_39 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_40;
      tmpvar_40 = ((tmpvar_39.x + tmpvar_39.y) + tmpvar_39.z);
      highp vec4 tmpvar_41;
      tmpvar_41.x = (tmpvar_31 + tmpvar_40);
      tmpvar_41.y = ((tmpvar_31 * 0.75) - tmpvar_40);
      tmpvar_41.z = ((tmpvar_31 * 0.01) + tmpvar_40);
      tmpvar_41.w = (tmpvar_31 + tmpvar_40);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = sqrt(dot (vPos_27, vPos_27));
      highp float fAngle_45;
      fAngle_45 = ((_glesMultiTexCoord2.x * tmpvar_33) * (tmpvar_42.x + (tmpvar_42.y * tmpvar_42.y)));
      highp vec2 vSinCos_46;
      vSinCos_46.x = sin(fAngle_45);
      vSinCos_46.y = cos(fAngle_45);
      highp float tmpvar_47;
      tmpvar_47 = (1.0 - vSinCos_46.y);
      highp mat3 tmpvar_48;
      tmpvar_48[0].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.x) + vSinCos_46.y);
      tmpvar_48[0].y = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.y) + (vSinCos_46.x * tmpvar_30.z));
      tmpvar_48[0].z = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.z) - (vSinCos_46.x * tmpvar_30.y));
      tmpvar_48[1].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.y) - (vSinCos_46.x * tmpvar_30.z));
      tmpvar_48[1].y = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.y) + vSinCos_46.y);
      tmpvar_48[1].z = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.z) + (vSinCos_46.x * tmpvar_30.x));
      tmpvar_48[2].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.z) + (vSinCos_46.x * tmpvar_30.y));
      tmpvar_48[2].y = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.z) - (vSinCos_46.x * tmpvar_30.x));
      tmpvar_48[2].z = (((tmpvar_47 * tmpvar_30.z) * tmpvar_30.z) + vSinCos_46.y);
      highp vec3 tmpvar_49;
      tmpvar_49 = ((tmpvar_30.yzx * vRotatedWindVector_13.zxy) - (tmpvar_30.zxy * vRotatedWindVector_13.yzx));
      vAxis_38.xz = tmpvar_49.xz;
      highp float tmpvar_50;
      tmpvar_50 = clamp (dot (vRotatedWindVector_13, tmpvar_30), -1.0, 1.0);
      vAxis_38.y = (tmpvar_49.y + tmpvar_50);
      highp vec3 tmpvar_51;
      tmpvar_51 = normalize(vAxis_38);
      vAxis_38 = tmpvar_51;
      highp float tmpvar_52;
      tmpvar_52 = (1.570796 - (sign(tmpvar_50) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_50))) * (1.570796 + (abs(tmpvar_50) * (-0.2146018 + 
          (abs(tmpvar_50) * (0.08656672 + (abs(tmpvar_50) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_53;
      tmpvar_53 = (tmpvar_42.y - (tmpvar_42.x * tmpvar_42.x));
      fTwitch_37 = 0.0;
      if (tmpvar_36) {
        highp float fTime_54;
        fTime_54 = (tmpvar_35.z + tmpvar_40);
        highp vec4 tmpvar_55;
        tmpvar_55.zw = vec2(0.0, 0.0);
        tmpvar_55.x = fTime_54;
        tmpvar_55.y = (0.87 * fTime_54);
        highp vec4 tmpvar_56;
        highp vec4 tmpvar_57;
        tmpvar_57 = abs(((
          fract((tmpvar_55 + 0.5))
         * 2.0) - 1.0));
        tmpvar_56 = (((
          (tmpvar_57 * tmpvar_57)
         * 
          (3.0 - (2.0 * tmpvar_57))
        ) - 0.5) * 2.0);
        fTwitch_37 = (tmpvar_35.x * pow (clamp (
          ((((tmpvar_56.x * tmpvar_56.y) * tmpvar_56.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_35.y));
      };
      highp float fAngle_58;
      fAngle_58 = (_glesMultiTexCoord2.x * ((
        (tmpvar_52 * tmpvar_34)
       + 
        (tmpvar_53 * tmpvar_32)
      ) + fTwitch_37));
      highp vec2 vSinCos_59;
      vSinCos_59.x = sin(fAngle_58);
      vSinCos_59.y = cos(fAngle_58);
      highp float tmpvar_60;
      tmpvar_60 = (1.0 - vSinCos_59.y);
      highp mat3 tmpvar_61;
      tmpvar_61[0].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.x) + vSinCos_59.y);
      tmpvar_61[0].y = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.y) + (vSinCos_59.x * tmpvar_51.z));
      tmpvar_61[0].z = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.z) - (vSinCos_59.x * tmpvar_51.y));
      tmpvar_61[1].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.y) - (vSinCos_59.x * tmpvar_51.z));
      tmpvar_61[1].y = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.y) + vSinCos_59.y);
      tmpvar_61[1].z = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.z) + (vSinCos_59.x * tmpvar_51.x));
      tmpvar_61[2].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.z) + (vSinCos_59.x * tmpvar_51.y));
      tmpvar_61[2].y = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.z) - (vSinCos_59.x * tmpvar_51.x));
      tmpvar_61[2].z = (((tmpvar_60 * tmpvar_51.z) * tmpvar_51.z) + vSinCos_59.y);
      highp mat3 tmpvar_62;
      tmpvar_62 = (tmpvar_48 * tmpvar_61);
      vDirection_24 = (tmpvar_62 * _glesNormal);
      vPos_23 = (normalize((tmpvar_62 * vPos_27)) * tmpvar_44);
    };
    tmpvar_11 = vDirection_24;
    FinalPosition_14 = vPos_23;
  };
  highp vec3 tmpvar_63;
  tmpvar_63 = (FinalPosition_14 + _glesMultiTexCoord1.xyz);
  FinalPosition_14 = tmpvar_63;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_64;
    vPos_64 = tmpvar_63;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_65;
      vPos_65 = tmpvar_63;
      highp float fAdherenceScale_66;
      highp vec3 tmpvar_67;
      tmpvar_67 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_68;
      tmpvar_68 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_69;
      highp float fOscillation_70;
      fOscillation_70 = 1.0;
      highp float fAmount_71;
      highp float fTarget_72;
      highp vec4 tmpvar_73;
      tmpvar_73.x = (tmpvar_68 + _glesMultiTexCoord0.w);
      tmpvar_73.y = ((tmpvar_68 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_73.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_68 + _glesMultiTexCoord0.w));
      tmpvar_73.w = ((tmpvar_68 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_74;
      tmpvar_74 = abs(((
        fract((tmpvar_73 + 0.5))
       * 2.0) - 1.0));
      vOscillations_69 = (((
        (tmpvar_74 * tmpvar_74)
       * 
        (3.0 - (2.0 * tmpvar_74))
      ) - 0.5) * 2.0);
      highp float tmpvar_75;
      tmpvar_75 = (vOscillations_69.y * vOscillations_69.z);
      fTarget_72 = 1.0;
      fAmount_71 = tmpvar_75;
      if ((tmpvar_75 < 0.0)) {
        fTarget_72 = -1.0;
        fAmount_71 = -(tmpvar_75);
      };
      fOscillation_70 = (((
        (mix (mix (tmpvar_75, fTarget_72, fAmount_71), fTarget_72, fAmount_71) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_69.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_69.w * _ST_WindBranchWhip.x)));
      vPos_65 = (tmpvar_63 + ((tmpvar_67 * fOscillation_70) * _ST_WindBranch.y));
      highp vec4 tmpvar_76;
      tmpvar_76.zw = vec2(0.0, 0.0);
      tmpvar_76.x = ((tmpvar_68 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_76.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_77;
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      tmpvar_77 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      fAdherenceScale_66 = (1.0 - ((
        ((tmpvar_77.x * tmpvar_77.y) * tmpvar_77.x)
       * tmpvar_77.y) * _ST_WindTurbulences.x));
      fAdherenceScale_66 = (fAdherenceScale_66 + ((vOscillations_69.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_65 = (vPos_65 + ((
        ((vRotatedBranchAnchor_12 - vPos_65) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_66) * _glesMultiTexCoord0.z));
      vPos_64 = vPos_65;
    } else {
      highp vec3 vPos_79;
      vPos_79 = vPos_64;
      highp vec3 tmpvar_80;
      tmpvar_80 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_81;
      tmpvar_81 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_82;
      highp float fAmount_83;
      highp float fTarget_84;
      highp vec4 tmpvar_85;
      tmpvar_85.w = 0.0;
      tmpvar_85.x = (tmpvar_81 + _glesMultiTexCoord0.w);
      tmpvar_85.y = ((tmpvar_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_85.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_86;
      tmpvar_86 = abs(((
        fract((tmpvar_85 + 0.5))
       * 2.0) - 1.0));
      vOscillations_82 = (((
        (tmpvar_86 * tmpvar_86)
       * 
        (3.0 - (2.0 * tmpvar_86))
      ) - 0.5) * 2.0);
      highp float tmpvar_87;
      tmpvar_87 = (vOscillations_82.y * vOscillations_82.z);
      fTarget_84 = 1.0;
      fAmount_83 = tmpvar_87;
      if ((tmpvar_87 < 0.0)) {
        fTarget_84 = -1.0;
        fAmount_83 = -(tmpvar_87);
      };
      vPos_79 = (vPos_64 + ((tmpvar_80 * 
        (((mix (
          mix (tmpvar_87, fTarget_84, fAmount_83)
        , fTarget_84, fAmount_83) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_82.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_64 = vPos_79;
    };
    FinalPosition_14 = vPos_64;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_88;
    vPos_88 = FinalPosition_14;
    highp float fAdjust_89;
    highp float fLength_90;
    fLength_90 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_91;
    tmpvar_91 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_89 = tmpvar_91;
    if ((tmpvar_91 != 0.0)) {
      fAdjust_89 = pow (tmpvar_91, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_92;
    tmpvar_92.zw = vec2(0.0, 0.0);
    tmpvar_92.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_92.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_93;
    highp vec4 tmpvar_94;
    tmpvar_94 = abs(((
      fract((tmpvar_92 + 0.5))
     * 2.0) - 1.0));
    tmpvar_93 = (((
      (tmpvar_94 * tmpvar_94)
     * 
      (3.0 - (2.0 * tmpvar_94))
    ) - 0.5) * 2.0);
    vPos_88.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * (
      ((_ST_WindGlobal.y * (tmpvar_93.x + (tmpvar_93.y * tmpvar_93.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_89)));
    vPos_88 = (normalize(vPos_88) * fLength_90);
    FinalPosition_14 = vPos_88;
  };
  tmpvar_10.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_95;
  v_95.x = _World2Object[0].x;
  v_95.y = _World2Object[1].x;
  v_95.z = _World2Object[2].x;
  v_95.w = _World2Object[3].x;
  highp vec4 v_96;
  v_96.x = _World2Object[0].y;
  v_96.y = _World2Object[1].y;
  v_96.z = _World2Object[2].y;
  v_96.w = _World2Object[3].y;
  highp vec4 v_97;
  v_97.x = _World2Object[0].z;
  v_97.y = _World2Object[1].z;
  v_97.z = _World2Object[2].z;
  v_97.w = _World2Object[3].z;
  highp vec3 tmpvar_98;
  tmpvar_98 = normalize(((
    (v_95.xyz * tmpvar_11.x)
   + 
    (v_96.xyz * tmpvar_11.y)
  ) + (v_97.xyz * tmpvar_11.z)));
  worldNormal_3 = tmpvar_98;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec2 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xy;
  lightCoord_4 = tmpvar_17;
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_LightTexture0, lightCoord_4).w;
  lowp vec3 tmpvar_19;
  tmpvar_19 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_19;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_18);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_22 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tmpvar_9 * tmpvar_1) * diff_22);
  c_21.xyz = tmpvar_24;
  c_21.w = tmpvar_10;
  c_20.w = c_21.w;
  mediump vec3 tmpvar_25;
  tmpvar_25 = c_21.xyz;
  c_20.xyz = tmpvar_25;
  c_3.xyz = c_20.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "GEOM_TYPE_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_8;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_14 = tmpvar_19;
  if (((tmpvar_16 > 1.0) && (tmpvar_16 < 5.0))) {
    highp float tmpvar_20;
    tmpvar_20 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_21;
    isBestWind_21 = (tmpvar_16 == 4.0);
    bool bLeaf2_22;
    bLeaf2_22 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    highp vec3 vDirection_24;
    vDirection_24 = tmpvar_2;
    highp float tmpvar_25;
    if (bLeaf2_22) {
      tmpvar_25 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_26;
    if (bLeaf2_22) {
      tmpvar_26 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_27;
    highp vec4 tmpvar_28;
    tmpvar_28.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_28.x = (tmpvar_25 + tmpvar_20);
    highp vec4 tmpvar_29;
    tmpvar_29 = abs(((
      fract((tmpvar_28 + 0.5))
     * 2.0) - 1.0));
    vPos_27 = (tmpvar_19 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_26 * (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_24 = tmpvar_2;
    vPos_23 = vPos_27;
    if (isBestWind_21) {
      highp vec3 tmpvar_30;
      tmpvar_30 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_31;
      if (bLeaf2_22) {
        tmpvar_31 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_32;
      if (bLeaf2_22) {
        tmpvar_32 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_33;
      if (bLeaf2_22) {
        tmpvar_33 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_34;
      if (bLeaf2_22) {
        tmpvar_34 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_35;
      if (bLeaf2_22) {
        tmpvar_35 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_35 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_36;
      if (bLeaf2_22) {
        tmpvar_36 = bool(1);
      } else {
        tmpvar_36 = bool(1);
      };
      highp float fTwitch_37;
      highp vec3 vAxis_38;
      highp vec3 tmpvar_39;
      tmpvar_39 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_40;
      tmpvar_40 = ((tmpvar_39.x + tmpvar_39.y) + tmpvar_39.z);
      highp vec4 tmpvar_41;
      tmpvar_41.x = (tmpvar_31 + tmpvar_40);
      tmpvar_41.y = ((tmpvar_31 * 0.75) - tmpvar_40);
      tmpvar_41.z = ((tmpvar_31 * 0.01) + tmpvar_40);
      tmpvar_41.w = (tmpvar_31 + tmpvar_40);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = sqrt(dot (vPos_27, vPos_27));
      highp float fAngle_45;
      fAngle_45 = ((_glesMultiTexCoord2.x * tmpvar_33) * (tmpvar_42.x + (tmpvar_42.y * tmpvar_42.y)));
      highp vec2 vSinCos_46;
      vSinCos_46.x = sin(fAngle_45);
      vSinCos_46.y = cos(fAngle_45);
      highp float tmpvar_47;
      tmpvar_47 = (1.0 - vSinCos_46.y);
      highp mat3 tmpvar_48;
      tmpvar_48[0].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.x) + vSinCos_46.y);
      tmpvar_48[0].y = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.y) + (vSinCos_46.x * tmpvar_30.z));
      tmpvar_48[0].z = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.z) - (vSinCos_46.x * tmpvar_30.y));
      tmpvar_48[1].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.y) - (vSinCos_46.x * tmpvar_30.z));
      tmpvar_48[1].y = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.y) + vSinCos_46.y);
      tmpvar_48[1].z = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.z) + (vSinCos_46.x * tmpvar_30.x));
      tmpvar_48[2].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.z) + (vSinCos_46.x * tmpvar_30.y));
      tmpvar_48[2].y = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.z) - (vSinCos_46.x * tmpvar_30.x));
      tmpvar_48[2].z = (((tmpvar_47 * tmpvar_30.z) * tmpvar_30.z) + vSinCos_46.y);
      highp vec3 tmpvar_49;
      tmpvar_49 = ((tmpvar_30.yzx * vRotatedWindVector_13.zxy) - (tmpvar_30.zxy * vRotatedWindVector_13.yzx));
      vAxis_38.xz = tmpvar_49.xz;
      highp float tmpvar_50;
      tmpvar_50 = clamp (dot (vRotatedWindVector_13, tmpvar_30), -1.0, 1.0);
      vAxis_38.y = (tmpvar_49.y + tmpvar_50);
      highp vec3 tmpvar_51;
      tmpvar_51 = normalize(vAxis_38);
      vAxis_38 = tmpvar_51;
      highp float tmpvar_52;
      tmpvar_52 = (1.570796 - (sign(tmpvar_50) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_50))) * (1.570796 + (abs(tmpvar_50) * (-0.2146018 + 
          (abs(tmpvar_50) * (0.08656672 + (abs(tmpvar_50) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_53;
      tmpvar_53 = (tmpvar_42.y - (tmpvar_42.x * tmpvar_42.x));
      fTwitch_37 = 0.0;
      if (tmpvar_36) {
        highp float fTime_54;
        fTime_54 = (tmpvar_35.z + tmpvar_40);
        highp vec4 tmpvar_55;
        tmpvar_55.zw = vec2(0.0, 0.0);
        tmpvar_55.x = fTime_54;
        tmpvar_55.y = (0.87 * fTime_54);
        highp vec4 tmpvar_56;
        highp vec4 tmpvar_57;
        tmpvar_57 = abs(((
          fract((tmpvar_55 + 0.5))
         * 2.0) - 1.0));
        tmpvar_56 = (((
          (tmpvar_57 * tmpvar_57)
         * 
          (3.0 - (2.0 * tmpvar_57))
        ) - 0.5) * 2.0);
        fTwitch_37 = (tmpvar_35.x * pow (clamp (
          ((((tmpvar_56.x * tmpvar_56.y) * tmpvar_56.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_35.y));
      };
      highp float fAngle_58;
      fAngle_58 = (_glesMultiTexCoord2.x * ((
        (tmpvar_52 * tmpvar_34)
       + 
        (tmpvar_53 * tmpvar_32)
      ) + fTwitch_37));
      highp vec2 vSinCos_59;
      vSinCos_59.x = sin(fAngle_58);
      vSinCos_59.y = cos(fAngle_58);
      highp float tmpvar_60;
      tmpvar_60 = (1.0 - vSinCos_59.y);
      highp mat3 tmpvar_61;
      tmpvar_61[0].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.x) + vSinCos_59.y);
      tmpvar_61[0].y = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.y) + (vSinCos_59.x * tmpvar_51.z));
      tmpvar_61[0].z = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.z) - (vSinCos_59.x * tmpvar_51.y));
      tmpvar_61[1].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.y) - (vSinCos_59.x * tmpvar_51.z));
      tmpvar_61[1].y = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.y) + vSinCos_59.y);
      tmpvar_61[1].z = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.z) + (vSinCos_59.x * tmpvar_51.x));
      tmpvar_61[2].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.z) + (vSinCos_59.x * tmpvar_51.y));
      tmpvar_61[2].y = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.z) - (vSinCos_59.x * tmpvar_51.x));
      tmpvar_61[2].z = (((tmpvar_60 * tmpvar_51.z) * tmpvar_51.z) + vSinCos_59.y);
      highp mat3 tmpvar_62;
      tmpvar_62 = (tmpvar_48 * tmpvar_61);
      vDirection_24 = (tmpvar_62 * _glesNormal);
      vPos_23 = (normalize((tmpvar_62 * vPos_27)) * tmpvar_44);
    };
    tmpvar_11 = vDirection_24;
    FinalPosition_14 = vPos_23;
  };
  highp vec3 tmpvar_63;
  tmpvar_63 = (FinalPosition_14 + _glesMultiTexCoord1.xyz);
  FinalPosition_14 = tmpvar_63;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_64;
    vPos_64 = tmpvar_63;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_65;
      vPos_65 = tmpvar_63;
      highp float fAdherenceScale_66;
      highp vec3 tmpvar_67;
      tmpvar_67 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_68;
      tmpvar_68 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_69;
      highp float fOscillation_70;
      fOscillation_70 = 1.0;
      highp float fAmount_71;
      highp float fTarget_72;
      highp vec4 tmpvar_73;
      tmpvar_73.x = (tmpvar_68 + _glesMultiTexCoord0.w);
      tmpvar_73.y = ((tmpvar_68 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_73.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_68 + _glesMultiTexCoord0.w));
      tmpvar_73.w = ((tmpvar_68 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_74;
      tmpvar_74 = abs(((
        fract((tmpvar_73 + 0.5))
       * 2.0) - 1.0));
      vOscillations_69 = (((
        (tmpvar_74 * tmpvar_74)
       * 
        (3.0 - (2.0 * tmpvar_74))
      ) - 0.5) * 2.0);
      highp float tmpvar_75;
      tmpvar_75 = (vOscillations_69.y * vOscillations_69.z);
      fTarget_72 = 1.0;
      fAmount_71 = tmpvar_75;
      if ((tmpvar_75 < 0.0)) {
        fTarget_72 = -1.0;
        fAmount_71 = -(tmpvar_75);
      };
      fOscillation_70 = (((
        (mix (mix (tmpvar_75, fTarget_72, fAmount_71), fTarget_72, fAmount_71) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_69.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_69.w * _ST_WindBranchWhip.x)));
      vPos_65 = (tmpvar_63 + ((tmpvar_67 * fOscillation_70) * _ST_WindBranch.y));
      highp vec4 tmpvar_76;
      tmpvar_76.zw = vec2(0.0, 0.0);
      tmpvar_76.x = ((tmpvar_68 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_76.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_77;
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      tmpvar_77 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      fAdherenceScale_66 = (1.0 - ((
        ((tmpvar_77.x * tmpvar_77.y) * tmpvar_77.x)
       * tmpvar_77.y) * _ST_WindTurbulences.x));
      fAdherenceScale_66 = (fAdherenceScale_66 + ((vOscillations_69.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_65 = (vPos_65 + ((
        ((vRotatedBranchAnchor_12 - vPos_65) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_66) * _glesMultiTexCoord0.z));
      vPos_64 = vPos_65;
    } else {
      highp vec3 vPos_79;
      vPos_79 = vPos_64;
      highp vec3 tmpvar_80;
      tmpvar_80 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_81;
      tmpvar_81 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_82;
      highp float fAmount_83;
      highp float fTarget_84;
      highp vec4 tmpvar_85;
      tmpvar_85.w = 0.0;
      tmpvar_85.x = (tmpvar_81 + _glesMultiTexCoord0.w);
      tmpvar_85.y = ((tmpvar_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_85.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_86;
      tmpvar_86 = abs(((
        fract((tmpvar_85 + 0.5))
       * 2.0) - 1.0));
      vOscillations_82 = (((
        (tmpvar_86 * tmpvar_86)
       * 
        (3.0 - (2.0 * tmpvar_86))
      ) - 0.5) * 2.0);
      highp float tmpvar_87;
      tmpvar_87 = (vOscillations_82.y * vOscillations_82.z);
      fTarget_84 = 1.0;
      fAmount_83 = tmpvar_87;
      if ((tmpvar_87 < 0.0)) {
        fTarget_84 = -1.0;
        fAmount_83 = -(tmpvar_87);
      };
      vPos_79 = (vPos_64 + ((tmpvar_80 * 
        (((mix (
          mix (tmpvar_87, fTarget_84, fAmount_83)
        , fTarget_84, fAmount_83) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_82.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_64 = vPos_79;
    };
    FinalPosition_14 = vPos_64;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_88;
    vPos_88 = FinalPosition_14;
    highp float fAdjust_89;
    highp float fLength_90;
    fLength_90 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_91;
    tmpvar_91 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_89 = tmpvar_91;
    if ((tmpvar_91 != 0.0)) {
      fAdjust_89 = pow (tmpvar_91, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_92;
    tmpvar_92.zw = vec2(0.0, 0.0);
    tmpvar_92.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_92.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_93;
    highp vec4 tmpvar_94;
    tmpvar_94 = abs(((
      fract((tmpvar_92 + 0.5))
     * 2.0) - 1.0));
    tmpvar_93 = (((
      (tmpvar_94 * tmpvar_94)
     * 
      (3.0 - (2.0 * tmpvar_94))
    ) - 0.5) * 2.0);
    vPos_88.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * (
      ((_ST_WindGlobal.y * (tmpvar_93.x + (tmpvar_93.y * tmpvar_93.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_89)));
    vPos_88 = (normalize(vPos_88) * fLength_90);
    FinalPosition_14 = vPos_88;
  };
  tmpvar_10.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_95;
  v_95.x = _World2Object[0].x;
  v_95.y = _World2Object[1].x;
  v_95.z = _World2Object[2].x;
  v_95.w = _World2Object[3].x;
  highp vec4 v_96;
  v_96.x = _World2Object[0].y;
  v_96.y = _World2Object[1].y;
  v_96.z = _World2Object[2].y;
  v_96.w = _World2Object[3].y;
  highp vec4 v_97;
  v_97.x = _World2Object[0].z;
  v_97.y = _World2Object[1].z;
  v_97.z = _World2Object[2].z;
  v_97.w = _World2Object[3].z;
  highp vec3 tmpvar_98;
  tmpvar_98 = normalize(((
    (v_95.xyz * tmpvar_11.x)
   + 
    (v_96.xyz * tmpvar_11.y)
  ) + (v_97.xyz * tmpvar_11.z)));
  worldNormal_3 = tmpvar_98;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec2 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xy;
  lightCoord_4 = tmpvar_17;
  lowp float tmpvar_18;
  tmpvar_18 = texture (_LightTexture0, lightCoord_4).w;
  lowp vec3 tmpvar_19;
  tmpvar_19 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_19;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_18);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_22 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tmpvar_9 * tmpvar_1) * diff_22);
  c_21.xyz = tmpvar_24;
  c_21.w = tmpvar_10;
  c_20.w = c_21.w;
  mediump vec3 tmpvar_25;
  tmpvar_25 = c_21.xyz;
  c_20.xyz = tmpvar_25;
  c_3.xyz = c_20.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_8;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_9;
  highp float cse_10;
  cse_10 = _Object2World[3].x;
  highp float cse_11;
  cse_11 = _Object2World[3].y;
  highp float tmpvar_12;
  tmpvar_12 = clamp (((
    fract(((cse_10 + cse_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_12;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_17 = tmpvar_21;
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_22;
    tmpvar_22 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_23;
    isBestWind_23 = (tmpvar_18 == 4.0);
    bool bLeaf2_24;
    bLeaf2_24 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    highp vec3 vDirection_26;
    vDirection_26 = tmpvar_2;
    highp float tmpvar_27;
    if (bLeaf2_24) {
      tmpvar_27 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_28;
    if (bLeaf2_24) {
      tmpvar_28 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_29;
    highp vec4 tmpvar_30;
    tmpvar_30.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_30.x = (tmpvar_27 + tmpvar_22);
    highp vec4 tmpvar_31;
    tmpvar_31 = abs(((
      fract((tmpvar_30 + 0.5))
     * 2.0) - 1.0));
    vPos_29 = (tmpvar_21 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_28 * (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_26 = tmpvar_2;
    vPos_25 = vPos_29;
    if (isBestWind_23) {
      highp vec3 tmpvar_32;
      tmpvar_32 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_33;
      if (bLeaf2_24) {
        tmpvar_33 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_34;
      if (bLeaf2_24) {
        tmpvar_34 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_35;
      if (bLeaf2_24) {
        tmpvar_35 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_36;
      if (bLeaf2_24) {
        tmpvar_36 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_37;
      if (bLeaf2_24) {
        tmpvar_37 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_37 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_38;
      if (bLeaf2_24) {
        tmpvar_38 = bool(1);
      } else {
        tmpvar_38 = bool(1);
      };
      highp float fTwitch_39;
      highp vec3 vAxis_40;
      highp vec3 tmpvar_41;
      tmpvar_41 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_42;
      tmpvar_42 = ((tmpvar_41.x + tmpvar_41.y) + tmpvar_41.z);
      highp vec4 tmpvar_43;
      tmpvar_43.x = (tmpvar_33 + tmpvar_42);
      tmpvar_43.y = ((tmpvar_33 * 0.75) - tmpvar_42);
      tmpvar_43.z = ((tmpvar_33 * 0.01) + tmpvar_42);
      tmpvar_43.w = (tmpvar_33 + tmpvar_42);
      highp vec4 tmpvar_44;
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      tmpvar_44 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = sqrt(dot (vPos_29, vPos_29));
      highp float fAngle_47;
      fAngle_47 = ((_glesMultiTexCoord2.x * tmpvar_35) * (tmpvar_44.x + (tmpvar_44.y * tmpvar_44.y)));
      highp vec2 vSinCos_48;
      vSinCos_48.x = sin(fAngle_47);
      vSinCos_48.y = cos(fAngle_47);
      highp float tmpvar_49;
      tmpvar_49 = (1.0 - vSinCos_48.y);
      highp mat3 tmpvar_50;
      tmpvar_50[0].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.x) + vSinCos_48.y);
      tmpvar_50[0].y = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.y) + (vSinCos_48.x * tmpvar_32.z));
      tmpvar_50[0].z = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.z) - (vSinCos_48.x * tmpvar_32.y));
      tmpvar_50[1].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.y) - (vSinCos_48.x * tmpvar_32.z));
      tmpvar_50[1].y = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.y) + vSinCos_48.y);
      tmpvar_50[1].z = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.z) + (vSinCos_48.x * tmpvar_32.x));
      tmpvar_50[2].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.z) + (vSinCos_48.x * tmpvar_32.y));
      tmpvar_50[2].y = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.z) - (vSinCos_48.x * tmpvar_32.x));
      tmpvar_50[2].z = (((tmpvar_49 * tmpvar_32.z) * tmpvar_32.z) + vSinCos_48.y);
      highp vec3 tmpvar_51;
      tmpvar_51 = ((tmpvar_32.yzx * vRotatedWindVector_16.zxy) - (tmpvar_32.zxy * vRotatedWindVector_16.yzx));
      vAxis_40.xz = tmpvar_51.xz;
      highp float tmpvar_52;
      tmpvar_52 = clamp (dot (vRotatedWindVector_16, tmpvar_32), -1.0, 1.0);
      vAxis_40.y = (tmpvar_51.y + tmpvar_52);
      highp vec3 tmpvar_53;
      tmpvar_53 = normalize(vAxis_40);
      vAxis_40 = tmpvar_53;
      highp float tmpvar_54;
      tmpvar_54 = (1.570796 - (sign(tmpvar_52) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_52))) * (1.570796 + (abs(tmpvar_52) * (-0.2146018 + 
          (abs(tmpvar_52) * (0.08656672 + (abs(tmpvar_52) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_55;
      tmpvar_55 = (tmpvar_44.y - (tmpvar_44.x * tmpvar_44.x));
      fTwitch_39 = 0.0;
      if (tmpvar_38) {
        highp float fTime_56;
        fTime_56 = (tmpvar_37.z + tmpvar_42);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_39 = (tmpvar_37.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_37.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_54 * tmpvar_36)
       + 
        (tmpvar_55 * tmpvar_34)
      ) + fTwitch_39));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.y) + (vSinCos_61.x * tmpvar_53.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.z) - (vSinCos_61.x * tmpvar_53.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.y) - (vSinCos_61.x * tmpvar_53.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.z) + (vSinCos_61.x * tmpvar_53.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.z) + (vSinCos_61.x * tmpvar_53.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.z) - (vSinCos_61.x * tmpvar_53.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_53.z) * tmpvar_53.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_50 * tmpvar_63);
      vDirection_26 = (tmpvar_64 * _glesNormal);
      vPos_25 = (normalize((tmpvar_64 * vPos_29)) * tmpvar_46);
    };
    tmpvar_14 = vDirection_26;
    FinalPosition_17 = vPos_25;
  };
  highp vec3 tmpvar_65;
  tmpvar_65 = (FinalPosition_17 + _glesMultiTexCoord1.xyz);
  FinalPosition_17 = tmpvar_65;
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_66;
    vPos_66 = tmpvar_65;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_67;
      vPos_67 = tmpvar_65;
      highp float fAdherenceScale_68;
      highp vec3 tmpvar_69;
      tmpvar_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_70;
      tmpvar_70 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_71;
      highp float fOscillation_72;
      fOscillation_72 = 1.0;
      highp float fAmount_73;
      highp float fTarget_74;
      highp vec4 tmpvar_75;
      tmpvar_75.x = (tmpvar_70 + _glesMultiTexCoord0.w);
      tmpvar_75.y = ((tmpvar_70 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_75.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_70 + _glesMultiTexCoord0.w));
      tmpvar_75.w = ((tmpvar_70 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      vOscillations_71 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      highp float tmpvar_77;
      tmpvar_77 = (vOscillations_71.y * vOscillations_71.z);
      fTarget_74 = 1.0;
      fAmount_73 = tmpvar_77;
      if ((tmpvar_77 < 0.0)) {
        fTarget_74 = -1.0;
        fAmount_73 = -(tmpvar_77);
      };
      fOscillation_72 = (((
        (mix (mix (tmpvar_77, fTarget_74, fAmount_73), fTarget_74, fAmount_73) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_71.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_71.w * _ST_WindBranchWhip.x)));
      vPos_67 = (tmpvar_65 + ((tmpvar_69 * fOscillation_72) * _ST_WindBranch.y));
      highp vec4 tmpvar_78;
      tmpvar_78.zw = vec2(0.0, 0.0);
      tmpvar_78.x = ((tmpvar_70 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_78.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_79;
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      tmpvar_79 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((
        ((tmpvar_79.x * tmpvar_79.y) * tmpvar_79.x)
       * tmpvar_79.y) * _ST_WindTurbulences.x));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_71.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_67 = (vPos_67 + ((
        ((vRotatedBranchAnchor_15 - vPos_67) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_66 = vPos_67;
    } else {
      highp vec3 vPos_81;
      vPos_81 = vPos_66;
      highp vec3 tmpvar_82;
      tmpvar_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_83;
      tmpvar_83 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_84;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (tmpvar_83 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((tmpvar_83 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_83 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_84 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_84.y * vOscillations_84.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      vPos_81 = (vPos_66 + ((tmpvar_82 * 
        (((mix (
          mix (tmpvar_89, fTarget_86, fAmount_85)
        , fTarget_86, fAmount_85) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_84.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_66 = vPos_81;
    };
    FinalPosition_17 = vPos_66;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = FinalPosition_17;
    highp float fAdjust_91;
    highp float fLength_92;
    fLength_92 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_93;
    tmpvar_93 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_91 = tmpvar_93;
    if ((tmpvar_93 != 0.0)) {
      fAdjust_91 = pow (tmpvar_93, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_94;
    tmpvar_94.zw = vec2(0.0, 0.0);
    tmpvar_94.x = (cse_10 + _ST_WindGlobal.x);
    tmpvar_94.y = (cse_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_95;
    highp vec4 tmpvar_96;
    tmpvar_96 = abs(((
      fract((tmpvar_94 + 0.5))
     * 2.0) - 1.0));
    tmpvar_95 = (((
      (tmpvar_96 * tmpvar_96)
     * 
      (3.0 - (2.0 * tmpvar_96))
    ) - 0.5) * 2.0);
    vPos_90.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * (
      ((_ST_WindGlobal.y * (tmpvar_95.x + (tmpvar_95.y * tmpvar_95.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_91)));
    vPos_90 = (normalize(vPos_90) * fLength_92);
    FinalPosition_17 = vPos_90;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_97;
  v_97.x = _World2Object[0].x;
  v_97.y = _World2Object[1].x;
  v_97.z = _World2Object[2].x;
  v_97.w = _World2Object[3].x;
  highp vec4 v_98;
  v_98.x = _World2Object[0].y;
  v_98.y = _World2Object[1].y;
  v_98.z = _World2Object[2].y;
  v_98.w = _World2Object[3].y;
  highp vec4 v_99;
  v_99.x = _World2Object[0].z;
  v_99.y = _World2Object[1].z;
  v_99.z = _World2Object[2].z;
  v_99.w = _World2Object[3].z;
  highp vec3 tmpvar_100;
  tmpvar_100 = normalize(((
    (v_97.xyz * tmpvar_14.x)
   + 
    (v_98.xyz * tmpvar_14.y)
  ) + (v_99.xyz * tmpvar_14.z)));
  worldNormal_3 = tmpvar_100;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (_LightMatrix0 * tmpvar_17).xyz;
  lightCoord_4 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_20;
  tmpvar_20 = texture2D (_LightTexture0, vec2(tmpvar_19)).w;
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_21;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_20);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_24 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tmpvar_9 * tmpvar_1) * diff_24);
  c_23.xyz = tmpvar_26;
  c_23.w = tmpvar_10;
  c_22.w = c_23.w;
  mediump vec3 tmpvar_27;
  tmpvar_27 = c_23.xyz;
  c_22.xyz = tmpvar_27;
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_8;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_9;
  highp float cse_10;
  cse_10 = _Object2World[3].x;
  highp float cse_11;
  cse_11 = _Object2World[3].y;
  highp float tmpvar_12;
  tmpvar_12 = clamp (((
    fract(((cse_10 + cse_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_12;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_17 = tmpvar_21;
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_22;
    tmpvar_22 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_23;
    isBestWind_23 = (tmpvar_18 == 4.0);
    bool bLeaf2_24;
    bLeaf2_24 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    highp vec3 vDirection_26;
    vDirection_26 = tmpvar_2;
    highp float tmpvar_27;
    if (bLeaf2_24) {
      tmpvar_27 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_28;
    if (bLeaf2_24) {
      tmpvar_28 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_29;
    highp vec4 tmpvar_30;
    tmpvar_30.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_30.x = (tmpvar_27 + tmpvar_22);
    highp vec4 tmpvar_31;
    tmpvar_31 = abs(((
      fract((tmpvar_30 + 0.5))
     * 2.0) - 1.0));
    vPos_29 = (tmpvar_21 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_28 * (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_26 = tmpvar_2;
    vPos_25 = vPos_29;
    if (isBestWind_23) {
      highp vec3 tmpvar_32;
      tmpvar_32 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_33;
      if (bLeaf2_24) {
        tmpvar_33 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_34;
      if (bLeaf2_24) {
        tmpvar_34 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_35;
      if (bLeaf2_24) {
        tmpvar_35 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_36;
      if (bLeaf2_24) {
        tmpvar_36 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_37;
      if (bLeaf2_24) {
        tmpvar_37 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_37 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_38;
      if (bLeaf2_24) {
        tmpvar_38 = bool(1);
      } else {
        tmpvar_38 = bool(1);
      };
      highp float fTwitch_39;
      highp vec3 vAxis_40;
      highp vec3 tmpvar_41;
      tmpvar_41 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_42;
      tmpvar_42 = ((tmpvar_41.x + tmpvar_41.y) + tmpvar_41.z);
      highp vec4 tmpvar_43;
      tmpvar_43.x = (tmpvar_33 + tmpvar_42);
      tmpvar_43.y = ((tmpvar_33 * 0.75) - tmpvar_42);
      tmpvar_43.z = ((tmpvar_33 * 0.01) + tmpvar_42);
      tmpvar_43.w = (tmpvar_33 + tmpvar_42);
      highp vec4 tmpvar_44;
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      tmpvar_44 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = sqrt(dot (vPos_29, vPos_29));
      highp float fAngle_47;
      fAngle_47 = ((_glesMultiTexCoord2.x * tmpvar_35) * (tmpvar_44.x + (tmpvar_44.y * tmpvar_44.y)));
      highp vec2 vSinCos_48;
      vSinCos_48.x = sin(fAngle_47);
      vSinCos_48.y = cos(fAngle_47);
      highp float tmpvar_49;
      tmpvar_49 = (1.0 - vSinCos_48.y);
      highp mat3 tmpvar_50;
      tmpvar_50[0].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.x) + vSinCos_48.y);
      tmpvar_50[0].y = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.y) + (vSinCos_48.x * tmpvar_32.z));
      tmpvar_50[0].z = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.z) - (vSinCos_48.x * tmpvar_32.y));
      tmpvar_50[1].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.y) - (vSinCos_48.x * tmpvar_32.z));
      tmpvar_50[1].y = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.y) + vSinCos_48.y);
      tmpvar_50[1].z = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.z) + (vSinCos_48.x * tmpvar_32.x));
      tmpvar_50[2].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.z) + (vSinCos_48.x * tmpvar_32.y));
      tmpvar_50[2].y = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.z) - (vSinCos_48.x * tmpvar_32.x));
      tmpvar_50[2].z = (((tmpvar_49 * tmpvar_32.z) * tmpvar_32.z) + vSinCos_48.y);
      highp vec3 tmpvar_51;
      tmpvar_51 = ((tmpvar_32.yzx * vRotatedWindVector_16.zxy) - (tmpvar_32.zxy * vRotatedWindVector_16.yzx));
      vAxis_40.xz = tmpvar_51.xz;
      highp float tmpvar_52;
      tmpvar_52 = clamp (dot (vRotatedWindVector_16, tmpvar_32), -1.0, 1.0);
      vAxis_40.y = (tmpvar_51.y + tmpvar_52);
      highp vec3 tmpvar_53;
      tmpvar_53 = normalize(vAxis_40);
      vAxis_40 = tmpvar_53;
      highp float tmpvar_54;
      tmpvar_54 = (1.570796 - (sign(tmpvar_52) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_52))) * (1.570796 + (abs(tmpvar_52) * (-0.2146018 + 
          (abs(tmpvar_52) * (0.08656672 + (abs(tmpvar_52) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_55;
      tmpvar_55 = (tmpvar_44.y - (tmpvar_44.x * tmpvar_44.x));
      fTwitch_39 = 0.0;
      if (tmpvar_38) {
        highp float fTime_56;
        fTime_56 = (tmpvar_37.z + tmpvar_42);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_39 = (tmpvar_37.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_37.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_54 * tmpvar_36)
       + 
        (tmpvar_55 * tmpvar_34)
      ) + fTwitch_39));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.y) + (vSinCos_61.x * tmpvar_53.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.z) - (vSinCos_61.x * tmpvar_53.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.y) - (vSinCos_61.x * tmpvar_53.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.z) + (vSinCos_61.x * tmpvar_53.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.z) + (vSinCos_61.x * tmpvar_53.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.z) - (vSinCos_61.x * tmpvar_53.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_53.z) * tmpvar_53.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_50 * tmpvar_63);
      vDirection_26 = (tmpvar_64 * _glesNormal);
      vPos_25 = (normalize((tmpvar_64 * vPos_29)) * tmpvar_46);
    };
    tmpvar_14 = vDirection_26;
    FinalPosition_17 = vPos_25;
  };
  highp vec3 tmpvar_65;
  tmpvar_65 = (FinalPosition_17 + _glesMultiTexCoord1.xyz);
  FinalPosition_17 = tmpvar_65;
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_66;
    vPos_66 = tmpvar_65;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_67;
      vPos_67 = tmpvar_65;
      highp float fAdherenceScale_68;
      highp vec3 tmpvar_69;
      tmpvar_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_70;
      tmpvar_70 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_71;
      highp float fOscillation_72;
      fOscillation_72 = 1.0;
      highp float fAmount_73;
      highp float fTarget_74;
      highp vec4 tmpvar_75;
      tmpvar_75.x = (tmpvar_70 + _glesMultiTexCoord0.w);
      tmpvar_75.y = ((tmpvar_70 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_75.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_70 + _glesMultiTexCoord0.w));
      tmpvar_75.w = ((tmpvar_70 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      vOscillations_71 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      highp float tmpvar_77;
      tmpvar_77 = (vOscillations_71.y * vOscillations_71.z);
      fTarget_74 = 1.0;
      fAmount_73 = tmpvar_77;
      if ((tmpvar_77 < 0.0)) {
        fTarget_74 = -1.0;
        fAmount_73 = -(tmpvar_77);
      };
      fOscillation_72 = (((
        (mix (mix (tmpvar_77, fTarget_74, fAmount_73), fTarget_74, fAmount_73) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_71.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_71.w * _ST_WindBranchWhip.x)));
      vPos_67 = (tmpvar_65 + ((tmpvar_69 * fOscillation_72) * _ST_WindBranch.y));
      highp vec4 tmpvar_78;
      tmpvar_78.zw = vec2(0.0, 0.0);
      tmpvar_78.x = ((tmpvar_70 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_78.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_79;
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      tmpvar_79 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((
        ((tmpvar_79.x * tmpvar_79.y) * tmpvar_79.x)
       * tmpvar_79.y) * _ST_WindTurbulences.x));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_71.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_67 = (vPos_67 + ((
        ((vRotatedBranchAnchor_15 - vPos_67) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_66 = vPos_67;
    } else {
      highp vec3 vPos_81;
      vPos_81 = vPos_66;
      highp vec3 tmpvar_82;
      tmpvar_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_83;
      tmpvar_83 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_84;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (tmpvar_83 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((tmpvar_83 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_83 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_84 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_84.y * vOscillations_84.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      vPos_81 = (vPos_66 + ((tmpvar_82 * 
        (((mix (
          mix (tmpvar_89, fTarget_86, fAmount_85)
        , fTarget_86, fAmount_85) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_84.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_66 = vPos_81;
    };
    FinalPosition_17 = vPos_66;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = FinalPosition_17;
    highp float fAdjust_91;
    highp float fLength_92;
    fLength_92 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_93;
    tmpvar_93 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_91 = tmpvar_93;
    if ((tmpvar_93 != 0.0)) {
      fAdjust_91 = pow (tmpvar_93, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_94;
    tmpvar_94.zw = vec2(0.0, 0.0);
    tmpvar_94.x = (cse_10 + _ST_WindGlobal.x);
    tmpvar_94.y = (cse_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_95;
    highp vec4 tmpvar_96;
    tmpvar_96 = abs(((
      fract((tmpvar_94 + 0.5))
     * 2.0) - 1.0));
    tmpvar_95 = (((
      (tmpvar_96 * tmpvar_96)
     * 
      (3.0 - (2.0 * tmpvar_96))
    ) - 0.5) * 2.0);
    vPos_90.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * (
      ((_ST_WindGlobal.y * (tmpvar_95.x + (tmpvar_95.y * tmpvar_95.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_91)));
    vPos_90 = (normalize(vPos_90) * fLength_92);
    FinalPosition_17 = vPos_90;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_97;
  v_97.x = _World2Object[0].x;
  v_97.y = _World2Object[1].x;
  v_97.z = _World2Object[2].x;
  v_97.w = _World2Object[3].x;
  highp vec4 v_98;
  v_98.x = _World2Object[0].y;
  v_98.y = _World2Object[1].y;
  v_98.z = _World2Object[2].y;
  v_98.w = _World2Object[3].y;
  highp vec4 v_99;
  v_99.x = _World2Object[0].z;
  v_99.y = _World2Object[1].z;
  v_99.z = _World2Object[2].z;
  v_99.w = _World2Object[3].z;
  highp vec3 tmpvar_100;
  tmpvar_100 = normalize(((
    (v_97.xyz * tmpvar_14.x)
   + 
    (v_98.xyz * tmpvar_14.y)
  ) + (v_99.xyz * tmpvar_14.z)));
  worldNormal_3 = tmpvar_100;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  mediump vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (_LightMatrix0 * tmpvar_17).xyz;
  lightCoord_4 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_20;
  tmpvar_20 = texture (_LightTexture0, vec2(tmpvar_19)).w;
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_21;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_20);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_24 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tmpvar_9 * tmpvar_1) * diff_24);
  c_23.xyz = tmpvar_26;
  c_23.w = tmpvar_10;
  c_22.w = c_23.w;
  mediump vec3 tmpvar_27;
  tmpvar_27 = c_23.xyz;
  c_22.xyz = tmpvar_27;
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_8;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_9;
  highp float cse_10;
  cse_10 = _Object2World[3].x;
  highp float cse_11;
  cse_11 = _Object2World[3].y;
  highp float tmpvar_12;
  tmpvar_12 = clamp (((
    fract(((cse_10 + cse_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_12;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_17 = tmpvar_21;
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_22;
    tmpvar_22 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_23;
    isBestWind_23 = (tmpvar_18 == 4.0);
    bool bLeaf2_24;
    bLeaf2_24 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    highp vec3 vDirection_26;
    vDirection_26 = tmpvar_2;
    highp float tmpvar_27;
    if (bLeaf2_24) {
      tmpvar_27 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_28;
    if (bLeaf2_24) {
      tmpvar_28 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_29;
    highp vec4 tmpvar_30;
    tmpvar_30.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_30.x = (tmpvar_27 + tmpvar_22);
    highp vec4 tmpvar_31;
    tmpvar_31 = abs(((
      fract((tmpvar_30 + 0.5))
     * 2.0) - 1.0));
    vPos_29 = (tmpvar_21 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_28 * (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_26 = tmpvar_2;
    vPos_25 = vPos_29;
    if (isBestWind_23) {
      highp vec3 tmpvar_32;
      tmpvar_32 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_33;
      if (bLeaf2_24) {
        tmpvar_33 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_34;
      if (bLeaf2_24) {
        tmpvar_34 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_35;
      if (bLeaf2_24) {
        tmpvar_35 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_36;
      if (bLeaf2_24) {
        tmpvar_36 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_37;
      if (bLeaf2_24) {
        tmpvar_37 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_37 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_38;
      if (bLeaf2_24) {
        tmpvar_38 = bool(1);
      } else {
        tmpvar_38 = bool(1);
      };
      highp float fTwitch_39;
      highp vec3 vAxis_40;
      highp vec3 tmpvar_41;
      tmpvar_41 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_42;
      tmpvar_42 = ((tmpvar_41.x + tmpvar_41.y) + tmpvar_41.z);
      highp vec4 tmpvar_43;
      tmpvar_43.x = (tmpvar_33 + tmpvar_42);
      tmpvar_43.y = ((tmpvar_33 * 0.75) - tmpvar_42);
      tmpvar_43.z = ((tmpvar_33 * 0.01) + tmpvar_42);
      tmpvar_43.w = (tmpvar_33 + tmpvar_42);
      highp vec4 tmpvar_44;
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      tmpvar_44 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = sqrt(dot (vPos_29, vPos_29));
      highp float fAngle_47;
      fAngle_47 = ((_glesMultiTexCoord2.x * tmpvar_35) * (tmpvar_44.x + (tmpvar_44.y * tmpvar_44.y)));
      highp vec2 vSinCos_48;
      vSinCos_48.x = sin(fAngle_47);
      vSinCos_48.y = cos(fAngle_47);
      highp float tmpvar_49;
      tmpvar_49 = (1.0 - vSinCos_48.y);
      highp mat3 tmpvar_50;
      tmpvar_50[0].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.x) + vSinCos_48.y);
      tmpvar_50[0].y = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.y) + (vSinCos_48.x * tmpvar_32.z));
      tmpvar_50[0].z = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.z) - (vSinCos_48.x * tmpvar_32.y));
      tmpvar_50[1].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.y) - (vSinCos_48.x * tmpvar_32.z));
      tmpvar_50[1].y = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.y) + vSinCos_48.y);
      tmpvar_50[1].z = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.z) + (vSinCos_48.x * tmpvar_32.x));
      tmpvar_50[2].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.z) + (vSinCos_48.x * tmpvar_32.y));
      tmpvar_50[2].y = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.z) - (vSinCos_48.x * tmpvar_32.x));
      tmpvar_50[2].z = (((tmpvar_49 * tmpvar_32.z) * tmpvar_32.z) + vSinCos_48.y);
      highp vec3 tmpvar_51;
      tmpvar_51 = ((tmpvar_32.yzx * vRotatedWindVector_16.zxy) - (tmpvar_32.zxy * vRotatedWindVector_16.yzx));
      vAxis_40.xz = tmpvar_51.xz;
      highp float tmpvar_52;
      tmpvar_52 = clamp (dot (vRotatedWindVector_16, tmpvar_32), -1.0, 1.0);
      vAxis_40.y = (tmpvar_51.y + tmpvar_52);
      highp vec3 tmpvar_53;
      tmpvar_53 = normalize(vAxis_40);
      vAxis_40 = tmpvar_53;
      highp float tmpvar_54;
      tmpvar_54 = (1.570796 - (sign(tmpvar_52) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_52))) * (1.570796 + (abs(tmpvar_52) * (-0.2146018 + 
          (abs(tmpvar_52) * (0.08656672 + (abs(tmpvar_52) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_55;
      tmpvar_55 = (tmpvar_44.y - (tmpvar_44.x * tmpvar_44.x));
      fTwitch_39 = 0.0;
      if (tmpvar_38) {
        highp float fTime_56;
        fTime_56 = (tmpvar_37.z + tmpvar_42);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_39 = (tmpvar_37.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_37.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_54 * tmpvar_36)
       + 
        (tmpvar_55 * tmpvar_34)
      ) + fTwitch_39));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.y) + (vSinCos_61.x * tmpvar_53.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.z) - (vSinCos_61.x * tmpvar_53.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.y) - (vSinCos_61.x * tmpvar_53.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.z) + (vSinCos_61.x * tmpvar_53.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.z) + (vSinCos_61.x * tmpvar_53.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.z) - (vSinCos_61.x * tmpvar_53.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_53.z) * tmpvar_53.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_50 * tmpvar_63);
      vDirection_26 = (tmpvar_64 * _glesNormal);
      vPos_25 = (normalize((tmpvar_64 * vPos_29)) * tmpvar_46);
    };
    tmpvar_14 = vDirection_26;
    FinalPosition_17 = vPos_25;
  };
  highp vec3 tmpvar_65;
  tmpvar_65 = (FinalPosition_17 + _glesMultiTexCoord1.xyz);
  FinalPosition_17 = tmpvar_65;
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_66;
    vPos_66 = tmpvar_65;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_67;
      vPos_67 = tmpvar_65;
      highp float fAdherenceScale_68;
      highp vec3 tmpvar_69;
      tmpvar_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_70;
      tmpvar_70 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_71;
      highp float fOscillation_72;
      fOscillation_72 = 1.0;
      highp float fAmount_73;
      highp float fTarget_74;
      highp vec4 tmpvar_75;
      tmpvar_75.x = (tmpvar_70 + _glesMultiTexCoord0.w);
      tmpvar_75.y = ((tmpvar_70 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_75.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_70 + _glesMultiTexCoord0.w));
      tmpvar_75.w = ((tmpvar_70 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      vOscillations_71 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      highp float tmpvar_77;
      tmpvar_77 = (vOscillations_71.y * vOscillations_71.z);
      fTarget_74 = 1.0;
      fAmount_73 = tmpvar_77;
      if ((tmpvar_77 < 0.0)) {
        fTarget_74 = -1.0;
        fAmount_73 = -(tmpvar_77);
      };
      fOscillation_72 = (((
        (mix (mix (tmpvar_77, fTarget_74, fAmount_73), fTarget_74, fAmount_73) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_71.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_71.w * _ST_WindBranchWhip.x)));
      vPos_67 = (tmpvar_65 + ((tmpvar_69 * fOscillation_72) * _ST_WindBranch.y));
      highp vec4 tmpvar_78;
      tmpvar_78.zw = vec2(0.0, 0.0);
      tmpvar_78.x = ((tmpvar_70 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_78.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_79;
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      tmpvar_79 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((
        ((tmpvar_79.x * tmpvar_79.y) * tmpvar_79.x)
       * tmpvar_79.y) * _ST_WindTurbulences.x));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_71.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_67 = (vPos_67 + ((
        ((vRotatedBranchAnchor_15 - vPos_67) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_66 = vPos_67;
    } else {
      highp vec3 vPos_81;
      vPos_81 = vPos_66;
      highp vec3 tmpvar_82;
      tmpvar_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_83;
      tmpvar_83 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_84;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (tmpvar_83 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((tmpvar_83 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_83 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_84 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_84.y * vOscillations_84.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      vPos_81 = (vPos_66 + ((tmpvar_82 * 
        (((mix (
          mix (tmpvar_89, fTarget_86, fAmount_85)
        , fTarget_86, fAmount_85) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_84.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_66 = vPos_81;
    };
    FinalPosition_17 = vPos_66;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = FinalPosition_17;
    highp float fAdjust_91;
    highp float fLength_92;
    fLength_92 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_93;
    tmpvar_93 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_91 = tmpvar_93;
    if ((tmpvar_93 != 0.0)) {
      fAdjust_91 = pow (tmpvar_93, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_94;
    tmpvar_94.zw = vec2(0.0, 0.0);
    tmpvar_94.x = (cse_10 + _ST_WindGlobal.x);
    tmpvar_94.y = (cse_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_95;
    highp vec4 tmpvar_96;
    tmpvar_96 = abs(((
      fract((tmpvar_94 + 0.5))
     * 2.0) - 1.0));
    tmpvar_95 = (((
      (tmpvar_96 * tmpvar_96)
     * 
      (3.0 - (2.0 * tmpvar_96))
    ) - 0.5) * 2.0);
    vPos_90.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * (
      ((_ST_WindGlobal.y * (tmpvar_95.x + (tmpvar_95.y * tmpvar_95.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_91)));
    vPos_90 = (normalize(vPos_90) * fLength_92);
    FinalPosition_17 = vPos_90;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_97;
  v_97.x = _World2Object[0].x;
  v_97.y = _World2Object[1].x;
  v_97.z = _World2Object[2].x;
  v_97.w = _World2Object[3].x;
  highp vec4 v_98;
  v_98.x = _World2Object[0].y;
  v_98.y = _World2Object[1].y;
  v_98.z = _World2Object[2].y;
  v_98.w = _World2Object[3].y;
  highp vec4 v_99;
  v_99.x = _World2Object[0].z;
  v_99.y = _World2Object[1].z;
  v_99.z = _World2Object[2].z;
  v_99.w = _World2Object[3].z;
  highp vec3 tmpvar_100;
  tmpvar_100 = normalize(((
    (v_97.xyz * tmpvar_14.x)
   + 
    (v_98.xyz * tmpvar_14.y)
  ) + (v_99.xyz * tmpvar_14.z)));
  worldNormal_3 = tmpvar_100;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_12;
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_14 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_15;
  lowp vec3 tmpvar_16;
  tmpvar_16 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_16;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_19 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.xyz = tmpvar_21;
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  mediump vec3 tmpvar_22;
  tmpvar_22 = c_18.xyz;
  c_17.xyz = tmpvar_22;
  c_3.xyz = c_17.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_8;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_9;
  highp float cse_10;
  cse_10 = _Object2World[3].x;
  highp float cse_11;
  cse_11 = _Object2World[3].y;
  highp float tmpvar_12;
  tmpvar_12 = clamp (((
    fract(((cse_10 + cse_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_12;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_17 = tmpvar_21;
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_22;
    tmpvar_22 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_23;
    isBestWind_23 = (tmpvar_18 == 4.0);
    bool bLeaf2_24;
    bLeaf2_24 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    highp vec3 vDirection_26;
    vDirection_26 = tmpvar_2;
    highp float tmpvar_27;
    if (bLeaf2_24) {
      tmpvar_27 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_28;
    if (bLeaf2_24) {
      tmpvar_28 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_29;
    highp vec4 tmpvar_30;
    tmpvar_30.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_30.x = (tmpvar_27 + tmpvar_22);
    highp vec4 tmpvar_31;
    tmpvar_31 = abs(((
      fract((tmpvar_30 + 0.5))
     * 2.0) - 1.0));
    vPos_29 = (tmpvar_21 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_28 * (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_26 = tmpvar_2;
    vPos_25 = vPos_29;
    if (isBestWind_23) {
      highp vec3 tmpvar_32;
      tmpvar_32 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_33;
      if (bLeaf2_24) {
        tmpvar_33 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_34;
      if (bLeaf2_24) {
        tmpvar_34 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_35;
      if (bLeaf2_24) {
        tmpvar_35 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_36;
      if (bLeaf2_24) {
        tmpvar_36 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_37;
      if (bLeaf2_24) {
        tmpvar_37 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_37 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_38;
      if (bLeaf2_24) {
        tmpvar_38 = bool(1);
      } else {
        tmpvar_38 = bool(1);
      };
      highp float fTwitch_39;
      highp vec3 vAxis_40;
      highp vec3 tmpvar_41;
      tmpvar_41 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_42;
      tmpvar_42 = ((tmpvar_41.x + tmpvar_41.y) + tmpvar_41.z);
      highp vec4 tmpvar_43;
      tmpvar_43.x = (tmpvar_33 + tmpvar_42);
      tmpvar_43.y = ((tmpvar_33 * 0.75) - tmpvar_42);
      tmpvar_43.z = ((tmpvar_33 * 0.01) + tmpvar_42);
      tmpvar_43.w = (tmpvar_33 + tmpvar_42);
      highp vec4 tmpvar_44;
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      tmpvar_44 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = sqrt(dot (vPos_29, vPos_29));
      highp float fAngle_47;
      fAngle_47 = ((_glesMultiTexCoord2.x * tmpvar_35) * (tmpvar_44.x + (tmpvar_44.y * tmpvar_44.y)));
      highp vec2 vSinCos_48;
      vSinCos_48.x = sin(fAngle_47);
      vSinCos_48.y = cos(fAngle_47);
      highp float tmpvar_49;
      tmpvar_49 = (1.0 - vSinCos_48.y);
      highp mat3 tmpvar_50;
      tmpvar_50[0].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.x) + vSinCos_48.y);
      tmpvar_50[0].y = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.y) + (vSinCos_48.x * tmpvar_32.z));
      tmpvar_50[0].z = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.z) - (vSinCos_48.x * tmpvar_32.y));
      tmpvar_50[1].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.y) - (vSinCos_48.x * tmpvar_32.z));
      tmpvar_50[1].y = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.y) + vSinCos_48.y);
      tmpvar_50[1].z = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.z) + (vSinCos_48.x * tmpvar_32.x));
      tmpvar_50[2].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.z) + (vSinCos_48.x * tmpvar_32.y));
      tmpvar_50[2].y = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.z) - (vSinCos_48.x * tmpvar_32.x));
      tmpvar_50[2].z = (((tmpvar_49 * tmpvar_32.z) * tmpvar_32.z) + vSinCos_48.y);
      highp vec3 tmpvar_51;
      tmpvar_51 = ((tmpvar_32.yzx * vRotatedWindVector_16.zxy) - (tmpvar_32.zxy * vRotatedWindVector_16.yzx));
      vAxis_40.xz = tmpvar_51.xz;
      highp float tmpvar_52;
      tmpvar_52 = clamp (dot (vRotatedWindVector_16, tmpvar_32), -1.0, 1.0);
      vAxis_40.y = (tmpvar_51.y + tmpvar_52);
      highp vec3 tmpvar_53;
      tmpvar_53 = normalize(vAxis_40);
      vAxis_40 = tmpvar_53;
      highp float tmpvar_54;
      tmpvar_54 = (1.570796 - (sign(tmpvar_52) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_52))) * (1.570796 + (abs(tmpvar_52) * (-0.2146018 + 
          (abs(tmpvar_52) * (0.08656672 + (abs(tmpvar_52) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_55;
      tmpvar_55 = (tmpvar_44.y - (tmpvar_44.x * tmpvar_44.x));
      fTwitch_39 = 0.0;
      if (tmpvar_38) {
        highp float fTime_56;
        fTime_56 = (tmpvar_37.z + tmpvar_42);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_39 = (tmpvar_37.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_37.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_54 * tmpvar_36)
       + 
        (tmpvar_55 * tmpvar_34)
      ) + fTwitch_39));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.y) + (vSinCos_61.x * tmpvar_53.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.z) - (vSinCos_61.x * tmpvar_53.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.y) - (vSinCos_61.x * tmpvar_53.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.z) + (vSinCos_61.x * tmpvar_53.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.z) + (vSinCos_61.x * tmpvar_53.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.z) - (vSinCos_61.x * tmpvar_53.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_53.z) * tmpvar_53.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_50 * tmpvar_63);
      vDirection_26 = (tmpvar_64 * _glesNormal);
      vPos_25 = (normalize((tmpvar_64 * vPos_29)) * tmpvar_46);
    };
    tmpvar_14 = vDirection_26;
    FinalPosition_17 = vPos_25;
  };
  highp vec3 tmpvar_65;
  tmpvar_65 = (FinalPosition_17 + _glesMultiTexCoord1.xyz);
  FinalPosition_17 = tmpvar_65;
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_66;
    vPos_66 = tmpvar_65;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_67;
      vPos_67 = tmpvar_65;
      highp float fAdherenceScale_68;
      highp vec3 tmpvar_69;
      tmpvar_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_70;
      tmpvar_70 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_71;
      highp float fOscillation_72;
      fOscillation_72 = 1.0;
      highp float fAmount_73;
      highp float fTarget_74;
      highp vec4 tmpvar_75;
      tmpvar_75.x = (tmpvar_70 + _glesMultiTexCoord0.w);
      tmpvar_75.y = ((tmpvar_70 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_75.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_70 + _glesMultiTexCoord0.w));
      tmpvar_75.w = ((tmpvar_70 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      vOscillations_71 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      highp float tmpvar_77;
      tmpvar_77 = (vOscillations_71.y * vOscillations_71.z);
      fTarget_74 = 1.0;
      fAmount_73 = tmpvar_77;
      if ((tmpvar_77 < 0.