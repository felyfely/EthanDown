(tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD0.xyz, tmpvar_22);
  worldN_3.x = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD1.xyz, tmpvar_22);
  worldN_3.y = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD2.xyz, tmpvar_22);
  worldN_3.z = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_26;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_27;
  normalWorld_27 = worldN_3;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = normalWorld_27;
  mediump vec3 x1_29;
  x1_29.x = dot (unity_SHAr, tmpvar_28);
  x1_29.y = dot (unity_SHAg, tmpvar_28);
  x1_29.z = dot (unity_SHAb, tmpvar_28);
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_32 = tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_8 * tmpvar_1) * diff_32);
  c_31.xyz = tmpvar_34;
  c_31.w = tmpvar_9;
  c_30.w = c_31.w;
  mediump vec3 tmpvar_35;
  tmpvar_35 = (c_31.xyz + (tmpvar_8 * (xlv_TEXCOORD7 + x1_29)));
  c_30.xyz = tmpvar_35;
  c_4.xyz = c_30.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
in vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
out mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_11;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_15;
  highp vec2 tmpvar_16;
  tmpvar_16 = _glesMultiTexCoord2.xy;
  tmpvar_9.xy = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = tmpvar_1.xyz;
  FinalPosition_20 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = (_WindQuality * _WindEnabled);
  if ((tmpvar_22 > 0.0)) {
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_23 * _ST_WindVector.xyz));
    highp mat3 tmpvar_24;
    tmpvar_24[0] = _World2Object[0].xyz;
    tmpvar_24[1] = _World2Object[1].xyz;
    tmpvar_24[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_24 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_22 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    if ((tmpvar_22 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = tmpvar_21;
      highp float fAdherenceScale_27;
      highp vec3 tmpvar_28;
      tmpvar_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_29;
      tmpvar_29 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (tmpvar_29 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((tmpvar_29 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_29 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((tmpvar_29 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        (mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_30.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (_glesVertex.xyz + ((tmpvar_28 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((tmpvar_29 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((
        ((tmpvar_38.x * tmpvar_38.y) * tmpvar_38.x)
       * tmpvar_38.y) * _ST_WindTurbulences.x));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_18 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp vec3 tmpvar_41;
      tmpvar_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_42;
      tmpvar_42 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_43;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (tmpvar_42 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((tmpvar_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      vPos_40 = (vPos_25 + ((tmpvar_41 * 
        (((mix (
          mix (tmpvar_48, fTarget_45, fAmount_44)
        , fTarget_45, fAmount_44) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_20 = vPos_25;
  };
  if ((tmpvar_22 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_20;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_53.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    vPos_49.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_54.x + (tmpvar_54.y * tmpvar_54.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_50)));
    vPos_49 = (normalize(vPos_49) * fLength_51);
    FinalPosition_20 = vPos_49;
  };
  tmpvar_17.xyz = FinalPosition_20;
  highp vec4 tmpvar_56;
  tmpvar_56 = (glstate_matrix_mvp * tmpvar_17);
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (tmpvar_56 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = tmpvar_56.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  tmpvar_10 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_61;
  tmpvar_5 = tmpvar_7;
  highp vec3 tmpvar_62;
  tmpvar_62 = (_Object2World * tmpvar_17).xyz;
  highp vec4 v_63;
  v_63.x = _World2Object[0].x;
  v_63.y = _World2Object[1].x;
  v_63.z = _World2Object[2].x;
  v_63.w = _World2Object[3].x;
  highp vec4 v_64;
  v_64.x = _World2Object[0].y;
  v_64.y = _World2Object[1].y;
  v_64.z = _World2Object[2].y;
  v_64.w = _World2Object[3].y;
  highp vec4 v_65;
  v_65.x = _World2Object[0].z;
  v_65.y = _World2Object[1].z;
  v_65.z = _World2Object[2].z;
  v_65.w = _World2Object[3].z;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(((
    (v_63.xyz * _glesNormal.x)
   + 
    (v_64.xyz * _glesNormal.y)
  ) + (v_65.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_66;
  highp mat3 tmpvar_67;
  tmpvar_67[0] = _Object2World[0].xyz;
  tmpvar_67[1] = _Object2World[1].xyz;
  tmpvar_67[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((tmpvar_67 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_68;
  lowp vec3 tmpvar_69;
  tmpvar_69 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_70;
  tmpvar_70 = (tmpvar_69 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_3.x;
  tmpvar_71.y = worldBinormal_2.x;
  tmpvar_71.z = worldNormal_4.x;
  tmpvar_71.w = tmpvar_62.x;
  highp vec4 tmpvar_72;
  tmpvar_72.x = worldTangent_3.y;
  tmpvar_72.y = worldBinormal_2.y;
  tmpvar_72.z = worldNormal_4.y;
  tmpvar_72.w = tmpvar_62.y;
  highp vec4 tmpvar_73;
  tmpvar_73.x = worldTangent_3.z;
  tmpvar_73.y = worldBinormal_2.z;
  tmpvar_73.z = worldNormal_4.z;
  tmpvar_73.w = tmpvar_62.z;
  lowp vec4 tmpvar_74;
  tmpvar_74.w = 1.0;
  tmpvar_74.xyz = worldNormal_4;
  mediump vec3 tmpvar_75;
  mediump vec4 normal_76;
  normal_76 = tmpvar_74;
  mediump vec3 x2_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (normal_76.xyzz * normal_76.yzzx);
  x2_77.x = dot (unity_SHBr, tmpvar_78);
  x2_77.y = dot (unity_SHBg, tmpvar_78);
  x2_77.z = dot (unity_SHBb, tmpvar_78);
  tmpvar_75 = (x2_77 + (unity_SHC.xyz * (
    (normal_76.x * normal_76.x)
   - 
    (normal_76.y * normal_76.y)
  )));
  highp vec3 lightColor0_79;
  lightColor0_79 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_80;
  lightColor1_80 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_81;
  lightColor2_81 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_82;
  lightColor3_82 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_83;
  lightAttenSq_83 = unity_4LightAtten0;
  highp vec3 normal_84;
  normal_84 = worldNormal_4;
  highp vec4 tmpvar_85;
  tmpvar_85 = (unity_4LightPosX0 - tmpvar_62.x);
  highp vec4 tmpvar_86;
  tmpvar_86 = (unity_4LightPosY0 - tmpvar_62.y);
  highp vec4 tmpvar_87;
  tmpvar_87 = (unity_4LightPosZ0 - tmpvar_62.z);
  highp vec4 tmpvar_88;
  tmpvar_88 = (((tmpvar_85 * tmpvar_85) + (tmpvar_86 * tmpvar_86)) + (tmpvar_87 * tmpvar_87));
  highp vec4 tmpvar_89;
  tmpvar_89 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_85 * normal_84.x) + (tmpvar_86 * normal_84.y)) + (tmpvar_87 * normal_84.z))
   * 
    inversesqrt(tmpvar_88)
  )) * (1.0/((1.0 + 
    (tmpvar_88 * lightAttenSq_83)
  ))));
  highp vec3 tmpvar_90;
  tmpvar_90 = (tmpvar_75 + ((
    ((lightColor0_79 * tmpvar_89.x) + (lightColor1_80 * tmpvar_89.y))
   + 
    (lightColor2_81 * tmpvar_89.z)
  ) + (lightColor3_82 * tmpvar_89.w)));
  tmpvar_6 = tmpvar_90;
  gl_Position = (glstate_matrix_mvp * tmpvar_17);
  xlv_TEXCOORD0 = tmpvar_71;
  xlv_TEXCOORD1 = tmpvar_72;
  xlv_TEXCOORD2 = tmpvar_73;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_10;
  xlv_TEXCOORD7 = tmpvar_6;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
in mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 detailColor_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture (_DetailTex, xlv_TEXCOORD5.xy);
  detailColor_10 = tmpvar_19;
  diffuseColor_11.xyz = mix (diffuseColor_11.xyz, detailColor_10.xyz, detailColor_10.www);
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD0.xyz, tmpvar_22);
  worldN_3.x = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD1.xyz, tmpvar_22);
  worldN_3.y = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD2.xyz, tmpvar_22);
  worldN_3.z = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_26;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_27;
  normalWorld_27 = worldN_3;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = normalWorld_27;
  mediump vec3 x1_29;
  x1_29.x = dot (unity_SHAr, tmpvar_28);
  x1_29.y = dot (unity_SHAg, tmpvar_28);
  x1_29.z = dot (unity_SHAb, tmpvar_28);
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_32 = tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_8 * tmpvar_1) * diff_32);
  c_31.xyz = tmpvar_34;
  c_31.w = tmpvar_9;
  c_30.w = c_31.w;
  mediump vec3 tmpvar_35;
  tmpvar_35 = (c_31.xyz + (tmpvar_8 * (xlv_TEXCOORD7 + x1_29)));
  c_30.xyz = tmpvar_35;
  c_4.xyz = c_30.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  mediump vec3 tmpvar_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_12;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_13;
  tmpvar_13 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_13;
  highp float cse_14;
  cse_14 = _Object2World[3].x;
  highp float cse_15;
  cse_15 = _Object2World[3].y;
  highp float tmpvar_16;
  tmpvar_16 = clamp (((
    fract(((cse_14 + cse_15) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_16;
  highp vec2 tmpvar_17;
  tmpvar_17 = _glesMultiTexCoord2.xy;
  tmpvar_10.xy = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_19;
  highp vec3 vRotatedWindVector_20;
  highp vec3 FinalPosition_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = tmpvar_1.xyz;
  FinalPosition_21 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = (_WindQuality * _WindEnabled);
  if ((tmpvar_23 > 0.0)) {
    highp mat3 tmpvar_24;
    tmpvar_24[0] = _World2Object[0].xyz;
    tmpvar_24[1] = _World2Object[1].xyz;
    tmpvar_24[2] = _World2Object[2].xyz;
    vRotatedWindVector_20 = normalize((tmpvar_24 * _ST_WindVector.xyz));
    highp mat3 tmpvar_25;
    tmpvar_25[0] = _World2Object[0].xyz;
    tmpvar_25[1] = _World2Object[1].xyz;
    tmpvar_25[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_19 = (normalize((tmpvar_25 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_20 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_19 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_23 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    if ((tmpvar_23 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = tmpvar_22;
      highp float fAdherenceScale_28;
      highp vec3 tmpvar_29;
      tmpvar_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_30;
      tmpvar_30 = (_ST_WindBranch.x + (cse_14 + cse_15));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (tmpvar_30 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((tmpvar_30 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_30 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((tmpvar_30 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        (mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_31.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (_glesVertex.xyz + ((tmpvar_29 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((tmpvar_30 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((
        ((tmpvar_39.x * tmpvar_39.y) * tmpvar_39.x)
       * tmpvar_39.y) * _ST_WindTurbulences.x));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_19 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp vec3 tmpvar_42;
      tmpvar_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_43;
      tmpvar_43 = (_ST_WindBranch.x + (cse_14 + cse_15));
      highp vec4 vOscillations_44;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (tmpvar_43 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((tmpvar_43 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_43 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      vPos_41 = (vPos_26 + ((tmpvar_42 * 
        (((mix (
          mix (tmpvar_49, fTarget_46, fAmount_45)
        , fTarget_46, fAmount_45) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_21 = vPos_26;
  };
  if ((tmpvar_23 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_21;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_21, FinalPosition_21));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_21.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (cse_14 + _ST_WindGlobal.x);
    tmpvar_54.y = (cse_15 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    vPos_50.xz = (FinalPosition_21.xz + (vRotatedWindVector_20.xz * (
      ((_ST_WindGlobal.y * (tmpvar_55.x + (tmpvar_55.y * tmpvar_55.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_51)));
    vPos_50 = (normalize(vPos_50) * fLength_52);
    FinalPosition_21 = vPos_50;
  };
  tmpvar_18.xyz = FinalPosition_21;
  highp vec4 tmpvar_57;
  tmpvar_57 = (glstate_matrix_mvp * tmpvar_18);
  highp vec4 o_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (tmpvar_57 * 0.5);
  highp vec2 tmpvar_60;
  tmpvar_60.x = tmpvar_59.x;
  tmpvar_60.y = (tmpvar_59.y * _ProjectionParams.x);
  o_58.xy = (tmpvar_60 + tmpvar_59.w);
  o_58.zw = tmpvar_57.zw;
  highp vec3 tmpvar_61;
  tmpvar_61 = o_58.xyw;
  tmpvar_11 = tmpvar_61;
  highp vec2 tmpvar_62;
  tmpvar_62 = (tmpvar_11.xy * (_ScreenParams.xy * 0.25));
  tmpvar_11.xy = tmpvar_62;
  tmpvar_5 = tmpvar_8;
  highp vec3 tmpvar_63;
  tmpvar_63 = (_Object2World * tmpvar_18).xyz;
  highp vec4 v_64;
  v_64.x = _World2Object[0].x;
  v_64.y = _World2Object[1].x;
  v_64.z = _World2Object[2].x;
  v_64.w = _World2Object[3].x;
  highp vec4 v_65;
  v_65.x = _World2Object[0].y;
  v_65.y = _World2Object[1].y;
  v_65.z = _World2Object[2].y;
  v_65.w = _World2Object[3].y;
  highp vec4 v_66;
  v_66.x = _World2Object[0].z;
  v_66.y = _World2Object[1].z;
  v_66.z = _World2Object[2].z;
  v_66.w = _World2Object[3].z;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize(((
    (v_64.xyz * _glesNormal.x)
   + 
    (v_65.xyz * _glesNormal.y)
  ) + (v_66.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_67;
  highp mat3 tmpvar_68;
  tmpvar_68[0] = _Object2World[0].xyz;
  tmpvar_68[1] = _Object2World[1].xyz;
  tmpvar_68[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((tmpvar_68 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_69;
  lowp vec3 tmpvar_70;
  tmpvar_70 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_71;
  tmpvar_71 = (tmpvar_70 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72.x = worldTangent_3.x;
  tmpvar_72.y = worldBinormal_2.x;
  tmpvar_72.z = worldNormal_4.x;
  tmpvar_72.w = tmpvar_63.x;
  highp vec4 tmpvar_73;
  tmpvar_73.x = worldTangent_3.y;
  tmpvar_73.y = worldBinormal_2.y;
  tmpvar_73.z = worldNormal_4.y;
  tmpvar_73.w = tmpvar_63.y;
  highp vec4 tmpvar_74;
  tmpvar_74.x = worldTangent_3.z;
  tmpvar_74.y = worldBinormal_2.z;
  tmpvar_74.z = worldNormal_4.z;
  tmpvar_74.w = tmpvar_63.z;
  lowp vec4 tmpvar_75;
  tmpvar_75.w = 1.0;
  tmpvar_75.xyz = worldNormal_4;
  mediump vec3 tmpvar_76;
  mediump vec4 normal_77;
  normal_77 = tmpvar_75;
  mediump vec3 x2_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (normal_77.xyzz * normal_77.yzzx);
  x2_78.x = dot (unity_SHBr, tmpvar_79);
  x2_78.y = dot (unity_SHBg, tmpvar_79);
  x2_78.z = dot (unity_SHBb, tmpvar_79);
  tmpvar_76 = (x2_78 + (unity_SHC.xyz * (
    (normal_77.x * normal_77.x)
   - 
    (normal_77.y * normal_77.y)
  )));
  highp vec3 lightColor0_80;
  lightColor0_80 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_81;
  lightColor1_81 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_82;
  lightColor2_82 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_83;
  lightColor3_83 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_84;
  lightAttenSq_84 = unity_4LightAtten0;
  highp vec3 normal_85;
  normal_85 = worldNormal_4;
  highp vec4 tmpvar_86;
  tmpvar_86 = (unity_4LightPosX0 - tmpvar_63.x);
  highp vec4 tmpvar_87;
  tmpvar_87 = (unity_4LightPosY0 - tmpvar_63.y);
  highp vec4 tmpvar_88;
  tmpvar_88 = (unity_4LightPosZ0 - tmpvar_63.z);
  highp vec4 tmpvar_89;
  tmpvar_89 = (((tmpvar_86 * tmpvar_86) + (tmpvar_87 * tmpvar_87)) + (tmpvar_88 * tmpvar_88));
  highp vec4 tmpvar_90;
  tmpvar_90 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_86 * normal_85.x) + (tmpvar_87 * normal_85.y)) + (tmpvar_88 * normal_85.z))
   * 
    inversesqrt(tmpvar_89)
  )) * (1.0/((1.0 + 
    (tmpvar_89 * lightAttenSq_84)
  ))));
  highp vec3 tmpvar_91;
  tmpvar_91 = (tmpvar_76 + ((
    ((lightColor0_80 * tmpvar_90.x) + (lightColor1_81 * tmpvar_90.y))
   + 
    (lightColor2_82 * tmpvar_90.z)
  ) + (lightColor3_83 * tmpvar_90.w)));
  tmpvar_6 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = (unity_World2Shadow[0] * (_Object2World * tmpvar_18));
  tmpvar_7 = tmpvar_92;
  gl_Position = (glstate_matrix_mvp * tmpvar_18);
  xlv_TEXCOORD0 = tmpvar_72;
  xlv_TEXCOORD1 = tmpvar_73;
  xlv_TEXCOORD2 = tmpvar_74;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_11;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_TEXCOORD8;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 detailColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_DetailTex, xlv_TEXCOORD5.xy);
  detailColor_11 = tmpvar_20;
  diffuseColor_12.xyz = mix (diffuseColor_12.xyz, detailColor_11.xyz, detailColor_11.www);
  mediump vec3 tmpvar_21;
  tmpvar_21 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_21 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_21.x, max (tmpvar_21.y, tmpvar_21.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_22;
  tmpvar_22 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_24;
  mediump float dist_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD8).x;
  dist_25 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (float((dist_25 > 
    (xlv_TEXCOORD8.z / xlv_TEXCOORD8.w)
  )), _LightShadowData.x);
  tmpvar_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD0.xyz, tmpvar_23);
  worldN_4.x = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD1.xyz, tmpvar_23);
  worldN_4.y = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD2.xyz, tmpvar_23);
  worldN_4.z = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_31;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_24;
  mediump vec3 normalWorld_32;
  normalWorld_32 = worldN_4;
  mediump vec3 tmpvar_33;
  mediump vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = normalWorld_32;
  mediump vec3 x1_35;
  x1_35.x = dot (unity_SHAr, tmpvar_34);
  x1_35.y = dot (unity_SHAg, tmpvar_34);
  x1_35.z = dot (unity_SHAb, tmpvar_34);
  tmpvar_33 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_33;
  lowp vec4 c_36;
  lowp vec4 c_37;
  lowp float diff_38;
  mediump float tmpvar_39;
  tmpvar_39 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_38 = tmpvar_39;
  mediump vec3 tmpvar_40;
  tmpvar_40 = ((tmpvar_9 * tmpvar_33) * diff_38);
  c_37.xyz = tmpvar_40;
  c_37.w = tmpvar_10;
  c_36.w = c_37.w;
  mediump vec3 tmpvar_41;
  tmpvar_41 = (c_37.xyz + (tmpvar_9 * (xlv_TEXCOORD7 + x1_35)));
  c_36.xyz = tmpvar_41;
  c_5.xyz = c_36.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_11;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_15;
  highp vec2 tmpvar_16;
  tmpvar_16 = _glesMultiTexCoord2.xy;
  tmpvar_9.xy = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = tmpvar_1.xyz;
  FinalPosition_20 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = (_WindQuality * _WindEnabled);
  if ((tmpvar_22 > 0.0)) {
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_23 * _ST_WindVector.xyz));
    highp mat3 tmpvar_24;
    tmpvar_24[0] = _World2Object[0].xyz;
    tmpvar_24[1] = _World2Object[1].xyz;
    tmpvar_24[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_24 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_22 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    if ((tmpvar_22 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = tmpvar_21;
      highp float fAdherenceScale_27;
      highp vec3 tmpvar_28;
      tmpvar_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_29;
      tmpvar_29 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (tmpvar_29 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((tmpvar_29 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_29 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((tmpvar_29 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        (mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_30.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (_glesVertex.xyz + ((tmpvar_28 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((tmpvar_29 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((
        ((tmpvar_38.x * tmpvar_38.y) * tmpvar_38.x)
       * tmpvar_38.y) * _ST_WindTurbulences.x));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_18 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp vec3 tmpvar_41;
      tmpvar_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_42;
      tmpvar_42 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_43;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (tmpvar_42 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((tmpvar_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      vPos_40 = (vPos_25 + ((tmpvar_41 * 
        (((mix (
          mix (tmpvar_48, fTarget_45, fAmount_44)
        , fTarget_45, fAmount_44) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_20 = vPos_25;
  };
  if ((tmpvar_22 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_20;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_53.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    vPos_49.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_54.x + (tmpvar_54.y * tmpvar_54.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_50)));
    vPos_49 = (normalize(vPos_49) * fLength_51);
    FinalPosition_20 = vPos_49;
  };
  tmpvar_17.xyz = FinalPosition_20;
  highp vec4 tmpvar_56;
  tmpvar_56 = (glstate_matrix_mvp * tmpvar_17);
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (tmpvar_56 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = tmpvar_56.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  tmpvar_10 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_61;
  tmpvar_5 = tmpvar_7;
  highp vec3 tmpvar_62;
  tmpvar_62 = (_Object2World * tmpvar_17).xyz;
  highp vec4 v_63;
  v_63.x = _World2Object[0].x;
  v_63.y = _World2Object[1].x;
  v_63.z = _World2Object[2].x;
  v_63.w = _World2Object[3].x;
  highp vec4 v_64;
  v_64.x = _World2Object[0].y;
  v_64.y = _World2Object[1].y;
  v_64.z = _World2Object[2].y;
  v_64.w = _World2Object[3].y;
  highp vec4 v_65;
  v_65.x = _World2Object[0].z;
  v_65.y = _World2Object[1].z;
  v_65.z = _World2Object[2].z;
  v_65.w = _World2Object[3].z;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(((
    (v_63.xyz * _glesNormal.x)
   + 
    (v_64.xyz * _glesNormal.y)
  ) + (v_65.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_66;
  highp mat3 tmpvar_67;
  tmpvar_67[0] = _Object2World[0].xyz;
  tmpvar_67[1] = _Object2World[1].xyz;
  tmpvar_67[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((tmpvar_67 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_68;
  lowp vec3 tmpvar_69;
  tmpvar_69 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_70;
  tmpvar_70 = (tmpvar_69 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_3.x;
  tmpvar_71.y = worldBinormal_2.x;
  tmpvar_71.z = worldNormal_4.x;
  tmpvar_71.w = tmpvar_62.x;
  highp vec4 tmpvar_72;
  tmpvar_72.x = worldTangent_3.y;
  tmpvar_72.y = worldBinormal_2.y;
  tmpvar_72.z = worldNormal_4.y;
  tmpvar_72.w = tmpvar_62.y;
  highp vec4 tmpvar_73;
  tmpvar_73.x = worldTangent_3.z;
  tmpvar_73.y = worldBinormal_2.z;
  tmpvar_73.z = worldNormal_4.z;
  tmpvar_73.w = tmpvar_62.z;
  lowp vec4 tmpvar_74;
  tmpvar_74.w = 1.0;
  tmpvar_74.xyz = worldNormal_4;
  mediump vec4 normal_75;
  normal_75 = tmpvar_74;
  mediump vec3 x2_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (normal_75.xyzz * normal_75.yzzx);
  x2_76.x = dot (unity_SHBr, tmpvar_77);
  x2_76.y = dot (unity_SHBg, tmpvar_77);
  x2_76.z = dot (unity_SHBb, tmpvar_77);
  highp vec4 tmpvar_78;
  tmpvar_78 = (unity_World2Shadow[0] * (_Object2World * tmpvar_17));
  tmpvar_6 = tmpvar_78;
  gl_Position = (glstate_matrix_mvp * tmpvar_17);
  xlv_TEXCOORD0 = tmpvar_71;
  xlv_TEXCOORD1 = tmpvar_72;
  xlv_TEXCOORD2 = tmpvar_73;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_10;
  xlv_TEXCOORD7 = (x2_76 + (unity_SHC.xyz * (
    (normal_75.x * normal_75.x)
   - 
    (normal_75.y * normal_75.y)
  )));
  xlv_TEXCOORD8 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_TEXCOORD8;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 detailColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_DetailTex, xlv_TEXCOORD5.xy);
  detailColor_11 = tmpvar_20;
  diffuseColor_12.xyz = mix (diffuseColor_12.xyz, detailColor_11.xyz, detailColor_11.www);
  mediump vec3 tmpvar_21;
  tmpvar_21 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_21 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_21.x, max (tmpvar_21.y, tmpvar_21.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_22;
  tmpvar_22 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_24;
  lowp float tmpvar_25;
  tmpvar_25 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD8.xyz);
  mediump float tmpvar_26;
  tmpvar_26 = (_LightShadowData.x + (tmpvar_25 * (1.0 - _LightShadowData.x)));
  shadow_24 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD0.xyz, tmpvar_23);
  worldN_4.x = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD1.xyz, tmpvar_23);
  worldN_4.y = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD2.xyz, tmpvar_23);
  worldN_4.z = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_30;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_24;
  mediump vec3 normalWorld_31;
  normalWorld_31 = worldN_4;
  mediump vec3 tmpvar_32;
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = normalWorld_31;
  mediump vec3 x1_34;
  x1_34.x = dot (unity_SHAr, tmpvar_33);
  x1_34.y = dot (unity_SHAg, tmpvar_33);
  x1_34.z = dot (unity_SHAb, tmpvar_33);
  tmpvar_32 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_32;
  lowp vec4 c_35;
  lowp vec4 c_36;
  lowp float diff_37;
  mediump float tmpvar_38;
  tmpvar_38 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_37 = tmpvar_38;
  mediump vec3 tmpvar_39;
  tmpvar_39 = ((tmpvar_9 * tmpvar_32) * diff_37);
  c_36.xyz = tmpvar_39;
  c_36.w = tmpvar_10;
  c_35.w = c_36.w;
  mediump vec3 tmpvar_40;
  tmpvar_40 = (c_36.xyz + (tmpvar_9 * (xlv_TEXCOORD7 + x1_34)));
  c_35.xyz = tmpvar_40;
  c_5.xyz = c_35.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
in vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
out mediump vec3 xlv_TEXCOORD7;
out mediump vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_11;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_15;
  highp vec2 tmpvar_16;
  tmpvar_16 = _glesMultiTexCoord2.xy;
  tmpvar_9.xy = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = tmpvar_1.xyz;
  FinalPosition_20 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = (_WindQuality * _WindEnabled);
  if ((tmpvar_22 > 0.0)) {
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_23 * _ST_WindVector.xyz));
    highp mat3 tmpvar_24;
    tmpvar_24[0] = _World2Object[0].xyz;
    tmpvar_24[1] = _World2Object[1].xyz;
    tmpvar_24[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_24 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_22 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    if ((tmpvar_22 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = tmpvar_21;
      highp float fAdherenceScale_27;
      highp vec3 tmpvar_28;
      tmpvar_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_29;
      tmpvar_29 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (tmpvar_29 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((tmpvar_29 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_29 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((tmpvar_29 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        (mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_30.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (_glesVertex.xyz + ((tmpvar_28 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((tmpvar_29 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((
        ((tmpvar_38.x * tmpvar_38.y) * tmpvar_38.x)
       * tmpvar_38.y) * _ST_WindTurbulences.x));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_18 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp vec3 tmpvar_41;
      tmpvar_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_42;
      tmpvar_42 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_43;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (tmpvar_42 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((tmpvar_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      vPos_40 = (vPos_25 + ((tmpvar_41 * 
        (((mix (
          mix (tmpvar_48, fTarget_45, fAmount_44)
        , fTarget_45, fAmount_44) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_20 = vPos_25;
  };
  if ((tmpvar_22 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_20;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_53.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    vPos_49.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_54.x + (tmpvar_54.y * tmpvar_54.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_50)));
    vPos_49 = (normalize(vPos_49) * fLength_51);
    FinalPosition_20 = vPos_49;
  };
  tmpvar_17.xyz = FinalPosition_20;
  highp vec4 tmpvar_56;
  tmpvar_56 = (glstate_matrix_mvp * tmpvar_17);
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (tmpvar_56 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = tmpvar_56.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  tmpvar_10 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_61;
  tmpvar_5 = tmpvar_7;
  highp vec3 tmpvar_62;
  tmpvar_62 = (_Object2World * tmpvar_17).xyz;
  highp vec4 v_63;
  v_63.x = _World2Object[0].x;
  v_63.y = _World2Object[1].x;
  v_63.z = _World2Object[2].x;
  v_63.w = _World2Object[3].x;
  highp vec4 v_64;
  v_64.x = _World2Object[0].y;
  v_64.y = _World2Object[1].y;
  v_64.z = _World2Object[2].y;
  v_64.w = _World2Object[3].y;
  highp vec4 v_65;
  v_65.x = _World2Object[0].z;
  v_65.y = _World2Object[1].z;
  v_65.z = _World2Object[2].z;
  v_65.w = _World2Object[3].z;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(((
    (v_63.xyz * _glesNormal.x)
   + 
    (v_64.xyz * _glesNormal.y)
  ) + (v_65.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_66;
  highp mat3 tmpvar_67;
  tmpvar_67[0] = _Object2World[0].xyz;
  tmpvar_67[1] = _Object2World[1].xyz;
  tmpvar_67[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((tmpvar_67 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_68;
  lowp vec3 tmpvar_69;
  tmpvar_69 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_70;
  tmpvar_70 = (tmpvar_69 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_3.x;
  tmpvar_71.y = worldBinormal_2.x;
  tmpvar_71.z = worldNormal_4.x;
  tmpvar_71.w = tmpvar_62.x;
  highp vec4 tmpvar_72;
  tmpvar_72.x = worldTangent_3.y;
  tmpvar_72.y = worldBinormal_2.y;
  tmpvar_72.z = worldNormal_4.y;
  tmpvar_72.w = tmpvar_62.y;
  highp vec4 tmpvar_73;
  tmpvar_73.x = worldTangent_3.z;
  tmpvar_73.y = worldBinormal_2.z;
  tmpvar_73.z = worldNormal_4.z;
  tmpvar_73.w = tmpvar_62.z;
  lowp vec4 tmpvar_74;
  tmpvar_74.w = 1.0;
  tmpvar_74.xyz = worldNormal_4;
  mediump vec4 normal_75;
  normal_75 = tmpvar_74;
  mediump vec3 x2_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (normal_75.xyzz * normal_75.yzzx);
  x2_76.x = dot (unity_SHBr, tmpvar_77);
  x2_76.y = dot (unity_SHBg, tmpvar_77);
  x2_76.z = dot (unity_SHBb, tmpvar_77);
  highp vec4 tmpvar_78;
  tmpvar_78 = (unity_World2Shadow[0] * (_Object2World * tmpvar_17));
  tmpvar_6 = tmpvar_78;
  gl_Position = (glstate_matrix_mvp * tmpvar_17);
  xlv_TEXCOORD0 = tmpvar_71;
  xlv_TEXCOORD1 = tmpvar_72;
  xlv_TEXCOORD2 = tmpvar_73;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_10;
  xlv_TEXCOORD7 = (x2_76 + (unity_SHC.xyz * (
    (normal_75.x * normal_75.x)
   - 
    (normal_75.y * normal_75.y)
  )));
  xlv_TEXCOORD8 = tmpvar_6;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
in mediump vec3 xlv_TEXCOORD7;
in mediump vec4 xlv_TEXCOORD8;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 detailColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture (_DetailTex, xlv_TEXCOORD5.xy);
  detailColor_11 = tmpvar_20;
  diffuseColor_12.xyz = mix (diffuseColor_12.xyz, detailColor_11.xyz, detailColor_11.www);
  mediump vec3 tmpvar_21;
  tmpvar_21 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_21 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_21.x, max (tmpvar_21.y, tmpvar_21.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_22;
  tmpvar_22 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_24;
  mediump float tmpvar_25;
  tmpvar_25 = texture (_ShadowMapTexture, xlv_TEXCOORD8.xyz);
  lowp float tmpvar_26;
  tmpvar_26 = tmpvar_25;
  mediump float tmpvar_27;
  tmpvar_27 = (_LightShadowData.x + (tmpvar_26 * (1.0 - _LightShadowData.x)));
  shadow_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD0.xyz, tmpvar_23);
  worldN_4.x = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD1.xyz, tmpvar_23);
  worldN_4.y = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD2.xyz, tmpvar_23);
  worldN_4.z = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_31;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_24;
  mediump vec3 normalWorld_32;
  normalWorld_32 = worldN_4;
  mediump vec3 tmpvar_33;
  mediump vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = normalWorld_32;
  mediump vec3 x1_35;
  x1_35.x = dot (unity_SHAr, tmpvar_34);
  x1_35.y = dot (unity_SHAg, tmpvar_34);
  x1_35.z = dot (unity_SHAb, tmpvar_34);
  tmpvar_33 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_33;
  lowp vec4 c_36;
  lowp vec4 c_37;
  lowp float diff_38;
  mediump float tmpvar_39;
  tmpvar_39 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_38 = tmpvar_39;
  mediump vec3 tmpvar_40;
  tmpvar_40 = ((tmpvar_9 * tmpvar_33) * diff_38);
  c_37.xyz = tmpvar_40;
  c_37.w = tmpvar_10;
  c_36.w = c_37.w;
  mediump vec3 tmpvar_41;
  tmpvar_41 = (c_37.xyz + (tmpvar_9 * (xlv_TEXCOORD7 + x1_35)));
  c_36.xyz = tmpvar_41;
  c_5.xyz = c_36.xyz;
  c_5.w = 1.0;
  _glesFragData[0] = c_5;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  mediump vec3 tmpvar_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_12;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_13;
  tmpvar_13 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_13;
  highp float cse_14;
  cse_14 = _Object2World[3].x;
  highp float cse_15;
  cse_15 = _Object2World[3].y;
  highp float tmpvar_16;
  tmpvar_16 = clamp (((
    fract(((cse_14 + cse_15) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_16;
  highp vec2 tmpvar_17;
  tmpvar_17 = _glesMultiTexCoord2.xy;
  tmpvar_10.xy = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_19;
  highp vec3 vRotatedWindVector_20;
  highp vec3 FinalPosition_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = tmpvar_1.xyz;
  FinalPosition_21 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = (_WindQuality * _WindEnabled);
  if ((tmpvar_23 > 0.0)) {
    highp mat3 tmpvar_24;
    tmpvar_24[0] = _World2Object[0].xyz;
    tmpvar_24[1] = _World2Object[1].xyz;
    tmpvar_24[2] = _World2Object[2].xyz;
    vRotatedWindVector_20 = normalize((tmpvar_24 * _ST_WindVector.xyz));
    highp mat3 tmpvar_25;
    tmpvar_25[0] = _World2Object[0].xyz;
    tmpvar_25[1] = _World2Object[1].xyz;
    tmpvar_25[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_19 = (normalize((tmpvar_25 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_20 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_19 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_23 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    if ((tmpvar_23 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = tmpvar_22;
      highp float fAdherenceScale_28;
      highp vec3 tmpvar_29;
      tmpvar_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_30;
      tmpvar_30 = (_ST_WindBranch.x + (cse_14 + cse_15));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (tmpvar_30 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((tmpvar_30 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_30 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((tmpvar_30 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        (mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_31.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (_glesVertex.xyz + ((tmpvar_29 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((tmpvar_30 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((
        ((tmpvar_39.x * tmpvar_39.y) * tmpvar_39.x)
       * tmpvar_39.y) * _ST_WindTurbulences.x));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_19 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp vec3 tmpvar_42;
      tmpvar_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_43;
      tmpvar_43 = (_ST_WindBranch.x + (cse_14 + cse_15));
      highp vec4 vOscillations_44;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (tmpvar_43 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((tmpvar_43 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_43 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      vPos_41 = (vPos_26 + ((tmpvar_42 * 
        (((mix (
          mix (tmpvar_49, fTarget_46, fAmount_45)
        , fTarget_46, fAmount_45) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_21 = vPos_26;
  };
  if ((tmpvar_23 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_21;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_21, FinalPosition_21));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_21.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (cse_14 + _ST_WindGlobal.x);
    tmpvar_54.y = (cse_15 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    vPos_50.xz = (FinalPosition_21.xz + (vRotatedWindVector_20.xz * (
      ((_ST_WindGlobal.y * (tmpvar_55.x + (tmpvar_55.y * tmpvar_55.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_51)));
    vPos_50 = (normalize(vPos_50) * fLength_52);
    FinalPosition_21 = vPos_50;
  };
  tmpvar_18.xyz = FinalPosition_21;
  highp vec4 tmpvar_57;
  tmpvar_57 = (glstate_matrix_mvp * tmpvar_18);
  highp vec4 o_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (tmpvar_57 * 0.5);
  highp vec2 tmpvar_60;
  tmpvar_60.x = tmpvar_59.x;
  tmpvar_60.y = (tmpvar_59.y * _ProjectionParams.x);
  o_58.xy = (tmpvar_60 + tmpvar_59.w);
  o_58.zw = tmpvar_57.zw;
  highp vec3 tmpvar_61;
  tmpvar_61 = o_58.xyw;
  tmpvar_11 = tmpvar_61;
  highp vec2 tmpvar_62;
  tmpvar_62 = (tmpvar_11.xy * (_ScreenParams.xy * 0.25));
  tmpvar_11.xy = tmpvar_62;
  tmpvar_5 = tmpvar_8;
  highp vec3 tmpvar_63;
  tmpvar_63 = (_Object2World * tmpvar_18).xyz;
  highp vec4 v_64;
  v_64.x = _World2Object[0].x;
  v_64.y = _World2Object[1].x;
  v_64.z = _World2Object[2].x;
  v_64.w = _World2Object[3].x;
  highp vec4 v_65;
  v_65.x = _World2Object[0].y;
  v_65.y = _World2Object[1].y;
  v_65.z = _World2Object[2].y;
  v_65.w = _World2Object[3].y;
  highp vec4 v_66;
  v_66.x = _World2Object[0].z;
  v_66.y = _World2Object[1].z;
  v_66.z = _World2Object[2].z;
  v_66.w = _World2Object[3].z;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize(((
    (v_64.xyz * _glesNormal.x)
   + 
    (v_65.xyz * _glesNormal.y)
  ) + (v_66.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_67;
  highp mat3 tmpvar_68;
  tmpvar_68[0] = _Object2World[0].xyz;
  tmpvar_68[1] = _Object2World[1].xyz;
  tmpvar_68[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((tmpvar_68 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_69;
  lowp vec3 tmpvar_70;
  tmpvar_70 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_71;
  tmpvar_71 = (tmpvar_70 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72.x = worldTangent_3.x;
  tmpvar_72.y = worldBinormal_2.x;
  tmpvar_72.z = worldNormal_4.x;
  tmpvar_72.w = tmpvar_63.x;
  highp vec4 tmpvar_73;
  tmpvar_73.x = worldTangent_3.y;
  tmpvar_73.y = worldBinormal_2.y;
  tmpvar_73.z = worldNormal_4.y;
  tmpvar_73.w = tmpvar_63.y;
  highp vec4 tmpvar_74;
  tmpvar_74.x = worldTangent_3.z;
  tmpvar_74.y = worldBinormal_2.z;
  tmpvar_74.z = worldNormal_4.z;
  tmpvar_74.w = tmpvar_63.z;
  lowp vec4 tmpvar_75;
  tmpvar_75.w = 1.0;
  tmpvar_75.xyz = worldNormal_4;
  mediump vec3 tmpvar_76;
  mediump vec4 normal_77;
  normal_77 = tmpvar_75;
  mediump vec3 x2_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (normal_77.xyzz * normal_77.yzzx);
  x2_78.x = dot (unity_SHBr, tmpvar_79);
  x2_78.y = dot (unity_SHBg, tmpvar_79);
  x2_78.z = dot (unity_SHBb, tmpvar_79);
  tmpvar_76 = (x2_78 + (unity_SHC.xyz * (
    (normal_77.x * normal_77.x)
   - 
    (normal_77.y * normal_77.y)
  )));
  highp vec3 lightColor0_80;
  lightColor0_80 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_81;
  lightColor1_81 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_82;
  lightColor2_82 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_83;
  lightColor3_83 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_84;
  lightAttenSq_84 = unity_4LightAtten0;
  highp vec3 normal_85;
  normal_85 = worldNormal_4;
  highp vec4 tmpvar_86;
  tmpvar_86 = (unity_4LightPosX0 - tmpvar_63.x);
  highp vec4 tmpvar_87;
  tmpvar_87 = (unity_4LightPosY0 - tmpvar_63.y);
  highp vec4 tmpvar_88;
  tmpvar_88 = (unity_4LightPosZ0 - tmpvar_63.z);
  highp vec4 tmpvar_89;
  tmpvar_89 = (((tmpvar_86 * tmpvar_86) + (tmpvar_87 * tmpvar_87)) + (tmpvar_88 * tmpvar_88));
  highp vec4 tmpvar_90;
  tmpvar_90 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_86 * normal_85.x) + (tmpvar_87 * normal_85.y)) + (tmpvar_88 * normal_85.z))
   * 
    inversesqrt(tmpvar_89)
  )) * (1.0/((1.0 + 
    (tmpvar_89 * lightAttenSq_84)
  ))));
  highp vec3 tmpvar_91;
  tmpvar_91 = (tmpvar_76 + ((
    ((lightColor0_80 * tmpvar_90.x) + (lightColor1_81 * tmpvar_90.y))
   + 
    (lightColor2_82 * tmpvar_90.z)
  ) + (lightColor3_83 * tmpvar_90.w)));
  tmpvar_6 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = (unity_World2Shadow[0] * (_Object2World * tmpvar_18));
  tmpvar_7 = tmpvar_92;
  gl_Position = (glstate_matrix_mvp * tmpvar_18);
  xlv_TEXCOORD0 = tmpvar_72;
  xlv_TEXCOORD1 = tmpvar_73;
  xlv_TEXCOORD2 = tmpvar_74;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_11;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_TEXCOORD8;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 detailColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_DetailTex, xlv_TEXCOORD5.xy);
  detailColor_11 = tmpvar_20;
  diffuseColor_12.xyz = mix (diffuseColor_12.xyz, detailColor_11.xyz, detailColor_11.www);
  mediump vec3 tmpvar_21;
  tmpvar_21 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_21 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_21.x, max (tmpvar_21.y, tmpvar_21.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_22;
  tmpvar_22 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_24;
  lowp float tmpvar_25;
  tmpvar_25 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD8.xyz);
  mediump float tmpvar_26;
  tmpvar_26 = (_LightShadowData.x + (tmpvar_25 * (1.0 - _LightShadowData.x)));
  shadow_24 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD0.xyz, tmpvar_23);
  worldN_4.x = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD1.xyz, tmpvar_23);
  worldN_4.y = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD2.xyz, tmpvar_23);
  worldN_4.z = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_30;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_24;
  mediump vec3 normalWorld_31;
  normalWorld_31 = worldN_4;
  mediump vec3 tmpvar_32;
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = normalWorld_31;
  mediump vec3 x1_34;
  x1_34.x = dot (unity_SHAr, tmpvar_33);
  x1_34.y = dot (unity_SHAg, tmpvar_33);
  x1_34.z = dot (unity_SHAb, tmpvar_33);
  tmpvar_32 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_32;
  lowp vec4 c_35;
  lowp vec4 c_36;
  lowp float diff_37;
  mediump float tmpvar_38;
  tmpvar_38 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_37 = tmpvar_38;
  mediump vec3 tmpvar_39;
  tmpvar_39 = ((tmpvar_9 * tmpvar_32) * diff_37);
  c_36.xyz = tmpvar_39;
  c_36.w = tmpvar_10;
  c_35.w = c_36.w;
  mediump vec3 tmpvar_40;
  tmpvar_40 = (c_36.xyz + (tmpvar_9 * (xlv_TEXCOORD7 + x1_34)));
  c_35.xyz = tmpvar_40;
  c_5.xyz = c_35.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
in vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
out mediump vec3 xlv_TEXCOORD7;
out mediump vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  mediump vec3 tmpvar_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_12;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_13;
  tmpvar_13 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_13;
  highp float cse_14;
  cse_14 = _Object2World[3].x;
  highp float cse_15;
  cse_15 = _Object2World[3].y;
  highp float tmpvar_16;
  tmpvar_16 = clamp (((
    fract(((cse_14 + cse_15) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_16;
  highp vec2 tmpvar_17;
  tmpvar_17 = _glesMultiTexCoord2.xy;
  tmpvar_10.xy = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_19;
  highp vec3 vRotatedWindVector_20;
  highp vec3 FinalPosition_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = tmpvar_1.xyz;
  FinalPosition_21 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = (_WindQuality * _WindEnabled);
  if ((tmpvar_23 > 0.0)) {
    highp mat3 tmpvar_24;
    tmpvar_24[0] = _World2Object[0].xyz;
    tmpvar_24[1] = _World2Object[1].xyz;
    tmpvar_24[2] = _World2Object[2].xyz;
    vRotatedWindVector_20 = normalize((tmpvar_24 * _ST_WindVector.xyz));
    highp mat3 tmpvar_25;
    tmpvar_25[0] = _World2Object[0].xyz;
    tmpvar_25[1] = _World2Object[1].xyz;
    tmpvar_25[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_19 = (normalize((tmpvar_25 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_20 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_19 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_23 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    if ((tmpvar_23 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = tmpvar_22;
      highp float fAdherenceScale_28;
      highp vec3 tmpvar_29;
      tmpvar_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_30;
      tmpvar_30 = (_ST_WindBranch.x + (cse_14 + cse_15));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (tmpvar_30 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((tmpvar_30 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_30 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((tmpvar_30 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        (mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_31.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (_glesVertex.xyz + ((tmpvar_29 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((tmpvar_30 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((
        ((tmpvar_39.x * tmpvar_39.y) * tmpvar_39.x)
       * tmpvar_39.y) * _ST_WindTurbulences.x));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_19 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp vec3 tmpvar_42;
      tmpvar_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_43;
      tmpvar_43 = (_ST_WindBranch.x + (cse_14 + cse_15));
      highp vec4 vOscillations_44;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (tmpvar_43 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((tmpvar_43 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_43 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      vPos_41 = (vPos_26 + ((tmpvar_42 * 
        (((mix (
          mix (tmpvar_49, fTarget_46, fAmount_45)
        , fTarget_46, fAmount_45) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_21 = vPos_26;
  };
  if ((tmpvar_23 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_21;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_21, FinalPosition_21));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_21.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (cse_14 + _ST_WindGlobal.x);
    tmpvar_54.y = (cse_15 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    vPos_50.xz = (FinalPosition_21.xz + (vRotatedWindVector_20.xz * (
      ((_ST_WindGlobal.y * (tmpvar_55.x + (tmpvar_55.y * tmpvar_55.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_51)));
    vPos_50 = (normalize(vPos_50) * fLength_52);
    FinalPosition_21 = vPos_50;
  };
  tmpvar_18.xyz = FinalPosition_21;
  highp vec4 tmpvar_57;
  tmpvar_57 = (glstate_matrix_mvp * tmpvar_18);
  highp vec4 o_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (tmpvar_57 * 0.5);
  highp vec2 tmpvar_60;
  tmpvar_60.x = tmpvar_59.x;
  tmpvar_60.y = (tmpvar_59.y * _ProjectionParams.x);
  o_58.xy = (tmpvar_60 + tmpvar_59.w);
  o_58.zw = tmpvar_57.zw;
  highp vec3 tmpvar_61;
  tmpvar_61 = o_58.xyw;
  tmpvar_11 = tmpvar_61;
  highp vec2 tmpvar_62;
  tmpvar_62 = (tmpvar_11.xy * (_ScreenParams.xy * 0.25));
  tmpvar_11.xy = tmpvar_62;
  tmpvar_5 = tmpvar_8;
  highp vec3 tmpvar_63;
  tmpvar_63 = (_Object2World * tmpvar_18).xyz;
  highp vec4 v_64;
  v_64.x = _World2Object[0].x;
  v_64.y = _World2Object[1].x;
  v_64.z = _World2Object[2].x;
  v_64.w = _World2Object[3].x;
  highp vec4 v_65;
  v_65.x = _World2Object[0].y;
  v_65.y = _World2Object[1].y;
  v_65.z = _World2Object[2].y;
  v_65.w = _World2Object[3].y;
  highp vec4 v_66;
  v_66.x = _World2Object[0].z;
  v_66.y = _World2Object[1].z;
  v_66.z = _World2Object[2].z;
  v_66.w = _World2Object[3].z;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize(((
    (v_64.xyz * _glesNormal.x)
   + 
    (v_65.xyz * _glesNormal.y)
  ) + (v_66.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_67;
  highp mat3 tmpvar_68;
  tmpvar_68[0] = _Object2World[0].xyz;
  tmpvar_68[1] = _Object2World[1].xyz;
  tmpvar_68[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((tmpvar_68 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_69;
  lowp vec3 tmpvar_70;
  tmpvar_70 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_71;
  tmpvar_71 = (tmpvar_70 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72.x = worldTangent_3.x;
  tmpvar_72.y = worldBinormal_2.x;
  tmpvar_72.z = worldNormal_4.x;
  tmpvar_72.w = tmpvar_63.x;
  highp vec4 tmpvar_73;
  tmpvar_73.x = worldTangent_3.y;
  tmpvar_73.y = worldBinormal_2.y;
  tmpvar_73.z = worldNormal_4.y;
  tmpvar_73.w = tmpvar_63.y;
  highp vec4 tmpvar_74;
  tmpvar_74.x = worldTangent_3.z;
  tmpvar_74.y = worldBinormal_2.z;
  tmpvar_74.z = worldNormal_4.z;
  tmpvar_74.w = tmpvar_63.z;
  lowp vec4 tmpvar_75;
  tmpvar_75.w = 1.0;
  tmpvar_75.xyz = worldNormal_4;
  mediump vec3 tmpvar_76;
  mediump vec4 normal_77;
  normal_77 = tmpvar_75;
  mediump vec3 x2_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (normal_77.xyzz * normal_77.yzzx);
  x2_78.x = dot (unity_SHBr, tmpvar_79);
  x2_78.y = dot (unity_SHBg, tmpvar_79);
  x2_78.z = dot (unity_SHBb, tmpvar_79);
  tmpvar_76 = (x2_78 + (unity_SHC.xyz * (
    (normal_77.x * normal_77.x)
   - 
    (normal_77.y * normal_77.y)
  )));
  highp vec3 lightColor0_80;
  lightColor0_80 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_81;
  lightColor1_81 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_82;
  lightColor2_82 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_83;
  lightColor3_83 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_84;
  lightAttenSq_84 = unity_4LightAtten0;
  highp vec3 normal_85;
  normal_85 = worldNormal_4;
  highp vec4 tmpvar_86;
  tmpvar_86 = (unity_4LightPosX0 - tmpvar_63.x);
  highp vec4 tmpvar_87;
  tmpvar_87 = (unity_4LightPosY0 - tmpvar_63.y);
  highp vec4 tmpvar_88;
  tmpvar_88 = (unity_4LightPosZ0 - tmpvar_63.z);
  highp vec4 tmpvar_89;
  tmpvar_89 = (((tmpvar_86 * tmpvar_86) + (tmpvar_87 * tmpvar_87)) + (tmpvar_88 * tmpvar_88));
  highp vec4 tmpvar_90;
  tmpvar_90 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_86 * normal_85.x) + (tmpvar_87 * normal_85.y)) + (tmpvar_88 * normal_85.z))
   * 
    inversesqrt(tmpvar_89)
  )) * (1.0/((1.0 + 
    (tmpvar_89 * lightAttenSq_84)
  ))));
  highp vec3 tmpvar_91;
  tmpvar_91 = (tmpvar_76 + ((
    ((lightColor0_80 * tmpvar_90.x) + (lightColor1_81 * tmpvar_90.y))
   + 
    (lightColor2_82 * tmpvar_90.z)
  ) + (lightColor3_83 * tmpvar_90.w)));
  tmpvar_6 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = (unity_World2Shadow[0] * (_Object2World * tmpvar_18));
  tmpvar_7 = tmpvar_92;
  gl_Position = (glstate_matrix_mvp * tmpvar_18);
  xlv_TEXCOORD0 = tmpvar_72;
  xlv_TEXCOORD1 = tmpvar_73;
  xlv_TEXCOORD2 = tmpvar_74;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_11;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
in mediump vec3 xlv_TEXCOORD7;
in mediump vec4 xlv_TEXCOORD8;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 detailColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture (_DetailTex, xlv_TEXCOORD5.xy);
  detailColor_11 = tmpvar_20;
  diffuseColor_12.xyz = mix (diffuseColor_12.xyz, detailColor_11.xyz, detailColor_11.www);
  mediump vec3 tmpvar_21;
  tmpvar_21 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_21 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_21.x, max (tmpvar_21.y, tmpvar_21.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_22;
  tmpvar_22 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_24;
  mediump float tmpvar_25;
  tmpvar_25 = texture (_ShadowMapTexture, xlv_TEXCOORD8.xyz);
  lowp float tmpvar_26;
  tmpvar_26 = tmpvar_25;
  mediump float tmpvar_27;
  tmpvar_27 = (_LightShadowData.x + (tmpvar_26 * (1.0 - _LightShadowData.x)));
  shadow_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD0.xyz, tmpvar_23);
  worldN_4.x = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD1.xyz, tmpvar_23);
  worldN_4.y = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD2.xyz, tmpvar_23);
  worldN_4.z = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_31;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_24;
  mediump vec3 normalWorld_32;
  normalWorld_32 = worldN_4;
  mediump vec3 tmpvar_33;
  mediump vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = normalWorld_32;
  mediump vec3 x1_35;
  x1_35.x = dot (unity_SHAr, tmpvar_34);
  x1_35.y = dot (unity_SHAg, tmpvar_34);
  x1_35.z = dot (unity_SHAb, tmpvar_34);
  tmpvar_33 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_33;
  lowp vec4 c_36;
  lowp vec4 c_37;
  lowp float diff_38;
  mediump float tmpvar_39;
  tmpvar_39 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_38 = tmpvar_39;
  mediump vec3 tmpvar_40;
  tmpvar_40 = ((tmpvar_9 * tmpvar_33) * diff_38);
  c_37.xyz = tmpvar_40;
  c_37.w = tmpvar_10;
  c_36.w = c_37.w;
  mediump vec3 tmpvar_41;
  tmpvar_41 = (c_37.xyz + (tmpvar_9 * (xlv_TEXCOORD7 + x1_35)));
  c_36.xyz = tmpvar_41;
  c_5.xyz = c_36.xyz;
  c_5.w = 1.0;
  _glesFragData[0] = c_5;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_9;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11.xy = _glesMultiTexCoord2.zw;
  tmpvar_11.z = _glesMultiTexCoord1.w;
  tmpvar_7 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_16;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_16;
      highp float fAdherenceScale_23;
      highp vec3 tmpvar_24;
      tmpvar_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_25;
      tmpvar_25 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (tmpvar_25 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((tmpvar_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_25 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((tmpvar_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        (mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_26.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (_glesVertex.xyz + ((tmpvar_24 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((tmpvar_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((
        ((tmpvar_34.x * tmpvar_34.y) * tmpvar_34.x)
       * tmpvar_34.y) * _ST_WindTurbulences.x));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_13 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp vec3 tmpvar_37;
      tmpvar_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_38;
      tmpvar_38 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_39;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (tmpvar_38 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((tmpvar_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      vPos_36 = (vPos_21 + ((tmpvar_37 * 
        (((mix (
          mix (tmpvar_44, fTarget_41, fAmount_40)
        , fTarget_41, fAmount_40) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_15 = vPos_21;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_50.x + (tmpvar_50.y * tmpvar_50.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_46)));
    vPos_45 = (normalize(vPos_45) * fLength_47);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  highp vec4 tmpvar_52;
  tmpvar_52 = (glstate_matrix_mvp * tmpvar_12);
  highp vec4 o_53;
  highp vec4 tmpvar_54;
  tmpvar_54 = (tmpvar_52 * 0.5);
  highp vec2 tmpvar_55;
  tmpvar_55.x = tmpvar_54.x;
  tmpvar_55.y = (tmpvar_54.y * _ProjectionParams.x);
  o_53.xy = (tmpvar_55 + tmpvar_54.w);
  o_53.zw = tmpvar_52.zw;
  highp vec3 tmpvar_56;
  tmpvar_56 = o_53.xyw;
  tmpvar_8 = tmpvar_56;
  highp vec2 tmpvar_57;
  tmpvar_57 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_57;
  tmpvar_4 = tmpvar_5;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * _glesNormal.x)
   + 
    (v_59.xyz * _glesNormal.y)
  ) + (v_60.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_61;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_62;
  tmpvar_62.w = 1.0;
  tmpvar_62.xyz = worldNormal_2;
  mediump vec4 normal_63;
  normal_63 = tmpvar_62;
  mediump vec3 x2_64;
  mediump vec4 tmpvar_65;
  tmpvar_65 = (normal_63.xyzz * normal_63.yzzx);
  x2_64.x = dot (unity_SHBr, tmpvar_65);
  x2_64.y = dot (unity_SHBg, tmpvar_65);
  x2_64.z = dot (unity_SHBb, tmpvar_65);
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = (x2_64 + (unity_SHC.xyz * (
    (normal_63.x * normal_63.x)
   - 
    (normal_63.y * normal_63.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 blendColor_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_10 = tmpvar_19;
  diffuseColor_11.xyz = mix (blendColor_10.xyz, diffuseColor_11.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_21;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_22;
  normalWorld_22 = tmpvar_4;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_22;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_27 = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_8 * tmpvar_1) * diff_27);
  c_26.xyz = tmpvar_29;
  c_26.w = tmpvar_9;
  c_25.w = c_26.w;
  mediump vec3 tmpvar_30;
  tmpvar_30 = (c_26.xyz + (tmpvar_8 * (xlv_TEXCOORD6 + x1_24)));
  c_25.xyz = tmpvar_30;
  c_3.xyz = c_25.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_9;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11.xy = _glesMultiTexCoord2.zw;
  tmpvar_11.z = _glesMultiTexCoord1.w;
  tmpvar_7 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_16;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_16;
      highp float fAdherenceScale_23;
      highp vec3 tmpvar_24;
      tmpvar_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_25;
      tmpvar_25 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (tmpvar_25 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((tmpvar_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_25 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((tmpvar_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        (mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_26.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (_glesVertex.xyz + ((tmpvar_24 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((tmpvar_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((
        ((tmpvar_34.x * tmpvar_34.y) * tmpvar_34.x)
       * tmpvar_34.y) * _ST_WindTurbulences.x));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_13 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp vec3 tmpvar_37;
      tmpvar_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_38;
      tmpvar_38 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_39;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (tmpvar_38 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((tmpvar_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      vPos_36 = (vPos_21 + ((tmpvar_37 * 
        (((mix (
          mix (tmpvar_44, fTarget_41, fAmount_40)
        , fTarget_41, fAmount_40) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_15 = vPos_21;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_50.x + (tmpvar_50.y * tmpvar_50.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_46)));
    vPos_45 = (normalize(vPos_45) * fLength_47);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  highp vec4 tmpvar_52;
  tmpvar_52 = (glstate_matrix_mvp * tmpvar_12);
  highp vec4 o_53;
  highp vec4 tmpvar_54;
  tmpvar_54 = (tmpvar_52 * 0.5);
  highp vec2 tmpvar_55;
  tmpvar_55.x = tmpvar_54.x;
  tmpvar_55.y = (tmpvar_54.y * _ProjectionParams.x);
  o_53.xy = (tmpvar_55 + tmpvar_54.w);
  o_53.zw = tmpvar_52.zw;
  highp vec3 tmpvar_56;
  tmpvar_56 = o_53.xyw;
  tmpvar_8 = tmpvar_56;
  highp vec2 tmpvar_57;
  tmpvar_57 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_57;
  tmpvar_4 = tmpvar_5;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * _glesNormal.x)
   + 
    (v_59.xyz * _glesNormal.y)
  ) + (v_60.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_61;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_62;
  tmpvar_62.w = 1.0;
  tmpvar_62.xyz = worldNormal_2;
  mediump vec4 normal_63;
  normal_63 = tmpvar_62;
  mediump vec3 x2_64;
  mediump vec4 tmpvar_65;
  tmpvar_65 = (normal_63.xyzz * normal_63.yzzx);
  x2_64.x = dot (unity_SHBr, tmpvar_65);
  x2_64.y = dot (unity_SHBg, tmpvar_65);
  x2_64.z = dot (unity_SHBb, tmpvar_65);
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = (x2_64 + (unity_SHC.xyz * (
    (normal_63.x * normal_63.x)
   - 
    (normal_63.y * normal_63.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 blendColor_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_10 = tmpvar_19;
  diffuseColor_11.xyz = mix (blendColor_10.xyz, diffuseColor_11.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_21;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_22;
  normalWorld_22 = tmpvar_4;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_22;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_27 = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_8 * tmpvar_1) * diff_27);
  c_26.xyz = tmpvar_29;
  c_26.w = tmpvar_9;
  c_25.w = c_26.w;
  mediump vec3 tmpvar_30;
  tmpvar_30 = (c_26.xyz + (tmpvar_8 * (xlv_TEXCOORD6 + x1_24)));
  c_25.xyz = tmpvar_30;
  c_3.xyz = c_25.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_10;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12.xy = _glesMultiTexCoord2.zw;
  tmpvar_12.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_17;
      highp float fAdherenceScale_24;
      highp vec3 tmpvar_25;
      tmpvar_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_26;
      tmpvar_26 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (tmpvar_26 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((tmpvar_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_26 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((tmpvar_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        (mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_27.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((tmpvar_25 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((tmpvar_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((
        ((tmpvar_35.x * tmpvar_35.y) * tmpvar_35.x)
       * tmpvar_35.y) * _ST_WindTurbulences.x));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_14 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp vec3 tmpvar_38;
      tmpvar_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_39;
      tmpvar_39 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_40;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (tmpvar_39 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((tmpvar_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      vPos_37 = (vPos_22 + ((tmpvar_38 * 
        (((mix (
          mix (tmpvar_45, fTarget_42, fAmount_41)
        , fTarget_42, fAmount_41) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_16 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_51.x + (tmpvar_51.y * tmpvar_51.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_47)));
    vPos_46 = (normalize(vPos_46) * fLength_48);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  highp vec4 tmpvar_53;
  tmpvar_53 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (tmpvar_53 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = tmpvar_53.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  tmpvar_9 = tmpvar_57;
  highp vec2 tmpvar_58;
  tmpvar_58 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_58;
  tmpvar_4 = tmpvar_6;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * _glesNormal.x)
   + 
    (v_60.xyz * _glesNormal.y)
  ) + (v_61.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_62;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_2;
  mediump vec4 normal_64;
  normal_64 = tmpvar_63;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  highp vec4 tmpvar_67;
  tmpvar_67 = (unity_World2Shadow[0] * (_Object2World * tmpvar_13));
  tmpvar_5 = tmpvar_67;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = (x2_65 + (unity_SHC.xyz * (
    (normal_64.x * normal_64.x)
   - 
    (normal_64.y * normal_64.y)
  )));
  xlv_TEXCOORD7 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_20;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  lowp float tmpvar_22;
  mediump float dist_23;
  lowp float tmpvar_24;
  tmpvar_24 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x;
  dist_23 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (float((dist_23 > 
    (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w)
  )), _LightShadowData.x);
  tmpvar_22 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_26;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_22;
  mediump vec3 normalWorld_27;
  normalWorld_27 = tmpvar_5;
  mediump vec3 tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = normalWorld_27;
  mediump vec3 x1_30;
  x1_30.x = dot (unity_SHAr, tmpvar_29);
  x1_30.y = dot (unity_SHAg, tmpvar_29);
  x1_30.z = dot (unity_SHAb, tmpvar_29);
  tmpvar_28 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_28;
  lowp vec4 c_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_33 = tmpvar_34;
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tmpvar_9 * tmpvar_28) * diff_33);
  c_32.xyz = tmpvar_35;
  c_32.w = tmpvar_10;
  c_31.w = c_32.w;
  mediump vec3 tmpvar_36;
  tmpvar_36 = (c_32.xyz + (tmpvar_9 * (xlv_TEXCOORD6 + x1_30)));
  c_31.xyz = tmpvar_36;
  c_4.xyz = c_31.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_10;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12.xy = _glesMultiTexCoord2.zw;
  tmpvar_12.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_17;
      highp float fAdherenceScale_24;
      highp vec3 tmpvar_25;
      tmpvar_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_26;
      tmpvar_26 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (tmpvar_26 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((tmpvar_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_26 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((tmpvar_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        (mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_27.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((tmpvar_25 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((tmpvar_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((
        ((tmpvar_35.x * tmpvar_35.y) * tmpvar_35.x)
       * tmpvar_35.y) * _ST_WindTurbulences.x));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_14 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp vec3 tmpvar_38;
      tmpvar_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_39;
      tmpvar_39 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_40;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (tmpvar_39 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((tmpvar_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      vPos_37 = (vPos_22 + ((tmpvar_38 * 
        (((mix (
          mix (tmpvar_45, fTarget_42, fAmount_41)
        , fTarget_42, fAmount_41) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_16 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_51.x + (tmpvar_51.y * tmpvar_51.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_47)));
    vPos_46 = (normalize(vPos_46) * fLength_48);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  highp vec4 tmpvar_53;
  tmpvar_53 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (tmpvar_53 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = tmpvar_53.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  tmpvar_9 = tmpvar_57;
  highp vec2 tmpvar_58;
  tmpvar_58 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_58;
  tmpvar_4 = tmpvar_6;
  highp vec3 tmpvar_59;
  tmpvar_59 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_60;
  v_60.x = _World2Object[0].x;
  v_60.y = _World2Object[1].x;
  v_60.z = _World2Object[2].x;
  v_60.w = _World2Object[3].x;
  highp vec4 v_61;
  v_61.x = _World2Object[0].y;
  v_61.y = _World2Object[1].y;
  v_61.z = _World2Object[2].y;
  v_61.w = _World2Object[3].y;
  highp vec4 v_62;
  v_62.x = _World2Object[0].z;
  v_62.y = _World2Object[1].z;
  v_62.z = _World2Object[2].z;
  v_62.w = _World2Object[3].z;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize(((
    (v_60.xyz * _glesNormal.x)
   + 
    (v_61.xyz * _glesNormal.y)
  ) + (v_62.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_63;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_64;
  tmpvar_64.w = 1.0;
  tmpvar_64.xyz = worldNormal_2;
  mediump vec3 tmpvar_65;
  mediump vec4 normal_66;
  normal_66 = tmpvar_64;
  mediump vec3 x2_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = (normal_66.xyzz * normal_66.yzzx);
  x2_67.x = dot (unity_SHBr, tmpvar_68);
  x2_67.y = dot (unity_SHBg, tmpvar_68);
  x2_67.z = dot (unity_SHBb, tmpvar_68);
  tmpvar_65 = (x2_67 + (unity_SHC.xyz * (
    (normal_66.x * normal_66.x)
   - 
    (normal_66.y * normal_66.y)
  )));
  highp vec3 lightColor0_69;
  lightColor0_69 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_70;
  lightColor1_70 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_71;
  lightColor2_71 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_72;
  lightColor3_72 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_73;
  lightAttenSq_73 = unity_4LightAtten0;
  highp vec3 normal_74;
  normal_74 = worldNormal_2;
  highp vec4 tmpvar_75;
  tmpvar_75 = (unity_4LightPosX0 - tmpvar_59.x);
  highp vec4 tmpvar_76;
  tmpvar_76 = (unity_4LightPosY0 - tmpvar_59.y);
  highp vec4 tmpvar_77;
  tmpvar_77 = (unity_4LightPosZ0 - tmpvar_59.z);
  highp vec4 tmpvar_78;
  tmpvar_78 = (((tmpvar_75 * tmpvar_75) + (tmpvar_76 * tmpvar_76)) + (tmpvar_77 * tmpvar_77));
  highp vec4 tmpvar_79;
  tmpvar_79 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_75 * normal_74.x) + (tmpvar_76 * normal_74.y)) + (tmpvar_77 * normal_74.z))
   * 
    inversesqrt(tmpvar_78)
  )) * (1.0/((1.0 + 
    (tmpvar_78 * lightAttenSq_73)
  ))));
  highp vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_65 + ((
    ((lightColor0_69 * tmpvar_79.x) + (lightColor1_70 * tmpvar_79.y))
   + 
    (lightColor2_71 * tmpvar_79.z)
  ) + (lightColor3_72 * tmpvar_79.w)));
  tmpvar_5 = tmpvar_80;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_59;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 blendColor_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_10 = tmpvar_19;
  diffuseColor_11.xyz = mix (blendColor_10.xyz, diffuseColor_11.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_21;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_22;
  normalWorld_22 = tmpvar_4;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_22;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_27 = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_8 * tmpvar_1) * diff_27);
  c_26.xyz = tmpvar_29;
  c_26.w = tmpvar_9;
  c_25.w = c_26.w;
  mediump vec3 tmpvar_30;
  tmpvar_30 = (c_26.xyz + (tmpvar_8 * (xlv_TEXCOORD6 + x1_24)));
  c_25.xyz = tmpvar_30;
  c_3.xyz = c_25.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_10;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12.xy = _glesMultiTexCoord2.zw;
  tmpvar_12.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_17;
      highp float fAdherenceScale_24;
      highp vec3 tmpvar_25;
      tmpvar_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_26;
      tmpvar_26 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (tmpvar_26 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((tmpvar_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_26 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((tmpvar_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        (mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_27.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((tmpvar_25 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((tmpvar_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((
        ((tmpvar_35.x * tmpvar_35.y) * tmpvar_35.x)
       * tmpvar_35.y) * _ST_WindTurbulences.x));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_14 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp vec3 tmpvar_38;
      tmpvar_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_39;
      tmpvar_39 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_40;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (tmpvar_39 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((tmpvar_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      vPos_37 = (vPos_22 + ((tmpvar_38 * 
        (((mix (
          mix (tmpvar_45, fTarget_42, fAmount_41)
        , fTarget_42, fAmount_41) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_16 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_51.x + (tmpvar_51.y * tmpvar_51.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_47)));
    vPos_46 = (normalize(vPos_46) * fLength_48);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  highp vec4 tmpvar_53;
  tmpvar_53 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (tmpvar_53 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = tmpvar_53.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  tmpvar_9 = tmpvar_57;
  highp vec2 tmpvar_58;
  tmpvar_58 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_58;
  tmpvar_4 = tmpvar_6;
  highp vec3 tmpvar_59;
  tmpvar_59 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_60;
  v_60.x = _World2Object[0].x;
  v_60.y = _World2Object[1].x;
  v_60.z = _World2Object[2].x;
  v_60.w = _World2Object[3].x;
  highp vec4 v_61;
  v_61.x = _World2Object[0].y;
  v_61.y = _World2Object[1].y;
  v_61.z = _World2Object[2].y;
  v_61.w = _World2Object[3].y;
  highp vec4 v_62;
  v_62.x = _World2Object[0].z;
  v_62.y = _World2Object[1].z;
  v_62.z = _World2Object[2].z;
  v_62.w = _World2Object[3].z;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize(((
    (v_60.xyz * _glesNormal.x)
   + 
    (v_61.xyz * _glesNormal.y)
  ) + (v_62.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_63;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_64;
  tmpvar_64.w = 1.0;
  tmpvar_64.xyz = worldNormal_2;
  mediump vec3 tmpvar_65;
  mediump vec4 normal_66;
  normal_66 = tmpvar_64;
  mediump vec3 x2_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = (normal_66.xyzz * normal_66.yzzx);
  x2_67.x = dot (unity_SHBr, tmpvar_68);
  x2_67.y = dot (unity_SHBg, tmpvar_68);
  x2_67.z = dot (unity_SHBb, tmpvar_68);
  tmpvar_65 = (x2_67 + (unity_SHC.xyz * (
    (normal_66.x * normal_66.x)
   - 
    (normal_66.y * normal_66.y)
  )));
  highp vec3 lightColor0_69;
  lightColor0_69 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_70;
  lightColor1_70 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_71;
  lightColor2_71 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_72;
  lightColor3_72 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_73;
  lightAttenSq_73 = unity_4LightAtten0;
  highp vec3 normal_74;
  normal_74 = worldNormal_2;
  highp vec4 tmpvar_75;
  tmpvar_75 = (unity_4LightPosX0 - tmpvar_59.x);
  highp vec4 tmpvar_76;
  tmpvar_76 = (unity_4LightPosY0 - tmpvar_59.y);
  highp vec4 tmpvar_77;
  tmpvar_77 = (unity_4LightPosZ0 - tmpvar_59.z);
  highp vec4 tmpvar_78;
  tmpvar_78 = (((tmpvar_75 * tmpvar_75) + (tmpvar_76 * tmpvar_76)) + (tmpvar_77 * tmpvar_77));
  highp vec4 tmpvar_79;
  tmpvar_79 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_75 * normal_74.x) + (tmpvar_76 * normal_74.y)) + (tmpvar_77 * normal_74.z))
   * 
    inversesqrt(tmpvar_78)
  )) * (1.0/((1.0 + 
    (tmpvar_78 * lightAttenSq_73)
  ))));
  highp vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_65 + ((
    ((lightColor0_69 * tmpvar_79.x) + (lightColor1_70 * tmpvar_79.y))
   + 
    (lightColor2_71 * tmpvar_79.z)
  ) + (lightColor3_72 * tmpvar_79.w)));
  tmpvar_5 = tmpvar_80;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_59;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_5;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 blendColor_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_10 = tmpvar_19;
  diffuseColor_11.xyz = mix (blendColor_10.xyz, diffuseColor_11.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_21;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_22;
  normalWorld_22 = tmpvar_4;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_22;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_27 = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_8 * tmpvar_1) * diff_27);
  c_26.xyz = tmpvar_29;
  c_26.w = tmpvar_9;
  c_25.w = c_26.w;
  mediump vec3 tmpvar_30;
  tmpvar_30 = (c_26.xyz + (tmpvar_8 * (xlv_TEXCOORD6 + x1_24)));
  c_25.xyz = tmpvar_30;
  c_3.xyz = c_25.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_11;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19.x = _Object2World[3].x;
  tmpvar_19.y = _Object2World[3].y;
  tmpvar_19.z = _Object2World[3].z;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_18;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_18;
      highp float fAdherenceScale_25;
      highp vec3 tmpvar_26;
      tmpvar_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_27;
      tmpvar_27 = (_ST_WindBranch.x + (tmpvar_19.x + tmpvar_19.y));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (tmpvar_27 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_27 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((tmpvar_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        (mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_28.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (_glesVertex.xyz + ((tmpvar_26 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((tmpvar_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((
        ((tmpvar_36.x * tmpvar_36.y) * tmpvar_36.x)
       * tmpvar_36.y) * _ST_WindTurbulences.x));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_15 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp vec3 tmpvar_39;
      tmpvar_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_40;
      tmpvar_40 = (_ST_WindBranch.x + (tmpvar_19.x + tmpvar_19.y));
      highp vec4 vOscillations_41;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (tmpvar_40 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((tmpvar_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      vPos_38 = (vPos_23 + ((tmpvar_39 * 
        (((mix (
          mix (tmpvar_46, fTarget_43, fAmount_42)
        , fTarget_43, fAmount_42) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_17 = vPos_23;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_19.x + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_19.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * (
      ((_ST_WindGlobal.y * (tmpvar_52.x + (tmpvar_52.y * tmpvar_52.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_48)));
    vPos_47 = (normalize(vPos_47) * fLength_49);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  highp vec4 tmpvar_54;
  tmpvar_54 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (tmpvar_54 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = tmpvar_54.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  tmpvar_10 = tmpvar_58;
  highp vec2 tmpvar_59;
  tmpvar_59 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_59;
  tmpvar_4 = tmpvar_7;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_64;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = worldNormal_2;
  mediump vec3 tmpvar_66;
  mediump vec4 normal_67;
  normal_67 = tmpvar_65;
  mediump vec3 x2_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = (normal_67.xyzz * normal_67.yzzx);
  x2_68.x = dot (unity_SHBr, tmpvar_69);
  x2_68.y = dot (unity_SHBg, tmpvar_69);
  x2_68.z = dot (unity_SHBb, tmpvar_69);
  tmpvar_66 = (x2_68 + (unity_SHC.xyz * (
    (normal_67.x * normal_67.x)
   - 
    (normal_67.y * normal_67.y)
  )));
  highp vec3 lightColor0_70;
  lightColor0_70 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_71;
  lightColor1_71 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_72;
  lightColor2_72 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_73;
  lightColor3_73 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_74;
  lightAttenSq_74 = unity_4LightAtten0;
  highp vec3 normal_75;
  normal_75 = worldNormal_2;
  highp vec4 tmpvar_76;
  tmpvar_76 = (unity_4LightPosX0 - tmpvar_60.x);
  highp vec4 tmpvar_77;
  tmpvar_77 = (unity_4LightPosY0 - tmpvar_60.y);
  highp vec4 tmpvar_78;
  tmpvar_78 = (unity_4LightPosZ0 - tmpvar_60.z);
  highp vec4 tmpvar_79;
  tmpvar_79 = (((tmpvar_76 * tmpvar_76) + (tmpvar_77 * tmpvar_77)) + (tmpvar_78 * tmpvar_78));
  highp vec4 tmpvar_80;
  tmpvar_80 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_76 * normal_75.x) + (tmpvar_77 * normal_75.y)) + (tmpvar_78 * normal_75.z))
   * 
    inversesqrt(tmpvar_79)
  )) * (1.0/((1.0 + 
    (tmpvar_79 * lightAttenSq_74)
  ))));
  highp vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_66 + ((
    ((lightColor0_70 * tmpvar_80.x) + (lightColor1_71 * tmpvar_80.y))
   + 
    (lightColor2_72 * tmpvar_80.z)
  ) + (lightColor3_73 * tmpvar_80.w)));
  tmpvar_5 = tmpvar_81;
  highp vec4 tmpvar_82;
  tmpvar_82 = (unity_World2Shadow[0] * (_Object2World * tmpvar_14));
  tmpvar_6 = tmpvar_82;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_60;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_20;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  lowp float tmpvar_22;
  mediump float dist_23;
  lowp float tmpvar_24;
  tmpvar_24 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x;
  dist_23 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (float((dist_23 > 
    (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w)
  )), _LightShadowData.x);
  tmpvar_22 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_26;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_22;
  mediump vec3 normalWorld_27;
  normalWorld_27 = tmpvar_5;
  mediump vec3 tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = normalWorld_27;
  mediump vec3 x1_30;
  x1_30.x = dot (unity_SHAr, tmpvar_29);
  x1_30.y = dot (unity_SHAg, tmpvar_29);
  x1_30.z = dot (unity_SHAb, tmpvar_29);
  tmpvar_28 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_28;
  lowp vec4 c_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_33 = tmpvar_34;
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tmpvar_9 * tmpvar_28) * diff_33);
  c_32.xyz = tmpvar_35;
  c_32.w = tmpvar_10;
  c_31.w = c_32.w;
  mediump vec3 tmpvar_36;
  tmpvar_36 = (c_32.xyz + (tmpvar_9 * (xlv_TEXCOORD6 + x1_30)));
  c_31.xyz = tmpvar_36;
  c_4.xyz = c_31.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_10;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12.xy = _glesMultiTexCoord2.zw;
  tmpvar_12.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_17;
      highp float fAdherenceScale_24;
      highp vec3 tmpvar_25;
      tmpvar_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_26;
      tmpvar_26 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (tmpvar_26 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((tmpvar_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_26 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((tmpvar_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        (mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_27.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((tmpvar_25 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((tmpvar_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((
        ((tmpvar_35.x * tmpvar_35.y) * tmpvar_35.x)
       * tmpvar_35.y) * _ST_WindTurbulences.x));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_14 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp vec3 tmpvar_38;
      tmpvar_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_39;
      tmpvar_39 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_40;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (tmpvar_39 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((tmpvar_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      vPos_37 = (vPos_22 + ((tmpvar_38 * 
        (((mix (
          mix (tmpvar_45, fTarget_42, fAmount_41)
        , fTarget_42, fAmount_41) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_16 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_51.x + (tmpvar_51.y * tmpvar_51.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_47)));
    vPos_46 = (normalize(vPos_46) * fLength_48);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  highp vec4 tmpvar_53;
  tmpvar_53 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (tmpvar_53 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = tmpvar_53.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  tmpvar_9 = tmpvar_57;
  highp vec2 tmpvar_58;
  tmpvar_58 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_58;
  tmpvar_4 = tmpvar_6;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * _glesNormal.x)
   + 
    (v_60.xyz * _glesNormal.y)
  ) + (v_61.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_62;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_2;
  mediump vec4 normal_64;
  normal_64 = tmpvar_63;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  highp vec4 tmpvar_67;
  tmpvar_67 = (unity_World2Shadow[0] * (_Object2World * tmpvar_13));
  tmpvar_5 = tmpvar_67;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = (x2_65 + (unity_SHC.xyz * (
    (normal_64.x * normal_64.x)
   - 
    (normal_64.y * normal_64.y)
  )));
  xlv_TEXCOORD7 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_20;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  lowp float shadow_22;
  lowp float tmpvar_23;
  tmpvar_23 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD7.xyz);
  mediump float tmpvar_24;
  tmpvar_24 = (_LightShadowData.x + (tmpvar_23 * (1.0 - _LightShadowData.x)));
  shadow_22 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_25;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_22;
  mediump vec3 normalWorld_26;
  normalWorld_26 = tmpvar_5;
  mediump vec3 tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = normalWorld_26;
  mediump vec3 x1_29;
  x1_29.x = dot (unity_SHAr, tmpvar_28);
  x1_29.y = dot (unity_SHAg, tmpvar_28);
  x1_29.z = dot (unity_SHAb, tmpvar_28);
  tmpvar_27 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_27;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_32 = tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_9 * tmpvar_27) * diff_32);
  c_31.xyz = tmpvar_34;
  c_31.w = tmpvar_10;
  c_30.w = c_31.w;
  mediump vec3 tmpvar_35;
  tmpvar_35 = (c_31.xyz + (tmpvar_9 * (xlv_TEXCOORD6 + x1_29)));
  c_30.xyz = tmpvar_35;
  c_4.xyz = c_30.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
out mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_10;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12.xy = _glesMultiTexCoord2.zw;
  tmpvar_12.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_17;
      highp float fAdherenceScale_24;
      highp vec3 tmpvar_25;
      tmpvar_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_26;
      tmpvar_26 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (tmpvar_26 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((tmpvar_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_26 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((tmpvar_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        (mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_27.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((tmpvar_25 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((tmpvar_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((
        ((tmpvar_35.x * tmpvar_35.y) * tmpvar_35.x)
       * tmpvar_35.y) * _ST_WindTurbulences.x));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_14 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp vec3 tmpvar_38;
      tmpvar_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_39;
      tmpvar_39 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_40;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (tmpvar_39 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((tmpvar_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      vPos_37 = (vPos_22 + ((tmpvar_38 * 
        (((mix (
          mix (tmpvar_45, fTarget_42, fAmount_41)
        , fTarget_42, fAmount_41) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_16 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_51.x + (tmpvar_51.y * tmpvar_51.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_47)));
    vPos_46 = (normalize(vPos_46) * fLength_48);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  highp vec4 tmpvar_53;
  tmpvar_53 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (tmpvar_53 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = tmpvar_53.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  tmpvar_9 = tmpvar_57;
  highp vec2 tmpvar_58;
  tmpvar_58 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_58;
  tmpvar_4 = tmpvar_6;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * _glesNormal.x)
   + 
    (v_60.xyz * _glesNormal.y)
  ) + (v_61.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_62;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_2;
  mediump vec4 normal_64;
  normal_64 = tmpvar_63;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  highp vec4 tmpvar_67;
  tmpvar_67 = (unity_World2Shadow[0] * (_Object2World * tmpvar_13));
  tmpvar_5 = tmpvar_67;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = (x2_65 + (unity_SHC.xyz * (
    (normal_64.x * normal_64.x)
   - 
    (normal_64.y * normal_64.y)
  )));
  xlv_TEXCOORD7 = tmpvar_5;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
in mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_20;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  lowp float shadow_22;
  mediump float tmpvar_23;
  tmpvar_23 = texture (_ShadowMapTexture, xlv_TEXCOORD7.xyz);
  lowp float tmpvar_24;
  tmpvar_24 = tmpvar_23;
  mediump float tmpvar_25;
  tmpvar_25 = (_LightShadowData.x + (tmpvar_24 * (1.0 - _LightShadowData.x)));
  shadow_22 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_26;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_22;
  mediump vec3 normalWorld_27;
  normalWorld_27 = tmpvar_5;
  mediump vec3 tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = normalWorld_27;
  mediump vec3 x1_30;
  x1_30.x = dot (unity_SHAr, tmpvar_29);
  x1_30.y = dot (unity_SHAg, tmpvar_29);
  x1_30.z = dot (unity_SHAb, tmpvar_29);
  tmpvar_28 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_28;
  lowp vec4 c_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_33 = tmpvar_34;
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tmpvar_9 * tmpvar_28) * diff_33);
  c_32.xyz = tmpvar_35;
  c_32.w = tmpvar_10;
  c_31.w = c_32.w;
  mediump vec3 tmpvar_36;
  tmpvar_36 = (c_32.xyz + (tmpvar_9 * (xlv_TEXCOORD6 + x1_30)));
  c_31.xyz = tmpvar_36;
  c_4.xyz = c_31.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_11;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19.x = _Object2World[3].x;
  tmpvar_19.y = _Object2World[3].y;
  tmpvar_19.z = _Object2World[3].z;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_18;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_18;
      highp float fAdherenceScale_25;
      highp vec3 tmpvar_26;
      tmpvar_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_27;
      tmpvar_27 = (_ST_WindBranch.x + (tmpvar_19.x + tmpvar_19.y));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (tmpvar_27 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_27 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((tmpvar_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        (mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_28.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (_glesVertex.xyz + ((tmpvar_26 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((tmpvar_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((
        ((tmpvar_36.x * tmpvar_36.y) * tmpvar_36.x)
       * tmpvar_36.y) * _ST_WindTurbulences.x));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_15 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp vec3 tmpvar_39;
      tmpvar_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_40;
      tmpvar_40 = (_ST_WindBranch.x + (tmpvar_19.x + tmpvar_19.y));
      highp vec4 vOscillations_41;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (tmpvar_40 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((tmpvar_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      vPos_38 = (vPos_23 + ((tmpvar_39 * 
        (((mix (
          mix (tmpvar_46, fTarget_43, fAmount_42)
        , fTarget_43, fAmount_42) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_17 = vPos_23;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_19.x + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_19.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * (
      ((_ST_WindGlobal.y * (tmpvar_52.x + (tmpvar_52.y * tmpvar_52.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_48)));
    vPos_47 = (normalize(vPos_47) * fLength_49);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  highp vec4 tmpvar_54;
  tmpvar_54 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (tmpvar_54 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = tmpvar_54.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  tmpvar_10 = tmpvar_58;
  highp vec2 tmpvar_59;
  tmpvar_59 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_59;
  tmpvar_4 = tmpvar_7;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_64;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = worldNormal_2;
  mediump vec3 tmpvar_66;
  mediump vec4 normal_67;
  normal_67 = tmpvar_65;
  mediump vec3 x2_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = (normal_67.xyzz * normal_67.yzzx);
  x2_68.x = dot (unity_SHBr, tmpvar_69);
  x2_68.y = dot (unity_SHBg, tmpvar_69);
  x2_68.z = dot (unity_SHBb, tmpvar_69);
  tmpvar_66 = (x2_68 + (unity_SHC.xyz * (
    (normal_67.x * normal_67.x)
   - 
    (normal_67.y * normal_67.y)
  )));
  highp vec3 lightColor0_70;
  lightColor0_70 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_71;
  lightColor1_71 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_72;
  lightColor2_72 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_73;
  lightColor3_73 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_74;
  lightAttenSq_74 = unity_4LightAtten0;
  highp vec3 normal_75;
  normal_75 = worldNormal_2;
  highp vec4 tmpvar_76;
  tmpvar_76 = (unity_4LightPosX0 - tmpvar_60.x);
  highp vec4 tmpvar_77;
  tmpvar_77 = (unity_4LightPosY0 - tmpvar_60.y);
  highp vec4 tmpvar_78;
  tmpvar_78 = (unity_4LightPosZ0 - tmpvar_60.z);
  highp vec4 tmpvar_79;
  tmpvar_79 = (((tmpvar_76 * tmpvar_76) + (tmpvar_77 * tmpvar_77)) + (tmpvar_78 * tmpvar_78));
  highp vec4 tmpvar_80;
  tmpvar_80 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_76 * normal_75.x) + (tmpvar_77 * normal_75.y)) + (tmpvar_78 * normal_75.z))
   * 
    inversesqrt(tmpvar_79)
  )) * (1.0/((1.0 + 
    (tmpvar_79 * lightAttenSq_74)
  ))));
  highp vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_66 + ((
    ((lightColor0_70 * tmpvar_80.x) + (lightColor1_71 * tmpvar_80.y))
   + 
    (lightColor2_72 * tmpvar_80.z)
  ) + (lightColor3_73 * tmpvar_80.w)));
  tmpvar_5 = tmpvar_81;
  highp vec4 tmpvar_82;
  tmpvar_82 = (unity_World2Shadow[0] * (_Object2World * tmpvar_14));
  tmpvar_6 = tmpvar_82;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_60;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_20;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  lowp float shadow_22;
  lowp float tmpvar_23;
  tmpvar_23 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD7.xyz);
  mediump float tmpvar_24;
  tmpvar_24 = (_LightShadowData.x + (tmpvar_23 * (1.0 - _LightShadowData.x)));
  shadow_22 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_25;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_22;
  mediump vec3 normalWorld_26;
  normalWorld_26 = tmpvar_5;
  mediump vec3 tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = normalWorld_26;
  mediump vec3 x1_29;
  x1_29.x = dot (unity_SHAr, tmpvar_28);
  x1_29.y = dot (unity_SHAg, tmpvar_28);
  x1_29.z = dot (unity_SHAb, tmpvar_28);
  tmpvar_27 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_27;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_32 = tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_9 * tmpvar_27) * diff_32);
  c_31.xyz = tmpvar_34;
  c_31.w = tmpvar_10;
  c_30.w = c_31.w;
  mediump vec3 tmpvar_35;
  tmpvar_35 = (c_31.xyz + (tmpvar_9 * (xlv_TEXCOORD6 + x1_29)));
  c_30.xyz = tmpvar_35;
  c_4.xyz = c_30.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
out mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_11;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19.x = _Object2World[3].x;
  tmpvar_19.y = _Object2World[3].y;
  tmpvar_19.z = _Object2World[3].z;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_18;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_18;
      highp float fAdherenceScale_25;
      highp vec3 tmpvar_26;
      tmpvar_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_27;
      tmpvar_27 = (_ST_WindBranch.x + (tmpvar_19.x + tmpvar_19.y));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (tmpvar_27 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_27 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((tmpvar_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        (mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_28.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (_glesVertex.xyz + ((tmpvar_26 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((tmpvar_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((
        ((tmpvar_36.x * tmpvar_36.y) * tmpvar_36.x)
       * tmpvar_36.y) * _ST_WindTurbulences.x));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_15 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp vec3 tmpvar_39;
      tmpvar_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_40;
      tmpvar_40 = (_ST_WindBranch.x + (tmpvar_19.x + tmpvar_19.y));
      highp vec4 vOscillations_41;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (tmpvar_40 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((tmpvar_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      vPos_38 = (vPos_23 + ((tmpvar_39 * 
        (((mix (
          mix (tmpvar_46, fTarget_43, fAmount_42)
        , fTarget_43, fAmount_42) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_17 = vPos_23;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_19.x + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_19.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * (
      ((_ST_WindGlobal.y * (tmpvar_52.x + (tmpvar_52.y * tmpvar_52.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_48)));
    vPos_47 = (normalize(vPos_47) * fLength_49);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  highp vec4 tmpvar_54;
  tmpvar_54 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (tmpvar_54 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = tmpvar_54.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  tmpvar_10 = tmpvar_58;
  highp vec2 tmpvar_59;
  tmpvar_59 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_59;
  tmpvar_4 = tmpvar_7;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_64;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = worldNormal_2;
  mediump vec3 tmpvar_66;
  mediump vec4 normal_67;
  normal_67 = tmpvar_65;
  mediump vec3 x2_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = (normal_67.xyzz * normal_67.yzzx);
  x2_68.x = dot (unity_SHBr, tmpvar_69);
  x2_68.y = dot (unity_SHBg, tmpvar_69);
  x2_68.z = dot (unity_SHBb, tmpvar_69);
  tmpvar_66 = (x2_68 + (unity_SHC.xyz * (
    (normal_67.x * normal_67.x)
   - 
    (normal_67.y * normal_67.y)
  )));
  highp vec3 lightColor0_70;
  lightColor0_70 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_71;
  lightColor1_71 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_72;
  lightColor2_72 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_73;
  lightColor3_73 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_74;
  lightAttenSq_74 = unity_4LightAtten0;
  highp vec3 normal_75;
  normal_75 = worldNormal_2;
  highp vec4 tmpvar_76;
  tmpvar_76 = (unity_4LightPosX0 - tmpvar_60.x);
  highp vec4 tmpvar_77;
  tmpvar_77 = (unity_4LightPosY0 - tmpvar_60.y);
  highp vec4 tmpvar_78;
  tmpvar_78 = (unity_4LightPosZ0 - tmpvar_60.z);
  highp vec4 tmpvar_79;
  tmpvar_79 = (((tmpvar_76 * tmpvar_76) + (tmpvar_77 * tmpvar_77)) + (tmpvar_78 * tmpvar_78));
  highp vec4 tmpvar_80;
  tmpvar_80 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_76 * normal_75.x) + (tmpvar_77 * normal_75.y)) + (tmpvar_78 * normal_75.z))
   * 
    inversesqrt(tmpvar_79)
  )) * (1.0/((1.0 + 
    (tmpvar_79 * lightAttenSq_74)
  ))));
  highp vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_66 + ((
    ((lightColor0_70 * tmpvar_80.x) + (lightColor1_71 * tmpvar_80.y))
   + 
    (lightColor2_72 * tmpvar_80.z)
  ) + (lightColor3_73 * tmpvar_80.w)));
  tmpvar_5 = tmpvar_81;
  highp vec4 tmpvar_82;
  tmpvar_82 = (unity_World2Shadow[0] * (_Object2World * tmpvar_14));
  tmpvar_6 = tmpvar_82;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_60;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = tmpvar_6;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
in mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_20;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  lowp float shadow_22;
  mediump float tmpvar_23;
  tmpvar_23 = texture (_ShadowMapTexture, xlv_TEXCOORD7.xyz);
  lowp float tmpvar_24;
  tmpvar_24 = tmpvar_23;
  mediump float tmpvar_25;
  tmpvar_25 = (_LightShadowData.x + (tmpvar_24 * (1.0 - _LightShadowData.x)));
  shadow_22 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_26;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_22;
  mediump vec3 normalWorld_27;
  normalWorld_27 = tmpvar_5;
  mediump vec3 tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = normalWorld_27;
  mediump vec3 x1_30;
  x1_30.x = dot (unity_SHAr, tmpvar_29);
  x1_30.y = dot (unity_SHAg, tmpvar_29);
  x1_30.z = dot (unity_SHAb, tmpvar_29);
  tmpvar_28 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_28;
  lowp vec4 c_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_33 = tmpvar_34;
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tmpvar_9 * tmpvar_28) * diff_33);
  c_32.xyz = tmpvar_35;
  c_32.w = tmpvar_10;
  c_31.w = c_32.w;
  mediump vec3 tmpvar_36;
  tmpvar_36 = (c_32.xyz + (tmpvar_9 * (xlv_TEXCOORD6 + x1_30)));
  c_31.xyz = tmpvar_36;
  c_4.xyz = c_31.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_9;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14.xy = _glesMultiTexCoord2.zw;
  tmpvar_14.z = _glesMultiTexCoord1.w;
  tmpvar_7 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_19;
      highp float fAdherenceScale_25;
      highp vec3 tmpvar_26;
      tmpvar_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_27;
      tmpvar_27 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (tmpvar_27 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_27 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((tmpvar_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        (mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_28.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (_glesVertex.xyz + ((tmpvar_26 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((tmpvar_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((
        ((tmpvar_36.x * tmpvar_36.y) * tmpvar_36.x)
       * tmpvar_36.y) * _ST_WindTurbulences.x));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp vec3 tmpvar_39;
      tmpvar_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_40;
      tmpvar_40 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_41;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (tmpvar_40 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((tmpvar_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      vPos_38 = (vPos_23 + ((tmpvar_39 * 
        (((mix (
          mix (tmpvar_46, fTarget_43, fAmount_42)
        , fTarget_43, fAmount_42) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_18;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_51.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    vPos_47.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_52.x + (tmpvar_52.y * tmpvar_52.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_48)));
    vPos_47 = (normalize(vPos_47) * fLength_49);
    FinalPosition_18 = vPos_47;
  };
  tmpvar_15.xyz = FinalPosition_18;
  highp vec4 tmpvar_54;
  tmpvar_54 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (tmpvar_54 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = tmpvar_54.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  tmpvar_8 = tmpvar_58;
  highp vec2 tmpvar_59;
  tmpvar_59 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_59;
  tmpvar_4 = tmpvar_5;
  highp vec4 v_60;
  v_60.x = _World2Object[0].x;
  v_60.y = _World2Object[1].x;
  v_60.z = _World2Object[2].x;
  v_60.w = _World2Object[3].x;
  highp vec4 v_61;
  v_61.x = _World2Object[0].y;
  v_61.y = _World2Object[1].y;
  v_61.z = _World2Object[2].y;
  v_61.w = _World2Object[3].y;
  highp vec4 v_62;
  v_62.x = _World2Object[0].z;
  v_62.y = _World2Object[1].z;
  v_62.z = _World2Object[2].z;
  v_62.w = _World2Object[3].z;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize(((
    (v_60.xyz * _glesNormal.x)
   + 
    (v_61.xyz * _glesNormal.y)
  ) + (v_62.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_63;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_64;
  tmpvar_64.w = 1.0;
  tmpvar_64.xyz = worldNormal_2;
  mediump vec4 normal_65;
  normal_65 = tmpvar_64;
  mediump vec3 x2_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (normal_65.xyzz * normal_65.yzzx);
  x2_66.x = dot (unity_SHBr, tmpvar_67);
  x2_66.y = dot (unity_SHBg, tmpvar_67);
  x2_66.z = dot (unity_SHBb, tmpvar_67);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = (x2_66 + (unity_SHC.xyz * (
    (normal_65.x * normal_65.x)
   - 
    (normal_65.y * normal_65.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 blendColor_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_10 = tmpvar_19;
  diffuseColor_11.xyz = mix (blendColor_10.xyz, diffuseColor_11.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_22;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_23;
  normalWorld_23 = tmpvar_4;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_23;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_28 = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tmpvar_8 * tmpvar_1) * diff_28);
  c_27.xyz = tmpvar_30;
  c_27.w = tmpvar_9;
  c_26.w = c_27.w;
  mediump vec3 tmpvar_31;
  tmpvar_31 = (c_27.xyz + (tmpvar_8 * (xlv_TEXCOORD6 + x1_25)));
  c_26.xyz = tmpvar_31;
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_9;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14.xy = _glesMultiTexCoord2.zw;
  tmpvar_14.z = _glesMultiTexCoord1.w;
  tmpvar_7 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_19;
      highp float fAdherenceScale_25;
      highp vec3 tmpvar_26;
      tmpvar_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_27;
      tmpvar_27 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (tmpvar_27 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_27 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((tmpvar_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        (mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_28.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (_glesVertex.xyz + ((tmpvar_26 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((tmpvar_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((
        ((tmpvar_36.x * tmpvar_36.y) * tmpvar_36.x)
       * tmpvar_36.y) * _ST_WindTurbulences.x));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp vec3 tmpvar_39;
      tmpvar_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_40;
      tmpvar_40 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_41;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (tmpvar_40 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((tmpvar_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      vPos_38 = (vPos_23 + ((tmpvar_39 * 
        (((mix (
          mix (tmpvar_46, fTarget_43, fAmount_42)
        , fTarget_43, fAmount_42) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_18;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_51.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    vPos_47.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_52.x + (tmpvar_52.y * tmpvar_52.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_48)));
    vPos_47 = (normalize(vPos_47) * fLength_49);
    FinalPosition_18 = vPos_47;
  };
  tmpvar_15.xyz = FinalPosition_18;
  highp vec4 tmpvar_54;
  tmpvar_54 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (tmpvar_54 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = tmpvar_54.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  tmpvar_8 = tmpvar_58;
  highp vec2 tmpvar_59;
  tmpvar_59 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_59;
  tmpvar_4 = tmpvar_5;
  highp vec4 v_60;
  v_60.x = _World2Object[0].x;
  v_60.y = _World2Object[1].x;
  v_60.z = _World2Object[2].x;
  v_60.w = _World2Object[3].x;
  highp vec4 v_61;
  v_61.x = _World2Object[0].y;
  v_61.y = _World2Object[1].y;
  v_61.z = _World2Object[2].y;
  v_61.w = _World2Object[3].y;
  highp vec4 v_62;
  v_62.x = _World2Object[0].z;
  v_62.y = _World2Object[1].z;
  v_62.z = _World2Object[2].z;
  v_62.w = _World2Object[3].z;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize(((
    (v_60.xyz * _glesNormal.x)
   + 
    (v_61.xyz * _glesNormal.y)
  ) + (v_62.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_63;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_64;
  tmpvar_64.w = 1.0;
  tmpvar_64.xyz = worldNormal_2;
  mediump vec4 normal_65;
  normal_65 = tmpvar_64;
  mediump vec3 x2_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (normal_65.xyzz * normal_65.yzzx);
  x2_66.x = dot (unity_SHBr, tmpvar_67);
  x2_66.y = dot (unity_SHBg, tmpvar_67);
  x2_66.z = dot (unity_SHBb, tmpvar_67);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = (x2_66 + (unity_SHC.xyz * (
    (normal_65.x * normal_65.x)
   - 
    (normal_65.y * normal_65.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 blendColor_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_10 = tmpvar_19;
  diffuseColor_11.xyz = mix (blendColor_10.xyz, diffuseColor_11.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_22;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_23;
  normalWorld_23 = tmpvar_4;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_23;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_28 = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tmpvar_8 * tmpvar_1) * diff_28);
  c_27.xyz = tmpvar_30;
  c_27.w = tmpvar_9;
  c_26.w = c_27.w;
  mediump vec3 tmpvar_31;
  tmpvar_31 = (c_27.xyz + (tmpvar_8 * (xlv_TEXCOORD6 + x1_25)));
  c_26.xyz = tmpvar_31;
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_10;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.xy = _glesMultiTexCoord2.zw;
  tmpvar_15.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = tmpvar_1.xyz;
  FinalPosition_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = tmpvar_20;
      highp float fAdherenceScale_26;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((tmpvar_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        (mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_29.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (_glesVertex.xyz + ((tmpvar_27 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((tmpvar_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((
        ((tmpvar_37.x * tmpvar_37.y) * tmpvar_37.x)
       * tmpvar_37.y) * _ST_WindTurbulences.x));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_17 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp vec3 tmpvar_40;
      tmpvar_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_41;
      tmpvar_41 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_42;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (tmpvar_41 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((tmpvar_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      vPos_39 = (vPos_24 + ((tmpvar_40 * 
        (((mix (
          mix (tmpvar_47, fTarget_44, fAmount_43)
        , fTarget_44, fAmount_43) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_19 = vPos_24;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_19;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_52.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    vPos_48.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_53.x + (tmpvar_53.y * tmpvar_53.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_49)));
    vPos_48 = (normalize(vPos_48) * fLength_50);
    FinalPosition_19 = vPos_48;
  };
  tmpvar_16.xyz = FinalPosition_19;
  highp vec4 tmpvar_55;
  tmpvar_55 = (glstate_matrix_mvp * tmpvar_16);
  highp vec4 o_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (tmpvar_55 * 0.5);
  highp vec2 tmpvar_58;
  tmpvar_58.x = tmpvar_57.x;
  tmpvar_58.y = (tmpvar_57.y * _ProjectionParams.x);
  o_56.xy = (tmpvar_58 + tmpvar_57.w);
  o_56.zw = tmpvar_55.zw;
  highp vec3 tmpvar_59;
  tmpvar_59 = o_56.xyw;
  tmpvar_9 = tmpvar_59;
  highp vec2 tmpvar_60;
  tmpvar_60 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_60;
  tmpvar_4 = tmpvar_6;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_64;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = worldNormal_2;
  mediump vec4 normal_66;
  normal_66 = tmpvar_65;
  mediump vec3 x2_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = (normal_66.xyzz * normal_66.yzzx);
  x2_67.x = dot (unity_SHBr, tmpvar_68);
  x2_67.y = dot (unity_SHBg, tmpvar_68);
  x2_67.z = dot (unity_SHBb, tmpvar_68);
  highp vec4 tmpvar_69;
  tmpvar_69 = (unity_World2Shadow[0] * (_Object2World * tmpvar_16));
  tmpvar_5 = tmpvar_69;
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_16).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = (x2_67 + (unity_SHC.xyz * (
    (normal_66.x * normal_66.x)
   - 
    (normal_66.y * normal_66.y)
  )));
  xlv_TEXCOORD7 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_20;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_21;
  tmpvar_21 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_21 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_21.x, max (tmpvar_21.y, tmpvar_21.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_22;
  tmpvar_22 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_22;
  lowp float tmpvar_23;
  mediump float dist_24;
  lowp float tmpvar_25;
  tmpvar_25 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x;
  dist_24 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (float((dist_24 > 
    (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w)
  )), _LightShadowData.x);
  tmpvar_23 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_27;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_23;
  mediump vec3 normalWorld_28;
  normalWorld_28 = tmpvar_5;
  mediump vec3 tmpvar_29;
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = normalWorld_28;
  mediump vec3 x1_31;
  x1_31.x = dot (unity_SHAr, tmpvar_30);
  x1_31.y = dot (unity_SHAg, tmpvar_30);
  x1_31.z = dot (unity_SHAb, tmpvar_30);
  tmpvar_29 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_29;
  lowp vec4 c_32;
  lowp vec4 c_33;
  lowp float diff_34;
  mediump float tmpvar_35;
  tmpvar_35 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_34 = tmpvar_35;
  mediump vec3 tmpvar_36;
  tmpvar_36 = ((tmpvar_9 * tmpvar_29) * diff_34);
  c_33.xyz = tmpvar_36;
  c_33.w = tmpvar_10;
  c_32.w = c_33.w;
  mediump vec3 tmpvar_37;
  tmpvar_37 = (c_33.xyz + (tmpvar_9 * (xlv_TEXCOORD6 + x1_31)));
  c_32.xyz = tmpvar_37;
  c_4.xyz = c_32.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_10;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.xy = _glesMultiTexCoord2.zw;
  tmpvar_15.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = tmpvar_1.xyz;
  FinalPosition_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = tmpvar_20;
      highp float fAdherenceScale_26;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((tmpvar_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        (mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_29.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (_glesVertex.xyz + ((tmpvar_27 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((tmpvar_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((
        ((tmpvar_37.x * tmpvar_37.y) * tmpvar_37.x)
       * tmpvar_37.y) * _ST_WindTurbulences.x));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_17 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp vec3 tmpvar_40;
      tmpvar_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_41;
      tmpvar_41 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_42;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (tmpvar_41 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((tmpvar_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      vPos_39 = (vPos_24 + ((tmpvar_40 * 
        (((mix (
          mix (tmpvar_47, fTarget_44, fAmount_43)
        , fTarget_44, fAmount_43) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_19 = vPos_24;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_19;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_52.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    vPos_48.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_53.x + (tmpvar_53.y * tmpvar_53.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_49)));
    vPos_48 = (normalize(vPos_48) * fLength_50);
    FinalPosition_19 = vPos_48;
  };
  tmpvar_16.xyz = FinalPosition_19;
  highp vec4 tmpvar_55;
  tmpvar_55 = (glstate_matrix_mvp * tmpvar_16);
  highp vec4 o_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (tmpvar_55 * 0.5);
  highp vec2 tmpvar_58;
  tmpvar_58.x = tmpvar_57.x;
  tmpvar_58.y = (tmpvar_57.y * _ProjectionParams.x);
  o_56.xy = (tmpvar_58 + tmpvar_57.w);
  o_56.zw = tmpvar_55.zw;
  highp vec3 tmpvar_59;
  tmpvar_59 = o_56.xyw;
  tmpvar_9 = tmpvar_59;
  highp vec2 tmpvar_60;
  tmpvar_60 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_60;
  tmpvar_4 = tmpvar_6;
  highp vec3 tmpvar_61;
  tmpvar_61 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_62;
  v_62.x = _World2Object[0].x;
  v_62.y = _World2Object[1].x;
  v_62.z = _World2Object[2].x;
  v_62.w = _World2Object[3].x;
  highp vec4 v_63;
  v_63.x = _World2Object[0].y;
  v_63.y = _World2Object[1].y;
  v_63.z = _World2Object[2].y;
  v_63.w = _World2Object[3].y;
  highp vec4 v_64;
  v_64.x = _World2Object[0].z;
  v_64.y = _World2Object[1].z;
  v_64.z = _World2Object[2].z;
  v_64.w = _World2Object[3].z;
  highp vec3 tmpvar_65;
  tmpvar_65 = normalize(((
    (v_62.xyz * _glesNormal.x)
   + 
    (v_63.xyz * _glesNormal.y)
  ) + (v_64.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_65;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_66;
  tmpvar_66.w = 1.0;
  tmpvar_66.xyz = worldNormal_2;
  mediump vec3 tmpvar_67;
  mediump vec4 normal_68;
  normal_68 = tmpvar_66;
  mediump vec3 x2_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (normal_68.xyzz * normal_68.yzzx);
  x2_69.x = dot (unity_SHBr, tmpvar_70);
  x2_69.y = dot (unity_SHBg, tmpvar_70);
  x2_69.z = dot (unity_SHBb, tmpvar_70);
  tmpvar_67 = (x2_69 + (unity_SHC.xyz * (
    (normal_68.x * normal_68.x)
   - 
    (normal_68.y * normal_68.y)
  )));
  highp vec3 lightColor0_71;
  lightColor0_71 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_72;
  lightColor1_72 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_73;
  lightColor2_73 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_74;
  lightColor3_74 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_75;
  lightAttenSq_75 = unity_4LightAtten0;
  highp vec3 normal_76;
  normal_76 = worldNormal_2;
  highp vec4 tmpvar_77;
  tmpvar_77 = (unity_4LightPosX0 - tmpvar_61.x);
  highp vec4 tmpvar_78;
  tmpvar_78 = (unity_4LightPosY0 - tmpvar_61.y);
  highp vec4 tmpvar_79;
  tmpvar_79 = (unity_4LightPosZ0 - tmpvar_61.z);
  highp vec4 tmpvar_80;
  tmpvar_80 = (((tmpvar_77 * tmpvar_77) + (tmpvar_78 * tmpvar_78)) + (tmpvar_79 * tmpvar_79));
  highp vec4 tmpvar_81;
  tmpvar_81 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_77 * normal_76.x) + (tmpvar_78 * normal_76.y)) + (tmpvar_79 * normal_76.z))
   * 
    inversesqrt(tmpvar_80)
  )) * (1.0/((1.0 + 
    (tmpvar_80 * lightAttenSq_75)
  ))));
  highp vec3 tmpvar_82;
  tmpvar_82 = (tmpvar_67 + ((
    ((lightColor0_71 * tmpvar_81.x) + (lightColor1_72 * tmpvar_81.y))
   + 
    (lightColor2_73 * tmpvar_81.z)
  ) + (lightColor3_74 * tmpvar_81.w)));
  tmpvar_5 = tmpvar_82;
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_61;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 blendColor_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_10 = tmpvar_19;
  diffuseColor_11.xyz = mix (blendColor_10.xyz, diffuseColor_11.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_22;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_23;
  normalWorld_23 = tmpvar_4;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_23;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_28 = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tmpvar_8 * tmpvar_1) * diff_28);
  c_27.xyz = tmpvar_30;
  c_27.w = tmpvar_9;
  c_26.w = c_27.w;
  mediump vec3 tmpvar_31;
  tmpvar_31 = (c_27.xyz + (tmpvar_8 * (xlv_TEXCOORD6 + x1_25)));
  c_26.xyz = tmpvar_31;
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_10;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.xy = _glesMultiTexCoord2.zw;
  tmpvar_15.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = tmpvar_1.xyz;
  FinalPosition_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = tmpvar_20;
      highp float fAdherenceScale_26;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((tmpvar_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        (mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_29.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (_glesVertex.xyz + ((tmpvar_27 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((tmpvar_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((
        ((tmpvar_37.x * tmpvar_37.y) * tmpvar_37.x)
       * tmpvar_37.y) * _ST_WindTurbulences.x));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_17 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp vec3 tmpvar_40;
      tmpvar_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_41;
      tmpvar_41 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_42;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (tmpvar_41 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((tmpvar_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      vPos_39 = (vPos_24 + ((tmpvar_40 * 
        (((mix (
          mix (tmpvar_47, fTarget_44, fAmount_43)
        , fTarget_44, fAmount_43) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_19 = vPos_24;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_19;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_52.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    vPos_48.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_53.x + (tmpvar_53.y * tmpvar_53.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_49)));
    vPos_48 = (normalize(vPos_48) * fLength_50);
    FinalPosition_19 = vPos_48;
  };
  tmpvar_16.xyz = FinalPosition_19;
  highp vec4 tmpvar_55;
  tmpvar_55 = (glstate_matrix_mvp * tmpvar_16);
  highp vec4 o_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (tmpvar_55 * 0.5);
  highp vec2 tmpvar_58;
  tmpvar_58.x = tmpvar_57.x;
  tmpvar_58.y = (tmpvar_57.y * _ProjectionParams.x);
  o_56.xy = (tmpvar_58 + tmpvar_57.w);
  o_56.zw = tmpvar_55.zw;
  highp vec3 tmpvar_59;
  tmpvar_59 = o_56.xyw;
  tmpvar_9 = tmpvar_59;
  highp vec2 tmpvar_60;
  tmpvar_60 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_60;
  tmpvar_4 = tmpvar_6;
  highp vec3 tmpvar_61;
  tmpvar_61 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_62;
  v_62.x = _World2Object[0].x;
  v_62.y = _World2Object[1].x;
  v_62.z = _World2Object[2].x;
  v_62.w = _World2Object[3].x;
  highp vec4 v_63;
  v_63.x = _World2Object[0].y;
  v_63.y = _World2Object[1].y;
  v_63.z = _World2Object[2].y;
  v_63.w = _World2Object[3].y;
  highp vec4 v_64;
  v_64.x = _World2Object[0].z;
  v_64.y = _World2Object[1].z;
  v_64.z = _World2Object[2].z;
  v_64.w = _World2Object[3].z;
  highp vec3 tmpvar_65;
  tmpvar_65 = normalize(((
    (v_62.xyz * _glesNormal.x)
   + 
    (v_63.xyz * _glesNormal.y)
  ) + (v_64.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_65;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_66;
  tmpvar_66.w = 1.0;
  tmpvar_66.xyz = worldNormal_2;
  mediump vec3 tmpvar_67;
  mediump vec4 normal_68;
  normal_68 = tmpvar_66;
  mediump vec3 x2_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (normal_68.xyzz * normal_68.yzzx);
  x2_69.x = dot (unity_SHBr, tmpvar_70);
  x2_69.y = dot (unity_SHBg, tmpvar_70);
  x2_69.z = dot (unity_SHBb, tmpvar_70);
  tmpvar_67 = (x2_69 + (unity_SHC.xyz * (
    (normal_68.x * normal_68.x)
   - 
    (normal_68.y * normal_68.y)
  )));
  highp vec3 lightColor0_71;
  lightColor0_71 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_72;
  lightColor1_72 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_73;
  lightColor2_73 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_74;
  lightColor3_74 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_75;
  lightAttenSq_75 = unity_4LightAtten0;
  highp vec3 normal_76;
  normal_76 = worldNormal_2;
  highp vec4 tmpvar_77;
  tmpvar_77 = (unity_4LightPosX0 - tmpvar_61.x);
  highp vec4 tmpvar_78;
  tmpvar_78 = (unity_4LightPosY0 - tmpvar_61.y);
  highp vec4 tmpvar_79;
  tmpvar_79 = (unity_4LightPosZ0 - tmpvar_61.z);
  highp vec4 tmpvar_80;
  tmpvar_80 = (((tmpvar_77 * tmpvar_77) + (tmpvar_78 * tmpvar_78)) + (tmpvar_79 * tmpvar_79));
  highp vec4 tmpvar_81;
  tmpvar_81 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_77 * normal_76.x) + (tmpvar_78 * normal_76.y)) + (tmpvar_79 * normal_76.z))
   * 
    inversesqrt(tmpvar_80)
  )) * (1.0/((1.0 + 
    (tmpvar_80 * lightAttenSq_75)
  ))));
  highp vec3 tmpvar_82;
  tmpvar_82 = (tmpvar_67 + ((
    ((lightColor0_71 * tmpvar_81.x) + (lightColor1_72 * tmpvar_81.y))
   + 
    (lightColor2_73 * tmpvar_81.z)
  ) + (lightColor3_74 * tmpvar_81.w)));
  tmpvar_5 = tmpvar_82;
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_61;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_5;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 blendColor_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_10 = tmpvar_19;
  diffuseColor_11.xyz = mix (blendColor_10.xyz, diffuseColor_11.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_22;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_23;
  normalWorld_23 = tmpvar_4;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_23;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_28 = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tmpvar_8 * tmpvar_1) * diff_28);
  c_27.xyz = tmpvar_30;
  c_27.w = tmpvar_9;
  c_26.w = c_27.w;
  mediump vec3 tmpvar_31;
  tmpvar_31 = (c_27.xyz + (tmpvar_8 * (xlv_TEXCOORD6 + x1_25)));
  c_26.xyz = tmpvar_31;
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_11;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.xy = _glesMultiTexCoord2.zw;
  tmpvar_16.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = tmpvar_1.xyz;
  FinalPosition_20 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = (_WindQuality * _WindEnabled);
  if ((tmpvar_22 > 0.0)) {
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_23 * _ST_WindVector.xyz));
    highp mat3 tmpvar_24;
    tmpvar_24[0] = _World2Object[0].xyz;
    tmpvar_24[1] = _World2Object[1].xyz;
    tmpvar_24[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_24 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_22 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    if ((tmpvar_22 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = tmpvar_21;
      highp float fAdherenceScale_27;
      highp vec3 tmpvar_28;
      tmpvar_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_29;
      tmpvar_29 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (tmpvar_29 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((tmpvar_29 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_29 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((tmpvar_29 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        (mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_30.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (_glesVertex.xyz + ((tmpvar_28 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((tmpvar_29 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((
        ((tmpvar_38.x * tmpvar_38.y) * tmpvar_38.x)
       * tmpvar_38.y) * _ST_WindTurbulences.x));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_18 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp vec3 tmpvar_41;
      tmpvar_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_42;
      tmpvar_42 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_43;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (tmpvar_42 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((tmpvar_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      vPos_40 = (vPos_25 + ((tmpvar_41 * 
        (((mix (
          mix (tmpvar_48, fTarget_45, fAmount_44)
        , fTarget_45, fAmount_44) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_20 = vPos_25;
  };
  if ((tmpvar_22 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_20;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_53.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    vPos_49.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_54.x + (tmpvar_54.y * tmpvar_54.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_50)));
    vPos_49 = (normalize(vPos_49) * fLength_51);
    FinalPosition_20 = vPos_49;
  };
  tmpvar_17.xyz = FinalPosition_20;
  highp vec4 tmpvar_56;
  tmpvar_56 = (glstate_matrix_mvp * tmpvar_17);
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (tmpvar_56 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = tmpvar_56.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  tmpvar_10 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_61;
  tmpvar_4 = tmpvar_7;
  highp vec3 tmpvar_62;
  tmpvar_62 = (_Object2World * tmpvar_17).xyz;
  highp vec4 v_63;
  v_63.x = _World2Object[0].x;
  v_63.y = _World2Object[1].x;
  v_63.z = _World2Object[2].x;
  v_63.w = _World2Object[3].x;
  highp vec4 v_64;
  v_64.x = _World2Object[0].y;
  v_64.y = _World2Object[1].y;
  v_64.z = _World2Object[2].y;
  v_64.w = _World2Object[3].y;
  highp vec4 v_65;
  v_65.x = _World2Object[0].z;
  v_65.y = _World2Object[1].z;
  v_65.z = _World2Object[2].z;
  v_65.w = _World2Object[3].z;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(((
    (v_63.xyz * _glesNormal.x)
   + 
    (v_64.xyz * _glesNormal.y)
  ) + (v_65.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_66;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_67;
  tmpvar_67.w = 1.0;
  tmpvar_67.xyz = worldNormal_2;
  mediump vec3 tmpvar_68;
  mediump vec4 normal_69;
  normal_69 = tmpvar_67;
  mediump vec3 x2_70;
  mediump vec4 tmpvar_71;
  tmpvar_71 = (normal_69.xyzz * normal_69.yzzx);
  x2_70.x = dot (unity_SHBr, tmpvar_71);
  x2_70.y = dot (unity_SHBg, tmpvar_71);
  x2_70.z = dot (unity_SHBb, tmpvar_71);
  tmpvar_68 = (x2_70 + (unity_SHC.xyz * (
    (normal_69.x * normal_69.x)
   - 
    (normal_69.y * normal_69.y)
  )));
  highp vec3 lightColor0_72;
  lightColor0_72 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_73;
  lightColor1_73 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_74;
  lightColor2_74 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_75;
  lightColor3_75 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_76;
  lightAttenSq_76 = unity_4LightAtten0;
  highp vec3 normal_77;
  normal_77 = worldNormal_2;
  highp vec4 tmpvar_78;
  tmpvar_78 = (unity_4LightPosX0 - tmpvar_62.x);
  highp vec4 tmpvar_79;
  tmpvar_79 = (unity_4LightPosY0 - tmpvar_62.y);
  highp vec4 tmpvar_80;
  tmpvar_80 = (unity_4LightPosZ0 - tmpvar_62.z);
  highp vec4 tmpvar_81;
  tmpvar_81 = (((tmpvar_78 * tmpvar_78) + (tmpvar_79 * tmpvar_79)) + (tmpvar_80 * tmpvar_80));
  highp vec4 tmpvar_82;
  tmpvar_82 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_78 * normal_77.x) + (tmpvar_79 * normal_77.y)) + (tmpvar_80 * normal_77.z))
   * 
    inversesqrt(tmpvar_81)
  )) * (1.0/((1.0 + 
    (tmpvar_81 * lightAttenSq_76)
  ))));
  highp vec3 tmpvar_83;
  tmpvar_83 = (tmpvar_68 + ((
    ((lightColor0_72 * tmpvar_82.x) + (lightColor1_73 * tmpvar_82.y))
   + 
    (lightColor2_74 * tmpvar_82.z)
  ) + (lightColor3_75 * tmpvar_82.w)));
  tmpvar_5 = tmpvar_83;
  highp vec4 tmpvar_84;
  tmpvar_84 = (unity_World2Shadow[0] * (_Object2World * tmpvar_17));
  tmpvar_6 = tmpvar_84;
  gl_Position = (glstate_matrix_mvp * tmpvar_17);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_62;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_20;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_21;
  tmpvar_21 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_21 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_21.x, max (tmpvar_21.y, tmpvar_21.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_22;
  tmpvar_22 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_22;
  lowp float tmpvar_23;
  mediump float dist_24;
  lowp float tmpvar_25;
  tmpvar_25 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x;
  dist_24 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (float((dist_24 > 
    (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w)
  )), _LightShadowData.x);
  tmpvar_23 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_27;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_23;
  mediump vec3 normalWorld_28;
  normalWorld_28 = tmpvar_5;
  mediump vec3 tmpvar_29;
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = normalWorld_28;
  mediump vec3 x1_31;
  x1_31.x = dot (unity_SHAr, tmpvar_30);
  x1_31.y = dot (unity_SHAg, tmpvar_30);
  x1_31.z = dot (unity_SHAb, tmpvar_30);
  tmpvar_29 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_29;
  lowp vec4 c_32;
  lowp vec4 c_33;
  lowp float diff_34;
  mediump float tmpvar_35;
  tmpvar_35 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_34 = tmpvar_35;
  mediump vec3 tmpvar_36;
  tmpvar_36 = ((tmpvar_9 * tmpvar_29) * diff_34);
  c_33.xyz = tmpvar_36;
  c_33.w = tmpvar_10;
  c_32.w = c_33.w;
  mediump vec3 tmpvar_37;
  tmpvar_37 = (c_33.xyz + (tmpvar_9 * (xlv_TEXCOORD6 + x1_31)));
  c_32.xyz = tmpvar_37;
  c_4.xyz = c_32.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_10;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.xy = _glesMultiTexCoord2.zw;
  tmpvar_15.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = tmpvar_1.xyz;
  FinalPosition_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = tmpvar_20;
      highp float fAdherenceScale_26;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((tmpvar_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        (mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_29.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (_glesVertex.xyz + ((tmpvar_27 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((tmpvar_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((
        ((tmpvar_37.x * tmpvar_37.y) * tmpvar_37.x)
       * tmpvar_37.y) * _ST_WindTurbulences.x));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_17 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp vec3 tmpvar_40;
      tmpvar_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_41;
      tmpvar_41 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_42;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (tmpvar_41 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((tmpvar_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      vPos_39 = (vPos_24 + ((tmpvar_40 * 
        (((mix (
          mix (tmpvar_47, fTarget_44, fAmount_43)
        , fTarget_44, fAmount_43) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_19 = vPos_24;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_19;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_52.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    vPos_48.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_53.x + (tmpvar_53.y * tmpvar_53.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_49)));
    vPos_48 = (normalize(vPos_48) * fLength_50);
    FinalPosition_19 = vPos_48;
  };
  tmpvar_16.xyz = FinalPosition_19;
  highp vec4 tmpvar_55;
  tmpvar_55 = (glstate_matrix_mvp * tmpvar_16);
  highp vec4 o_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (tmpvar_55 * 0.5);
  highp vec2 tmpvar_58;
  tmpvar_58.x = tmpvar_57.x;
  tmpvar_58.y = (tmpvar_57.y * _ProjectionParams.x);
  o_56.xy = (tmpvar_58 + tmpvar_57.w);
  o_56.zw = tmpvar_55.zw;
  highp vec3 tmpvar_59;
  tmpvar_59 = o_56.xyw;
  tmpvar_9 = tmpvar_59;
  highp vec2 tmpvar_60;
  tmpvar_60 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_60;
  tmpvar_4 = tmpvar_6;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_64;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = worldNormal_2;
  mediump vec4 normal_66;
  normal_66 = tmpvar_65;
  mediump vec3 x2_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = (normal_66.xyzz * normal_66.yzzx);
  x2_67.x = dot (unity_SHBr, tmpvar_68);
  x2_67.y = dot (unity_SHBg, tmpvar_68);
  x2_67.z = dot (unity_SHBb, tmpvar_68);
  highp vec4 tmpvar_69;
  tmpvar_69 = (unity_World2Shadow[0] * (_Object2World * tmpvar_16));
  tmpvar_5 = tmpvar_69;
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_16).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = (x2_67 + (unity_SHC.xyz * (
    (normal_66.x * normal_66.x)
   - 
    (normal_66.y * normal_66.y)
  )));
  xlv_TEXCOORD7 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_20;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_21;
  tmpvar_21 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_21 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_21.x, max (tmpvar_21.y, tmpvar_21.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_22;
  tmpvar_22 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_22;
  lowp float shadow_23;
  lowp float tmpvar_24;
  tmpvar_24 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD7.xyz);
  mediump float tmpvar_25;
  tmpvar_25 = (_LightShadowData.x + (tmpvar_24 * (1.0 - _LightShadowData.x)));
  shadow_23 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_26;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_23;
  mediump vec3 normalWorld_27;
  normalWorld_27 = tmpvar_5;
  mediump vec3 tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = normalWorld_27;
  mediump vec3 x1_30;
  x1_30.x = dot (unity_SHAr, tmpvar_29);
  x1_30.y = dot (unity_SHAg, tmpvar_29);
  x1_30.z = dot (unity_SHAb, tmpvar_29);
  tmpvar_28 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_28;
  lowp vec4 c_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_33 = tmpvar_34;
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tmpvar_9 * tmpvar_28) * diff_33);
  c_32.xyz = tmpvar_35;
  c_32.w = tmpvar_10;
  c_31.w = c_32.w;
  mediump vec3 tmpvar_36;
  tmpvar_36 = (c_32.xyz + (tmpvar_9 * (xlv_TEXCOORD6 + x1_30)));
  c_31.xyz = tmpvar_36;
  c_4.xyz = c_31.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
out mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_10;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.xy = _glesMultiTexCoord2.zw;
  tmpvar_15.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = tmpvar_1.xyz;
  FinalPosition_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = tmpvar_20;
      highp float fAdherenceScale_26;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((tmpvar_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        (mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_29.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (_glesVertex.xyz + ((tmpvar_27 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((tmpvar_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((
        ((tmpvar_37.x * tmpvar_37.y) * tmpvar_37.x)
       * tmpvar_37.y) * _ST_WindTurbulences.x));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_17 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp vec3 tmpvar_40;
      tmpvar_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_41;
      tmpvar_41 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_42;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (tmpvar_41 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((tmpvar_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      vPos_39 = (vPos_24 + ((tmpvar_40 * 
        (((mix (
          mix (tmpvar_47, fTarget_44, fAmount_43)
        , fTarget_44, fAmount_43) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_19 = vPos_24;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_19;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_52.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    vPos_48.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_53.x + (tmpvar_53.y * tmpvar_53.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_49)));
    vPos_48 = (normalize(vPos_48) * fLength_50);
    FinalPosition_19 = vPos_48;
  };
  tmpvar_16.xyz = FinalPosition_19;
  highp vec4 tmpvar_55;
  tmpvar_55 = (glstate_matrix_mvp * tmpvar_16);
  highp vec4 o_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (tmpvar_55 * 0.5);
  highp vec2 tmpvar_58;
  tmpvar_58.x = tmpvar_57.x;
  tmpvar_58.y = (tmpvar_57.y * _ProjectionParams.x);
  o_56.xy = (tmpvar_58 + tmpvar_57.w);
  o_56.zw = tmpvar_55.zw;
  highp vec3 tmpvar_59;
  tmpvar_59 = o_56.xyw;
  tmpvar_9 = tmpvar_59;
  highp vec2 tmpvar_60;
  tmpvar_60 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_60;
  tmpvar_4 = tmpvar_6;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_64;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = worldNormal_2;
  mediump vec4 normal_66;
  normal_66 = tmpvar_65;
  mediump vec3 x2_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = (normal_66.xyzz * normal_66.yzzx);
  x2_67.x = dot (unity_SHBr, tmpvar_68);
  x2_67.y = dot (unity_SHBg, tmpvar_68);
  x2_67.z = dot (unity_SHBb, tmpvar_68);
  highp vec4 tmpvar_69;
  tmpvar_69 = (unity_World2Shadow[0] * (_Object2World * tmpvar_16));
  tmpvar_5 = tmpvar_69;
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_16).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = (x2_67 + (unity_SHC.xyz * (
    (normal_66.x * normal_66.x)
   - 
    (normal_66.y * normal_66.y)
  )));
  xlv_TEXCOORD7 = tmpvar_5;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
in mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_20;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_21;
  tmpvar_21 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_21 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_21.x, max (tmpvar_21.y, tmpvar_21.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_22;
  tmpvar_22 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_22;
  lowp float shadow_23;
  mediump float tmpvar_24;
  tmpvar_24 = texture (_ShadowMapTexture, xlv_TEXCOORD7.xyz);
  lowp float tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump float tmpvar_26;
  tmpvar_26 = (_LightShadowData.x + (tmpvar_25 * (1.0 - _LightShadowData.x)));
  shadow_23 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_27;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_23;
  mediump vec3 normalWorld_28;
  normalWorld_28 = tmpvar_5;
  mediump vec3 tmpvar_29;
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = normalWorld_28;
  mediump vec3 x1_31;
  x1_31.x = dot (unity_SHAr, tmpvar_30);
  x1_31.y = dot (unity_SHAg, tmpvar_30);
  x1_31.z = dot (unity_SHAb, tmpvar_30);
  tmpvar_29 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_29;
  lowp vec4 c_32;
  lowp vec4 c_33;
  lowp float diff_34;
  mediump float tmpvar_35;
  tmpvar_35 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_34 = tmpvar_35;
  mediump vec3 tmpvar_36;
  tmpvar_36 = ((tmpvar_9 * tmpvar_29) * diff_34);
  c_33.xyz = tmpvar_36;
  c_33.w = tmpvar_10;
  c_32.w = c_33.w;
  mediump vec3 tmpvar_37;
  tmpvar_37 = (c_33.xyz + (tmpvar_9 * (xlv_TEXCOORD6 + x1_31)));
  c_32.xyz = tmpvar_37;
  c_4.xyz = c_32.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_11;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.xy = _glesMultiTexCoord2.zw;
  tmpvar_16.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = tmpvar_1.xyz;
  FinalPosition_20 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = (_WindQuality * _WindEnabled);
  if ((tmpvar_22 > 0.0)) {
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_23 * _ST_WindVector.xyz));
    highp mat3 tmpvar_24;
    tmpvar_24[0] = _World2Object[0].xyz;
    tmpvar_24[1] = _World2Object[1].xyz;
    tmpvar_24[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_24 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_22 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    if ((tmpvar_22 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = tmpvar_21;
      highp float fAdherenceScale_27;
      highp vec3 tmpvar_28;
      tmpvar_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_29;
      tmpvar_29 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (tmpvar_29 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((tmpvar_29 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_29 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((tmpvar_29 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        (mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_30.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (_glesVertex.xyz + ((tmpvar_28 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((tmpvar_29 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((
        ((tmpvar_38.x * tmpvar_38.y) * tmpvar_38.x)
       * tmpvar_38.y) * _ST_WindTurbulences.x));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_18 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp vec3 tmpvar_41;
      tmpvar_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_42;
      tmpvar_42 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_43;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (tmpvar_42 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((tmpvar_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      vPos_40 = (vPos_25 + ((tmpvar_41 * 
        (((mix (
          mix (tmpvar_48, fTarget_45, fAmount_44)
        , fTarget_45, fAmount_44) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_20 = vPos_25;
  };
  if ((tmpvar_22 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_20;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_53.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    vPos_49.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_54.x + (tmpvar_54.y * tmpvar_54.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_50)));
    vPos_49 = (normalize(vPos_49) * fLength_51);
    FinalPosition_20 = vPos_49;
  };
  tmpvar_17.xyz = FinalPosition_20;
  highp vec4 tmpvar_56;
  tmpvar_56 = (glstate_matrix_mvp * tmpvar_17);
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (tmpvar_56 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = tmpvar_56.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  tmpvar_10 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_61;
  tmpvar_4 = tmpvar_7;
  highp vec3 tmpvar_62;
  tmpvar_62 = (_Object2World * tmpvar_17).xyz;
  highp vec4 v_63;
  v_63.x = _World2Object[0].x;
  v_63.y = _World2Object[1].x;
  v_63.z = _World2Object[2].x;
  v_63.w = _World2Object[3].x;
  highp vec4 v_64;
  v_64.x = _World2Object[0].y;
  v_64.y = _World2Object[1].y;
  v_64.z = _World2Object[2].y;
  v_64.w = _World2Object[3].y;
  highp vec4 v_65;
  v_65.x = _World2Object[0].z;
  v_65.y = _World2Object[1].z;
  v_65.z = _World2Object[2].z;
  v_65.w = _World2Object[3].z;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(((
    (v_63.xyz * _glesNormal.x)
   + 
    (v_64.xyz * _glesNormal.y)
  ) + (v_65.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_66;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_67;
  tmpvar_67.w = 1.0;
  tmpvar_67.xyz = worldNormal_2;
  mediump vec3 tmpvar_68;
  mediump vec4 normal_69;
  normal_69 = tmpvar_67;
  mediump vec3 x2_70;
  mediump vec4 tmpvar_71;
  tmpvar_71 = (normal_69.xyzz * normal_69.yzzx);
  x2_70.x = dot (unity_SHBr, tmpvar_71);
  x2_70.y = dot (unity_SHBg, tmpvar_71);
  x2_70.z = dot (unity_SHBb, tmpvar_71);
  tmpvar_68 = (x2_70 + (unity_SHC.xyz * (
    (normal_69.x * normal_69.x)
   - 
    (normal_69.y * normal_69.y)
  )));
  highp vec3 lightColor0_72;
  lightColor0_72 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_73;
  lightColor1_73 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_74;
  lightColor2_74 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_75;
  lightColor3_75 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_76;
  lightAttenSq_76 = unity_4LightAtten0;
  highp vec3 normal_77;
  normal_77 = worldNormal_2;
  highp vec4 tmpvar_78;
  tmpvar_78 = (unity_4LightPosX0 - tmpvar_62.x);
  highp vec4 tmpvar_79;
  tmpvar_79 = (unity_4LightPosY0 - tmpvar_62.y);
  highp vec4 tmpvar_80;
  tmpvar_80 = (unity_4LightPosZ0 - tmpvar_62.z);
  highp vec4 tmpvar_81;
  tmpvar_81 = (((tmpvar_78 * tmpvar_78) + (tmpvar_79 * tmpvar_79)) + (tmpvar_80 * tmpvar_80));
  highp vec4 tmpvar_82;
  tmpvar_82 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_78 * normal_77.x) + (tmpvar_79 * normal_77.y)) + (tmpvar_80 * normal_77.z))
   * 
    inversesqrt(tmpvar_81)
  )) * (1.0/((1.0 + 
    (tmpvar_81 * lightAttenSq_76)
  ))));
  highp vec3 tmpvar_83;
  tmpvar_83 = (tmpvar_68 + ((
    ((lightColor0_72 * tmpvar_82.x) + (lightColor1_73 * tmpvar_82.y))
   + 
    (lightColor2_74 * tmpvar_82.z)
  ) + (lightColor3_75 * tmpvar_82.w)));
  tmpvar_5 = tmpvar_83;
  highp vec4 tmpvar_84;
  tmpvar_84 = (unity_World2Shadow[0] * (_Object2World * tmpvar_17));
  tmpvar_6 = tmpvar_84;
  gl_Position = (glstate_matrix_mvp * tmpvar_17);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_62;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_20;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_21;
  tmpvar_21 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_21 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_21.x, max (tmpvar_21.y, tmpvar_21.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_22;
  tmpvar_22 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_22;
  lowp float shadow_23;
  lowp float tmpvar_24;
  tmpvar_24 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD7.xyz);
  mediump float tmpvar_25;
  tmpvar_25 = (_LightShadowData.x + (tmpvar_24 * (1.0 - _LightShadowData.x)));
  shadow_23 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_26;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_23;
  mediump vec3 normalWorld_27;
  normalWorld_27 = tmpvar_5;
  mediump vec3 tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = normalWorld_27;
  mediump vec3 x1_30;
  x1_30.x = dot (unity_SHAr, tmpvar_29);
  x1_30.y = dot (unity_SHAg, tmpvar_29);
  x1_30.z = dot (unity_SHAb, tmpvar_29);
  tmpvar_28 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_28;
  lowp vec4 c_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_33 = tmpvar_34;
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tmpvar_9 * tmpvar_28) * diff_33);
  c_32.xyz = tmpvar_35;
  c_32.w = tmpvar_10;
  c_31.w = c_32.w;
  mediump vec3 tmpvar_36;
  tmpvar_36 = (c_32.xyz + (tmpvar_9 * (xlv_TEXCOORD6 + x1_30)));
  c_31.xyz = tmpvar_36;
  c_4.xyz = c_31.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
out mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_11;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.xy = _glesMultiTexCoord2.zw;
  tmpvar_16.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = tmpvar_1.xyz;
  FinalPosition_20 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = (_WindQuality * _WindEnabled);
  if ((tmpvar_22 > 0.0)) {
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_23 * _ST_WindVector.xyz));
    highp mat3 tmpvar_24;
    tmpvar_24[0] = _World2Object[0].xyz;
    tmpvar_24[1] = _World2Object[1].xyz;
    tmpvar_24[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_24 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_22 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    if ((tmpvar_22 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = tmpvar_21;
      highp float fAdherenceScale_27;
      highp vec3 tmpvar_28;
      tmpvar_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_29;
      tmpvar_29 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (tmpvar_29 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((tmpvar_29 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_29 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((tmpvar_29 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        (mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_30.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (_glesVertex.xyz + ((tmpvar_28 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((tmpvar_29 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((
        ((tmpvar_38.x * tmpvar_38.y) * tmpvar_38.x)
       * tmpvar_38.y) * _ST_WindTurbulences.x));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_18 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp vec3 tmpvar_41;
      tmpvar_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_42;
      tmpvar_42 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_43;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (tmpvar_42 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((tmpvar_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      vPos_40 = (vPos_25 + ((tmpvar_41 * 
        (((mix (
          mix (tmpvar_48, fTarget_45, fAmount_44)
        , fTarget_45, fAmount_44) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_20 = vPos_25;
  };
  if ((tmpvar_22 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_20;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_53.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    vPos_49.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_54.x + (tmpvar_54.y * tmpvar_54.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_50)));
    vPos_49 = (normalize(vPos_49) * fLength_51);
    FinalPosition_20 = vPos_49;
  };
  tmpvar_17.xyz = FinalPosition_20;
  highp vec4 tmpvar_56;
  tmpvar_56 = (glstate_matrix_mvp * tmpvar_17);
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (tmpvar_56 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = tmpvar_56.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  tmpvar_10 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_61;
  tmpvar_4 = tmpvar_7;
  highp vec3 tmpvar_62;
  tmpvar_62 = (_Object2World * tmpvar_17).xyz;
  highp vec4 v_63;
  v_63.x = _World2Object[0].x;
  v_63.y = _World2Object[1].x;
  v_63.z = _World2Object[2].x;
  v_63.w = _World2Object[3].x;
  highp vec4 v_64;
  v_64.x = _World2Object[0].y;
  v_64.y = _World2Object[1].y;
  v_64.z = _World2Object[2].y;
  v_64.w = _World2Object[3].y;
  highp vec4 v_65;
  v_65.x = _World2Object[0].z;
  v_65.y = _World2Object[1].z;
  v_65.z = _World2Object[2].z;
  v_65.w = _World2Object[3].z;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(((
    (v_63.xyz * _glesNormal.x)
   + 
    (v_64.xyz * _glesNormal.y)
  ) + (v_65.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_66;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_67;
  tmpvar_67.w = 1.0;
  tmpvar_67.xyz = worldNormal_2;
  mediump vec3 tmpvar_68;
  mediump vec4 normal_69;
  normal_69 = tmpvar_67;
  mediump vec3 x2_70;
  mediump vec4 tmpvar_71;
  tmpvar_71 = (normal_69.xyzz * normal_69.yzzx);
  x2_70.x = dot (unity_SHBr, tmpvar_71);
  x2_70.y = dot (unity_SHBg, tmpvar_71);
  x2_70.z = dot (unity_SHBb, tmpvar_71);
  tmpvar_68 = (x2_70 + (unity_SHC.xyz * (
    (normal_69.x * normal_69.x)
   - 
    (normal_69.y * normal_69.y)
  )));
  highp vec3 lightColor0_72;
  lightColor0_72 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_73;
  lightColor1_73 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_74;
  lightColor2_74 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_75;
  lightColor3_75 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_76;
  lightAttenSq_76 = unity_4LightAtten0;
  highp vec3 normal_77;
  normal_77 = worldNormal_2;
  highp vec4 tmpvar_78;
  tmpvar_78 = (unity_4LightPosX0 - tmpvar_62.x);
  highp vec4 tmpvar_79;
  tmpvar_79 = (unity_4LightPosY0 - tmpvar_62.y);
  highp vec4 tmpvar_80;
  tmpvar_80 = (unity_4LightPosZ0 - tmpvar_62.z);
  highp vec4 tmpvar_81;
  tmpvar_81 = (((tmpvar_78 * tmpvar_78) + (tmpvar_79 * tmpvar_79)) + (tmpvar_80 * tmpvar_80));
  highp vec4 tmpvar_82;
  tmpvar_82 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_78 * normal_77.x) + (tmpvar_79 * normal_77.y)) + (tmpvar_80 * normal_77.z))
   * 
    inversesqrt(tmpvar_81)
  )) * (1.0/((1.0 + 
    (tmpvar_81 * lightAttenSq_76)
  ))));
  highp vec3 tmpvar_83;
  tmpvar_83 = (tmpvar_68 + ((
    ((lightColor0_72 * tmpvar_82.x) + (lightColor1_73 * tmpvar_82.y))
   + 
    (lightColor2_74 * tmpvar_82.z)
  ) + (lightColor3_75 * tmpvar_82.w)));
  tmpvar_5 = tmpvar_83;
  highp vec4 tmpvar_84;
  tmpvar_84 = (unity_World2Shadow[0] * (_Object2World * tmpvar_17));
  tmpvar_6 = tmpvar_84;
  gl_Position = (glstate_matrix_mvp * tmpvar_17);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_62;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = tmpvar_6;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
in mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_20;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_21;
  tmpvar_21 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_21 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_21.x, max (tmpvar_21.y, tmpvar_21.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_22;
  tmpvar_22 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_22;
  lowp float shadow_23;
  mediump float tmpvar_24;
  tmpvar_24 = texture (_ShadowMapTexture, xlv_TEXCOORD7.xyz);
  lowp float tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump float tmpvar_26;
  tmpvar_26 = (_LightShadowData.x + (tmpvar_25 * (1.0 - _LightShadowData.x)));
  shadow_23 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_27;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_23;
  mediump vec3 normalWorld_28;
  normalWorld_28 = tmpvar_5;
  mediump vec3 tmpvar_29;
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = normalWorld_28;
  mediump vec3 x1_31;
  x1_31.x = dot (unity_SHAr, tmpvar_30);
  x1_31.y = dot (unity_SHAg, tmpvar_30);
  x1_31.z = dot (unity_SHAb, tmpvar_30);
  tmpvar_29 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_29;
  lowp vec4 c_32;
  lowp vec4 c_33;
  lowp float diff_34;
  mediump float tmpvar_35;
  tmpvar_35 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_34 = tmpvar_35;
  mediump vec3 tmpvar_36;
  tmpvar_36 = ((tmpvar_9 * tmpvar_29) * diff_34);
  c_33.xyz = tmpvar_36;
  c_33.w = tmpvar_10;
  c_32.w = c_33.w;
  mediump vec3 tmpvar_37;
  tmpvar_37 = (c_33.xyz + (tmpvar_9 * (xlv_TEXCOORD6 + x1_31)));
  c_32.xyz = tmpvar_37;
  c_4.xyz = c_32.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_10;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.xy = _glesMultiTexCoord2.zw;
  tmpvar_15.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = tmpvar_1.xyz;
  FinalPosition_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = tmpvar_20;
      highp float fAdherenceScale_26;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((tmpvar_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        (mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_29.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (_glesVertex.xyz + ((tmpvar_27 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((tmpvar_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((
        ((tmpvar_37.x * tmpvar_37.y) * tmpvar_37.x)
       * tmpvar_37.y) * _ST_WindTurbulences.x));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_17 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp vec3 tmpvar_40;
      tmpvar_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_41;
      tmpvar_41 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_42;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (tmpvar_41 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((tmpvar_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      vPos_39 = (vPos_24 + ((tmpvar_40 * 
        (((mix (
          mix (tmpvar_47, fTarget_44, fAmount_43)
        , fTarget_44, fAmount_43) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_19 = vPos_24;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_19;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_52.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    vPos_48.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_53.x + (tmpvar_53.y * tmpvar_53.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_49)));
    vPos_48 = (normalize(vPos_48) * fLength_50);
    FinalPosition_19 = vPos_48;
  };
  tmpvar_16.xyz = FinalPosition_19;
  highp vec4 tmpvar_55;
  tmpvar_55 = (glstate_matrix_mvp * tmpvar_16);
  highp vec4 o_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (tmpvar_55 * 0.5);
  highp vec2 tmpvar_58;
  tmpvar_58.x = tmpvar_57.x;
  tmpvar_58.y = (tmpvar_57.y * _ProjectionParams.x);
  o_56.xy = (tmpvar_58 + tmpvar_57.w);
  o_56.zw = tmpvar_55.zw;
  highp vec3 tmpvar_59;
  tmpvar_59 = o_56.xyw;
  tmpvar_9 = tmpvar_59;
  highp vec2 tmpvar_60;
  tmpvar_60 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_60;
  tmpvar_5 = tmpvar_6;
  highp vec3 tmpvar_61;
  tmpvar_61 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_62;
  v_62.x = _World2Object[0].x;
  v_62.y = _World2Object[1].x;
  v_62.z = _World2Object[2].x;
  v_62.w = _World2Object[3].x;
  highp vec4 v_63;
  v_63.x = _World2Object[0].y;
  v_63.y = _World2Object[1].y;
  v_63.z = _World2Object[2].y;
  v_63.w = _World2Object[3].y;
  highp vec4 v_64;
  v_64.x = _World2Object[0].z;
  v_64.y = _World2Object[1].z;
  v_64.z = _World2Object[2].z;
  v_64.w = _World2Object[3].z;
  highp vec3 tmpvar_65;
  tmpvar_65 = normalize(((
    (v_62.xyz * _glesNormal.x)
   + 
    (v_63.xyz * _glesNormal.y)
  ) + (v_64.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_65;
  highp mat3 tmpvar_66;
  tmpvar_66[0] = _Object2World[0].xyz;
  tmpvar_66[1] = _Object2World[1].xyz;
  tmpvar_66[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((tmpvar_66 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_69;
  tmpvar_69 = (tmpvar_68 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_3.x;
  tmpvar_70.y = worldBinormal_2.x;
  tmpvar_70.z = worldNormal_4.x;
  tmpvar_70.w = tmpvar_61.x;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_3.y;
  tmpvar_71.y = worldBinormal_2.y;
  tmpvar_71.z = worldNormal_4.y;
  tmpvar_71.w = tmpvar_61.y;
  highp vec4 tmpvar_72;
  tmpvar_72.x = worldTangent_3.z;
  tmpvar_72.y = worldBinormal_2.z;
  tmpvar_72.z = worldNormal_4.z;
  tmpvar_72.w = tmpvar_61.z;
  lowp vec4 tmpvar_73;
  tmpvar_73.w = 1.0;
  tmpvar_73.xyz = worldNormal_4;
  mediump vec4 normal_74;
  normal_74 = tmpvar_73;
  mediump vec3 x2_75;
  mediump vec4 tmpvar_76;
  tmpvar_76 = (normal_74.xyzz * normal_74.yzzx);
  x2_75.x = dot (unity_SHBr, tmpvar_76);
  x2_75.y = dot (unity_SHBg, tmpvar_76);
  x2_75.z = dot (unity_SHBb, tmpvar_76);
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_70;
  xlv_TEXCOORD1 = tmpvar_71;
  xlv_TEXCOORD2 = tmpvar_72;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
  xlv_TEXCOORD7 = (x2_75 + (unity_SHC.xyz * (
    (normal_74.x * normal_74.x)
   - 
    (normal_74.y * normal_74.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 blendColor_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  blendColor_10 = tmpvar_19;
  diffuseColor_11.xyz = mix (blendColor_10.xyz, diffuseColor_11.xyz, vec3(clamp (xlv_TEXCOORD5.z, 0.0, 1.0)));
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD0.xyz, tmpvar_22);
  worldN_3.x = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD1.xyz, tmpvar_22);
  worldN_3.y = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD2.xyz, tmpvar_22);
  worldN_3.z = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_26;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_27;
  normalWorld_27 = worldN_3;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = normalWorld_27;
  mediump vec3 x1_29;
  x1_29.x = dot (unity_SHAr, tmpvar_28);
  x1_29.y = dot (unity_SHAg, tmpvar_28);
  x1_29.z = dot (unity_SHAb, tmpvar_28);
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_32 = tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_8 * tmpvar_1) * diff_32);
  c_31.xyz = tmpvar_34;
  c_31.w = tmpvar_9;
  c_30.w = c_31.w;
  mediump vec3 tmpvar_35;
  tmpvar_35 = (c_31.xyz + (tmpvar_8 * (xlv_TEXCOORD7 + x1_29)));
  c_30.xyz = tmpvar_35;
  c_4.xyz = c_30.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
in vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
out mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_10;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.xy = _glesMultiTexCoord2.zw;
  tmpvar_15.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = tmpvar_1.xyz;
  FinalPosition_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = tmpvar_20;
      highp float fAdherenceScale_26;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((tmpvar_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        (mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_29.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (_glesVertex.xyz + ((tmpvar_27 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((tmpvar_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((
        ((tmpvar_37.x * tmpvar_37.y) * tmpvar_37.x)
       * tmpvar_37.y) * _ST_WindTurbulences.x));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_17 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp vec3 tmpvar_40;
      tmpvar_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_41;
      tmpvar_41 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_42;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (tmpvar_41 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((tmpvar_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      vPos_39 = (vPos_24 + ((tmpvar_40 * 
        (((mix (
          mix (tmpvar_47, fTarget_44, fAmount_43)
        , fTarget_44, fAmount_43) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_19 = vPos_24;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_19;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_52.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    vPos_48.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_53.x + (tmpvar_53.y * tmpvar_53.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_49)));
    vPos_48 = (normalize(vPos_48) * fLength_50);
    FinalPosition_19 = vPos_48;
  };
  tmpvar_16.xyz = FinalPosition_19;
  highp vec4 tmpvar_55;
  tmpvar_55 = (glstate_matrix_mvp * tmpvar_16);
  highp vec4 o_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (tmpvar_55 * 0.5);
  highp vec2 tmpvar_58;
  tmpvar_58.x = tmpvar_57.x;
  tmpvar_58.y = (tmpvar_57.y * _ProjectionParams.x);
  o_56.xy = (tmpvar_58 + tmpvar_57.w);
  o_56.zw = tmpvar_55.zw;
  highp vec3 tmpvar_59;
  tmpvar_59 = o_56.xyw;
  tmpvar_9 = tmpvar_59;
  highp vec2 tmpvar_60;
  tmpvar_60 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_60;
  tmpvar_5 = tmpvar_6;
  highp vec3 tmpvar_61;
  tmpvar_61 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_62;
  v_62.x = _World2Object[0].x;
  v_62.y = _World2Object[1].x;
  v_62.z = _World2Object[2].x;
  v_62.w = _World2Object[3].x;
  highp vec4 v_63;
  v_63.x = _World2Object[0].y;
  v_63.y = _World2Object[1].y;
  v_63.z = _World2Object[2].y;
  v_63.w = _World2Object[3].y;
  highp vec4 v_64;
  v_64.x = _World2Object[0].z;
  v_64.y = _World2Object[1].z;
  v_64.z = _World2Object[2].z;
  v_64.w = _World2Object[3].z;
  highp vec3 tmpvar_65;
  tmpvar_65 = normalize(((
    (v_62.xyz * _glesNormal.x)
   + 
    (v_63.xyz * _glesNormal.y)
  ) + (v_64.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_65;
  highp mat3 tmpvar_66;
  tmpvar_66[0] = _Object2World[0].xyz;
  tmpvar_66[1] = _Object2World[1].xyz;
  tmpvar_66[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((tmpvar_66 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_69;
  tmpvar_69 = (tmpvar_68 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_3.x;
  tmpvar_70.y = worldBinormal_2.x;
  tmpvar_70.z = worldNormal_4.x;
  tmpvar_70.w = tmpvar_61.x;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_3.y;
  tmpvar_71.y = worldBinormal_2.y;
  tmpvar_71.z = worldNormal_4.y;
  tmpvar_71.w = tmpvar_61.y;
  highp vec4 tmpvar_72;
  tmpvar_72.x = worldTangent_3.z;
  tmpvar_72.y = worldBinormal_2.z;
  tmpvar_72.z = worldNormal_4.z;
  tmpvar_72.w = tmpvar_61.z;
  lowp vec4 tmpvar_73;
  tmpvar_73.w = 1.0;
  tmpvar_73.xyz = worldNormal_4;
  mediump vec4 normal_74;
  normal_74 = tmpvar_73;
  mediump vec3 x2_75;
  mediump vec4 tmpvar_76;
  tmpvar_76 = (normal_74.xyzz * normal_74.yzzx);
  x2_75.x = dot (unity_SHBr, tmpvar_76);
  x2_75.y = dot (unity_SHBg, tmpvar_76);
  x2_75.z = dot (unity_SHBb, tmpvar_76);
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_70;
  xlv_TEXCOORD1 = tmpvar_71;
  xlv_TEXCOORD2 = tmpvar_72;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
  xlv_TEXCOORD7 = (x2_75 + (unity_SHC.xyz * (
    (normal_74.x * normal_74.x)
   - 
    (normal_74.y * normal_74.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
in mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 blendColor_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture (_MainTex, xlv_TEXCOORD5.xy);
  blendColor_10 = tmpvar_19;
  diffuseColor_11.xyz = mix (blendColor_10.xyz, diffuseColor_11.xyz, vec3(clamp (xlv_TEXCOORD5.z, 0.0, 1.0)));
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD0.xyz, tmpvar_22);
  worldN_3.x = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD1.xyz, tmpvar_22);
  worldN_3.y = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD2.xyz, tmpvar_22);
  worldN_3.z = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_26;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_27;
  normalWorld_27 = worldN_3;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = normalWorld_27;
  mediump vec3 x1_29;
  x1_29.x = dot (unity_SHAr, tmpvar_28);
  x1_29.y = dot (unity_SHAg, tmpvar_28);
  x1_29.z = dot (unity_SHAb, tmpvar_28);
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_32 = tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_8 * tmpvar_1) * diff_32);
  c_31.xyz = tmpvar_34;
  c_31.w = tmpvar_9;
  c_30.w = c_31.w;
  mediump vec3 tmpvar_35;
  tmpvar_35 = (c_31.xyz + (tmpvar_8 * (xlv_TEXCOORD7 + x1_29)));
  c_30.xyz = tmpvar_35;
  c_4.xyz = c_30.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_11;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.xy = _glesMultiTexCoord2.zw;
  tmpvar_16.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = tmpvar_1.xyz;
  FinalPosition_20 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = (_WindQuality * _WindEnabled);
  if ((tmpvar_22 > 0.0)) {
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_23 * _ST_WindVector.xyz));
    highp mat3 tmpvar_24;
    tmpvar_24[0] = _World2Object[0].xyz;
    tmpvar_24[1] = _World2Object[1].xyz;
    tmpvar_24[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_24 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_22 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    if ((tmpvar_22 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = tmpvar_21;
      highp float fAdherenceScale_27;
      highp vec3 tmpvar_28;
      tmpvar_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_29;
      tmpvar_29 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (tmpvar_29 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((tmpvar_29 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_29 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((tmpvar_29 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        (mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_30.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (_glesVertex.xyz + ((tmpvar_28 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((tmpvar_29 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((
        ((tmpvar_38.x * tmpvar_38.y) * tmpvar_38.x)
       * tmpvar_38.y) * _ST_WindTurbulences.x));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_18 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp vec3 tmpvar_41;
      tmpvar_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_42;
      tmpvar_42 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_43;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (tmpvar_42 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((tmpvar_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      vPos_40 = (vPos_25 + ((tmpvar_41 * 
        (((mix (
          mix (tmpvar_48, fTarget_45, fAmount_44)
        , fTarget_45, fAmount_44) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_20 = vPos_25;
  };
  if ((tmpvar_22 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_20;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_53.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    vPos_49.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_54.x + (tmpvar_54.y * tmpvar_54.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_50)));
    vPos_49 = (normalize(vPos_49) * fLength_51);
    FinalPosition_20 = vPos_49;
  };
  tmpvar_17.xyz = FinalPosition_20;
  highp vec4 tmpvar_56;
  tmpvar_56 = (glstate_matrix_mvp * tmpvar_17);
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (tmpvar_56 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = tmpvar_56.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  tmpvar_10 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_61;
  tmpvar_5 = tmpvar_7;
  highp vec3 tmpvar_62;
  tmpvar_62 = (_Object2World * tmpvar_17).xyz;
  highp vec4 v_63;
  v_63.x = _World2Object[0].x;
  v_63.y = _World2Object[1].x;
  v_63.z = _World2Object[2].x;
  v_63.w = _World2Object[3].x;
  highp vec4 v_64;
  v_64.x = _World2Object[0].y;
  v_64.y = _World2Object[1].y;
  v_64.z = _World2Object[2].y;
  v_64.w = _World2Object[3].y;
  highp vec4 v_65;
  v_65.x = _World2Object[0].z;
  v_65.y = _World2Object[1].z;
  v_65.z = _World2Object[2].z;
  v_65.w = _World2Object[3].z;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(((
    (v_63.xyz * _glesNormal.x)
   + 
    (v_64.xyz * _glesNormal.y)
  ) + (v_65.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_66;
  highp mat3 tmpvar_67;
  tmpvar_67[0] = _Object2World[0].xyz;
  tmpvar_67[1] = _Object2World[1].xyz;
  tmpvar_67[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((tmpvar_67 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_68;
  lowp vec3 tmpvar_69;
  tmpvar_69 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_70;
  tmpvar_70 = (tmpvar_69 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_3.x;
  tmpvar_71.y = worldBinormal_2.x;
  tmpvar_71.z = worldNormal_4.x;
  tmpvar_71.w = tmpvar_62.x;
  highp vec4 tmpvar_72;
  tmpvar_72.x = worldTangent_3.y;
  tmpvar_72.y = worldBinormal_2.y;
  tmpvar_72.z = worldNormal_4.y;
  tmpvar_72.w = tmpvar_62.y;
  highp vec4 tmpvar_73;
  tmpvar_73.x = worldTangent_3.z;
  tmpvar_73.y = worldBinormal_2.z;
  tmpvar_73.z = worldNormal_4.z;
  tmpvar_73.w = tmpvar_62.z;
  lowp vec4 tmpvar_74;
  tmpvar_74.w = 1.0;
  tmpvar_74.xyz = worldNormal_4;
  mediump vec4 normal_75;
  normal_75 = tmpvar_74;
  mediump vec3 x2_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (normal_75.xyzz * normal_75.yzzx);
  x2_76.x = dot (unity_SHBr, tmpvar_77);
  x2_76.y = dot (unity_SHBg, tmpvar_77);
  x2_76.z = dot (unity_SHBb, tmpvar_77);
  highp vec4 tmpvar_78;
  tmpvar_78 = (unity_World2Shadow[0] * (_Object2World * tmpvar_17));
  tmpvar_6 = tmpvar_78;
  gl_Position = (glstate_matrix_mvp * tmpvar_17);
  xlv_TEXCOORD0 = tmpvar_71;
  xlv_TEXCOORD1 = tmpvar_72;
  xlv_TEXCOORD2 = tmpvar_73;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_10;
  xlv_TEXCOORD7 = (x2_76 + (unity_SHC.xyz * (
    (normal_75.x * normal_75.x)
   - 
    (normal_75.y * normal_75.y)
  )));
  xlv_TEXCOORD8 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_TEXCOORD8;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  blendColor_11 = tmpvar_20;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD5.z, 0.0, 1.0)));
  mediump vec3 tmpvar_21;
  tmpvar_21 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_21 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_21.x, max (tmpvar_21.y, tmpvar_21.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_22;
  tmpvar_22 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_24;
  mediump float dist_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD8).x;
  dist_25 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (float((dist_25 > 
    (xlv_TEXCOORD8.z / xlv_TEXCOORD8.w)
  )), _LightShadowData.x);
  tmpvar_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD0.xyz, tmpvar_23);
  worldN_4.x = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD1.xyz, tmpvar_23);
  worldN_4.y = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD2.xyz, tmpvar_23);
  worldN_4.z = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_31;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_24;
  mediump vec3 normalWorld_32;
  normalWorld_32 = worldN_4;
  mediump vec3 tmpvar_33;
  mediump vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = normalWorld_32;
  mediump vec3 x1_35;
  x1_35.x = dot (unity_SHAr, tmpvar_34);
  x1_35.y = dot (unity_SHAg, tmpvar_34);
  x1_35.z = dot (unity_SHAb, tmpvar_34);
  tmpvar_33 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_33;
  lowp vec4 c_36;
  lowp vec4 c_37;
  lowp float diff_38;
  mediump float tmpvar_39;
  tmpvar_39 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_38 = tmpvar_39;
  mediump vec3 tmpvar_40;
  tmpvar_40 = ((tmpvar_9 * tmpvar_33) * diff_38);
  c_37.xyz = tmpvar_40;
  c_37.w = tmpvar_10;
  c_36.w = c_37.w;
  mediump vec3 tmpvar_41;
  tmpvar_41 = (c_37.xyz + (tmpvar_9 * (xlv_TEXCOORD7 + x1_35)));
  c_36.xyz = tmpvar_41;
  c_5.xyz = c_36.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_11;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.xy = _glesMultiTexCoord2.zw;
  tmpvar_16.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = tmpvar_1.xyz;
  FinalPosition_20 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = (_WindQuality * _WindEnabled);
  if ((tmpvar_22 > 0.0)) {
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_23 * _ST_WindVector.xyz));
    highp mat3 tmpvar_24;
    tmpvar_24[0] = _World2Object[0].xyz;
    tmpvar_24[1] = _World2Object[1].xyz;
    tmpvar_24[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_24 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_22 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    if ((tmpvar_22 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = tmpvar_21;
      highp float fAdherenceScale_27;
      highp vec3 tmpvar_28;
      tmpvar_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_29;
      tmpvar_29 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (tmpvar_29 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((tmpvar_29 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_29 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((tmpvar_29 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        (mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_30.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (_glesVertex.xyz + ((tmpvar_28 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((tmpvar_29 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((
        ((tmpvar_38.x * tmpvar_38.y) * tmpvar_38.x)
       * tmpvar_38.y) * _ST_WindTurbulences.x));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_18 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp vec3 tmpvar_41;
      tmpvar_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_42;
      tmpvar_42 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_43;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (tmpvar_42 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((tmpvar_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      vPos_40 = (vPos_25 + ((tmpvar_41 * 
        (((mix (
          mix (tmpvar_48, fTarget_45, fAmount_44)
        , fTarget_45, fAmount_44) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_20 = vPos_25;
  };
  if ((tmpvar_22 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_20;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_53.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    vPos_49.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_54.x + (tmpvar_54.y * tmpvar_54.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_50)));
    vPos_49 = (normalize(vPos_49) * fLength_51);
    FinalPosition_20 = vPos_49;
  };
  tmpvar_17.xyz = FinalPosition_20;
  highp vec4 tmpvar_56;
  tmpvar_56 = (glstate_matrix_mvp * tmpvar_17);
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (tmpvar_56 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = tmpvar_56.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  tmpvar_10 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_61;
  tmpvar_5 = tmpvar_7;
  highp vec3 tmpvar_62;
  tmpvar_62 = (_Object2World * tmpvar_17).xyz;
  highp vec4 v_63;
  v_63.x = _World2Object[0].x;
  v_63.y = _World2Object[1].x;
  v_63.z = _World2Object[2].x;
  v_63.w = _World2Object[3].x;
  highp vec4 v_64;
  v_64.x = _World2Object[0].y;
  v_64.y = _World2Object[1].y;
  v_64.z = _World2Object[2].y;
  v_64.w = _World2Object[3].y;
  highp vec4 v_65;
  v_65.x = _World2Object[0].z;
  v_65.y = _World2Object[1].z;
  v_65.z = _World2Object[2].z;
  v_65.w = _World2Object[3].z;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(((
    (v_63.xyz * _glesNormal.x)
   + 
    (v_64.xyz * _glesNormal.y)
  ) + (v_65.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_66;
  highp mat3 tmpvar_67;
  tmpvar_67[0] = _Object2World[0].xyz;
  tmpvar_67[1] = _Object2World[1].xyz;
  tmpvar_67[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((tmpvar_67 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_68;
  lowp vec3 tmpvar_69;
  tmpvar_69 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_70;
  tmpvar_70 = (tmpvar_69 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_3.x;
  tmpvar_71.y = worldBinormal_2.x;
  tmpvar_71.z = worldNormal_4.x;
  tmpvar_71.w = tmpvar_62.x;
  highp vec4 tmpvar_72;
  tmpvar_72.x = worldTangent_3.y;
  tmpvar_72.y = worldBinormal_2.y;
  tmpvar_72.z = worldNormal_4.y;
  tmpvar_72.w = tmpvar_62.y;
  highp vec4 tmpvar_73;
  tmpvar_73.x = worldTangent_3.z;
  tmpvar_73.y = worldBinormal_2.z;
  tmpvar_73.z = worldNormal_4.z;
  tmpvar_73.w = tmpvar_62.z;
  lowp vec4 tmpvar_74;
  tmpvar_74.w = 1.0;
  tmpvar_74.xyz = worldNormal_4;
  mediump vec3 tmpvar_75;
  mediump vec4 normal_76;
  normal_76 = tmpvar_74;
  mediump vec3 x2_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (normal_76.xyzz * normal_76.yzzx);
  x2_77.x = dot (unity_SHBr, tmpvar_78);
  x2_77.y = dot (unity_SHBg, tmpvar_78);
  x2_77.z = dot (unity_SHBb, tmpvar_78);
  tmpvar_75 = (x2_77 + (unity_SHC.xyz * (
    (normal_76.x * normal_76.x)
   - 
    (normal_76.y * normal_76.y)
  )));
  highp vec3 lightColor0_79;
  lightColor0_79 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_80;
  lightColor1_80 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_81;
  lightColor2_81 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_82;
  lightColor3_82 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_83;
  lightAttenSq_83 = unity_4LightAtten0;
  highp vec3 normal_84;
  normal_84 = worldNormal_4;
  highp vec4 tmpvar_85;
  tmpvar_85 = (unity_4LightPosX0 - tmpvar_62.x);
  highp vec4 tmpvar_86;
  tmpvar_86 = (unity_4LightPosY0 - tmpvar_62.y);
  highp vec4 tmpvar_87;
  tmpvar_87 = (unity_4LightPosZ0 - tmpvar_62.z);
  highp vec4 tmpvar_88;
  tmpvar_88 = (((tmpvar_85 * tmpvar_85) + (tmpvar_86 * tmpvar_86)) + (tmpvar_87 * tmpvar_87));
  highp vec4 tmpvar_89;
  tmpvar_89 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_85 * normal_84.x) + (tmpvar_86 * normal_84.y)) + (tmpvar_87 * normal_84.z))
   * 
    inversesqrt(tmpvar_88)
  )) * (1.0/((1.0 + 
    (tmpvar_88 * lightAttenSq_83)
  ))));
  highp vec3 tmpvar_90;
  tmpvar_90 = (tmpvar_75 + ((
    ((lightColor0_79 * tmpvar_89.x) + (lightColor1_80 * tmpvar_89.y))
   + 
    (lightColor2_81 * tmpvar_89.z)
  ) + (lightColor3_82 * tmpvar_89.w)));
  tmpvar_6 = tmpvar_90;
  gl_Position = (glstate_matrix_mvp * tmpvar_17);
  xlv_TEXCOORD0 = tmpvar_71;
  xlv_TEXCOORD1 = tmpvar_72;
  xlv_TEXCOORD2 = tmpvar_73;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_10;
  xlv_TEXCOORD7 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 blendColor_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  blendColor_10 = tmpvar_19;
  diffuseColor_11.xyz = mix (blendColor_10.xyz, diffuseColor_11.xyz, vec3(clamp (xlv_TEXCOORD5.z, 0.0, 1.0)));
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD0.xyz, tmpvar_22);
  worldN_3.x = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD1.xyz, tmpvar_22);
  worldN_3.y = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD2.xyz, tmpvar_22);
  worldN_3.z = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_26;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_27;
  normalWorld_27 = worldN_3;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = normalWorld_27;
  mediump vec3 x1_29;
  x1_29.x = dot (unity_SHAr, tmpvar_28);
  x1_29.y = dot (unity_SHAg, tmpvar_28);
  x1_29.z = dot (unity_SHAb, tmpvar_28);
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_32 = tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_8 * tmpvar_1) * diff_32);
  c_31.xyz = tmpvar_34;
  c_31.w = tmpvar_9;
  c_30.w = c_31.w;
  mediump vec3 tmpvar_35;
  tmpvar_35 = (c_31.xyz + (tmpvar_8 * (xlv_TEXCOORD7 + x1_29)));
  c_30.xyz = tmpvar_35;
  c_4.xyz = c_30.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
in vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
out mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_11;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.xy = _glesMultiTexCoord2.zw;
  tmpvar_16.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = tmpvar_1.xyz;
  FinalPosition_20 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = (_WindQuality * _WindEnabled);
  if ((tmpvar_22 > 0.0)) {
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_23 * _ST_WindVector.xyz));
    highp mat3 tmpvar_24;
    tmpvar_24[0] = _World2Object[0].xyz;
    tmpvar_24[1] = _World2Object[1].xyz;
    tmpvar_24[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_24 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_22 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    if ((tmpvar_22 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = tmpvar_21;
      highp float fAdherenceScale_27;
      highp vec3 tmpvar_28;
      tmpvar_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_29;
      tmpvar_29 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (tmpvar_29 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((tmpvar_29 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_29 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((tmpvar_29 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        (mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_30.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (_glesVertex.xyz + ((tmpvar_28 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((tmpvar_29 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((
        ((tmpvar_38.x * tmpvar_38.y) * tmpvar_38.x)
       * tmpvar_38.y) * _ST_WindTurbulences.x));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_18 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp vec3 tmpvar_41;
      tmpvar_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_42;
      tmpvar_42 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_43;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (tmpvar_42 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((tmpvar_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      vPos_40 = (vPos_25 + ((tmpvar_41 * 
        (((mix (
          mix (tmpvar_48, fTarget_45, fAmount_44)
        , fTarget_45, fAmount_44) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_20 = vPos_25;
  };
  if ((tmpvar_22 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_20;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_53.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    vPos_49.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_54.x + (tmpvar_54.y * tmpvar_54.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_50)));
    vPos_49 = (normalize(vPos_49) * fLength_51);
    FinalPosition_20 = vPos_49;
  };
  tmpvar_17.xyz = FinalPosition_20;
  highp vec4 tmpvar_56;
  tmpvar_56 = (glstate_matrix_mvp * tmpvar_17);
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (tmpvar_56 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = tmpvar_56.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  tmpvar_10 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_61;
  tmpvar_5 = tmpvar_7;
  highp vec3 tmpvar_62;
  tmpvar_62 = (_Object2World * tmpvar_17).xyz;
  highp vec4 v_63;
  v_63.x = _World2Object[0].x;
  v_63.y = _World2Object[1].x;
  v_63.z = _World2Object[2].x;
  v_63.w = _World2Object[3].x;
  highp vec4 v_64;
  v_64.x = _World2Object[0].y;
  v_64.y = _World2Object[1].y;
  v_64.z = _World2Object[2].y;
  v_64.w = _World2Object[3].y;
  highp vec4 v_65;
  v_65.x = _World2Object[0].z;
  v_65.y = _World2Object[1].z;
  v_65.z = _World2Object[2].z;
  v_65.w = _World2Object[3].z;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(((
    (v_63.xyz * _glesNormal.x)
   + 
    (v_64.xyz * _glesNormal.y)
  ) + (v_65.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_66;
  highp mat3 tmpvar_67;
  tmpvar_67[0] = _Object2World[0].xyz;
  tmpvar_67[1] = _Object2World[1].xyz;
  tmpvar_67[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((tmpvar_67 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_68;
  lowp vec3 tmpvar_69;
  tmpvar_69 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_70;
  tmpvar_70 = (tmpvar_69 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_3.x;
  tmpvar_71.y = worldBinormal_2.x;
  tmpvar_71.z = worldNormal_4.x;
  tmpvar_71.w = tmpvar_62.x;
  highp vec4 tmpvar_72;
  tmpvar_72.x = worldTangent_3.y;
  tmpvar_72.y = worldBinormal_2.y;
  tmpvar_72.z = worldNormal_4.y;
  tmpvar_72.w = tmpvar_62.y;
  highp vec4 tmpvar_73;
  tmpvar_73.x = worldTangent_3.z;
  tmpvar_73.y = worldBinormal_2.z;
  tmpvar_73.z = worldNormal_4.z;
  tmpvar_73.w = tmpvar_62.z;
  lowp vec4 tmpvar_74;
  tmpvar_74.w = 1.0;
  tmpvar_74.xyz = worldNormal_4;
  mediump vec3 tmpvar_75;
  mediump vec4 normal_76;
  normal_76 = tmpvar_74;
  mediump vec3 x2_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (normal_76.xyzz * normal_76.yzzx);
  x2_77.x = dot (unity_SHBr, tmpvar_78);
  x2_77.y = dot (unity_SHBg, tmpvar_78);
  x2_77.z = dot (unity_SHBb, tmpvar_78);
  tmpvar_75 = (x2_77 + (unity_SHC.xyz * (
    (normal_76.x * normal_76.x)
   - 
    (normal_76.y * normal_76.y)
  )));
  highp vec3 lightColor0_79;
  lightColor0_79 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_80;
  lightColor1_80 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_81;
  lightColor2_81 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_82;
  lightColor3_82 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_83;
  lightAttenSq_83 = unity_4LightAtten0;
  highp vec3 normal_84;
  normal_84 = worldNormal_4;
  highp vec4 tmpvar_85;
  tmpvar_85 = (unity_4LightPosX0 - tmpvar_62.x);
  highp vec4 tmpvar_86;
  tmpvar_86 = (unity_4LightPosY0 - tmpvar_62.y);
  highp vec4 tmpvar_87;
  tmpvar_87 = (unity_4LightPosZ0 - tmpvar_62.z);
  highp vec4 tmpvar_88;
  tmpvar_88 = (((tmpvar_85 * tmpvar_85) + (tmpvar_86 * tmpvar_86)) + (tmpvar_87 * tmpvar_87));
  highp vec4 tmpvar_89;
  tmpvar_89 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_85 * normal_84.x) + (tmpvar_86 * normal_84.y)) + (tmpvar_87 * normal_84.z))
   * 
    inversesqrt(tmpvar_88)
  )) * (1.0/((1.0 + 
    (tmpvar_88 * lightAttenSq_83)
  ))));
  highp vec3 tmpvar_90;
  tmpvar_90 = (tmpvar_75 + ((
    ((lightColor0_79 * tmpvar_89.x) + (lightColor1_80 * tmpvar_89.y))
   + 
    (lightColor2_81 * tmpvar_89.z)
  ) + (lightColor3_82 * tmpvar_89.w)));
  tmpvar_6 = tmpvar_90;
  gl_Position = (glstate_matrix_mvp * tmpvar_17);
  xlv_TEXCOORD0 = tmpvar_71;
  xlv_TEXCOORD1 = tmpvar_72;
  xlv_TEXCOORD2 = tmpvar_73;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_10;
  xlv_TEXCOORD7 = tmpvar_6;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
in mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 blendColor_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture (_MainTex, xlv_TEXCOORD5.xy);
  blendColor_10 = tmpvar_19;
  diffuseColor_11.xyz = mix (blendColor_10.xyz, diffuseColor_11.xyz, vec3(clamp (xlv_TEXCOORD5.z, 0.0, 1.0)));
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD0.xyz, tmpvar_22);
  worldN_3.x = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD1.xyz, tmpvar_22);
  worldN_3.y = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD2.xyz, tmpvar_22);
  worldN_3.z = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_26;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_27;
  normalWorld_27 = worldN_3;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = normalWorld_27;
  mediump vec3 x1_29;
  x1_29.x = dot (unity_SHAr, tmpvar_28);
  x1_29.y = dot (unity_SHAg, tmpvar_28);
  x1_29.z = dot (unity_SHAb, tmpvar_28);
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_32 = tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_8 * tmpvar_1) * diff_32);
  c_31.xyz = tmpvar_34;
  c_31.w = tmpvar_9;
  c_30.w = c_31.w;
  mediump vec3 tmpvar_35;
  tmpvar_35 = (c_31.xyz + (tmpvar_8 * (xlv_TEXCOORD7 + x1_29)));
  c_30.xyz = tmpvar_35;
  c_4.xyz = c_30.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  mediump vec3 tmpvar_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_12;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_13;
  tmpvar_13 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_13;
  highp float cse_14;
  cse_14 = _Object2World[3].x;
  highp float cse_15;
  cse_15 = _Object2World[3].y;
  highp float tmpvar_16;
  tmpvar_16 = clamp (((
    fract(((cse_14 + cse_15) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17.xy = _glesMultiTexCoord2.zw;
  tmpvar_17.z = _glesMultiTexCoord1.w;
  tmpvar_10 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_19;
  highp vec3 vRotatedWindVector_20;
  highp vec3 FinalPosition_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = tmpvar_1.xyz;
  FinalPosition_21 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = (_WindQuality * _WindEnabled);
  if ((tmpvar_23 > 0.0)) {
    highp mat3 tmpvar_24;
    tmpvar_24[0] = _World2Object[0].xyz;
    tmpvar_24[1] = _World2Object[1].xyz;
    tmpvar_24[2] = _World2Object[2].xyz;
    vRotatedWindVector_20 = normalize((tmpvar_24 * _ST_WindVector.xyz));
    highp mat3 tmpvar_25;
    tmpvar_25[0] = _World2Object[0].xyz;
    tmpvar_25[1] = _World2Object[1].xyz;
    tmpvar_25[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_19 = (normalize((tmpvar_25 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_20 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_19 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_23 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    if ((tmpvar_23 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = tmpvar_22;
      highp float fAdherenceScale_28;
      highp vec3 tmpvar_29;
      tmpvar_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_30;
      tmpvar_30 = (_ST_WindBranch.x + (cse_14 + cse_15));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (tmpvar_30 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((tmpvar_30 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_30 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((tmpvar_30 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        (mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_31.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (_glesVertex.xyz + ((tmpvar_29 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((tmpvar_30 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((
        ((tmpvar_39.x * tmpvar_39.y) * tmpvar_39.x)
       * tmpvar_39.y) * _ST_WindTurbulences.x));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_19 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp vec3 tmpvar_42;
      tmpvar_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_43;
      tmpvar_43 = (_ST_WindBranch.x + (cse_14 + cse_15));
      highp vec4 vOscillations_44;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (tmpvar_43 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((tmpvar_43 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_43 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      vPos_41 = (vPos_26 + ((tmpvar_42 * 
        (((mix (
          mix (tmpvar_49, fTarget_46, fAmount_45)
        , fTarget_46, fAmount_45) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_21 = vPos_26;
  };
  if ((tmpvar_23 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_21;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_21, FinalPosition_21));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_21.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (cse_14 + _ST_WindGlobal.x);
    tmpvar_54.y = (cse_15 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    vPos_50.xz = (FinalPosition_21.xz + (vRotatedWindVector_20.xz * (
      ((_ST_WindGlobal.y * (tmpvar_55.x + (tmpvar_55.y * tmpvar_55.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_51)));
    vPos_50 = (normalize(vPos_50) * fLength_52);
    FinalPosition_21 = vPos_50;
  };
  tmpvar_18.xyz = FinalPosition_21;
  highp vec4 tmpvar_57;
  tmpvar_57 = (glstate_matrix_mvp * tmpvar_18);
  highp vec4 o_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (tmpvar_57 * 0.5);
  highp vec2 tmpvar_60;
  tmpvar_60.x = tmpvar_59.x;
  tmpvar_60.y = (tmpvar_59.y * _ProjectionParams.x);
  o_58.xy = (tmpvar_60 + tmpvar_59.w);
  o_58.zw = tmpvar_57.zw;
  highp vec3 tmpvar_61;
  tmpvar_61 = o_58.xyw;
  tmpvar_11 = tmpvar_61;
  highp vec2 tmpvar_62;
  tmpvar_62 = (tmpvar_11.xy * (_ScreenParams.xy * 0.25));
  tmpvar_11.xy = tmpvar_62;
  tmpvar_5 = tmpvar_8;
  highp vec3 tmpvar_63;
  tmpvar_63 = (_Object2World * tmpvar_18).xyz;
  highp vec4 v_64;
  v_64.x = _World2Object[0].x;
  v_64.y = _World2Object[1].x;
  v_64.z = _World2Object[2].x;
  v_64.w = _World2Object[3].x;
  highp vec4 v_65;
  v_65.x = _World2Object[0].y;
  v_65.y = _World2Object[1].y;
  v_65.z = _World2Object[2].y;
  v_65.w = _World2Object[3].y;
  highp vec4 v_66;
  v_66.x = _World2Object[0].z;
  v_66.y = _World2Object[1].z;
  v_66.z = _World2Object[2].z;
  v_66.w = _World2Object[3].z;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize(((
    (v_64.xyz * _glesNormal.x)
   + 
    (v_65.xyz * _glesNormal.y)
  ) + (v_66.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_67;
  highp mat3 tmpvar_68;
  tmpvar_68[0] = _Object2World[0].xyz;
  tmpvar_68[1] = _Object2World[1].xyz;
  tmpvar_68[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((tmpvar_68 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_69;
  lowp vec3 tmpvar_70;
  tmpvar_70 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_71;
  tmpvar_71 = (tmpvar_70 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72.x = worldTangent_3.x;
  tmpvar_72.y = worldBinormal_2.x;
  tmpvar_72.z = worldNormal_4.x;
  tmpvar_72.w = tmpvar_63.x;
  highp vec4 tmpvar_73;
  tmpvar_73.x = worldTangent_3.y;
  tmpvar_73.y = worldBinormal_2.y;
  tmpvar_73.z = worldNormal_4.y;
  tmpvar_73.w = tmpvar_63.y;
  highp vec4 tmpvar_74;
  tmpvar_74.x = worldTangent_3.z;
  tmpvar_74.y = worldBinormal_2.z;
  tmpvar_74.z = worldNormal_4.z;
  tmpvar_74.w = tmpvar_63.z;
  lowp vec4 tmpvar_75;
  tmpvar_75.w = 1.0;
  tmpvar_75.xyz = worldNormal_4;
  mediump vec3 tmpvar_76;
  mediump vec4 normal_77;
  normal_77 = tmpvar_75;
  mediump vec3 x2_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (normal_77.xyzz * normal_77.yzzx);
  x2_78.x = dot (unity_SHBr, tmpvar_79);
  x2_78.y = dot (unity_SHBg, tmpvar_79);
  x2_78.z = dot (unity_SHBb, tmpvar_79);
  tmpvar_76 = (x2_78 + (unity_SHC.xyz * (
    (normal_77.x * normal_77.x)
   - 
    (normal_77.y * normal_77.y)
  )));
  highp vec3 lightColor0_80;
  lightColor0_80 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_81;
  lightColor1_81 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_82;
  lightColor2_82 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_83;
  lightColor3_83 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_84;
  lightAttenSq_84 = unity_4LightAtten0;
  highp vec3 normal_85;
  normal_85 = worldNormal_4;
  highp vec4 tmpvar_86;
  tmpvar_86 = (unity_4LightPosX0 - tmpvar_63.x);
  highp vec4 tmpvar_87;
  tmpvar_87 = (unity_4LightPosY0 - tmpvar_63.y);
  highp vec4 tmpvar_88;
  tmpvar_88 = (unity_4LightPosZ0 - tmpvar_63.z);
  highp vec4 tmpvar_89;
  tmpvar_89 = (((tmpvar_86 * tmpvar_86) + (tmpvar_87 * tmpvar_87)) + (tmpvar_88 * tmpvar_88));
  highp vec4 tmpvar_90;
  tmpvar_90 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_86 * normal_85.x) + (tmpvar_87 * normal_85.y)) + (tmpvar_88 * normal_85.z))
   * 
    inversesqrt(tmpvar_89)
  )) * (1.0/((1.0 + 
    (tmpvar_89 * lightAttenSq_84)
  ))));
  highp vec3 tmpvar_91;
  tmpvar_91 = (tmpvar_76 + ((
    ((lightColor0_80 * tmpvar_90.x) + (lightColor1_81 * tmpvar_90.y))
   + 
    (lightColor2_82 * tmpvar_90.z)
  ) + (lightColor3_83 * tmpvar_90.w)));
  tmpvar_6 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = (unity_World2Shadow[0] * (_Object2World * tmpvar_18));
  tmpvar_7 = tmpvar_92;
  gl_Position = (glstate_matrix_mvp * tmpvar_18);
  xlv_TEXCOORD0 = tmpvar_72;
  xlv_TEXCOORD1 = tmpvar_73;
  xlv_TEXCOORD2 = tmpvar_74;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_11;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_TEXCOORD8;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  blendColor_11 = tmpvar_20;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD5.z, 0.0, 1.0)));
  mediump vec3 tmpvar_21;
  tmpvar_21 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_21 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_21.x, max (tmpvar_21.y, tmpvar_21.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_22;
  tmpvar_22 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_24;
  mediump float dist_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD8).x;
  dist_25 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (float((dist_25 > 
    (xlv_TEXCOORD8.z / xlv_TEXCOORD8.w)
  )), _LightShadowData.x);
  tmpvar_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD0.xyz, tmpvar_23);
  worldN_4.x = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD1.xyz, tmpvar_23);
  worldN_4.y = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD2.xyz, tmpvar_23);
  worldN_4.z = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_31;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_24;
  mediump vec3 normalWorld_32;
  normalWorld_32 = worldN_4;
  mediump vec3 tmpvar_33;
  mediump vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = normalWorld_32;
  mediump vec3 x1_35;
  x1_35.x = dot (unity_SHAr, tmpvar_34);
  x1_35.y = dot (unity_SHAg, tmpvar_34);
  x1_35.z = dot (unity_SHAb, tmpvar_34);
  tmpvar_33 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_33;
  lowp vec4 c_36;
  lowp vec4 c_37;
  lowp float diff_38;
  mediump float tmpvar_39;
  tmpvar_39 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_38 = tmpvar_39;
  mediump vec3 tmpvar_40;
  tmpvar_40 = ((tmpvar_9 * tmpvar_33) * diff_38);
  c_37.xyz = tmpvar_40;
  c_37.w = tmpvar_10;
  c_36.w = c_37.w;
  mediump vec3 tmpvar_41;
  tmpvar_41 = (c_37.xyz + (tmpvar_9 * (xlv_TEXCOORD7 + x1_35)));
  c_36.xyz = tmpvar_41;
  c_5.xyz = c_36.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_11;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.xy = _glesMultiTexCoord2.zw;
  tmpvar_16.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = tmpvar_1.xyz;
  FinalPosition_20 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = (_WindQuality * _WindEnabled);
  if ((tmpvar_22 > 0.0)) {
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_23 * _ST_WindVector.xyz));
    highp mat3 tmpvar_24;
    tmpvar_24[0] = _World2Object[0].xyz;
    tmpvar_24[1] = _World2Object[1].xyz;
    tmpvar_24[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_24 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_22 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    if ((tmpvar_22 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = tmpvar_21;
      highp float fAdherenceScale_27;
      highp vec3 tmpvar_28;
      tmpvar_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_29;
      tmpvar_29 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (tmpvar_29 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((tmpvar_29 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_29 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((tmpvar_29 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        (mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_30.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (_glesVertex.xyz + ((tmpvar_28 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((tmpvar_29 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((
        ((tmpvar_38.x * tmpvar_38.y) * tmpvar_38.x)
       * tmpvar_38.y) * _ST_WindTurbulences.x));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_18 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp vec3 tmpvar_41;
      tmpvar_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_42;
      tmpvar_42 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_43;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (tmpvar_42 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((tmpvar_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      vPos_40 = (vPos_25 + ((tmpvar_41 * 
        (((mix (
          mix (tmpvar_48, fTarget_45, fAmount_44)
        , fTarget_45, fAmount_44) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_20 = vPos_25;
  };
  if ((tmpvar_22 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_20;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_53.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    vPos_49.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_54.x + (tmpvar_54.y * tmpvar_54.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_50)));
    vPos_49 = (normalize(vPos_49) * fLength_51);
    FinalPosition_20 = vPos_49;
  };
  tmpvar_17.xyz = FinalPosition_20;
  highp vec4 tmpvar_56;
  tmpvar_56 = (glstate_matrix_mvp * tmpvar_17);
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (tmpvar_56 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = tmpvar_56.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  tmpvar_10 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_61;
  tmpvar_5 = tmpvar_7;
  highp vec3 tmpvar_62;
  tmpvar_62 = (_Object2World * tmpvar_17).xyz;
  highp vec4 v_63;
  v_63.x = _World2Object[0].x;
  v_63.y = _World2Object[1].x;
  v_63.z = _World2Object[2].x;
  v_63.w = _World2Object[3].x;
  highp vec4 v_64;
  v_64.x = _World2Object[0].y;
  v_64.y = _World2Object[1].y;
  v_64.z = _World2Object[2].y;
  v_64.w = _World2Object[3].y;
  highp vec4 v_65;
  v_65.x = _World2Object[0].z;
  v_65.y = _World2Object[1].z;
  v_65.z = _World2Object[2].z;
  v_65.w = _World2Object[3].z;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(((
    (v_63.xyz * _glesNormal.x)
   + 
    (v_64.xyz * _glesNormal.y)
  ) + (v_65.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_66;
  highp mat3 tmpvar_67;
  tmpvar_67[0] = _Object2World[0].xyz;
  tmpvar_67[1] = _Object2World[1].xyz;
  tmpvar_67[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((tmpvar_67 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_68;
  lowp vec3 tmpvar_69;
  tmpvar_69 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_70;
  tmpvar_70 = (tmpvar_69 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_3.x;
  tmpvar_71.y = worldBinormal_2.x;
  tmpvar_71.z = worldNormal_4.x;
  tmpvar_71.w = tmpvar_62.x;
  highp vec4 tmpvar_72;
  tmpvar_72.x = worldTangent_3.y;
  tmpvar_72.y = worldBinormal_2.y;
  tmpvar_72.z = worldNormal_4.y;
  tmpvar_72.w = tmpvar_62.y;
  highp vec4 tmpvar_73;
  tmpvar_73.x = worldTangent_3.z;
  tmpvar_73.y = worldBinormal_2.z;
  tmpvar_73.z = worldNormal_4.z;
  tmpvar_73.w = tmpvar_62.z;
  lowp vec4 tmpvar_74;
  tmpvar_74.w = 1.0;
  tmpvar_74.xyz = worldNormal_4;
  mediump vec4 normal_75;
  normal_75 = tmpvar_74;
  mediump vec3 x2_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (normal_75.xyzz * normal_75.yzzx);
  x2_76.x = dot (unity_SHBr, tmpvar_77);
  x2_76.y = dot (unity_SHBg, tmpvar_77);
  x2_76.z = dot (unity_SHBb, tmpvar_77);
  highp vec4 tmpvar_78;
  tmpvar_78 = (unity_World2Shadow[0] * (_Object2World * tmpvar_17));
  tmpvar_6 = tmpvar_78;
  gl_Position = (glstate_matrix_mvp * tmpvar_17);
  xlv_TEXCOORD0 = tmpvar_71;
  xlv_TEXCOORD1 = tmpvar_72;
  xlv_TEXCOORD2 = tmpvar_73;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_10;
  xlv_TEXCOORD7 = (x2_76 + (unity_SHC.xyz * (
    (normal_75.x * normal_75.x)
   - 
    (normal_75.y * normal_75.y)
  )));
  xlv_TEXCOORD8 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_TEXCOORD8;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  blendColor_11 = tmpvar_20;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD5.z, 0.0, 1.0)));
  mediump vec3 tmpvar_21;
  tmpvar_21 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_21 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_21.x, max (tmpvar_21.y, tmpvar_21.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_22;
  tmpvar_22 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_24;
  lowp float tmpvar_25;
  tmpvar_25 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD8.xyz);
  mediump float tmpvar_26;
  tmpvar_26 = (_LightShadowData.x + (tmpvar_25 * (1.0 - _LightShadowData.x)));
  shadow_24 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD0.xyz, tmpvar_23);
  worldN_4.x = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD1.xyz, tmpvar_23);
  worldN_4.y = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD2.xyz, tmpvar_23);
  worldN_4.z = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_30;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_24;
  mediump vec3 normalWorld_31;
  normalWorld_31 = worldN_4;
  mediump vec3 tmpvar_32;
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = normalWorld_31;
  mediump vec3 x1_34;
  x1_34.x = dot (unity_SHAr, tmpvar_33);
  x1_34.y = dot (unity_SHAg, tmpvar_33);
  x1_34.z = dot (unity_SHAb, tmpvar_33);
  tmpvar_32 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_32;
  lowp vec4 c_35;
  lowp vec4 c_36;
  lowp float diff_37;
  mediump float tmpvar_38;
  tmpvar_38 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_37 = tmpvar_38;
  mediump vec3 tmpvar_39;
  tmpvar_39 = ((tmpvar_9 * tmpvar_32) * diff_37);
  c_36.xyz = tmpvar_39;
  c_36.w = tmpvar_10;
  c_35.w = c_36.w;
  mediump vec3 tmpvar_40;
  tmpvar_40 = (c_36.xyz + (tmpvar_9 * (xlv_TEXCOORD7 + x1_34)));
  c_35.xyz = tmpvar_40;
  c_5.xyz = c_35.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
in vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
out mediump vec3 xlv_TEXCOORD7;
out mediump vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_11;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.xy = _glesMultiTexCoord2.zw;
  tmpvar_16.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = tmpvar_1.xyz;
  FinalPosition_20 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = (_WindQuality * _WindEnabled);
  if ((tmpvar_22 > 0.0)) {
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_23 * _ST_WindVector.xyz));
    highp mat3 tmpvar_24;
    tmpvar_24[0] = _World2Object[0].xyz;
    tmpvar_24[1] = _World2Object[1].xyz;
    tmpvar_24[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_24 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_22 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    if ((tmpvar_22 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = tmpvar_21;
      highp float fAdherenceScale_27;
      highp vec3 tmpvar_28;
      tmpvar_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_29;
      tmpvar_29 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (tmpvar_29 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((tmpvar_29 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_29 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((tmpvar_29 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        (mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_30.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (_glesVertex.xyz + ((tmpvar_28 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((tmpvar_29 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((
        ((tmpvar_38.x * tmpvar_38.y) * tmpvar_38.x)
       * tmpvar_38.y) * _ST_WindTurbulences.x));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_18 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp vec3 tmpvar_41;
      tmpvar_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_42;
      tmpvar_42 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_43;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (tmpvar_42 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((tmpvar_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      vPos_40 = (vPos_25 + ((tmpvar_41 * 
        (((mix (
          mix (tmpvar_48, fTarget_45, fAmount_44)
        , fTarget_45, fAmount_44) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_20 = vPos_25;
  };
  if ((tmpvar_22 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_20;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_53.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    vPos_49.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_54.x + (tmpvar_54.y * tmpvar_54.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_50)));
    vPos_49 = (normalize(vPos_49) * fLength_51);
    FinalPosition_20 = vPos_49;
  };
  tmpvar_17.xyz = FinalPosition_20;
  highp vec4 tmpvar_56;
  tmpvar_56 = (glstate_matrix_mvp * tmpvar_17);
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (tmpvar_56 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = tmpvar_56.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  tmpvar_10 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_61;
  tmpvar_5 = tmpvar_7;
  highp vec3 tmpvar_62;
  tmpvar_62 = (_Object2World * tmpvar_17).xyz;
  highp vec4 v_63;
  v_63.x = _World2Object[0].x;
  v_63.y = _World2Object[1].x;
  v_63.z = _World2Object[2].x;
  v_63.w = _World2Object[3].x;
  highp vec4 v_64;
  v_64.x = _World2Object[0].y;
  v_64.y = _World2Object[1].y;
  v_64.z = _World2Object[2].y;
  v_64.w = _World2Object[3].y;
  highp vec4 v_65;
  v_65.x = _World2Object[0].z;
  v_65.y = _World2Object[1].z;
  v_65.z = _World2Object[2].z;
  v_65.w = _World2Object[3].z;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(((
    (v_63.xyz * _glesNormal.x)
   + 
    (v_64.xyz * _glesNormal.y)
  ) + (v_65.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_66;
  highp mat3 tmpvar_67;
  tmpvar_67[0] = _Object2World[0].xyz;
  tmpvar_67[1] = _Object2World[1].xyz;
  tmpvar_67[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((tmpvar_67 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_68;
  lowp vec3 tmpvar_69;
  tmpvar_69 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_70;
  tmpvar_70 = (tmpvar_69 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_3.x;
  tmpvar_71.y = worldBinormal_2.x;
  tmpvar_71.z = worldNormal_4.x;
  tmpvar_71.w = tmpvar_62.x;
  highp vec4 tmpvar_72;
  tmpvar_72.x = worldTangent_3.y;
  tmpvar_72.y = worldBinormal_2.y;
  tmpvar_72.z = worldNormal_4.y;
  tmpvar_72.w = tmpvar_62.y;
  highp vec4 tmpvar_73;
  tmpvar_73.x = worldTangent_3.z;
  tmpvar_73.y = worldBinormal_2.z;
  tmpvar_73.z = worldNormal_4.z;
  tmpvar_73.w = tmpvar_62.z;
  lowp vec4 tmpvar_74;
  tmpvar_74.w = 1.0;
  tmpvar_74.xyz = worldNormal_4;
  mediump vec4 normal_75;
  normal_75 = tmpvar_74;
  mediump vec3 x2_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (normal_75.xyzz * normal_75.yzzx);
  x2_76.x = dot (unity_SHBr, tmpvar_77);
  x2_76.y = dot (unity_SHBg, tmpvar_77);
  x2_76.z = dot (unity_SHBb, tmpvar_77);
  highp vec4 tmpvar_78;
  tmpvar_78 = (unity_World2Shadow[0] * (_Object2World * tmpvar_17));
  tmpvar_6 = tmpvar_78;
  gl_Position = (glstate_matrix_mvp * tmpvar_17);
  xlv_TEXCOORD0 = tmpvar_71;
  xlv_TEXCOORD1 = tmpvar_72;
  xlv_TEXCOORD2 = tmpvar_73;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_10;
  xlv_TEXCOORD7 = (x2_76 + (unity_SHC.xyz * (
    (normal_75.x * normal_75.x)
   - 
    (normal_75.y * normal_75.y)
  )));
  xlv_TEXCOORD8 = tmpvar_6;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
in mediump vec3 xlv_TEXCOORD7;
in mediump vec4 xlv_TEXCOORD8;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture (_MainTex, xlv_TEXCOORD5.xy);
  blendColor_11 = tmpvar_20;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD5.z, 0.0, 1.0)));
  mediump vec3 tmpvar_21;
  tmpvar_21 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_21 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_21.x, max (tmpvar_21.y, tmpvar_21.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_22;
  tmpvar_22 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_24;
  mediump float tmpvar_25;
  tmpvar_25 = texture (_ShadowMapTexture, xlv_TEXCOORD8.xyz);
  lowp float tmpvar_26;
  tmpvar_26 = tmpvar_25;
  mediump float tmpvar_27;
  tmpvar_27 = (_LightShadowData.x + (tmpvar_26 * (1.0 - _LightShadowData.x)));
  shadow_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD0.xyz, tmpvar_23);
  worldN_4.x = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD1.xyz, tmpvar_23);
  worldN_4.y = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD2.xyz, tmpvar_23);
  worldN_4.z = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_31;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_24;
  mediump vec3 normalWorld_32;
  normalWorld_32 = worldN_4;
  mediump vec3 tmpvar_33;
  mediump vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = normalWorld_32;
  mediump vec3 x1_35;
  x1_35.x = dot (unity_SHAr, tmpvar_34);
  x1_35.y = dot (unity_SHAg, tmpvar_34);
  x1_35.z = dot (unity_SHAb, tmpvar_34);
  tmpvar_33 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_33;
  lowp vec4 c_36;
  lowp vec4 c_37;
  lowp float diff_38;
  mediump float tmpvar_39;
  tmpvar_39 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_38 = tmpvar_39;
  mediump vec3 tmpvar_40;
  tmpvar_40 = ((tmpvar_9 * tmpvar_33) * diff_38);
  c_37.xyz = tmpvar_40;
  c_37.w = tmpvar_10;
  c_36.w = c_37.w;
  mediump vec3 tmpvar_41;
  tmpvar_41 = (c_37.xyz + (tmpvar_9 * (xlv_TEXCOORD7 + x1_35)));
  c_36.xyz = tmpvar_41;
  c_5.xyz = c_36.xyz;
  c_5.w = 1.0;
  _glesFragData[0] = c_5;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  mediump vec3 tmpvar_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_12;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_13;
  tmpvar_13 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_13;
  highp float cse_14;
  cse_14 = _Object2World[3].x;
  highp float cse_15;
  cse_15 = _Object2World[3].y;
  highp float tmpvar_16;
  tmpvar_16 = clamp (((
    fract(((cse_14 + cse_15) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17.xy = _glesMultiTexCoord2.zw;
  tmpvar_17.z = _glesMultiTexCoord1.w;
  tmpvar_10 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_19;
  highp vec3 vRotatedWindVector_20;
  highp vec3 FinalPosition_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = tmpvar_1.xyz;
  FinalPosition_21 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = (_WindQuality * _WindEnabled);
  if ((tmpvar_23 > 0.0)) {
    highp mat3 tmpvar_24;
    tmpvar_24[0] = _World2Object[0].xyz;
    tmpvar_24[1] = _World2Object[1].xyz;
    tmpvar_24[2] = _World2Object[2].xyz;
    vRotatedWindVector_20 = normalize((tmpvar_24 * _ST_WindVector.xyz));
    highp mat3 tmpvar_25;
    tmpvar_25[0] = _World2Object[0].xyz;
    tmpvar_25[1] = _World2Object[1].xyz;
    tmpvar_25[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_19 = (normalize((tmpvar_25 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_20 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_19 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_23 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    if ((tmpvar_23 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = tmpvar_22;
      highp float fAdherenceScale_28;
      highp vec3 tmpvar_29;
      tmpvar_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_30;
      tmpvar_30 = (_ST_WindBranch.x + (cse_14 + cse_15));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (tmpvar_30 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((tmpvar_30 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_30 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((tmpvar_30 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        (mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_31.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (_glesVertex.xyz + ((tmpvar_29 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((tmpvar_30 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((
        ((tmpvar_39.x * tmpvar_39.y) * tmpvar_39.x)
       * tmpvar_39.y) * _ST_WindTurbulences.x));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_19 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp vec3 tmpvar_42;
      tmpvar_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_43;
      tmpvar_43 = (_ST_WindBranch.x + (cse_14 + cse_15));
      highp vec4 vOscillations_44;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (tmpvar_43 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((tmpvar_43 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_43 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      vPos_41 = (vPos_26 + ((tmpvar_42 * 
        (((mix (
          mix (tmpvar_49, fTarget_46, fAmount_45)
        , fTarget_46, fAmount_45) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_21 = vPos_26;
  };
  if ((tmpvar_23 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_21;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_21, FinalPosition_21));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_21.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (cse_14 + _ST_WindGlobal.x);
    tmpvar_54.y = (cse_15 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    vPos_50.xz = (FinalPosition_21.xz + (vRotatedWindVector_20.xz * (
      ((_ST_WindGlobal.y * (tmpvar_55.x + (tmpvar_55.y * tmpvar_55.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_51)));
    vPos_50 = (normalize(vPos_50) * fLength_52);
    FinalPosition_21 = vPos_50;
  };
  tmpvar_18.xyz = FinalPosition_21;
  highp vec4 tmpvar_57;
  tmpvar_57 = (glstate_matrix_mvp * tmpvar_18);
  highp vec4 o_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (tmpvar_57 * 0.5);
  highp vec2 tmpvar_60;
  tmpvar_60.x = tmpvar_59.x;
  tmpvar_60.y = (tmpvar_59.y * _ProjectionParams.x);
  o_58.xy = (tmpvar_60 + tmpvar_59.w);
  o_58.zw = tmpvar_57.zw;
  highp vec3 tmpvar_61;
  tmpvar_61 = o_58.xyw;
  tmpvar_11 = tmpvar_61;
  highp vec2 tmpvar_62;
  tmpvar_62 = (tmpvar_11.xy * (_ScreenParams.xy * 0.25));
  tmpvar_11.xy = tmpvar_62;
  tmpvar_5 = tmpvar_8;
  highp vec3 tmpvar_63;
  tmpvar_63 = (_Object2World * tmpvar_18).xyz;
  highp vec4 v_64;
  v_64.x = _World2Object[0].x;
  v_64.y = _World2Object[1].x;
  v_64.z = _World2Object[2].x;
  v_64.w = _World2Object[3].x;
  highp vec4 v_65;
  v_65.x = _World2Object[0].y;
  v_65.y = _World2Object[1].y;
  v_65.z = _World2Object[2].y;
  v_65.w = _World2Object[3].y;
  highp vec4 v_66;
  v_66.x = _World2Object[0].z;
  v_66.y = _World2Object[1].z;
  v_66.z = _World2Object[2].z;
  v_66.w = _World2Object[3].z;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize(((
    (v_64.xyz * _glesNormal.x)
   + 
    (v_65.xyz * _glesNormal.y)
  ) + (v_66.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_67;
  highp mat3 tmpvar_68;
  tmpvar_68[0] = _Object2World[0].xyz;
  tmpvar_68[1] = _Object2World[1].xyz;
  tmpvar_68[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((tmpvar_68 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_69;
  lowp vec3 tmpvar_70;
  tmpvar_70 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_71;
  tmpvar_71 = (tmpvar_70 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72.x = worldTangent_3.x;
  tmpvar_72.y = worldBinormal_2.x;
  tmpvar_72.z = worldNormal_4.x;
  tmpvar_72.w = tmpvar_63.x;
  highp vec4 tmpvar_73;
  tmpvar_73.x = worldTangent_3.y;
  tmpvar_73.y = worldBinormal_2.y;
  tmpvar_73.z = worldNormal_4.y;
  tmpvar_73.w = tmpvar_63.y;
  highp vec4 tmpvar_74;
  tmpvar_74.x = worldTangent_3.z;
  tmpvar_74.y = worldBinormal_2.z;
  tmpvar_74.z = worldNormal_4.z;
  tmpvar_74.w = tmpvar_63.z;
  lowp vec4 tmpvar_75;
  tmpvar_75.w = 1.0;
  tmpvar_75.xyz = worldNormal_4;
  mediump vec3 tmpvar_76;
  mediump vec4 normal_77;
  normal_77 = tmpvar_75;
  mediump vec3 x2_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (normal_77.xyzz * normal_77.yzzx);
  x2_78.x = dot (unity_SHBr, tmpvar_79);
  x2_78.y = dot (unity_SHBg, tmpvar_79);
  x2_78.z = dot (unity_SHBb, tmpvar_79);
  tmpvar_76 = (x2_78 + (unity_SHC.xyz * (
    (normal_77.x * normal_77.x)
   - 
    (normal_77.y * normal_77.y)
  )));
  highp vec3 lightColor0_80;
  lightColor0_80 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_81;
  lightColor1_81 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_82;
  lightColor2_82 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_83;
  lightColor3_83 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_84;
  lightAttenSq_84 = unity_4LightAtten0;
  highp vec3 normal_85;
  normal_85 = worldNormal_4;
  highp vec4 tmpvar_86;
  tmpvar_86 = (unity_4LightPosX0 - tmpvar_63.x);
  highp vec4 tmpvar_87;
  tmpvar_87 = (unity_4LightPosY0 - tmpvar_63.y);
  highp vec4 tmpvar_88;
  tmpvar_88 = (unity_4LightPosZ0 - tmpvar_63.z);
  highp vec4 tmpvar_89;
  tmpvar_89 = (((tmpvar_86 * tmpvar_86) + (tmpvar_87 * tmpvar_87)) + (tmpvar_88 * tmpvar_88));
  highp vec4 tmpvar_90;
  tmpvar_90 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_86 * normal_85.x) + (tmpvar_87 * normal_85.y)) + (tmpvar_88 * normal_85.z))
   * 
    inversesqrt(tmpvar_89)
  )) * (1.0/((1.0 + 
    (tmpvar_89 * lightAttenSq_84)
  ))));
  highp vec3 tmpvar_91;
  tmpvar_91 = (tmpvar_76 + ((
    ((lightColor0_80 * tmpvar_90.x) + (lightColor1_81 * tmpvar_90.y))
   + 
    (lightColor2_82 * tmpvar_90.z)
  ) + (lightColor3_83 * tmpvar_90.w)));
  tmpvar_6 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = (unity_World2Shadow[0] * (_Object2World * tmpvar_18));
  tmpvar_7 = tmpvar_92;
  gl_Position = (glstate_matrix_mvp * tmpvar_18);
  xlv_TEXCOORD0 = tmpvar_72;
  xlv_TEXCOORD1 = tmpvar_73;
  xlv_TEXCOORD2 = tmpvar_74;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_11;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_TEXCOORD8;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  blendColor_11 = tmpvar_20;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD5.z, 0.0, 1.0)));
  mediump vec3 tmpvar_21;
  tmpvar_21 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_21 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_21.x, max (tmpvar_21.y, tmpvar_21.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_22;
  tmpvar_22 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_24;
  lowp float tmpvar_25;
  tmpvar_25 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD8.xyz);
  mediump float tmpvar_26;
  tmpvar_26 = (_LightShadowData.x + (tmpvar_25 * (1.0 - _LightShadowData.x)));
  shadow_24 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD0.xyz, tmpvar_23);
  worldN_4.x = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD1.xyz, tmpvar_23);
  worldN_4.y = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD2.xyz, tmpvar_23);
  worldN_4.z = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_30;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_24;
  mediump vec3 normalWorld_31;
  normalWorld_31 = worldN_4;
  mediump vec3 tmpvar_32;
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = normalWorld_31;
  mediump vec3 x1_34;
  x1_34.x = dot (unity_SHAr, tmpvar_33);
  x1_34.y = dot (unity_SHAg, tmpvar_33);
  x1_34.z = dot (unity_SHAb, tmpvar_33);
  tmpvar_32 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_32;
  lowp vec4 c_35;
  lowp vec4 c_36;
  lowp float diff_37;
  mediump float tmpvar_38;
  tmpvar_38 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_37 = tmpvar_38;
  mediump vec3 tmpvar_39;
  tmpvar_39 = ((tmpvar_9 * tmpvar_32) * diff_37);
  c_36.xyz = tmpvar_39;
  c_36.w = tmpvar_10;
  c_35.w = c_36.w;
  mediump vec3 tmpvar_40;
  tmpvar_40 = (c_36.xyz + (tmpvar_9 * (xlv_TEXCOORD7 + x1_34)));
  c_35.xyz = tmpvar_40;
  c_5.xyz = c_35.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
in vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
out mediump vec3 xlv_TEXCOORD7;
out mediump vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  mediump vec3 tmpvar_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_12;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_13;
  tmpvar_13 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_13;
  highp float cse_14;
  cse_14 = _Object2World[3].x;
  highp float cse_15;
  cse_15 = _Object2World[3].y;
  highp float tmpvar_16;
  tmpvar_16 = clamp (((
    fract(((cse_14 + cse_15) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17.xy = _glesMultiTexCoord2.zw;
  tmpvar_17.z = _glesMultiTexCoord1.w;
  tmpvar_10 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_19;
  highp vec3 vRotatedWindVector_20;
  highp vec3 FinalPosition_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = tmpvar_1.xyz;
  FinalPosition_21 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = (_WindQuality * _WindEnabled);
  if ((tmpvar_23 > 0.0)) {
    highp mat3 tmpvar_24;
    tmpvar_24[0] = _World2Object[0].xyz;
    tmpvar_24[1] = _World2Object[1].xyz;
    tmpvar_24[2] = _World2Object[2].xyz;
    vRotatedWindVector_20 = normalize((tmpvar_24 * _ST_WindVector.xyz));
    highp mat3 tmpvar_25;
    tmpvar_25[0] = _World2Object[0].xyz;
    tmpvar_25[1] = _World2Object[1].xyz;
    tmpvar_25[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_19 = (normalize((tmpvar_25 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_20 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_19 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_23 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    if ((tmpvar_23 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = tmpvar_22;
      highp float fAdherenceScale_28;
      highp vec3 tmpvar_29;
      tmpvar_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_30;
      tmpvar_30 = (_ST_WindBranch.x + (cse_14 + cse_15));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (tmpvar_30 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((tmpvar_30 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_30 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((tmpvar_30 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        (mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_31.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (_glesVertex.xyz + ((tmpvar_29 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((tmpvar_30 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((
        ((tmpvar_39.x * tmpvar_39.y) * tmpvar_39.x)
       * tmpvar_39.y) * _ST_WindTurbulences.x));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_19 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp vec3 tmpvar_42;
      tmpvar_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_43;
      tmpvar_43 = (_ST_WindBranch.x + (cse_14 + cse_15));
      highp vec4 vOscillations_44;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (tmpvar_43 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((tmpvar_43 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_43 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      vPos_41 = (vPos_26 + ((tmpvar_42 * 
        (((mix (
          mix (tmpvar_49, fTarget_46, fAmount_45)
        , fTarget_46, fAmount_45) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_21 = vPos_26;
  };
  if ((tmpvar_23 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_21;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_21, FinalPosition_21));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_21.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (cse_14 + _ST_WindGlobal.x);
    tmpvar_54.y = (cse_15 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    vPos_50.xz = (FinalPosition_21.xz + (vRotatedWindVector_20.xz * (
      ((_ST_WindGlobal.y * (tmpvar_55.x + (tmpvar_55.y * tmpvar_55.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_51)));
    vPos_50 = (normalize(vPos_50) * fLength_52);
    FinalPosition_21 = vPos_50;
  };
  tmpvar_18.xyz = FinalPosition_21;
  highp vec4 tmpvar_57;
  tmpvar_57 = (glstate_matrix_mvp * tmpvar_18);
  highp vec4 o_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (tmpvar_57 * 0.5);
  highp vec2 tmpvar_60;
  tmpvar_60.x = tmpvar_59.x;
  tmpvar_60.y = (tmpvar_59.y * _ProjectionParams.x);
  o_58.xy = (tmpvar_60 + tmpvar_59.w);
  o_58.zw = tmpvar_57.zw;
  highp vec3 tmpvar_61;
  tmpvar_61 = o_58.xyw;
  tmpvar_11 = tmpvar_61;
  highp vec2 tmpvar_62;
  tmpvar_62 = (tmpvar_11.xy * (_ScreenParams.xy * 0.25));
  tmpvar_11.xy = tmpvar_62;
  tmpvar_5 = tmpvar_8;
  highp vec3 tmpvar_63;
  tmpvar_63 = (_Object2World * tmpvar_18).xyz;
  highp vec4 v_64;
  v_64.x = _World2Object[0].x;
  v_64.y = _World2Object[1].x;
  v_64.z = _World2Object[2].x;
  v_64.w = _World2Object[3].x;
  highp vec4 v_65;
  v_65.x = _World2Object[0].y;
  v_65.y = _World2Object[1].y;
  v_65.z = _World2Object[2].y;
  v_65.w = _World2Object[3].y;
  highp vec4 v_66;
  v_66.x = _World2Object[0].z;
  v_66.y = _World2Object[1].z;
  v_66.z = _World2Object[2].z;
  v_66.w = _World2Object[3].z;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize(((
    (v_64.xyz * _glesNormal.x)
   + 
    (v_65.xyz * _glesNormal.y)
  ) + (v_66.xyz * _glesNormal.z)));
  worldNormal_4 = tmpvar_67;
  highp mat3 tmpvar_68;
  tmpvar_68[0] = _Object2World[0].xyz;
  tmpvar_68[1] = _Object2World[1].xyz;
  tmpvar_68[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((tmpvar_68 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_69;
  lowp vec3 tmpvar_70;
  tmpvar_70 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_71;
  tmpvar_71 = (tmpvar_70 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72.x = worldTangent_3.x;
  tmpvar_72.y = worldBinormal_2.x;
  tmpvar_72.z = worldNormal_4.x;
  tmpvar_72.w = tmpvar_63.x;
  highp vec4 tmpvar_73;
  tmpvar_73.x = worldTangent_3.y;
  tmpvar_73.y = worldBinormal_2.y;
  tmpvar_73.z = worldNormal_4.y;
  tmpvar_73.w = tmpvar_63.y;
  highp vec4 tmpvar_74;
  tmpvar_74.x = worldTangent_3.z;
  tmpvar_74.y = worldBinormal_2.z;
  tmpvar_74.z = worldNormal_4.z;
  tmpvar_74.w = tmpvar_63.z;
  lowp vec4 tmpvar_75;
  tmpvar_75.w = 1.0;
  tmpvar_75.xyz = worldNormal_4;
  mediump vec3 tmpvar_76;
  mediump vec4 normal_77;
  normal_77 = tmpvar_75;
  mediump vec3 x2_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (normal_77.xyzz * normal_77.yzzx);
  x2_78.x = dot (unity_SHBr, tmpvar_79);
  x2_78.y = dot (unity_SHBg, tmpvar_79);
  x2_78.z = dot (unity_SHBb, tmpvar_79);
  tmpvar_76 = (x2_78 + (unity_SHC.xyz * (
    (normal_77.x * normal_77.x)
   - 
    (normal_77.y * normal_77.y)
  )));
  highp vec3 lightColor0_80;
  lightColor0_80 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_81;
  lightColor1_81 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_82;
  lightColor2_82 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_83;
  lightColor3_83 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_84;
  lightAttenSq_84 = unity_4LightAtten0;
  highp vec3 normal_85;
  normal_85 = worldNormal_4;
  highp vec4 tmpvar_86;
  tmpvar_86 = (unity_4LightPosX0 - tmpvar_63.x);
  highp vec4 tmpvar_87;
  tmpvar_87 = (unity_4LightPosY0 - tmpvar_63.y);
  highp vec4 tmpvar_88;
  tmpvar_88 = (unity_4LightPosZ0 - tmpvar_63.z);
  highp vec4 tmpvar_89;
  tmpvar_89 = (((tmpvar_86 * tmpvar_86) + (tmpvar_87 * tmpvar_87)) + (tmpvar_88 * tmpvar_88));
  highp vec4 tmpvar_90;
  tmpvar_90 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_86 * normal_85.x) + (tmpvar_87 * normal_85.y)) + (tmpvar_88 * normal_85.z))
   * 
    inversesqrt(tmpvar_89)
  )) * (1.0/((1.0 + 
    (tmpvar_89 * lightAttenSq_84)
  ))));
  highp vec3 tmpvar_91;
  tmpvar_91 = (tmpvar_76 + ((
    ((lightColor0_80 * tmpvar_90.x) + (lightColor1_81 * tmpvar_90.y))
   + 
    (lightColor2_82 * tmpvar_90.z)
  ) + (lightColor3_83 * tmpvar_90.w)));
  tmpvar_6 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = (unity_World2Shadow[0] * (_Object2World * tmpvar_18));
  tmpvar_7 = tmpvar_92;
  gl_Position = (glstate_matrix_mvp * tmpvar_18);
  xlv_TEXCOORD0 = tmpvar_72;
  xlv_TEXCOORD1 = tmpvar_73;
  xlv_TEXCOORD2 = tmpvar_74;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_11;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
in mediump vec3 xlv_TEXCOORD7;
in mediump vec4 xlv_TEXCOORD8;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_13.x = tmpvar_14.x;
  mediump float tmpvar_15;
  tmpvar_15 = fract(tmpvar_14.y);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * 0.0625) + unity_LODFade.y);
  projUV_13.y = tmpvar_16;
  lowp float x_17;
  x_17 = (texture (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture (_MainTex, xlv_TEXCOORD5.xy);
  blendColor_11 = tmpvar_20;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD5.z, 0.0, 1.0)));
  mediump vec3 tmpvar_21;
  tmpvar_21 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_12.xyz = clamp ((tmpvar_21 * (
    ((max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_21.x, max (tmpvar_21.y, tmpvar_21.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_22;
  tmpvar_22 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_24;
  mediump float tmpvar_25;
  tmpvar_25 = texture (_ShadowMapTexture, xlv_TEXCOORD8.xyz);
  lowp float tmpvar_26;
  tmpvar_26 = tmpvar_25;
  mediump float tmpvar_27;
  tmpvar_27 = (_LightShadowData.x + (tmpvar_26 * (1.0 - _LightShadowData.x)));
  shadow_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD0.xyz, tmpvar_23);
  worldN_4.x = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD1.xyz, tmpvar_23);
  worldN_4.y = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD2.xyz, tmpvar_23);
  worldN_4.z = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_31;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_24;
  mediump vec3 normalWorld_32;
  normalWorld_32 = worldN_4;
  mediump vec3 tmpvar_33;
  mediump vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = normalWorld_32;
  mediump vec3 x1_35;
  x1_35.x = dot (unity_SHAr, tmpvar_34);
  x1_35.y = dot (unity_SHAg, tmpvar_34);
  x1_35.z = dot (unity_SHAb, tmpvar_34);
  tmpvar_33 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_33;
  lowp vec4 c_36;
  lowp vec4 c_37;
  lowp float diff_38;
  mediump float tmpvar_39;
  tmpvar_39 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_38 = tmpvar_39;
  mediump vec3 tmpvar_40;
  tmpvar_40 = ((tmpvar_9 * tmpvar_33) * diff_38);
  c_37.xyz = tmpvar_40;
  c_37.w = tmpvar_10;
  c_36.w = c_37.w;
  mediump vec3 tmpvar_41;
  tmpvar_41 = (c_37.xyz + (tmpvar_9 * (xlv_TEXCOORD7 + x1_35)));
  c_36.xyz = tmpvar_41;
  c_5.xyz = c_36.xyz;
  c_5.w = 1.0;
  _glesFragData[0] = c_5;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 == 5.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_16;
    highp float fOffset_22;
    fOffset_22 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_22 = 0.75;
    };
    highp vec4 tmpvar_23;
    tmpvar_23.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_23.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_22);
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    vPos_21 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_24 * tmpvar_24)
       * 
        (3.0 - (2.0 * tmpvar_24))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_12 = tmpvar_2;
    FinalPosition_15 = vPos_21;
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = FinalPosition_15;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = FinalPosition_15;
      highp float fAdherenceScale_27;
      highp vec3 tmpvar_28;
      tmpvar_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_29;
      tmpvar_29 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (tmpvar_29 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((tmpvar_29 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_29 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((tmpvar_29 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        (mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_30.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (FinalPosition_15 + ((tmpvar_28 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((tmpvar_29 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((
        ((tmpvar_38.x * tmpvar_38.y) * tmpvar_38.x)
       * tmpvar_38.y) * _ST_WindTurbulences.x));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_13 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp vec3 tmpvar_41;
      tmpvar_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_42;
      tmpvar_42 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_43;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (tmpvar_42 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((tmpvar_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      vPos_40 = (vPos_25 + ((tmpvar_41 * 
        (((mix (
          mix (tmpvar_48, fTarget_45, fAmount_44)
        , fTarget_45, fAmount_44) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_15 = vPos_25;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_15;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_53.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    vPos_49.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_54.x + (tmpvar_54.y * tmpvar_54.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_50)));
    vPos_49 = (normalize(vPos_49) * fLength_51);
    FinalPosition_15 = vPos_49;
  };
  tmpvar_11.xyz = FinalPosition_15;
  highp vec4 tmpvar_56;
  tmpvar_56 = (glstate_matrix_mvp * tmpvar_11);
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (tmpvar_56 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = tmpvar_56.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  tmpvar_8 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_61;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_62;
  v_62.x = _World2Object[0].x;
  v_62.y = _World2Object[1].x;
  v_62.z = _World2Object[2].x;
  v_62.w = _World2Object[3].x;
  highp vec4 v_63;
  v_63.x = _World2Object[0].y;
  v_63.y = _World2Object[1].y;
  v_63.z = _World2Object[2].y;
  v_63.w = _World2Object[3].y;
  highp vec4 v_64;
  v_64.x = _World2Object[0].z;
  v_64.y = _World2Object[1].z;
  v_64.z = _World2Object[2].z;
  v_64.w = _World2Object[3].z;
  highp vec3 tmpvar_65;
  tmpvar_65 = normalize(((
    (v_62.xyz * tmpvar_12.x)
   + 
    (v_63.xyz * tmpvar_12.y)
  ) + (v_64.xyz * tmpvar_12.z)));
  worldNormal_3 = tmpvar_65;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_66;
  tmpvar_66.w = 1.0;
  tmpvar_66.xyz = worldNormal_3;
  mediump vec4 normal_67;
  normal_67 = tmpvar_66;
  mediump vec3 x2_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = (normal_67.xyzz * normal_67.yzzx);
  x2_68.x = dot (unity_SHBr, tmpvar_69);
  x2_68.y = dot (unity_SHBg, tmpvar_69);
  x2_68.z = dot (unity_SHBb, tmpvar_69);
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = (x2_68 + (unity_SHC.xyz * (
    (normal_67.x * normal_67.x)
   - 
    (normal_67.y * normal_67.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  mediump float tmpvar_13;
  tmpvar_13 = fract(tmpvar_12.y);
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_13 * 0.0625) + unity_LODFade.y);
  projUV_11.y = tmpvar_14;
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_17;
  lowp float x_18;
  x_18 = (tmpvar_9 - _Cutoff);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_20;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_21;
  normalWorld_21 = tmpvar_4;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_21;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_26 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tmpvar_8 * tmpvar_1) * diff_26);
  c_25.xyz = tmpvar_28;
  c_25.w = tmpvar_9;
  c_24.w = c_25.w;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (c_25.xyz + (tmpvar_8 * (xlv_TEXCOORD5 + x1_23)));
  c_24.xyz = tmpvar_29;
  c_3.xyz = c_24.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 == 5.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_16;
    highp float fOffset_22;
    fOffset_22 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_22 = 0.75;
    };
    highp vec4 tmpvar_23;
    tmpvar_23.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_23.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_22);
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    vPos_21 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_24 * tmpvar_24)
       * 
        (3.0 - (2.0 * tmpvar_24))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_12 = tmpvar_2;
    FinalPosition_15 = vPos_21;
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = FinalPosition_15;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = FinalPosition_15;
      highp float fAdherenceScale_27;
      highp vec3 tmpvar_28;
      tmpvar_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_29;
      tmpvar_29 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (tmpvar_29 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((tmpvar_29 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_29 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((tmpvar_29 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        (mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_30.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (FinalPosition_15 + ((tmpvar_28 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((tmpvar_29 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((
        ((tmpvar_38.x * tmpvar_38.y) * tmpvar_38.x)
       * tmpvar_38.y) * _ST_WindTurbulences.x));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_13 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp vec3 tmpvar_41;
      tmpvar_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_42;
      tmpvar_42 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_43;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (tmpvar_42 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((tmpvar_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      vPos_40 = (vPos_25 + ((tmpvar_41 * 
        (((mix (
          mix (tmpvar_48, fTarget_45, fAmount_44)
        , fTarget_45, fAmount_44) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_15 = vPos_25;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_15;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_53.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    vPos_49.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_54.x + (tmpvar_54.y * tmpvar_54.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_50)));
    vPos_49 = (normalize(vPos_49) * fLength_51);
    FinalPosition_15 = vPos_49;
  };
  tmpvar_11.xyz = FinalPosition_15;
  highp vec4 tmpvar_56;
  tmpvar_56 = (glstate_matrix_mvp * tmpvar_11);
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (tmpvar_56 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = tmpvar_56.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  tmpvar_8 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_61;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_62;
  v_62.x = _World2Object[0].x;
  v_62.y = _World2Object[1].x;
  v_62.z = _World2Object[2].x;
  v_62.w = _World2Object[3].x;
  highp vec4 v_63;
  v_63.x = _World2Object[0].y;
  v_63.y = _World2Object[1].y;
  v_63.z = _World2Object[2].y;
  v_63.w = _World2Object[3].y;
  highp vec4 v_64;
  v_64.x = _World2Object[0].z;
  v_64.y = _World2Object[1].z;
  v_64.z = _World2Object[2].z;
  v_64.w = _World2Object[3].z;
  highp vec3 tmpvar_65;
  tmpvar_65 = normalize(((
    (v_62.xyz * tmpvar_12.x)
   + 
    (v_63.xyz * tmpvar_12.y)
  ) + (v_64.xyz * tmpvar_12.z)));
  worldNormal_3 = tmpvar_65;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_66;
  tmpvar_66.w = 1.0;
  tmpvar_66.xyz = worldNormal_3;
  mediump vec4 normal_67;
  normal_67 = tmpvar_66;
  mediump vec3 x2_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = (normal_67.xyzz * normal_67.yzzx);
  x2_68.x = dot (unity_SHBr, tmpvar_69);
  x2_68.y = dot (unity_SHBg, tmpvar_69);
  x2_68.z = dot (unity_SHBb, tmpvar_69);
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = (x2_68 + (unity_SHC.xyz * (
    (normal_67.x * normal_67.x)
   - 
    (normal_67.y * normal_67.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  mediump float tmpvar_13;
  tmpvar_13 = fract(tmpvar_12.y);
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_13 * 0.0625) + unity_LODFade.y);
  projUV_11.y = tmpvar_14;
  lowp float x_15;
  x_15 = (texture (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_17;
  lowp float x_18;
  x_18 = (tmpvar_9 - _Cutoff);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_20;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_21;
  normalWorld_21 = tmpvar_4;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_21;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_26 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tmpvar_8 * tmpvar_1) * diff_26);
  c_25.xyz = tmpvar_28;
  c_25.w = tmpvar_9;
  c_24.w = c_25.w;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (c_25.xyz + (tmpvar_8 * (xlv_TEXCOORD5 + x1_23)));
  c_24.xyz = tmpvar_29;
  c_3.xyz = c_24.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_17;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_13 = tmpvar_2;
    FinalPosition_16 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_16;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_16;
      highp float fAdherenceScale_28;
      highp vec3 tmpvar_29;
      tmpvar_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_30;
      tmpvar_30 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (tmpvar_30 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((tmpvar_30 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_30 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((tmpvar_30 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        (mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_31.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_16 + ((tmpvar_29 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((tmpvar_30 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((
        ((tmpvar_39.x * tmpvar_39.y) * tmpvar_39.x)
       * tmpvar_39.y) * _ST_WindTurbulences.x));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_14 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp vec3 tmpvar_42;
      tmpvar_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_43;
      tmpvar_43 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_44;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (tmpvar_43 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((tmpvar_43 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_43 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      vPos_41 = (vPos_26 + ((tmpvar_42 * 
        (((mix (
          mix (tmpvar_49, fTarget_46, fAmount_45)
        , fTarget_46, fAmount_45) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_16 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_16;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_54.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    vPos_50.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_55.x + (tmpvar_55.y * tmpvar_55.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_51)));
    vPos_50 = (normalize(vPos_50) * fLength_52);
    FinalPosition_16 = vPos_50;
  };
  tmpvar_12.xyz = FinalPosition_16;
  highp vec4 tmpvar_57;
  tmpvar_57 = (glstate_matrix_mvp * tmpvar_12);
  highp vec4 o_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (tmpvar_57 * 0.5);
  highp vec2 tmpvar_60;
  tmpvar_60.x = tmpvar_59.x;
  tmpvar_60.y = (tmpvar_59.y * _ProjectionParams.x);
  o_58.xy = (tmpvar_60 + tmpvar_59.w);
  o_58.zw = tmpvar_57.zw;
  highp vec3 tmpvar_61;
  tmpvar_61 = o_58.xyw;
  tmpvar_9 = tmpvar_61;
  highp vec2 tmpvar_62;
  tmpvar_62 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_62;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_63;
  v_63.x = _World2Object[0].x;
  v_63.y = _World2Object[1].x;
  v_63.z = _World2Object[2].x;
  v_63.w = _World2Object[3].x;
  highp vec4 v_64;
  v_64.x = _World2Object[0].y;
  v_64.y = _World2Object[1].y;
  v_64.z = _World2Object[2].y;
  v_64.w = _World2Object[3].y;
  highp vec4 v_65;
  v_65.x = _World2Object[0].z;
  v_65.y = _World2Object[1].z;
  v_65.z = _World2Object[2].z;
  v_65.w = _World2Object[3].z;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(((
    (v_63.xyz * tmpvar_13.x)
   + 
    (v_64.xyz * tmpvar_13.y)
  ) + (v_65.xyz * tmpvar_13.z)));
  worldNormal_3 = tmpvar_66;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_67;
  tmpvar_67.w = 1.0;
  tmpvar_67.xyz = worldNormal_3;
  mediump vec4 normal_68;
  normal_68 = tmpvar_67;
  mediump vec3 x2_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (normal_68.xyzz * normal_68.yzzx);
  x2_69.x = dot (unity_SHBr, tmpvar_70);
  x2_69.y = dot (unity_SHBg, tmpvar_70);
  x2_69.z = dot (unity_SHBb, tmpvar_70);
  highp vec4 tmpvar_71;
  tmpvar_71 = (unity_World2Shadow[0] * (_Object2World * tmpvar_12));
  tmpvar_6 = tmpvar_71;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = (x2_69 + (unity_SHC.xyz * (
    (normal_68.x * normal_68.x)
   - 
    (normal_68.y * normal_68.y)
  )));
  xlv_TEXCOORD6 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  lowp float tmpvar_21;
  mediump float dist_22;
  lowp float tmpvar_23;
  tmpvar_23 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x;
  dist_22 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (float((dist_22 > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_21 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_25;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_21;
  mediump vec3 normalWorld_26;
  normalWorld_26 = tmpvar_5;
  mediump vec3 tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = normalWorld_26;
  mediump vec3 x1_29;
  x1_29.x = dot (unity_SHAr, tmpvar_28);
  x1_29.y = dot (unity_SHAg, tmpvar_28);
  x1_29.z = dot (unity_SHAb, tmpvar_28);
  tmpvar_27 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_27;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_32 = tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_9 * tmpvar_27) * diff_32);
  c_31.xyz = tmpvar_34;
  c_31.w = tmpvar_10;
  c_30.w = c_31.w;
  mediump vec3 tmpvar_35;
  tmpvar_35 = (c_31.xyz + (tmpvar_9 * (xlv_TEXCOORD5 + x1_29)));
  c_30.xyz = tmpvar_35;
  c_4.xyz = c_30.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_17;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_13 = tmpvar_2;
    FinalPosition_16 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_16;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_16;
      highp float fAdherenceScale_28;
      highp vec3 tmpvar_29;
      tmpvar_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_30;
      tmpvar_30 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (tmpvar_30 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((tmpvar_30 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_30 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((tmpvar_30 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        (mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_31.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_16 + ((tmpvar_29 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((tmpvar_30 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((
        ((tmpvar_39.x * tmpvar_39.y) * tmpvar_39.x)
       * tmpvar_39.y) * _ST_WindTurbulences.x));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_14 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp vec3 tmpvar_42;
      tmpvar_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_43;
      tmpvar_43 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_44;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (tmpvar_43 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((tmpvar_43 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_43 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      vPos_41 = (vPos_26 + ((tmpvar_42 * 
        (((mix (
          mix (tmpvar_49, fTarget_46, fAmount_45)
        , fTarget_46, fAmount_45) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_16 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_16;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_54.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    vPos_50.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_55.x + (tmpvar_55.y * tmpvar_55.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_51)));
    vPos_50 = (normalize(vPos_50) * fLength_52);
    FinalPosition_16 = vPos_50;
  };
  tmpvar_12.xyz = FinalPosition_16;
  highp vec4 tmpvar_57;
  tmpvar_57 = (glstate_matrix_mvp * tmpvar_12);
  highp vec4 o_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (tmpvar_57 * 0.5);
  highp vec2 tmpvar_60;
  tmpvar_60.x = tmpvar_59.x;
  tmpvar_60.y = (tmpvar_59.y * _ProjectionParams.x);
  o_58.xy = (tmpvar_60 + tmpvar_59.w);
  o_58.zw = tmpvar_57.zw;
  highp vec3 tmpvar_61;
  tmpvar_61 = o_58.xyw;
  tmpvar_9 = tmpvar_61;
  highp vec2 tmpvar_62;
  tmpvar_62 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_62;
  tmpvar_5 = tmpvar_7;
  highp vec3 tmpvar_63;
  tmpvar_63 = (_Object2World * tmpvar_12).xyz;
  highp vec4 v_64;
  v_64.x = _World2Object[0].x;
  v_64.y = _World2Object[1].x;
  v_64.z = _World2Object[2].x;
  v_64.w = _World2Object[3].x;
  highp vec4 v_65;
  v_65.x = _World2Object[0].y;
  v_65.y = _World2Object[1].y;
  v_65.z = _World2Object[2].y;
  v_65.w = _World2Object[3].y;
  highp vec4 v_66;
  v_66.x = _World2Object[0].z;
  v_66.y = _World2Object[1].z;
  v_66.z = _World2Object[2].z;
  v_66.w = _World2Object[3].z;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize(((
    (v_64.xyz * tmpvar_13.x)
   + 
    (v_65.xyz * tmpvar_13.y)
  ) + (v_66.xyz * tmpvar_13.z)));
  worldNormal_3 = tmpvar_67;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_68;
  tmpvar_68.w = 1.0;
  tmpvar_68.xyz = worldNormal_3;
  mediump vec3 tmpvar_69;
  mediump vec4 normal_70;
  normal_70 = tmpvar_68;
  mediump vec3 x2_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = (normal_70.xyzz * normal_70.yzzx);
  x2_71.x = dot (unity_SHBr, tmpvar_72);
  x2_71.y = dot (unity_SHBg, tmpvar_72);
  x2_71.z = dot (unity_SHBb, tmpvar_72);
  tmpvar_69 = (x2_71 + (unity_SHC.xyz * (
    (normal_70.x * normal_70.x)
   - 
    (normal_70.y * normal_70.y)
  )));
  highp vec3 lightColor0_73;
  lightColor0_73 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_74;
  lightColor1_74 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_75;
  lightColor2_75 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_76;
  lightColor3_76 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_77;
  lightAttenSq_77 = unity_4LightAtten0;
  highp vec3 normal_78;
  normal_78 = worldNormal_3;
  highp vec4 tmpvar_79;
  tmpvar_79 = (unity_4LightPosX0 - tmpvar_63.x);
  highp vec4 tmpvar_80;
  tmpvar_80 = (unity_4LightPosY0 - tmpvar_63.y);
  highp vec4 tmpvar_81;
  tmpvar_81 = (unity_4LightPosZ0 - tmpvar_63.z);
  highp vec4 tmpvar_82;
  tmpvar_82 = (((tmpvar_79 * tmpvar_79) + (tmpvar_80 * tmpvar_80)) + (tmpvar_81 * tmpvar_81));
  highp vec4 tmpvar_83;
  tmpvar_83 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_79 * normal_78.x) + (tmpvar_80 * normal_78.y)) + (tmpvar_81 * normal_78.z))
   * 
    inversesqrt(tmpvar_82)
  )) * (1.0/((1.0 + 
    (tmpvar_82 * lightAttenSq_77)
  ))));
  highp vec3 tmpvar_84;
  tmpvar_84 = (tmpvar_69 + ((
    ((lightColor0_73 * tmpvar_83.x) + (lightColor1_74 * tmpvar_83.y))
   + 
    (lightColor2_75 * tmpvar_83.z)
  ) + (lightColor3_76 * tmpvar_83.w)));
  tmpvar_6 = tmpvar_84;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_63;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  mediump float tmpvar_13;
  tmpvar_13 = fract(tmpvar_12.y);
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_13 * 0.0625) + unity_LODFade.y);
  projUV_11.y = tmpvar_14;
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_17;
  lowp float x_18;
  x_18 = (tmpvar_9 - _Cutoff);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_20;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_21;
  normalWorld_21 = tmpvar_4;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_21;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_26 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tmpvar_8 * tmpvar_1) * diff_26);
  c_25.xyz = tmpvar_28;
  c_25.w = tmpvar_9;
  c_24.w = c_25.w;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (c_25.xyz + (tmpvar_8 * (xlv_TEXCOORD5 + x1_23)));
  c_24.xyz = tmpvar_29;
  c_3.xyz = c_24.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_17;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_13 = tmpvar_2;
    FinalPosition_16 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_16;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_16;
      highp float fAdherenceScale_28;
      highp vec3 tmpvar_29;
      tmpvar_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_30;
      tmpvar_30 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (tmpvar_30 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((tmpvar_30 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_30 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((tmpvar_30 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        (mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_31.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_16 + ((tmpvar_29 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((tmpvar_30 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((
        ((tmpvar_39.x * tmpvar_39.y) * tmpvar_39.x)
       * tmpvar_39.y) * _ST_WindTurbulences.x));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_14 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp vec3 tmpvar_42;
      tmpvar_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_43;
      tmpvar_43 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_44;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (tmpvar_43 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((tmpvar_43 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_43 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      vPos_41 = (vPos_26 + ((tmpvar_42 * 
        (((mix (
          mix (tmpvar_49, fTarget_46, fAmount_45)
        , fTarget_46, fAmount_45) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_16 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_16;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_54.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    vPos_50.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_55.x + (tmpvar_55.y * tmpvar_55.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_51)));
    vPos_50 = (normalize(vPos_50) * fLength_52);
    FinalPosition_16 = vPos_50;
  };
  tmpvar_12.xyz = FinalPosition_16;
  highp vec4 tmpvar_57;
  tmpvar_57 = (glstate_matrix_mvp * tmpvar_12);
  highp vec4 o_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (tmpvar_57 * 0.5);
  highp vec2 tmpvar_60;
  tmpvar_60.x = tmpvar_59.x;
  tmpvar_60.y = (tmpvar_59.y * _ProjectionParams.x);
  o_58.xy = (tmpvar_60 + tmpvar_59.w);
  o_58.zw = tmpvar_57.zw;
  highp vec3 tmpvar_61;
  tmpvar_61 = o_58.xyw;
  tmpvar_9 = tmpvar_61;
  highp vec2 tmpvar_62;
  tmpvar_62 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_62;
  tmpvar_5 = tmpvar_7;
  highp vec3 tmpvar_63;
  tmpvar_63 = (_Object2World * tmpvar_12).xyz;
  highp vec4 v_64;
  v_64.x = _World2Object[0].x;
  v_64.y = _World2Object[1].x;
  v_64.z = _World2Object[2].x;
  v_64.w = _World2Object[3].x;
  highp vec4 v_65;
  v_65.x = _World2Object[0].y;
  v_65.y = _World2Object[1].y;
  v_65.z = _World2Object[2].y;
  v_65.w = _World2Object[3].y;
  highp vec4 v_66;
  v_66.x = _World2Object[0].z;
  v_66.y = _World2Object[1].z;
  v_66.z = _World2Object[2].z;
  v_66.w = _World2Object[3].z;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize(((
    (v_64.xyz * tmpvar_13.x)
   + 
    (v_65.xyz * tmpvar_13.y)
  ) + (v_66.xyz * tmpvar_13.z)));
  worldNormal_3 = tmpvar_67;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_68;
  tmpvar_68.w = 1.0;
  tmpvar_68.xyz = worldNormal_3;
  mediump vec3 tmpvar_69;
  mediump vec4 normal_70;
  normal_70 = tmpvar_68;
  mediump vec3 x2_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = (normal_70.xyzz * normal_70.yzzx);
  x2_71.x = dot (unity_SHBr, tmpvar_72);
  x2_71.y = dot (unity_SHBg, tmpvar_72);
  x2_71.z = dot (unity_SHBb, tmpvar_72);
  tmpvar_69 = (x2_71 + (unity_SHC.xyz * (
    (normal_70.x * normal_70.x)
   - 
    (normal_70.y * normal_70.y)
  )));
  highp vec3 lightColor0_73;
  lightColor0_73 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_74;
  lightColor1_74 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_75;
  lightColor2_75 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_76;
  lightColor3_76 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_77;
  lightAttenSq_77 = unity_4LightAtten0;
  highp vec3 normal_78;
  normal_78 = worldNormal_3;
  highp vec4 tmpvar_79;
  tmpvar_79 = (unity_4LightPosX0 - tmpvar_63.x);
  highp vec4 tmpvar_80;
  tmpvar_80 = (unity_4LightPosY0 - tmpvar_63.y);
  highp vec4 tmpvar_81;
  tmpvar_81 = (unity_4LightPosZ0 - tmpvar_63.z);
  highp vec4 tmpvar_82;
  tmpvar_82 = (((tmpvar_79 * tmpvar_79) + (tmpvar_80 * tmpvar_80)) + (tmpvar_81 * tmpvar_81));
  highp vec4 tmpvar_83;
  tmpvar_83 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_79 * normal_78.x) + (tmpvar_80 * normal_78.y)) + (tmpvar_81 * normal_78.z))
   * 
    inversesqrt(tmpvar_82)
  )) * (1.0/((1.0 + 
    (tmpvar_82 * lightAttenSq_77)
  ))));
  highp vec3 tmpvar_84;
  tmpvar_84 = (tmpvar_69 + ((
    ((lightColor0_73 * tmpvar_83.x) + (lightColor1_74 * tmpvar_83.y))
   + 
    (lightColor2_75 * tmpvar_83.z)
  ) + (lightColor3_76 * tmpvar_83.w)));
  tmpvar_6 = tmpvar_84;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_63;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_6;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  mediump float tmpvar_13;
  tmpvar_13 = fract(tmpvar_12.y);
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_13 * 0.0625) + unity_LODFade.y);
  projUV_11.y = tmpvar_14;
  lowp float x_15;
  x_15 = (texture (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_17;
  lowp float x_18;
  x_18 = (tmpvar_9 - _Cutoff);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_20;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_21;
  normalWorld_21 = tmpvar_4;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_21;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_26 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tmpvar_8 * tmpvar_1) * diff_26);
  c_25.xyz = tmpvar_28;
  c_25.w = tmpvar_9;
  c_24.w = c_25.w;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (c_25.xyz + (tmpvar_8 * (xlv_TEXCOORD5 + x1_23)));
  c_24.xyz = tmpvar_29;
  c_3.xyz = c_24.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_11;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_12;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19.x = _Object2World[3].x;
  tmpvar_19.y = _Object2World[3].y;
  tmpvar_19.z = _Object2World[3].z;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 == 5.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_18;
    highp float fOffset_24;
    fOffset_24 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_24 = 0.75;
    };
    highp vec4 tmpvar_25;
    tmpvar_25.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_25.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_24);
    highp vec4 tmpvar_26;
    tmpvar_26 = abs(((
      fract((tmpvar_25 + 0.5))
     * 2.0) - 1.0));
    vPos_23 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_23;
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_27;
    vPos_27 = FinalPosition_17;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_28;
      vPos_28 = FinalPosition_17;
      highp float fAdherenceScale_29;
      highp vec3 tmpvar_30;
      tmpvar_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_31;
      tmpvar_31 = (_ST_WindBranch.x + (tmpvar_19.x + tmpvar_19.y));
      highp vec4 vOscillations_32;
      highp float fOscillation_33;
      fOscillation_33 = 1.0;
      highp float fAmount_34;
      highp float fTarget_35;
      highp vec4 tmpvar_36;
      tmpvar_36.x = (tmpvar_31 + _glesMultiTexCoord0.w);
      tmpvar_36.y = ((tmpvar_31 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_36.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_31 + _glesMultiTexCoord0.w));
      tmpvar_36.w = ((tmpvar_31 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      vOscillations_32 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      highp float tmpvar_38;
      tmpvar_38 = (vOscillations_32.y * vOscillations_32.z);
      fTarget_35 = 1.0;
      fAmount_34 = tmpvar_38;
      if ((tmpvar_38 < 0.0)) {
        fTarget_35 = -1.0;
        fAmount_34 = -(tmpvar_38);
      };
      fOscillation_33 = (((
        (mix (mix (tmpvar_38, fTarget_35, fAmount_34), fTarget_35, fAmount_34) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_32.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_32.w * _ST_WindBranchWhip.x)));
      vPos_28 = (FinalPosition_17 + ((tmpvar_30 * fOscillation_33) * _ST_WindBranch.y));
      highp vec4 tmpvar_39;
      tmpvar_39.zw = vec2(0.0, 0.0);
      tmpvar_39.x = ((tmpvar_31 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_39.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_40;
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      tmpvar_40 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((
        ((tmpvar_40.x * tmpvar_40.y) * tmpvar_40.x)
       * tmpvar_40.y) * _ST_WindTurbulences.x));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_32.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_28 = (vPos_28 + ((
        ((vRotatedBranchAnchor_15 - vPos_28) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_27 = vPos_28;
    } else {
      highp vec3 vPos_42;
      vPos_42 = vPos_27;
      highp vec3 tmpvar_43;
      tmpvar_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_44;
      tmpvar_44 = (_ST_WindBranch.x + (tmpvar_19.x + tmpvar_19.y));
      highp vec4 vOscillations_45;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (tmpvar_44 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((tmpvar_44 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_44 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_45 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_45.y * vOscillations_45.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      vPos_42 = (vPos_27 + ((tmpvar_43 * 
        (((mix (
          mix (tmpvar_50, fTarget_47, fAmount_46)
        , fTarget_47, fAmount_46) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_45.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_27 = vPos_42;
    };
    FinalPosition_17 = vPos_27;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_54;
    tmpvar_54 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (tmpvar_19.x + _ST_WindGlobal.x);
    tmpvar_55.y = (tmpvar_19.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    vPos_51.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * (
      ((_ST_WindGlobal.y * (tmpvar_56.x + (tmpvar_56.y * tmpvar_56.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_52)));
    vPos_51 = (normalize(vPos_51) * fLength_53);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  highp vec4 tmpvar_58;
  tmpvar_58 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = (tmpvar_58 * 0.5);
  highp vec2 tmpvar_61;
  tmpvar_61.x = tmpvar_60.x;
  tmpvar_61.y = (tmpvar_60.y * _ProjectionParams.x);
  o_59.xy = (tmpvar_61 + tmpvar_60.w);
  o_59.zw = tmpvar_58.zw;
  highp vec3 tmpvar_62;
  tmpvar_62 = o_59.xyw;
  tmpvar_10 = tmpvar_62;
  highp vec2 tmpvar_63;
  tmpvar_63 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_63;
  tmpvar_5 = tmpvar_8;
  highp vec3 tmpvar_64;
  tmpvar_64 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_65;
  v_65.x = _World2Object[0].x;
  v_65.y = _World2Object[1].x;
  v_65.z = _World2Object[2].x;
  v_65.w = _World2Object[3].x;
  highp vec4 v_66;
  v_66.x = _World2Object[0].y;
  v_66.y = _World2Object[1].y;
  v_66.z = _World2Object[2].y;
  v_66.w = _World2Object[3].y;
  highp vec4 v_67;
  v_67.x = _World2Object[0].z;
  v_67.y = _World2Object[1].z;
  v_67.z = _World2Object[2].z;
  v_67.w = _World2Object[3].z;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(((
    (v_65.xyz * tmpvar_14.x)
   + 
    (v_66.xyz * tmpvar_14.y)
  ) + (v_67.xyz * tmpvar_14.z)));
  worldNormal_3 = tmpvar_68;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_69;
  tmpvar_69.w = 1.0;
  tmpvar_69.xyz = worldNormal_3;
  mediump vec3 tmpvar_70;
  mediump vec4 normal_71;
  normal_71 = tmpvar_69;
  mediump vec3 x2_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = (normal_71.xyzz * normal_71.yzzx);
  x2_72.x = dot (unity_SHBr, tmpvar_73);
  x2_72.y = dot (unity_SHBg, tmpvar_73);
  x2_72.z = dot (unity_SHBb, tmpvar_73);
  tmpvar_70 = (x2_72 + (unity_SHC.xyz * (
    (normal_71.x * normal_71.x)
   - 
    (normal_71.y * normal_71.y)
  )));
  highp vec3 lightColor0_74;
  lightColor0_74 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_75;
  lightColor1_75 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_76;
  lightColor2_76 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_77;
  lightColor3_77 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_78;
  lightAttenSq_78 = unity_4LightAtten0;
  highp vec3 normal_79;
  normal_79 = worldNormal_3;
  highp vec4 tmpvar_80;
  tmpvar_80 = (unity_4LightPosX0 - tmpvar_64.x);
  highp vec4 tmpvar_81;
  tmpvar_81 = (unity_4LightPosY0 - tmpvar_64.y);
  highp vec4 tmpvar_82;
  tmpvar_82 = (unity_4LightPosZ0 - tmpvar_64.z);
  highp vec4 tmpvar_83;
  tmpvar_83 = (((tmpvar_80 * tmpvar_80) + (tmpvar_81 * tmpvar_81)) + (tmpvar_82 * tmpvar_82));
  highp vec4 tmpvar_84;
  tmpvar_84 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_80 * normal_79.x) + (tmpvar_81 * normal_79.y)) + (tmpvar_82 * normal_79.z))
   * 
    inversesqrt(tmpvar_83)
  )) * (1.0/((1.0 + 
    (tmpvar_83 * lightAttenSq_78)
  ))));
  highp vec3 tmpvar_85;
  tmpvar_85 = (tmpvar_70 + ((
    ((lightColor0_74 * tmpvar_84.x) + (lightColor1_75 * tmpvar_84.y))
   + 
    (lightColor2_76 * tmpvar_84.z)
  ) + (lightColor3_77 * tmpvar_84.w)));
  tmpvar_6 = tmpvar_85;
  highp vec4 tmpvar_86;
  tmpvar_86 = (unity_World2Shadow[0] * (_Object2World * tmpvar_13));
  tmpvar_7 = tmpvar_86;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_64;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  lowp float tmpvar_21;
  mediump float dist_22;
  lowp float tmpvar_23;
  tmpvar_23 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x;
  dist_22 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (float((dist_22 > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_21 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_25;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_21;
  mediump vec3 normalWorld_26;
  normalWorld_26 = tmpvar_5;
  mediump vec3 tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = normalWorld_26;
  mediump vec3 x1_29;
  x1_29.x = dot (unity_SHAr, tmpvar_28);
  x1_29.y = dot (unity_SHAg, tmpvar_28);
  x1_29.z = dot (unity_SHAb, tmpvar_28);
  tmpvar_27 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_27;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_32 = tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_9 * tmpvar_27) * diff_32);
  c_31.xyz = tmpvar_34;
  c_31.w = tmpvar_10;
  c_30.w = c_31.w;
  mediump vec3 tmpvar_35;
  tmpvar_35 = (c_31.xyz + (tmpvar_9 * (xlv_TEXCOORD5 + x1_29)));
  c_30.xyz = tmpvar_35;
  c_4.xyz = c_30.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_17;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_13 = tmpvar_2;
    FinalPosition_16 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_16;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_16;
      highp float fAdherenceScale_28;
      highp vec3 tmpvar_29;
      tmpvar_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_30;
      tmpvar_30 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (tmpvar_30 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((tmpvar_30 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_30 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((tmpvar_30 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        (mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_31.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_16 + ((tmpvar_29 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((tmpvar_30 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((
        ((tmpvar_39.x * tmpvar_39.y) * tmpvar_39.x)
       * tmpvar_39.y) * _ST_WindTurbulences.x));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_14 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp vec3 tmpvar_42;
      tmpvar_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_43;
      tmpvar_43 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_44;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (tmpvar_43 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((tmpvar_43 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_43 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      vPos_41 = (vPos_26 + ((tmpvar_42 * 
        (((mix (
          mix (tmpvar_49, fTarget_46, fAmount_45)
        , fTarget_46, fAmount_45) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_16 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_16;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_54.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    vPos_50.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_55.x + (tmpvar_55.y * tmpvar_55.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_51)));
    vPos_50 = (normalize(vPos_50) * fLength_52);
    FinalPosition_16 = vPos_50;
  };
  tmpvar_12.xyz = FinalPosition_16;
  highp vec4 tmpvar_57;
  tmpvar_57 = (glstate_matrix_mvp * tmpvar_12);
  highp vec4 o_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (tmpvar_57 * 0.5);
  highp vec2 tmpvar_60;
  tmpvar_60.x = tmpvar_59.x;
  tmpvar_60.y = (tmpvar_59.y * _ProjectionParams.x);
  o_58.xy = (tmpvar_60 + tmpvar_59.w);
  o_58.zw = tmpvar_57.zw;
  highp vec3 tmpvar_61;
  tmpvar_61 = o_58.xyw;
  tmpvar_9 = tmpvar_61;
  highp vec2 tmpvar_62;
  tmpvar_62 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_62;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_63;
  v_63.x = _World2Object[0].x;
  v_63.y = _World2Object[1].x;
  v_63.z = _World2Object[2].x;
  v_63.w = _World2Object[3].x;
  highp vec4 v_64;
  v_64.x = _World2Object[0].y;
  v_64.y = _World2Object[1].y;
  v_64.z = _World2Object[2].y;
  v_64.w = _World2Object[3].y;
  highp vec4 v_65;
  v_65.x = _World2Object[0].z;
  v_65.y = _World2Object[1].z;
  v_65.z = _World2Object[2].z;
  v_65.w = _World2Object[3].z;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(((
    (v_63.xyz * tmpvar_13.x)
   + 
    (v_64.xyz * tmpvar_13.y)
  ) + (v_65.xyz * tmpvar_13.z)));
  worldNormal_3 = tmpvar_66;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_67;
  tmpvar_67.w = 1.0;
  tmpvar_67.xyz = worldNormal_3;
  mediump vec4 normal_68;
  normal_68 = tmpvar_67;
  mediump vec3 x2_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (normal_68.xyzz * normal_68.yzzx);
  x2_69.x = dot (unity_SHBr, tmpvar_70);
  x2_69.y = dot (unity_SHBg, tmpvar_70);
  x2_69.z = dot (unity_SHBb, tmpvar_70);
  highp vec4 tmpvar_71;
  tmpvar_71 = (unity_World2Shadow[0] * (_Object2World * tmpvar_12));
  tmpvar_6 = tmpvar_71;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = (x2_69 + (unity_SHC.xyz * (
    (normal_68.x * normal_68.x)
   - 
    (normal_68.y * normal_68.y)
  )));
  xlv_TEXCOORD6 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  lowp float shadow_21;
  lowp float tmpvar_22;
  tmpvar_22 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz);
  mediump float tmpvar_23;
  tmpvar_23 = (_LightShadowData.x + (tmpvar_22 * (1.0 - _LightShadowData.x)));
  shadow_21 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_24;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_21;
  mediump vec3 normalWorld_25;
  normalWorld_25 = tmpvar_5;
  mediump vec3 tmpvar_26;
  mediump vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = normalWorld_25;
  mediump vec3 x1_28;
  x1_28.x = dot (unity_SHAr, tmpvar_27);
  x1_28.y = dot (unity_SHAg, tmpvar_27);
  x1_28.z = dot (unity_SHAb, tmpvar_27);
  tmpvar_26 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_26;
  lowp vec4 c_29;
  lowp vec4 c_30;
  lowp float diff_31;
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_31 = tmpvar_32;
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((tmpvar_9 * tmpvar_26) * diff_31);
  c_30.xyz = tmpvar_33;
  c_30.w = tmpvar_10;
  c_29.w = c_30.w;
  mediump vec3 tmpvar_34;
  tmpvar_34 = (c_30.xyz + (tmpvar_9 * (xlv_TEXCOORD5 + x1_28)));
  c_29.xyz = tmpvar_34;
  c_4.xyz = c_29.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_17;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_13 = tmpvar_2;
    FinalPosition_16 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_16;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_16;
      highp float fAdherenceScale_28;
      highp vec3 tmpvar_29;
      tmpvar_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_30;
      tmpvar_30 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (tmpvar_30 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((tmpvar_30 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_30 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((tmpvar_30 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        (mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_31.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_16 + ((tmpvar_29 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((tmpvar_30 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((
        ((tmpvar_39.x * tmpvar_39.y) * tmpvar_39.x)
       * tmpvar_39.y) * _ST_WindTurbulences.x));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_14 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp vec3 tmpvar_42;
      tmpvar_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_43;
      tmpvar_43 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_44;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (tmpvar_43 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((tmpvar_43 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_43 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      vPos_41 = (vPos_26 + ((tmpvar_42 * 
        (((mix (
          mix (tmpvar_49, fTarget_46, fAmount_45)
        , fTarget_46, fAmount_45) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_16 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_16;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_54.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    vPos_50.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_55.x + (tmpvar_55.y * tmpvar_55.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_51)));
    vPos_50 = (normalize(vPos_50) * fLength_52);
    FinalPosition_16 = vPos_50;
  };
  tmpvar_12.xyz = FinalPosition_16;
  highp vec4 tmpvar_57;
  tmpvar_57 = (glstate_matrix_mvp * tmpvar_12);
  highp vec4 o_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (tmpvar_57 * 0.5);
  highp vec2 tmpvar_60;
  tmpvar_60.x = tmpvar_59.x;
  tmpvar_60.y = (tmpvar_59.y * _ProjectionParams.x);
  o_58.xy = (tmpvar_60 + tmpvar_59.w);
  o_58.zw = tmpvar_57.zw;
  highp vec3 tmpvar_61;
  tmpvar_61 = o_58.xyw;
  tmpvar_9 = tmpvar_61;
  highp vec2 tmpvar_62;
  tmpvar_62 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_62;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_63;
  v_63.x = _World2Object[0].x;
  v_63.y = _World2Object[1].x;
  v_63.z = _World2Object[2].x;
  v_63.w = _World2Object[3].x;
  highp vec4 v_64;
  v_64.x = _World2Object[0].y;
  v_64.y = _World2Object[1].y;
  v_64.z = _World2Object[2].y;
  v_64.w = _World2Object[3].y;
  highp vec4 v_65;
  v_65.x = _World2Object[0].z;
  v_65.y = _World2Object[1].z;
  v_65.z = _World2Object[2].z;
  v_65.w = _World2Object[3].z;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(((
    (v_63.xyz * tmpvar_13.x)
   + 
    (v_64.xyz * tmpvar_13.y)
  ) + (v_65.xyz * tmpvar_13.z)));
  worldNormal_3 = tmpvar_66;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_67;
  tmpvar_67.w = 1.0;
  tmpvar_67.xyz = worldNormal_3;
  mediump vec4 normal_68;
  normal_68 = tmpvar_67;
  mediump vec3 x2_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (normal_68.xyzz * normal_68.yzzx);
  x2_69.x = dot (unity_SHBr, tmpvar_70);
  x2_69.y = dot (unity_SHBg, tmpvar_70);
  x2_69.z = dot (unity_SHBb, tmpvar_70);
  highp vec4 tmpvar_71;
  tmpvar_71 = (unity_World2Shadow[0] * (_Object2World * tmpvar_12));
  tmpvar_6 = tmpvar_71;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = (x2_69 + (unity_SHC.xyz * (
    (normal_68.x * normal_68.x)
   - 
    (normal_68.y * normal_68.y)
  )));
  xlv_TEXCOORD6 = tmpvar_6;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  lowp float shadow_21;
  mediump float tmpvar_22;
  tmpvar_22 = texture (_ShadowMapTexture, xlv_TEXCOORD6.xyz);
  lowp float tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump float tmpvar_24;
  tmpvar_24 = (_LightShadowData.x + (tmpvar_23 * (1.0 - _LightShadowData.x)));
  shadow_21 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_25;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_21;
  mediump vec3 normalWorld_26;
  normalWorld_26 = tmpvar_5;
  mediump vec3 tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = normalWorld_26;
  mediump vec3 x1_29;
  x1_29.x = dot (unity_SHAr, tmpvar_28);
  x1_29.y = dot (unity_SHAg, tmpvar_28);
  x1_29.z = dot (unity_SHAb, tmpvar_28);
  tmpvar_27 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_27;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_32 = tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_9 * tmpvar_27) * diff_32);
  c_31.xyz = tmpvar_34;
  c_31.w = tmpvar_10;
  c_30.w = c_31.w;
  mediump vec3 tmpvar_35;
  tmpvar_35 = (c_31.xyz + (tmpvar_9 * (xlv_TEXCOORD5 + x1_29)));
  c_30.xyz = tmpvar_35;
  c_4.xyz = c_30.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_11;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_12;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19.x = _Object2World[3].x;
  tmpvar_19.y = _Object2World[3].y;
  tmpvar_19.z = _Object2World[3].z;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 == 5.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_18;
    highp float fOffset_24;
    fOffset_24 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_24 = 0.75;
    };
    highp vec4 tmpvar_25;
    tmpvar_25.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_25.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_24);
    highp vec4 tmpvar_26;
    tmpvar_26 = abs(((
      fract((tmpvar_25 + 0.5))
     * 2.0) - 1.0));
    vPos_23 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_23;
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_27;
    vPos_27 = FinalPosition_17;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_28;
      vPos_28 = FinalPosition_17;
      highp float fAdherenceScale_29;
      highp vec3 tmpvar_30;
      tmpvar_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_31;
      tmpvar_31 = (_ST_WindBranch.x + (tmpvar_19.x + tmpvar_19.y));
      highp vec4 vOscillations_32;
      highp float fOscillation_33;
      fOscillation_33 = 1.0;
      highp float fAmount_34;
      highp float fTarget_35;
      highp vec4 tmpvar_36;
      tmpvar_36.x = (tmpvar_31 + _glesMultiTexCoord0.w);
      tmpvar_36.y = ((tmpvar_31 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_36.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_31 + _glesMultiTexCoord0.w));
      tmpvar_36.w = ((tmpvar_31 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      vOscillations_32 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      highp float tmpvar_38;
      tmpvar_38 = (vOscillations_32.y * vOscillations_32.z);
      fTarget_35 = 1.0;
      fAmount_34 = tmpvar_38;
      if ((tmpvar_38 < 0.0)) {
        fTarget_35 = -1.0;
        fAmount_34 = -(tmpvar_38);
      };
      fOscillation_33 = (((
        (mix (mix (tmpvar_38, fTarget_35, fAmount_34), fTarget_35, fAmount_34) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_32.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_32.w * _ST_WindBranchWhip.x)));
      vPos_28 = (FinalPosition_17 + ((tmpvar_30 * fOscillation_33) * _ST_WindBranch.y));
      highp vec4 tmpvar_39;
      tmpvar_39.zw = vec2(0.0, 0.0);
      tmpvar_39.x = ((tmpvar_31 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_39.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_40;
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      tmpvar_40 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((
        ((tmpvar_40.x * tmpvar_40.y) * tmpvar_40.x)
       * tmpvar_40.y) * _ST_WindTurbulences.x));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_32.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_28 = (vPos_28 + ((
        ((vRotatedBranchAnchor_15 - vPos_28) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_27 = vPos_28;
    } else {
      highp vec3 vPos_42;
      vPos_42 = vPos_27;
      highp vec3 tmpvar_43;
      tmpvar_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_44;
      tmpvar_44 = (_ST_WindBranch.x + (tmpvar_19.x + tmpvar_19.y));
      highp vec4 vOscillations_45;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (tmpvar_44 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((tmpvar_44 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_44 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_45 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_45.y * vOscillations_45.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      vPos_42 = (vPos_27 + ((tmpvar_43 * 
        (((mix (
          mix (tmpvar_50, fTarget_47, fAmount_46)
        , fTarget_47, fAmount_46) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_45.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_27 = vPos_42;
    };
    FinalPosition_17 = vPos_27;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_54;
    tmpvar_54 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (tmpvar_19.x + _ST_WindGlobal.x);
    tmpvar_55.y = (tmpvar_19.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    vPos_51.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * (
      ((_ST_WindGlobal.y * (tmpvar_56.x + (tmpvar_56.y * tmpvar_56.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_52)));
    vPos_51 = (normalize(vPos_51) * fLength_53);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  highp vec4 tmpvar_58;
  tmpvar_58 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = (tmpvar_58 * 0.5);
  highp vec2 tmpvar_61;
  tmpvar_61.x = tmpvar_60.x;
  tmpvar_61.y = (tmpvar_60.y * _ProjectionParams.x);
  o_59.xy = (tmpvar_61 + tmpvar_60.w);
  o_59.zw = tmpvar_58.zw;
  highp vec3 tmpvar_62;
  tmpvar_62 = o_59.xyw;
  tmpvar_10 = tmpvar_62;
  highp vec2 tmpvar_63;
  tmpvar_63 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_63;
  tmpvar_5 = tmpvar_8;
  highp vec3 tmpvar_64;
  tmpvar_64 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_65;
  v_65.x = _World2Object[0].x;
  v_65.y = _World2Object[1].x;
  v_65.z = _World2Object[2].x;
  v_65.w = _World2Object[3].x;
  highp vec4 v_66;
  v_66.x = _World2Object[0].y;
  v_66.y = _World2Object[1].y;
  v_66.z = _World2Object[2].y;
  v_66.w = _World2Object[3].y;
  highp vec4 v_67;
  v_67.x = _World2Object[0].z;
  v_67.y = _World2Object[1].z;
  v_67.z = _World2Object[2].z;
  v_67.w = _World2Object[3].z;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(((
    (v_65.xyz * tmpvar_14.x)
   + 
    (v_66.xyz * tmpvar_14.y)
  ) + (v_67.xyz * tmpvar_14.z)));
  worldNormal_3 = tmpvar_68;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_69;
  tmpvar_69.w = 1.0;
  tmpvar_69.xyz = worldNormal_3;
  mediump vec3 tmpvar_70;
  mediump vec4 normal_71;
  normal_71 = tmpvar_69;
  mediump vec3 x2_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = (normal_71.xyzz * normal_71.yzzx);
  x2_72.x = dot (unity_SHBr, tmpvar_73);
  x2_72.y = dot (unity_SHBg, tmpvar_73);
  x2_72.z = dot (unity_SHBb, tmpvar_73);
  tmpvar_70 = (x2_72 + (unity_SHC.xyz * (
    (normal_71.x * normal_71.x)
   - 
    (normal_71.y * normal_71.y)
  )));
  highp vec3 lightColor0_74;
  lightColor0_74 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_75;
  lightColor1_75 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_76;
  lightColor2_76 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_77;
  lightColor3_77 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_78;
  lightAttenSq_78 = unity_4LightAtten0;
  highp vec3 normal_79;
  normal_79 = worldNormal_3;
  highp vec4 tmpvar_80;
  tmpvar_80 = (unity_4LightPosX0 - tmpvar_64.x);
  highp vec4 tmpvar_81;
  tmpvar_81 = (unity_4LightPosY0 - tmpvar_64.y);
  highp vec4 tmpvar_82;
  tmpvar_82 = (unity_4LightPosZ0 - tmpvar_64.z);
  highp vec4 tmpvar_83;
  tmpvar_83 = (((tmpvar_80 * tmpvar_80) + (tmpvar_81 * tmpvar_81)) + (tmpvar_82 * tmpvar_82));
  highp vec4 tmpvar_84;
  tmpvar_84 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_80 * normal_79.x) + (tmpvar_81 * normal_79.y)) + (tmpvar_82 * normal_79.z))
   * 
    inversesqrt(tmpvar_83)
  )) * (1.0/((1.0 + 
    (tmpvar_83 * lightAttenSq_78)
  ))));
  highp vec3 tmpvar_85;
  tmpvar_85 = (tmpvar_70 + ((
    ((lightColor0_74 * tmpvar_84.x) + (lightColor1_75 * tmpvar_84.y))
   + 
    (lightColor2_76 * tmpvar_84.z)
  ) + (lightColor3_77 * tmpvar_84.w)));
  tmpvar_6 = tmpvar_85;
  highp vec4 tmpvar_86;
  tmpvar_86 = (unity_World2Shadow[0] * (_Object2World * tmpvar_13));
  tmpvar_7 = tmpvar_86;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_64;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  lowp float shadow_21;
  lowp float tmpvar_22;
  tmpvar_22 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz);
  mediump float tmpvar_23;
  tmpvar_23 = (_LightShadowData.x + (tmpvar_22 * (1.0 - _LightShadowData.x)));
  shadow_21 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_24;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_21;
  mediump vec3 normalWorld_25;
  normalWorld_25 = tmpvar_5;
  mediump vec3 tmpvar_26;
  mediump vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = normalWorld_25;
  mediump vec3 x1_28;
  x1_28.x = dot (unity_SHAr, tmpvar_27);
  x1_28.y = dot (unity_SHAg, tmpvar_27);
  x1_28.z = dot (unity_SHAb, tmpvar_27);
  tmpvar_26 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_26;
  lowp vec4 c_29;
  lowp vec4 c_30;
  lowp float diff_31;
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_31 = tmpvar_32;
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((tmpvar_9 * tmpvar_26) * diff_31);
  c_30.xyz = tmpvar_33;
  c_30.w = tmpvar_10;
  c_29.w = c_30.w;
  mediump vec3 tmpvar_34;
  tmpvar_34 = (c_30.xyz + (tmpvar_9 * (xlv_TEXCOORD5 + x1_28)));
  c_29.xyz = tmpvar_34;
  c_4.xyz = c_29.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_11;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_12;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19.x = _Object2World[3].x;
  tmpvar_19.y = _Object2World[3].y;
  tmpvar_19.z = _Object2World[3].z;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 == 5.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_18;
    highp float fOffset_24;
    fOffset_24 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_24 = 0.75;
    };
    highp vec4 tmpvar_25;
    tmpvar_25.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_25.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_24);
    highp vec4 tmpvar_26;
    tmpvar_26 = abs(((
      fract((tmpvar_25 + 0.5))
     * 2.0) - 1.0));
    vPos_23 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_23;
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_27;
    vPos_27 = FinalPosition_17;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_28;
      vPos_28 = FinalPosition_17;
      highp float fAdherenceScale_29;
      highp vec3 tmpvar_30;
      tmpvar_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_31;
      tmpvar_31 = (_ST_WindBranch.x + (tmpvar_19.x + tmpvar_19.y));
      highp vec4 vOscillations_32;
      highp float fOscillation_33;
      fOscillation_33 = 1.0;
      highp float fAmount_34;
      highp float fTarget_35;
      highp vec4 tmpvar_36;
      tmpvar_36.x = (tmpvar_31 + _glesMultiTexCoord0.w);
      tmpvar_36.y = ((tmpvar_31 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_36.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_31 + _glesMultiTexCoord0.w));
      tmpvar_36.w = ((tmpvar_31 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      vOscillations_32 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      highp float tmpvar_38;
      tmpvar_38 = (vOscillations_32.y * vOscillations_32.z);
      fTarget_35 = 1.0;
      fAmount_34 = tmpvar_38;
      if ((tmpvar_38 < 0.0)) {
        fTarget_35 = -1.0;
        fAmount_34 = -(tmpvar_38);
      };
      fOscillation_33 = (((
        (mix (mix (tmpvar_38, fTarget_35, fAmount_34), fTarget_35, fAmount_34) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_32.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_32.w * _ST_WindBranchWhip.x)));
      vPos_28 = (FinalPosition_17 + ((tmpvar_30 * fOscillation_33) * _ST_WindBranch.y));
      highp vec4 tmpvar_39;
      tmpvar_39.zw = vec2(0.0, 0.0);
      tmpvar_39.x = ((tmpvar_31 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_39.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_40;
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      tmpvar_40 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((
        ((tmpvar_40.x * tmpvar_40.y) * tmpvar_40.x)
       * tmpvar_40.y) * _ST_WindTurbulences.x));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_32.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_28 = (vPos_28 + ((
        ((vRotatedBranchAnchor_15 - vPos_28) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_27 = vPos_28;
    } else {
      highp vec3 vPos_42;
      vPos_42 = vPos_27;
      highp vec3 tmpvar_43;
      tmpvar_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_44;
      tmpvar_44 = (_ST_WindBranch.x + (tmpvar_19.x + tmpvar_19.y));
      highp vec4 vOscillations_45;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (tmpvar_44 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((tmpvar_44 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_44 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_45 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_45.y * vOscillations_45.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      vPos_42 = (vPos_27 + ((tmpvar_43 * 
        (((mix (
          mix (tmpvar_50, fTarget_47, fAmount_46)
        , fTarget_47, fAmount_46) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_45.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_27 = vPos_42;
    };
    FinalPosition_17 = vPos_27;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_54;
    tmpvar_54 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (tmpvar_19.x + _ST_WindGlobal.x);
    tmpvar_55.y = (tmpvar_19.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    vPos_51.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * (
      ((_ST_WindGlobal.y * (tmpvar_56.x + (tmpvar_56.y * tmpvar_56.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_52)));
    vPos_51 = (normalize(vPos_51) * fLength_53);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  highp vec4 tmpvar_58;
  tmpvar_58 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = (tmpvar_58 * 0.5);
  highp vec2 tmpvar_61;
  tmpvar_61.x = tmpvar_60.x;
  tmpvar_61.y = (tmpvar_60.y * _ProjectionParams.x);
  o_59.xy = (tmpvar_61 + tmpvar_60.w);
  o_59.zw = tmpvar_58.zw;
  highp vec3 tmpvar_62;
  tmpvar_62 = o_59.xyw;
  tmpvar_10 = tmpvar_62;
  highp vec2 tmpvar_63;
  tmpvar_63 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_63;
  tmpvar_5 = tmpvar_8;
  highp vec3 tmpvar_64;
  tmpvar_64 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_65;
  v_65.x = _World2Object[0].x;
  v_65.y = _World2Object[1].x;
  v_65.z = _World2Object[2].x;
  v_65.w = _World2Object[3].x;
  highp vec4 v_66;
  v_66.x = _World2Object[0].y;
  v_66.y = _World2Object[1].y;
  v_66.z = _World2Object[2].y;
  v_66.w = _World2Object[3].y;
  highp vec4 v_67;
  v_67.x = _World2Object[0].z;
  v_67.y = _World2Object[1].z;
  v_67.z = _World2Object[2].z;
  v_67.w = _World2Object[3].z;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(((
    (v_65.xyz * tmpvar_14.x)
   + 
    (v_66.xyz * tmpvar_14.y)
  ) + (v_67.xyz * tmpvar_14.z)));
  worldNormal_3 = tmpvar_68;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_69;
  tmpvar_69.w = 1.0;
  tmpvar_69.xyz = worldNormal_3;
  mediump vec3 tmpvar_70;
  mediump vec4 normal_71;
  normal_71 = tmpvar_69;
  mediump vec3 x2_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = (normal_71.xyzz * normal_71.yzzx);
  x2_72.x = dot (unity_SHBr, tmpvar_73);
  x2_72.y = dot (unity_SHBg, tmpvar_73);
  x2_72.z = dot (unity_SHBb, tmpvar_73);
  tmpvar_70 = (x2_72 + (unity_SHC.xyz * (
    (normal_71.x * normal_71.x)
   - 
    (normal_71.y * normal_71.y)
  )));
  highp vec3 lightColor0_74;
  lightColor0_74 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_75;
  lightColor1_75 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_76;
  lightColor2_76 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_77;
  lightColor3_77 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_78;
  lightAttenSq_78 = unity_4LightAtten0;
  highp vec3 normal_79;
  normal_79 = worldNormal_3;
  highp vec4 tmpvar_80;
  tmpvar_80 = (unity_4LightPosX0 - tmpvar_64.x);
  highp vec4 tmpvar_81;
  tmpvar_81 = (unity_4LightPosY0 - tmpvar_64.y);
  highp vec4 tmpvar_82;
  tmpvar_82 = (unity_4LightPosZ0 - tmpvar_64.z);
  highp vec4 tmpvar_83;
  tmpvar_83 = (((tmpvar_80 * tmpvar_80) + (tmpvar_81 * tmpvar_81)) + (tmpvar_82 * tmpvar_82));
  highp vec4 tmpvar_84;
  tmpvar_84 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_80 * normal_79.x) + (tmpvar_81 * normal_79.y)) + (tmpvar_82 * normal_79.z))
   * 
    inversesqrt(tmpvar_83)
  )) * (1.0/((1.0 + 
    (tmpvar_83 * lightAttenSq_78)
  ))));
  highp vec3 tmpvar_85;
  tmpvar_85 = (tmpvar_70 + ((
    ((lightColor0_74 * tmpvar_84.x) + (lightColor1_75 * tmpvar_84.y))
   + 
    (lightColor2_76 * tmpvar_84.z)
  ) + (lightColor3_77 * tmpvar_84.w)));
  tmpvar_6 = tmpvar_85;
  highp vec4 tmpvar_86;
  tmpvar_86 = (unity_World2Shadow[0] * (_Object2World * tmpvar_13));
  tmpvar_7 = tmpvar_86;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_64;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_20;
  lowp float shadow_21;
  mediump float tmpvar_22;
  tmpvar_22 = texture (_ShadowMapTexture, xlv_TEXCOORD6.xyz);
  lowp float tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump float tmpvar_24;
  tmpvar_24 = (_LightShadowData.x + (tmpvar_23 * (1.0 - _LightShadowData.x)));
  shadow_21 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_25;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_21;
  mediump vec3 normalWorld_26;
  normalWorld_26 = tmpvar_5;
  mediump vec3 tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = normalWorld_26;
  mediump vec3 x1_29;
  x1_29.x = dot (unity_SHAr, tmpvar_28);
  x1_29.y = dot (unity_SHAg, tmpvar_28);
  x1_29.z = dot (unity_SHAb, tmpvar_28);
  tmpvar_27 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_27;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_32 = tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_9 * tmpvar_27) * diff_32);
  c_31.xyz = tmpvar_34;
  c_31.w = tmpvar_10;
  c_30.w = c_31.w;
  mediump vec3 tmpvar_35;
  tmpvar_35 = (c_31.xyz + (tmpvar_9 * (xlv_TEXCOORD5 + x1_29)));
  c_30.xyz = tmpvar_35;
  c_4.xyz = c_30.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_13;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 == 5.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    highp float fOffset_24;
    fOffset_24 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_24 = 0.75;
    };
    highp vec4 tmpvar_25;
    tmpvar_25.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_25.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_24);
    highp vec4 tmpvar_26;
    tmpvar_26 = abs(((
      fract((tmpvar_25 + 0.5))
     * 2.0) - 1.0));
    vPos_23 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_15 = tmpvar_2;
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_27;
    vPos_27 = FinalPosition_18;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_28;
      vPos_28 = FinalPosition_18;
      highp float fAdherenceScale_29;
      highp vec3 tmpvar_30;
      tmpvar_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_31;
      tmpvar_31 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_32;
      highp float fOscillation_33;
      fOscillation_33 = 1.0;
      highp float fAmount_34;
      highp float fTarget_35;
      highp vec4 tmpvar_36;
      tmpvar_36.x = (tmpvar_31 + _glesMultiTexCoord0.w);
      tmpvar_36.y = ((tmpvar_31 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_36.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_31 + _glesMultiTexCoord0.w));
      tmpvar_36.w = ((tmpvar_31 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      vOscillations_32 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      highp float tmpvar_38;
      tmpvar_38 = (vOscillations_32.y * vOscillations_32.z);
      fTarget_35 = 1.0;
      fAmount_34 = tmpvar_38;
      if ((tmpvar_38 < 0.0)) {
        fTarget_35 = -1.0;
        fAmount_34 = -(tmpvar_38);
      };
      fOscillation_33 = (((
        (mix (mix (tmpvar_38, fTarget_35, fAmount_34), fTarget_35, fAmount_34) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_32.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_32.w * _ST_WindBranchWhip.x)));
      vPos_28 = (FinalPosition_18 + ((tmpvar_30 * fOscillation_33) * _ST_WindBranch.y));
      highp vec4 tmpvar_39;
      tmpvar_39.zw = vec2(0.0, 0.0);
      tmpvar_39.x = ((tmpvar_31 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_39.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_40;
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      tmpvar_40 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((
        ((tmpvar_40.x * tmpvar_40.y) * tmpvar_40.x)
       * tmpvar_40.y) * _ST_WindTurbulences.x));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_32.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_28 = (vPos_28 + ((
        ((vRotatedBranchAnchor_16 - vPos_28) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_27 = vPos_28;
    } else {
      highp vec3 vPos_42;
      vPos_42 = vPos_27;
      highp vec3 tmpvar_43;
      tmpvar_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_44;
      tmpvar_44 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_45;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (tmpvar_44 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((tmpvar_44 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_44 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_45 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_45.y * vOscillations_45.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      vPos_42 = (vPos_27 + ((tmpvar_43 * 
        (((mix (
          mix (tmpvar_50, fTarget_47, fAmount_46)
        , fTarget_47, fAmount_46) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_45.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_27 = vPos_42;
    };
    FinalPosition_18 = vPos_27;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_18;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_54;
    tmpvar_54 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_55.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    vPos_51.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_56.x + (tmpvar_56.y * tmpvar_56.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_52)));
    vPos_51 = (normalize(vPos_51) * fLength_53);
    FinalPosition_18 = vPos_51;
  };
  tmpvar_14.xyz = FinalPosition_18;
  highp vec4 tmpvar_58;
  tmpvar_58 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = (tmpvar_58 * 0.5);
  highp vec2 tmpvar_61;
  tmpvar_61.x = tmpvar_60.x;
  tmpvar_61.y = (tmpvar_60.y * _ProjectionParams.x);
  o_59.xy = (tmpvar_61 + tmpvar_60.w);
  o_59.zw = tmpvar_58.zw;
  highp vec3 tmpvar_62;
  tmpvar_62 = o_59.xyw;
  tmpvar_8 = tmpvar_62;
  highp vec2 tmpvar_63;
  tmpvar_63 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_63;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_64;
  v_64.x = _World2Object[0].x;
  v_64.y = _World2Object[1].x;
  v_64.z = _World2Object[2].x;
  v_64.w = _World2Object[3].x;
  highp vec4 v_65;
  v_65.x = _World2Object[0].y;
  v_65.y = _World2Object[1].y;
  v_65.z = _World2Object[2].y;
  v_65.w = _World2Object[3].y;
  highp vec4 v_66;
  v_66.x = _World2Object[0].z;
  v_66.y = _World2Object[1].z;
  v_66.z = _World2Object[2].z;
  v_66.w = _World2Object[3].z;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize(((
    (v_64.xyz * tmpvar_15.x)
   + 
    (v_65.xyz * tmpvar_15.y)
  ) + (v_66.xyz * tmpvar_15.z)));
  worldNormal_3 = tmpvar_67;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_68;
  tmpvar_68.w = 1.0;
  tmpvar_68.xyz = worldNormal_3;
  mediump vec4 normal_69;
  normal_69 = tmpvar_68;
  mediump vec3 x2_70;
  mediump vec4 tmpvar_71;
  tmpvar_71 = (normal_69.xyzz * normal_69.yzzx);
  x2_70.x = dot (unity_SHBr, tmpvar_71);
  x2_70.y = dot (unity_SHBg, tmpvar_71);
  x2_70.z = dot (unity_SHBb, tmpvar_71);
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = (x2_70 + (unity_SHC.xyz * (
    (normal_69.x * normal_69.x)
   - 
    (normal_69.y * normal_69.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  mediump float tmpvar_13;
  tmpvar_13 = fract(tmpvar_12.y);
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_13 * 0.0625) + unity_LODFade.y);
  projUV_11.y = tmpvar_14;
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_17;
  lowp float x_18;
  x_18 = (tmpvar_9 - _Cutoff);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_19 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_21;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_22;
  normalWorld_22 = tmpvar_4;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_22;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_27 = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_8 * tmpvar_1) * diff_27);
  c_26.xyz = tmpvar_29;
  c_26.w = tmpvar_9;
  c_25.w = c_26.w;
  mediump vec3 tmpvar_30;
  tmpvar_30 = (c_26.xyz + (tmpvar_8 * (xlv_TEXCOORD5 + x1_24)));
  c_25.xyz = tmpvar_30;
  c_3.xyz = c_25.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp float cse_11;
  cse_11 = _Object2World[3].x;
  highp float cse_12;
  cse_12 = _Object2World[3].y;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((cse_11 + cse_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_13;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 == 5.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    highp float fOffset_24;
    fOffset_24 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_24 = 0.75;
    };
    highp vec4 tmpvar_25;
    tmpvar_25.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_25.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_24);
    highp vec4 tmpvar_26;
    tmpvar_26 = abs(((
      fract((tmpvar_25 + 0.5))
     * 2.0) - 1.0));
    vPos_23 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_15 = tmpvar_2;
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_27;
    vPos_27 = FinalPosition_18;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_28;
      vPos_28 = FinalPosition_18;
      highp float fAdherenceScale_29;
      highp vec3 tmpvar_30;
      tmpvar_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_31;
      tmpvar_31 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_32;
      highp float fOscillation_33;
      fOscillation_33 = 1.0;
      highp float fAmount_34;
      highp float fTarget_35;
      highp vec4 tmpvar_36;
      tmpvar_36.x = (tmpvar_31 + _glesMultiTexCoord0.w);
      tmpvar_36.y = ((tmpvar_31 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_36.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_31 + _glesMultiTexCoord0.w));
      tmpvar_36.w = ((tmpvar_31 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      vOscillations_32 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      highp float tmpvar_38;
      tmpvar_38 = (vOscillations_32.y * vOscillations_32.z);
      fTarget_35 = 1.0;
      fAmount_34 = tmpvar_38;
      if ((tmpvar_38 < 0.0)) {
        fTarget_35 = -1.0;
        fAmount_34 = -(tmpvar_38);
      };
      fOscillation_33 = (((
        (mix (mix (tmpvar_38, fTarget_35, fAmount_34), fTarget_35, fAmount_34) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_32.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_32.w * _ST_WindBranchWhip.x)));
      vPos_28 = (FinalPosition_18 + ((tmpvar_30 * fOscillation_33) * _ST_WindBranch.y));
      highp vec4 tmpvar_39;
      tmpvar_39.zw = vec2(0.0, 0.0);
      tmpvar_39.x = ((tmpvar_31 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_39.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_40;
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      tmpvar_40 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((
        ((tmpvar_40.x * tmpvar_40.y) * tmpvar_40.x)
       * tmpvar_40.y) * _ST_WindTurbulences.x));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_32.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_28 = (vPos_28 + ((
        ((vRotatedBranchAnchor_16 - vPos_28) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_27 = vPos_28;
    } else {
      highp vec3 vPos_42;
      vPos_42 = vPos_27;
      highp vec3 tmpvar_43;
      tmpvar_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_44;
      tmpvar_44 = (_ST_WindBranch.x + (cse_11 + cse_12));
      highp vec4 vOscillations_45;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (tmpvar_44 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((tmpvar_44 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_44 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_45 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_45.y * vOscillations_45.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      vPos_42 = (vPos_27 + ((tmpvar_43 * 
        (((mix (
          mix (tmpvar_50, fTarget_47, fAmount_46)
        , fTarget_47, fAmount_46) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_45.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_27 = vPos_42;
    };
    FinalPosition_18 = vPos_27;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_18;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_54;
    tmpvar_54 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (cse_11 + _ST_WindGlobal.x);
    tmpvar_55.y = (cse_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    vPos_51.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * (
      ((_ST_WindGlobal.y * (tmpvar_56.x + (tmpvar_56.y * tmpvar_56.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_52)));
    vPos_51 = (normalize(vPos_51) * fLength_53);
    FinalPosition_18 = vPos_51;
  };
  tmpvar_14.xyz = FinalPosition_18;
  highp vec4 tmpvar_58;
  tmpvar_58 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = (tmpvar_58 * 0.5);
  highp vec2 tmpvar_61;
  tmpvar_61.x = tmpvar_60.x;
  tmpvar_61.y = (tmpvar_60.y * _ProjectionParams.x);
  o_59.xy = (tmpvar_61 + tmpvar_60.w);
  o_59.zw = tmpvar_58.zw;
  highp vec3 tmpvar_62;
  tmpvar_62 = o_59.xyw;
  tmpvar_8 = tmpvar_62;
  highp vec2 tmpvar_63;
  tmpvar_63 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_63;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_64;
  v_64.x = _World2Object[0].x;
  v_64.y = _World2Object[1].x;
  v_64.z = _World2Object[2].x;
  v_64.w = _World2Object[3].x;
  highp vec4 v_65;
  v_65.x = _World2Object[0].y;
  v_65.y = _World2Object[1].y;
  v_65.z = _World2Object[2].y;
  v_65.w = _World2Object[3].y;
  highp vec4 v_66;
  v_66.x = _World2Object[0].z;
  v_66.y = _World2Object[1].z;
  v_66.z = _World2Object[2].z;
  v_66.w = _World2Object[3].z;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize(((
    (v_64.xyz * tmpvar_15.x)
   + 
    (v_65.xyz * tmpvar_15.y)
  ) + (v_66.xyz * tmpvar_15.z)));
  worldNormal_3 = tmpvar_67;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_68;
  tmpvar_68.w = 1.0;
  tmpvar_68.xyz = worldNormal_3;
  mediump vec4 normal_69;
  normal_69 = tmpvar_68;
  mediump vec3 x2_70;
  mediump vec4 tmpvar_71;
  tmpvar_71 = (normal_69.xyzz * normal_69.yzzx);
  x2_70.x = dot (unity_SHBr, tmpvar_71);
  x2_70.y = dot (unity_SHBg, tmpvar_71);
  x2_70.z = dot (unity_SHBb, tmpvar_71);
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = (x2_70 + (unity_SHC.xyz * (
    (normal_69.x * normal_69.x)
   - 
    (normal_69.y * normal_69.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  mediump float tmpvar_13;
  tmpvar_13 = fract(tmpvar_12.y);
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_13 * 0.0625) + unity_LODFade.y);
  projUV_11.y = tmpvar_14;
  lowp float x_15;
  x_15 = (texture (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_17;
  lowp float x_18;
  x_18 = (tmpvar_9 - _Cutoff);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_19 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_21;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_22;
  normalWorld_22 = tmpvar_4;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_22;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_27 = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_8 * tmpvar_1) * diff_27);
  c_26.xyz = tmpvar_29;
  c_26.w = tmpvar_9;
  c_25.w = c_26.w;
  mediump vec3 tmpvar_30;
  tmpvar_30 = (c_26.xyz + (tmpvar_8 * (xlv_TEXCOORD5 + x1_24)));
  c_25.xyz = tmpvar_30;
  c_3.xyz = c_25.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_14;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = tmpvar_1.xyz;
  FinalPosition_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_21 == 5.0)) {
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    highp float fOffset_25;
    fOffset_25 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_25 = 0.75;
    };
    highp vec4 tmpvar_26;
    tmpvar_26.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_26.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_25);
    highp vec4 tmpvar_27;
    tmpvar_27 = abs(((
      fract((tmpvar_26 + 0.5))
     * 2.0) - 1.0));
    vPos_24 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_16 = tmpvar_2;
    FinalPosition_19 = vPos_24;
  };
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_28;
    vPos_28 = FinalPosition_19;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_29;
      vPos_29 = FinalPosition_19;
      highp float fAdherenceScale_30;
      highp vec3 tmpvar_31;
      tmpvar_31 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_32;
      tmpvar_32 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_33;
      highp float fOscillation_34;
      fOscillation_34 = 1.0;
      highp float fAmount_35;
      highp float fTarget_36;
      highp vec4 tmpvar_37;
      tmpvar_37.x = (tmpvar_32 + _glesMultiTexCoord0.w);
      tmpvar_37.y = ((tmpvar_32 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_37.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_32 + _glesMultiTexCoord0.w));
      tmpvar_37.w = ((tmpvar_32 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      vOscillations_33 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      highp float tmpvar_39;
      tmpvar_39 = (vOscillations_33.y * vOscillations_33.z);
      fTarget_36 = 1.0;
      fAmount_35 = tmpvar_39;
      if ((tmpvar_39 < 0.0)) {
        fTarget_36 = -1.0;
        fAmount_35 = -(tmpvar_39);
      };
      fOscillation_34 = (((
        (mix (mix (tmpvar_39, fTarget_36, fAmount_35), fTarget_36, fAmount_35) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_33.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_33.w * _ST_WindBranchWhip.x)));
      vPos_29 = (FinalPosition_19 + ((tmpvar_31 * fOscillation_34) * _ST_WindBranch.y));
      highp vec4 tmpvar_40;
      tmpvar_40.zw = vec2(0.0, 0.0);
      tmpvar_40.x = ((tmpvar_32 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_40.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_41;
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      tmpvar_41 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      fAdherenceScale_30 = (1.0 - ((
        ((tmpvar_41.x * tmpvar_41.y) * tmpvar_41.x)
       * tmpvar_41.y) * _ST_WindTurbulences.x));
      fAdherenceScale_30 = (fAdherenceScale_30 + ((vOscillations_33.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_29 = (vPos_29 + ((
        ((vRotatedBranchAnchor_17 - vPos_29) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_30) * _glesMultiTexCoord0.z));
      vPos_28 = vPos_29;
    } else {
      highp vec3 vPos_43;
      vPos_43 = vPos_28;
      highp vec3 tmpvar_44;
      tmpvar_44 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_45;
      tmpvar_45 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_46;
      highp float fAmount_47;
      highp float fTarget_48;
      highp vec4 tmpvar_49;
      tmpvar_49.w = 0.0;
      tmpvar_49.x = (tmpvar_45 + _glesMultiTexCoord0.w);
      tmpvar_49.y = ((tmpvar_45 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_49.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_45 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_49 + 0.5))
       * 2.0) - 1.0));
      vOscillations_46 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      highp float tmpvar_51;
      tmpvar_51 = (vOscillations_46.y * vOscillations_46.z);
      fTarget_48 = 1.0;
      fAmount_47 = tmpvar_51;
      if ((tmpvar_51 < 0.0)) {
        fTarget_48 = -1.0;
        fAmount_47 = -(tmpvar_51);
      };
      vPos_43 = (vPos_28 + ((tmpvar_44 * 
        (((mix (
          mix (tmpvar_51, fTarget_48, fAmount_47)
        , fTarget_48, fAmount_47) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_46.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_28 = vPos_43;
    };
    FinalPosition_19 = vPos_28;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_52;
    vPos_52 = FinalPosition_19;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_56.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    vPos_52.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_57.x + (tmpvar_57.y * tmpvar_57.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_53)));
    vPos_52 = (normalize(vPos_52) * fLength_54);
    FinalPosition_19 = vPos_52;
  };
  tmpvar_15.xyz = FinalPosition_19;
  highp vec4 tmpvar_59;
  tmpvar_59 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = (tmpvar_59 * 0.5);
  highp vec2 tmpvar_62;
  tmpvar_62.x = tmpvar_61.x;
  tmpvar_62.y = (tmpvar_61.y * _ProjectionParams.x);
  o_60.xy = (tmpvar_62 + tmpvar_61.w);
  o_60.zw = tmpvar_59.zw;
  highp vec3 tmpvar_63;
  tmpvar_63 = o_60.xyw;
  tmpvar_9 = tmpvar_63;
  highp vec2 tmpvar_64;
  tmpvar_64 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_64;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_65;
  v_65.x = _World2Object[0].x;
  v_65.y = _World2Object[1].x;
  v_65.z = _World2Object[2].x;
  v_65.w = _World2Object[3].x;
  highp vec4 v_66;
  v_66.x = _World2Object[0].y;
  v_66.y = _World2Object[1].y;
  v_66.z = _World2Object[2].y;
  v_66.w = _World2Object[3].y;
  highp vec4 v_67;
  v_67.x = _World2Object[0].z;
  v_67.y = _World2Object[1].z;
  v_67.z = _World2Object[2].z;
  v_67.w = _World2Object[3].z;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(((
    (v_65.xyz * tmpvar_16.x)
   + 
    (v_66.xyz * tmpvar_16.y)
  ) + (v_67.xyz * tmpvar_16.z)));
  worldNormal_3 = tmpvar_68;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_69;
  tmpvar_69.w = 1.0;
  tmpvar_69.xyz = worldNormal_3;
  mediump vec4 normal_70;
  normal_70 = tmpvar_69;
  mediump vec3 x2_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = (normal_70.xyzz * normal_70.yzzx);
  x2_71.x = dot (unity_SHBr, tmpvar_72);
  x2_71.y = dot (unity_SHBg, tmpvar_72);
  x2_71.z = dot (unity_SHBb, tmpvar_72);
  highp vec4 tmpvar_73;
  tmpvar_73 = (unity_World2Shadow[0] * (_Object2World * tmpvar_15));
  tmpvar_6 = tmpvar_73;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = (x2_71 + (unity_SHC.xyz * (
    (normal_70.x * normal_70.x)
   - 
    (normal_70.y * normal_70.y)
  )));
  xlv_TEXCOORD6 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  lowp float tmpvar_22;
  mediump float dist_23;
  lowp float tmpvar_24;
  tmpvar_24 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x;
  dist_23 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (float((dist_23 > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_22 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_26;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_22;
  mediump vec3 normalWorld_27;
  normalWorld_27 = tmpvar_5;
  mediump vec3 tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = normalWorld_27;
  mediump vec3 x1_30;
  x1_30.x = dot (unity_SHAr, tmpvar_29);
  x1_30.y = dot (unity_SHAg, tmpvar_29);
  x1_30.z = dot (unity_SHAb, tmpvar_29);
  tmpvar_28 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_28;
  lowp vec4 c_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_33 = tmpvar_34;
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tmpvar_9 * tmpvar_28) * diff_33);
  c_32.xyz = tmpvar_35;
  c_32.w = tmpvar_10;
  c_31.w = c_32.w;
  mediump vec3 tmpvar_36;
  tmpvar_36 = (c_32.xyz + (tmpvar_9 * (xlv_TEXCOORD5 + x1_30)));
  c_31.xyz = tmpvar_36;
  c_4.xyz = c_31.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_14;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = tmpvar_1.xyz;
  FinalPosition_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_21 == 5.0)) {
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    highp float fOffset_25;
    fOffset_25 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_25 = 0.75;
    };
    highp vec4 tmpvar_26;
    tmpvar_26.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_26.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_25);
    highp vec4 tmpvar_27;
    tmpvar_27 = abs(((
      fract((tmpvar_26 + 0.5))
     * 2.0) - 1.0));
    vPos_24 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_16 = tmpvar_2;
    FinalPosition_19 = vPos_24;
  };
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_28;
    vPos_28 = FinalPosition_19;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_29;
      vPos_29 = FinalPosition_19;
      highp float fAdherenceScale_30;
      highp vec3 tmpvar_31;
      tmpvar_31 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_32;
      tmpvar_32 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_33;
      highp float fOscillation_34;
      fOscillation_34 = 1.0;
      highp float fAmount_35;
      highp float fTarget_36;
      highp vec4 tmpvar_37;
      tmpvar_37.x = (tmpvar_32 + _glesMultiTexCoord0.w);
      tmpvar_37.y = ((tmpvar_32 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_37.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_32 + _glesMultiTexCoord0.w));
      tmpvar_37.w = ((tmpvar_32 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      vOscillations_33 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      highp float tmpvar_39;
      tmpvar_39 = (vOscillations_33.y * vOscillations_33.z);
      fTarget_36 = 1.0;
      fAmount_35 = tmpvar_39;
      if ((tmpvar_39 < 0.0)) {
        fTarget_36 = -1.0;
        fAmount_35 = -(tmpvar_39);
      };
      fOscillation_34 = (((
        (mix (mix (tmpvar_39, fTarget_36, fAmount_35), fTarget_36, fAmount_35) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_33.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_33.w * _ST_WindBranchWhip.x)));
      vPos_29 = (FinalPosition_19 + ((tmpvar_31 * fOscillation_34) * _ST_WindBranch.y));
      highp vec4 tmpvar_40;
      tmpvar_40.zw = vec2(0.0, 0.0);
      tmpvar_40.x = ((tmpvar_32 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_40.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_41;
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      tmpvar_41 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      fAdherenceScale_30 = (1.0 - ((
        ((tmpvar_41.x * tmpvar_41.y) * tmpvar_41.x)
       * tmpvar_41.y) * _ST_WindTurbulences.x));
      fAdherenceScale_30 = (fAdherenceScale_30 + ((vOscillations_33.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_29 = (vPos_29 + ((
        ((vRotatedBranchAnchor_17 - vPos_29) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_30) * _glesMultiTexCoord0.z));
      vPos_28 = vPos_29;
    } else {
      highp vec3 vPos_43;
      vPos_43 = vPos_28;
      highp vec3 tmpvar_44;
      tmpvar_44 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_45;
      tmpvar_45 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_46;
      highp float fAmount_47;
      highp float fTarget_48;
      highp vec4 tmpvar_49;
      tmpvar_49.w = 0.0;
      tmpvar_49.x = (tmpvar_45 + _glesMultiTexCoord0.w);
      tmpvar_49.y = ((tmpvar_45 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_49.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_45 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_49 + 0.5))
       * 2.0) - 1.0));
      vOscillations_46 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      highp float tmpvar_51;
      tmpvar_51 = (vOscillations_46.y * vOscillations_46.z);
      fTarget_48 = 1.0;
      fAmount_47 = tmpvar_51;
      if ((tmpvar_51 < 0.0)) {
        fTarget_48 = -1.0;
        fAmount_47 = -(tmpvar_51);
      };
      vPos_43 = (vPos_28 + ((tmpvar_44 * 
        (((mix (
          mix (tmpvar_51, fTarget_48, fAmount_47)
        , fTarget_48, fAmount_47) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_46.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_28 = vPos_43;
    };
    FinalPosition_19 = vPos_28;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_52;
    vPos_52 = FinalPosition_19;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_56.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    vPos_52.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_57.x + (tmpvar_57.y * tmpvar_57.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_53)));
    vPos_52 = (normalize(vPos_52) * fLength_54);
    FinalPosition_19 = vPos_52;
  };
  tmpvar_15.xyz = FinalPosition_19;
  highp vec4 tmpvar_59;
  tmpvar_59 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = (tmpvar_59 * 0.5);
  highp vec2 tmpvar_62;
  tmpvar_62.x = tmpvar_61.x;
  tmpvar_62.y = (tmpvar_61.y * _ProjectionParams.x);
  o_60.xy = (tmpvar_62 + tmpvar_61.w);
  o_60.zw = tmpvar_59.zw;
  highp vec3 tmpvar_63;
  tmpvar_63 = o_60.xyw;
  tmpvar_9 = tmpvar_63;
  highp vec2 tmpvar_64;
  tmpvar_64 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_64;
  tmpvar_5 = tmpvar_7;
  highp vec3 tmpvar_65;
  tmpvar_65 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_66;
  v_66.x = _World2Object[0].x;
  v_66.y = _World2Object[1].x;
  v_66.z = _World2Object[2].x;
  v_66.w = _World2Object[3].x;
  highp vec4 v_67;
  v_67.x = _World2Object[0].y;
  v_67.y = _World2Object[1].y;
  v_67.z = _World2Object[2].y;
  v_67.w = _World2Object[3].y;
  highp vec4 v_68;
  v_68.x = _World2Object[0].z;
  v_68.y = _World2Object[1].z;
  v_68.z = _World2Object[2].z;
  v_68.w = _World2Object[3].z;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize(((
    (v_66.xyz * tmpvar_16.x)
   + 
    (v_67.xyz * tmpvar_16.y)
  ) + (v_68.xyz * tmpvar_16.z)));
  worldNormal_3 = tmpvar_69;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_70;
  tmpvar_70.w = 1.0;
  tmpvar_70.xyz = worldNormal_3;
  mediump vec3 tmpvar_71;
  mediump vec4 normal_72;
  normal_72 = tmpvar_70;
  mediump vec3 x2_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = (normal_72.xyzz * normal_72.yzzx);
  x2_73.x = dot (unity_SHBr, tmpvar_74);
  x2_73.y = dot (unity_SHBg, tmpvar_74);
  x2_73.z = dot (unity_SHBb, tmpvar_74);
  tmpvar_71 = (x2_73 + (unity_SHC.xyz * (
    (normal_72.x * normal_72.x)
   - 
    (normal_72.y * normal_72.y)
  )));
  highp vec3 lightColor0_75;
  lightColor0_75 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_76;
  lightColor1_76 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_77;
  lightColor2_77 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_78;
  lightColor3_78 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_79;
  lightAttenSq_79 = unity_4LightAtten0;
  highp vec3 normal_80;
  normal_80 = worldNormal_3;
  highp vec4 tmpvar_81;
  tmpvar_81 = (unity_4LightPosX0 - tmpvar_65.x);
  highp vec4 tmpvar_82;
  tmpvar_82 = (unity_4LightPosY0 - tmpvar_65.y);
  highp vec4 tmpvar_83;
  tmpvar_83 = (unity_4LightPosZ0 - tmpvar_65.z);
  highp vec4 tmpvar_84;
  tmpvar_84 = (((tmpvar_81 * tmpvar_81) + (tmpvar_82 * tmpvar_82)) + (tmpvar_83 * tmpvar_83));
  highp vec4 tmpvar_85;
  tmpvar_85 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_81 * normal_80.x) + (tmpvar_82 * normal_80.y)) + (tmpvar_83 * normal_80.z))
   * 
    inversesqrt(tmpvar_84)
  )) * (1.0/((1.0 + 
    (tmpvar_84 * lightAttenSq_79)
  ))));
  highp vec3 tmpvar_86;
  tmpvar_86 = (tmpvar_71 + ((
    ((lightColor0_75 * tmpvar_85.x) + (lightColor1_76 * tmpvar_85.y))
   + 
    (lightColor2_77 * tmpvar_85.z)
  ) + (lightColor3_78 * tmpvar_85.w)));
  tmpvar_6 = tmpvar_86;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_65;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  mediump float tmpvar_13;
  tmpvar_13 = fract(tmpvar_12.y);
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_13 * 0.0625) + unity_LODFade.y);
  projUV_11.y = tmpvar_14;
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_17;
  lowp float x_18;
  x_18 = (tmpvar_9 - _Cutoff);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_19 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_21;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_22;
  normalWorld_22 = tmpvar_4;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_22;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_27 = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_8 * tmpvar_1) * diff_27);
  c_26.xyz = tmpvar_29;
  c_26.w = tmpvar_9;
  c_25.w = c_26.w;
  mediump vec3 tmpvar_30;
  tmpvar_30 = (c_26.xyz + (tmpvar_8 * (xlv_TEXCOORD5 + x1_24)));
  c_25.xyz = tmpvar_30;
  c_3.xyz = c_25.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_14;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = tmpvar_1.xyz;
  FinalPosition_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_21 == 5.0)) {
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    highp float fOffset_25;
    fOffset_25 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_25 = 0.75;
    };
    highp vec4 tmpvar_26;
    tmpvar_26.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_26.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_25);
    highp vec4 tmpvar_27;
    tmpvar_27 = abs(((
      fract((tmpvar_26 + 0.5))
     * 2.0) - 1.0));
    vPos_24 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_16 = tmpvar_2;
    FinalPosition_19 = vPos_24;
  };
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_28;
    vPos_28 = FinalPosition_19;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_29;
      vPos_29 = FinalPosition_19;
      highp float fAdherenceScale_30;
      highp vec3 tmpvar_31;
      tmpvar_31 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_32;
      tmpvar_32 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_33;
      highp float fOscillation_34;
      fOscillation_34 = 1.0;
      highp float fAmount_35;
      highp float fTarget_36;
      highp vec4 tmpvar_37;
      tmpvar_37.x = (tmpvar_32 + _glesMultiTexCoord0.w);
      tmpvar_37.y = ((tmpvar_32 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_37.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_32 + _glesMultiTexCoord0.w));
      tmpvar_37.w = ((tmpvar_32 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      vOscillations_33 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      highp float tmpvar_39;
      tmpvar_39 = (vOscillations_33.y * vOscillations_33.z);
      fTarget_36 = 1.0;
      fAmount_35 = tmpvar_39;
      if ((tmpvar_39 < 0.0)) {
        fTarget_36 = -1.0;
        fAmount_35 = -(tmpvar_39);
      };
      fOscillation_34 = (((
        (mix (mix (tmpvar_39, fTarget_36, fAmount_35), fTarget_36, fAmount_35) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_33.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_33.w * _ST_WindBranchWhip.x)));
      vPos_29 = (FinalPosition_19 + ((tmpvar_31 * fOscillation_34) * _ST_WindBranch.y));
      highp vec4 tmpvar_40;
      tmpvar_40.zw = vec2(0.0, 0.0);
      tmpvar_40.x = ((tmpvar_32 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_40.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_41;
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      tmpvar_41 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      fAdherenceScale_30 = (1.0 - ((
        ((tmpvar_41.x * tmpvar_41.y) * tmpvar_41.x)
       * tmpvar_41.y) * _ST_WindTurbulences.x));
      fAdherenceScale_30 = (fAdherenceScale_30 + ((vOscillations_33.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_29 = (vPos_29 + ((
        ((vRotatedBranchAnchor_17 - vPos_29) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_30) * _glesMultiTexCoord0.z));
      vPos_28 = vPos_29;
    } else {
      highp vec3 vPos_43;
      vPos_43 = vPos_28;
      highp vec3 tmpvar_44;
      tmpvar_44 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_45;
      tmpvar_45 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_46;
      highp float fAmount_47;
      highp float fTarget_48;
      highp vec4 tmpvar_49;
      tmpvar_49.w = 0.0;
      tmpvar_49.x = (tmpvar_45 + _glesMultiTexCoord0.w);
      tmpvar_49.y = ((tmpvar_45 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_49.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_45 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_49 + 0.5))
       * 2.0) - 1.0));
      vOscillations_46 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      highp float tmpvar_51;
      tmpvar_51 = (vOscillations_46.y * vOscillations_46.z);
      fTarget_48 = 1.0;
      fAmount_47 = tmpvar_51;
      if ((tmpvar_51 < 0.0)) {
        fTarget_48 = -1.0;
        fAmount_47 = -(tmpvar_51);
      };
      vPos_43 = (vPos_28 + ((tmpvar_44 * 
        (((mix (
          mix (tmpvar_51, fTarget_48, fAmount_47)
        , fTarget_48, fAmount_47) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_46.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_28 = vPos_43;
    };
    FinalPosition_19 = vPos_28;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_52;
    vPos_52 = FinalPosition_19;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_56.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    vPos_52.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_57.x + (tmpvar_57.y * tmpvar_57.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_53)));
    vPos_52 = (normalize(vPos_52) * fLength_54);
    FinalPosition_19 = vPos_52;
  };
  tmpvar_15.xyz = FinalPosition_19;
  highp vec4 tmpvar_59;
  tmpvar_59 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = (tmpvar_59 * 0.5);
  highp vec2 tmpvar_62;
  tmpvar_62.x = tmpvar_61.x;
  tmpvar_62.y = (tmpvar_61.y * _ProjectionParams.x);
  o_60.xy = (tmpvar_62 + tmpvar_61.w);
  o_60.zw = tmpvar_59.zw;
  highp vec3 tmpvar_63;
  tmpvar_63 = o_60.xyw;
  tmpvar_9 = tmpvar_63;
  highp vec2 tmpvar_64;
  tmpvar_64 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_64;
  tmpvar_5 = tmpvar_7;
  highp vec3 tmpvar_65;
  tmpvar_65 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_66;
  v_66.x = _World2Object[0].x;
  v_66.y = _World2Object[1].x;
  v_66.z = _World2Object[2].x;
  v_66.w = _World2Object[3].x;
  highp vec4 v_67;
  v_67.x = _World2Object[0].y;
  v_67.y = _World2Object[1].y;
  v_67.z = _World2Object[2].y;
  v_67.w = _World2Object[3].y;
  highp vec4 v_68;
  v_68.x = _World2Object[0].z;
  v_68.y = _World2Object[1].z;
  v_68.z = _World2Object[2].z;
  v_68.w = _World2Object[3].z;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize(((
    (v_66.xyz * tmpvar_16.x)
   + 
    (v_67.xyz * tmpvar_16.y)
  ) + (v_68.xyz * tmpvar_16.z)));
  worldNormal_3 = tmpvar_69;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_70;
  tmpvar_70.w = 1.0;
  tmpvar_70.xyz = worldNormal_3;
  mediump vec3 tmpvar_71;
  mediump vec4 normal_72;
  normal_72 = tmpvar_70;
  mediump vec3 x2_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = (normal_72.xyzz * normal_72.yzzx);
  x2_73.x = dot (unity_SHBr, tmpvar_74);
  x2_73.y = dot (unity_SHBg, tmpvar_74);
  x2_73.z = dot (unity_SHBb, tmpvar_74);
  tmpvar_71 = (x2_73 + (unity_SHC.xyz * (
    (normal_72.x * normal_72.x)
   - 
    (normal_72.y * normal_72.y)
  )));
  highp vec3 lightColor0_75;
  lightColor0_75 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_76;
  lightColor1_76 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_77;
  lightColor2_77 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_78;
  lightColor3_78 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_79;
  lightAttenSq_79 = unity_4LightAtten0;
  highp vec3 normal_80;
  normal_80 = worldNormal_3;
  highp vec4 tmpvar_81;
  tmpvar_81 = (unity_4LightPosX0 - tmpvar_65.x);
  highp vec4 tmpvar_82;
  tmpvar_82 = (unity_4LightPosY0 - tmpvar_65.y);
  highp vec4 tmpvar_83;
  tmpvar_83 = (unity_4LightPosZ0 - tmpvar_65.z);
  highp vec4 tmpvar_84;
  tmpvar_84 = (((tmpvar_81 * tmpvar_81) + (tmpvar_82 * tmpvar_82)) + (tmpvar_83 * tmpvar_83));
  highp vec4 tmpvar_85;
  tmpvar_85 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_81 * normal_80.x) + (tmpvar_82 * normal_80.y)) + (tmpvar_83 * normal_80.z))
   * 
    inversesqrt(tmpvar_84)
  )) * (1.0/((1.0 + 
    (tmpvar_84 * lightAttenSq_79)
  ))));
  highp vec3 tmpvar_86;
  tmpvar_86 = (tmpvar_71 + ((
    ((lightColor0_75 * tmpvar_85.x) + (lightColor1_76 * tmpvar_85.y))
   + 
    (lightColor2_77 * tmpvar_85.z)
  ) + (lightColor3_78 * tmpvar_85.w)));
  tmpvar_6 = tmpvar_86;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_65;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_6;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  mediump float tmpvar_13;
  tmpvar_13 = fract(tmpvar_12.y);
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_13 * 0.0625) + unity_LODFade.y);
  projUV_11.y = tmpvar_14;
  lowp float x_15;
  x_15 = (texture (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_17;
  lowp float x_18;
  x_18 = (tmpvar_9 - _Cutoff);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_19 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_21;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_22;
  normalWorld_22 = tmpvar_4;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_22;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_27 = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_8 * tmpvar_1) * diff_27);
  c_26.xyz = tmpvar_29;
  c_26.w = tmpvar_9;
  c_25.w = c_26.w;
  mediump vec3 tmpvar_30;
  tmpvar_30 = (c_26.xyz + (tmpvar_8 * (xlv_TEXCOORD5 + x1_24)));
  c_25.xyz = tmpvar_30;
  c_3.xyz = c_25.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_11;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_15;
  highp vec4 tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_16 = tmpvar_1;
  tmpvar_17 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = tmpvar_1.xyz;
  FinalPosition_20 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = (_WindQuality * _WindEnabled);
  if ((tmpvar_22 > 0.0)) {
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_23 * _ST_WindVector.xyz));
    highp mat3 tmpvar_24;
    tmpvar_24[0] = _World2Object[0].xyz;
    tmpvar_24[1] = _World2Object[1].xyz;
    tmpvar_24[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_24 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_22 == 5.0)) {
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    highp float fOffset_26;
    fOffset_26 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_26 = 0.75;
    };
    highp vec4 tmpvar_27;
    tmpvar_27.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_27.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_26);
    highp vec4 tmpvar_28;
    tmpvar_28 = abs(((
      fract((tmpvar_27 + 0.5))
     * 2.0) - 1.0));
    vPos_25 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_17 = tmpvar_2;
    FinalPosition_20 = vPos_25;
  };
  if ((tmpvar_22 >= 3.0)) {
    highp vec3 vPos_29;
    vPos_29 = FinalPosition_20;
    if ((tmpvar_22 == 5.0)) {
      highp vec3 vPos_30;
      vPos_30 = FinalPosition_20;
      highp float fAdherenceScale_31;
      highp vec3 tmpvar_32;
      tmpvar_32 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_33;
      tmpvar_33 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_34;
      highp float fOscillation_35;
      fOscillation_35 = 1.0;
      highp float fAmount_36;
      highp float fTarget_37;
      highp vec4 tmpvar_38;
      tmpvar_38.x = (tmpvar_33 + _glesMultiTexCoord0.w);
      tmpvar_38.y = ((tmpvar_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_38.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_33 + _glesMultiTexCoord0.w));
      tmpvar_38.w = ((tmpvar_33 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      vOscillations_34 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      highp float tmpvar_40;
      tmpvar_40 = (vOscillations_34.y * vOscillations_34.z);
      fTarget_37 = 1.0;
      fAmount_36 = tmpvar_40;
      if ((tmpvar_40 < 0.0)) {
        fTarget_37 = -1.0;
        fAmount_36 = -(tmpvar_40);
      };
      fOscillation_35 = (((
        (mix (mix (tmpvar_40, fTarget_37, fAmount_36), fTarget_37, fAmount_36) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_34.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_34.w * _ST_WindBranchWhip.x)));
      vPos_30 = (FinalPosition_20 + ((tmpvar_32 * fOscillation_35) * _ST_WindBranch.y));
      highp vec4 tmpvar_41;
      tmpvar_41.zw = vec2(0.0, 0.0);
      tmpvar_41.x = ((tmpvar_33 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_41.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      fAdherenceScale_31 = (1.0 - ((
        ((tmpvar_42.x * tmpvar_42.y) * tmpvar_42.x)
       * tmpvar_42.y) * _ST_WindTurbulences.x));
      fAdherenceScale_31 = (fAdherenceScale_31 + ((vOscillations_34.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_30 = (vPos_30 + ((
        ((vRotatedBranchAnchor_18 - vPos_30) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_31) * _glesMultiTexCoord0.z));
      vPos_29 = vPos_30;
    } else {
      highp vec3 vPos_44;
      vPos_44 = vPos_29;
      highp vec3 tmpvar_45;
      tmpvar_45 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_46;
      tmpvar_46 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_47;
      highp float fAmount_48;
      highp float fTarget_49;
      highp vec4 tmpvar_50;
      tmpvar_50.w = 0.0;
      tmpvar_50.x = (tmpvar_46 + _glesMultiTexCoord0.w);
      tmpvar_50.y = ((tmpvar_46 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_50.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_46 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_51;
      tmpvar_51 = abs(((
        fract((tmpvar_50 + 0.5))
       * 2.0) - 1.0));
      vOscillations_47 = (((
        (tmpvar_51 * tmpvar_51)
       * 
        (3.0 - (2.0 * tmpvar_51))
      ) - 0.5) * 2.0);
      highp float tmpvar_52;
      tmpvar_52 = (vOscillations_47.y * vOscillations_47.z);
      fTarget_49 = 1.0;
      fAmount_48 = tmpvar_52;
      if ((tmpvar_52 < 0.0)) {
        fTarget_49 = -1.0;
        fAmount_48 = -(tmpvar_52);
      };
      vPos_44 = (vPos_29 + ((tmpvar_45 * 
        (((mix (
          mix (tmpvar_52, fTarget_49, fAmount_48)
        , fTarget_49, fAmount_48) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_47.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_29 = vPos_44;
    };
    FinalPosition_20 = vPos_29;
  };
  if ((tmpvar_22 > 0.0)) {
    highp vec3 vPos_53;
    vPos_53 = FinalPosition_20;
    highp float fAdjust_54;
    highp float fLength_55;
    fLength_55 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_56;
    tmpvar_56 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_54 = tmpvar_56;
    if ((tmpvar_56 != 0.0)) {
      fAdjust_54 = pow (tmpvar_56, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_57;
    tmpvar_57.zw = vec2(0.0, 0.0);
    tmpvar_57.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_57.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_58;
    highp vec4 tmpvar_59;
    tmpvar_59 = abs(((
      fract((tmpvar_57 + 0.5))
     * 2.0) - 1.0));
    tmpvar_58 = (((
      (tmpvar_59 * tmpvar_59)
     * 
      (3.0 - (2.0 * tmpvar_59))
    ) - 0.5) * 2.0);
    vPos_53.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_58.x + (tmpvar_58.y * tmpvar_58.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_54)));
    vPos_53 = (normalize(vPos_53) * fLength_55);
    FinalPosition_20 = vPos_53;
  };
  tmpvar_16.xyz = FinalPosition_20;
  highp vec4 tmpvar_60;
  tmpvar_60 = (glstate_matrix_mvp * tmpvar_16);
  highp vec4 o_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = (tmpvar_60 * 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63.x = tmpvar_62.x;
  tmpvar_63.y = (tmpvar_62.y * _ProjectionParams.x);
  o_61.xy = (tmpvar_63 + tmpvar_62.w);
  o_61.zw = tmpvar_60.zw;
  highp vec3 tmpvar_64;
  tmpvar_64 = o_61.xyw;
  tmpvar_10 = tmpvar_64;
  highp vec2 tmpvar_65;
  tmpvar_65 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_65;
  tmpvar_5 = tmpvar_8;
  highp vec3 tmpvar_66;
  tmpvar_66 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_67;
  v_67.x = _World2Object[0].x;
  v_67.y = _World2Object[1].x;
  v_67.z = _World2Object[2].x;
  v_67.w = _World2Object[3].x;
  highp vec4 v_68;
  v_68.x = _World2Object[0].y;
  v_68.y = _World2Object[1].y;
  v_68.z = _World2Object[2].y;
  v_68.w = _World2Object[3].y;
  highp vec4 v_69;
  v_69.x = _World2Object[0].z;
  v_69.y = _World2Object[1].z;
  v_69.z = _World2Object[2].z;
  v_69.w = _World2Object[3].z;
  highp vec3 tmpvar_70;
  tmpvar_70 = normalize(((
    (v_67.xyz * tmpvar_17.x)
   + 
    (v_68.xyz * tmpvar_17.y)
  ) + (v_69.xyz * tmpvar_17.z)));
  worldNormal_3 = tmpvar_70;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_71;
  tmpvar_71.w = 1.0;
  tmpvar_71.xyz = worldNormal_3;
  mediump vec3 tmpvar_72;
  mediump vec4 normal_73;
  normal_73 = tmpvar_71;
  mediump vec3 x2_74;
  mediump vec4 tmpvar_75;
  tmpvar_75 = (normal_73.xyzz * normal_73.yzzx);
  x2_74.x = dot (unity_SHBr, tmpvar_75);
  x2_74.y = dot (unity_SHBg, tmpvar_75);
  x2_74.z = dot (unity_SHBb, tmpvar_75);
  tmpvar_72 = (x2_74 + (unity_SHC.xyz * (
    (normal_73.x * normal_73.x)
   - 
    (normal_73.y * normal_73.y)
  )));
  highp vec3 lightColor0_76;
  lightColor0_76 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_77;
  lightColor1_77 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_78;
  lightColor2_78 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_79;
  lightColor3_79 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_80;
  lightAttenSq_80 = unity_4LightAtten0;
  highp vec3 normal_81;
  normal_81 = worldNormal_3;
  highp vec4 tmpvar_82;
  tmpvar_82 = (unity_4LightPosX0 - tmpvar_66.x);
  highp vec4 tmpvar_83;
  tmpvar_83 = (unity_4LightPosY0 - tmpvar_66.y);
  highp vec4 tmpvar_84;
  tmpvar_84 = (unity_4LightPosZ0 - tmpvar_66.z);
  highp vec4 tmpvar_85;
  tmpvar_85 = (((tmpvar_82 * tmpvar_82) + (tmpvar_83 * tmpvar_83)) + (tmpvar_84 * tmpvar_84));
  highp vec4 tmpvar_86;
  tmpvar_86 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_82 * normal_81.x) + (tmpvar_83 * normal_81.y)) + (tmpvar_84 * normal_81.z))
   * 
    inversesqrt(tmpvar_85)
  )) * (1.0/((1.0 + 
    (tmpvar_85 * lightAttenSq_80)
  ))));
  highp vec3 tmpvar_87;
  tmpvar_87 = (tmpvar_72 + ((
    ((lightColor0_76 * tmpvar_86.x) + (lightColor1_77 * tmpvar_86.y))
   + 
    (lightColor2_78 * tmpvar_86.z)
  ) + (lightColor3_79 * tmpvar_86.w)));
  tmpvar_6 = tmpvar_87;
  highp vec4 tmpvar_88;
  tmpvar_88 = (unity_World2Shadow[0] * (_Object2World * tmpvar_16));
  tmpvar_7 = tmpvar_88;
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_66;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  lowp float tmpvar_22;
  mediump float dist_23;
  lowp float tmpvar_24;
  tmpvar_24 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x;
  dist_23 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (float((dist_23 > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_22 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_26;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_22;
  mediump vec3 normalWorld_27;
  normalWorld_27 = tmpvar_5;
  mediump vec3 tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = normalWorld_27;
  mediump vec3 x1_30;
  x1_30.x = dot (unity_SHAr, tmpvar_29);
  x1_30.y = dot (unity_SHAg, tmpvar_29);
  x1_30.z = dot (unity_SHAb, tmpvar_29);
  tmpvar_28 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_28;
  lowp vec4 c_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_33 = tmpvar_34;
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tmpvar_9 * tmpvar_28) * diff_33);
  c_32.xyz = tmpvar_35;
  c_32.w = tmpvar_10;
  c_31.w = c_32.w;
  mediump vec3 tmpvar_36;
  tmpvar_36 = (c_32.xyz + (tmpvar_9 * (xlv_TEXCOORD5 + x1_30)));
  c_31.xyz = tmpvar_36;
  c_4.xyz = c_31.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_14;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = tmpvar_1.xyz;
  FinalPosition_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_21 == 5.0)) {
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    highp float fOffset_25;
    fOffset_25 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_25 = 0.75;
    };
    highp vec4 tmpvar_26;
    tmpvar_26.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_26.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_25);
    highp vec4 tmpvar_27;
    tmpvar_27 = abs(((
      fract((tmpvar_26 + 0.5))
     * 2.0) - 1.0));
    vPos_24 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_16 = tmpvar_2;
    FinalPosition_19 = vPos_24;
  };
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_28;
    vPos_28 = FinalPosition_19;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_29;
      vPos_29 = FinalPosition_19;
      highp float fAdherenceScale_30;
      highp vec3 tmpvar_31;
      tmpvar_31 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_32;
      tmpvar_32 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_33;
      highp float fOscillation_34;
      fOscillation_34 = 1.0;
      highp float fAmount_35;
      highp float fTarget_36;
      highp vec4 tmpvar_37;
      tmpvar_37.x = (tmpvar_32 + _glesMultiTexCoord0.w);
      tmpvar_37.y = ((tmpvar_32 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_37.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_32 + _glesMultiTexCoord0.w));
      tmpvar_37.w = ((tmpvar_32 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      vOscillations_33 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      highp float tmpvar_39;
      tmpvar_39 = (vOscillations_33.y * vOscillations_33.z);
      fTarget_36 = 1.0;
      fAmount_35 = tmpvar_39;
      if ((tmpvar_39 < 0.0)) {
        fTarget_36 = -1.0;
        fAmount_35 = -(tmpvar_39);
      };
      fOscillation_34 = (((
        (mix (mix (tmpvar_39, fTarget_36, fAmount_35), fTarget_36, fAmount_35) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_33.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_33.w * _ST_WindBranchWhip.x)));
      vPos_29 = (FinalPosition_19 + ((tmpvar_31 * fOscillation_34) * _ST_WindBranch.y));
      highp vec4 tmpvar_40;
      tmpvar_40.zw = vec2(0.0, 0.0);
      tmpvar_40.x = ((tmpvar_32 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_40.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_41;
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      tmpvar_41 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      fAdherenceScale_30 = (1.0 - ((
        ((tmpvar_41.x * tmpvar_41.y) * tmpvar_41.x)
       * tmpvar_41.y) * _ST_WindTurbulences.x));
      fAdherenceScale_30 = (fAdherenceScale_30 + ((vOscillations_33.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_29 = (vPos_29 + ((
        ((vRotatedBranchAnchor_17 - vPos_29) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_30) * _glesMultiTexCoord0.z));
      vPos_28 = vPos_29;
    } else {
      highp vec3 vPos_43;
      vPos_43 = vPos_28;
      highp vec3 tmpvar_44;
      tmpvar_44 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_45;
      tmpvar_45 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_46;
      highp float fAmount_47;
      highp float fTarget_48;
      highp vec4 tmpvar_49;
      tmpvar_49.w = 0.0;
      tmpvar_49.x = (tmpvar_45 + _glesMultiTexCoord0.w);
      tmpvar_49.y = ((tmpvar_45 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_49.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_45 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_49 + 0.5))
       * 2.0) - 1.0));
      vOscillations_46 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      highp float tmpvar_51;
      tmpvar_51 = (vOscillations_46.y * vOscillations_46.z);
      fTarget_48 = 1.0;
      fAmount_47 = tmpvar_51;
      if ((tmpvar_51 < 0.0)) {
        fTarget_48 = -1.0;
        fAmount_47 = -(tmpvar_51);
      };
      vPos_43 = (vPos_28 + ((tmpvar_44 * 
        (((mix (
          mix (tmpvar_51, fTarget_48, fAmount_47)
        , fTarget_48, fAmount_47) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_46.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_28 = vPos_43;
    };
    FinalPosition_19 = vPos_28;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_52;
    vPos_52 = FinalPosition_19;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_56.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    vPos_52.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_57.x + (tmpvar_57.y * tmpvar_57.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_53)));
    vPos_52 = (normalize(vPos_52) * fLength_54);
    FinalPosition_19 = vPos_52;
  };
  tmpvar_15.xyz = FinalPosition_19;
  highp vec4 tmpvar_59;
  tmpvar_59 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = (tmpvar_59 * 0.5);
  highp vec2 tmpvar_62;
  tmpvar_62.x = tmpvar_61.x;
  tmpvar_62.y = (tmpvar_61.y * _ProjectionParams.x);
  o_60.xy = (tmpvar_62 + tmpvar_61.w);
  o_60.zw = tmpvar_59.zw;
  highp vec3 tmpvar_63;
  tmpvar_63 = o_60.xyw;
  tmpvar_9 = tmpvar_63;
  highp vec2 tmpvar_64;
  tmpvar_64 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_64;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_65;
  v_65.x = _World2Object[0].x;
  v_65.y = _World2Object[1].x;
  v_65.z = _World2Object[2].x;
  v_65.w = _World2Object[3].x;
  highp vec4 v_66;
  v_66.x = _World2Object[0].y;
  v_66.y = _World2Object[1].y;
  v_66.z = _World2Object[2].y;
  v_66.w = _World2Object[3].y;
  highp vec4 v_67;
  v_67.x = _World2Object[0].z;
  v_67.y = _World2Object[1].z;
  v_67.z = _World2Object[2].z;
  v_67.w = _World2Object[3].z;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(((
    (v_65.xyz * tmpvar_16.x)
   + 
    (v_66.xyz * tmpvar_16.y)
  ) + (v_67.xyz * tmpvar_16.z)));
  worldNormal_3 = tmpvar_68;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_69;
  tmpvar_69.w = 1.0;
  tmpvar_69.xyz = worldNormal_3;
  mediump vec4 normal_70;
  normal_70 = tmpvar_69;
  mediump vec3 x2_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = (normal_70.xyzz * normal_70.yzzx);
  x2_71.x = dot (unity_SHBr, tmpvar_72);
  x2_71.y = dot (unity_SHBg, tmpvar_72);
  x2_71.z = dot (unity_SHBb, tmpvar_72);
  highp vec4 tmpvar_73;
  tmpvar_73 = (unity_World2Shadow[0] * (_Object2World * tmpvar_15));
  tmpvar_6 = tmpvar_73;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = (x2_71 + (unity_SHC.xyz * (
    (normal_70.x * normal_70.x)
   - 
    (normal_70.y * normal_70.y)
  )));
  xlv_TEXCOORD6 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  lowp float shadow_22;
  lowp float tmpvar_23;
  tmpvar_23 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz);
  mediump float tmpvar_24;
  tmpvar_24 = (_LightShadowData.x + (tmpvar_23 * (1.0 - _LightShadowData.x)));
  shadow_22 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_25;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_22;
  mediump vec3 normalWorld_26;
  normalWorld_26 = tmpvar_5;
  mediump vec3 tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = normalWorld_26;
  mediump vec3 x1_29;
  x1_29.x = dot (unity_SHAr, tmpvar_28);
  x1_29.y = dot (unity_SHAg, tmpvar_28);
  x1_29.z = dot (unity_SHAb, tmpvar_28);
  tmpvar_27 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_27;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_32 = tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_9 * tmpvar_27) * diff_32);
  c_31.xyz = tmpvar_34;
  c_31.w = tmpvar_10;
  c_30.w = c_31.w;
  mediump vec3 tmpvar_35;
  tmpvar_35 = (c_31.xyz + (tmpvar_9 * (xlv_TEXCOORD5 + x1_29)));
  c_30.xyz = tmpvar_35;
  c_4.xyz = c_30.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_14;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = tmpvar_1.xyz;
  FinalPosition_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_21 == 5.0)) {
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    highp float fOffset_25;
    fOffset_25 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_25 = 0.75;
    };
    highp vec4 tmpvar_26;
    tmpvar_26.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_26.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_25);
    highp vec4 tmpvar_27;
    tmpvar_27 = abs(((
      fract((tmpvar_26 + 0.5))
     * 2.0) - 1.0));
    vPos_24 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_16 = tmpvar_2;
    FinalPosition_19 = vPos_24;
  };
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_28;
    vPos_28 = FinalPosition_19;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_29;
      vPos_29 = FinalPosition_19;
      highp float fAdherenceScale_30;
      highp vec3 tmpvar_31;
      tmpvar_31 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_32;
      tmpvar_32 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_33;
      highp float fOscillation_34;
      fOscillation_34 = 1.0;
      highp float fAmount_35;
      highp float fTarget_36;
      highp vec4 tmpvar_37;
      tmpvar_37.x = (tmpvar_32 + _glesMultiTexCoord0.w);
      tmpvar_37.y = ((tmpvar_32 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_37.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_32 + _glesMultiTexCoord0.w));
      tmpvar_37.w = ((tmpvar_32 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      vOscillations_33 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      highp float tmpvar_39;
      tmpvar_39 = (vOscillations_33.y * vOscillations_33.z);
      fTarget_36 = 1.0;
      fAmount_35 = tmpvar_39;
      if ((tmpvar_39 < 0.0)) {
        fTarget_36 = -1.0;
        fAmount_35 = -(tmpvar_39);
      };
      fOscillation_34 = (((
        (mix (mix (tmpvar_39, fTarget_36, fAmount_35), fTarget_36, fAmount_35) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_33.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_33.w * _ST_WindBranchWhip.x)));
      vPos_29 = (FinalPosition_19 + ((tmpvar_31 * fOscillation_34) * _ST_WindBranch.y));
      highp vec4 tmpvar_40;
      tmpvar_40.zw = vec2(0.0, 0.0);
      tmpvar_40.x = ((tmpvar_32 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_40.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_41;
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      tmpvar_41 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      fAdherenceScale_30 = (1.0 - ((
        ((tmpvar_41.x * tmpvar_41.y) * tmpvar_41.x)
       * tmpvar_41.y) * _ST_WindTurbulences.x));
      fAdherenceScale_30 = (fAdherenceScale_30 + ((vOscillations_33.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_29 = (vPos_29 + ((
        ((vRotatedBranchAnchor_17 - vPos_29) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_30) * _glesMultiTexCoord0.z));
      vPos_28 = vPos_29;
    } else {
      highp vec3 vPos_43;
      vPos_43 = vPos_28;
      highp vec3 tmpvar_44;
      tmpvar_44 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_45;
      tmpvar_45 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_46;
      highp float fAmount_47;
      highp float fTarget_48;
      highp vec4 tmpvar_49;
      tmpvar_49.w = 0.0;
      tmpvar_49.x = (tmpvar_45 + _glesMultiTexCoord0.w);
      tmpvar_49.y = ((tmpvar_45 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_49.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_45 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_49 + 0.5))
       * 2.0) - 1.0));
      vOscillations_46 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      highp float tmpvar_51;
      tmpvar_51 = (vOscillations_46.y * vOscillations_46.z);
      fTarget_48 = 1.0;
      fAmount_47 = tmpvar_51;
      if ((tmpvar_51 < 0.0)) {
        fTarget_48 = -1.0;
        fAmount_47 = -(tmpvar_51);
      };
      vPos_43 = (vPos_28 + ((tmpvar_44 * 
        (((mix (
          mix (tmpvar_51, fTarget_48, fAmount_47)
        , fTarget_48, fAmount_47) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_46.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_28 = vPos_43;
    };
    FinalPosition_19 = vPos_28;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_52;
    vPos_52 = FinalPosition_19;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_56.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    vPos_52.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_57.x + (tmpvar_57.y * tmpvar_57.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_53)));
    vPos_52 = (normalize(vPos_52) * fLength_54);
    FinalPosition_19 = vPos_52;
  };
  tmpvar_15.xyz = FinalPosition_19;
  highp vec4 tmpvar_59;
  tmpvar_59 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = (tmpvar_59 * 0.5);
  highp vec2 tmpvar_62;
  tmpvar_62.x = tmpvar_61.x;
  tmpvar_62.y = (tmpvar_61.y * _ProjectionParams.x);
  o_60.xy = (tmpvar_62 + tmpvar_61.w);
  o_60.zw = tmpvar_59.zw;
  highp vec3 tmpvar_63;
  tmpvar_63 = o_60.xyw;
  tmpvar_9 = tmpvar_63;
  highp vec2 tmpvar_64;
  tmpvar_64 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_64;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_65;
  v_65.x = _World2Object[0].x;
  v_65.y = _World2Object[1].x;
  v_65.z = _World2Object[2].x;
  v_65.w = _World2Object[3].x;
  highp vec4 v_66;
  v_66.x = _World2Object[0].y;
  v_66.y = _World2Object[1].y;
  v_66.z = _World2Object[2].y;
  v_66.w = _World2Object[3].y;
  highp vec4 v_67;
  v_67.x = _World2Object[0].z;
  v_67.y = _World2Object[1].z;
  v_67.z = _World2Object[2].z;
  v_67.w = _World2Object[3].z;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(((
    (v_65.xyz * tmpvar_16.x)
   + 
    (v_66.xyz * tmpvar_16.y)
  ) + (v_67.xyz * tmpvar_16.z)));
  worldNormal_3 = tmpvar_68;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_69;
  tmpvar_69.w = 1.0;
  tmpvar_69.xyz = worldNormal_3;
  mediump vec4 normal_70;
  normal_70 = tmpvar_69;
  mediump vec3 x2_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = (normal_70.xyzz * normal_70.yzzx);
  x2_71.x = dot (unity_SHBr, tmpvar_72);
  x2_71.y = dot (unity_SHBg, tmpvar_72);
  x2_71.z = dot (unity_SHBb, tmpvar_72);
  highp vec4 tmpvar_73;
  tmpvar_73 = (unity_World2Shadow[0] * (_Object2World * tmpvar_15));
  tmpvar_6 = tmpvar_73;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = (x2_71 + (unity_SHC.xyz * (
    (normal_70.x * normal_70.x)
   - 
    (normal_70.y * normal_70.y)
  )));
  xlv_TEXCOORD6 = tmpvar_6;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  lowp float shadow_22;
  mediump float tmpvar_23;
  tmpvar_23 = texture (_ShadowMapTexture, xlv_TEXCOORD6.xyz);
  lowp float tmpvar_24;
  tmpvar_24 = tmpvar_23;
  mediump float tmpvar_25;
  tmpvar_25 = (_LightShadowData.x + (tmpvar_24 * (1.0 - _LightShadowData.x)));
  shadow_22 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_26;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_22;
  mediump vec3 normalWorld_27;
  normalWorld_27 = tmpvar_5;
  mediump vec3 tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = normalWorld_27;
  mediump vec3 x1_30;
  x1_30.x = dot (unity_SHAr, tmpvar_29);
  x1_30.y = dot (unity_SHAg, tmpvar_29);
  x1_30.z = dot (unity_SHAb, tmpvar_29);
  tmpvar_28 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_28;
  lowp vec4 c_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_33 = tmpvar_34;
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tmpvar_9 * tmpvar_28) * diff_33);
  c_32.xyz = tmpvar_35;
  c_32.w = tmpvar_10;
  c_31.w = c_32.w;
  mediump vec3 tmpvar_36;
  tmpvar_36 = (c_32.xyz + (tmpvar_9 * (xlv_TEXCOORD5 + x1_30)));
  c_31.xyz = tmpvar_36;
  c_4.xyz = c_31.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_11;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_15;
  highp vec4 tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_16 = tmpvar_1;
  tmpvar_17 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = tmpvar_1.xyz;
  FinalPosition_20 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = (_WindQuality * _WindEnabled);
  if ((tmpvar_22 > 0.0)) {
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_23 * _ST_WindVector.xyz));
    highp mat3 tmpvar_24;
    tmpvar_24[0] = _World2Object[0].xyz;
    tmpvar_24[1] = _World2Object[1].xyz;
    tmpvar_24[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_24 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_22 == 5.0)) {
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    highp float fOffset_26;
    fOffset_26 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_26 = 0.75;
    };
    highp vec4 tmpvar_27;
    tmpvar_27.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_27.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_26);
    highp vec4 tmpvar_28;
    tmpvar_28 = abs(((
      fract((tmpvar_27 + 0.5))
     * 2.0) - 1.0));
    vPos_25 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_17 = tmpvar_2;
    FinalPosition_20 = vPos_25;
  };
  if ((tmpvar_22 >= 3.0)) {
    highp vec3 vPos_29;
    vPos_29 = FinalPosition_20;
    if ((tmpvar_22 == 5.0)) {
      highp vec3 vPos_30;
      vPos_30 = FinalPosition_20;
      highp float fAdherenceScale_31;
      highp vec3 tmpvar_32;
      tmpvar_32 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_33;
      tmpvar_33 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_34;
      highp float fOscillation_35;
      fOscillation_35 = 1.0;
      highp float fAmount_36;
      highp float fTarget_37;
      highp vec4 tmpvar_38;
      tmpvar_38.x = (tmpvar_33 + _glesMultiTexCoord0.w);
      tmpvar_38.y = ((tmpvar_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_38.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_33 + _glesMultiTexCoord0.w));
      tmpvar_38.w = ((tmpvar_33 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      vOscillations_34 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      highp float tmpvar_40;
      tmpvar_40 = (vOscillations_34.y * vOscillations_34.z);
      fTarget_37 = 1.0;
      fAmount_36 = tmpvar_40;
      if ((tmpvar_40 < 0.0)) {
        fTarget_37 = -1.0;
        fAmount_36 = -(tmpvar_40);
      };
      fOscillation_35 = (((
        (mix (mix (tmpvar_40, fTarget_37, fAmount_36), fTarget_37, fAmount_36) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_34.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_34.w * _ST_WindBranchWhip.x)));
      vPos_30 = (FinalPosition_20 + ((tmpvar_32 * fOscillation_35) * _ST_WindBranch.y));
      highp vec4 tmpvar_41;
      tmpvar_41.zw = vec2(0.0, 0.0);
      tmpvar_41.x = ((tmpvar_33 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_41.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      fAdherenceScale_31 = (1.0 - ((
        ((tmpvar_42.x * tmpvar_42.y) * tmpvar_42.x)
       * tmpvar_42.y) * _ST_WindTurbulences.x));
      fAdherenceScale_31 = (fAdherenceScale_31 + ((vOscillations_34.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_30 = (vPos_30 + ((
        ((vRotatedBranchAnchor_18 - vPos_30) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_31) * _glesMultiTexCoord0.z));
      vPos_29 = vPos_30;
    } else {
      highp vec3 vPos_44;
      vPos_44 = vPos_29;
      highp vec3 tmpvar_45;
      tmpvar_45 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_46;
      tmpvar_46 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_47;
      highp float fAmount_48;
      highp float fTarget_49;
      highp vec4 tmpvar_50;
      tmpvar_50.w = 0.0;
      tmpvar_50.x = (tmpvar_46 + _glesMultiTexCoord0.w);
      tmpvar_50.y = ((tmpvar_46 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_50.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_46 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_51;
      tmpvar_51 = abs(((
        fract((tmpvar_50 + 0.5))
       * 2.0) - 1.0));
      vOscillations_47 = (((
        (tmpvar_51 * tmpvar_51)
       * 
        (3.0 - (2.0 * tmpvar_51))
      ) - 0.5) * 2.0);
      highp float tmpvar_52;
      tmpvar_52 = (vOscillations_47.y * vOscillations_47.z);
      fTarget_49 = 1.0;
      fAmount_48 = tmpvar_52;
      if ((tmpvar_52 < 0.0)) {
        fTarget_49 = -1.0;
        fAmount_48 = -(tmpvar_52);
      };
      vPos_44 = (vPos_29 + ((tmpvar_45 * 
        (((mix (
          mix (tmpvar_52, fTarget_49, fAmount_48)
        , fTarget_49, fAmount_48) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_47.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_29 = vPos_44;
    };
    FinalPosition_20 = vPos_29;
  };
  if ((tmpvar_22 > 0.0)) {
    highp vec3 vPos_53;
    vPos_53 = FinalPosition_20;
    highp float fAdjust_54;
    highp float fLength_55;
    fLength_55 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_56;
    tmpvar_56 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_54 = tmpvar_56;
    if ((tmpvar_56 != 0.0)) {
      fAdjust_54 = pow (tmpvar_56, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_57;
    tmpvar_57.zw = vec2(0.0, 0.0);
    tmpvar_57.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_57.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_58;
    highp vec4 tmpvar_59;
    tmpvar_59 = abs(((
      fract((tmpvar_57 + 0.5))
     * 2.0) - 1.0));
    tmpvar_58 = (((
      (tmpvar_59 * tmpvar_59)
     * 
      (3.0 - (2.0 * tmpvar_59))
    ) - 0.5) * 2.0);
    vPos_53.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_58.x + (tmpvar_58.y * tmpvar_58.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_54)));
    vPos_53 = (normalize(vPos_53) * fLength_55);
    FinalPosition_20 = vPos_53;
  };
  tmpvar_16.xyz = FinalPosition_20;
  highp vec4 tmpvar_60;
  tmpvar_60 = (glstate_matrix_mvp * tmpvar_16);
  highp vec4 o_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = (tmpvar_60 * 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63.x = tmpvar_62.x;
  tmpvar_63.y = (tmpvar_62.y * _ProjectionParams.x);
  o_61.xy = (tmpvar_63 + tmpvar_62.w);
  o_61.zw = tmpvar_60.zw;
  highp vec3 tmpvar_64;
  tmpvar_64 = o_61.xyw;
  tmpvar_10 = tmpvar_64;
  highp vec2 tmpvar_65;
  tmpvar_65 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_65;
  tmpvar_5 = tmpvar_8;
  highp vec3 tmpvar_66;
  tmpvar_66 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_67;
  v_67.x = _World2Object[0].x;
  v_67.y = _World2Object[1].x;
  v_67.z = _World2Object[2].x;
  v_67.w = _World2Object[3].x;
  highp vec4 v_68;
  v_68.x = _World2Object[0].y;
  v_68.y = _World2Object[1].y;
  v_68.z = _World2Object[2].y;
  v_68.w = _World2Object[3].y;
  highp vec4 v_69;
  v_69.x = _World2Object[0].z;
  v_69.y = _World2Object[1].z;
  v_69.z = _World2Object[2].z;
  v_69.w = _World2Object[3].z;
  highp vec3 tmpvar_70;
  tmpvar_70 = normalize(((
    (v_67.xyz * tmpvar_17.x)
   + 
    (v_68.xyz * tmpvar_17.y)
  ) + (v_69.xyz * tmpvar_17.z)));
  worldNormal_3 = tmpvar_70;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_71;
  tmpvar_71.w = 1.0;
  tmpvar_71.xyz = worldNormal_3;
  mediump vec3 tmpvar_72;
  mediump vec4 normal_73;
  normal_73 = tmpvar_71;
  mediump vec3 x2_74;
  mediump vec4 tmpvar_75;
  tmpvar_75 = (normal_73.xyzz * normal_73.yzzx);
  x2_74.x = dot (unity_SHBr, tmpvar_75);
  x2_74.y = dot (unity_SHBg, tmpvar_75);
  x2_74.z = dot (unity_SHBb, tmpvar_75);
  tmpvar_72 = (x2_74 + (unity_SHC.xyz * (
    (normal_73.x * normal_73.x)
   - 
    (normal_73.y * normal_73.y)
  )));
  highp vec3 lightColor0_76;
  lightColor0_76 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_77;
  lightColor1_77 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_78;
  lightColor2_78 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_79;
  lightColor3_79 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_80;
  lightAttenSq_80 = unity_4LightAtten0;
  highp vec3 normal_81;
  normal_81 = worldNormal_3;
  highp vec4 tmpvar_82;
  tmpvar_82 = (unity_4LightPosX0 - tmpvar_66.x);
  highp vec4 tmpvar_83;
  tmpvar_83 = (unity_4LightPosY0 - tmpvar_66.y);
  highp vec4 tmpvar_84;
  tmpvar_84 = (unity_4LightPosZ0 - tmpvar_66.z);
  highp vec4 tmpvar_85;
  tmpvar_85 = (((tmpvar_82 * tmpvar_82) + (tmpvar_83 * tmpvar_83)) + (tmpvar_84 * tmpvar_84));
  highp vec4 tmpvar_86;
  tmpvar_86 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_82 * normal_81.x) + (tmpvar_83 * normal_81.y)) + (tmpvar_84 * normal_81.z))
   * 
    inversesqrt(tmpvar_85)
  )) * (1.0/((1.0 + 
    (tmpvar_85 * lightAttenSq_80)
  ))));
  highp vec3 tmpvar_87;
  tmpvar_87 = (tmpvar_72 + ((
    ((lightColor0_76 * tmpvar_86.x) + (lightColor1_77 * tmpvar_86.y))
   + 
    (lightColor2_78 * tmpvar_86.z)
  ) + (lightColor3_79 * tmpvar_86.w)));
  tmpvar_6 = tmpvar_87;
  highp vec4 tmpvar_88;
  tmpvar_88 = (unity_World2Shadow[0] * (_Object2World * tmpvar_16));
  tmpvar_7 = tmpvar_88;
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_66;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  lowp float shadow_22;
  lowp float tmpvar_23;
  tmpvar_23 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz);
  mediump float tmpvar_24;
  tmpvar_24 = (_LightShadowData.x + (tmpvar_23 * (1.0 - _LightShadowData.x)));
  shadow_22 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_25;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_22;
  mediump vec3 normalWorld_26;
  normalWorld_26 = tmpvar_5;
  mediump vec3 tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = normalWorld_26;
  mediump vec3 x1_29;
  x1_29.x = dot (unity_SHAr, tmpvar_28);
  x1_29.y = dot (unity_SHAg, tmpvar_28);
  x1_29.z = dot (unity_SHAb, tmpvar_28);
  tmpvar_27 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_27;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_32 = tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_9 * tmpvar_27) * diff_32);
  c_31.xyz = tmpvar_34;
  c_31.w = tmpvar_10;
  c_30.w = c_31.w;
  mediump vec3 tmpvar_35;
  tmpvar_35 = (c_31.xyz + (tmpvar_9 * (xlv_TEXCOORD5 + x1_29)));
  c_30.xyz = tmpvar_35;
  c_4.xyz = c_30.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_11;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_15;
  highp vec4 tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_16 = tmpvar_1;
  tmpvar_17 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = tmpvar_1.xyz;
  FinalPosition_20 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = (_WindQuality * _WindEnabled);
  if ((tmpvar_22 > 0.0)) {
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_23 * _ST_WindVector.xyz));
    highp mat3 tmpvar_24;
    tmpvar_24[0] = _World2Object[0].xyz;
    tmpvar_24[1] = _World2Object[1].xyz;
    tmpvar_24[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_24 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_22 == 5.0)) {
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    highp float fOffset_26;
    fOffset_26 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_26 = 0.75;
    };
    highp vec4 tmpvar_27;
    tmpvar_27.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_27.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_26);
    highp vec4 tmpvar_28;
    tmpvar_28 = abs(((
      fract((tmpvar_27 + 0.5))
     * 2.0) - 1.0));
    vPos_25 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_17 = tmpvar_2;
    FinalPosition_20 = vPos_25;
  };
  if ((tmpvar_22 >= 3.0)) {
    highp vec3 vPos_29;
    vPos_29 = FinalPosition_20;
    if ((tmpvar_22 == 5.0)) {
      highp vec3 vPos_30;
      vPos_30 = FinalPosition_20;
      highp float fAdherenceScale_31;
      highp vec3 tmpvar_32;
      tmpvar_32 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_33;
      tmpvar_33 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_34;
      highp float fOscillation_35;
      fOscillation_35 = 1.0;
      highp float fAmount_36;
      highp float fTarget_37;
      highp vec4 tmpvar_38;
      tmpvar_38.x = (tmpvar_33 + _glesMultiTexCoord0.w);
      tmpvar_38.y = ((tmpvar_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_38.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_33 + _glesMultiTexCoord0.w));
      tmpvar_38.w = ((tmpvar_33 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      vOscillations_34 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      highp float tmpvar_40;
      tmpvar_40 = (vOscillations_34.y * vOscillations_34.z);
      fTarget_37 = 1.0;
      fAmount_36 = tmpvar_40;
      if ((tmpvar_40 < 0.0)) {
        fTarget_37 = -1.0;
        fAmount_36 = -(tmpvar_40);
      };
      fOscillation_35 = (((
        (mix (mix (tmpvar_40, fTarget_37, fAmount_36), fTarget_37, fAmount_36) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_34.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_34.w * _ST_WindBranchWhip.x)));
      vPos_30 = (FinalPosition_20 + ((tmpvar_32 * fOscillation_35) * _ST_WindBranch.y));
      highp vec4 tmpvar_41;
      tmpvar_41.zw = vec2(0.0, 0.0);
      tmpvar_41.x = ((tmpvar_33 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_41.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      fAdherenceScale_31 = (1.0 - ((
        ((tmpvar_42.x * tmpvar_42.y) * tmpvar_42.x)
       * tmpvar_42.y) * _ST_WindTurbulences.x));
      fAdherenceScale_31 = (fAdherenceScale_31 + ((vOscillations_34.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_30 = (vPos_30 + ((
        ((vRotatedBranchAnchor_18 - vPos_30) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_31) * _glesMultiTexCoord0.z));
      vPos_29 = vPos_30;
    } else {
      highp vec3 vPos_44;
      vPos_44 = vPos_29;
      highp vec3 tmpvar_45;
      tmpvar_45 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_46;
      tmpvar_46 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_47;
      highp float fAmount_48;
      highp float fTarget_49;
      highp vec4 tmpvar_50;
      tmpvar_50.w = 0.0;
      tmpvar_50.x = (tmpvar_46 + _glesMultiTexCoord0.w);
      tmpvar_50.y = ((tmpvar_46 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_50.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_46 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_51;
      tmpvar_51 = abs(((
        fract((tmpvar_50 + 0.5))
       * 2.0) - 1.0));
      vOscillations_47 = (((
        (tmpvar_51 * tmpvar_51)
       * 
        (3.0 - (2.0 * tmpvar_51))
      ) - 0.5) * 2.0);
      highp float tmpvar_52;
      tmpvar_52 = (vOscillations_47.y * vOscillations_47.z);
      fTarget_49 = 1.0;
      fAmount_48 = tmpvar_52;
      if ((tmpvar_52 < 0.0)) {
        fTarget_49 = -1.0;
        fAmount_48 = -(tmpvar_52);
      };
      vPos_44 = (vPos_29 + ((tmpvar_45 * 
        (((mix (
          mix (tmpvar_52, fTarget_49, fAmount_48)
        , fTarget_49, fAmount_48) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_47.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_29 = vPos_44;
    };
    FinalPosition_20 = vPos_29;
  };
  if ((tmpvar_22 > 0.0)) {
    highp vec3 vPos_53;
    vPos_53 = FinalPosition_20;
    highp float fAdjust_54;
    highp float fLength_55;
    fLength_55 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_56;
    tmpvar_56 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_54 = tmpvar_56;
    if ((tmpvar_56 != 0.0)) {
      fAdjust_54 = pow (tmpvar_56, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_57;
    tmpvar_57.zw = vec2(0.0, 0.0);
    tmpvar_57.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_57.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_58;
    highp vec4 tmpvar_59;
    tmpvar_59 = abs(((
      fract((tmpvar_57 + 0.5))
     * 2.0) - 1.0));
    tmpvar_58 = (((
      (tmpvar_59 * tmpvar_59)
     * 
      (3.0 - (2.0 * tmpvar_59))
    ) - 0.5) * 2.0);
    vPos_53.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_58.x + (tmpvar_58.y * tmpvar_58.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_54)));
    vPos_53 = (normalize(vPos_53) * fLength_55);
    FinalPosition_20 = vPos_53;
  };
  tmpvar_16.xyz = FinalPosition_20;
  highp vec4 tmpvar_60;
  tmpvar_60 = (glstate_matrix_mvp * tmpvar_16);
  highp vec4 o_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = (tmpvar_60 * 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63.x = tmpvar_62.x;
  tmpvar_63.y = (tmpvar_62.y * _ProjectionParams.x);
  o_61.xy = (tmpvar_63 + tmpvar_62.w);
  o_61.zw = tmpvar_60.zw;
  highp vec3 tmpvar_64;
  tmpvar_64 = o_61.xyw;
  tmpvar_10 = tmpvar_64;
  highp vec2 tmpvar_65;
  tmpvar_65 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_65;
  tmpvar_5 = tmpvar_8;
  highp vec3 tmpvar_66;
  tmpvar_66 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_67;
  v_67.x = _World2Object[0].x;
  v_67.y = _World2Object[1].x;
  v_67.z = _World2Object[2].x;
  v_67.w = _World2Object[3].x;
  highp vec4 v_68;
  v_68.x = _World2Object[0].y;
  v_68.y = _World2Object[1].y;
  v_68.z = _World2Object[2].y;
  v_68.w = _World2Object[3].y;
  highp vec4 v_69;
  v_69.x = _World2Object[0].z;
  v_69.y = _World2Object[1].z;
  v_69.z = _World2Object[2].z;
  v_69.w = _World2Object[3].z;
  highp vec3 tmpvar_70;
  tmpvar_70 = normalize(((
    (v_67.xyz * tmpvar_17.x)
   + 
    (v_68.xyz * tmpvar_17.y)
  ) + (v_69.xyz * tmpvar_17.z)));
  worldNormal_3 = tmpvar_70;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_71;
  tmpvar_71.w = 1.0;
  tmpvar_71.xyz = worldNormal_3;
  mediump vec3 tmpvar_72;
  mediump vec4 normal_73;
  normal_73 = tmpvar_71;
  mediump vec3 x2_74;
  mediump vec4 tmpvar_75;
  tmpvar_75 = (normal_73.xyzz * normal_73.yzzx);
  x2_74.x = dot (unity_SHBr, tmpvar_75);
  x2_74.y = dot (unity_SHBg, tmpvar_75);
  x2_74.z = dot (unity_SHBb, tmpvar_75);
  tmpvar_72 = (x2_74 + (unity_SHC.xyz * (
    (normal_73.x * normal_73.x)
   - 
    (normal_73.y * normal_73.y)
  )));
  highp vec3 lightColor0_76;
  lightColor0_76 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_77;
  lightColor1_77 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_78;
  lightColor2_78 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_79;
  lightColor3_79 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_80;
  lightAttenSq_80 = unity_4LightAtten0;
  highp vec3 normal_81;
  normal_81 = worldNormal_3;
  highp vec4 tmpvar_82;
  tmpvar_82 = (unity_4LightPosX0 - tmpvar_66.x);
  highp vec4 tmpvar_83;
  tmpvar_83 = (unity_4LightPosY0 - tmpvar_66.y);
  highp vec4 tmpvar_84;
  tmpvar_84 = (unity_4LightPosZ0 - tmpvar_66.z);
  highp vec4 tmpvar_85;
  tmpvar_85 = (((tmpvar_82 * tmpvar_82) + (tmpvar_83 * tmpvar_83)) + (tmpvar_84 * tmpvar_84));
  highp vec4 tmpvar_86;
  tmpvar_86 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_82 * normal_81.x) + (tmpvar_83 * normal_81.y)) + (tmpvar_84 * normal_81.z))
   * 
    inversesqrt(tmpvar_85)
  )) * (1.0/((1.0 + 
    (tmpvar_85 * lightAttenSq_80)
  ))));
  highp vec3 tmpvar_87;
  tmpvar_87 = (tmpvar_72 + ((
    ((lightColor0_76 * tmpvar_86.x) + (lightColor1_77 * tmpvar_86.y))
   + 
    (lightColor2_78 * tmpvar_86.z)
  ) + (lightColor3_79 * tmpvar_86.w)));
  tmpvar_6 = tmpvar_87;
  highp vec4 tmpvar_88;
  tmpvar_88 = (unity_World2Shadow[0] * (_Object2World * tmpvar_16));
  tmpvar_7 = tmpvar_88;
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_66;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  lowp float shadow_22;
  mediump float tmpvar_23;
  tmpvar_23 = texture (_ShadowMapTexture, xlv_TEXCOORD6.xyz);
  lowp float tmpvar_24;
  tmpvar_24 = tmpvar_23;
  mediump float tmpvar_25;
  tmpvar_25 = (_LightShadowData.x + (tmpvar_24 * (1.0 - _LightShadowData.x)));
  shadow_22 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_26;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_22;
  mediump vec3 normalWorld_27;
  normalWorld_27 = tmpvar_5;
  mediump vec3 tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = normalWorld_27;
  mediump vec3 x1_30;
  x1_30.x = dot (unity_SHAr, tmpvar_29);
  x1_30.y = dot (unity_SHAg, tmpvar_29);
  x1_30.z = dot (unity_SHAb, tmpvar_29);
  tmpvar_28 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_28;
  lowp vec4 c_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_33 = tmpvar_34;
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tmpvar_9 * tmpvar_28) * diff_33);
  c_32.xyz = tmpvar_35;
  c_32.w = tmpvar_10;
  c_31.w = c_32.w;
  mediump vec3 tmpvar_36;
  tmpvar_36 = (c_32.xyz + (tmpvar_9 * (xlv_TEXCOORD5 + x1_30)));
  c_31.xyz = tmpvar_36;
  c_4.xyz = c_31.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_14;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = tmpvar_1.xyz;
  FinalPosition_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_21 == 5.0)) {
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    highp float fOffset_25;
    fOffset_25 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_25 = 0.75;
    };
    highp vec4 tmpvar_26;
    tmpvar_26.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_26.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_25);
    highp vec4 tmpvar_27;
    tmpvar_27 = abs(((
      fract((tmpvar_26 + 0.5))
     * 2.0) - 1.0));
    vPos_24 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_16 = tmpvar_2;
    FinalPosition_19 = vPos_24;
  };
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_28;
    vPos_28 = FinalPosition_19;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_29;
      vPos_29 = FinalPosition_19;
      highp float fAdherenceScale_30;
      highp vec3 tmpvar_31;
      tmpvar_31 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_32;
      tmpvar_32 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_33;
      highp float fOscillation_34;
      fOscillation_34 = 1.0;
      highp float fAmount_35;
      highp float fTarget_36;
      highp vec4 tmpvar_37;
      tmpvar_37.x = (tmpvar_32 + _glesMultiTexCoord0.w);
      tmpvar_37.y = ((tmpvar_32 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_37.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_32 + _glesMultiTexCoord0.w));
      tmpvar_37.w = ((tmpvar_32 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      vOscillations_33 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      highp float tmpvar_39;
      tmpvar_39 = (vOscillations_33.y * vOscillations_33.z);
      fTarget_36 = 1.0;
      fAmount_35 = tmpvar_39;
      if ((tmpvar_39 < 0.0)) {
        fTarget_36 = -1.0;
        fAmount_35 = -(tmpvar_39);
      };
      fOscillation_34 = (((
        (mix (mix (tmpvar_39, fTarget_36, fAmount_35), fTarget_36, fAmount_35) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_33.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_33.w * _ST_WindBranchWhip.x)));
      vPos_29 = (FinalPosition_19 + ((tmpvar_31 * fOscillation_34) * _ST_WindBranch.y));
      highp vec4 tmpvar_40;
      tmpvar_40.zw = vec2(0.0, 0.0);
      tmpvar_40.x = ((tmpvar_32 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_40.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_41;
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      tmpvar_41 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      fAdherenceScale_30 = (1.0 - ((
        ((tmpvar_41.x * tmpvar_41.y) * tmpvar_41.x)
       * tmpvar_41.y) * _ST_WindTurbulences.x));
      fAdherenceScale_30 = (fAdherenceScale_30 + ((vOscillations_33.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_29 = (vPos_29 + ((
        ((vRotatedBranchAnchor_17 - vPos_29) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_30) * _glesMultiTexCoord0.z));
      vPos_28 = vPos_29;
    } else {
      highp vec3 vPos_43;
      vPos_43 = vPos_28;
      highp vec3 tmpvar_44;
      tmpvar_44 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_45;
      tmpvar_45 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_46;
      highp float fAmount_47;
      highp float fTarget_48;
      highp vec4 tmpvar_49;
      tmpvar_49.w = 0.0;
      tmpvar_49.x = (tmpvar_45 + _glesMultiTexCoord0.w);
      tmpvar_49.y = ((tmpvar_45 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_49.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_45 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_49 + 0.5))
       * 2.0) - 1.0));
      vOscillations_46 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      highp float tmpvar_51;
      tmpvar_51 = (vOscillations_46.y * vOscillations_46.z);
      fTarget_48 = 1.0;
      fAmount_47 = tmpvar_51;
      if ((tmpvar_51 < 0.0)) {
        fTarget_48 = -1.0;
        fAmount_47 = -(tmpvar_51);
      };
      vPos_43 = (vPos_28 + ((tmpvar_44 * 
        (((mix (
          mix (tmpvar_51, fTarget_48, fAmount_47)
        , fTarget_48, fAmount_47) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_46.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_28 = vPos_43;
    };
    FinalPosition_19 = vPos_28;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_52;
    vPos_52 = FinalPosition_19;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_56.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    vPos_52.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_57.x + (tmpvar_57.y * tmpvar_57.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_53)));
    vPos_52 = (normalize(vPos_52) * fLength_54);
    FinalPosition_19 = vPos_52;
  };
  tmpvar_15.xyz = FinalPosition_19;
  highp vec4 tmpvar_59;
  tmpvar_59 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = (tmpvar_59 * 0.5);
  highp vec2 tmpvar_62;
  tmpvar_62.x = tmpvar_61.x;
  tmpvar_62.y = (tmpvar_61.y * _ProjectionParams.x);
  o_60.xy = (tmpvar_62 + tmpvar_61.w);
  o_60.zw = tmpvar_59.zw;
  highp vec3 tmpvar_63;
  tmpvar_63 = o_60.xyw;
  tmpvar_9 = tmpvar_63;
  highp vec2 tmpvar_64;
  tmpvar_64 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_64;
  tmpvar_6 = tmpvar_7;
  highp vec3 tmpvar_65;
  tmpvar_65 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_66;
  v_66.x = _World2Object[0].x;
  v_66.y = _World2Object[1].x;
  v_66.z = _World2Object[2].x;
  v_66.w = _World2Object[3].x;
  highp vec4 v_67;
  v_67.x = _World2Object[0].y;
  v_67.y = _World2Object[1].y;
  v_67.z = _World2Object[2].y;
  v_67.w = _World2Object[3].y;
  highp vec4 v_68;
  v_68.x = _World2Object[0].z;
  v_68.y = _World2Object[1].z;
  v_68.z = _World2Object[2].z;
  v_68.w = _World2Object[3].z;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize(((
    (v_66.xyz * tmpvar_16.x)
   + 
    (v_67.xyz * tmpvar_16.y)
  ) + (v_68.xyz * tmpvar_16.z)));
  worldNormal_5 = tmpvar_69;
  highp mat3 tmpvar_70;
  tmpvar_70[0] = _Object2World[0].xyz;
  tmpvar_70[1] = _Object2World[1].xyz;
  tmpvar_70[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_71;
  tmpvar_71 = normalize((tmpvar_70 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_71;
  lowp vec3 tmpvar_72;
  tmpvar_72 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_73;
  tmpvar_73 = (tmpvar_72 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_73;
  highp vec4 tmpvar_74;
  tmpvar_74.x = worldTangent_4.x;
  tmpvar_74.y = worldBinormal_3.x;
  tmpvar_74.z = worldNormal_5.x;
  tmpvar_74.w = tmpvar_65.x;
  highp vec4 tmpvar_75;
  tmpvar_75.x = worldTangent_4.y;
  tmpvar_75.y = worldBinormal_3.y;
  tmpvar_75.z = worldNormal_5.y;
  tmpvar_75.w = tmpvar_65.y;
  highp vec4 tmpvar_76;
  tmpvar_76.x = worldTangent_4.z;
  tmpvar_76.y = worldBinormal_3.z;
  tmpvar_76.z = worldNormal_5.z;
  tmpvar_76.w = tmpvar_65.z;
  lowp vec4 tmpvar_77;
  tmpvar_77.w = 1.0;
  tmpvar_77.xyz = worldNormal_5;
  mediump vec4 normal_78;
  normal_78 = tmpvar_77;
  mediump vec3 x2_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (normal_78.xyzz * normal_78.yzzx);
  x2_79.x = dot (unity_SHBr, tmpvar_80);
  x2_79.y = dot (unity_SHBg, tmpvar_80);
  x2_79.z = dot (unity_SHBb, tmpvar_80);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_74;
  xlv_TEXCOORD1 = tmpvar_75;
  xlv_TEXCOORD2 = tmpvar_76;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = (x2_79 + (unity_SHC.xyz * (
    (normal_78.x * normal_78.x)
   - 
    (normal_78.y * normal_78.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_11.x = tmpvar_12.x;
  mediump float tmpvar_13;
  tmpvar_13 = fract(tmpvar_12.y);
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_13 * 0.0625) + unity_LODFade.y);
  projUV_11.y = tmpvar_14;
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_17;
  lowp float x_18;
  x_18 = (tmpvar_9 - _Cutoff);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_19 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD0.xyz, tmpvar_21);
  worldN_3.x = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD1.xyz, tmpvar_21);
  worldN_3.y = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD2.xyz, tmpvar_21);
  worldN_3.z = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_25;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_26;
  normalWorld_26 = worldN_3;
  mediump vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = normalWorld_26;
  mediump vec3 x1_28;
  x1_28.x = dot (unity_SHAr, tmpvar_27);
  x1_28.y = dot (unity_SHAg, tmpvar_27);
  x1_28.z = dot (unity_SHAb, tmpvar_27);
  lowp vec4 c_29;
  lowp vec4 c_30;
  lowp float diff_31;
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_31 = tmpvar_32;
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((tmpvar_8 * tmpvar_1) * diff_31);
  c_30.xyz = tmpvar_33;
  c_30.w = tmpvar_9;
  c_29.w = c_30.w;
  mediump vec3 tmpvar_34;
  tmpvar_34 = (c_30.xyz + (tmpvar_8 * (xlv_TEXCOORD6 + x1_28)));
  c_29.xyz = tmpvar_34;
  c_4.xyz = c_29.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
in vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord0.xy;
  tmpvar_8.xy = tmpvar_10;
  tmpvar_7.w = _Color.w;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * _glesColor.x);
  tmpvar_7.xyz = tmpvar_11;
  highp float cse_12;
  cse_12 = _Object2World[3].x;
  highp float cse_13;
  cse_13 = _Object2World[3].y;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((cse_12 + cse_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_14;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = tmpvar_1.xyz;
  FinalPosition_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_21 == 5.0)) {
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    highp float fOffset_25;
    fOffset_25 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_25 = 0.75;
    };
    highp vec4 tmpvar_26;
    tmpvar_26.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_26.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_25);
    highp vec4 tmpvar_27;
    tmpvar_27 = abs(((
      fract((tmpvar_26 + 0.5))
     * 2.0) - 1.0));
    vPos_24 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_16 = tmpvar_2;
    FinalPosition_19 = vPos_24;
  };
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_28;
    vPos_28 = FinalPosition_19;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_29;
      vPos_29 = FinalPosition_19;
      highp float fAdherenceScale_30;
      highp vec3 tmpvar_31;
      tmpvar_31 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_32;
      tmpvar_32 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_33;
      highp float fOscillation_34;
      fOscillation_34 = 1.0;
      highp float fAmount_35;
      highp float fTarget_36;
      highp vec4 tmpvar_37;
      tmpvar_37.x = (tmpvar_32 + _glesMultiTexCoord0.w);
      tmpvar_37.y = ((tmpvar_32 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_37.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_32 + _glesMultiTexCoord0.w));
      tmpvar_37.w = ((tmpvar_32 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      vOscillations_33 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      highp float tmpvar_39;
      tmpvar_39 = (vOscillations_33.y * vOscillations_33.z);
      fTarget_36 = 1.0;
      fAmount_35 = tmpvar_39;
      if ((tmpvar_39 < 0.0)) {
        fTarget_36 = -1.0;
        fAmount_35 = -(tmpvar_39);
      };
      fOscillation_34 = (((
        (mix (mix (tmpvar_39, fTarget_36, fAmount_35), fTarget_36, fAmount_35) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_33.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_33.w * _ST_WindBranchWhip.x)));
      vPos_29 = (FinalPosition_19 + ((tmpvar_31 * fOscillation_34) * _ST_WindBranch.y));
      highp vec4 tmpvar_40;
      tmpvar_40.zw = vec2(0.0, 0.0);
      tmpvar_40.x = ((tmpvar_32 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_40.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_41;
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      tmpvar_41 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      fAdherenceScale_30 = (1.0 - ((
        ((tmpvar_41.x * tmpvar_41.y) * tmpvar_41.x)
       * tmpvar_41.y) * _ST_WindTurbulences.x));
      fAdherenceScale_30 = (fAdherenceScale_30 + ((vOscillations_33.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_29 = (vPos_29 + ((
        ((vRotatedBranchAnchor_17 - vPos_29) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_30) * _glesMultiTexCoord0.z));
      vPos_28 = vPos_29;
    } else {
      highp vec3 vPos_43;
      vPos_43 = vPos_28;
      highp vec3 tmpvar_44;
      tmpvar_44 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_45;
      tmpvar_45 = (_ST_WindBranch.x + (cse_12 + cse_13));
      highp vec4 vOscillations_46;
      highp float fAmount_47;
      highp float fTarget_48;
      highp vec4 tmpvar_49;
      tmpvar_49.w = 0.0;
      tmpvar_49.x = (tmpvar_45 + _glesMultiTexCoord0.w);
      tmpvar_49.y = ((tmpvar_45 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_49.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_45 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_49 + 0.5))
       * 2.0) - 1.0));
      vOscillations_46 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      highp float tmpvar_51;
      tmpvar_51 = (vOscillations_46.y * vOscillations_46.z);
      fTarget_48 = 1.0;
      fAmount_47 = tmpvar_51;
      if ((tmpvar_51 < 0.0)) {
        fTarget_48 = -1.0;
        fAmount_47 = -(tmpvar_51);
      };
      vPos_43 = (vPos_28 + ((tmpvar_44 * 
        (((mix (
          mix (tmpvar_51, fTarget_48, fAmount_47)
        , fTarget_48, fAmount_47) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_46.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_28 = vPos_43;
    };
    FinalPosition_19 = vPos_28;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_52;
    vPos_52 = FinalPosition_19;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (cse_12 + _ST_WindGlobal.x);
    tmpvar_56.y = (cse_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    vPos_52.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * (
      ((_ST_WindGlobal.y * (tmpvar_57.x + (tmpvar_57.y * tmpvar_57.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_53)));
    vPos_52 = (normalize(vPos_52) * fLength_54);
    FinalPosition_19 = vPos_52;
  };
  tmpvar_15.xyz = FinalPosition_19;
  highp vec4 tmpvar_59;
  tmpvar_59 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = (tmpvar_59 * 0.5);
  highp vec2 tmpvar_62;
  tmpvar_62.x = tmpvar_61.x;
  tmpvar_62.y = (tmpvar_61.y * _ProjectionParams.x);
  o_60.xy = (tmpvar_62 + tmpvar_61.w);
  o_60.zw = tmpvar_59.zw;
  highp vec3 tmpvar_63;
  tmpvar_63 = o_60.xyw;
  tmpvar_9 = tmpvar_63;
  highp vec2 tmpvar_64;
  tmpvar_64 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_64;
  tmpvar_6 = tmpvar_7;
  highp vec3 tmpvar_65;
  tmpvar_65 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_66;
  v_66.x = _World2Object[0].x;
  v_66.y = _World2Object[1].x;
  v_66.z = _World2Object[2].x;
  v_66.w = _World2Object[3].x;
  highp vec4 v_67;
  v_67.x = _World2Object[0].y;
  v_67.y = _World2Object[1].y;
  v_67.z = _World2Object[2].y;
  v_67.w = _World2Object[3].y;
  highp vec4 v_68;
  v_68.x = _World2Object[0].z;
  v_68.y = _World2Object[1].z;
  v_68.z = _World2Object[2].z;
  v_68.w = _World2Object[3].z;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize(((
    (v_66.xyz * tmpvar_16.x)
   + 
    (v_67.xyz * tmpvar_16.y)
  ) + (v_68.xyz * tmpvar_16.z)));
  worldNormal_5 = tmpvar_69;
  highp mat3 tmpvar_70;
  tmpvar_70[0] = _Object2World[0].xyz;
  tmpvar_70[1] = _Object2World[1].xyz;
  tmpvar_70[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_71;
  tmpvar_71 = normalize((tmpvar_70 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_71;
  lowp vec3 tmpvar_72;
  tmpvar_72 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_73;
  tmpvar_73 = (tmpvar_72 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_73;
  highp vec4 tmpvar_74;
  tmpvar_74.x = worldTangent_4.x;
  tmpvar_74.y = worldBinormal_3.x;
  tmpvar_74.z = worldNormal_5.x;
  tmpvar_74.w = tmpvar_65.x;
  highp vec4 tmpvar_75;
  tmpvar_75.x = worldTangent_4.y;
  tmpvar_75.y = worldBinormal_3.y;
  tmpvar_75.z = worldNormal_5.y;
  tmpvar_75.w = tmpvar_65.y;
  highp vec4 tmpvar_76;
  tmpvar_76.x = worldTangent_4.z;
  tmpvar_76.y = worldBinormal_3.z;
  tmpvar_76.z = worldNormal_5.z;
  tmpvar_76.w = tmpvar_65.z;
  lowp vec4 tmpvar_77;
  tmpvar_77.w = 1.0;
  tmpvar_77.xyz = worldNormal_5;
  mediump vec4 normal_78;
  normal_78 = tmpvar_77;
  mediump vec3 x2_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (normal_78.xyzz * normal_78.yzzx);
  x2_79.x = dot (unity_SHBr, tmpvar_80);
  x2_79.y = dot (unity_SHBg, tmpvar_80);
  x2_79.z = dot (unity_SHBb, tmpvar_80);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_74;
  xlv_TEXCOORD1 = tmpvar_75;
  xlv_TEXCOORD2 = tmpvar_76;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = (x2_79 + (unity_SHC.xyz * (
    (normal_78.x * normal_78.x)
   - 
    (normal_78.y * normal_78.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_11.x = tmpvar_12.x;
  mediump float tmpvar_13;
  tmpvar_13 = fract(tmpvar_12.y);
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_13 * 0.0625) + unity_LODFade.y);
  projUV_11.y = tmpvar_14;
  lowp float x_15;
  x_15 = (texture (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_17;
  lowp float x_18;
  x_18 = (tmpvar_9 - _Cutoff);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_19 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD0.xyz, tmpvar_21);
  worldN_3.x = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD1.xyz, tmpvar_21);
  worldN_3.y = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD2.xyz, tmpvar_21);
  worldN_3.z = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_25;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_26;
  normalWorld_26 = worldN_3;
  mediump vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = normalWorld_26;
  mediump vec3 x1_28;
  x1_28.x = dot (unity_SHAr, tmpvar_27);
  x1_28.y = dot (unity_SHAg, tmpvar_27);
  x1_28.z = dot (unity_SHAb, tmpvar_27);
  lowp vec4 c_29;
  lowp vec4 c_30;
  lowp float diff_31;
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_31 = tmpvar_32;
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((tmpvar_8 * tmpvar_1) * diff_31);
  c_30.xyz = tmpvar_33;
  c_30.w = tmpvar_9;
  c_29.w = c_30.w;
  mediump vec3 tmpvar_34;
  tmpvar_34 = (c_30.xyz + (tmpvar_8 * (xlv_TEXCOORD6 + x1_28)));
  c_29.xyz = tmpvar_34;
  c_4.xyz = c_29.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_11;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_15;
  highp vec4 tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_16 = tmpvar_1;
  tmpvar_17 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = tmpvar_1.xyz;
  FinalPosition_20 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = (_WindQuality * _WindEnabled);
  if ((tmpvar_22 > 0.0)) {
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_23 * _ST_WindVector.xyz));
    highp mat3 tmpvar_24;
    tmpvar_24[0] = _World2Object[0].xyz;
    tmpvar_24[1] = _World2Object[1].xyz;
    tmpvar_24[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_24 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_22 == 5.0)) {
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    highp float fOffset_26;
    fOffset_26 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_26 = 0.75;
    };
    highp vec4 tmpvar_27;
    tmpvar_27.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_27.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_26);
    highp vec4 tmpvar_28;
    tmpvar_28 = abs(((
      fract((tmpvar_27 + 0.5))
     * 2.0) - 1.0));
    vPos_25 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_17 = tmpvar_2;
    FinalPosition_20 = vPos_25;
  };
  if ((tmpvar_22 >= 3.0)) {
    highp vec3 vPos_29;
    vPos_29 = FinalPosition_20;
    if ((tmpvar_22 == 5.0)) {
      highp vec3 vPos_30;
      vPos_30 = FinalPosition_20;
      highp float fAdherenceScale_31;
      highp vec3 tmpvar_32;
      tmpvar_32 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_33;
      tmpvar_33 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_34;
      highp float fOscillation_35;
      fOscillation_35 = 1.0;
      highp float fAmount_36;
      highp float fTarget_37;
      highp vec4 tmpvar_38;
      tmpvar_38.x = (tmpvar_33 + _glesMultiTexCoord0.w);
      tmpvar_38.y = ((tmpvar_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_38.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_33 + _glesMultiTexCoord0.w));
      tmpvar_38.w = ((tmpvar_33 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      vOscillations_34 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      highp float tmpvar_40;
      tmpvar_40 = (vOscillations_34.y * vOscillations_34.z);
      fTarget_37 = 1.0;
      fAmount_36 = tmpvar_40;
      if ((tmpvar_40 < 0.0)) {
        fTarget_37 = -1.0;
        fAmount_36 = -(tmpvar_40);
      };
      fOscillation_35 = (((
        (mix (mix (tmpvar_40, fTarget_37, fAmount_36), fTarget_37, fAmount_36) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_34.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_34.w * _ST_WindBranchWhip.x)));
      vPos_30 = (FinalPosition_20 + ((tmpvar_32 * fOscillation_35) * _ST_WindBranch.y));
      highp vec4 tmpvar_41;
      tmpvar_41.zw = vec2(0.0, 0.0);
      tmpvar_41.x = ((tmpvar_33 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_41.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      fAdherenceScale_31 = (1.0 - ((
        ((tmpvar_42.x * tmpvar_42.y) * tmpvar_42.x)
       * tmpvar_42.y) * _ST_WindTurbulences.x));
      fAdherenceScale_31 = (fAdherenceScale_31 + ((vOscillations_34.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_30 = (vPos_30 + ((
        ((vRotatedBranchAnchor_18 - vPos_30) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_31) * _glesMultiTexCoord0.z));
      vPos_29 = vPos_30;
    } else {
      highp vec3 vPos_44;
      vPos_44 = vPos_29;
      highp vec3 tmpvar_45;
      tmpvar_45 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_46;
      tmpvar_46 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_47;
      highp float fAmount_48;
      highp float fTarget_49;
      highp vec4 tmpvar_50;
      tmpvar_50.w = 0.0;
      tmpvar_50.x = (tmpvar_46 + _glesMultiTexCoord0.w);
      tmpvar_50.y = ((tmpvar_46 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_50.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_46 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_51;
      tmpvar_51 = abs(((
        fract((tmpvar_50 + 0.5))
       * 2.0) - 1.0));
      vOscillations_47 = (((
        (tmpvar_51 * tmpvar_51)
       * 
        (3.0 - (2.0 * tmpvar_51))
      ) - 0.5) * 2.0);
      highp float tmpvar_52;
      tmpvar_52 = (vOscillations_47.y * vOscillations_47.z);
      fTarget_49 = 1.0;
      fAmount_48 = tmpvar_52;
      if ((tmpvar_52 < 0.0)) {
        fTarget_49 = -1.0;
        fAmount_48 = -(tmpvar_52);
      };
      vPos_44 = (vPos_29 + ((tmpvar_45 * 
        (((mix (
          mix (tmpvar_52, fTarget_49, fAmount_48)
        , fTarget_49, fAmount_48) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_47.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_29 = vPos_44;
    };
    FinalPosition_20 = vPos_29;
  };
  if ((tmpvar_22 > 0.0)) {
    highp vec3 vPos_53;
    vPos_53 = FinalPosition_20;
    highp float fAdjust_54;
    highp float fLength_55;
    fLength_55 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_56;
    tmpvar_56 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_54 = tmpvar_56;
    if ((tmpvar_56 != 0.0)) {
      fAdjust_54 = pow (tmpvar_56, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_57;
    tmpvar_57.zw = vec2(0.0, 0.0);
    tmpvar_57.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_57.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_58;
    highp vec4 tmpvar_59;
    tmpvar_59 = abs(((
      fract((tmpvar_57 + 0.5))
     * 2.0) - 1.0));
    tmpvar_58 = (((
      (tmpvar_59 * tmpvar_59)
     * 
      (3.0 - (2.0 * tmpvar_59))
    ) - 0.5) * 2.0);
    vPos_53.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_58.x + (tmpvar_58.y * tmpvar_58.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_54)));
    vPos_53 = (normalize(vPos_53) * fLength_55);
    FinalPosition_20 = vPos_53;
  };
  tmpvar_16.xyz = FinalPosition_20;
  highp vec4 tmpvar_60;
  tmpvar_60 = (glstate_matrix_mvp * tmpvar_16);
  highp vec4 o_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = (tmpvar_60 * 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63.x = tmpvar_62.x;
  tmpvar_63.y = (tmpvar_62.y * _ProjectionParams.x);
  o_61.xy = (tmpvar_63 + tmpvar_62.w);
  o_61.zw = tmpvar_60.zw;
  highp vec3 tmpvar_64;
  tmpvar_64 = o_61.xyw;
  tmpvar_10 = tmpvar_64;
  highp vec2 tmpvar_65;
  tmpvar_65 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_65;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_66;
  tmpvar_66 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_67;
  v_67.x = _World2Object[0].x;
  v_67.y = _World2Object[1].x;
  v_67.z = _World2Object[2].x;
  v_67.w = _World2Object[3].x;
  highp vec4 v_68;
  v_68.x = _World2Object[0].y;
  v_68.y = _World2Object[1].y;
  v_68.z = _World2Object[2].y;
  v_68.w = _World2Object[3].y;
  highp vec4 v_69;
  v_69.x = _World2Object[0].z;
  v_69.y = _World2Object[1].z;
  v_69.z = _World2Object[2].z;
  v_69.w = _World2Object[3].z;
  highp vec3 tmpvar_70;
  tmpvar_70 = normalize(((
    (v_67.xyz * tmpvar_17.x)
   + 
    (v_68.xyz * tmpvar_17.y)
  ) + (v_69.xyz * tmpvar_17.z)));
  worldNormal_5 = tmpvar_70;
  highp mat3 tmpvar_71;
  tmpvar_71[0] = _Object2World[0].xyz;
  tmpvar_71[1] = _Object2World[1].xyz;
  tmpvar_71[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_72;
  tmpvar_72 = normalize((tmpvar_71 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_72;
  lowp vec3 tmpvar_73;
  tmpvar_73 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_74;
  tmpvar_74 = (tmpvar_73 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75.x = worldTangent_4.x;
  tmpvar_75.y = worldBinormal_3.x;
  tmpvar_75.z = worldNormal_5.x;
  tmpvar_75.w = tmpvar_66.x;
  highp vec4 tmpvar_76;
  tmpvar_76.x = worldTangent_4.y;
  tmpvar_76.y = worldBinormal_3.y;
  tmpvar_76.z = worldNormal_5.y;
  tmpvar_76.w = tmpvar_66.y;
  highp vec4 tmpvar_77;
  tmpvar_77.x = worldTangent_4.z;
  tmpvar_77.y = worldBinormal_3.z;
  tmpvar_77.z = worldNormal_5.z;
  tmpvar_77.w = tmpvar_66.z;
  lowp vec4 tmpvar_78;
  tmpvar_78.w = 1.0;
  tmpvar_78.xyz = worldNormal_5;
  mediump vec4 normal_79;
  normal_79 = tmpvar_78;
  mediump vec3 x2_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (normal_79.xyzz * normal_79.yzzx);
  x2_80.x = dot (unity_SHBr, tmpvar_81);
  x2_80.y = dot (unity_SHBg, tmpvar_81);
  x2_80.z = dot (unity_SHBb, tmpvar_81);
  highp vec4 tmpvar_82;
  tmpvar_82 = (unity_World2Shadow[0] * (_Object2World * tmpvar_16));
  tmpvar_7 = tmpvar_82;
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_75;
  xlv_TEXCOORD1 = tmpvar_76;
  xlv_TEXCOORD2 = tmpvar_77;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = (x2_80 + (unity_SHC.xyz * (
    (normal_79.x * normal_79.x)
   - 
    (normal_79.y * normal_79.y)
  )));
  xlv_TEXCOORD7 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_23;
  mediump float dist_24;
  lowp float tmpvar_25;
  tmpvar_25 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x;
  dist_24 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (float((dist_24 > 
    (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w)
  )), _LightShadowData.x);
  tmpvar_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD0.xyz, tmpvar_22);
  worldN_4.x = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD1.xyz, tmpvar_22);
  worldN_4.y = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD2.xyz, tmpvar_22);
  worldN_4.z = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_30;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_23;
  mediump vec3 normalWorld_31;
  normalWorld_31 = worldN_4;
  mediump vec3 tmpvar_32;
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = normalWorld_31;
  mediump vec3 x1_34;
  x1_34.x = dot (unity_SHAr, tmpvar_33);
  x1_34.y = dot (unity_SHAg, tmpvar_33);
  x1_34.z = dot (unity_SHAb, tmpvar_33);
  tmpvar_32 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_32;
  lowp vec4 c_35;
  lowp vec4 c_36;
  lowp float diff_37;
  mediump float tmpvar_38;
  tmpvar_38 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_37 = tmpvar_38;
  mediump vec3 tmpvar_39;
  tmpvar_39 = ((tmpvar_9 * tmpvar_32) * diff_37);
  c_36.xyz = tmpvar_39;
  c_36.w = tmpvar_10;
  c_35.w = c_36.w;
  mediump vec3 tmpvar_40;
  tmpvar_40 = (c_36.xyz + (tmpvar_9 * (xlv_TEXCOORD6 + x1_34)));
  c_35.xyz = tmpvar_40;
  c_5.xyz = c_35.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_11;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_15;
  highp vec4 tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_16 = tmpvar_1;
  tmpvar_17 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = tmpvar_1.xyz;
  FinalPosition_20 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = (_WindQuality * _WindEnabled);
  if ((tmpvar_22 > 0.0)) {
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_23 * _ST_WindVector.xyz));
    highp mat3 tmpvar_24;
    tmpvar_24[0] = _World2Object[0].xyz;
    tmpvar_24[1] = _World2Object[1].xyz;
    tmpvar_24[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_24 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_22 == 5.0)) {
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    highp float fOffset_26;
    fOffset_26 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_26 = 0.75;
    };
    highp vec4 tmpvar_27;
    tmpvar_27.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_27.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_26);
    highp vec4 tmpvar_28;
    tmpvar_28 = abs(((
      fract((tmpvar_27 + 0.5))
     * 2.0) - 1.0));
    vPos_25 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_17 = tmpvar_2;
    FinalPosition_20 = vPos_25;
  };
  if ((tmpvar_22 >= 3.0)) {
    highp vec3 vPos_29;
    vPos_29 = FinalPosition_20;
    if ((tmpvar_22 == 5.0)) {
      highp vec3 vPos_30;
      vPos_30 = FinalPosition_20;
      highp float fAdherenceScale_31;
      highp vec3 tmpvar_32;
      tmpvar_32 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_33;
      tmpvar_33 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_34;
      highp float fOscillation_35;
      fOscillation_35 = 1.0;
      highp float fAmount_36;
      highp float fTarget_37;
      highp vec4 tmpvar_38;
      tmpvar_38.x = (tmpvar_33 + _glesMultiTexCoord0.w);
      tmpvar_38.y = ((tmpvar_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_38.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_33 + _glesMultiTexCoord0.w));
      tmpvar_38.w = ((tmpvar_33 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      vOscillations_34 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      highp float tmpvar_40;
      tmpvar_40 = (vOscillations_34.y * vOscillations_34.z);
      fTarget_37 = 1.0;
      fAmount_36 = tmpvar_40;
      if ((tmpvar_40 < 0.0)) {
        fTarget_37 = -1.0;
        fAmount_36 = -(tmpvar_40);
      };
      fOscillation_35 = (((
        (mix (mix (tmpvar_40, fTarget_37, fAmount_36), fTarget_37, fAmount_36) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_34.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_34.w * _ST_WindBranchWhip.x)));
      vPos_30 = (FinalPosition_20 + ((tmpvar_32 * fOscillation_35) * _ST_WindBranch.y));
      highp vec4 tmpvar_41;
      tmpvar_41.zw = vec2(0.0, 0.0);
      tmpvar_41.x = ((tmpvar_33 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_41.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      fAdherenceScale_31 = (1.0 - ((
        ((tmpvar_42.x * tmpvar_42.y) * tmpvar_42.x)
       * tmpvar_42.y) * _ST_WindTurbulences.x));
      fAdherenceScale_31 = (fAdherenceScale_31 + ((vOscillations_34.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_30 = (vPos_30 + ((
        ((vRotatedBranchAnchor_18 - vPos_30) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_31) * _glesMultiTexCoord0.z));
      vPos_29 = vPos_30;
    } else {
      highp vec3 vPos_44;
      vPos_44 = vPos_29;
      highp vec3 tmpvar_45;
      tmpvar_45 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_46;
      tmpvar_46 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_47;
      highp float fAmount_48;
      highp float fTarget_49;
      highp vec4 tmpvar_50;
      tmpvar_50.w = 0.0;
      tmpvar_50.x = (tmpvar_46 + _glesMultiTexCoord0.w);
      tmpvar_50.y = ((tmpvar_46 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_50.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_46 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_51;
      tmpvar_51 = abs(((
        fract((tmpvar_50 + 0.5))
       * 2.0) - 1.0));
      vOscillations_47 = (((
        (tmpvar_51 * tmpvar_51)
       * 
        (3.0 - (2.0 * tmpvar_51))
      ) - 0.5) * 2.0);
      highp float tmpvar_52;
      tmpvar_52 = (vOscillations_47.y * vOscillations_47.z);
      fTarget_49 = 1.0;
      fAmount_48 = tmpvar_52;
      if ((tmpvar_52 < 0.0)) {
        fTarget_49 = -1.0;
        fAmount_48 = -(tmpvar_52);
      };
      vPos_44 = (vPos_29 + ((tmpvar_45 * 
        (((mix (
          mix (tmpvar_52, fTarget_49, fAmount_48)
        , fTarget_49, fAmount_48) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_47.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_29 = vPos_44;
    };
    FinalPosition_20 = vPos_29;
  };
  if ((tmpvar_22 > 0.0)) {
    highp vec3 vPos_53;
    vPos_53 = FinalPosition_20;
    highp float fAdjust_54;
    highp float fLength_55;
    fLength_55 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_56;
    tmpvar_56 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_54 = tmpvar_56;
    if ((tmpvar_56 != 0.0)) {
      fAdjust_54 = pow (tmpvar_56, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_57;
    tmpvar_57.zw = vec2(0.0, 0.0);
    tmpvar_57.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_57.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_58;
    highp vec4 tmpvar_59;
    tmpvar_59 = abs(((
      fract((tmpvar_57 + 0.5))
     * 2.0) - 1.0));
    tmpvar_58 = (((
      (tmpvar_59 * tmpvar_59)
     * 
      (3.0 - (2.0 * tmpvar_59))
    ) - 0.5) * 2.0);
    vPos_53.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_58.x + (tmpvar_58.y * tmpvar_58.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_54)));
    vPos_53 = (normalize(vPos_53) * fLength_55);
    FinalPosition_20 = vPos_53;
  };
  tmpvar_16.xyz = FinalPosition_20;
  highp vec4 tmpvar_60;
  tmpvar_60 = (glstate_matrix_mvp * tmpvar_16);
  highp vec4 o_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = (tmpvar_60 * 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63.x = tmpvar_62.x;
  tmpvar_63.y = (tmpvar_62.y * _ProjectionParams.x);
  o_61.xy = (tmpvar_63 + tmpvar_62.w);
  o_61.zw = tmpvar_60.zw;
  highp vec3 tmpvar_64;
  tmpvar_64 = o_61.xyw;
  tmpvar_10 = tmpvar_64;
  highp vec2 tmpvar_65;
  tmpvar_65 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_65;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_66;
  tmpvar_66 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_67;
  v_67.x = _World2Object[0].x;
  v_67.y = _World2Object[1].x;
  v_67.z = _World2Object[2].x;
  v_67.w = _World2Object[3].x;
  highp vec4 v_68;
  v_68.x = _World2Object[0].y;
  v_68.y = _World2Object[1].y;
  v_68.z = _World2Object[2].y;
  v_68.w = _World2Object[3].y;
  highp vec4 v_69;
  v_69.x = _World2Object[0].z;
  v_69.y = _World2Object[1].z;
  v_69.z = _World2Object[2].z;
  v_69.w = _World2Object[3].z;
  highp vec3 tmpvar_70;
  tmpvar_70 = normalize(((
    (v_67.xyz * tmpvar_17.x)
   + 
    (v_68.xyz * tmpvar_17.y)
  ) + (v_69.xyz * tmpvar_17.z)));
  worldNormal_5 = tmpvar_70;
  highp mat3 tmpvar_71;
  tmpvar_71[0] = _Object2World[0].xyz;
  tmpvar_71[1] = _Object2World[1].xyz;
  tmpvar_71[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_72;
  tmpvar_72 = normalize((tmpvar_71 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_72;
  lowp vec3 tmpvar_73;
  tmpvar_73 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_74;
  tmpvar_74 = (tmpvar_73 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75.x = worldTangent_4.x;
  tmpvar_75.y = worldBinormal_3.x;
  tmpvar_75.z = worldNormal_5.x;
  tmpvar_75.w = tmpvar_66.x;
  highp vec4 tmpvar_76;
  tmpvar_76.x = worldTangent_4.y;
  tmpvar_76.y = worldBinormal_3.y;
  tmpvar_76.z = worldNormal_5.y;
  tmpvar_76.w = tmpvar_66.y;
  highp vec4 tmpvar_77;
  tmpvar_77.x = worldTangent_4.z;
  tmpvar_77.y = worldBinormal_3.z;
  tmpvar_77.z = worldNormal_5.z;
  tmpvar_77.w = tmpvar_66.z;
  lowp vec4 tmpvar_78;
  tmpvar_78.w = 1.0;
  tmpvar_78.xyz = worldNormal_5;
  mediump vec3 tmpvar_79;
  mediump vec4 normal_80;
  normal_80 = tmpvar_78;
  mediump vec3 x2_81;
  mediump vec4 tmpvar_82;
  tmpvar_82 = (normal_80.xyzz * normal_80.yzzx);
  x2_81.x = dot (unity_SHBr, tmpvar_82);
  x2_81.y = dot (unity_SHBg, tmpvar_82);
  x2_81.z = dot (unity_SHBb, tmpvar_82);
  tmpvar_79 = (x2_81 + (unity_SHC.xyz * (
    (normal_80.x * normal_80.x)
   - 
    (normal_80.y * normal_80.y)
  )));
  highp vec3 lightColor0_83;
  lightColor0_83 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_84;
  lightColor1_84 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_85;
  lightColor2_85 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_86;
  lightColor3_86 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_87;
  lightAttenSq_87 = unity_4LightAtten0;
  highp vec3 normal_88;
  normal_88 = worldNormal_5;
  highp vec4 tmpvar_89;
  tmpvar_89 = (unity_4LightPosX0 - tmpvar_66.x);
  highp vec4 tmpvar_90;
  tmpvar_90 = (unity_4LightPosY0 - tmpvar_66.y);
  highp vec4 tmpvar_91;
  tmpvar_91 = (unity_4LightPosZ0 - tmpvar_66.z);
  highp vec4 tmpvar_92;
  tmpvar_92 = (((tmpvar_89 * tmpvar_89) + (tmpvar_90 * tmpvar_90)) + (tmpvar_91 * tmpvar_91));
  highp vec4 tmpvar_93;
  tmpvar_93 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_89 * normal_88.x) + (tmpvar_90 * normal_88.y)) + (tmpvar_91 * normal_88.z))
   * 
    inversesqrt(tmpvar_92)
  )) * (1.0/((1.0 + 
    (tmpvar_92 * lightAttenSq_87)
  ))));
  highp vec3 tmpvar_94;
  tmpvar_94 = (tmpvar_79 + ((
    ((lightColor0_83 * tmpvar_93.x) + (lightColor1_84 * tmpvar_93.y))
   + 
    (lightColor2_85 * tmpvar_93.z)
  ) + (lightColor3_86 * tmpvar_93.w)));
  tmpvar_7 = tmpvar_94;
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_75;
  xlv_TEXCOORD1 = tmpvar_76;
  xlv_TEXCOORD2 = tmpvar_77;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_11.x = tmpvar_12.x;
  mediump float tmpvar_13;
  tmpvar_13 = fract(tmpvar_12.y);
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_13 * 0.0625) + unity_LODFade.y);
  projUV_11.y = tmpvar_14;
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_17;
  lowp float x_18;
  x_18 = (tmpvar_9 - _Cutoff);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_19 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD0.xyz, tmpvar_21);
  worldN_3.x = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD1.xyz, tmpvar_21);
  worldN_3.y = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD2.xyz, tmpvar_21);
  worldN_3.z = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_25;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_26;
  normalWorld_26 = worldN_3;
  mediump vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = normalWorld_26;
  mediump vec3 x1_28;
  x1_28.x = dot (unity_SHAr, tmpvar_27);
  x1_28.y = dot (unity_SHAg, tmpvar_27);
  x1_28.z = dot (unity_SHAb, tmpvar_27);
  lowp vec4 c_29;
  lowp vec4 c_30;
  lowp float diff_31;
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_31 = tmpvar_32;
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((tmpvar_8 * tmpvar_1) * diff_31);
  c_30.xyz = tmpvar_33;
  c_30.w = tmpvar_9;
  c_29.w = c_30.w;
  mediump vec3 tmpvar_34;
  tmpvar_34 = (c_30.xyz + (tmpvar_8 * (xlv_TEXCOORD6 + x1_28)));
  c_29.xyz = tmpvar_34;
  c_4.xyz = c_29.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
in vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_11;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_15;
  highp vec4 tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_16 = tmpvar_1;
  tmpvar_17 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = tmpvar_1.xyz;
  FinalPosition_20 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = (_WindQuality * _WindEnabled);
  if ((tmpvar_22 > 0.0)) {
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_23 * _ST_WindVector.xyz));
    highp mat3 tmpvar_24;
    tmpvar_24[0] = _World2Object[0].xyz;
    tmpvar_24[1] = _World2Object[1].xyz;
    tmpvar_24[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_24 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_22 == 5.0)) {
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    highp float fOffset_26;
    fOffset_26 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_26 = 0.75;
    };
    highp vec4 tmpvar_27;
    tmpvar_27.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_27.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_26);
    highp vec4 tmpvar_28;
    tmpvar_28 = abs(((
      fract((tmpvar_27 + 0.5))
     * 2.0) - 1.0));
    vPos_25 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_17 = tmpvar_2;
    FinalPosition_20 = vPos_25;
  };
  if ((tmpvar_22 >= 3.0)) {
    highp vec3 vPos_29;
    vPos_29 = FinalPosition_20;
    if ((tmpvar_22 == 5.0)) {
      highp vec3 vPos_30;
      vPos_30 = FinalPosition_20;
      highp float fAdherenceScale_31;
      highp vec3 tmpvar_32;
      tmpvar_32 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_33;
      tmpvar_33 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_34;
      highp float fOscillation_35;
      fOscillation_35 = 1.0;
      highp float fAmount_36;
      highp float fTarget_37;
      highp vec4 tmpvar_38;
      tmpvar_38.x = (tmpvar_33 + _glesMultiTexCoord0.w);
      tmpvar_38.y = ((tmpvar_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_38.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_33 + _glesMultiTexCoord0.w));
      tmpvar_38.w = ((tmpvar_33 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      vOscillations_34 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      highp float tmpvar_40;
      tmpvar_40 = (vOscillations_34.y * vOscillations_34.z);
      fTarget_37 = 1.0;
      fAmount_36 = tmpvar_40;
      if ((tmpvar_40 < 0.0)) {
        fTarget_37 = -1.0;
        fAmount_36 = -(tmpvar_40);
      };
      fOscillation_35 = (((
        (mix (mix (tmpvar_40, fTarget_37, fAmount_36), fTarget_37, fAmount_36) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_34.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_34.w * _ST_WindBranchWhip.x)));
      vPos_30 = (FinalPosition_20 + ((tmpvar_32 * fOscillation_35) * _ST_WindBranch.y));
      highp vec4 tmpvar_41;
      tmpvar_41.zw = vec2(0.0, 0.0);
      tmpvar_41.x = ((tmpvar_33 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_41.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      fAdherenceScale_31 = (1.0 - ((
        ((tmpvar_42.x * tmpvar_42.y) * tmpvar_42.x)
       * tmpvar_42.y) * _ST_WindTurbulences.x));
      fAdherenceScale_31 = (fAdherenceScale_31 + ((vOscillations_34.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_30 = (vPos_30 + ((
        ((vRotatedBranchAnchor_18 - vPos_30) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_31) * _glesMultiTexCoord0.z));
      vPos_29 = vPos_30;
    } else {
      highp vec3 vPos_44;
      vPos_44 = vPos_29;
      highp vec3 tmpvar_45;
      tmpvar_45 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_46;
      tmpvar_46 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_47;
      highp float fAmount_48;
      highp float fTarget_49;
      highp vec4 tmpvar_50;
      tmpvar_50.w = 0.0;
      tmpvar_50.x = (tmpvar_46 + _glesMultiTexCoord0.w);
      tmpvar_50.y = ((tmpvar_46 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_50.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_46 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_51;
      tmpvar_51 = abs(((
        fract((tmpvar_50 + 0.5))
       * 2.0) - 1.0));
      vOscillations_47 = (((
        (tmpvar_51 * tmpvar_51)
       * 
        (3.0 - (2.0 * tmpvar_51))
      ) - 0.5) * 2.0);
      highp float tmpvar_52;
      tmpvar_52 = (vOscillations_47.y * vOscillations_47.z);
      fTarget_49 = 1.0;
      fAmount_48 = tmpvar_52;
      if ((tmpvar_52 < 0.0)) {
        fTarget_49 = -1.0;
        fAmount_48 = -(tmpvar_52);
      };
      vPos_44 = (vPos_29 + ((tmpvar_45 * 
        (((mix (
          mix (tmpvar_52, fTarget_49, fAmount_48)
        , fTarget_49, fAmount_48) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_47.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_29 = vPos_44;
    };
    FinalPosition_20 = vPos_29;
  };
  if ((tmpvar_22 > 0.0)) {
    highp vec3 vPos_53;
    vPos_53 = FinalPosition_20;
    highp float fAdjust_54;
    highp float fLength_55;
    fLength_55 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_56;
    tmpvar_56 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_54 = tmpvar_56;
    if ((tmpvar_56 != 0.0)) {
      fAdjust_54 = pow (tmpvar_56, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_57;
    tmpvar_57.zw = vec2(0.0, 0.0);
    tmpvar_57.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_57.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_58;
    highp vec4 tmpvar_59;
    tmpvar_59 = abs(((
      fract((tmpvar_57 + 0.5))
     * 2.0) - 1.0));
    tmpvar_58 = (((
      (tmpvar_59 * tmpvar_59)
     * 
      (3.0 - (2.0 * tmpvar_59))
    ) - 0.5) * 2.0);
    vPos_53.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_58.x + (tmpvar_58.y * tmpvar_58.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_54)));
    vPos_53 = (normalize(vPos_53) * fLength_55);
    FinalPosition_20 = vPos_53;
  };
  tmpvar_16.xyz = FinalPosition_20;
  highp vec4 tmpvar_60;
  tmpvar_60 = (glstate_matrix_mvp * tmpvar_16);
  highp vec4 o_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = (tmpvar_60 * 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63.x = tmpvar_62.x;
  tmpvar_63.y = (tmpvar_62.y * _ProjectionParams.x);
  o_61.xy = (tmpvar_63 + tmpvar_62.w);
  o_61.zw = tmpvar_60.zw;
  highp vec3 tmpvar_64;
  tmpvar_64 = o_61.xyw;
  tmpvar_10 = tmpvar_64;
  highp vec2 tmpvar_65;
  tmpvar_65 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_65;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_66;
  tmpvar_66 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_67;
  v_67.x = _World2Object[0].x;
  v_67.y = _World2Object[1].x;
  v_67.z = _World2Object[2].x;
  v_67.w = _World2Object[3].x;
  highp vec4 v_68;
  v_68.x = _World2Object[0].y;
  v_68.y = _World2Object[1].y;
  v_68.z = _World2Object[2].y;
  v_68.w = _World2Object[3].y;
  highp vec4 v_69;
  v_69.x = _World2Object[0].z;
  v_69.y = _World2Object[1].z;
  v_69.z = _World2Object[2].z;
  v_69.w = _World2Object[3].z;
  highp vec3 tmpvar_70;
  tmpvar_70 = normalize(((
    (v_67.xyz * tmpvar_17.x)
   + 
    (v_68.xyz * tmpvar_17.y)
  ) + (v_69.xyz * tmpvar_17.z)));
  worldNormal_5 = tmpvar_70;
  highp mat3 tmpvar_71;
  tmpvar_71[0] = _Object2World[0].xyz;
  tmpvar_71[1] = _Object2World[1].xyz;
  tmpvar_71[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_72;
  tmpvar_72 = normalize((tmpvar_71 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_72;
  lowp vec3 tmpvar_73;
  tmpvar_73 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_74;
  tmpvar_74 = (tmpvar_73 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75.x = worldTangent_4.x;
  tmpvar_75.y = worldBinormal_3.x;
  tmpvar_75.z = worldNormal_5.x;
  tmpvar_75.w = tmpvar_66.x;
  highp vec4 tmpvar_76;
  tmpvar_76.x = worldTangent_4.y;
  tmpvar_76.y = worldBinormal_3.y;
  tmpvar_76.z = worldNormal_5.y;
  tmpvar_76.w = tmpvar_66.y;
  highp vec4 tmpvar_77;
  tmpvar_77.x = worldTangent_4.z;
  tmpvar_77.y = worldBinormal_3.z;
  tmpvar_77.z = worldNormal_5.z;
  tmpvar_77.w = tmpvar_66.z;
  lowp vec4 tmpvar_78;
  tmpvar_78.w = 1.0;
  tmpvar_78.xyz = worldNormal_5;
  mediump vec3 tmpvar_79;
  mediump vec4 normal_80;
  normal_80 = tmpvar_78;
  mediump vec3 x2_81;
  mediump vec4 tmpvar_82;
  tmpvar_82 = (normal_80.xyzz * normal_80.yzzx);
  x2_81.x = dot (unity_SHBr, tmpvar_82);
  x2_81.y = dot (unity_SHBg, tmpvar_82);
  x2_81.z = dot (unity_SHBb, tmpvar_82);
  tmpvar_79 = (x2_81 + (unity_SHC.xyz * (
    (normal_80.x * normal_80.x)
   - 
    (normal_80.y * normal_80.y)
  )));
  highp vec3 lightColor0_83;
  lightColor0_83 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_84;
  lightColor1_84 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_85;
  lightColor2_85 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_86;
  lightColor3_86 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_87;
  lightAttenSq_87 = unity_4LightAtten0;
  highp vec3 normal_88;
  normal_88 = worldNormal_5;
  highp vec4 tmpvar_89;
  tmpvar_89 = (unity_4LightPosX0 - tmpvar_66.x);
  highp vec4 tmpvar_90;
  tmpvar_90 = (unity_4LightPosY0 - tmpvar_66.y);
  highp vec4 tmpvar_91;
  tmpvar_91 = (unity_4LightPosZ0 - tmpvar_66.z);
  highp vec4 tmpvar_92;
  tmpvar_92 = (((tmpvar_89 * tmpvar_89) + (tmpvar_90 * tmpvar_90)) + (tmpvar_91 * tmpvar_91));
  highp vec4 tmpvar_93;
  tmpvar_93 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_89 * normal_88.x) + (tmpvar_90 * normal_88.y)) + (tmpvar_91 * normal_88.z))
   * 
    inversesqrt(tmpvar_92)
  )) * (1.0/((1.0 + 
    (tmpvar_92 * lightAttenSq_87)
  ))));
  highp vec3 tmpvar_94;
  tmpvar_94 = (tmpvar_79 + ((
    ((lightColor0_83 * tmpvar_93.x) + (lightColor1_84 * tmpvar_93.y))
   + 
    (lightColor2_85 * tmpvar_93.z)
  ) + (lightColor3_86 * tmpvar_93.w)));
  tmpvar_7 = tmpvar_94;
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_75;
  xlv_TEXCOORD1 = tmpvar_76;
  xlv_TEXCOORD2 = tmpvar_77;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_11.x = tmpvar_12.x;
  mediump float tmpvar_13;
  tmpvar_13 = fract(tmpvar_12.y);
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_13 * 0.0625) + unity_LODFade.y);
  projUV_11.y = tmpvar_14;
  lowp float x_15;
  x_15 = (texture (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_17;
  lowp float x_18;
  x_18 = (tmpvar_9 - _Cutoff);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_10.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_10.xyz = clamp ((tmpvar_19 * (
    ((max (diffuseColor_10.x, max (diffuseColor_10.y, diffuseColor_10.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD0.xyz, tmpvar_21);
  worldN_3.x = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD1.xyz, tmpvar_21);
  worldN_3.y = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD2.xyz, tmpvar_21);
  worldN_3.z = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_25;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_26;
  normalWorld_26 = worldN_3;
  mediump vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = normalWorld_26;
  mediump vec3 x1_28;
  x1_28.x = dot (unity_SHAr, tmpvar_27);
  x1_28.y = dot (unity_SHAg, tmpvar_27);
  x1_28.z = dot (unity_SHAb, tmpvar_27);
  lowp vec4 c_29;
  lowp vec4 c_30;
  lowp float diff_31;
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_31 = tmpvar_32;
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((tmpvar_8 * tmpvar_1) * diff_31);
  c_30.xyz = tmpvar_33;
  c_30.w = tmpvar_9;
  c_29.w = c_30.w;
  mediump vec3 tmpvar_34;
  tmpvar_34 = (c_30.xyz + (tmpvar_8 * (xlv_TEXCOORD6 + x1_28)));
  c_29.xyz = tmpvar_34;
  c_4.xyz = c_29.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  mediump vec3 tmpvar_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = _glesMultiTexCoord0.xy;
  tmpvar_10.xy = tmpvar_12;
  tmpvar_9.w = _Color.w;
  mediump vec3 tmpvar_13;
  tmpvar_13 = (_Color.xyz * _glesColor.x);
  tmpvar_9.xyz = tmpvar_13;
  highp float cse_14;
  cse_14 = _Object2World[3].x;
  highp float cse_15;
  cse_15 = _Object2World[3].y;
  highp float tmpvar_16;
  tmpvar_16 = clamp (((
    fract(((cse_14 + cse_15) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_16;
  highp vec4 tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_17 = tmpvar_1;
  tmpvar_18 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_19;
  highp vec3 vRotatedWindVector_20;
  highp vec3 FinalPosition_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = tmpvar_1.xyz;
  FinalPosition_21 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = (_WindQuality * _WindEnabled);
  if ((tmpvar_23 > 0.0)) {
    highp mat3 tmpvar_24;
    tmpvar_24[0] = _World2Object[0].xyz;
    tmpvar_24[1] = _World2Object[1].xyz;
    tmpvar_24[2] = _World2Object[2].xyz;
    vRotatedWindVector_20 = normalize((tmpvar_24 * _ST_WindVector.xyz));
    highp mat3 tmpvar_25;
    tmpvar_25[0] = _World2Object[0].xyz;
    tmpvar_25[1] = _World2Object[1].xyz;
    tmpvar_25[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_19 = (normalize((tmpvar_25 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_20 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_19 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_23 == 5.0)) {
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    highp float fOffset_27;
    fOffset_27 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_27 = 0.75;
    };
    highp vec4 tmpvar_28;
    tmpvar_28.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_28.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_27);
    highp vec4 tmpvar_29;
    tmpvar_29 = abs(((
      fract((tmpvar_28 + 0.5))
     * 2.0) - 1.0));
    vPos_26 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_18 = tmpvar_2;
    FinalPosition_21 = vPos_26;
  };
  if ((tmpvar_23 >= 3.0)) {
    highp vec3 vPos_30;
    vPos_30 = FinalPosition_21;
    if ((tmpvar_23 == 5.0)) {
      highp vec3 vPos_31;
      vPos_31 = FinalPosition_21;
      highp float fAdherenceScale_32;
      highp vec3 tmpvar_33;
      tmpvar_33 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_34;
      tmpvar_34 = (_ST_WindBranch.x + (cse_14 + cse_15));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.x = (tmpvar_34 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((tmpvar_34 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_34 + _glesMultiTexCoord0.w));
      tmpvar_39.w = ((tmpvar_34 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        (mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_35.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_35.w * _ST_WindBranchWhip.x)));
      vPos_31 = (FinalPosition_21 + ((tmpvar_33 * fOscillation_36) * _ST_WindBranch.y));
      highp vec4 tmpvar_42;
      tmpvar_42.zw = vec2(0.0, 0.0);
      tmpvar_42.x = ((tmpvar_34 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_42.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_43;
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      tmpvar_43 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      fAdherenceScale_32 = (1.0 - ((
        ((tmpvar_43.x * tmpvar_43.y) * tmpvar_43.x)
       * tmpvar_43.y) * _ST_WindTurbulences.x));
      fAdherenceScale_32 = (fAdherenceScale_32 + ((vOscillations_35.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_31 = (vPos_31 + ((
        ((vRotatedBranchAnchor_19 - vPos_31) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_32) * _glesMultiTexCoord0.z));
      vPos_30 = vPos_31;
    } else {
      highp vec3 vPos_45;
      vPos_45 = vPos_30;
      highp vec3 tmpvar_46;
      tmpvar_46 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_47;
      tmpvar_47 = (_ST_WindBranch.x + (cse_14 + cse_15));
      highp vec4 vOscillations_48;
      highp float fAmount_49;
      highp float fTarget_50;
      highp vec4 tmpvar_51;
      tmpvar_51.w = 0.0;
      tmpvar_51.x = (tmpvar_47 + _glesMultiTexCoord0.w);
      tmpvar_51.y = ((tmpvar_47 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_51.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_47 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_52;
      tmpvar_52 = abs(((
        fract((tmpvar_51 + 0.5))
       * 2.0) - 1.0));
      vOscillations_48 = (((
        (tmpvar_52 * tmpvar_52)
       * 
        (3.0 - (2.0 * tmpvar_52))
      ) - 0.5) * 2.0);
      highp float tmpvar_53;
      tmpvar_53 = (vOscillations_48.y * vOscillations_48.z);
      fTarget_50 = 1.0;
      fAmount_49 = tmpvar_53;
      if ((tmpvar_53 < 0.0)) {
        fTarget_50 = -1.0;
        fAmount_49 = -(tmpvar_53);
      };
      vPos_45 = (vPos_30 + ((tmpvar_46 * 
        (((mix (
          mix (tmpvar_53, fTarget_50, fAmount_49)
        , fTarget_50, fAmount_49) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_48.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_30 = vPos_45;
    };
    FinalPosition_21 = vPos_30;
  };
  if ((tmpvar_23 > 0.0)) {
    highp vec3 vPos_54;
    vPos_54 = FinalPosition_21;
    highp float fAdjust_55;
    highp float fLength_56;
    fLength_56 = sqrt(dot (FinalPosition_21, FinalPosition_21));
    highp float tmpvar_57;
    tmpvar_57 = (max ((FinalPosition_21.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_55 = tmpvar_57;
    if ((tmpvar_57 != 0.0)) {
      fAdjust_55 = pow (tmpvar_57, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_58;
    tmpvar_58.zw = vec2(0.0, 0.0);
    tmpvar_58.x = (cse_14 + _ST_WindGlobal.x);
    tmpvar_58.y = (cse_15 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_59;
    highp vec4 tmpvar_60;
    tmpvar_60 = abs(((
      fract((tmpvar_58 + 0.5))
     * 2.0) - 1.0));
    tmpvar_59 = (((
      (tmpvar_60 * tmpvar_60)
     * 
      (3.0 - (2.0 * tmpvar_60))
    ) - 0.5) * 2.0);
    vPos_54.xz = (FinalPosition_21.xz + (vRotatedWindVector_20.xz * (
      ((_ST_WindGlobal.y * (tmpvar_59.x + (tmpvar_59.y * tmpvar_59.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_55)));
    vPos_54 = (normalize(vPos_54) * fLength_56);
    FinalPosition_21 = vPos_54;
  };
  tmpvar_17.xyz = FinalPosition_21;
  highp vec4 tmpvar_61;
  tmpvar_61 = (glstate_matrix_mvp * tmpvar_17);
  highp vec4 o_62;
  highp vec4 tmpvar_63;
  tmpvar_63 = (tmpvar_61 * 0.5);
  highp vec2 tmpvar_64;
  tmpvar_64.x = tmpvar_63.x;
  tmpvar_64.y = (tmpvar_63.y * _ProjectionParams.x);
  o_62.xy = (tmpvar_64 + tmpvar_63.w);
  o_62.zw = tmpvar_61.zw;
  highp vec3 tmpvar_65;
  tmpvar_65 = o_62.xyw;
  tmpvar_11 = tmpvar_65;
  highp vec2 tmpvar_66;
  tmpvar_66 = (tmpvar_11.xy * (_ScreenParams.xy * 0.25));
  tmpvar_11.xy = tmpvar_66;
  tmpvar_6 = tmpvar_9;
  highp vec3 tmpvar_67;
  tmpvar_67 = (_Object2World * tmpvar_17).xyz;
  highp vec4 v_68;
  v_68.x = _World2Object[0].x;
  v_68.y = _World2Object[1].x;
  v_68.z = _World2Object[2].x;
  v_68.w = _World2Object[3].x;
  highp vec4 v_69;
  v_69.x = _World2Object[0].y;
  v_69.y = _World2Object[1].y;
  v_69.z = _World2Object[2].y;
  v_69.w = _World2Object[3].y;
  highp vec4 v_70;
  v_70.x = _World2Object[0].z;
  v_70.y = _World2Object[1].z;
  v_70.z = _World2Object[2].z;
  v_70.w = _World2Object[3].z;
  highp vec3 tmpvar_71;
  tmpvar_71 = normalize(((
    (v_68.xyz * tmpvar_18.x)
   + 
    (v_69.xyz * tmpvar_18.y)
  ) + (v_70.xyz * tmpvar_18.z)));
  worldNormal_5 = tmpvar_71;
  highp mat3 tmpvar_72;
  tmpvar_72[0] = _Object2World[0].xyz;
  tmpvar_72[1] = _Object2World[1].xyz;
  tmpvar_72[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_73;
  tmpvar_73 = normalize((tmpvar_72 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_73;
  lowp vec3 tmpvar_74;
  tmpvar_74 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_75;
  tmpvar_75 = (tmpvar_74 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76.x = worldTangent_4.x;
  tmpvar_76.y = worldBinormal_3.x;
  tmpvar_76.z = worldNormal_5.x;
  tmpvar_76.w = tmpvar_67.x;
  highp vec4 tmpvar_77;
  tmpvar_77.x = worldTangent_4.y;
  tmpvar_77.y = worldBinormal_3.y;
  tmpvar_77.z = worldNormal_5.y;
  tmpvar_77.w = tmpvar_67.y;
  highp vec4 tmpvar_78;
  tmpvar_78.x = worldTangent_4.z;
  tmpvar_78.y = worldBinormal_3.z;
  tmpvar_78.z = worldNormal_5.z;
  tmpvar_78.w = tmpvar_67.z;
  lowp vec4 tmpvar_79;
  tmpvar_79.w = 1.0;
  tmpvar_79.xyz = worldNormal_5;
  mediump vec3 tmpvar_80;
  mediump vec4 normal_81;
  normal_81 = tmpvar_79;
  mediump vec3 x2_82;
  mediump vec4 tmpvar_83;
  tmpvar_83 = (normal_81.xyzz * normal_81.yzzx);
  x2_82.x = dot (unity_SHBr, tmpvar_83);
  x2_82.y = dot (unity_SHBg, tmpvar_83);
  x2_82.z = dot (unity_SHBb, tmpvar_83);
  tmpvar_80 = (x2_82 + (unity_SHC.xyz * (
    (normal_81.x * normal_81.x)
   - 
    (normal_81.y * normal_81.y)
  )));
  highp vec3 lightColor0_84;
  lightColor0_84 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_85;
  lightColor1_85 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_86;
  lightColor2_86 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_87;
  lightColor3_87 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_88;
  lightAttenSq_88 = unity_4LightAtten0;
  highp vec3 normal_89;
  normal_89 = worldNormal_5;
  highp vec4 tmpvar_90;
  tmpvar_90 = (unity_4LightPosX0 - tmpvar_67.x);
  highp vec4 tmpvar_91;
  tmpvar_91 = (unity_4LightPosY0 - tmpvar_67.y);
  highp vec4 tmpvar_92;
  tmpvar_92 = (unity_4LightPosZ0 - tmpvar_67.z);
  highp vec4 tmpvar_93;
  tmpvar_93 = (((tmpvar_90 * tmpvar_90) + (tmpvar_91 * tmpvar_91)) + (tmpvar_92 * tmpvar_92));
  highp vec4 tmpvar_94;
  tmpvar_94 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_90 * normal_89.x) + (tmpvar_91 * normal_89.y)) + (tmpvar_92 * normal_89.z))
   * 
    inversesqrt(tmpvar_93)
  )) * (1.0/((1.0 + 
    (tmpvar_93 * lightAttenSq_88)
  ))));
  highp vec3 tmpvar_95;
  tmpvar_95 = (tmpvar_80 + ((
    ((lightColor0_84 * tmpvar_94.x) + (lightColor1_85 * tmpvar_94.y))
   + 
    (lightColor2_86 * tmpvar_94.z)
  ) + (lightColor3_87 * tmpvar_94.w)));
  tmpvar_7 = tmpvar_95;
  highp vec4 tmpvar_96;
  tmpvar_96 = (unity_World2Shadow[0] * (_Object2World * tmpvar_17));
  tmpvar_8 = tmpvar_96;
  gl_Position = (glstate_matrix_mvp * tmpvar_17);
  xlv_TEXCOORD0 = tmpvar_76;
  xlv_TEXCOORD1 = tmpvar_77;
  xlv_TEXCOORD2 = tmpvar_78;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_23;
  mediump float dist_24;
  lowp float tmpvar_25;
  tmpvar_25 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x;
  dist_24 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (float((dist_24 > 
    (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w)
  )), _LightShadowData.x);
  tmpvar_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD0.xyz, tmpvar_22);
  worldN_4.x = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD1.xyz, tmpvar_22);
  worldN_4.y = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD2.xyz, tmpvar_22);
  worldN_4.z = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_30;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_23;
  mediump vec3 normalWorld_31;
  normalWorld_31 = worldN_4;
  mediump vec3 tmpvar_32;
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = normalWorld_31;
  mediump vec3 x1_34;
  x1_34.x = dot (unity_SHAr, tmpvar_33);
  x1_34.y = dot (unity_SHAg, tmpvar_33);
  x1_34.z = dot (unity_SHAb, tmpvar_33);
  tmpvar_32 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_32;
  lowp vec4 c_35;
  lowp vec4 c_36;
  lowp float diff_37;
  mediump float tmpvar_38;
  tmpvar_38 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_37 = tmpvar_38;
  mediump vec3 tmpvar_39;
  tmpvar_39 = ((tmpvar_9 * tmpvar_32) * diff_37);
  c_36.xyz = tmpvar_39;
  c_36.w = tmpvar_10;
  c_35.w = c_36.w;
  mediump vec3 tmpvar_40;
  tmpvar_40 = (c_36.xyz + (tmpvar_9 * (xlv_TEXCOORD6 + x1_34)));
  c_35.xyz = tmpvar_40;
  c_5.xyz = c_35.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_11;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_15;
  highp vec4 tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_16 = tmpvar_1;
  tmpvar_17 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = tmpvar_1.xyz;
  FinalPosition_20 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = (_WindQuality * _WindEnabled);
  if ((tmpvar_22 > 0.0)) {
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_23 * _ST_WindVector.xyz));
    highp mat3 tmpvar_24;
    tmpvar_24[0] = _World2Object[0].xyz;
    tmpvar_24[1] = _World2Object[1].xyz;
    tmpvar_24[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_24 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_22 == 5.0)) {
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    highp float fOffset_26;
    fOffset_26 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_26 = 0.75;
    };
    highp vec4 tmpvar_27;
    tmpvar_27.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_27.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_26);
    highp vec4 tmpvar_28;
    tmpvar_28 = abs(((
      fract((tmpvar_27 + 0.5))
     * 2.0) - 1.0));
    vPos_25 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_17 = tmpvar_2;
    FinalPosition_20 = vPos_25;
  };
  if ((tmpvar_22 >= 3.0)) {
    highp vec3 vPos_29;
    vPos_29 = FinalPosition_20;
    if ((tmpvar_22 == 5.0)) {
      highp vec3 vPos_30;
      vPos_30 = FinalPosition_20;
      highp float fAdherenceScale_31;
      highp vec3 tmpvar_32;
      tmpvar_32 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_33;
      tmpvar_33 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_34;
      highp float fOscillation_35;
      fOscillation_35 = 1.0;
      highp float fAmount_36;
      highp float fTarget_37;
      highp vec4 tmpvar_38;
      tmpvar_38.x = (tmpvar_33 + _glesMultiTexCoord0.w);
      tmpvar_38.y = ((tmpvar_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_38.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_33 + _glesMultiTexCoord0.w));
      tmpvar_38.w = ((tmpvar_33 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      vOscillations_34 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      highp float tmpvar_40;
      tmpvar_40 = (vOscillations_34.y * vOscillations_34.z);
      fTarget_37 = 1.0;
      fAmount_36 = tmpvar_40;
      if ((tmpvar_40 < 0.0)) {
        fTarget_37 = -1.0;
        fAmount_36 = -(tmpvar_40);
      };
      fOscillation_35 = (((
        (mix (mix (tmpvar_40, fTarget_37, fAmount_36), fTarget_37, fAmount_36) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_34.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_34.w * _ST_WindBranchWhip.x)));
      vPos_30 = (FinalPosition_20 + ((tmpvar_32 * fOscillation_35) * _ST_WindBranch.y));
      highp vec4 tmpvar_41;
      tmpvar_41.zw = vec2(0.0, 0.0);
      tmpvar_41.x = ((tmpvar_33 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_41.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      fAdherenceScale_31 = (1.0 - ((
        ((tmpvar_42.x * tmpvar_42.y) * tmpvar_42.x)
       * tmpvar_42.y) * _ST_WindTurbulences.x));
      fAdherenceScale_31 = (fAdherenceScale_31 + ((vOscillations_34.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_30 = (vPos_30 + ((
        ((vRotatedBranchAnchor_18 - vPos_30) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_31) * _glesMultiTexCoord0.z));
      vPos_29 = vPos_30;
    } else {
      highp vec3 vPos_44;
      vPos_44 = vPos_29;
      highp vec3 tmpvar_45;
      tmpvar_45 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_46;
      tmpvar_46 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_47;
      highp float fAmount_48;
      highp float fTarget_49;
      highp vec4 tmpvar_50;
      tmpvar_50.w = 0.0;
      tmpvar_50.x = (tmpvar_46 + _glesMultiTexCoord0.w);
      tmpvar_50.y = ((tmpvar_46 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_50.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_46 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_51;
      tmpvar_51 = abs(((
        fract((tmpvar_50 + 0.5))
       * 2.0) - 1.0));
      vOscillations_47 = (((
        (tmpvar_51 * tmpvar_51)
       * 
        (3.0 - (2.0 * tmpvar_51))
      ) - 0.5) * 2.0);
      highp float tmpvar_52;
      tmpvar_52 = (vOscillations_47.y * vOscillations_47.z);
      fTarget_49 = 1.0;
      fAmount_48 = tmpvar_52;
      if ((tmpvar_52 < 0.0)) {
        fTarget_49 = -1.0;
        fAmount_48 = -(tmpvar_52);
      };
      vPos_44 = (vPos_29 + ((tmpvar_45 * 
        (((mix (
          mix (tmpvar_52, fTarget_49, fAmount_48)
        , fTarget_49, fAmount_48) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_47.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_29 = vPos_44;
    };
    FinalPosition_20 = vPos_29;
  };
  if ((tmpvar_22 > 0.0)) {
    highp vec3 vPos_53;
    vPos_53 = FinalPosition_20;
    highp float fAdjust_54;
    highp float fLength_55;
    fLength_55 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_56;
    tmpvar_56 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_54 = tmpvar_56;
    if ((tmpvar_56 != 0.0)) {
      fAdjust_54 = pow (tmpvar_56, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_57;
    tmpvar_57.zw = vec2(0.0, 0.0);
    tmpvar_57.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_57.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_58;
    highp vec4 tmpvar_59;
    tmpvar_59 = abs(((
      fract((tmpvar_57 + 0.5))
     * 2.0) - 1.0));
    tmpvar_58 = (((
      (tmpvar_59 * tmpvar_59)
     * 
      (3.0 - (2.0 * tmpvar_59))
    ) - 0.5) * 2.0);
    vPos_53.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_58.x + (tmpvar_58.y * tmpvar_58.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_54)));
    vPos_53 = (normalize(vPos_53) * fLength_55);
    FinalPosition_20 = vPos_53;
  };
  tmpvar_16.xyz = FinalPosition_20;
  highp vec4 tmpvar_60;
  tmpvar_60 = (glstate_matrix_mvp * tmpvar_16);
  highp vec4 o_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = (tmpvar_60 * 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63.x = tmpvar_62.x;
  tmpvar_63.y = (tmpvar_62.y * _ProjectionParams.x);
  o_61.xy = (tmpvar_63 + tmpvar_62.w);
  o_61.zw = tmpvar_60.zw;
  highp vec3 tmpvar_64;
  tmpvar_64 = o_61.xyw;
  tmpvar_10 = tmpvar_64;
  highp vec2 tmpvar_65;
  tmpvar_65 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_65;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_66;
  tmpvar_66 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_67;
  v_67.x = _World2Object[0].x;
  v_67.y = _World2Object[1].x;
  v_67.z = _World2Object[2].x;
  v_67.w = _World2Object[3].x;
  highp vec4 v_68;
  v_68.x = _World2Object[0].y;
  v_68.y = _World2Object[1].y;
  v_68.z = _World2Object[2].y;
  v_68.w = _World2Object[3].y;
  highp vec4 v_69;
  v_69.x = _World2Object[0].z;
  v_69.y = _World2Object[1].z;
  v_69.z = _World2Object[2].z;
  v_69.w = _World2Object[3].z;
  highp vec3 tmpvar_70;
  tmpvar_70 = normalize(((
    (v_67.xyz * tmpvar_17.x)
   + 
    (v_68.xyz * tmpvar_17.y)
  ) + (v_69.xyz * tmpvar_17.z)));
  worldNormal_5 = tmpvar_70;
  highp mat3 tmpvar_71;
  tmpvar_71[0] = _Object2World[0].xyz;
  tmpvar_71[1] = _Object2World[1].xyz;
  tmpvar_71[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_72;
  tmpvar_72 = normalize((tmpvar_71 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_72;
  lowp vec3 tmpvar_73;
  tmpvar_73 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_74;
  tmpvar_74 = (tmpvar_73 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75.x = worldTangent_4.x;
  tmpvar_75.y = worldBinormal_3.x;
  tmpvar_75.z = worldNormal_5.x;
  tmpvar_75.w = tmpvar_66.x;
  highp vec4 tmpvar_76;
  tmpvar_76.x = worldTangent_4.y;
  tmpvar_76.y = worldBinormal_3.y;
  tmpvar_76.z = worldNormal_5.y;
  tmpvar_76.w = tmpvar_66.y;
  highp vec4 tmpvar_77;
  tmpvar_77.x = worldTangent_4.z;
  tmpvar_77.y = worldBinormal_3.z;
  tmpvar_77.z = worldNormal_5.z;
  tmpvar_77.w = tmpvar_66.z;
  lowp vec4 tmpvar_78;
  tmpvar_78.w = 1.0;
  tmpvar_78.xyz = worldNormal_5;
  mediump vec4 normal_79;
  normal_79 = tmpvar_78;
  mediump vec3 x2_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (normal_79.xyzz * normal_79.yzzx);
  x2_80.x = dot (unity_SHBr, tmpvar_81);
  x2_80.y = dot (unity_SHBg, tmpvar_81);
  x2_80.z = dot (unity_SHBb, tmpvar_81);
  highp vec4 tmpvar_82;
  tmpvar_82 = (unity_World2Shadow[0] * (_Object2World * tmpvar_16));
  tmpvar_7 = tmpvar_82;
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_75;
  xlv_TEXCOORD1 = tmpvar_76;
  xlv_TEXCOORD2 = tmpvar_77;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = (x2_80 + (unity_SHC.xyz * (
    (normal_79.x * normal_79.x)
   - 
    (normal_79.y * normal_79.y)
  )));
  xlv_TEXCOORD7 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_23;
  lowp float tmpvar_24;
  tmpvar_24 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD7.xyz);
  mediump float tmpvar_25;
  tmpvar_25 = (_LightShadowData.x + (tmpvar_24 * (1.0 - _LightShadowData.x)));
  shadow_23 = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD0.xyz, tmpvar_22);
  worldN_4.x = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD1.xyz, tmpvar_22);
  worldN_4.y = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD2.xyz, tmpvar_22);
  worldN_4.z = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_29;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_23;
  mediump vec3 normalWorld_30;
  normalWorld_30 = worldN_4;
  mediump vec3 tmpvar_31;
  mediump vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = normalWorld_30;
  mediump vec3 x1_33;
  x1_33.x = dot (unity_SHAr, tmpvar_32);
  x1_33.y = dot (unity_SHAg, tmpvar_32);
  x1_33.z = dot (unity_SHAb, tmpvar_32);
  tmpvar_31 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_31;
  lowp vec4 c_34;
  lowp vec4 c_35;
  lowp float diff_36;
  mediump float tmpvar_37;
  tmpvar_37 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_36 = tmpvar_37;
  mediump vec3 tmpvar_38;
  tmpvar_38 = ((tmpvar_9 * tmpvar_31) * diff_36);
  c_35.xyz = tmpvar_38;
  c_35.w = tmpvar_10;
  c_34.w = c_35.w;
  mediump vec3 tmpvar_39;
  tmpvar_39 = (c_35.xyz + (tmpvar_9 * (xlv_TEXCOORD6 + x1_33)));
  c_34.xyz = tmpvar_39;
  c_5.xyz = c_34.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
in vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
out mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord0.xy;
  tmpvar_9.xy = tmpvar_11;
  tmpvar_8.w = _Color.w;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (_Color.xyz * _glesColor.x);
  tmpvar_8.xyz = tmpvar_12;
  highp float cse_13;
  cse_13 = _Object2World[3].x;
  highp float cse_14;
  cse_14 = _Object2World[3].y;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    fract(((cse_13 + cse_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_15;
  highp vec4 tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_16 = tmpvar_1;
  tmpvar_17 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = tmpvar_1.xyz;
  FinalPosition_20 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = (_WindQuality * _WindEnabled);
  if ((tmpvar_22 > 0.0)) {
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_23 * _ST_WindVector.xyz));
    highp mat3 tmpvar_24;
    tmpvar_24[0] = _World2Object[0].xyz;
    tmpvar_24[1] = _World2Object[1].xyz;
    tmpvar_24[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_24 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_22 == 5.0)) {
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    highp float fOffset_26;
    fOffset_26 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_26 = 0.75;
    };
    highp vec4 tmpvar_27;
    tmpvar_27.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_27.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_26);
    highp vec4 tmpvar_28;
    tmpvar_28 = abs(((
      fract((tmpvar_27 + 0.5))
     * 2.0) - 1.0));
    vPos_25 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_17 = tmpvar_2;
    FinalPosition_20 = vPos_25;
  };
  if ((tmpvar_22 >= 3.0)) {
    highp vec3 vPos_29;
    vPos_29 = FinalPosition_20;
    if ((tmpvar_22 == 5.0)) {
      highp vec3 vPos_30;
      vPos_30 = FinalPosition_20;
      highp float fAdherenceScale_31;
      highp vec3 tmpvar_32;
      tmpvar_32 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_33;
      tmpvar_33 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_34;
      highp float fOscillation_35;
      fOscillation_35 = 1.0;
      highp float fAmount_36;
      highp float fTarget_37;
      highp vec4 tmpvar_38;
      tmpvar_38.x = (tmpvar_33 + _glesMultiTexCoord0.w);
      tmpvar_38.y = ((tmpvar_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_38.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_33 + _glesMultiTexCoord0.w));
      tmpvar_38.w = ((tmpvar_33 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      vOscillations_34 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      highp float tmpvar_40;
      tmpvar_40 = (vOscillations_34.y * vOscillations_34.z);
      fTarget_37 = 1.0;
      fAmount_36 = tmpvar_40;
      if ((tmpvar_40 < 0.0)) {
        fTarget_37 = -1.0;
        fAmount_36 = -(tmpvar_40);
      };
      fOscillation_35 = (((
        (mix (mix (tmpvar_40, fTarget_37, fAmount_36), fTarget_37, fAmount_36) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_34.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_34.w * _ST_WindBranchWhip.x)));
      vPos_30 = (FinalPosition_20 + ((tmpvar_32 * fOscillation_35) * _ST_WindBranch.y));
      highp vec4 tmpvar_41;
      tmpvar_41.zw = vec2(0.0, 0.0);
      tmpvar_41.x = ((tmpvar_33 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_41.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      fAdherenceScale_31 = (1.0 - ((
        ((tmpvar_42.x * tmpvar_42.y) * tmpvar_42.x)
       * tmpvar_42.y) * _ST_WindTurbulences.x));
      fAdherenceScale_31 = (fAdherenceScale_31 + ((vOscillations_34.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_30 = (vPos_30 + ((
        ((vRotatedBranchAnchor_18 - vPos_30) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_31) * _glesMultiTexCoord0.z));
      vPos_29 = vPos_30;
    } else {
      highp vec3 vPos_44;
      vPos_44 = vPos_29;
      highp vec3 tmpvar_45;
      tmpvar_45 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_46;
      tmpvar_46 = (_ST_WindBranch.x + (cse_13 + cse_14));
      highp vec4 vOscillations_47;
      highp float fAmount_48;
      highp float fTarget_49;
      highp vec4 tmpvar_50;
      tmpvar_50.w = 0.0;
      tmpvar_50.x = (tmpvar_46 + _glesMultiTexCoord0.w);
      tmpvar_50.y = ((tmpvar_46 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_50.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_46 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_51;
      tmpvar_51 = abs(((
        fract((tmpvar_50 + 0.5))
       * 2.0) - 1.0));
      vOscillations_47 = (((
        (tmpvar_51 * tmpvar_51)
       * 
        (3.0 - (2.0 * tmpvar_51))
      ) - 0.5) * 2.0);
      highp float tmpvar_52;
      tmpvar_52 = (vOscillations_47.y * vOscillations_47.z);
      fTarget_49 = 1.0;
      fAmount_48 = tmpvar_52;
      if ((tmpvar_52 < 0.0)) {
        fTarget_49 = -1.0;
        fAmount_48 = -(tmpvar_52);
      };
      vPos_44 = (vPos_29 + ((tmpvar_45 * 
        (((mix (
          mix (tmpvar_52, fTarget_49, fAmount_48)
        , fTarget_49, fAmount_48) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_47.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_29 = vPos_44;
    };
    FinalPosition_20 = vPos_29;
  };
  if ((tmpvar_22 > 0.0)) {
    highp vec3 vPos_53;
    vPos_53 = FinalPosition_20;
    highp float fAdjust_54;
    highp float fLength_55;
    fLength_55 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_56;
    tmpvar_56 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_54 = tmpvar_56;
    if ((tmpvar_56 != 0.0)) {
      fAdjust_54 = pow (tmpvar_56, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_57;
    tmpvar_57.zw = vec2(0.0, 0.0);
    tmpvar_57.x = (cse_13 + _ST_WindGlobal.x);
    tmpvar_57.y = (cse_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_58;
    highp vec4 tmpvar_59;
    tmpvar_59 = abs(((
      fract((tmpvar_57 + 0.5))
     * 2.0) - 1.0));
    tmpvar_58 = (((
      (tmpvar_59 * tmpvar_59)
     * 
      (3.0 - (2.0 * tmpvar_59))
    ) - 0.5) * 2.0);
    vPos_53.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * (
      ((_ST_WindGlobal.y * (tmpvar_58.x + (tmpvar_58.y * tmpvar_58.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_54)));
    vPos_53 = (normalize(vPos_53) * fLength_55);
    FinalPosition_20 = vPos_53;
  };
  tmpvar_16.xyz = FinalPosition_20;
  highp vec4 tmpvar_60;
  tmpvar_60 = (glstate_matrix_mvp * tmpvar_16);
  highp vec4 o_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = (tmpvar_60 * 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63.x = tmpvar_62.x;
  tmpvar_63.y = (tmpvar_62.y * _ProjectionParams.x);
  o_61.xy = (tmpvar_63 + tmpvar_62.w);
  o_61.zw = tmpvar_60.zw;
  highp vec3 tmpvar_64;
  tmpvar_64 = o_61.xyw;
  tmpvar_10 = tmpvar_64;
  highp vec2 tmpvar_65;
  tmpvar_65 = (tmpvar_10.xy * (_ScreenParams.xy * 0.25));
  tmpvar_10.xy = tmpvar_65;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_66;
  tmpvar_66 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_67;
  v_67.x = _World2Object[0].x;
  v_67.y = _World2Object[1].x;
  v_67.z = _World2Object[2].x;
  v_67.w = _World2Object[3].x;
  highp vec4 v_68;
  v_68.x = _World2Object[0].y;
  v_68.y = _World2Object[1].y;
  v_68.z = _World2Object[2].y;
  v_68.w = _World2Object[3].y;
  highp vec4 v_69;
  v_69.x = _World2Object[0].z;
  v_69.y = _World2Object[1].z;
  v_69.z = _World2Object[2].z;
  v_69.w = _World2Object[3].z;
  highp vec3 tmpvar_70;
  tmpvar_70 = normalize(((
    (v_67.xyz * tmpvar_17.x)
   + 
    (v_68.xyz * tmpvar_17.y)
  ) + (v_69.xyz * tmpvar_17.z)));
  worldNormal_5 = tmpvar_70;
  highp mat3 tmpvar_71;
  tmpvar_71[0] = _Object2World[0].xyz;
  tmpvar_71[1] = _Object2World[1].xyz;
  tmpvar_71[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_72;
  tmpvar_72 = normalize((tmpvar_71 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_72;
  lowp vec3 tmpvar_73;
  tmpvar_73 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_74;
  tmpvar_74 = (tmpvar_73 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75.x = worldTangent_4.x;
  tmpvar_75.y = worldBinormal_3.x;
  tmpvar_75.z = worldNormal_5.x;
  tmpvar_75.w = tmpvar_66.x;
  highp vec4 tmpvar_76;
  tmpvar_76.x = worldTangent_4.y;
  tmpvar_76.y = worldBinormal_3.y;
  tmpvar_76.z = worldNormal_5.y;
  tmpvar_76.w = tmpvar_66.y;
  highp vec4 tmpvar_77;
  tmpvar_77.x = worldTangent_4.z;
  tmpvar_77.y = worldBinormal_3.z;
  tmpvar_77.z = worldNormal_5.z;
  tmpvar_77.w = tmpvar_66.z;
  lowp vec4 tmpvar_78;
  tmpvar_78.w = 1.0;
  tmpvar_78.xyz = worldNormal_5;
  mediump vec4 normal_79;
  normal_79 = tmpvar_78;
  mediump vec3 x2_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (normal_79.xyzz * normal_79.yzzx);
  x2_80.x = dot (unity_SHBr, tmpvar_81);
  x2_80.y = dot (unity_SHBg, tmpvar_81);
  x2_80.z = dot (unity_SHBb, tmpvar_81);
  highp vec4 tmpvar_82;
  tmpvar_82 = (unity_World2Shadow[0] * (_Object2World * tmpvar_16));
  tmpvar_7 = tmpvar_82;
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_75;
  xlv_TEXCOORD1 = tmpvar_76;
  xlv_TEXCOORD2 = tmpvar_77;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = (x2_80 + (unity_SHC.xyz * (
    (normal_79.x * normal_79.x)
   - 
    (normal_79.y * normal_79.y)
  )));
  xlv_TEXCOORD7 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
in mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_23;
  mediump float tmpvar_24;
  tmpvar_24 = texture (_ShadowMapTexture, xlv_TEXCOORD7.xyz);
  lowp float tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump float tmpvar_26;
  tmpvar_26 = (_LightShadowData.x + (tmpvar_25 * (1.0 - _LightShadowData.x)));
  shadow_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD0.xyz, tmpvar_22);
  worldN_4.x = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD1.xyz, tmpvar_22);
  worldN_4.y = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD2.xyz, tmpvar_22);
  worldN_4.z = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_30;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_23;
  mediump vec3 normalWorld_31;
  normalWorld_31 = worldN_4;
  mediump vec3 tmpvar_32;
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = normalWorld_31;
  mediump vec3 x1_34;
  x1_34.x = dot (unity_SHAr, tmpvar_33);
  x1_34.y = dot (unity_SHAg, tmpvar_33);
  x1_34.z = dot (unity_SHAb, tmpvar_33);
  tmpvar_32 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_32;
  lowp vec4 c_35;
  lowp vec4 c_36;
  lowp float diff_37;
  mediump float tmpvar_38;
  tmpvar_38 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_37 = tmpvar_38;
  mediump vec3 tmpvar_39;
  tmpvar_39 = ((tmpvar_9 * tmpvar_32) * diff_37);
  c_36.xyz = tmpvar_39;
  c_36.w = tmpvar_10;
  c_35.w = c_36.w;
  mediump vec3 tmpvar_40;
  tmpvar_40 = (c_36.xyz + (tmpvar_9 * (xlv_TEXCOORD6 + x1_34)));
  c_35.xyz = tmpvar_40;
  c_5.xyz = c_35.xyz;
  c_5.w = 1.0;
  _glesFragData[0] = c_5;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  mediump vec3 tmpvar_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = _glesMultiTexCoord0.xy;
  tmpvar_10.xy = tmpvar_12;
  tmpvar_9.w = _Color.w;
  mediump vec3 tmpvar_13;
  tmpvar_13 = (_Color.xyz * _glesColor.x);
  tmpvar_9.xyz = tmpvar_13;
  highp float cse_14;
  cse_14 = _Object2World[3].x;
  highp float cse_15;
  cse_15 = _Object2World[3].y;
  highp float tmpvar_16;
  tmpvar_16 = clamp (((
    fract(((cse_14 + cse_15) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_16;
  highp vec4 tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_17 = tmpvar_1;
  tmpvar_18 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_19;
  highp vec3 vRotatedWindVector_20;
  highp vec3 FinalPosition_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = tmpvar_1.xyz;
  FinalPosition_21 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = (_WindQuality * _WindEnabled);
  if ((tmpvar_23 > 0.0)) {
    highp mat3 tmpvar_24;
    tmpvar_24[0] = _World2Object[0].xyz;
    tmpvar_24[1] = _World2Object[1].xyz;
    tmpvar_24[2] = _World2Object[2].xyz;
    vRotatedWindVector_20 = normalize((tmpvar_24 * _ST_WindVector.xyz));
    highp mat3 tmpvar_25;
    tmpvar_25[0] = _World2Object[0].xyz;
    tmpvar_25[1] = _World2Object[1].xyz;
    tmpvar_25[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_19 = (normalize((tmpvar_25 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_20 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_19 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_23 == 5.0)) {
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    highp float fOffset_27;
    fOffset_27 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_27 = 0.75;
    };
    highp vec4 tmpvar_28;
    tmpvar_28.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_28.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_27);
    highp vec4 tmpvar_29;
    tmpvar_29 = abs(((
      fract((tmpvar_28 + 0.5))
     * 2.0) - 1.0));
    vPos_26 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_18 = tmpvar_2;
    FinalPosition_21 = vPos_26;
  };
  if ((tmpvar_23 >= 3.0)) {
    highp vec3 vPos_30;
    vPos_30 = FinalPosition_21;
    if ((tmpvar_23 == 5.0)) {
      highp vec3 vPos_31;
      vPos_31 = FinalPosition_21;
      highp float fAdherenceScale_32;
      highp vec3 tmpvar_33;
      tmpvar_33 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_34;
      tmpvar_34 = (_ST_WindBranch.x + (cse_14 + cse_15));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.x = (tmpvar_34 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((tmpvar_34 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_34 + _glesMultiTexCoord0.w));
      tmpvar_39.w = ((tmpvar_34 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        (mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_35.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_35.w * _ST_WindBranchWhip.x)));
      vPos_31 = (FinalPosition_21 + ((tmpvar_33 * fOscillation_36) * _ST_WindBranch.y));
      highp vec4 tmpvar_42;
      tmpvar_42.zw = vec2(0.0, 0.0);
      tmpvar_42.x = ((tmpvar_34 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_42.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_43;
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      tmpvar_43 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      fAdherenceScale_32 = (1.0 - ((
        ((tmpvar_43.x * tmpvar_43.y) * tmpvar_43.x)
       * tmpvar_43.y) * _ST_WindTurbulences.x));
      fAdherenceScale_32 = (fAdherenceScale_32 + ((vOscillations_35.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_31 = (vPos_31 + ((
        ((vRotatedBranchAnchor_19 - vPos_31) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_32) * _glesMultiTexCoord0.z));
      vPos_30 = vPos_31;
    } else {
      highp vec3 vPos_45;
      vPos_45 = vPos_30;
      highp vec3 tmpvar_46;
      tmpvar_46 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_47;
      tmpvar_47 = (_ST_WindBranch.x + (cse_14 + cse_15));
      highp vec4 vOscillations_48;
      highp float fAmount_49;
      highp float fTarget_50;
      highp vec4 tmpvar_51;
      tmpvar_51.w = 0.0;
      tmpvar_51.x = (tmpvar_47 + _glesMultiTexCoord0.w);
      tmpvar_51.y = ((tmpvar_47 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_51.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_47 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_52;
      tmpvar_52 = abs(((
        fract((tmpvar_51 + 0.5))
       * 2.0) - 1.0));
      vOscillations_48 = (((
        (tmpvar_52 * tmpvar_52)
       * 
        (3.0 - (2.0 * tmpvar_52))
      ) - 0.5) * 2.0);
      highp float tmpvar_53;
      tmpvar_53 = (vOscillations_48.y * vOscillations_48.z);
      fTarget_50 = 1.0;
      fAmount_49 = tmpvar_53;
      if ((tmpvar_53 < 0.0)) {
        fTarget_50 = -1.0;
        fAmount_49 = -(tmpvar_53);
      };
      vPos_45 = (vPos_30 + ((tmpvar_46 * 
        (((mix (
          mix (tmpvar_53, fTarget_50, fAmount_49)
        , fTarget_50, fAmount_49) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_48.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_30 = vPos_45;
    };
    FinalPosition_21 = vPos_30;
  };
  if ((tmpvar_23 > 0.0)) {
    highp vec3 vPos_54;
    vPos_54 = FinalPosition_21;
    highp float fAdjust_55;
    highp float fLength_56;
    fLength_56 = sqrt(dot (FinalPosition_21, FinalPosition_21));
    highp float tmpvar_57;
    tmpvar_57 = (max ((FinalPosition_21.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_55 = tmpvar_57;
    if ((tmpvar_57 != 0.0)) {
      fAdjust_55 = pow (tmpvar_57, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_58;
    tmpvar_58.zw = vec2(0.0, 0.0);
    tmpvar_58.x = (cse_14 + _ST_WindGlobal.x);
    tmpvar_58.y = (cse_15 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_59;
    highp vec4 tmpvar_60;
    tmpvar_60 = abs(((
      fract((tmpvar_58 + 0.5))
     * 2.0) - 1.0));
    tmpvar_59 = (((
      (tmpvar_60 * tmpvar_60)
     * 
      (3.0 - (2.0 * tmpvar_60))
    ) - 0.5) * 2.0);
    vPos_54.xz = (FinalPosition_21.xz + (vRotatedWindVector_20.xz * (
      ((_ST_WindGlobal.y * (tmpvar_59.x + (tmpvar_59.y * tmpvar_59.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_55)));
    vPos_54 = (normalize(vPos_54) * fLength_56);
    FinalPosition_21 = vPos_54;
  };
  tmpvar_17.xyz = FinalPosition_21;
  highp vec4 tmpvar_61;
  tmpvar_61 = (glstate_matrix_mvp * tmpvar_17);
  highp vec4 o_62;
  highp vec4 tmpvar_63;
  tmpvar_63 = (tmpvar_61 * 0.5);
  highp vec2 tmpvar_64;
  tmpvar_64.x = tmpvar_63.x;
  tmpvar_64.y = (tmpvar_63.y * _ProjectionParams.x);
  o_62.xy = (tmpvar_64 + tmpvar_63.w);
  o_62.zw = tmpvar_61.zw;
  highp vec3 tmpvar_65;
  tmpvar_65 = o_62.xyw;
  tmpvar_11 = tmpvar_65;
  highp vec2 tmpvar_66;
  tmpvar_66 = (tmpvar_11.xy * (_ScreenParams.xy * 0.25));
  tmpvar_11.xy = tmpvar_66;
  tmpvar_6 = tmpvar_9;
  highp vec3 tmpvar_67;
  tmpvar_67 = (_Object2World * tmpvar_17).xyz;
  highp vec4 v_68;
  v_68.x = _World2Object[0].x;
  v_68.y = _World2Object[1].x;
  v_68.z = _World2Object[2].x;
  v_68.w = _World2Object[3].x;
  highp vec4 v_69;
  v_69.x = _World2Object[0].y;
  v_69.y = _World2Object[1].y;
  v_69.z = _World2Object[2].y;
  v_69.w = _World2Object[3].y;
  highp vec4 v_70;
  v_70.x = _World2Object[0].z;
  v_70.y = _World2Object[1].z;
  v_70.z = _World2Object[2].z;
  v_70.w = _World2Object[3].z;
  highp vec3 tmpvar_71;
  tmpvar_71 = normalize(((
    (v_68.xyz * tmpvar_18.x)
   + 
    (v_69.xyz * tmpvar_18.y)
  ) + (v_70.xyz * tmpvar_18.z)));
  worldNormal_5 = tmpvar_71;
  highp mat3 tmpvar_72;
  tmpvar_72[0] = _Object2World[0].xyz;
  tmpvar_72[1] = _Object2World[1].xyz;
  tmpvar_72[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_73;
  tmpvar_73 = normalize((tmpvar_72 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_73;
  lowp vec3 tmpvar_74;
  tmpvar_74 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_75;
  tmpvar_75 = (tmpvar_74 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76.x = worldTangent_4.x;
  tmpvar_76.y = worldBinormal_3.x;
  tmpvar_76.z = worldNormal_5.x;
  tmpvar_76.w = tmpvar_67.x;
  highp vec4 tmpvar_77;
  tmpvar_77.x = worldTangent_4.y;
  tmpvar_77.y = worldBinormal_3.y;
  tmpvar_77.z = worldNormal_5.y;
  tmpvar_77.w = tmpvar_67.y;
  highp vec4 tmpvar_78;
  tmpvar_78.x = worldTangent_4.z;
  tmpvar_78.y = worldBinormal_3.z;
  tmpvar_78.z = worldNormal_5.z;
  tmpvar_78.w = tmpvar_67.z;
  lowp vec4 tmpvar_79;
  tmpvar_79.w = 1.0;
  tmpvar_79.xyz = worldNormal_5;
  mediump vec3 tmpvar_80;
  mediump vec4 normal_81;
  normal_81 = tmpvar_79;
  mediump vec3 x2_82;
  mediump vec4 tmpvar_83;
  tmpvar_83 = (normal_81.xyzz * normal_81.yzzx);
  x2_82.x = dot (unity_SHBr, tmpvar_83);
  x2_82.y = dot (unity_SHBg, tmpvar_83);
  x2_82.z = dot (unity_SHBb, tmpvar_83);
  tmpvar_80 = (x2_82 + (unity_SHC.xyz * (
    (normal_81.x * normal_81.x)
   - 
    (normal_81.y * normal_81.y)
  )));
  highp vec3 lightColor0_84;
  lightColor0_84 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_85;
  lightColor1_85 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_86;
  lightColor2_86 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_87;
  lightColor3_87 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_88;
  lightAttenSq_88 = unity_4LightAtten0;
  highp vec3 normal_89;
  normal_89 = worldNormal_5;
  highp vec4 tmpvar_90;
  tmpvar_90 = (unity_4LightPosX0 - tmpvar_67.x);
  highp vec4 tmpvar_91;
  tmpvar_91 = (unity_4LightPosY0 - tmpvar_67.y);
  highp vec4 tmpvar_92;
  tmpvar_92 = (unity_4LightPosZ0 - tmpvar_67.z);
  highp vec4 tmpvar_93;
  tmpvar_93 = (((tmpvar_90 * tmpvar_90) + (tmpvar_91 * tmpvar_91)) + (tmpvar_92 * tmpvar_92));
  highp vec4 tmpvar_94;
  tmpvar_94 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_90 * normal_89.x) + (tmpvar_91 * normal_89.y)) + (tmpvar_92 * normal_89.z))
   * 
    inversesqrt(tmpvar_93)
  )) * (1.0/((1.0 + 
    (tmpvar_93 * lightAttenSq_88)
  ))));
  highp vec3 tmpvar_95;
  tmpvar_95 = (tmpvar_80 + ((
    ((lightColor0_84 * tmpvar_94.x) + (lightColor1_85 * tmpvar_94.y))
   + 
    (lightColor2_86 * tmpvar_94.z)
  ) + (lightColor3_87 * tmpvar_94.w)));
  tmpvar_7 = tmpvar_95;
  highp vec4 tmpvar_96;
  tmpvar_96 = (unity_World2Shadow[0] * (_Object2World * tmpvar_17));
  tmpvar_8 = tmpvar_96;
  gl_Position = (glstate_matrix_mvp * tmpvar_17);
  xlv_TEXCOORD0 = tmpvar_76;
  xlv_TEXCOORD1 = tmpvar_77;
  xlv_TEXCOORD2 = tmpvar_78;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_23;
  lowp float tmpvar_24;
  tmpvar_24 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD7.xyz);
  mediump float tmpvar_25;
  tmpvar_25 = (_LightShadowData.x + (tmpvar_24 * (1.0 - _LightShadowData.x)));
  shadow_23 = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD0.xyz, tmpvar_22);
  worldN_4.x = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD1.xyz, tmpvar_22);
  worldN_4.y = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD2.xyz, tmpvar_22);
  worldN_4.z = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_29;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_23;
  mediump vec3 normalWorld_30;
  normalWorld_30 = worldN_4;
  mediump vec3 tmpvar_31;
  mediump vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = normalWorld_30;
  mediump vec3 x1_33;
  x1_33.x = dot (unity_SHAr, tmpvar_32);
  x1_33.y = dot (unity_SHAg, tmpvar_32);
  x1_33.z = dot (unity_SHAb, tmpvar_32);
  tmpvar_31 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_31;
  lowp vec4 c_34;
  lowp vec4 c_35;
  lowp float diff_36;
  mediump float tmpvar_37;
  tmpvar_37 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_36 = tmpvar_37;
  mediump vec3 tmpvar_38;
  tmpvar_38 = ((tmpvar_9 * tmpvar_31) * diff_36);
  c_35.xyz = tmpvar_38;
  c_35.w = tmpvar_10;
  c_34.w = c_35.w;
  mediump vec3 tmpvar_39;
  tmpvar_39 = (c_35.xyz + (tmpvar_9 * (xlv_TEXCOORD6 + x1_33)));
  c_34.xyz = tmpvar_39;
  c_5.xyz = c_34.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
in vec4 _glesTANGENT;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
out mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  mediump vec3 tmpvar_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = _glesMultiTexCoord0.xy;
  tmpvar_10.xy = tmpvar_12;
  tmpvar_9.w = _Color.w;
  mediump vec3 tmpvar_13;
  tmpvar_13 = (_Color.xyz * _glesColor.x);
  tmpvar_9.xyz = tmpvar_13;
  highp float cse_14;
  cse_14 = _Object2World[3].x;
  highp float cse_15;
  cse_15 = _Object2World[3].y;
  highp float tmpvar_16;
  tmpvar_16 = clamp (((
    fract(((cse_14 + cse_15) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_16;
  highp vec4 tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_17 = tmpvar_1;
  tmpvar_18 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_19;
  highp vec3 vRotatedWindVector_20;
  highp vec3 FinalPosition_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = tmpvar_1.xyz;
  FinalPosition_21 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = (_WindQuality * _WindEnabled);
  if ((tmpvar_23 > 0.0)) {
    highp mat3 tmpvar_24;
    tmpvar_24[0] = _World2Object[0].xyz;
    tmpvar_24[1] = _World2Object[1].xyz;
    tmpvar_24[2] = _World2Object[2].xyz;
    vRotatedWindVector_20 = normalize((tmpvar_24 * _ST_WindVector.xyz));
    highp mat3 tmpvar_25;
    tmpvar_25[0] = _World2Object[0].xyz;
    tmpvar_25[1] = _World2Object[1].xyz;
    tmpvar_25[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_19 = (normalize((tmpvar_25 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_20 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_19 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_23 == 5.0)) {
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    highp float fOffset_27;
    fOffset_27 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_27 = 0.75;
    };
    highp vec4 tmpvar_28;
    tmpvar_28.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_28.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_27);
    highp vec4 tmpvar_29;
    tmpvar_29 = abs(((
      fract((tmpvar_28 + 0.5))
     * 2.0) - 1.0));
    vPos_26 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_18 = tmpvar_2;
    FinalPosition_21 = vPos_26;
  };
  if ((tmpvar_23 >= 3.0)) {
    highp vec3 vPos_30;
    vPos_30 = FinalPosition_21;
    if ((tmpvar_23 == 5.0)) {
      highp vec3 vPos_31;
      vPos_31 = FinalPosition_21;
      highp float fAdherenceScale_32;
      highp vec3 tmpvar_33;
      tmpvar_33 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_34;
      tmpvar_34 = (_ST_WindBranch.x + (cse_14 + cse_15));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.x = (tmpvar_34 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((tmpvar_34 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_34 + _glesMultiTexCoord0.w));
      tmpvar_39.w = ((tmpvar_34 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        (mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_35.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_35.w * _ST_WindBranchWhip.x)));
      vPos_31 = (FinalPosition_21 + ((tmpvar_33 * fOscillation_36) * _ST_WindBranch.y));
      highp vec4 tmpvar_42;
      tmpvar_42.zw = vec2(0.0, 0.0);
      tmpvar_42.x = ((tmpvar_34 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_42.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_43;
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      tmpvar_43 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      fAdherenceScale_32 = (1.0 - ((
        ((tmpvar_43.x * tmpvar_43.y) * tmpvar_43.x)
       * tmpvar_43.y) * _ST_WindTurbulences.x));
      fAdherenceScale_32 = (fAdherenceScale_32 + ((vOscillations_35.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_31 = (vPos_31 + ((
        ((vRotatedBranchAnchor_19 - vPos_31) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_32) * _glesMultiTexCoord0.z));
      vPos_30 = vPos_31;
    } else {
      highp vec3 vPos_45;
      vPos_45 = vPos_30;
      highp vec3 tmpvar_46;
      tmpvar_46 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_47;
      tmpvar_47 = (_ST_WindBranch.x + (cse_14 + cse_15));
      highp vec4 vOscillations_48;
      highp float fAmount_49;
      highp float fTarget_50;
      highp vec4 tmpvar_51;
      tmpvar_51.w = 0.0;
      tmpvar_51.x = (tmpvar_47 + _glesMultiTexCoord0.w);
      tmpvar_51.y = ((tmpvar_47 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_51.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_47 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_52;
      tmpvar_52 = abs(((
        fract((tmpvar_51 + 0.5))
       * 2.0) - 1.0));
      vOscillations_48 = (((
        (tmpvar_52 * tmpvar_52)
       * 
        (3.0 - (2.0 * tmpvar_52))
      ) - 0.5) * 2.0);
      highp float tmpvar_53;
      tmpvar_53 = (vOscillations_48.y * vOscillations_48.z);
      fTarget_50 = 1.0;
      fAmount_49 = tmpvar_53;
      if ((tmpvar_53 < 0.0)) {
        fTarget_50 = -1.0;
        fAmount_49 = -(tmpvar_53);
      };
      vPos_45 = (vPos_30 + ((tmpvar_46 * 
        (((mix (
          mix (tmpvar_53, fTarget_50, fAmount_49)
        , fTarget_50, fAmount_49) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_48.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_30 = vPos_45;
    };
    FinalPosition_21 = vPos_30;
  };
  if ((tmpvar_23 > 0.0)) {
    highp vec3 vPos_54;
    vPos_54 = FinalPosition_21;
    highp float fAdjust_55;
    highp float fLength_56;
    fLength_56 = sqrt(dot (FinalPosition_21, FinalPosition_21));
    highp float tmpvar_57;
    tmpvar_57 = (max ((FinalPosition_21.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_55 = tmpvar_57;
    if ((tmpvar_57 != 0.0)) {
      fAdjust_55 = pow (tmpvar_57, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_58;
    tmpvar_58.zw = vec2(0.0, 0.0);
    tmpvar_58.x = (cse_14 + _ST_WindGlobal.x);
    tmpvar_58.y = (cse_15 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_59;
    highp vec4 tmpvar_60;
    tmpvar_60 = abs(((
      fract((tmpvar_58 + 0.5))
     * 2.0) - 1.0));
    tmpvar_59 = (((
      (tmpvar_60 * tmpvar_60)
     * 
      (3.0 - (2.0 * tmpvar_60))
    ) - 0.5) * 2.0);
    vPos_54.xz = (FinalPosition_21.xz + (vRotatedWindVector_20.xz * (
      ((_ST_WindGlobal.y * (tmpvar_59.x + (tmpvar_59.y * tmpvar_59.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_55)));
    vPos_54 = (normalize(vPos_54) * fLength_56);
    FinalPosition_21 = vPos_54;
  };
  tmpvar_17.xyz = FinalPosition_21;
  highp vec4 tmpvar_61;
  tmpvar_61 = (glstate_matrix_mvp * tmpvar_17);
  highp vec4 o_62;
  highp vec4 tmpvar_63;
  tmpvar_63 = (tmpvar_61 * 0.5);
  highp vec2 tmpvar_64;
  tmpvar_64.x = tmpvar_63.x;
  tmpvar_64.y = (tmpvar_63.y * _ProjectionParams.x);
  o_62.xy = (tmpvar_64 + tmpvar_63.w);
  o_62.zw = tmpvar_61.zw;
  highp vec3 tmpvar_65;
  tmpvar_65 = o_62.xyw;
  tmpvar_11 = tmpvar_65;
  highp vec2 tmpvar_66;
  tmpvar_66 = (tmpvar_11.xy * (_ScreenParams.xy * 0.25));
  tmpvar_11.xy = tmpvar_66;
  tmpvar_6 = tmpvar_9;
  highp vec3 tmpvar_67;
  tmpvar_67 = (_Object2World * tmpvar_17).xyz;
  highp vec4 v_68;
  v_68.x = _World2Object[0].x;
  v_68.y = _World2Object[1].x;
  v_68.z = _World2Object[2].x;
  v_68.w = _World2Object[3].x;
  highp vec4 v_69;
  v_69.x = _World2Object[0].y;
  v_69.y = _World2Object[1].y;
  v_69.z = _World2Object[2].y;
  v_69.w = _World2Object[3].y;
  highp vec4 v_70;
  v_70.x = _World2Object[0].z;
  v_70.y = _World2Object[1].z;
  v_70.z = _World2Object[2].z;
  v_70.w = _World2Object[3].z;
  highp vec3 tmpvar_71;
  tmpvar_71 = normalize(((
    (v_68.xyz * tmpvar_18.x)
   + 
    (v_69.xyz * tmpvar_18.y)
  ) + (v_70.xyz * tmpvar_18.z)));
  worldNormal_5 = tmpvar_71;
  highp mat3 tmpvar_72;
  tmpvar_72[0] = _Object2World[0].xyz;
  tmpvar_72[1] = _Object2World[1].xyz;
  tmpvar_72[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_73;
  tmpvar_73 = normalize((tmpvar_72 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_73;
  lowp vec3 tmpvar_74;
  tmpvar_74 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_75;
  tmpvar_75 = (tmpvar_74 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76.x = worldTangent_4.x;
  tmpvar_76.y = worldBinormal_3.x;
  tmpvar_76.z = worldNormal_5.x;
  tmpvar_76.w = tmpvar_67.x;
  highp vec4 tmpvar_77;
  tmpvar_77.x = worldTangent_4.y;
  tmpvar_77.y = worldBinormal_3.y;
  tmpvar_77.z = worldNormal_5.y;
  tmpvar_77.w = tmpvar_67.y;
  highp vec4 tmpvar_78;
  tmpvar_78.x = worldTangent_4.z;
  tmpvar_78.y = worldBinormal_3.z;
  tmpvar_78.z = worldNormal_5.z;
  tmpvar_78.w = tmpvar_67.z;
  lowp vec4 tmpvar_79;
  tmpvar_79.w = 1.0;
  tmpvar_79.xyz = worldNormal_5;
  mediump vec3 tmpvar_80;
  mediump vec4 normal_81;
  normal_81 = tmpvar_79;
  mediump vec3 x2_82;
  mediump vec4 tmpvar_83;
  tmpvar_83 = (normal_81.xyzz * normal_81.yzzx);
  x2_82.x = dot (unity_SHBr, tmpvar_83);
  x2_82.y = dot (unity_SHBg, tmpvar_83);
  x2_82.z = dot (unity_SHBb, tmpvar_83);
  tmpvar_80 = (x2_82 + (unity_SHC.xyz * (
    (normal_81.x * normal_81.x)
   - 
    (normal_81.y * normal_81.y)
  )));
  highp vec3 lightColor0_84;
  lightColor0_84 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_85;
  lightColor1_85 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_86;
  lightColor2_86 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_87;
  lightColor3_87 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_88;
  lightAttenSq_88 = unity_4LightAtten0;
  highp vec3 normal_89;
  normal_89 = worldNormal_5;
  highp vec4 tmpvar_90;
  tmpvar_90 = (unity_4LightPosX0 - tmpvar_67.x);
  highp vec4 tmpvar_91;
  tmpvar_91 = (unity_4LightPosY0 - tmpvar_67.y);
  highp vec4 tmpvar_92;
  tmpvar_92 = (unity_4LightPosZ0 - tmpvar_67.z);
  highp vec4 tmpvar_93;
  tmpvar_93 = (((tmpvar_90 * tmpvar_90) + (tmpvar_91 * tmpvar_91)) + (tmpvar_92 * tmpvar_92));
  highp vec4 tmpvar_94;
  tmpvar_94 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_90 * normal_89.x) + (tmpvar_91 * normal_89.y)) + (tmpvar_92 * normal_89.z))
   * 
    inversesqrt(tmpvar_93)
  )) * (1.0/((1.0 + 
    (tmpvar_93 * lightAttenSq_88)
  ))));
  highp vec3 tmpvar_95;
  tmpvar_95 = (tmpvar_80 + ((
    ((lightColor0_84 * tmpvar_94.x) + (lightColor1_85 * tmpvar_94.y))
   + 
    (lightColor2_86 * tmpvar_94.z)
  ) + (lightColor3_87 * tmpvar_94.w)));
  tmpvar_7 = tmpvar_95;
  highp vec4 tmpvar_96;
  tmpvar_96 = (unity_World2Shadow[0] * (_Object2World * tmpvar_17));
  tmpvar_8 = tmpvar_96;
  gl_Position = (glstate_matrix_mvp * tmpvar_17);
  xlv_TEXCOORD0 = tmpvar_76;
  xlv_TEXCOORD1 = tmpvar_77;
  xlv_TEXCOORD2 = tmpvar_78;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD6;
in mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  mediump float tmpvar_14;
  tmpvar_14 = fract(tmpvar_13.y);
  highp float tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * 0.0625) + unity_LODFade.y);
  projUV_12.y = tmpvar_15;
  lowp float x_16;
  x_16 = (texture (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_18;
  lowp float x_19;
  x_19 = (tmpvar_10 - _Cutoff);
  if ((x_19 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_11.xyz = clamp ((tmpvar_20 * (
    ((max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_23;
  mediump float tmpvar_24;
  tmpvar_24 = texture (_ShadowMapTexture, xlv_TEXCOORD7.xyz);
  lowp float tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump float tmpvar_26;
  tmpvar_26 = (_LightShadowData.x + (tmpvar_25 * (1.0 - _LightShadowData.x)));
  shadow_23 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD0.xyz, tmpvar_22);
  worldN_4.x = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD1.xyz, tmpvar_22);
  worldN_4.y = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD2.xyz, tmpvar_22);
  worldN_4.z = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_30;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_23;
  mediump vec3 normalWorld_31;
  normalWorld_31 = worldN_4;
  mediump vec3 tmpvar_32;
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = normalWorld_31;
  mediump vec3 x1_34;
  x1_34.x = dot (unity_SHAr, tmpvar_33);
  x1_34.y = dot (unity_SHAg, tmpvar_33);
  x1_34.z = dot (unity_SHAb, tmpvar_33);
  tmpvar_32 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_32;
  lowp vec4 c_35;
  lowp vec4 c_36;
  lowp float diff_37;
  mediump float tmpvar_38;
  tmpvar_38 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_37 = tmpvar_38;
  mediump vec3 tmpvar_39;
  tmpvar_39 = ((tmpvar_9 * tmpvar_32) * diff_37);
  c_36.xyz = tmpvar_39;
  c_36.w = tmpvar_10;
  c_35.w = c_36.w;
  mediump vec3 tmpvar_40;
  tmpvar_40 = (c_36.xyz + (tmpvar_9 * (xlv_TEXCOORD6 + x1_34)));
  c_35.xyz = tmpvar_40;
  c_5.xyz = c_35.xyz;
  c_5.w = 1.0;
  _glesFragData[0] = c_5;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_15 = tmpvar_20;
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_17 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (tmpvar_20 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))