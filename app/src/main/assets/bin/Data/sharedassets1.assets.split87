COORD5;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 worldN_2;
  lowp float tmpvar_3;
  mediump vec4 diffuseColor_4;
  mediump vec2 projUV_5;
  mediump vec2 tmpvar_6;
  tmpvar_6 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_5.x = tmpvar_6.x;
  mediump float tmpvar_7;
  tmpvar_7 = fract(tmpvar_6.y);
  highp float tmpvar_8;
  tmpvar_8 = ((tmpvar_7 * 0.0625) + unity_LODFade.y);
  projUV_5.y = tmpvar_8;
  lowp float x_9;
  x_9 = (texture2D (_DitherMaskLOD2D, projUV_5).w - 0.5);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_4 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = (diffuseColor_4.w * _Color.w);
  tmpvar_3 = tmpvar_11;
  lowp float x_12;
  x_12 = (tmpvar_3 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec3 tmpvar_13;
  tmpvar_13 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD0.xyz, tmpvar_13);
  worldN_2.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD1.xyz, tmpvar_13);
  worldN_2.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD2.xyz, tmpvar_13);
  worldN_2.z = tmpvar_16;
  res_1.xyz = ((worldN_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_18.z / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.570796 + (abs(tmpvar_19) * (-0.2146018 + (
        abs(tmpvar_19)
       * 
        (0.08656672 + (abs(tmpvar_19) * -0.03102955))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  highp vec3 tmpvar_26;
  tmpvar_26 = (vec3(tmpvar_19) + tmpvar_25);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_9.xz = tmpvar_28.xz;
  billboardPos_9.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_9;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_33.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_34.x + (tmpvar_34.y * tmpvar_34.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_30)));
    vPos_29 = (normalize(vPos_29) * fLength_31);
    billboardPos_9 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    ((tmpvar_26 + tmpvar_27.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_11.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_40;
  } else {
    highp vec2 tmpvar_41;
    tmpvar_41 = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_41;
  };
  highp vec4 tmpvar_42;
  tmpvar_42 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_42 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = tmpvar_42.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  tmpvar_8 = tmpvar_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_47;
  tmpvar_5 = _Color;
  highp vec3 tmpvar_48;
  tmpvar_48 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_49;
  v_49.x = _World2Object[0].x;
  v_49.y = _World2Object[1].x;
  v_49.z = _World2Object[2].x;
  v_49.w = _World2Object[3].x;
  highp vec4 v_50;
  v_50.x = _World2Object[0].z;
  v_50.y = _World2Object[1].z;
  v_50.z = _World2Object[2].z;
  v_50.w = _World2Object[3].z;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize(((v_49.xyz * tmpvar_17.z) + (v_50.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_51;
  highp mat3 tmpvar_52;
  tmpvar_52[0] = _Object2World[0].xyz;
  tmpvar_52[1] = _Object2World[1].xyz;
  tmpvar_52[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize((tmpvar_52 * tmpvar_17));
  worldTangent_3 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_55;
  tmpvar_55 = -(tmpvar_54);
  worldBinormal_2 = tmpvar_55;
  highp vec4 tmpvar_56;
  tmpvar_56.x = worldTangent_3.x;
  tmpvar_56.y = worldBinormal_2.x;
  tmpvar_56.z = worldNormal_4.x;
  tmpvar_56.w = tmpvar_48.x;
  highp vec4 tmpvar_57;
  tmpvar_57.x = worldTangent_3.y;
  tmpvar_57.y = worldBinormal_2.y;
  tmpvar_57.z = worldNormal_4.y;
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58.x = worldTangent_3.z;
  tmpvar_58.y = worldBinormal_2.z;
  tmpvar_58.z = worldNormal_4.z;
  tmpvar_58.w = tmpvar_48.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_56;
  xlv_TEXCOORD1 = tmpvar_57;
  xlv_TEXCOORD2 = tmpvar_58;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 worldN_2;
  lowp float tmpvar_3;
  mediump vec4 diffuseColor_4;
  mediump vec2 projUV_5;
  mediump vec2 tmpvar_6;
  tmpvar_6 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_5.x = tmpvar_6.x;
  mediump float tmpvar_7;
  tmpvar_7 = fract(tmpvar_6.y);
  highp float tmpvar_8;
  tmpvar_8 = ((tmpvar_7 * 0.0625) + unity_LODFade.y);
  projUV_5.y = tmpvar_8;
  lowp float x_9;
  x_9 = (texture (_DitherMaskLOD2D, projUV_5).w - 0.5);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_4 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = (diffuseColor_4.w * _Color.w);
  tmpvar_3 = tmpvar_11;
  lowp float x_12;
  x_12 = (tmpvar_3 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec3 tmpvar_13;
  tmpvar_13 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD0.xyz, tmpvar_13);
  worldN_2.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD1.xyz, tmpvar_13);
  worldN_2.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD2.xyz, tmpvar_13);
  worldN_2.z = tmpvar_16;
  res_1.xyz = ((worldN_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  _glesFragData[0] = res_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_18.z / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.570796 + (abs(tmpvar_19) * (-0.2146018 + (
        abs(tmpvar_19)
       * 
        (0.08656672 + (abs(tmpvar_19) * -0.03102955))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  highp vec3 tmpvar_26;
  tmpvar_26 = (vec3(tmpvar_19) + tmpvar_25);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_9.xz = tmpvar_28.xz;
  billboardPos_9.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_9;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_33.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_34.x + (tmpvar_34.y * tmpvar_34.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_30)));
    vPos_29 = (normalize(vPos_29) * fLength_31);
    billboardPos_9 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    ((tmpvar_26 + tmpvar_27.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_11.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_40;
  } else {
    highp vec2 tmpvar_41;
    tmpvar_41 = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_41;
  };
  highp float tmpvar_42;
  tmpvar_42 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_44;
  highp vec4 tmpvar_45;
  tmpvar_45 = (tmpvar_43 * 0.5);
  highp vec2 tmpvar_46;
  tmpvar_46.x = tmpvar_45.x;
  tmpvar_46.y = (tmpvar_45.y * _ProjectionParams.x);
  o_44.xy = (tmpvar_46 + tmpvar_45.w);
  o_44.zw = tmpvar_43.zw;
  highp vec3 tmpvar_47;
  tmpvar_47 = o_44.xyw;
  tmpvar_8 = tmpvar_47;
  highp vec2 tmpvar_48;
  tmpvar_48 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_48;
  tmpvar_5 = _Color;
  highp vec3 tmpvar_49;
  tmpvar_49 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_50;
  v_50.x = _World2Object[0].x;
  v_50.y = _World2Object[1].x;
  v_50.z = _World2Object[2].x;
  v_50.w = _World2Object[3].x;
  highp vec4 v_51;
  v_51.x = _World2Object[0].z;
  v_51.y = _World2Object[1].z;
  v_51.z = _World2Object[2].z;
  v_51.w = _World2Object[3].z;
  highp vec3 tmpvar_52;
  tmpvar_52 = normalize(((v_50.xyz * tmpvar_17.z) + (v_51.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_52;
  highp mat3 tmpvar_53;
  tmpvar_53[0] = _Object2World[0].xyz;
  tmpvar_53[1] = _Object2World[1].xyz;
  tmpvar_53[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize((tmpvar_53 * tmpvar_17));
  worldTangent_3 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_56;
  tmpvar_56 = -(tmpvar_55);
  worldBinormal_2 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57.x = worldTangent_3.x;
  tmpvar_57.y = worldBinormal_2.x;
  tmpvar_57.z = worldNormal_4.x;
  tmpvar_57.w = tmpvar_49.x;
  highp vec4 tmpvar_58;
  tmpvar_58.x = worldTangent_3.y;
  tmpvar_58.y = worldBinormal_2.y;
  tmpvar_58.z = worldNormal_4.y;
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59.x = worldTangent_3.z;
  tmpvar_59.y = worldBinormal_2.z;
  tmpvar_59.z = worldNormal_4.z;
  tmpvar_59.w = tmpvar_49.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_57;
  xlv_TEXCOORD1 = tmpvar_58;
  xlv_TEXCOORD2 = tmpvar_59;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 worldN_2;
  lowp float tmpvar_3;
  mediump vec4 diffuseColor_4;
  mediump vec2 projUV_5;
  mediump vec2 tmpvar_6;
  tmpvar_6 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_5.x = tmpvar_6.x;
  mediump float tmpvar_7;
  tmpvar_7 = fract(tmpvar_6.y);
  highp float tmpvar_8;
  tmpvar_8 = ((tmpvar_7 * 0.0625) + unity_LODFade.y);
  projUV_5.y = tmpvar_8;
  lowp float x_9;
  x_9 = (texture2D (_DitherMaskLOD2D, projUV_5).w - 0.5);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_4 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = (diffuseColor_4.w * _Color.w);
  tmpvar_3 = tmpvar_11;
  lowp float x_12;
  x_12 = (tmpvar_3 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_4.xyz = clamp ((tmpvar_13 * (
    ((max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD0.xyz, tmpvar_14);
  worldN_2.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD1.xyz, tmpvar_14);
  worldN_2.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD2.xyz, tmpvar_14);
  worldN_2.z = tmpvar_17;
  res_1.xyz = ((worldN_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_18.z / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.570796 + (abs(tmpvar_19) * (-0.2146018 + (
        abs(tmpvar_19)
       * 
        (0.08656672 + (abs(tmpvar_19) * -0.03102955))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  highp vec3 tmpvar_26;
  tmpvar_26 = (vec3(tmpvar_19) + tmpvar_25);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_9.xz = tmpvar_28.xz;
  billboardPos_9.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_9;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_33.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_34.x + (tmpvar_34.y * tmpvar_34.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_30)));
    vPos_29 = (normalize(vPos_29) * fLength_31);
    billboardPos_9 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    ((tmpvar_26 + tmpvar_27.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_11.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_40;
  } else {
    highp vec2 tmpvar_41;
    tmpvar_41 = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_41;
  };
  highp float tmpvar_42;
  tmpvar_42 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_44;
  highp vec4 tmpvar_45;
  tmpvar_45 = (tmpvar_43 * 0.5);
  highp vec2 tmpvar_46;
  tmpvar_46.x = tmpvar_45.x;
  tmpvar_46.y = (tmpvar_45.y * _ProjectionParams.x);
  o_44.xy = (tmpvar_46 + tmpvar_45.w);
  o_44.zw = tmpvar_43.zw;
  highp vec3 tmpvar_47;
  tmpvar_47 = o_44.xyw;
  tmpvar_8 = tmpvar_47;
  highp vec2 tmpvar_48;
  tmpvar_48 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_48;
  tmpvar_5 = _Color;
  highp vec3 tmpvar_49;
  tmpvar_49 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_50;
  v_50.x = _World2Object[0].x;
  v_50.y = _World2Object[1].x;
  v_50.z = _World2Object[2].x;
  v_50.w = _World2Object[3].x;
  highp vec4 v_51;
  v_51.x = _World2Object[0].z;
  v_51.y = _World2Object[1].z;
  v_51.z = _World2Object[2].z;
  v_51.w = _World2Object[3].z;
  highp vec3 tmpvar_52;
  tmpvar_52 = normalize(((v_50.xyz * tmpvar_17.z) + (v_51.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_52;
  highp mat3 tmpvar_53;
  tmpvar_53[0] = _Object2World[0].xyz;
  tmpvar_53[1] = _Object2World[1].xyz;
  tmpvar_53[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize((tmpvar_53 * tmpvar_17));
  worldTangent_3 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_56;
  tmpvar_56 = -(tmpvar_55);
  worldBinormal_2 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57.x = worldTangent_3.x;
  tmpvar_57.y = worldBinormal_2.x;
  tmpvar_57.z = worldNormal_4.x;
  tmpvar_57.w = tmpvar_49.x;
  highp vec4 tmpvar_58;
  tmpvar_58.x = worldTangent_3.y;
  tmpvar_58.y = worldBinormal_2.y;
  tmpvar_58.z = worldNormal_4.y;
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59.x = worldTangent_3.z;
  tmpvar_59.y = worldBinormal_2.z;
  tmpvar_59.z = worldNormal_4.z;
  tmpvar_59.w = tmpvar_49.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_57;
  xlv_TEXCOORD1 = tmpvar_58;
  xlv_TEXCOORD2 = tmpvar_59;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 worldN_2;
  lowp float tmpvar_3;
  mediump vec4 diffuseColor_4;
  mediump vec2 projUV_5;
  mediump vec2 tmpvar_6;
  tmpvar_6 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_5.x = tmpvar_6.x;
  mediump float tmpvar_7;
  tmpvar_7 = fract(tmpvar_6.y);
  highp float tmpvar_8;
  tmpvar_8 = ((tmpvar_7 * 0.0625) + unity_LODFade.y);
  projUV_5.y = tmpvar_8;
  lowp float x_9;
  x_9 = (texture (_DitherMaskLOD2D, projUV_5).w - 0.5);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_4 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = (diffuseColor_4.w * _Color.w);
  tmpvar_3 = tmpvar_11;
  lowp float x_12;
  x_12 = (tmpvar_3 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_4.xyz = clamp ((tmpvar_13 * (
    ((max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD0.xyz, tmpvar_14);
  worldN_2.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD1.xyz, tmpvar_14);
  worldN_2.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD2.xyz, tmpvar_14);
  worldN_2.z = tmpvar_17;
  res_1.xyz = ((worldN_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  _glesFragData[0] = res_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
"!!GLES"
}
SubProgram "gles3 " {
"!!GLES3"
}
SubProgram "gles " {
Keywords { "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
}
 }
 Pass {
  Name "PREPASS"
  Tags { "LIGHTMODE"="PrePassFinal" "QUEUE"="AlphaTest" "IGNOREPROJECTOR"="true" "DisableBatching"="LodFading" "RenderType"="TransparentCutout" }
  ZWrite Off
  Cull Off
  GpuProgramID 258032
Program "vp" {
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec4 tmpvar_13;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_13 = _InstanceData;
  } else {
    tmpvar_13 = tmpvar_1;
  };
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * tmpvar_13.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_14.xz;
  billboardPos_7.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * tmpvar_13.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_15;
    vPos_15 = billboardPos_7;
    highp float fAdjust_16;
    highp float fLength_17;
    fLength_17 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_18;
    tmpvar_18 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_16 = tmpvar_18;
    if ((tmpvar_18 != 0.0)) {
      fAdjust_16 = pow (tmpvar_18, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_19;
    tmpvar_19.zw = vec2(0.0, 0.0);
    tmpvar_19.x = (tmpvar_12.x + tmpvar_13.w);
    tmpvar_19.y = (tmpvar_12.y + (tmpvar_13.w * 0.8));
    highp vec4 tmpvar_20;
    highp vec4 tmpvar_21;
    tmpvar_21 = abs(((
      fract((tmpvar_19 + 0.5))
     * 2.0) - 1.0));
    tmpvar_20 = (((
      (tmpvar_21 * tmpvar_21)
     * 
      (3.0 - (2.0 * tmpvar_21))
    ) - 0.5) * 2.0);
    vPos_15.xz = (tmpvar_14.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_20.x + (tmpvar_20.y * tmpvar_20.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_16)));
    vPos_15 = (normalize(vPos_15) * fLength_17);
    billboardPos_7 = vPos_15;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp float tmpvar_22;
  tmpvar_22 = (floor((
    ((_CameraXZAngle + tmpvar_13.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.x);
  highp float tmpvar_23;
  tmpvar_23 = (fract(abs(tmpvar_22)) * tmpvar_9.x);
  highp float tmpvar_24;
  if ((tmpvar_22 >= 0.0)) {
    tmpvar_24 = tmpvar_23;
  } else {
    tmpvar_24 = -(tmpvar_23);
  };
  highp vec4 tmpvar_25;
  tmpvar_25 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_24))];
  if ((tmpvar_25.w < 0.0)) {
    highp vec2 tmpvar_26;
    tmpvar_26 = (tmpvar_25.xy - (tmpvar_25.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_26;
  } else {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_25.xy + (tmpvar_25.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_27;
  };
  tmpvar_2 = _Color;
  highp vec4 tmpvar_28;
  tmpvar_28 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_28 * 0.5);
  highp vec2 tmpvar_31;
  tmpvar_31.x = tmpvar_30.x;
  tmpvar_31.y = (tmpvar_30.y * _ProjectionParams.x);
  o_29.xy = (tmpvar_31 + tmpvar_30.w);
  o_29.zw = tmpvar_28.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_32;
  v_32.x = _World2Object[0].x;
  v_32.y = _World2Object[1].x;
  v_32.z = _World2Object[2].x;
  v_32.w = _World2Object[3].x;
  highp vec4 v_33;
  v_33.x = _World2Object[0].y;
  v_33.y = _World2Object[1].y;
  v_33.z = _World2Object[2].y;
  v_33.w = _World2Object[3].y;
  highp vec4 v_34;
  v_34.x = _World2Object[0].z;
  v_34.y = _World2Object[1].z;
  v_34.z = _World2Object[2].z;
  v_34.w = _World2Object[3].z;
  highp vec4 tmpvar_35;
  tmpvar_35.w = 1.0;
  tmpvar_35.xyz = normalize(((
    (v_32.xyz * _BillboardNormal.x)
   + 
    (v_33.xyz * _BillboardNormal.y)
  ) + (v_34.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_36;
  mediump vec4 normal_37;
  normal_37 = tmpvar_35;
  mediump vec3 x2_38;
  mediump vec3 x1_39;
  x1_39.x = dot (unity_SHAr, normal_37);
  x1_39.y = dot (unity_SHAg, normal_37);
  x1_39.z = dot (unity_SHAb, normal_37);
  mediump vec4 tmpvar_40;
  tmpvar_40 = (normal_37.xyzz * normal_37.yzzx);
  x2_38.x = dot (unity_SHBr, tmpvar_40);
  x2_38.y = dot (unity_SHBg, tmpvar_40);
  x2_38.z = dot (unity_SHBb, tmpvar_40);
  tmpvar_36 = ((x2_38 + (unity_SHC.xyz * 
    ((normal_37.x * normal_37.x) - (normal_37.y * normal_37.y))
  )) + x1_39);
  tmpvar_4 = tmpvar_36;
  gl_Position = tmpvar_28;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_29;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_9;
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_13.w;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13.xyz + xlv_TEXCOORD5);
  light_3.xyz = tmpvar_14;
  lowp vec4 c_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_5 * light_3.xyz);
  c_15.xyz = tmpvar_16;
  c_15.w = tmpvar_6;
  c_2.xyz = c_15.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out highp vec3 xlv_TEXCOORD0;
out mediump vec4 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec4 tmpvar_13;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_13 = _InstanceData;
  } else {
    tmpvar_13 = tmpvar_1;
  };
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * tmpvar_13.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_14.xz;
  billboardPos_7.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * tmpvar_13.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_15;
    vPos_15 = billboardPos_7;
    highp float fAdjust_16;
    highp float fLength_17;
    fLength_17 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_18;
    tmpvar_18 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_16 = tmpvar_18;
    if ((tmpvar_18 != 0.0)) {
      fAdjust_16 = pow (tmpvar_18, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_19;
    tmpvar_19.zw = vec2(0.0, 0.0);
    tmpvar_19.x = (tmpvar_12.x + tmpvar_13.w);
    tmpvar_19.y = (tmpvar_12.y + (tmpvar_13.w * 0.8));
    highp vec4 tmpvar_20;
    highp vec4 tmpvar_21;
    tmpvar_21 = abs(((
      fract((tmpvar_19 + 0.5))
     * 2.0) - 1.0));
    tmpvar_20 = (((
      (tmpvar_21 * tmpvar_21)
     * 
      (3.0 - (2.0 * tmpvar_21))
    ) - 0.5) * 2.0);
    vPos_15.xz = (tmpvar_14.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_20.x + (tmpvar_20.y * tmpvar_20.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_16)));
    vPos_15 = (normalize(vPos_15) * fLength_17);
    billboardPos_7 = vPos_15;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp float tmpvar_22;
  tmpvar_22 = (floor((
    ((_CameraXZAngle + tmpvar_13.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.x);
  highp float tmpvar_23;
  tmpvar_23 = (fract(abs(tmpvar_22)) * tmpvar_9.x);
  highp float tmpvar_24;
  if ((tmpvar_22 >= 0.0)) {
    tmpvar_24 = tmpvar_23;
  } else {
    tmpvar_24 = -(tmpvar_23);
  };
  highp vec4 tmpvar_25;
  tmpvar_25 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_24))];
  if ((tmpvar_25.w < 0.0)) {
    highp vec2 tmpvar_26;
    tmpvar_26 = (tmpvar_25.xy - (tmpvar_25.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_26;
  } else {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_25.xy + (tmpvar_25.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_27;
  };
  tmpvar_2 = _Color;
  highp vec4 tmpvar_28;
  tmpvar_28 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_28 * 0.5);
  highp vec2 tmpvar_31;
  tmpvar_31.x = tmpvar_30.x;
  tmpvar_31.y = (tmpvar_30.y * _ProjectionParams.x);
  o_29.xy = (tmpvar_31 + tmpvar_30.w);
  o_29.zw = tmpvar_28.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_32;
  v_32.x = _World2Object[0].x;
  v_32.y = _World2Object[1].x;
  v_32.z = _World2Object[2].x;
  v_32.w = _World2Object[3].x;
  highp vec4 v_33;
  v_33.x = _World2Object[0].y;
  v_33.y = _World2Object[1].y;
  v_33.z = _World2Object[2].y;
  v_33.w = _World2Object[3].y;
  highp vec4 v_34;
  v_34.x = _World2Object[0].z;
  v_34.y = _World2Object[1].z;
  v_34.z = _World2Object[2].z;
  v_34.w = _World2Object[3].z;
  highp vec4 tmpvar_35;
  tmpvar_35.w = 1.0;
  tmpvar_35.xyz = normalize(((
    (v_32.xyz * _BillboardNormal.x)
   + 
    (v_33.xyz * _BillboardNormal.y)
  ) + (v_34.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_36;
  mediump vec4 normal_37;
  normal_37 = tmpvar_35;
  mediump vec3 x2_38;
  mediump vec3 x1_39;
  x1_39.x = dot (unity_SHAr, normal_37);
  x1_39.y = dot (unity_SHAg, normal_37);
  x1_39.z = dot (unity_SHAb, normal_37);
  mediump vec4 tmpvar_40;
  tmpvar_40 = (normal_37.xyzz * normal_37.yzzx);
  x2_38.x = dot (unity_SHBr, tmpvar_40);
  x2_38.y = dot (unity_SHBg, tmpvar_40);
  x2_38.z = dot (unity_SHBb, tmpvar_40);
  tmpvar_36 = ((x2_38 + (unity_SHC.xyz * 
    ((normal_37.x * normal_37.x) - (normal_37.y * normal_37.y))
  )) + x1_39);
  tmpvar_4 = tmpvar_36;
  gl_Position = tmpvar_28;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_29;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
in mediump vec4 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_9;
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = textureProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_13.w;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13.xyz + xlv_TEXCOORD5);
  light_3.xyz = tmpvar_14;
  lowp vec4 c_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_5 * light_3.xyz);
  c_15.xyz = tmpvar_16;
  c_15.w = tmpvar_6;
  c_2.xyz = c_15.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec4 tmpvar_13;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_13 = _InstanceData;
  } else {
    tmpvar_13 = tmpvar_1;
  };
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * tmpvar_13.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_14.xz;
  billboardPos_7.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * tmpvar_13.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_15;
    vPos_15 = billboardPos_7;
    highp float fAdjust_16;
    highp float fLength_17;
    fLength_17 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_18;
    tmpvar_18 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_16 = tmpvar_18;
    if ((tmpvar_18 != 0.0)) {
      fAdjust_16 = pow (tmpvar_18, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_19;
    tmpvar_19.zw = vec2(0.0, 0.0);
    tmpvar_19.x = (tmpvar_12.x + tmpvar_13.w);
    tmpvar_19.y = (tmpvar_12.y + (tmpvar_13.w * 0.8));
    highp vec4 tmpvar_20;
    highp vec4 tmpvar_21;
    tmpvar_21 = abs(((
      fract((tmpvar_19 + 0.5))
     * 2.0) - 1.0));
    tmpvar_20 = (((
      (tmpvar_21 * tmpvar_21)
     * 
      (3.0 - (2.0 * tmpvar_21))
    ) - 0.5) * 2.0);
    vPos_15.xz = (tmpvar_14.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_20.x + (tmpvar_20.y * tmpvar_20.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_16)));
    vPos_15 = (normalize(vPos_15) * fLength_17);
    billboardPos_7 = vPos_15;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp float tmpvar_22;
  tmpvar_22 = (floor((
    ((_CameraXZAngle + tmpvar_13.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.x);
  highp float tmpvar_23;
  tmpvar_23 = (fract(abs(tmpvar_22)) * tmpvar_9.x);
  highp float tmpvar_24;
  if ((tmpvar_22 >= 0.0)) {
    tmpvar_24 = tmpvar_23;
  } else {
    tmpvar_24 = -(tmpvar_23);
  };
  highp vec4 tmpvar_25;
  tmpvar_25 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_24))];
  if ((tmpvar_25.w < 0.0)) {
    highp vec2 tmpvar_26;
    tmpvar_26 = (tmpvar_25.xy - (tmpvar_25.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_26;
  } else {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_25.xy + (tmpvar_25.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_27;
  };
  tmpvar_2 = _Color;
  highp vec4 tmpvar_28;
  tmpvar_28 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_28 * 0.5);
  highp vec2 tmpvar_31;
  tmpvar_31.x = tmpvar_30.x;
  tmpvar_31.y = (tmpvar_30.y * _ProjectionParams.x);
  o_29.xy = (tmpvar_31 + tmpvar_30.w);
  o_29.zw = tmpvar_28.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_32;
  v_32.x = _World2Object[0].x;
  v_32.y = _World2Object[1].x;
  v_32.z = _World2Object[2].x;
  v_32.w = _World2Object[3].x;
  highp vec4 v_33;
  v_33.x = _World2Object[0].y;
  v_33.y = _World2Object[1].y;
  v_33.z = _World2Object[2].y;
  v_33.w = _World2Object[3].y;
  highp vec4 v_34;
  v_34.x = _World2Object[0].z;
  v_34.y = _World2Object[1].z;
  v_34.z = _World2Object[2].z;
  v_34.w = _World2Object[3].z;
  highp vec4 tmpvar_35;
  tmpvar_35.w = 1.0;
  tmpvar_35.xyz = normalize(((
    (v_32.xyz * _BillboardNormal.x)
   + 
    (v_33.xyz * _BillboardNormal.y)
  ) + (v_34.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_36;
  mediump vec4 normal_37;
  normal_37 = tmpvar_35;
  mediump vec3 x2_38;
  mediump vec3 x1_39;
  x1_39.x = dot (unity_SHAr, normal_37);
  x1_39.y = dot (unity_SHAg, normal_37);
  x1_39.z = dot (unity_SHAb, normal_37);
  mediump vec4 tmpvar_40;
  tmpvar_40 = (normal_37.xyzz * normal_37.yzzx);
  x2_38.x = dot (unity_SHBr, tmpvar_40);
  x2_38.y = dot (unity_SHBg, tmpvar_40);
  x2_38.z = dot (unity_SHBb, tmpvar_40);
  tmpvar_36 = ((x2_38 + (unity_SHC.xyz * 
    ((normal_37.x * normal_37.x) - (normal_37.y * normal_37.y))
  )) + x1_39);
  tmpvar_4 = tmpvar_36;
  gl_Position = tmpvar_28;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_29;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_9;
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_13.w;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13.xyz + xlv_TEXCOORD5);
  light_3.xyz = tmpvar_14;
  lowp vec4 c_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_5 * light_3.xyz);
  c_15.xyz = tmpvar_16;
  c_15.w = tmpvar_6;
  c_2.xyz = c_15.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out highp vec3 xlv_TEXCOORD0;
out mediump vec4 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec4 tmpvar_13;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_13 = _InstanceData;
  } else {
    tmpvar_13 = tmpvar_1;
  };
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * tmpvar_13.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_14.xz;
  billboardPos_7.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * tmpvar_13.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_15;
    vPos_15 = billboardPos_7;
    highp float fAdjust_16;
    highp float fLength_17;
    fLength_17 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_18;
    tmpvar_18 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_16 = tmpvar_18;
    if ((tmpvar_18 != 0.0)) {
      fAdjust_16 = pow (tmpvar_18, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_19;
    tmpvar_19.zw = vec2(0.0, 0.0);
    tmpvar_19.x = (tmpvar_12.x + tmpvar_13.w);
    tmpvar_19.y = (tmpvar_12.y + (tmpvar_13.w * 0.8));
    highp vec4 tmpvar_20;
    highp vec4 tmpvar_21;
    tmpvar_21 = abs(((
      fract((tmpvar_19 + 0.5))
     * 2.0) - 1.0));
    tmpvar_20 = (((
      (tmpvar_21 * tmpvar_21)
     * 
      (3.0 - (2.0 * tmpvar_21))
    ) - 0.5) * 2.0);
    vPos_15.xz = (tmpvar_14.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_20.x + (tmpvar_20.y * tmpvar_20.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_16)));
    vPos_15 = (normalize(vPos_15) * fLength_17);
    billboardPos_7 = vPos_15;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp float tmpvar_22;
  tmpvar_22 = (floor((
    ((_CameraXZAngle + tmpvar_13.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.x);
  highp float tmpvar_23;
  tmpvar_23 = (fract(abs(tmpvar_22)) * tmpvar_9.x);
  highp float tmpvar_24;
  if ((tmpvar_22 >= 0.0)) {
    tmpvar_24 = tmpvar_23;
  } else {
    tmpvar_24 = -(tmpvar_23);
  };
  highp vec4 tmpvar_25;
  tmpvar_25 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_24))];
  if ((tmpvar_25.w < 0.0)) {
    highp vec2 tmpvar_26;
    tmpvar_26 = (tmpvar_25.xy - (tmpvar_25.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_26;
  } else {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_25.xy + (tmpvar_25.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_27;
  };
  tmpvar_2 = _Color;
  highp vec4 tmpvar_28;
  tmpvar_28 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_28 * 0.5);
  highp vec2 tmpvar_31;
  tmpvar_31.x = tmpvar_30.x;
  tmpvar_31.y = (tmpvar_30.y * _ProjectionParams.x);
  o_29.xy = (tmpvar_31 + tmpvar_30.w);
  o_29.zw = tmpvar_28.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_32;
  v_32.x = _World2Object[0].x;
  v_32.y = _World2Object[1].x;
  v_32.z = _World2Object[2].x;
  v_32.w = _World2Object[3].x;
  highp vec4 v_33;
  v_33.x = _World2Object[0].y;
  v_33.y = _World2Object[1].y;
  v_33.z = _World2Object[2].y;
  v_33.w = _World2Object[3].y;
  highp vec4 v_34;
  v_34.x = _World2Object[0].z;
  v_34.y = _World2Object[1].z;
  v_34.z = _World2Object[2].z;
  v_34.w = _World2Object[3].z;
  highp vec4 tmpvar_35;
  tmpvar_35.w = 1.0;
  tmpvar_35.xyz = normalize(((
    (v_32.xyz * _BillboardNormal.x)
   + 
    (v_33.xyz * _BillboardNormal.y)
  ) + (v_34.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_36;
  mediump vec4 normal_37;
  normal_37 = tmpvar_35;
  mediump vec3 x2_38;
  mediump vec3 x1_39;
  x1_39.x = dot (unity_SHAr, normal_37);
  x1_39.y = dot (unity_SHAg, normal_37);
  x1_39.z = dot (unity_SHAb, normal_37);
  mediump vec4 tmpvar_40;
  tmpvar_40 = (normal_37.xyzz * normal_37.yzzx);
  x2_38.x = dot (unity_SHBr, tmpvar_40);
  x2_38.y = dot (unity_SHBg, tmpvar_40);
  x2_38.z = dot (unity_SHBb, tmpvar_40);
  tmpvar_36 = ((x2_38 + (unity_SHC.xyz * 
    ((normal_37.x * normal_37.x) - (normal_37.y * normal_37.y))
  )) + x1_39);
  tmpvar_4 = tmpvar_36;
  gl_Position = tmpvar_28;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_29;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
in mediump vec4 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_9;
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = textureProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_13.w;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13.xyz + xlv_TEXCOORD5);
  light_3.xyz = tmpvar_14;
  lowp vec4 c_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_5 * light_3.xyz);
  c_15.xyz = tmpvar_16;
  c_15.w = tmpvar_6;
  c_2.xyz = c_15.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec4 tmpvar_13;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_13 = _InstanceData;
  } else {
    tmpvar_13 = tmpvar_1;
  };
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * tmpvar_13.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_14.xz;
  billboardPos_7.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * tmpvar_13.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_15;
    vPos_15 = billboardPos_7;
    highp float fAdjust_16;
    highp float fLength_17;
    fLength_17 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_18;
    tmpvar_18 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_16 = tmpvar_18;
    if ((tmpvar_18 != 0.0)) {
      fAdjust_16 = pow (tmpvar_18, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_19;
    tmpvar_19.zw = vec2(0.0, 0.0);
    tmpvar_19.x = (tmpvar_12.x + tmpvar_13.w);
    tmpvar_19.y = (tmpvar_12.y + (tmpvar_13.w * 0.8));
    highp vec4 tmpvar_20;
    highp vec4 tmpvar_21;
    tmpvar_21 = abs(((
      fract((tmpvar_19 + 0.5))
     * 2.0) - 1.0));
    tmpvar_20 = (((
      (tmpvar_21 * tmpvar_21)
     * 
      (3.0 - (2.0 * tmpvar_21))
    ) - 0.5) * 2.0);
    vPos_15.xz = (tmpvar_14.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_20.x + (tmpvar_20.y * tmpvar_20.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_16)));
    vPos_15 = (normalize(vPos_15) * fLength_17);
    billboardPos_7 = vPos_15;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp float tmpvar_22;
  tmpvar_22 = (floor((
    ((_CameraXZAngle + tmpvar_13.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.x);
  highp float tmpvar_23;
  tmpvar_23 = (fract(abs(tmpvar_22)) * tmpvar_9.x);
  highp float tmpvar_24;
  if ((tmpvar_22 >= 0.0)) {
    tmpvar_24 = tmpvar_23;
  } else {
    tmpvar_24 = -(tmpvar_23);
  };
  highp vec4 tmpvar_25;
  tmpvar_25 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_24))];
  if ((tmpvar_25.w < 0.0)) {
    highp vec2 tmpvar_26;
    tmpvar_26 = (tmpvar_25.xy - (tmpvar_25.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_26;
  } else {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_25.xy + (tmpvar_25.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_27;
  };
  highp float tmpvar_28;
  tmpvar_28 = clamp ((fract(
    ((tmpvar_12.x + tmpvar_12.y) + tmpvar_12.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_28;
  tmpvar_2 = _Color;
  highp vec4 tmpvar_29;
  tmpvar_29 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (tmpvar_29 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = tmpvar_29.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_33;
  v_33.x = _World2Object[0].x;
  v_33.y = _World2Object[1].x;
  v_33.z = _World2Object[2].x;
  v_33.w = _World2Object[3].x;
  highp vec4 v_34;
  v_34.x = _World2Object[0].y;
  v_34.y = _World2Object[1].y;
  v_34.z = _World2Object[2].y;
  v_34.w = _World2Object[3].y;
  highp vec4 v_35;
  v_35.x = _World2Object[0].z;
  v_35.y = _World2Object[1].z;
  v_35.z = _World2Object[2].z;
  v_35.w = _World2Object[3].z;
  highp vec4 tmpvar_36;
  tmpvar_36.w = 1.0;
  tmpvar_36.xyz = normalize(((
    (v_33.xyz * _BillboardNormal.x)
   + 
    (v_34.xyz * _BillboardNormal.y)
  ) + (v_35.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_37;
  mediump vec4 normal_38;
  normal_38 = tmpvar_36;
  mediump vec3 x2_39;
  mediump vec3 x1_40;
  x1_40.x = dot (unity_SHAr, normal_38);
  x1_40.y = dot (unity_SHAg, normal_38);
  x1_40.z = dot (unity_SHAb, normal_38);
  mediump vec4 tmpvar_41;
  tmpvar_41 = (normal_38.xyzz * normal_38.yzzx);
  x2_39.x = dot (unity_SHBr, tmpvar_41);
  x2_39.y = dot (unity_SHBg, tmpvar_41);
  x2_39.z = dot (unity_SHBb, tmpvar_41);
  tmpvar_37 = ((x2_39 + (unity_SHC.xyz * 
    ((normal_38.x * normal_38.x) - (normal_38.y * normal_38.y))
  )) + x1_40);
  tmpvar_4 = tmpvar_37;
  gl_Position = tmpvar_29;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_30;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_9;
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_11 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_12;
  tmpvar_12 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_14.w;
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14.xyz + xlv_TEXCOORD5);
  light_3.xyz = tmpvar_15;
  lowp vec4 c_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_5 * light_3.xyz);
  c_16.xyz = tmpvar_17;
  c_16.w = tmpvar_6;
  c_2.xyz = c_16.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out highp vec3 xlv_TEXCOORD0;
out mediump vec4 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec4 tmpvar_13;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_13 = _InstanceData;
  } else {
    tmpvar_13 = tmpvar_1;
  };
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * tmpvar_13.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_14.xz;
  billboardPos_7.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * tmpvar_13.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_15;
    vPos_15 = billboardPos_7;
    highp float fAdjust_16;
    highp float fLength_17;
    fLength_17 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_18;
    tmpvar_18 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_16 = tmpvar_18;
    if ((tmpvar_18 != 0.0)) {
      fAdjust_16 = pow (tmpvar_18, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_19;
    tmpvar_19.zw = vec2(0.0, 0.0);
    tmpvar_19.x = (tmpvar_12.x + tmpvar_13.w);
    tmpvar_19.y = (tmpvar_12.y + (tmpvar_13.w * 0.8));
    highp vec4 tmpvar_20;
    highp vec4 tmpvar_21;
    tmpvar_21 = abs(((
      fract((tmpvar_19 + 0.5))
     * 2.0) - 1.0));
    tmpvar_20 = (((
      (tmpvar_21 * tmpvar_21)
     * 
      (3.0 - (2.0 * tmpvar_21))
    ) - 0.5) * 2.0);
    vPos_15.xz = (tmpvar_14.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_20.x + (tmpvar_20.y * tmpvar_20.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_16)));
    vPos_15 = (normalize(vPos_15) * fLength_17);
    billboardPos_7 = vPos_15;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp float tmpvar_22;
  tmpvar_22 = (floor((
    ((_CameraXZAngle + tmpvar_13.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.x);
  highp float tmpvar_23;
  tmpvar_23 = (fract(abs(tmpvar_22)) * tmpvar_9.x);
  highp float tmpvar_24;
  if ((tmpvar_22 >= 0.0)) {
    tmpvar_24 = tmpvar_23;
  } else {
    tmpvar_24 = -(tmpvar_23);
  };
  highp vec4 tmpvar_25;
  tmpvar_25 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_24))];
  if ((tmpvar_25.w < 0.0)) {
    highp vec2 tmpvar_26;
    tmpvar_26 = (tmpvar_25.xy - (tmpvar_25.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_26;
  } else {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_25.xy + (tmpvar_25.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_27;
  };
  highp float tmpvar_28;
  tmpvar_28 = clamp ((fract(
    ((tmpvar_12.x + tmpvar_12.y) + tmpvar_12.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_28;
  tmpvar_2 = _Color;
  highp vec4 tmpvar_29;
  tmpvar_29 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (tmpvar_29 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = tmpvar_29.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_33;
  v_33.x = _World2Object[0].x;
  v_33.y = _World2Object[1].x;
  v_33.z = _World2Object[2].x;
  v_33.w = _World2Object[3].x;
  highp vec4 v_34;
  v_34.x = _World2Object[0].y;
  v_34.y = _World2Object[1].y;
  v_34.z = _World2Object[2].y;
  v_34.w = _World2Object[3].y;
  highp vec4 v_35;
  v_35.x = _World2Object[0].z;
  v_35.y = _World2Object[1].z;
  v_35.z = _World2Object[2].z;
  v_35.w = _World2Object[3].z;
  highp vec4 tmpvar_36;
  tmpvar_36.w = 1.0;
  tmpvar_36.xyz = normalize(((
    (v_33.xyz * _BillboardNormal.x)
   + 
    (v_34.xyz * _BillboardNormal.y)
  ) + (v_35.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_37;
  mediump vec4 normal_38;
  normal_38 = tmpvar_36;
  mediump vec3 x2_39;
  mediump vec3 x1_40;
  x1_40.x = dot (unity_SHAr, normal_38);
  x1_40.y = dot (unity_SHAg, normal_38);
  x1_40.z = dot (unity_SHAb, normal_38);
  mediump vec4 tmpvar_41;
  tmpvar_41 = (normal_38.xyzz * normal_38.yzzx);
  x2_39.x = dot (unity_SHBr, tmpvar_41);
  x2_39.y = dot (unity_SHBg, tmpvar_41);
  x2_39.z = dot (unity_SHBb, tmpvar_41);
  tmpvar_37 = ((x2_39 + (unity_SHC.xyz * 
    ((normal_38.x * normal_38.x) - (normal_38.y * normal_38.y))
  )) + x1_40);
  tmpvar_4 = tmpvar_37;
  gl_Position = tmpvar_29;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_30;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
in mediump vec4 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_9;
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_11 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_12;
  tmpvar_12 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_14.w;
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14.xyz + xlv_TEXCOORD5);
  light_3.xyz = tmpvar_15;
  lowp vec4 c_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_5 * light_3.xyz);
  c_16.xyz = tmpvar_17;
  c_16.w = tmpvar_6;
  c_2.xyz = c_16.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec4 tmpvar_13;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_13 = _InstanceData;
  } else {
    tmpvar_13 = tmpvar_1;
  };
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * tmpvar_13.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_14.xz;
  billboardPos_7.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * tmpvar_13.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_15;
    vPos_15 = billboardPos_7;
    highp float fAdjust_16;
    highp float fLength_17;
    fLength_17 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_18;
    tmpvar_18 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_16 = tmpvar_18;
    if ((tmpvar_18 != 0.0)) {
      fAdjust_16 = pow (tmpvar_18, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_19;
    tmpvar_19.zw = vec2(0.0, 0.0);
    tmpvar_19.x = (tmpvar_12.x + tmpvar_13.w);
    tmpvar_19.y = (tmpvar_12.y + (tmpvar_13.w * 0.8));
    highp vec4 tmpvar_20;
    highp vec4 tmpvar_21;
    tmpvar_21 = abs(((
      fract((tmpvar_19 + 0.5))
     * 2.0) - 1.0));
    tmpvar_20 = (((
      (tmpvar_21 * tmpvar_21)
     * 
      (3.0 - (2.0 * tmpvar_21))
    ) - 0.5) * 2.0);
    vPos_15.xz = (tmpvar_14.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_20.x + (tmpvar_20.y * tmpvar_20.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_16)));
    vPos_15 = (normalize(vPos_15) * fLength_17);
    billboardPos_7 = vPos_15;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp float tmpvar_22;
  tmpvar_22 = (floor((
    ((_CameraXZAngle + tmpvar_13.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.x);
  highp float tmpvar_23;
  tmpvar_23 = (fract(abs(tmpvar_22)) * tmpvar_9.x);
  highp float tmpvar_24;
  if ((tmpvar_22 >= 0.0)) {
    tmpvar_24 = tmpvar_23;
  } else {
    tmpvar_24 = -(tmpvar_23);
  };
  highp vec4 tmpvar_25;
  tmpvar_25 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_24))];
  if ((tmpvar_25.w < 0.0)) {
    highp vec2 tmpvar_26;
    tmpvar_26 = (tmpvar_25.xy - (tmpvar_25.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_26;
  } else {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_25.xy + (tmpvar_25.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_27;
  };
  highp float tmpvar_28;
  tmpvar_28 = clamp ((fract(
    ((tmpvar_12.x + tmpvar_12.y) + tmpvar_12.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_28;
  tmpvar_2 = _Color;
  highp vec4 tmpvar_29;
  tmpvar_29 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (tmpvar_29 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = tmpvar_29.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_33;
  v_33.x = _World2Object[0].x;
  v_33.y = _World2Object[1].x;
  v_33.z = _World2Object[2].x;
  v_33.w = _World2Object[3].x;
  highp vec4 v_34;
  v_34.x = _World2Object[0].y;
  v_34.y = _World2Object[1].y;
  v_34.z = _World2Object[2].y;
  v_34.w = _World2Object[3].y;
  highp vec4 v_35;
  v_35.x = _World2Object[0].z;
  v_35.y = _World2Object[1].z;
  v_35.z = _World2Object[2].z;
  v_35.w = _World2Object[3].z;
  highp vec4 tmpvar_36;
  tmpvar_36.w = 1.0;
  tmpvar_36.xyz = normalize(((
    (v_33.xyz * _BillboardNormal.x)
   + 
    (v_34.xyz * _BillboardNormal.y)
  ) + (v_35.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_37;
  mediump vec4 normal_38;
  normal_38 = tmpvar_36;
  mediump vec3 x2_39;
  mediump vec3 x1_40;
  x1_40.x = dot (unity_SHAr, normal_38);
  x1_40.y = dot (unity_SHAg, normal_38);
  x1_40.z = dot (unity_SHAb, normal_38);
  mediump vec4 tmpvar_41;
  tmpvar_41 = (normal_38.xyzz * normal_38.yzzx);
  x2_39.x = dot (unity_SHBr, tmpvar_41);
  x2_39.y = dot (unity_SHBg, tmpvar_41);
  x2_39.z = dot (unity_SHBb, tmpvar_41);
  tmpvar_37 = ((x2_39 + (unity_SHC.xyz * 
    ((normal_38.x * normal_38.x) - (normal_38.y * normal_38.y))
  )) + x1_40);
  tmpvar_4 = tmpvar_37;
  gl_Position = tmpvar_29;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_30;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_9;
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_11 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_12;
  tmpvar_12 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_14.w;
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14.xyz + xlv_TEXCOORD5);
  light_3.xyz = tmpvar_15;
  lowp vec4 c_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_5 * light_3.xyz);
  c_16.xyz = tmpvar_17;
  c_16.w = tmpvar_6;
  c_2.xyz = c_16.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out highp vec3 xlv_TEXCOORD0;
out mediump vec4 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec4 tmpvar_13;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_13 = _InstanceData;
  } else {
    tmpvar_13 = tmpvar_1;
  };
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * tmpvar_13.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_14.xz;
  billboardPos_7.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * tmpvar_13.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_15;
    vPos_15 = billboardPos_7;
    highp float fAdjust_16;
    highp float fLength_17;
    fLength_17 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_18;
    tmpvar_18 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_16 = tmpvar_18;
    if ((tmpvar_18 != 0.0)) {
      fAdjust_16 = pow (tmpvar_18, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_19;
    tmpvar_19.zw = vec2(0.0, 0.0);
    tmpvar_19.x = (tmpvar_12.x + tmpvar_13.w);
    tmpvar_19.y = (tmpvar_12.y + (tmpvar_13.w * 0.8));
    highp vec4 tmpvar_20;
    highp vec4 tmpvar_21;
    tmpvar_21 = abs(((
      fract((tmpvar_19 + 0.5))
     * 2.0) - 1.0));
    tmpvar_20 = (((
      (tmpvar_21 * tmpvar_21)
     * 
      (3.0 - (2.0 * tmpvar_21))
    ) - 0.5) * 2.0);
    vPos_15.xz = (tmpvar_14.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_20.x + (tmpvar_20.y * tmpvar_20.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_16)));
    vPos_15 = (normalize(vPos_15) * fLength_17);
    billboardPos_7 = vPos_15;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp float tmpvar_22;
  tmpvar_22 = (floor((
    ((_CameraXZAngle + tmpvar_13.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.x);
  highp float tmpvar_23;
  tmpvar_23 = (fract(abs(tmpvar_22)) * tmpvar_9.x);
  highp float tmpvar_24;
  if ((tmpvar_22 >= 0.0)) {
    tmpvar_24 = tmpvar_23;
  } else {
    tmpvar_24 = -(tmpvar_23);
  };
  highp vec4 tmpvar_25;
  tmpvar_25 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_24))];
  if ((tmpvar_25.w < 0.0)) {
    highp vec2 tmpvar_26;
    tmpvar_26 = (tmpvar_25.xy - (tmpvar_25.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_26;
  } else {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_25.xy + (tmpvar_25.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_27;
  };
  highp float tmpvar_28;
  tmpvar_28 = clamp ((fract(
    ((tmpvar_12.x + tmpvar_12.y) + tmpvar_12.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_28;
  tmpvar_2 = _Color;
  highp vec4 tmpvar_29;
  tmpvar_29 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (tmpvar_29 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = tmpvar_29.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_33;
  v_33.x = _World2Object[0].x;
  v_33.y = _World2Object[1].x;
  v_33.z = _World2Object[2].x;
  v_33.w = _World2Object[3].x;
  highp vec4 v_34;
  v_34.x = _World2Object[0].y;
  v_34.y = _World2Object[1].y;
  v_34.z = _World2Object[2].y;
  v_34.w = _World2Object[3].y;
  highp vec4 v_35;
  v_35.x = _World2Object[0].z;
  v_35.y = _World2Object[1].z;
  v_35.z = _World2Object[2].z;
  v_35.w = _World2Object[3].z;
  highp vec4 tmpvar_36;
  tmpvar_36.w = 1.0;
  tmpvar_36.xyz = normalize(((
    (v_33.xyz * _BillboardNormal.x)
   + 
    (v_34.xyz * _BillboardNormal.y)
  ) + (v_35.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_37;
  mediump vec4 normal_38;
  normal_38 = tmpvar_36;
  mediump vec3 x2_39;
  mediump vec3 x1_40;
  x1_40.x = dot (unity_SHAr, normal_38);
  x1_40.y = dot (unity_SHAg, normal_38);
  x1_40.z = dot (unity_SHAb, normal_38);
  mediump vec4 tmpvar_41;
  tmpvar_41 = (normal_38.xyzz * normal_38.yzzx);
  x2_39.x = dot (unity_SHBr, tmpvar_41);
  x2_39.y = dot (unity_SHBg, tmpvar_41);
  x2_39.z = dot (unity_SHBb, tmpvar_41);
  tmpvar_37 = ((x2_39 + (unity_SHC.xyz * 
    ((normal_38.x * normal_38.x) - (normal_38.y * normal_38.y))
  )) + x1_40);
  tmpvar_4 = tmpvar_37;
  gl_Position = tmpvar_29;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_30;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
in mediump vec4 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_9;
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_11 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_12;
  tmpvar_12 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_14.w;
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14.xyz + xlv_TEXCOORD5);
  light_3.xyz = tmpvar_15;
  lowp vec4 c_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_5 * light_3.xyz);
  c_16.xyz = tmpvar_17;
  c_16.w = tmpvar_6;
  c_2.xyz = c_16.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec4 tmpvar_13;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_13 = _InstanceData;
  } else {
    tmpvar_13 = tmpvar_1;
  };
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * tmpvar_13.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_14.xz;
  billboardPos_7.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * tmpvar_13.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_15;
    vPos_15 = billboardPos_7;
    highp float fAdjust_16;
    highp float fLength_17;
    fLength_17 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_18;
    tmpvar_18 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_16 = tmpvar_18;
    if ((tmpvar_18 != 0.0)) {
      fAdjust_16 = pow (tmpvar_18, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_19;
    tmpvar_19.zw = vec2(0.0, 0.0);
    tmpvar_19.x = (tmpvar_12.x + tmpvar_13.w);
    tmpvar_19.y = (tmpvar_12.y + (tmpvar_13.w * 0.8));
    highp vec4 tmpvar_20;
    highp vec4 tmpvar_21;
    tmpvar_21 = abs(((
      fract((tmpvar_19 + 0.5))
     * 2.0) - 1.0));
    tmpvar_20 = (((
      (tmpvar_21 * tmpvar_21)
     * 
      (3.0 - (2.0 * tmpvar_21))
    ) - 0.5) * 2.0);
    vPos_15.xz = (tmpvar_14.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_20.x + (tmpvar_20.y * tmpvar_20.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_16)));
    vPos_15 = (normalize(vPos_15) * fLength_17);
    billboardPos_7 = vPos_15;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp float tmpvar_22;
  tmpvar_22 = (floor((
    ((_CameraXZAngle + tmpvar_13.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.x);
  highp float tmpvar_23;
  tmpvar_23 = (fract(abs(tmpvar_22)) * tmpvar_9.x);
  highp float tmpvar_24;
  if ((tmpvar_22 >= 0.0)) {
    tmpvar_24 = tmpvar_23;
  } else {
    tmpvar_24 = -(tmpvar_23);
  };
  highp vec4 tmpvar_25;
  tmpvar_25 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_24))];
  if ((tmpvar_25.w < 0.0)) {
    highp vec2 tmpvar_26;
    tmpvar_26 = (tmpvar_25.xy - (tmpvar_25.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_26;
  } else {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_25.xy + (tmpvar_25.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_27;
  };
  tmpvar_2 = _Color;
  highp vec4 tmpvar_28;
  tmpvar_28 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_28 * 0.5);
  highp vec2 tmpvar_31;
  tmpvar_31.x = tmpvar_30.x;
  tmpvar_31.y = (tmpvar_30.y * _ProjectionParams.x);
  o_29.xy = (tmpvar_31 + tmpvar_30.w);
  o_29.zw = tmpvar_28.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_32;
  v_32.x = _World2Object[0].x;
  v_32.y = _World2Object[1].x;
  v_32.z = _World2Object[2].x;
  v_32.w = _World2Object[3].x;
  highp vec4 v_33;
  v_33.x = _World2Object[0].y;
  v_33.y = _World2Object[1].y;
  v_33.z = _World2Object[2].y;
  v_33.w = _World2Object[3].y;
  highp vec4 v_34;
  v_34.x = _World2Object[0].z;
  v_34.y = _World2Object[1].z;
  v_34.z = _World2Object[2].z;
  v_34.w = _World2Object[3].z;
  highp vec4 tmpvar_35;
  tmpvar_35.w = 1.0;
  tmpvar_35.xyz = normalize(((
    (v_32.xyz * _BillboardNormal.x)
   + 
    (v_33.xyz * _BillboardNormal.y)
  ) + (v_34.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_36;
  mediump vec4 normal_37;
  normal_37 = tmpvar_35;
  mediump vec3 x2_38;
  mediump vec3 x1_39;
  x1_39.x = dot (unity_SHAr, normal_37);
  x1_39.y = dot (unity_SHAg, normal_37);
  x1_39.z = dot (unity_SHAb, normal_37);
  mediump vec4 tmpvar_40;
  tmpvar_40 = (normal_37.xyzz * normal_37.yzzx);
  x2_38.x = dot (unity_SHBr, tmpvar_40);
  x2_38.y = dot (unity_SHBg, tmpvar_40);
  x2_38.z = dot (unity_SHBb, tmpvar_40);
  tmpvar_36 = ((x2_38 + (unity_SHC.xyz * 
    ((normal_37.x * normal_37.x) - (normal_37.y * normal_37.y))
  )) + x1_39);
  tmpvar_4 = tmpvar_36;
  gl_Position = tmpvar_28;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_29;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_9;
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_13.w;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13.xyz + xlv_TEXCOORD5);
  light_3.xyz = tmpvar_14;
  lowp vec4 c_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_5 * light_3.xyz);
  c_15.xyz = tmpvar_16;
  c_15.w = tmpvar_6;
  c_2.xyz = c_15.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out highp vec3 xlv_TEXCOORD0;
out mediump vec4 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec4 tmpvar_13;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_13 = _InstanceData;
  } else {
    tmpvar_13 = tmpvar_1;
  };
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * tmpvar_13.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_14.xz;
  billboardPos_7.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * tmpvar_13.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_15;
    vPos_15 = billboardPos_7;
    highp float fAdjust_16;
    highp float fLength_17;
    fLength_17 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_18;
    tmpvar_18 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_16 = tmpvar_18;
    if ((tmpvar_18 != 0.0)) {
      fAdjust_16 = pow (tmpvar_18, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_19;
    tmpvar_19.zw = vec2(0.0, 0.0);
    tmpvar_19.x = (tmpvar_12.x + tmpvar_13.w);
    tmpvar_19.y = (tmpvar_12.y + (tmpvar_13.w * 0.8));
    highp vec4 tmpvar_20;
    highp vec4 tmpvar_21;
    tmpvar_21 = abs(((
      fract((tmpvar_19 + 0.5))
     * 2.0) - 1.0));
    tmpvar_20 = (((
      (tmpvar_21 * tmpvar_21)
     * 
      (3.0 - (2.0 * tmpvar_21))
    ) - 0.5) * 2.0);
    vPos_15.xz = (tmpvar_14.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_20.x + (tmpvar_20.y * tmpvar_20.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_16)));
    vPos_15 = (normalize(vPos_15) * fLength_17);
    billboardPos_7 = vPos_15;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp float tmpvar_22;
  tmpvar_22 = (floor((
    ((_CameraXZAngle + tmpvar_13.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.x);
  highp float tmpvar_23;
  tmpvar_23 = (fract(abs(tmpvar_22)) * tmpvar_9.x);
  highp float tmpvar_24;
  if ((tmpvar_22 >= 0.0)) {
    tmpvar_24 = tmpvar_23;
  } else {
    tmpvar_24 = -(tmpvar_23);
  };
  highp vec4 tmpvar_25;
  tmpvar_25 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_24))];
  if ((tmpvar_25.w < 0.0)) {
    highp vec2 tmpvar_26;
    tmpvar_26 = (tmpvar_25.xy - (tmpvar_25.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_26;
  } else {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_25.xy + (tmpvar_25.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_27;
  };
  tmpvar_2 = _Color;
  highp vec4 tmpvar_28;
  tmpvar_28 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_28 * 0.5);
  highp vec2 tmpvar_31;
  tmpvar_31.x = tmpvar_30.x;
  tmpvar_31.y = (tmpvar_30.y * _ProjectionParams.x);
  o_29.xy = (tmpvar_31 + tmpvar_30.w);
  o_29.zw = tmpvar_28.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_32;
  v_32.x = _World2Object[0].x;
  v_32.y = _World2Object[1].x;
  v_32.z = _World2Object[2].x;
  v_32.w = _World2Object[3].x;
  highp vec4 v_33;
  v_33.x = _World2Object[0].y;
  v_33.y = _World2Object[1].y;
  v_33.z = _World2Object[2].y;
  v_33.w = _World2Object[3].y;
  highp vec4 v_34;
  v_34.x = _World2Object[0].z;
  v_34.y = _World2Object[1].z;
  v_34.z = _World2Object[2].z;
  v_34.w = _World2Object[3].z;
  highp vec4 tmpvar_35;
  tmpvar_35.w = 1.0;
  tmpvar_35.xyz = normalize(((
    (v_32.xyz * _BillboardNormal.x)
   + 
    (v_33.xyz * _BillboardNormal.y)
  ) + (v_34.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_36;
  mediump vec4 normal_37;
  normal_37 = tmpvar_35;
  mediump vec3 x2_38;
  mediump vec3 x1_39;
  x1_39.x = dot (unity_SHAr, normal_37);
  x1_39.y = dot (unity_SHAg, normal_37);
  x1_39.z = dot (unity_SHAb, normal_37);
  mediump vec4 tmpvar_40;
  tmpvar_40 = (normal_37.xyzz * normal_37.yzzx);
  x2_38.x = dot (unity_SHBr, tmpvar_40);
  x2_38.y = dot (unity_SHBg, tmpvar_40);
  x2_38.z = dot (unity_SHBb, tmpvar_40);
  tmpvar_36 = ((x2_38 + (unity_SHC.xyz * 
    ((normal_37.x * normal_37.x) - (normal_37.y * normal_37.y))
  )) + x1_39);
  tmpvar_4 = tmpvar_36;
  gl_Position = tmpvar_28;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_29;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
in mediump vec4 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_9;
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = textureProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_13.w;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13.xyz + xlv_TEXCOORD5);
  light_3.xyz = tmpvar_14;
  lowp vec4 c_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_5 * light_3.xyz);
  c_15.xyz = tmpvar_16;
  c_15.w = tmpvar_6;
  c_2.xyz = c_15.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec4 tmpvar_13;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_13 = _InstanceData;
  } else {
    tmpvar_13 = tmpvar_1;
  };
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * tmpvar_13.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_14.xz;
  billboardPos_7.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * tmpvar_13.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_15;
    vPos_15 = billboardPos_7;
    highp float fAdjust_16;
    highp float fLength_17;
    fLength_17 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_18;
    tmpvar_18 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_16 = tmpvar_18;
    if ((tmpvar_18 != 0.0)) {
      fAdjust_16 = pow (tmpvar_18, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_19;
    tmpvar_19.zw = vec2(0.0, 0.0);
    tmpvar_19.x = (tmpvar_12.x + tmpvar_13.w);
    tmpvar_19.y = (tmpvar_12.y + (tmpvar_13.w * 0.8));
    highp vec4 tmpvar_20;
    highp vec4 tmpvar_21;
    tmpvar_21 = abs(((
      fract((tmpvar_19 + 0.5))
     * 2.0) - 1.0));
    tmpvar_20 = (((
      (tmpvar_21 * tmpvar_21)
     * 
      (3.0 - (2.0 * tmpvar_21))
    ) - 0.5) * 2.0);
    vPos_15.xz = (tmpvar_14.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_20.x + (tmpvar_20.y * tmpvar_20.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_16)));
    vPos_15 = (normalize(vPos_15) * fLength_17);
    billboardPos_7 = vPos_15;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp float tmpvar_22;
  tmpvar_22 = (floor((
    ((_CameraXZAngle + tmpvar_13.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.x);
  highp float tmpvar_23;
  tmpvar_23 = (fract(abs(tmpvar_22)) * tmpvar_9.x);
  highp float tmpvar_24;
  if ((tmpvar_22 >= 0.0)) {
    tmpvar_24 = tmpvar_23;
  } else {
    tmpvar_24 = -(tmpvar_23);
  };
  highp vec4 tmpvar_25;
  tmpvar_25 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_24))];
  if ((tmpvar_25.w < 0.0)) {
    highp vec2 tmpvar_26;
    tmpvar_26 = (tmpvar_25.xy - (tmpvar_25.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_26;
  } else {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_25.xy + (tmpvar_25.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_27;
  };
  tmpvar_2 = _Color;
  highp vec4 tmpvar_28;
  tmpvar_28 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_28 * 0.5);
  highp vec2 tmpvar_31;
  tmpvar_31.x = tmpvar_30.x;
  tmpvar_31.y = (tmpvar_30.y * _ProjectionParams.x);
  o_29.xy = (tmpvar_31 + tmpvar_30.w);
  o_29.zw = tmpvar_28.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_32;
  v_32.x = _World2Object[0].x;
  v_32.y = _World2Object[1].x;
  v_32.z = _World2Object[2].x;
  v_32.w = _World2Object[3].x;
  highp vec4 v_33;
  v_33.x = _World2Object[0].y;
  v_33.y = _World2Object[1].y;
  v_33.z = _World2Object[2].y;
  v_33.w = _World2Object[3].y;
  highp vec4 v_34;
  v_34.x = _World2Object[0].z;
  v_34.y = _World2Object[1].z;
  v_34.z = _World2Object[2].z;
  v_34.w = _World2Object[3].z;
  highp vec4 tmpvar_35;
  tmpvar_35.w = 1.0;
  tmpvar_35.xyz = normalize(((
    (v_32.xyz * _BillboardNormal.x)
   + 
    (v_33.xyz * _BillboardNormal.y)
  ) + (v_34.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_36;
  mediump vec4 normal_37;
  normal_37 = tmpvar_35;
  mediump vec3 x2_38;
  mediump vec3 x1_39;
  x1_39.x = dot (unity_SHAr, normal_37);
  x1_39.y = dot (unity_SHAg, normal_37);
  x1_39.z = dot (unity_SHAb, normal_37);
  mediump vec4 tmpvar_40;
  tmpvar_40 = (normal_37.xyzz * normal_37.yzzx);
  x2_38.x = dot (unity_SHBr, tmpvar_40);
  x2_38.y = dot (unity_SHBg, tmpvar_40);
  x2_38.z = dot (unity_SHBb, tmpvar_40);
  tmpvar_36 = ((x2_38 + (unity_SHC.xyz * 
    ((normal_37.x * normal_37.x) - (normal_37.y * normal_37.y))
  )) + x1_39);
  tmpvar_4 = tmpvar_36;
  gl_Position = tmpvar_28;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_29;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_9;
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_13.w;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13.xyz + xlv_TEXCOORD5);
  light_3.xyz = tmpvar_14;
  lowp vec4 c_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_5 * light_3.xyz);
  c_15.xyz = tmpvar_16;
  c_15.w = tmpvar_6;
  c_2.xyz = c_15.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out highp vec3 xlv_TEXCOORD0;
out mediump vec4 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec4 tmpvar_13;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_13 = _InstanceData;
  } else {
    tmpvar_13 = tmpvar_1;
  };
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * tmpvar_13.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_14.xz;
  billboardPos_7.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * tmpvar_13.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_15;
    vPos_15 = billboardPos_7;
    highp float fAdjust_16;
    highp float fLength_17;
    fLength_17 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_18;
    tmpvar_18 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_16 = tmpvar_18;
    if ((tmpvar_18 != 0.0)) {
      fAdjust_16 = pow (tmpvar_18, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_19;
    tmpvar_19.zw = vec2(0.0, 0.0);
    tmpvar_19.x = (tmpvar_12.x + tmpvar_13.w);
    tmpvar_19.y = (tmpvar_12.y + (tmpvar_13.w * 0.8));
    highp vec4 tmpvar_20;
    highp vec4 tmpvar_21;
    tmpvar_21 = abs(((
      fract((tmpvar_19 + 0.5))
     * 2.0) - 1.0));
    tmpvar_20 = (((
      (tmpvar_21 * tmpvar_21)
     * 
      (3.0 - (2.0 * tmpvar_21))
    ) - 0.5) * 2.0);
    vPos_15.xz = (tmpvar_14.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_20.x + (tmpvar_20.y * tmpvar_20.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_16)));
    vPos_15 = (normalize(vPos_15) * fLength_17);
    billboardPos_7 = vPos_15;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp float tmpvar_22;
  tmpvar_22 = (floor((
    ((_CameraXZAngle + tmpvar_13.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.x);
  highp float tmpvar_23;
  tmpvar_23 = (fract(abs(tmpvar_22)) * tmpvar_9.x);
  highp float tmpvar_24;
  if ((tmpvar_22 >= 0.0)) {
    tmpvar_24 = tmpvar_23;
  } else {
    tmpvar_24 = -(tmpvar_23);
  };
  highp vec4 tmpvar_25;
  tmpvar_25 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_24))];
  if ((tmpvar_25.w < 0.0)) {
    highp vec2 tmpvar_26;
    tmpvar_26 = (tmpvar_25.xy - (tmpvar_25.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_26;
  } else {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_25.xy + (tmpvar_25.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_27;
  };
  tmpvar_2 = _Color;
  highp vec4 tmpvar_28;
  tmpvar_28 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_28 * 0.5);
  highp vec2 tmpvar_31;
  tmpvar_31.x = tmpvar_30.x;
  tmpvar_31.y = (tmpvar_30.y * _ProjectionParams.x);
  o_29.xy = (tmpvar_31 + tmpvar_30.w);
  o_29.zw = tmpvar_28.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_32;
  v_32.x = _World2Object[0].x;
  v_32.y = _World2Object[1].x;
  v_32.z = _World2Object[2].x;
  v_32.w = _World2Object[3].x;
  highp vec4 v_33;
  v_33.x = _World2Object[0].y;
  v_33.y = _World2Object[1].y;
  v_33.z = _World2Object[2].y;
  v_33.w = _World2Object[3].y;
  highp vec4 v_34;
  v_34.x = _World2Object[0].z;
  v_34.y = _World2Object[1].z;
  v_34.z = _World2Object[2].z;
  v_34.w = _World2Object[3].z;
  highp vec4 tmpvar_35;
  tmpvar_35.w = 1.0;
  tmpvar_35.xyz = normalize(((
    (v_32.xyz * _BillboardNormal.x)
   + 
    (v_33.xyz * _BillboardNormal.y)
  ) + (v_34.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_36;
  mediump vec4 normal_37;
  normal_37 = tmpvar_35;
  mediump vec3 x2_38;
  mediump vec3 x1_39;
  x1_39.x = dot (unity_SHAr, normal_37);
  x1_39.y = dot (unity_SHAg, normal_37);
  x1_39.z = dot (unity_SHAb, normal_37);
  mediump vec4 tmpvar_40;
  tmpvar_40 = (normal_37.xyzz * normal_37.yzzx);
  x2_38.x = dot (unity_SHBr, tmpvar_40);
  x2_38.y = dot (unity_SHBg, tmpvar_40);
  x2_38.z = dot (unity_SHBb, tmpvar_40);
  tmpvar_36 = ((x2_38 + (unity_SHC.xyz * 
    ((normal_37.x * normal_37.x) - (normal_37.y * normal_37.y))
  )) + x1_39);
  tmpvar_4 = tmpvar_36;
  gl_Position = tmpvar_28;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_29;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
in mediump vec4 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_9;
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = textureProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_13.w;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13.xyz + xlv_TEXCOORD5);
  light_3.xyz = tmpvar_14;
  lowp vec4 c_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_5 * light_3.xyz);
  c_15.xyz = tmpvar_16;
  c_15.w = tmpvar_6;
  c_2.xyz = c_15.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec4 tmpvar_13;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_13 = _InstanceData;
  } else {
    tmpvar_13 = tmpvar_1;
  };
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * tmpvar_13.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_14.xz;
  billboardPos_7.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * tmpvar_13.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_15;
    vPos_15 = billboardPos_7;
    highp float fAdjust_16;
    highp float fLength_17;
    fLength_17 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_18;
    tmpvar_18 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_16 = tmpvar_18;
    if ((tmpvar_18 != 0.0)) {
      fAdjust_16 = pow (tmpvar_18, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_19;
    tmpvar_19.zw = vec2(0.0, 0.0);
    tmpvar_19.x = (tmpvar_12.x + tmpvar_13.w);
    tmpvar_19.y = (tmpvar_12.y + (tmpvar_13.w * 0.8));
    highp vec4 tmpvar_20;
    highp vec4 tmpvar_21;
    tmpvar_21 = abs(((
      fract((tmpvar_19 + 0.5))
     * 2.0) - 1.0));
    tmpvar_20 = (((
      (tmpvar_21 * tmpvar_21)
     * 
      (3.0 - (2.0 * tmpvar_21))
    ) - 0.5) * 2.0);
    vPos_15.xz = (tmpvar_14.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_20.x + (tmpvar_20.y * tmpvar_20.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_16)));
    vPos_15 = (normalize(vPos_15) * fLength_17);
    billboardPos_7 = vPos_15;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp float tmpvar_22;
  tmpvar_22 = (floor((
    ((_CameraXZAngle + tmpvar_13.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.x);
  highp float tmpvar_23;
  tmpvar_23 = (fract(abs(tmpvar_22)) * tmpvar_9.x);
  highp float tmpvar_24;
  if ((tmpvar_22 >= 0.0)) {
    tmpvar_24 = tmpvar_23;
  } else {
    tmpvar_24 = -(tmpvar_23);
  };
  highp vec4 tmpvar_25;
  tmpvar_25 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_24))];
  if ((tmpvar_25.w < 0.0)) {
    highp vec2 tmpvar_26;
    tmpvar_26 = (tmpvar_25.xy - (tmpvar_25.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_26;
  } else {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_25.xy + (tmpvar_25.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_27;
  };
  highp float tmpvar_28;
  tmpvar_28 = clamp ((fract(
    ((tmpvar_12.x + tmpvar_12.y) + tmpvar_12.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_28;
  tmpvar_2 = _Color;
  highp vec4 tmpvar_29;
  tmpvar_29 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (tmpvar_29 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = tmpvar_29.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_33;
  v_33.x = _World2Object[0].x;
  v_33.y = _World2Object[1].x;
  v_33.z = _World2Object[2].x;
  v_33.w = _World2Object[3].x;
  highp vec4 v_34;
  v_34.x = _World2Object[0].y;
  v_34.y = _World2Object[1].y;
  v_34.z = _World2Object[2].y;
  v_34.w = _World2Object[3].y;
  highp vec4 v_35;
  v_35.x = _World2Object[0].z;
  v_35.y = _World2Object[1].z;
  v_35.z = _World2Object[2].z;
  v_35.w = _World2Object[3].z;
  highp vec4 tmpvar_36;
  tmpvar_36.w = 1.0;
  tmpvar_36.xyz = normalize(((
    (v_33.xyz * _BillboardNormal.x)
   + 
    (v_34.xyz * _BillboardNormal.y)
  ) + (v_35.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_37;
  mediump vec4 normal_38;
  normal_38 = tmpvar_36;
  mediump vec3 x2_39;
  mediump vec3 x1_40;
  x1_40.x = dot (unity_SHAr, normal_38);
  x1_40.y = dot (unity_SHAg, normal_38);
  x1_40.z = dot (unity_SHAb, normal_38);
  mediump vec4 tmpvar_41;
  tmpvar_41 = (normal_38.xyzz * normal_38.yzzx);
  x2_39.x = dot (unity_SHBr, tmpvar_41);
  x2_39.y = dot (unity_SHBg, tmpvar_41);
  x2_39.z = dot (unity_SHBb, tmpvar_41);
  tmpvar_37 = ((x2_39 + (unity_SHC.xyz * 
    ((normal_38.x * normal_38.x) - (normal_38.y * normal_38.y))
  )) + x1_40);
  tmpvar_4 = tmpvar_37;
  gl_Position = tmpvar_29;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_30;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_9;
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_11 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_12;
  tmpvar_12 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_14.w;
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14.xyz + xlv_TEXCOORD5);
  light_3.xyz = tmpvar_15;
  lowp vec4 c_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_5 * light_3.xyz);
  c_16.xyz = tmpvar_17;
  c_16.w = tmpvar_6;
  c_2.xyz = c_16.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out highp vec3 xlv_TEXCOORD0;
out mediump vec4 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec4 tmpvar_13;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_13 = _InstanceData;
  } else {
    tmpvar_13 = tmpvar_1;
  };
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * tmpvar_13.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_14.xz;
  billboardPos_7.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * tmpvar_13.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_15;
    vPos_15 = billboardPos_7;
    highp float fAdjust_16;
    highp float fLength_17;
    fLength_17 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_18;
    tmpvar_18 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_16 = tmpvar_18;
    if ((tmpvar_18 != 0.0)) {
      fAdjust_16 = pow (tmpvar_18, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_19;
    tmpvar_19.zw = vec2(0.0, 0.0);
    tmpvar_19.x = (tmpvar_12.x + tmpvar_13.w);
    tmpvar_19.y = (tmpvar_12.y + (tmpvar_13.w * 0.8));
    highp vec4 tmpvar_20;
    highp vec4 tmpvar_21;
    tmpvar_21 = abs(((
      fract((tmpvar_19 + 0.5))
     * 2.0) - 1.0));
    tmpvar_20 = (((
      (tmpvar_21 * tmpvar_21)
     * 
      (3.0 - (2.0 * tmpvar_21))
    ) - 0.5) * 2.0);
    vPos_15.xz = (tmpvar_14.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_20.x + (tmpvar_20.y * tmpvar_20.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_16)));
    vPos_15 = (normalize(vPos_15) * fLength_17);
    billboardPos_7 = vPos_15;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp float tmpvar_22;
  tmpvar_22 = (floor((
    ((_CameraXZAngle + tmpvar_13.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.x);
  highp float tmpvar_23;
  tmpvar_23 = (fract(abs(tmpvar_22)) * tmpvar_9.x);
  highp float tmpvar_24;
  if ((tmpvar_22 >= 0.0)) {
    tmpvar_24 = tmpvar_23;
  } else {
    tmpvar_24 = -(tmpvar_23);
  };
  highp vec4 tmpvar_25;
  tmpvar_25 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_24))];
  if ((tmpvar_25.w < 0.0)) {
    highp vec2 tmpvar_26;
    tmpvar_26 = (tmpvar_25.xy - (tmpvar_25.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_26;
  } else {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_25.xy + (tmpvar_25.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_27;
  };
  highp float tmpvar_28;
  tmpvar_28 = clamp ((fract(
    ((tmpvar_12.x + tmpvar_12.y) + tmpvar_12.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_28;
  tmpvar_2 = _Color;
  highp vec4 tmpvar_29;
  tmpvar_29 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (tmpvar_29 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = tmpvar_29.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_33;
  v_33.x = _World2Object[0].x;
  v_33.y = _World2Object[1].x;
  v_33.z = _World2Object[2].x;
  v_33.w = _World2Object[3].x;
  highp vec4 v_34;
  v_34.x = _World2Object[0].y;
  v_34.y = _World2Object[1].y;
  v_34.z = _World2Object[2].y;
  v_34.w = _World2Object[3].y;
  highp vec4 v_35;
  v_35.x = _World2Object[0].z;
  v_35.y = _World2Object[1].z;
  v_35.z = _World2Object[2].z;
  v_35.w = _World2Object[3].z;
  highp vec4 tmpvar_36;
  tmpvar_36.w = 1.0;
  tmpvar_36.xyz = normalize(((
    (v_33.xyz * _BillboardNormal.x)
   + 
    (v_34.xyz * _BillboardNormal.y)
  ) + (v_35.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_37;
  mediump vec4 normal_38;
  normal_38 = tmpvar_36;
  mediump vec3 x2_39;
  mediump vec3 x1_40;
  x1_40.x = dot (unity_SHAr, normal_38);
  x1_40.y = dot (unity_SHAg, normal_38);
  x1_40.z = dot (unity_SHAb, normal_38);
  mediump vec4 tmpvar_41;
  tmpvar_41 = (normal_38.xyzz * normal_38.yzzx);
  x2_39.x = dot (unity_SHBr, tmpvar_41);
  x2_39.y = dot (unity_SHBg, tmpvar_41);
  x2_39.z = dot (unity_SHBb, tmpvar_41);
  tmpvar_37 = ((x2_39 + (unity_SHC.xyz * 
    ((normal_38.x * normal_38.x) - (normal_38.y * normal_38.y))
  )) + x1_40);
  tmpvar_4 = tmpvar_37;
  gl_Position = tmpvar_29;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_30;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
in mediump vec4 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_9;
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_11 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_12;
  tmpvar_12 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_14.w;
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14.xyz + xlv_TEXCOORD5);
  light_3.xyz = tmpvar_15;
  lowp vec4 c_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_5 * light_3.xyz);
  c_16.xyz = tmpvar_17;
  c_16.w = tmpvar_6;
  c_2.xyz = c_16.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec4 tmpvar_13;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_13 = _InstanceData;
  } else {
    tmpvar_13 = tmpvar_1;
  };
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * tmpvar_13.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_14.xz;
  billboardPos_7.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * tmpvar_13.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_15;
    vPos_15 = billboardPos_7;
    highp float fAdjust_16;
    highp float fLength_17;
    fLength_17 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_18;
    tmpvar_18 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_16 = tmpvar_18;
    if ((tmpvar_18 != 0.0)) {
      fAdjust_16 = pow (tmpvar_18, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_19;
    tmpvar_19.zw = vec2(0.0, 0.0);
    tmpvar_19.x = (tmpvar_12.x + tmpvar_13.w);
    tmpvar_19.y = (tmpvar_12.y + (tmpvar_13.w * 0.8));
    highp vec4 tmpvar_20;
    highp vec4 tmpvar_21;
    tmpvar_21 = abs(((
      fract((tmpvar_19 + 0.5))
     * 2.0) - 1.0));
    tmpvar_20 = (((
      (tmpvar_21 * tmpvar_21)
     * 
      (3.0 - (2.0 * tmpvar_21))
    ) - 0.5) * 2.0);
    vPos_15.xz = (tmpvar_14.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_20.x + (tmpvar_20.y * tmpvar_20.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_16)));
    vPos_15 = (normalize(vPos_15) * fLength_17);
    billboardPos_7 = vPos_15;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp float tmpvar_22;
  tmpvar_22 = (floor((
    ((_CameraXZAngle + tmpvar_13.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.x);
  highp float tmpvar_23;
  tmpvar_23 = (fract(abs(tmpvar_22)) * tmpvar_9.x);
  highp float tmpvar_24;
  if ((tmpvar_22 >= 0.0)) {
    tmpvar_24 = tmpvar_23;
  } else {
    tmpvar_24 = -(tmpvar_23);
  };
  highp vec4 tmpvar_25;
  tmpvar_25 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_24))];
  if ((tmpvar_25.w < 0.0)) {
    highp vec2 tmpvar_26;
    tmpvar_26 = (tmpvar_25.xy - (tmpvar_25.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_26;
  } else {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_25.xy + (tmpvar_25.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_27;
  };
  highp float tmpvar_28;
  tmpvar_28 = clamp ((fract(
    ((tmpvar_12.x + tmpvar_12.y) + tmpvar_12.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_28;
  tmpvar_2 = _Color;
  highp vec4 tmpvar_29;
  tmpvar_29 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (tmpvar_29 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = tmpvar_29.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_33;
  v_33.x = _World2Object[0].x;
  v_33.y = _World2Object[1].x;
  v_33.z = _World2Object[2].x;
  v_33.w = _World2Object[3].x;
  highp vec4 v_34;
  v_34.x = _World2Object[0].y;
  v_34.y = _World2Object[1].y;
  v_34.z = _World2Object[2].y;
  v_34.w = _World2Object[3].y;
  highp vec4 v_35;
  v_35.x = _World2Object[0].z;
  v_35.y = _World2Object[1].z;
  v_35.z = _World2Object[2].z;
  v_35.w = _World2Object[3].z;
  highp vec4 tmpvar_36;
  tmpvar_36.w = 1.0;
  tmpvar_36.xyz = normalize(((
    (v_33.xyz * _BillboardNormal.x)
   + 
    (v_34.xyz * _BillboardNormal.y)
  ) + (v_35.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_37;
  mediump vec4 normal_38;
  normal_38 = tmpvar_36;
  mediump vec3 x2_39;
  mediump vec3 x1_40;
  x1_40.x = dot (unity_SHAr, normal_38);
  x1_40.y = dot (unity_SHAg, normal_38);
  x1_40.z = dot (unity_SHAb, normal_38);
  mediump vec4 tmpvar_41;
  tmpvar_41 = (normal_38.xyzz * normal_38.yzzx);
  x2_39.x = dot (unity_SHBr, tmpvar_41);
  x2_39.y = dot (unity_SHBg, tmpvar_41);
  x2_39.z = dot (unity_SHBb, tmpvar_41);
  tmpvar_37 = ((x2_39 + (unity_SHC.xyz * 
    ((normal_38.x * normal_38.x) - (normal_38.y * normal_38.y))
  )) + x1_40);
  tmpvar_4 = tmpvar_37;
  gl_Position = tmpvar_29;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_30;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_9;
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_11 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_12;
  tmpvar_12 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_14.w;
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14.xyz + xlv_TEXCOORD5);
  light_3.xyz = tmpvar_15;
  lowp vec4 c_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_5 * light_3.xyz);
  c_16.xyz = tmpvar_17;
  c_16.w = tmpvar_6;
  c_2.xyz = c_16.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out highp vec3 xlv_TEXCOORD0;
out mediump vec4 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec4 tmpvar_13;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_13 = _InstanceData;
  } else {
    tmpvar_13 = tmpvar_1;
  };
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * tmpvar_13.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_14.xz;
  billboardPos_7.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * tmpvar_13.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_15;
    vPos_15 = billboardPos_7;
    highp float fAdjust_16;
    highp float fLength_17;
    fLength_17 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_18;
    tmpvar_18 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_16 = tmpvar_18;
    if ((tmpvar_18 != 0.0)) {
      fAdjust_16 = pow (tmpvar_18, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_19;
    tmpvar_19.zw = vec2(0.0, 0.0);
    tmpvar_19.x = (tmpvar_12.x + tmpvar_13.w);
    tmpvar_19.y = (tmpvar_12.y + (tmpvar_13.w * 0.8));
    highp vec4 tmpvar_20;
    highp vec4 tmpvar_21;
    tmpvar_21 = abs(((
      fract((tmpvar_19 + 0.5))
     * 2.0) - 1.0));
    tmpvar_20 = (((
      (tmpvar_21 * tmpvar_21)
     * 
      (3.0 - (2.0 * tmpvar_21))
    ) - 0.5) * 2.0);
    vPos_15.xz = (tmpvar_14.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_20.x + (tmpvar_20.y * tmpvar_20.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_16)));
    vPos_15 = (normalize(vPos_15) * fLength_17);
    billboardPos_7 = vPos_15;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp float tmpvar_22;
  tmpvar_22 = (floor((
    ((_CameraXZAngle + tmpvar_13.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.x);
  highp float tmpvar_23;
  tmpvar_23 = (fract(abs(tmpvar_22)) * tmpvar_9.x);
  highp float tmpvar_24;
  if ((tmpvar_22 >= 0.0)) {
    tmpvar_24 = tmpvar_23;
  } else {
    tmpvar_24 = -(tmpvar_23);
  };
  highp vec4 tmpvar_25;
  tmpvar_25 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_24))];
  if ((tmpvar_25.w < 0.0)) {
    highp vec2 tmpvar_26;
    tmpvar_26 = (tmpvar_25.xy - (tmpvar_25.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_26;
  } else {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_25.xy + (tmpvar_25.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_27;
  };
  highp float tmpvar_28;
  tmpvar_28 = clamp ((fract(
    ((tmpvar_12.x + tmpvar_12.y) + tmpvar_12.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_28;
  tmpvar_2 = _Color;
  highp vec4 tmpvar_29;
  tmpvar_29 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (tmpvar_29 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = tmpvar_29.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_33;
  v_33.x = _World2Object[0].x;
  v_33.y = _World2Object[1].x;
  v_33.z = _World2Object[2].x;
  v_33.w = _World2Object[3].x;
  highp vec4 v_34;
  v_34.x = _World2Object[0].y;
  v_34.y = _World2Object[1].y;
  v_34.z = _World2Object[2].y;
  v_34.w = _World2Object[3].y;
  highp vec4 v_35;
  v_35.x = _World2Object[0].z;
  v_35.y = _World2Object[1].z;
  v_35.z = _World2Object[2].z;
  v_35.w = _World2Object[3].z;
  highp vec4 tmpvar_36;
  tmpvar_36.w = 1.0;
  tmpvar_36.xyz = normalize(((
    (v_33.xyz * _BillboardNormal.x)
   + 
    (v_34.xyz * _BillboardNormal.y)
  ) + (v_35.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_37;
  mediump vec4 normal_38;
  normal_38 = tmpvar_36;
  mediump vec3 x2_39;
  mediump vec3 x1_40;
  x1_40.x = dot (unity_SHAr, normal_38);
  x1_40.y = dot (unity_SHAg, normal_38);
  x1_40.z = dot (unity_SHAb, normal_38);
  mediump vec4 tmpvar_41;
  tmpvar_41 = (normal_38.xyzz * normal_38.yzzx);
  x2_39.x = dot (unity_SHBr, tmpvar_41);
  x2_39.y = dot (unity_SHBg, tmpvar_41);
  x2_39.z = dot (unity_SHBb, tmpvar_41);
  tmpvar_37 = ((x2_39 + (unity_SHC.xyz * 
    ((normal_38.x * normal_38.x) - (normal_38.y * normal_38.y))
  )) + x1_40);
  tmpvar_4 = tmpvar_37;
  gl_Position = tmpvar_29;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_30;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
in mediump vec4 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_9;
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_11 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_12;
  tmpvar_12 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_14.w;
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14.xyz + xlv_TEXCOORD5);
  light_3.xyz = tmpvar_15;
  lowp vec4 c_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_5 * light_3.xyz);
  c_16.xyz = tmpvar_17;
  c_16.w = tmpvar_6;
  c_2.xyz = c_16.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - tmpvar_12));
  highp vec3 tmpvar_14;
  tmpvar_14.y = 0.0;
  tmpvar_14.x = -(tmpvar_13.z);
  tmpvar_14.z = tmpvar_13.x;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15.z;
  tmpvar_16.z = -(tmpvar_15.x);
  highp float tmpvar_17;
  if ((abs(tmpvar_15.z) > (1e-08 * abs(tmpvar_16.z)))) {
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_16.z / tmpvar_15.z);
    tmpvar_17 = (tmpvar_18 * inversesqrt((
      (tmpvar_18 * tmpvar_18)
     + 1.0)));
    tmpvar_17 = (sign(tmpvar_17) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_17)))
     * 
      (1.570796 + (abs(tmpvar_17) * (-0.2146018 + (
        abs(tmpvar_17)
       * 
        (0.08656672 + (abs(tmpvar_17) * -0.03102955))
      ))))
    )));
    if ((tmpvar_15.z < 0.0)) {
      if ((tmpvar_16.z >= 0.0)) {
        tmpvar_17 += 3.141593;
      } else {
        tmpvar_17 = (tmpvar_17 - 3.141593);
      };
    };
  } else {
    tmpvar_17 = (sign(tmpvar_16.z) * 1.570796);
  };
  bvec3 tmpvar_19;
  tmpvar_19 = lessThan (vec3(tmpvar_17), vec3(0.0, 0.0, 0.0));
  float tmpvar_20;
  if (tmpvar_19.x) {
    tmpvar_20 = 6.283185;
  } else {
    tmpvar_20 = 0.0;
  };
  float tmpvar_21;
  if (tmpvar_19.y) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_19.z) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  vec3 tmpvar_23;
  tmpvar_23.x = tmpvar_20;
  tmpvar_23.y = tmpvar_21;
  tmpvar_23.z = tmpvar_22;
  highp vec3 tmpvar_24;
  tmpvar_24 = (vec3(tmpvar_17) + tmpvar_23);
  highp vec4 tmpvar_25;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_25 = _InstanceData;
  } else {
    tmpvar_25 = tmpvar_1;
  };
  highp vec3 tmpvar_26;
  tmpvar_26 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * tmpvar_25.x) * tmpvar_15);
  billboardPos_7.xz = tmpvar_26.xz;
  billboardPos_7.y = (tmpvar_26.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * tmpvar_25.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_27;
    vPos_27 = billboardPos_7;
    highp float fAdjust_28;
    highp float fLength_29;
    fLength_29 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_30;
    tmpvar_30 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_28 = tmpvar_30;
    if ((tmpvar_30 != 0.0)) {
      fAdjust_28 = pow (tmpvar_30, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_31;
    tmpvar_31.zw = vec2(0.0, 0.0);
    tmpvar_31.x = (tmpvar_12.x + tmpvar_25.w);
    tmpvar_31.y = (tmpvar_12.y + (tmpvar_25.w * 0.8));
    highp vec4 tmpvar_32;
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    tmpvar_32 = (((
      (tmpvar_33 * tmpvar_33)
     * 
      (3.0 - (2.0 * tmpvar_33))
    ) - 0.5) * 2.0);
    vPos_27.xz = (tmpvar_26.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_32.x + (tmpvar_32.y * tmpvar_32.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_28)));
    vPos_27 = (normalize(vPos_27) * fLength_29);
    billboardPos_7 = vPos_27;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_34;
  tmpvar_34 = (floor((
    ((tmpvar_24 + tmpvar_25.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.xxx);
  highp vec3 tmpvar_35;
  tmpvar_35 = (fract(abs(tmpvar_34)) * tmpvar_9.xxx);
  highp float tmpvar_36;
  if ((tmpvar_34.x >= 0.0)) {
    tmpvar_36 = tmpvar_35.x;
  } else {
    tmpvar_36 = -(tmpvar_35.x);
  };
  highp vec4 tmpvar_37;
  tmpvar_37 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_36))];
  if ((tmpvar_37.w < 0.0)) {
    highp vec2 tmpvar_38;
    tmpvar_38 = (tmpvar_37.xy - (tmpvar_37.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_38;
  } else {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_37.xy + (tmpvar_37.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_39;
  };
  tmpvar_2 = _Color;
  highp vec4 tmpvar_40;
  tmpvar_40 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_41;
  highp vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * 0.5);
  highp vec2 tmpvar_43;
  tmpvar_43.x = tmpvar_42.x;
  tmpvar_43.y = (tmpvar_42.y * _ProjectionParams.x);
  o_41.xy = (tmpvar_43 + tmpvar_42.w);
  o_41.zw = tmpvar_40.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_44;
  v_44.x = _World2Object[0].x;
  v_44.y = _World2Object[1].x;
  v_44.z = _World2Object[2].x;
  v_44.w = _World2Object[3].x;
  highp vec4 v_45;
  v_45.x = _World2Object[0].z;
  v_45.y = _World2Object[1].z;
  v_45.z = _World2Object[2].z;
  v_45.w = _World2Object[3].z;
  highp vec4 tmpvar_46;
  tmpvar_46.w = 1.0;
  tmpvar_46.xyz = normalize(((v_44.xyz * tmpvar_15.z) + (v_45.xyz * tmpvar_16.z)));
  mediump vec3 tmpvar_47;
  mediump vec4 normal_48;
  normal_48 = tmpvar_46;
  mediump vec3 x2_49;
  mediump vec3 x1_50;
  x1_50.x = dot (unity_SHAr, normal_48);
  x1_50.y = dot (unity_SHAg, normal_48);
  x1_50.z = dot (unity_SHAb, normal_48);
  mediump vec4 tmpvar_51;
  tmpvar_51 = (normal_48.xyzz * normal_48.yzzx);
  x2_49.x = dot (unity_SHBr, tmpvar_51);
  x2_49.y = dot (unity_SHBg, tmpvar_51);
  x2_49.z = dot (unity_SHBb, tmpvar_51);
  tmpvar_47 = ((x2_49 + (unity_SHC.xyz * 
    ((normal_48.x * normal_48.x) - (normal_48.y * normal_48.y))
  )) + x1_50);
  tmpvar_4 = tmpvar_47;
  gl_Position = tmpvar_40;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_41;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_9;
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_13.w;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13.xyz + xlv_TEXCOORD5);
  light_3.xyz = tmpvar_14;
  lowp vec4 c_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_5 * light_3.xyz);
  c_15.xyz = tmpvar_16;
  c_15.w = tmpvar_6;
  c_2.xyz = c_15.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out highp vec3 xlv_TEXCOORD0;
out mediump vec4 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - tmpvar_12));
  highp vec3 tmpvar_14;
  tmpvar_14.y = 0.0;
  tmpvar_14.x = -(tmpvar_13.z);
  tmpvar_14.z = tmpvar_13.x;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15.z;
  tmpvar_16.z = -(tmpvar_15.x);
  highp float tmpvar_17;
  if ((abs(tmpvar_15.z) > (1e-08 * abs(tmpvar_16.z)))) {
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_16.z / tmpvar_15.z);
    tmpvar_17 = (tmpvar_18 * inversesqrt((
      (tmpvar_18 * tmpvar_18)
     + 1.0)));
    tmpvar_17 = (sign(tmpvar_17) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_17)))
     * 
      (1.570796 + (abs(tmpvar_17) * (-0.2146018 + (
        abs(tmpvar_17)
       * 
        (0.08656672 + (abs(tmpvar_17) * -0.03102955))
      ))))
    )));
    if ((tmpvar_15.z < 0.0)) {
      if ((tmpvar_16.z >= 0.0)) {
        tmpvar_17 += 3.141593;
      } else {
        tmpvar_17 = (tmpvar_17 - 3.141593);
      };
    };
  } else {
    tmpvar_17 = (sign(tmpvar_16.z) * 1.570796);
  };
  bvec3 tmpvar_19;
  tmpvar_19 = lessThan (vec3(tmpvar_17), vec3(0.0, 0.0, 0.0));
  float tmpvar_20;
  if (tmpvar_19.x) {
    tmpvar_20 = 6.283185;
  } else {
    tmpvar_20 = 0.0;
  };
  float tmpvar_21;
  if (tmpvar_19.y) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_19.z) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  vec3 tmpvar_23;
  tmpvar_23.x = tmpvar_20;
  tmpvar_23.y = tmpvar_21;
  tmpvar_23.z = tmpvar_22;
  highp vec3 tmpvar_24;
  tmpvar_24 = (vec3(tmpvar_17) + tmpvar_23);
  highp vec4 tmpvar_25;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_25 = _InstanceData;
  } else {
    tmpvar_25 = tmpvar_1;
  };
  highp vec3 tmpvar_26;
  tmpvar_26 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * tmpvar_25.x) * tmpvar_15);
  billboardPos_7.xz = tmpvar_26.xz;
  billboardPos_7.y = (tmpvar_26.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * tmpvar_25.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_27;
    vPos_27 = billboardPos_7;
    highp float fAdjust_28;
    highp float fLength_29;
    fLength_29 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_30;
    tmpvar_30 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_28 = tmpvar_30;
    if ((tmpvar_30 != 0.0)) {
      fAdjust_28 = pow (tmpvar_30, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_31;
    tmpvar_31.zw = vec2(0.0, 0.0);
    tmpvar_31.x = (tmpvar_12.x + tmpvar_25.w);
    tmpvar_31.y = (tmpvar_12.y + (tmpvar_25.w * 0.8));
    highp vec4 tmpvar_32;
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    tmpvar_32 = (((
      (tmpvar_33 * tmpvar_33)
     * 
      (3.0 - (2.0 * tmpvar_33))
    ) - 0.5) * 2.0);
    vPos_27.xz = (tmpvar_26.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_32.x + (tmpvar_32.y * tmpvar_32.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_28)));
    vPos_27 = (normalize(vPos_27) * fLength_29);
    billboardPos_7 = vPos_27;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_34;
  tmpvar_34 = (floor((
    ((tmpvar_24 + tmpvar_25.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.xxx);
  highp vec3 tmpvar_35;
  tmpvar_35 = (fract(abs(tmpvar_34)) * tmpvar_9.xxx);
  highp float tmpvar_36;
  if ((tmpvar_34.x >= 0.0)) {
    tmpvar_36 = tmpvar_35.x;
  } else {
    tmpvar_36 = -(tmpvar_35.x);
  };
  highp vec4 tmpvar_37;
  tmpvar_37 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_36))];
  if ((tmpvar_37.w < 0.0)) {
    highp vec2 tmpvar_38;
    tmpvar_38 = (tmpvar_37.xy - (tmpvar_37.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_38;
  } else {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_37.xy + (tmpvar_37.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_39;
  };
  tmpvar_2 = _Color;
  highp vec4 tmpvar_40;
  tmpvar_40 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_41;
  highp vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * 0.5);
  highp vec2 tmpvar_43;
  tmpvar_43.x = tmpvar_42.x;
  tmpvar_43.y = (tmpvar_42.y * _ProjectionParams.x);
  o_41.xy = (tmpvar_43 + tmpvar_42.w);
  o_41.zw = tmpvar_40.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_44;
  v_44.x = _World2Object[0].x;
  v_44.y = _World2Object[1].x;
  v_44.z = _World2Object[2].x;
  v_44.w = _World2Object[3].x;
  highp vec4 v_45;
  v_45.x = _World2Object[0].z;
  v_45.y = _World2Object[1].z;
  v_45.z = _World2Object[2].z;
  v_45.w = _World2Object[3].z;
  highp vec4 tmpvar_46;
  tmpvar_46.w = 1.0;
  tmpvar_46.xyz = normalize(((v_44.xyz * tmpvar_15.z) + (v_45.xyz * tmpvar_16.z)));
  mediump vec3 tmpvar_47;
  mediump vec4 normal_48;
  normal_48 = tmpvar_46;
  mediump vec3 x2_49;
  mediump vec3 x1_50;
  x1_50.x = dot (unity_SHAr, normal_48);
  x1_50.y = dot (unity_SHAg, normal_48);
  x1_50.z = dot (unity_SHAb, normal_48);
  mediump vec4 tmpvar_51;
  tmpvar_51 = (normal_48.xyzz * normal_48.yzzx);
  x2_49.x = dot (unity_SHBr, tmpvar_51);
  x2_49.y = dot (unity_SHBg, tmpvar_51);
  x2_49.z = dot (unity_SHBb, tmpvar_51);
  tmpvar_47 = ((x2_49 + (unity_SHC.xyz * 
    ((normal_48.x * normal_48.x) - (normal_48.y * normal_48.y))
  )) + x1_50);
  tmpvar_4 = tmpvar_47;
  gl_Position = tmpvar_40;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_41;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
in mediump vec4 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_9;
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = textureProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_13.w;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13.xyz + xlv_TEXCOORD5);
  light_3.xyz = tmpvar_14;
  lowp vec4 c_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_5 * light_3.xyz);
  c_15.xyz = tmpvar_16;
  c_15.w = tmpvar_6;
  c_2.xyz = c_15.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - tmpvar_12));
  highp vec3 tmpvar_14;
  tmpvar_14.y = 0.0;
  tmpvar_14.x = -(tmpvar_13.z);
  tmpvar_14.z = tmpvar_13.x;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15.z;
  tmpvar_16.z = -(tmpvar_15.x);
  highp float tmpvar_17;
  if ((abs(tmpvar_15.z) > (1e-08 * abs(tmpvar_16.z)))) {
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_16.z / tmpvar_15.z);
    tmpvar_17 = (tmpvar_18 * inversesqrt((
      (tmpvar_18 * tmpvar_18)
     + 1.0)));
    tmpvar_17 = (sign(tmpvar_17) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_17)))
     * 
      (1.570796 + (abs(tmpvar_17) * (-0.2146018 + (
        abs(tmpvar_17)
       * 
        (0.08656672 + (abs(tmpvar_17) * -0.03102955))
      ))))
    )));
    if ((tmpvar_15.z < 0.0)) {
      if ((tmpvar_16.z >= 0.0)) {
        tmpvar_17 += 3.141593;
      } else {
        tmpvar_17 = (tmpvar_17 - 3.141593);
      };
    };
  } else {
    tmpvar_17 = (sign(tmpvar_16.z) * 1.570796);
  };
  bvec3 tmpvar_19;
  tmpvar_19 = lessThan (vec3(tmpvar_17), vec3(0.0, 0.0, 0.0));
  float tmpvar_20;
  if (tmpvar_19.x) {
    tmpvar_20 = 6.283185;
  } else {
    tmpvar_20 = 0.0;
  };
  float tmpvar_21;
  if (tmpvar_19.y) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_19.z) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  vec3 tmpvar_23;
  tmpvar_23.x = tmpvar_20;
  tmpvar_23.y = tmpvar_21;
  tmpvar_23.z = tmpvar_22;
  highp vec3 tmpvar_24;
  tmpvar_24 = (vec3(tmpvar_17) + tmpvar_23);
  highp vec4 tmpvar_25;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_25 = _InstanceData;
  } else {
    tmpvar_25 = tmpvar_1;
  };
  highp vec3 tmpvar_26;
  tmpvar_26 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * tmpvar_25.x) * tmpvar_15);
  billboardPos_7.xz = tmpvar_26.xz;
  billboardPos_7.y = (tmpvar_26.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * tmpvar_25.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_27;
    vPos_27 = billboardPos_7;
    highp float fAdjust_28;
    highp float fLength_29;
    fLength_29 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_30;
    tmpvar_30 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_28 = tmpvar_30;
    if ((tmpvar_30 != 0.0)) {
      fAdjust_28 = pow (tmpvar_30, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_31;
    tmpvar_31.zw = vec2(0.0, 0.0);
    tmpvar_31.x = (tmpvar_12.x + tmpvar_25.w);
    tmpvar_31.y = (tmpvar_12.y + (tmpvar_25.w * 0.8));
    highp vec4 tmpvar_32;
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    tmpvar_32 = (((
      (tmpvar_33 * tmpvar_33)
     * 
      (3.0 - (2.0 * tmpvar_33))
    ) - 0.5) * 2.0);
    vPos_27.xz = (tmpvar_26.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_32.x + (tmpvar_32.y * tmpvar_32.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_28)));
    vPos_27 = (normalize(vPos_27) * fLength_29);
    billboardPos_7 = vPos_27;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_34;
  tmpvar_34 = (floor((
    ((tmpvar_24 + tmpvar_25.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.xxx);
  highp vec3 tmpvar_35;
  tmpvar_35 = (fract(abs(tmpvar_34)) * tmpvar_9.xxx);
  highp float tmpvar_36;
  if ((tmpvar_34.x >= 0.0)) {
    tmpvar_36 = tmpvar_35.x;
  } else {
    tmpvar_36 = -(tmpvar_35.x);
  };
  highp vec4 tmpvar_37;
  tmpvar_37 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_36))];
  if ((tmpvar_37.w < 0.0)) {
    highp vec2 tmpvar_38;
    tmpvar_38 = (tmpvar_37.xy - (tmpvar_37.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_38;
  } else {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_37.xy + (tmpvar_37.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_39;
  };
  tmpvar_2 = _Color;
  highp vec4 tmpvar_40;
  tmpvar_40 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_41;
  highp vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * 0.5);
  highp vec2 tmpvar_43;
  tmpvar_43.x = tmpvar_42.x;
  tmpvar_43.y = (tmpvar_42.y * _ProjectionParams.x);
  o_41.xy = (tmpvar_43 + tmpvar_42.w);
  o_41.zw = tmpvar_40.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_44;
  v_44.x = _World2Object[0].x;
  v_44.y = _World2Object[1].x;
  v_44.z = _World2Object[2].x;
  v_44.w = _World2Object[3].x;
  highp vec4 v_45;
  v_45.x = _World2Object[0].z;
  v_45.y = _World2Object[1].z;
  v_45.z = _World2Object[2].z;
  v_45.w = _World2Object[3].z;
  highp vec4 tmpvar_46;
  tmpvar_46.w = 1.0;
  tmpvar_46.xyz = normalize(((v_44.xyz * tmpvar_15.z) + (v_45.xyz * tmpvar_16.z)));
  mediump vec3 tmpvar_47;
  mediump vec4 normal_48;
  normal_48 = tmpvar_46;
  mediump vec3 x2_49;
  mediump vec3 x1_50;
  x1_50.x = dot (unity_SHAr, normal_48);
  x1_50.y = dot (unity_SHAg, normal_48);
  x1_50.z = dot (unity_SHAb, normal_48);
  mediump vec4 tmpvar_51;
  tmpvar_51 = (normal_48.xyzz * normal_48.yzzx);
  x2_49.x = dot (unity_SHBr, tmpvar_51);
  x2_49.y = dot (unity_SHBg, tmpvar_51);
  x2_49.z = dot (unity_SHBb, tmpvar_51);
  tmpvar_47 = ((x2_49 + (unity_SHC.xyz * 
    ((normal_48.x * normal_48.x) - (normal_48.y * normal_48.y))
  )) + x1_50);
  tmpvar_4 = tmpvar_47;
  gl_Position = tmpvar_40;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_41;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_9;
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_13.w;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13.xyz + xlv_TEXCOORD5);
  light_3.xyz = tmpvar_14;
  lowp vec4 c_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_5 * light_3.xyz);
  c_15.xyz = tmpvar_16;
  c_15.w = tmpvar_6;
  c_2.xyz = c_15.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out highp vec3 xlv_TEXCOORD0;
out mediump vec4 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - tmpvar_12));
  highp vec3 tmpvar_14;
  tmpvar_14.y = 0.0;
  tmpvar_14.x = -(tmpvar_13.z);
  tmpvar_14.z = tmpvar_13.x;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15.z;
  tmpvar_16.z = -(tmpvar_15.x);
  highp float tmpvar_17;
  if ((abs(tmpvar_15.z) > (1e-08 * abs(tmpvar_16.z)))) {
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_16.z / tmpvar_15.z);
    tmpvar_17 = (tmpvar_18 * inversesqrt((
      (tmpvar_18 * tmpvar_18)
     + 1.0)));
    tmpvar_17 = (sign(tmpvar_17) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_17)))
     * 
      (1.570796 + (abs(tmpvar_17) * (-0.2146018 + (
        abs(tmpvar_17)
       * 
        (0.08656672 + (abs(tmpvar_17) * -0.03102955))
      ))))
    )));
    if ((tmpvar_15.z < 0.0)) {
      if ((tmpvar_16.z >= 0.0)) {
        tmpvar_17 += 3.141593;
      } else {
        tmpvar_17 = (tmpvar_17 - 3.141593);
      };
    };
  } else {
    tmpvar_17 = (sign(tmpvar_16.z) * 1.570796);
  };
  bvec3 tmpvar_19;
  tmpvar_19 = lessThan (vec3(tmpvar_17), vec3(0.0, 0.0, 0.0));
  float tmpvar_20;
  if (tmpvar_19.x) {
    tmpvar_20 = 6.283185;
  } else {
    tmpvar_20 = 0.0;
  };
  float tmpvar_21;
  if (tmpvar_19.y) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_19.z) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  vec3 tmpvar_23;
  tmpvar_23.x = tmpvar_20;
  tmpvar_23.y = tmpvar_21;
  tmpvar_23.z = tmpvar_22;
  highp vec3 tmpvar_24;
  tmpvar_24 = (vec3(tmpvar_17) + tmpvar_23);
  highp vec4 tmpvar_25;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_25 = _InstanceData;
  } else {
    tmpvar_25 = tmpvar_1;
  };
  highp vec3 tmpvar_26;
  tmpvar_26 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * tmpvar_25.x) * tmpvar_15);
  billboardPos_7.xz = tmpvar_26.xz;
  billboardPos_7.y = (tmpvar_26.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * tmpvar_25.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_27;
    vPos_27 = billboardPos_7;
    highp float fAdjust_28;
    highp float fLength_29;
    fLength_29 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_30;
    tmpvar_30 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_28 = tmpvar_30;
    if ((tmpvar_30 != 0.0)) {
      fAdjust_28 = pow (tmpvar_30, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_31;
    tmpvar_31.zw = vec2(0.0, 0.0);
    tmpvar_31.x = (tmpvar_12.x + tmpvar_25.w);
    tmpvar_31.y = (tmpvar_12.y + (tmpvar_25.w * 0.8));
    highp vec4 tmpvar_32;
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    tmpvar_32 = (((
      (tmpvar_33 * tmpvar_33)
     * 
      (3.0 - (2.0 * tmpvar_33))
    ) - 0.5) * 2.0);
    vPos_27.xz = (tmpvar_26.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_32.x + (tmpvar_32.y * tmpvar_32.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_28)));
    vPos_27 = (normalize(vPos_27) * fLength_29);
    billboardPos_7 = vPos_27;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_34;
  tmpvar_34 = (floor((
    ((tmpvar_24 + tmpvar_25.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.xxx);
  highp vec3 tmpvar_35;
  tmpvar_35 = (fract(abs(tmpvar_34)) * tmpvar_9.xxx);
  highp float tmpvar_36;
  if ((tmpvar_34.x >= 0.0)) {
    tmpvar_36 = tmpvar_35.x;
  } else {
    tmpvar_36 = -(tmpvar_35.x);
  };
  highp vec4 tmpvar_37;
  tmpvar_37 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_36))];
  if ((tmpvar_37.w < 0.0)) {
    highp vec2 tmpvar_38;
    tmpvar_38 = (tmpvar_37.xy - (tmpvar_37.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_38;
  } else {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_37.xy + (tmpvar_37.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_39;
  };
  tmpvar_2 = _Color;
  highp vec4 tmpvar_40;
  tmpvar_40 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_41;
  highp vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * 0.5);
  highp vec2 tmpvar_43;
  tmpvar_43.x = tmpvar_42.x;
  tmpvar_43.y = (tmpvar_42.y * _ProjectionParams.x);
  o_41.xy = (tmpvar_43 + tmpvar_42.w);
  o_41.zw = tmpvar_40.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_44;
  v_44.x = _World2Object[0].x;
  v_44.y = _World2Object[1].x;
  v_44.z = _World2Object[2].x;
  v_44.w = _World2Object[3].x;
  highp vec4 v_45;
  v_45.x = _World2Object[0].z;
  v_45.y = _World2Object[1].z;
  v_45.z = _World2Object[2].z;
  v_45.w = _World2Object[3].z;
  highp vec4 tmpvar_46;
  tmpvar_46.w = 1.0;
  tmpvar_46.xyz = normalize(((v_44.xyz * tmpvar_15.z) + (v_45.xyz * tmpvar_16.z)));
  mediump vec3 tmpvar_47;
  mediump vec4 normal_48;
  normal_48 = tmpvar_46;
  mediump vec3 x2_49;
  mediump vec3 x1_50;
  x1_50.x = dot (unity_SHAr, normal_48);
  x1_50.y = dot (unity_SHAg, normal_48);
  x1_50.z = dot (unity_SHAb, normal_48);
  mediump vec4 tmpvar_51;
  tmpvar_51 = (normal_48.xyzz * normal_48.yzzx);
  x2_49.x = dot (unity_SHBr, tmpvar_51);
  x2_49.y = dot (unity_SHBg, tmpvar_51);
  x2_49.z = dot (unity_SHBb, tmpvar_51);
  tmpvar_47 = ((x2_49 + (unity_SHC.xyz * 
    ((normal_48.x * normal_48.x) - (normal_48.y * normal_48.y))
  )) + x1_50);
  tmpvar_4 = tmpvar_47;
  gl_Position = tmpvar_40;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_41;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
in mediump vec4 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_9;
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = textureProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_13.w;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13.xyz + xlv_TEXCOORD5);
  light_3.xyz = tmpvar_14;
  lowp vec4 c_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_5 * light_3.xyz);
  c_15.xyz = tmpvar_16;
  c_15.w = tmpvar_6;
  c_2.xyz = c_15.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - tmpvar_12));
  highp vec3 tmpvar_14;
  tmpvar_14.y = 0.0;
  tmpvar_14.x = -(tmpvar_13.z);
  tmpvar_14.z = tmpvar_13.x;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15.z;
  tmpvar_16.z = -(tmpvar_15.x);
  highp float tmpvar_17;
  if ((abs(tmpvar_15.z) > (1e-08 * abs(tmpvar_16.z)))) {
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_16.z / tmpvar_15.z);
    tmpvar_17 = (tmpvar_18 * inversesqrt((
      (tmpvar_18 * tmpvar_18)
     + 1.0)));
    tmpvar_17 = (sign(tmpvar_17) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_17)))
     * 
      (1.570796 + (abs(tmpvar_17) * (-0.2146018 + (
        abs(tmpvar_17)
       * 
        (0.08656672 + (abs(tmpvar_17) * -0.03102955))
      ))))
    )));
    if ((tmpvar_15.z < 0.0)) {
      if ((tmpvar_16.z >= 0.0)) {
        tmpvar_17 += 3.141593;
      } else {
        tmpvar_17 = (tmpvar_17 - 3.141593);
      };
    };
  } else {
    tmpvar_17 = (sign(tmpvar_16.z) * 1.570796);
  };
  bvec3 tmpvar_19;
  tmpvar_19 = lessThan (vec3(tmpvar_17), vec3(0.0, 0.0, 0.0));
  float tmpvar_20;
  if (tmpvar_19.x) {
    tmpvar_20 = 6.283185;
  } else {
    tmpvar_20 = 0.0;
  };
  float tmpvar_21;
  if (tmpvar_19.y) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_19.z) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  vec3 tmpvar_23;
  tmpvar_23.x = tmpvar_20;
  tmpvar_23.y = tmpvar_21;
  tmpvar_23.z = tmpvar_22;
  highp vec3 tmpvar_24;
  tmpvar_24 = (vec3(tmpvar_17) + tmpvar_23);
  highp vec4 tmpvar_25;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_25 = _InstanceData;
  } else {
    tmpvar_25 = tmpvar_1;
  };
  highp vec3 tmpvar_26;
  tmpvar_26 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * tmpvar_25.x) * tmpvar_15);
  billboardPos_7.xz = tmpvar_26.xz;
  billboardPos_7.y = (tmpvar_26.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * tmpvar_25.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_27;
    vPos_27 = billboardPos_7;
    highp float fAdjust_28;
    highp float fLength_29;
    fLength_29 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_30;
    tmpvar_30 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_28 = tmpvar_30;
    if ((tmpvar_30 != 0.0)) {
      fAdjust_28 = pow (tmpvar_30, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_31;
    tmpvar_31.zw = vec2(0.0, 0.0);
    tmpvar_31.x = (tmpvar_12.x + tmpvar_25.w);
    tmpvar_31.y = (tmpvar_12.y + (tmpvar_25.w * 0.8));
    highp vec4 tmpvar_32;
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    tmpvar_32 = (((
      (tmpvar_33 * tmpvar_33)
     * 
      (3.0 - (2.0 * tmpvar_33))
    ) - 0.5) * 2.0);
    vPos_27.xz = (tmpvar_26.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_32.x + (tmpvar_32.y * tmpvar_32.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_28)));
    vPos_27 = (normalize(vPos_27) * fLength_29);
    billboardPos_7 = vPos_27;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_34;
  tmpvar_34 = (floor((
    ((tmpvar_24 + tmpvar_25.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.xxx);
  highp vec3 tmpvar_35;
  tmpvar_35 = (fract(abs(tmpvar_34)) * tmpvar_9.xxx);
  highp float tmpvar_36;
  if ((tmpvar_34.x >= 0.0)) {
    tmpvar_36 = tmpvar_35.x;
  } else {
    tmpvar_36 = -(tmpvar_35.x);
  };
  highp vec4 tmpvar_37;
  tmpvar_37 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_36))];
  if ((tmpvar_37.w < 0.0)) {
    highp vec2 tmpvar_38;
    tmpvar_38 = (tmpvar_37.xy - (tmpvar_37.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_38;
  } else {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_37.xy + (tmpvar_37.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_39;
  };
  highp float tmpvar_40;
  tmpvar_40 = clamp ((fract(
    ((tmpvar_12.x + tmpvar_12.y) + tmpvar_12.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_40;
  tmpvar_2 = _Color;
  highp vec4 tmpvar_41;
  tmpvar_41 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * 0.5);
  highp vec2 tmpvar_44;
  tmpvar_44.x = tmpvar_43.x;
  tmpvar_44.y = (tmpvar_43.y * _ProjectionParams.x);
  o_42.xy = (tmpvar_44 + tmpvar_43.w);
  o_42.zw = tmpvar_41.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_45;
  v_45.x = _World2Object[0].x;
  v_45.y = _World2Object[1].x;
  v_45.z = _World2Object[2].x;
  v_45.w = _World2Object[3].x;
  highp vec4 v_46;
  v_46.x = _World2Object[0].z;
  v_46.y = _World2Object[1].z;
  v_46.z = _World2Object[2].z;
  v_46.w = _World2Object[3].z;
  highp vec4 tmpvar_47;
  tmpvar_47.w = 1.0;
  tmpvar_47.xyz = normalize(((v_45.xyz * tmpvar_15.z) + (v_46.xyz * tmpvar_16.z)));
  mediump vec3 tmpvar_48;
  mediump vec4 normal_49;
  normal_49 = tmpvar_47;
  mediump vec3 x2_50;
  mediump vec3 x1_51;
  x1_51.x = dot (unity_SHAr, normal_49);
  x1_51.y = dot (unity_SHAg, normal_49);
  x1_51.z = dot (unity_SHAb, normal_49);
  mediump vec4 tmpvar_52;
  tmpvar_52 = (normal_49.xyzz * normal_49.yzzx);
  x2_50.x = dot (unity_SHBr, tmpvar_52);
  x2_50.y = dot (unity_SHBg, tmpvar_52);
  x2_50.z = dot (unity_SHBb, tmpvar_52);
  tmpvar_48 = ((x2_50 + (unity_SHC.xyz * 
    ((normal_49.x * normal_49.x) - (normal_49.y * normal_49.y))
  )) + x1_51);
  tmpvar_4 = tmpvar_48;
  gl_Position = tmpvar_41;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_42;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_9;
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_11 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_12;
  tmpvar_12 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_14.w;
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14.xyz + xlv_TEXCOORD5);
  light_3.xyz = tmpvar_15;
  lowp vec4 c_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_5 * light_3.xyz);
  c_16.xyz = tmpvar_17;
  c_16.w = tmpvar_6;
  c_2.xyz = c_16.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out highp vec3 xlv_TEXCOORD0;
out mediump vec4 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - tmpvar_12));
  highp vec3 tmpvar_14;
  tmpvar_14.y = 0.0;
  tmpvar_14.x = -(tmpvar_13.z);
  tmpvar_14.z = tmpvar_13.x;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15.z;
  tmpvar_16.z = -(tmpvar_15.x);
  highp float tmpvar_17;
  if ((abs(tmpvar_15.z) > (1e-08 * abs(tmpvar_16.z)))) {
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_16.z / tmpvar_15.z);
    tmpvar_17 = (tmpvar_18 * inversesqrt((
      (tmpvar_18 * tmpvar_18)
     + 1.0)));
    tmpvar_17 = (sign(tmpvar_17) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_17)))
     * 
      (1.570796 + (abs(tmpvar_17) * (-0.2146018 + (
        abs(tmpvar_17)
       * 
        (0.08656672 + (abs(tmpvar_17) * -0.03102955))
      ))))
    )));
    if ((tmpvar_15.z < 0.0)) {
      if ((tmpvar_16.z >= 0.0)) {
        tmpvar_17 += 3.141593;
      } else {
        tmpvar_17 = (tmpvar_17 - 3.141593);
      };
    };
  } else {
    tmpvar_17 = (sign(tmpvar_16.z) * 1.570796);
  };
  bvec3 tmpvar_19;
  tmpvar_19 = lessThan (vec3(tmpvar_17), vec3(0.0, 0.0, 0.0));
  float tmpvar_20;
  if (tmpvar_19.x) {
    tmpvar_20 = 6.283185;
  } else {
    tmpvar_20 = 0.0;
  };
  float tmpvar_21;
  if (tmpvar_19.y) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_19.z) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  vec3 tmpvar_23;
  tmpvar_23.x = tmpvar_20;
  tmpvar_23.y = tmpvar_21;
  tmpvar_23.z = tmpvar_22;
  highp vec3 tmpvar_24;
  tmpvar_24 = (vec3(tmpvar_17) + tmpvar_23);
  highp vec4 tmpvar_25;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_25 = _InstanceData;
  } else {
    tmpvar_25 = tmpvar_1;
  };
  highp vec3 tmpvar_26;
  tmpvar_26 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * tmpvar_25.x) * tmpvar_15);
  billboardPos_7.xz = tmpvar_26.xz;
  billboardPos_7.y = (tmpvar_26.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * tmpvar_25.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_27;
    vPos_27 = billboardPos_7;
    highp float fAdjust_28;
    highp float fLength_29;
    fLength_29 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_30;
    tmpvar_30 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_28 = tmpvar_30;
    if ((tmpvar_30 != 0.0)) {
      fAdjust_28 = pow (tmpvar_30, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_31;
    tmpvar_31.zw = vec2(0.0, 0.0);
    tmpvar_31.x = (tmpvar_12.x + tmpvar_25.w);
    tmpvar_31.y = (tmpvar_12.y + (tmpvar_25.w * 0.8));
    highp vec4 tmpvar_32;
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    tmpvar_32 = (((
      (tmpvar_33 * tmpvar_33)
     * 
      (3.0 - (2.0 * tmpvar_33))
    ) - 0.5) * 2.0);
    vPos_27.xz = (tmpvar_26.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_32.x + (tmpvar_32.y * tmpvar_32.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_28)));
    vPos_27 = (normalize(vPos_27) * fLength_29);
    billboardPos_7 = vPos_27;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_34;
  tmpvar_34 = (floor((
    ((tmpvar_24 + tmpvar_25.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.xxx);
  highp vec3 tmpvar_35;
  tmpvar_35 = (fract(abs(tmpvar_34)) * tmpvar_9.xxx);
  highp float tmpvar_36;
  if ((tmpvar_34.x >= 0.0)) {
    tmpvar_36 = tmpvar_35.x;
  } else {
    tmpvar_36 = -(tmpvar_35.x);
  };
  highp vec4 tmpvar_37;
  tmpvar_37 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_36))];
  if ((tmpvar_37.w < 0.0)) {
    highp vec2 tmpvar_38;
    tmpvar_38 = (tmpvar_37.xy - (tmpvar_37.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_38;
  } else {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_37.xy + (tmpvar_37.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_39;
  };
  highp float tmpvar_40;
  tmpvar_40 = clamp ((fract(
    ((tmpvar_12.x + tmpvar_12.y) + tmpvar_12.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_40;
  tmpvar_2 = _Color;
  highp vec4 tmpvar_41;
  tmpvar_41 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * 0.5);
  highp vec2 tmpvar_44;
  tmpvar_44.x = tmpvar_43.x;
  tmpvar_44.y = (tmpvar_43.y * _ProjectionParams.x);
  o_42.xy = (tmpvar_44 + tmpvar_43.w);
  o_42.zw = tmpvar_41.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_45;
  v_45.x = _World2Object[0].x;
  v_45.y = _World2Object[1].x;
  v_45.z = _World2Object[2].x;
  v_45.w = _World2Object[3].x;
  highp vec4 v_46;
  v_46.x = _World2Object[0].z;
  v_46.y = _World2Object[1].z;
  v_46.z = _World2Object[2].z;
  v_46.w = _World2Object[3].z;
  highp vec4 tmpvar_47;
  tmpvar_47.w = 1.0;
  tmpvar_47.xyz = normalize(((v_45.xyz * tmpvar_15.z) + (v_46.xyz * tmpvar_16.z)));
  mediump vec3 tmpvar_48;
  mediump vec4 normal_49;
  normal_49 = tmpvar_47;
  mediump vec3 x2_50;
  mediump vec3 x1_51;
  x1_51.x = dot (unity_SHAr, normal_49);
  x1_51.y = dot (unity_SHAg, normal_49);
  x1_51.z = dot (unity_SHAb, normal_49);
  mediump vec4 tmpvar_52;
  tmpvar_52 = (normal_49.xyzz * normal_49.yzzx);
  x2_50.x = dot (unity_SHBr, tmpvar_52);
  x2_50.y = dot (unity_SHBg, tmpvar_52);
  x2_50.z = dot (unity_SHBb, tmpvar_52);
  tmpvar_48 = ((x2_50 + (unity_SHC.xyz * 
    ((normal_49.x * normal_49.x) - (normal_49.y * normal_49.y))
  )) + x1_51);
  tmpvar_4 = tmpvar_48;
  gl_Position = tmpvar_41;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_42;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
in mediump vec4 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_9;
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_11 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_12;
  tmpvar_12 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_14.w;
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14.xyz + xlv_TEXCOORD5);
  light_3.xyz = tmpvar_15;
  lowp vec4 c_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_5 * light_3.xyz);
  c_16.xyz = tmpvar_17;
  c_16.w = tmpvar_6;
  c_2.xyz = c_16.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - tmpvar_12));
  highp vec3 tmpvar_14;
  tmpvar_14.y = 0.0;
  tmpvar_14.x = -(tmpvar_13.z);
  tmpvar_14.z = tmpvar_13.x;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15.z;
  tmpvar_16.z = -(tmpvar_15.x);
  highp float tmpvar_17;
  if ((abs(tmpvar_15.z) > (1e-08 * abs(tmpvar_16.z)))) {
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_16.z / tmpvar_15.z);
    tmpvar_17 = (tmpvar_18 * inversesqrt((
      (tmpvar_18 * tmpvar_18)
     + 1.0)));
    tmpvar_17 = (sign(tmpvar_17) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_17)))
     * 
      (1.570796 + (abs(tmpvar_17) * (-0.2146018 + (
        abs(tmpvar_17)
       * 
        (0.08656672 + (abs(tmpvar_17) * -0.03102955))
      ))))
    )));
    if ((tmpvar_15.z < 0.0)) {
      if ((tmpvar_16.z >= 0.0)) {
        tmpvar_17 += 3.141593;
      } else {
        tmpvar_17 = (tmpvar_17 - 3.141593);
      };
    };
  } else {
    tmpvar_17 = (sign(tmpvar_16.z) * 1.570796);
  };
  bvec3 tmpvar_19;
  tmpvar_19 = lessThan (vec3(tmpvar_17), vec3(0.0, 0.0, 0.0));
  float tmpvar_20;
  if (tmpvar_19.x) {
    tmpvar_20 = 6.283185;
  } else {
    tmpvar_20 = 0.0;
  };
  float tmpvar_21;
  if (tmpvar_19.y) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_19.z) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  vec3 tmpvar_23;
  tmpvar_23.x = tmpvar_20;
  tmpvar_23.y = tmpvar_21;
  tmpvar_23.z = tmpvar_22;
  highp vec3 tmpvar_24;
  tmpvar_24 = (vec3(tmpvar_17) + tmpvar_23);
  highp vec4 tmpvar_25;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_25 = _InstanceData;
  } else {
    tmpvar_25 = tmpvar_1;
  };
  highp vec3 tmpvar_26;
  tmpvar_26 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * tmpvar_25.x) * tmpvar_15);
  billboardPos_7.xz = tmpvar_26.xz;
  billboardPos_7.y = (tmpvar_26.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * tmpvar_25.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_27;
    vPos_27 = billboardPos_7;
    highp float fAdjust_28;
    highp float fLength_29;
    fLength_29 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_30;
    tmpvar_30 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_28 = tmpvar_30;
    if ((tmpvar_30 != 0.0)) {
      fAdjust_28 = pow (tmpvar_30, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_31;
    tmpvar_31.zw = vec2(0.0, 0.0);
    tmpvar_31.x = (tmpvar_12.x + tmpvar_25.w);
    tmpvar_31.y = (tmpvar_12.y + (tmpvar_25.w * 0.8));
    highp vec4 tmpvar_32;
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    tmpvar_32 = (((
      (tmpvar_33 * tmpvar_33)
     * 
      (3.0 - (2.0 * tmpvar_33))
    ) - 0.5) * 2.0);
    vPos_27.xz = (tmpvar_26.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_32.x + (tmpvar_32.y * tmpvar_32.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_28)));
    vPos_27 = (normalize(vPos_27) * fLength_29);
    billboardPos_7 = vPos_27;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_34;
  tmpvar_34 = (floor((
    ((tmpvar_24 + tmpvar_25.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.xxx);
  highp vec3 tmpvar_35;
  tmpvar_35 = (fract(abs(tmpvar_34)) * tmpvar_9.xxx);
  highp float tmpvar_36;
  if ((tmpvar_34.x >= 0.0)) {
    tmpvar_36 = tmpvar_35.x;
  } else {
    tmpvar_36 = -(tmpvar_35.x);
  };
  highp vec4 tmpvar_37;
  tmpvar_37 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_36))];
  if ((tmpvar_37.w < 0.0)) {
    highp vec2 tmpvar_38;
    tmpvar_38 = (tmpvar_37.xy - (tmpvar_37.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_38;
  } else {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_37.xy + (tmpvar_37.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_39;
  };
  highp float tmpvar_40;
  tmpvar_40 = clamp ((fract(
    ((tmpvar_12.x + tmpvar_12.y) + tmpvar_12.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_40;
  tmpvar_2 = _Color;
  highp vec4 tmpvar_41;
  tmpvar_41 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * 0.5);
  highp vec2 tmpvar_44;
  tmpvar_44.x = tmpvar_43.x;
  tmpvar_44.y = (tmpvar_43.y * _ProjectionParams.x);
  o_42.xy = (tmpvar_44 + tmpvar_43.w);
  o_42.zw = tmpvar_41.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_45;
  v_45.x = _World2Object[0].x;
  v_45.y = _World2Object[1].x;
  v_45.z = _World2Object[2].x;
  v_45.w = _World2Object[3].x;
  highp vec4 v_46;
  v_46.x = _World2Object[0].z;
  v_46.y = _World2Object[1].z;
  v_46.z = _World2Object[2].z;
  v_46.w = _World2Object[3].z;
  highp vec4 tmpvar_47;
  tmpvar_47.w = 1.0;
  tmpvar_47.xyz = normalize(((v_45.xyz * tmpvar_15.z) + (v_46.xyz * tmpvar_16.z)));
  mediump vec3 tmpvar_48;
  mediump vec4 normal_49;
  normal_49 = tmpvar_47;
  mediump vec3 x2_50;
  mediump vec3 x1_51;
  x1_51.x = dot (unity_SHAr, normal_49);
  x1_51.y = dot (unity_SHAg, normal_49);
  x1_51.z = dot (unity_SHAb, normal_49);
  mediump vec4 tmpvar_52;
  tmpvar_52 = (normal_49.xyzz * normal_49.yzzx);
  x2_50.x = dot (unity_SHBr, tmpvar_52);
  x2_50.y = dot (unity_SHBg, tmpvar_52);
  x2_50.z = dot (unity_SHBb, tmpvar_52);
  tmpvar_48 = ((x2_50 + (unity_SHC.xyz * 
    ((normal_49.x * normal_49.x) - (normal_49.y * normal_49.y))
  )) + x1_51);
  tmpvar_4 = tmpvar_48;
  gl_Position = tmpvar_41;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_42;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_9;
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_11 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_12;
  tmpvar_12 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_14.w;
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14.xyz + xlv_TEXCOORD5);
  light_3.xyz = tmpvar_15;
  lowp vec4 c_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_5 * light_3.xyz);
  c_16.xyz = tmpvar_17;
  c_16.w = tmpvar_6;
  c_2.xyz = c_16.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out highp vec3 xlv_TEXCOORD0;
out mediump vec4 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - tmpvar_12));
  highp vec3 tmpvar_14;
  tmpvar_14.y = 0.0;
  tmpvar_14.x = -(tmpvar_13.z);
  tmpvar_14.z = tmpvar_13.x;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15.z;
  tmpvar_16.z = -(tmpvar_15.x);
  highp float tmpvar_17;
  if ((abs(tmpvar_15.z) > (1e-08 * abs(tmpvar_16.z)))) {
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_16.z / tmpvar_15.z);
    tmpvar_17 = (tmpvar_18 * inversesqrt((
      (tmpvar_18 * tmpvar_18)
     + 1.0)));
    tmpvar_17 = (sign(tmpvar_17) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_17)))
     * 
      (1.570796 + (abs(tmpvar_17) * (-0.2146018 + (
        abs(tmpvar_17)
       * 
        (0.08656672 + (abs(tmpvar_17) * -0.03102955))
      ))))
    )));
    if ((tmpvar_15.z < 0.0)) {
      if ((tmpvar_16.z >= 0.0)) {
        tmpvar_17 += 3.141593;
      } else {
        tmpvar_17 = (tmpvar_17 - 3.141593);
      };
    };
  } else {
    tmpvar_17 = (sign(tmpvar_16.z) * 1.570796);
  };
  bvec3 tmpvar_19;
  tmpvar_19 = lessThan (vec3(tmpvar_17), vec3(0.0, 0.0, 0.0));
  float tmpvar_20;
  if (tmpvar_19.x) {
    tmpvar_20 = 6.283185;
  } else {
    tmpvar_20 = 0.0;
  };
  float tmpvar_21;
  if (tmpvar_19.y) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_19.z) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  vec3 tmpvar_23;
  tmpvar_23.x = tmpvar_20;
  tmpvar_23.y = tmpvar_21;
  tmpvar_23.z = tmpvar_22;
  highp vec3 tmpvar_24;
  tmpvar_24 = (vec3(tmpvar_17) + tmpvar_23);
  highp vec4 tmpvar_25;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_25 = _InstanceData;
  } else {
    tmpvar_25 = tmpvar_1;
  };
  highp vec3 tmpvar_26;
  tmpvar_26 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * tmpvar_25.x) * tmpvar_15);
  billboardPos_7.xz = tmpvar_26.xz;
  billboardPos_7.y = (tmpvar_26.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * tmpvar_25.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_27;
    vPos_27 = billboardPos_7;
    highp float fAdjust_28;
    highp float fLength_29;
    fLength_29 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_30;
    tmpvar_30 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_28 = tmpvar_30;
    if ((tmpvar_30 != 0.0)) {
      fAdjust_28 = pow (tmpvar_30, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_31;
    tmpvar_31.zw = vec2(0.0, 0.0);
    tmpvar_31.x = (tmpvar_12.x + tmpvar_25.w);
    tmpvar_31.y = (tmpvar_12.y + (tmpvar_25.w * 0.8));
    highp vec4 tmpvar_32;
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    tmpvar_32 = (((
      (tmpvar_33 * tmpvar_33)
     * 
      (3.0 - (2.0 * tmpvar_33))
    ) - 0.5) * 2.0);
    vPos_27.xz = (tmpvar_26.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_32.x + (tmpvar_32.y * tmpvar_32.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_28)));
    vPos_27 = (normalize(vPos_27) * fLength_29);
    billboardPos_7 = vPos_27;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_34;
  tmpvar_34 = (floor((
    ((tmpvar_24 + tmpvar_25.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.xxx);
  highp vec3 tmpvar_35;
  tmpvar_35 = (fract(abs(tmpvar_34)) * tmpvar_9.xxx);
  highp float tmpvar_36;
  if ((tmpvar_34.x >= 0.0)) {
    tmpvar_36 = tmpvar_35.x;
  } else {
    tmpvar_36 = -(tmpvar_35.x);
  };
  highp vec4 tmpvar_37;
  tmpvar_37 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_36))];
  if ((tmpvar_37.w < 0.0)) {
    highp vec2 tmpvar_38;
    tmpvar_38 = (tmpvar_37.xy - (tmpvar_37.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_38;
  } else {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_37.xy + (tmpvar_37.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_39;
  };
  highp float tmpvar_40;
  tmpvar_40 = clamp ((fract(
    ((tmpvar_12.x + tmpvar_12.y) + tmpvar_12.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_40;
  tmpvar_2 = _Color;
  highp vec4 tmpvar_41;
  tmpvar_41 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * 0.5);
  highp vec2 tmpvar_44;
  tmpvar_44.x = tmpvar_43.x;
  tmpvar_44.y = (tmpvar_43.y * _ProjectionParams.x);
  o_42.xy = (tmpvar_44 + tmpvar_43.w);
  o_42.zw = tmpvar_41.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_45;
  v_45.x = _World2Object[0].x;
  v_45.y = _World2Object[1].x;
  v_45.z = _World2Object[2].x;
  v_45.w = _World2Object[3].x;
  highp vec4 v_46;
  v_46.x = _World2Object[0].z;
  v_46.y = _World2Object[1].z;
  v_46.z = _World2Object[2].z;
  v_46.w = _World2Object[3].z;
  highp vec4 tmpvar_47;
  tmpvar_47.w = 1.0;
  tmpvar_47.xyz = normalize(((v_45.xyz * tmpvar_15.z) + (v_46.xyz * tmpvar_16.z)));
  mediump vec3 tmpvar_48;
  mediump vec4 normal_49;
  normal_49 = tmpvar_47;
  mediump vec3 x2_50;
  mediump vec3 x1_51;
  x1_51.x = dot (unity_SHAr, normal_49);
  x1_51.y = dot (unity_SHAg, normal_49);
  x1_51.z = dot (unity_SHAb, normal_49);
  mediump vec4 tmpvar_52;
  tmpvar_52 = (normal_49.xyzz * normal_49.yzzx);
  x2_50.x = dot (unity_SHBr, tmpvar_52);
  x2_50.y = dot (unity_SHBg, tmpvar_52);
  x2_50.z = dot (unity_SHBb, tmpvar_52);
  tmpvar_48 = ((x2_50 + (unity_SHC.xyz * 
    ((normal_49.x * normal_49.x) - (normal_49.y * normal_49.y))
  )) + x1_51);
  tmpvar_4 = tmpvar_48;
  gl_Position = tmpvar_41;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_42;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
in mediump vec4 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_9;
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_11 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_12;
  tmpvar_12 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_14.w;
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14.xyz + xlv_TEXCOORD5);
  light_3.xyz = tmpvar_15;
  lowp vec4 c_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_5 * light_3.xyz);
  c_16.xyz = tmpvar_17;
  c_16.w = tmpvar_6;
  c_2.xyz = c_16.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - tmpvar_12));
  highp vec3 tmpvar_14;
  tmpvar_14.y = 0.0;
  tmpvar_14.x = -(tmpvar_13.z);
  tmpvar_14.z = tmpvar_13.x;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15.z;
  tmpvar_16.z = -(tmpvar_15.x);
  highp float tmpvar_17;
  if ((abs(tmpvar_15.z) > (1e-08 * abs(tmpvar_16.z)))) {
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_16.z / tmpvar_15.z);
    tmpvar_17 = (tmpvar_18 * inversesqrt((
      (tmpvar_18 * tmpvar_18)
     + 1.0)));
    tmpvar_17 = (sign(tmpvar_17) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_17)))
     * 
      (1.570796 + (abs(tmpvar_17) * (-0.2146018 + (
        abs(tmpvar_17)
       * 
        (0.08656672 + (abs(tmpvar_17) * -0.03102955))
      ))))
    )));
    if ((tmpvar_15.z < 0.0)) {
      if ((tmpvar_16.z >= 0.0)) {
        tmpvar_17 += 3.141593;
      } else {
        tmpvar_17 = (tmpvar_17 - 3.141593);
      };
    };
  } else {
    tmpvar_17 = (sign(tmpvar_16.z) * 1.570796);
  };
  bvec3 tmpvar_19;
  tmpvar_19 = lessThan (vec3(tmpvar_17), vec3(0.0, 0.0, 0.0));
  float tmpvar_20;
  if (tmpvar_19.x) {
    tmpvar_20 = 6.283185;
  } else {
    tmpvar_20 = 0.0;
  };
  float tmpvar_21;
  if (tmpvar_19.y) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_19.z) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  vec3 tmpvar_23;
  tmpvar_23.x = tmpvar_20;
  tmpvar_23.y = tmpvar_21;
  tmpvar_23.z = tmpvar_22;
  highp vec3 tmpvar_24;
  tmpvar_24 = (vec3(tmpvar_17) + tmpvar_23);
  highp vec4 tmpvar_25;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_25 = _InstanceData;
  } else {
    tmpvar_25 = tmpvar_1;
  };
  highp vec3 tmpvar_26;
  tmpvar_26 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * tmpvar_25.x) * tmpvar_15);
  billboardPos_7.xz = tmpvar_26.xz;
  billboardPos_7.y = (tmpvar_26.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * tmpvar_25.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_27;
    vPos_27 = billboardPos_7;
    highp float fAdjust_28;
    highp float fLength_29;
    fLength_29 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_30;
    tmpvar_30 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_28 = tmpvar_30;
    if ((tmpvar_30 != 0.0)) {
      fAdjust_28 = pow (tmpvar_30, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_31;
    tmpvar_31.zw = vec2(0.0, 0.0);
    tmpvar_31.x = (tmpvar_12.x + tmpvar_25.w);
    tmpvar_31.y = (tmpvar_12.y + (tmpvar_25.w * 0.8));
    highp vec4 tmpvar_32;
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    tmpvar_32 = (((
      (tmpvar_33 * tmpvar_33)
     * 
      (3.0 - (2.0 * tmpvar_33))
    ) - 0.5) * 2.0);
    vPos_27.xz = (tmpvar_26.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_32.x + (tmpvar_32.y * tmpvar_32.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_28)));
    vPos_27 = (normalize(vPos_27) * fLength_29);
    billboardPos_7 = vPos_27;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_34;
  tmpvar_34 = (floor((
    ((tmpvar_24 + tmpvar_25.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.xxx);
  highp vec3 tmpvar_35;
  tmpvar_35 = (fract(abs(tmpvar_34)) * tmpvar_9.xxx);
  highp float tmpvar_36;
  if ((tmpvar_34.x >= 0.0)) {
    tmpvar_36 = tmpvar_35.x;
  } else {
    tmpvar_36 = -(tmpvar_35.x);
  };
  highp vec4 tmpvar_37;
  tmpvar_37 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_36))];
  if ((tmpvar_37.w < 0.0)) {
    highp vec2 tmpvar_38;
    tmpvar_38 = (tmpvar_37.xy - (tmpvar_37.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_38;
  } else {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_37.xy + (tmpvar_37.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_39;
  };
  tmpvar_2 = _Color;
  highp vec4 tmpvar_40;
  tmpvar_40 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_41;
  highp vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * 0.5);
  highp vec2 tmpvar_43;
  tmpvar_43.x = tmpvar_42.x;
  tmpvar_43.y = (tmpvar_42.y * _ProjectionParams.x);
  o_41.xy = (tmpvar_43 + tmpvar_42.w);
  o_41.zw = tmpvar_40.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_44;
  v_44.x = _World2Object[0].x;
  v_44.y = _World2Object[1].x;
  v_44.z = _World2Object[2].x;
  v_44.w = _World2Object[3].x;
  highp vec4 v_45;
  v_45.x = _World2Object[0].z;
  v_45.y = _World2Object[1].z;
  v_45.z = _World2Object[2].z;
  v_45.w = _World2Object[3].z;
  highp vec4 tmpvar_46;
  tmpvar_46.w = 1.0;
  tmpvar_46.xyz = normalize(((v_44.xyz * tmpvar_15.z) + (v_45.xyz * tmpvar_16.z)));
  mediump vec3 tmpvar_47;
  mediump vec4 normal_48;
  normal_48 = tmpvar_46;
  mediump vec3 x2_49;
  mediump vec3 x1_50;
  x1_50.x = dot (unity_SHAr, normal_48);
  x1_50.y = dot (unity_SHAg, normal_48);
  x1_50.z = dot (unity_SHAb, normal_48);
  mediump vec4 tmpvar_51;
  tmpvar_51 = (normal_48.xyzz * normal_48.yzzx);
  x2_49.x = dot (unity_SHBr, tmpvar_51);
  x2_49.y = dot (unity_SHBg, tmpvar_51);
  x2_49.z = dot (unity_SHBb, tmpvar_51);
  tmpvar_47 = ((x2_49 + (unity_SHC.xyz * 
    ((normal_48.x * normal_48.x) - (normal_48.y * normal_48.y))
  )) + x1_50);
  tmpvar_4 = tmpvar_47;
  gl_Position = tmpvar_40;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_41;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_9;
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_13.w;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13.xyz + xlv_TEXCOORD5);
  light_3.xyz = tmpvar_14;
  lowp vec4 c_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_5 * light_3.xyz);
  c_15.xyz = tmpvar_16;
  c_15.w = tmpvar_6;
  c_2.xyz = c_15.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out highp vec3 xlv_TEXCOORD0;
out mediump vec4 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - tmpvar_12));
  highp vec3 tmpvar_14;
  tmpvar_14.y = 0.0;
  tmpvar_14.x = -(tmpvar_13.z);
  tmpvar_14.z = tmpvar_13.x;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15.z;
  tmpvar_16.z = -(tmpvar_15.x);
  highp float tmpvar_17;
  if ((abs(tmpvar_15.z) > (1e-08 * abs(tmpvar_16.z)))) {
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_16.z / tmpvar_15.z);
    tmpvar_17 = (tmpvar_18 * inversesqrt((
      (tmpvar_18 * tmpvar_18)
     + 1.0)));
    tmpvar_17 = (sign(tmpvar_17) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_17)))
     * 
      (1.570796 + (abs(tmpvar_17) * (-0.2146018 + (
        abs(tmpvar_17)
       * 
        (0.08656672 + (abs(tmpvar_17) * -0.03102955))
      ))))
    )));
    if ((tmpvar_15.z < 0.0)) {
      if ((tmpvar_16.z >= 0.0)) {
        tmpvar_17 += 3.141593;
      } else {
        tmpvar_17 = (tmpvar_17 - 3.141593);
      };
    };
  } else {
    tmpvar_17 = (sign(tmpvar_16.z) * 1.570796);
  };
  bvec3 tmpvar_19;
  tmpvar_19 = lessThan (vec3(tmpvar_17), vec3(0.0, 0.0, 0.0));
  float tmpvar_20;
  if (tmpvar_19.x) {
    tmpvar_20 = 6.283185;
  } else {
    tmpvar_20 = 0.0;
  };
  float tmpvar_21;
  if (tmpvar_19.y) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_19.z) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  vec3 tmpvar_23;
  tmpvar_23.x = tmpvar_20;
  tmpvar_23.y = tmpvar_21;
  tmpvar_23.z = tmpvar_22;
  highp vec3 tmpvar_24;
  tmpvar_24 = (vec3(tmpvar_17) + tmpvar_23);
  highp vec4 tmpvar_25;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_25 = _InstanceData;
  } else {
    tmpvar_25 = tmpvar_1;
  };
  highp vec3 tmpvar_26;
  tmpvar_26 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * tmpvar_25.x) * tmpvar_15);
  billboardPos_7.xz = tmpvar_26.xz;
  billboardPos_7.y = (tmpvar_26.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * tmpvar_25.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_27;
    vPos_27 = billboardPos_7;
    highp float fAdjust_28;
    highp float fLength_29;
    fLength_29 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_30;
    tmpvar_30 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_28 = tmpvar_30;
    if ((tmpvar_30 != 0.0)) {
      fAdjust_28 = pow (tmpvar_30, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_31;
    tmpvar_31.zw = vec2(0.0, 0.0);
    tmpvar_31.x = (tmpvar_12.x + tmpvar_25.w);
    tmpvar_31.y = (tmpvar_12.y + (tmpvar_25.w * 0.8));
    highp vec4 tmpvar_32;
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    tmpvar_32 = (((
      (tmpvar_33 * tmpvar_33)
     * 
      (3.0 - (2.0 * tmpvar_33))
    ) - 0.5) * 2.0);
    vPos_27.xz = (tmpvar_26.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_32.x + (tmpvar_32.y * tmpvar_32.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_28)));
    vPos_27 = (normalize(vPos_27) * fLength_29);
    billboardPos_7 = vPos_27;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_34;
  tmpvar_34 = (floor((
    ((tmpvar_24 + tmpvar_25.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.xxx);
  highp vec3 tmpvar_35;
  tmpvar_35 = (fract(abs(tmpvar_34)) * tmpvar_9.xxx);
  highp float tmpvar_36;
  if ((tmpvar_34.x >= 0.0)) {
    tmpvar_36 = tmpvar_35.x;
  } else {
    tmpvar_36 = -(tmpvar_35.x);
  };
  highp vec4 tmpvar_37;
  tmpvar_37 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_36))];
  if ((tmpvar_37.w < 0.0)) {
    highp vec2 tmpvar_38;
    tmpvar_38 = (tmpvar_37.xy - (tmpvar_37.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_38;
  } else {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_37.xy + (tmpvar_37.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_39;
  };
  tmpvar_2 = _Color;
  highp vec4 tmpvar_40;
  tmpvar_40 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_41;
  highp vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * 0.5);
  highp vec2 tmpvar_43;
  tmpvar_43.x = tmpvar_42.x;
  tmpvar_43.y = (tmpvar_42.y * _ProjectionParams.x);
  o_41.xy = (tmpvar_43 + tmpvar_42.w);
  o_41.zw = tmpvar_40.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_44;
  v_44.x = _World2Object[0].x;
  v_44.y = _World2Object[1].x;
  v_44.z = _World2Object[2].x;
  v_44.w = _World2Object[3].x;
  highp vec4 v_45;
  v_45.x = _World2Object[0].z;
  v_45.y = _World2Object[1].z;
  v_45.z = _World2Object[2].z;
  v_45.w = _World2Object[3].z;
  highp vec4 tmpvar_46;
  tmpvar_46.w = 1.0;
  tmpvar_46.xyz = normalize(((v_44.xyz * tmpvar_15.z) + (v_45.xyz * tmpvar_16.z)));
  mediump vec3 tmpvar_47;
  mediump vec4 normal_48;
  normal_48 = tmpvar_46;
  mediump vec3 x2_49;
  mediump vec3 x1_50;
  x1_50.x = dot (unity_SHAr, normal_48);
  x1_50.y = dot (unity_SHAg, normal_48);
  x1_50.z = dot (unity_SHAb, normal_48);
  mediump vec4 tmpvar_51;
  tmpvar_51 = (normal_48.xyzz * normal_48.yzzx);
  x2_49.x = dot (unity_SHBr, tmpvar_51);
  x2_49.y = dot (unity_SHBg, tmpvar_51);
  x2_49.z = dot (unity_SHBb, tmpvar_51);
  tmpvar_47 = ((x2_49 + (unity_SHC.xyz * 
    ((normal_48.x * normal_48.x) - (normal_48.y * normal_48.y))
  )) + x1_50);
  tmpvar_4 = tmpvar_47;
  gl_Position = tmpvar_40;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_41;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
in mediump vec4 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_9;
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = textureProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_13.w;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13.xyz + xlv_TEXCOORD5);
  light_3.xyz = tmpvar_14;
  lowp vec4 c_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_5 * light_3.xyz);
  c_15.xyz = tmpvar_16;
  c_15.w = tmpvar_6;
  c_2.xyz = c_15.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - tmpvar_12));
  highp vec3 tmpvar_14;
  tmpvar_14.y = 0.0;
  tmpvar_14.x = -(tmpvar_13.z);
  tmpvar_14.z = tmpvar_13.x;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15.z;
  tmpvar_16.z = -(tmpvar_15.x);
  highp float tmpvar_17;
  if ((abs(tmpvar_15.z) > (1e-08 * abs(tmpvar_16.z)))) {
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_16.z / tmpvar_15.z);
    tmpvar_17 = (tmpvar_18 * inversesqrt((
      (tmpvar_18 * tmpvar_18)
     + 1.0)));
    tmpvar_17 = (sign(tmpvar_17) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_17)))
     * 
      (1.570796 + (abs(tmpvar_17) * (-0.2146018 + (
        abs(tmpvar_17)
       * 
        (0.08656672 + (abs(tmpvar_17) * -0.03102955))
      ))))
    )));
    if ((tmpvar_15.z < 0.0)) {
      if ((tmpvar_16.z >= 0.0)) {
        tmpvar_17 += 3.141593;
      } else {
        tmpvar_17 = (tmpvar_17 - 3.141593);
      };
    };
  } else {
    tmpvar_17 = (sign(tmpvar_16.z) * 1.570796);
  };
  bvec3 tmpvar_19;
  tmpvar_19 = lessThan (vec3(tmpvar_17), vec3(0.0, 0.0, 0.0));
  float tmpvar_20;
  if (tmpvar_19.x) {
    tmpvar_20 = 6.283185;
  } else {
    tmpvar_20 = 0.0;
  };
  float tmpvar_21;
  if (tmpvar_19.y) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_19.z) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  vec3 tmpvar_23;
  tmpvar_23.x = tmpvar_20;
  tmpvar_23.y = tmpvar_21;
  tmpvar_23.z = tmpvar_22;
  highp vec3 tmpvar_24;
  tmpvar_24 = (vec3(tmpvar_17) + tmpvar_23);
  highp vec4 tmpvar_25;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_25 = _InstanceData;
  } else {
    tmpvar_25 = tmpvar_1;
  };
  highp vec3 tmpvar_26;
  tmpvar_26 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * tmpvar_25.x) * tmpvar_15);
  billboardPos_7.xz = tmpvar_26.xz;
  billboardPos_7.y = (tmpvar_26.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * tmpvar_25.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_27;
    vPos_27 = billboardPos_7;
    highp float fAdjust_28;
    highp float fLength_29;
    fLength_29 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_30;
    tmpvar_30 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_28 = tmpvar_30;
    if ((tmpvar_30 != 0.0)) {
      fAdjust_28 = pow (tmpvar_30, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_31;
    tmpvar_31.zw = vec2(0.0, 0.0);
    tmpvar_31.x = (tmpvar_12.x + tmpvar_25.w);
    tmpvar_31.y = (tmpvar_12.y + (tmpvar_25.w * 0.8));
    highp vec4 tmpvar_32;
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    tmpvar_32 = (((
      (tmpvar_33 * tmpvar_33)
     * 
      (3.0 - (2.0 * tmpvar_33))
    ) - 0.5) * 2.0);
    vPos_27.xz = (tmpvar_26.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_32.x + (tmpvar_32.y * tmpvar_32.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_28)));
    vPos_27 = (normalize(vPos_27) * fLength_29);
    billboardPos_7 = vPos_27;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_34;
  tmpvar_34 = (floor((
    ((tmpvar_24 + tmpvar_25.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.xxx);
  highp vec3 tmpvar_35;
  tmpvar_35 = (fract(abs(tmpvar_34)) * tmpvar_9.xxx);
  highp float tmpvar_36;
  if ((tmpvar_34.x >= 0.0)) {
    tmpvar_36 = tmpvar_35.x;
  } else {
    tmpvar_36 = -(tmpvar_35.x);
  };
  highp vec4 tmpvar_37;
  tmpvar_37 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_36))];
  if ((tmpvar_37.w < 0.0)) {
    highp vec2 tmpvar_38;
    tmpvar_38 = (tmpvar_37.xy - (tmpvar_37.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_38;
  } else {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_37.xy + (tmpvar_37.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_39;
  };
  tmpvar_2 = _Color;
  highp vec4 tmpvar_40;
  tmpvar_40 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_41;
  highp vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * 0.5);
  highp vec2 tmpvar_43;
  tmpvar_43.x = tmpvar_42.x;
  tmpvar_43.y = (tmpvar_42.y * _ProjectionParams.x);
  o_41.xy = (tmpvar_43 + tmpvar_42.w);
  o_41.zw = tmpvar_40.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_44;
  v_44.x = _World2Object[0].x;
  v_44.y = _World2Object[1].x;
  v_44.z = _World2Object[2].x;
  v_44.w = _World2Object[3].x;
  highp vec4 v_45;
  v_45.x = _World2Object[0].z;
  v_45.y = _World2Object[1].z;
  v_45.z = _World2Object[2].z;
  v_45.w = _World2Object[3].z;
  highp vec4 tmpvar_46;
  tmpvar_46.w = 1.0;
  tmpvar_46.xyz = normalize(((v_44.xyz * tmpvar_15.z) + (v_45.xyz * tmpvar_16.z)));
  mediump vec3 tmpvar_47;
  mediump vec4 normal_48;
  normal_48 = tmpvar_46;
  mediump vec3 x2_49;
  mediump vec3 x1_50;
  x1_50.x = dot (unity_SHAr, normal_48);
  x1_50.y = dot (unity_SHAg, normal_48);
  x1_50.z = dot (unity_SHAb, normal_48);
  mediump vec4 tmpvar_51;
  tmpvar_51 = (normal_48.xyzz * normal_48.yzzx);
  x2_49.x = dot (unity_SHBr, tmpvar_51);
  x2_49.y = dot (unity_SHBg, tmpvar_51);
  x2_49.z = dot (unity_SHBb, tmpvar_51);
  tmpvar_47 = ((x2_49 + (unity_SHC.xyz * 
    ((normal_48.x * normal_48.x) - (normal_48.y * normal_48.y))
  )) + x1_50);
  tmpvar_4 = tmpvar_47;
  gl_Position = tmpvar_40;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_41;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_9;
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_13.w;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13.xyz + xlv_TEXCOORD5);
  light_3.xyz = tmpvar_14;
  lowp vec4 c_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_5 * light_3.xyz);
  c_15.xyz = tmpvar_16;
  c_15.w = tmpvar_6;
  c_2.xyz = c_15.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out highp vec3 xlv_TEXCOORD0;
out mediump vec4 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - tmpvar_12));
  highp vec3 tmpvar_14;
  tmpvar_14.y = 0.0;
  tmpvar_14.x = -(tmpvar_13.z);
  tmpvar_14.z = tmpvar_13.x;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15.z;
  tmpvar_16.z = -(tmpvar_15.x);
  highp float tmpvar_17;
  if ((abs(tmpvar_15.z) > (1e-08 * abs(tmpvar_16.z)))) {
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_16.z / tmpvar_15.z);
    tmpvar_17 = (tmpvar_18 * inversesqrt((
      (tmpvar_18 * tmpvar_18)
     + 1.0)));
    tmpvar_17 = (sign(tmpvar_17) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_17)))
     * 
      (1.570796 + (abs(tmpvar_17) * (-0.2146018 + (
        abs(tmpvar_17)
       * 
        (0.08656672 + (abs(tmpvar_17) * -0.03102955))
      ))))
    )));
    if ((tmpvar_15.z < 0.0)) {
      if ((tmpvar_16.z >= 0.0)) {
        tmpvar_17 += 3.141593;
      } else {
        tmpvar_17 = (tmpvar_17 - 3.141593);
      };
    };
  } else {
    tmpvar_17 = (sign(tmpvar_16.z) * 1.570796);
  };
  bvec3 tmpvar_19;
  tmpvar_19 = lessThan (vec3(tmpvar_17), vec3(0.0, 0.0, 0.0));
  float tmpvar_20;
  if (tmpvar_19.x) {
    tmpvar_20 = 6.283185;
  } else {
    tmpvar_20 = 0.0;
  };
  float tmpvar_21;
  if (tmpvar_19.y) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_19.z) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  vec3 tmpvar_23;
  tmpvar_23.x = tmpvar_20;
  tmpvar_23.y = tmpvar_21;
  tmpvar_23.z = tmpvar_22;
  highp vec3 tmpvar_24;
  tmpvar_24 = (vec3(tmpvar_17) + tmpvar_23);
  highp vec4 tmpvar_25;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_25 = _InstanceData;
  } else {
    tmpvar_25 = tmpvar_1;
  };
  highp vec3 tmpvar_26;
  tmpvar_26 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * tmpvar_25.x) * tmpvar_15);
  billboardPos_7.xz = tmpvar_26.xz;
  billboardPos_7.y = (tmpvar_26.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * tmpvar_25.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_27;
    vPos_27 = billboardPos_7;
    highp float fAdjust_28;
    highp float fLength_29;
    fLength_29 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_30;
    tmpvar_30 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_28 = tmpvar_30;
    if ((tmpvar_30 != 0.0)) {
      fAdjust_28 = pow (tmpvar_30, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_31;
    tmpvar_31.zw = vec2(0.0, 0.0);
    tmpvar_31.x = (tmpvar_12.x + tmpvar_25.w);
    tmpvar_31.y = (tmpvar_12.y + (tmpvar_25.w * 0.8));
    highp vec4 tmpvar_32;
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    tmpvar_32 = (((
      (tmpvar_33 * tmpvar_33)
     * 
      (3.0 - (2.0 * tmpvar_33))
    ) - 0.5) * 2.0);
    vPos_27.xz = (tmpvar_26.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_32.x + (tmpvar_32.y * tmpvar_32.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_28)));
    vPos_27 = (normalize(vPos_27) * fLength_29);
    billboardPos_7 = vPos_27;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_34;
  tmpvar_34 = (floor((
    ((tmpvar_24 + tmpvar_25.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.xxx);
  highp vec3 tmpvar_35;
  tmpvar_35 = (fract(abs(tmpvar_34)) * tmpvar_9.xxx);
  highp float tmpvar_36;
  if ((tmpvar_34.x >= 0.0)) {
    tmpvar_36 = tmpvar_35.x;
  } else {
    tmpvar_36 = -(tmpvar_35.x);
  };
  highp vec4 tmpvar_37;
  tmpvar_37 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_36))];
  if ((tmpvar_37.w < 0.0)) {
    highp vec2 tmpvar_38;
    tmpvar_38 = (tmpvar_37.xy - (tmpvar_37.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_38;
  } else {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_37.xy + (tmpvar_37.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_39;
  };
  tmpvar_2 = _Color;
  highp vec4 tmpvar_40;
  tmpvar_40 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_41;
  highp vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * 0.5);
  highp vec2 tmpvar_43;
  tmpvar_43.x = tmpvar_42.x;
  tmpvar_43.y = (tmpvar_42.y * _ProjectionParams.x);
  o_41.xy = (tmpvar_43 + tmpvar_42.w);
  o_41.zw = tmpvar_40.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_44;
  v_44.x = _World2Object[0].x;
  v_44.y = _World2Object[1].x;
  v_44.z = _World2Object[2].x;
  v_44.w = _World2Object[3].x;
  highp vec4 v_45;
  v_45.x = _World2Object[0].z;
  v_45.y = _World2Object[1].z;
  v_45.z = _World2Object[2].z;
  v_45.w = _World2Object[3].z;
  highp vec4 tmpvar_46;
  tmpvar_46.w = 1.0;
  tmpvar_46.xyz = normalize(((v_44.xyz * tmpvar_15.z) + (v_45.xyz * tmpvar_16.z)));
  mediump vec3 tmpvar_47;
  mediump vec4 normal_48;
  normal_48 = tmpvar_46;
  mediump vec3 x2_49;
  mediump vec3 x1_50;
  x1_50.x = dot (unity_SHAr, normal_48);
  x1_50.y = dot (unity_SHAg, normal_48);
  x1_50.z = dot (unity_SHAb, normal_48);
  mediump vec4 tmpvar_51;
  tmpvar_51 = (normal_48.xyzz * normal_48.yzzx);
  x2_49.x = dot (unity_SHBr, tmpvar_51);
  x2_49.y = dot (unity_SHBg, tmpvar_51);
  x2_49.z = dot (unity_SHBb, tmpvar_51);
  tmpvar_47 = ((x2_49 + (unity_SHC.xyz * 
    ((normal_48.x * normal_48.x) - (normal_48.y * normal_48.y))
  )) + x1_50);
  tmpvar_4 = tmpvar_47;
  gl_Position = tmpvar_40;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_41;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
in mediump vec4 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_9;
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = textureProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_13.w;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13.xyz + xlv_TEXCOORD5);
  light_3.xyz = tmpvar_14;
  lowp vec4 c_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_5 * light_3.xyz);
  c_15.xyz = tmpvar_16;
  c_15.w = tmpvar_6;
  c_2.xyz = c_15.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - tmpvar_12));
  highp vec3 tmpvar_14;
  tmpvar_14.y = 0.0;
  tmpvar_14.x = -(tmpvar_13.z);
  tmpvar_14.z = tmpvar_13.x;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15.z;
  tmpvar_16.z = -(tmpvar_15.x);
  highp float tmpvar_17;
  if ((abs(tmpvar_15.z) > (1e-08 * abs(tmpvar_16.z)))) {
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_16.z / tmpvar_15.z);
    tmpvar_17 = (tmpvar_18 * inversesqrt((
      (tmpvar_18 * tmpvar_18)
     + 1.0)));
    tmpvar_17 = (sign(tmpvar_17) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_17)))
     * 
      (1.570796 + (abs(tmpvar_17) * (-0.2146018 + (
        abs(tmpvar_17)
       * 
        (0.08656672 + (abs(tmpvar_17) * -0.03102955))
      ))))
    )));
    if ((tmpvar_15.z < 0.0)) {
      if ((tmpvar_16.z >= 0.0)) {
        tmpvar_17 += 3.141593;
      } else {
        tmpvar_17 = (tmpvar_17 - 3.141593);
      };
    };
  } else {
    tmpvar_17 = (sign(tmpvar_16.z) * 1.570796);
  };
  bvec3 tmpvar_19;
  tmpvar_19 = lessThan (vec3(tmpvar_17), vec3(0.0, 0.0, 0.0));
  float tmpvar_20;
  if (tmpvar_19.x) {
    tmpvar_20 = 6.283185;
  } else {
    tmpvar_20 = 0.0;
  };
  float tmpvar_21;
  if (tmpvar_19.y) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_19.z) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  vec3 tmpvar_23;
  tmpvar_23.x = tmpvar_20;
  tmpvar_23.y = tmpvar_21;
  tmpvar_23.z = tmpvar_22;
  highp vec3 tmpvar_24;
  tmpvar_24 = (vec3(tmpvar_17) + tmpvar_23);
  highp vec4 tmpvar_25;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_25 = _InstanceData;
  } else {
    tmpvar_25 = tmpvar_1;
  };
  highp vec3 tmpvar_26;
  tmpvar_26 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * tmpvar_25.x) * tmpvar_15);
  billboardPos_7.xz = tmpvar_26.xz;
  billboardPos_7.y = (tmpvar_26.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * tmpvar_25.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_27;
    vPos_27 = billboardPos_7;
    highp float fAdjust_28;
    highp float fLength_29;
    fLength_29 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_30;
    tmpvar_30 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_28 = tmpvar_30;
    if ((tmpvar_30 != 0.0)) {
      fAdjust_28 = pow (tmpvar_30, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_31;
    tmpvar_31.zw = vec2(0.0, 0.0);
    tmpvar_31.x = (tmpvar_12.x + tmpvar_25.w);
    tmpvar_31.y = (tmpvar_12.y + (tmpvar_25.w * 0.8));
    highp vec4 tmpvar_32;
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    tmpvar_32 = (((
      (tmpvar_33 * tmpvar_33)
     * 
      (3.0 - (2.0 * tmpvar_33))
    ) - 0.5) * 2.0);
    vPos_27.xz = (tmpvar_26.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_32.x + (tmpvar_32.y * tmpvar_32.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_28)));
    vPos_27 = (normalize(vPos_27) * fLength_29);
    billboardPos_7 = vPos_27;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_34;
  tmpvar_34 = (floor((
    ((tmpvar_24 + tmpvar_25.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.xxx);
  highp vec3 tmpvar_35;
  tmpvar_35 = (fract(abs(tmpvar_34)) * tmpvar_9.xxx);
  highp float tmpvar_36;
  if ((tmpvar_34.x >= 0.0)) {
    tmpvar_36 = tmpvar_35.x;
  } else {
    tmpvar_36 = -(tmpvar_35.x);
  };
  highp vec4 tmpvar_37;
  tmpvar_37 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_36))];
  if ((tmpvar_37.w < 0.0)) {
    highp vec2 tmpvar_38;
    tmpvar_38 = (tmpvar_37.xy - (tmpvar_37.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_38;
  } else {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_37.xy + (tmpvar_37.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_39;
  };
  highp float tmpvar_40;
  tmpvar_40 = clamp ((fract(
    ((tmpvar_12.x + tmpvar_12.y) + tmpvar_12.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_40;
  tmpvar_2 = _Color;
  highp vec4 tmpvar_41;
  tmpvar_41 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * 0.5);
  highp vec2 tmpvar_44;
  tmpvar_44.x = tmpvar_43.x;
  tmpvar_44.y = (tmpvar_43.y * _ProjectionParams.x);
  o_42.xy = (tmpvar_44 + tmpvar_43.w);
  o_42.zw = tmpvar_41.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_45;
  v_45.x = _World2Object[0].x;
  v_45.y = _World2Object[1].x;
  v_45.z = _World2Object[2].x;
  v_45.w = _World2Object[3].x;
  highp vec4 v_46;
  v_46.x = _World2Object[0].z;
  v_46.y = _World2Object[1].z;
  v_46.z = _World2Object[2].z;
  v_46.w = _World2Object[3].z;
  highp vec4 tmpvar_47;
  tmpvar_47.w = 1.0;
  tmpvar_47.xyz = normalize(((v_45.xyz * tmpvar_15.z) + (v_46.xyz * tmpvar_16.z)));
  mediump vec3 tmpvar_48;
  mediump vec4 normal_49;
  normal_49 = tmpvar_47;
  mediump vec3 x2_50;
  mediump vec3 x1_51;
  x1_51.x = dot (unity_SHAr, normal_49);
  x1_51.y = dot (unity_SHAg, normal_49);
  x1_51.z = dot (unity_SHAb, normal_49);
  mediump vec4 tmpvar_52;
  tmpvar_52 = (normal_49.xyzz * normal_49.yzzx);
  x2_50.x = dot (unity_SHBr, tmpvar_52);
  x2_50.y = dot (unity_SHBg, tmpvar_52);
  x2_50.z = dot (unity_SHBb, tmpvar_52);
  tmpvar_48 = ((x2_50 + (unity_SHC.xyz * 
    ((normal_49.x * normal_49.x) - (normal_49.y * normal_49.y))
  )) + x1_51);
  tmpvar_4 = tmpvar_48;
  gl_Position = tmpvar_41;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_42;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_9;
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_11 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_12;
  tmpvar_12 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_14.w;
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14.xyz + xlv_TEXCOORD5);
  light_3.xyz = tmpvar_15;
  lowp vec4 c_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_5 * light_3.xyz);
  c_16.xyz = tmpvar_17;
  c_16.w = tmpvar_6;
  c_2.xyz = c_16.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out highp vec3 xlv_TEXCOORD0;
out mediump vec4 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - tmpvar_12));
  highp vec3 tmpvar_14;
  tmpvar_14.y = 0.0;
  tmpvar_14.x = -(tmpvar_13.z);
  tmpvar_14.z = tmpvar_13.x;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15.z;
  tmpvar_16.z = -(tmpvar_15.x);
  highp float tmpvar_17;
  if ((abs(tmpvar_15.z) > (1e-08 * abs(tmpvar_16.z)))) {
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_16.z / tmpvar_15.z);
    tmpvar_17 = (tmpvar_18 * inversesqrt((
      (tmpvar_18 * tmpvar_18)
     + 1.0)));
    tmpvar_17 = (sign(tmpvar_17) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_17)))
     * 
      (1.570796 + (abs(tmpvar_17) * (-0.2146018 + (
        abs(tmpvar_17)
       * 
        (0.08656672 + (abs(tmpvar_17) * -0.03102955))
      ))))
    )));
    if ((tmpvar_15.z < 0.0)) {
      if ((tmpvar_16.z >= 0.0)) {
        tmpvar_17 += 3.141593;
      } else {
        tmpvar_17 = (tmpvar_17 - 3.141593);
      };
    };
  } else {
    tmpvar_17 = (sign(tmpvar_16.z) * 1.570796);
  };
  bvec3 tmpvar_19;
  tmpvar_19 = lessThan (vec3(tmpvar_17), vec3(0.0, 0.0, 0.0));
  float tmpvar_20;
  if (tmpvar_19.x) {
    tmpvar_20 = 6.283185;
  } else {
    tmpvar_20 = 0.0;
  };
  float tmpvar_21;
  if (tmpvar_19.y) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_19.z) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  vec3 tmpvar_23;
  tmpvar_23.x = tmpvar_20;
  tmpvar_23.y = tmpvar_21;
  tmpvar_23.z = tmpvar_22;
  highp vec3 tmpvar_24;
  tmpvar_24 = (vec3(tmpvar_17) + tmpvar_23);
  highp vec4 tmpvar_25;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_25 = _InstanceData;
  } else {
    tmpvar_25 = tmpvar_1;
  };
  highp vec3 tmpvar_26;
  tmpvar_26 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * tmpvar_25.x) * tmpvar_15);
  billboardPos_7.xz = tmpvar_26.xz;
  billboardPos_7.y = (tmpvar_26.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * tmpvar_25.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_27;
    vPos_27 = billboardPos_7;
    highp float fAdjust_28;
    highp float fLength_29;
    fLength_29 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_30;
    tmpvar_30 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_28 = tmpvar_30;
    if ((tmpvar_30 != 0.0)) {
      fAdjust_28 = pow (tmpvar_30, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_31;
    tmpvar_31.zw = vec2(0.0, 0.0);
    tmpvar_31.x = (tmpvar_12.x + tmpvar_25.w);
    tmpvar_31.y = (tmpvar_12.y + (tmpvar_25.w * 0.8));
    highp vec4 tmpvar_32;
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    tmpvar_32 = (((
      (tmpvar_33 * tmpvar_33)
     * 
      (3.0 - (2.0 * tmpvar_33))
    ) - 0.5) * 2.0);
    vPos_27.xz = (tmpvar_26.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_32.x + (tmpvar_32.y * tmpvar_32.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_28)));
    vPos_27 = (normalize(vPos_27) * fLength_29);
    billboardPos_7 = vPos_27;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_34;
  tmpvar_34 = (floor((
    ((tmpvar_24 + tmpvar_25.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.xxx);
  highp vec3 tmpvar_35;
  tmpvar_35 = (fract(abs(tmpvar_34)) * tmpvar_9.xxx);
  highp float tmpvar_36;
  if ((tmpvar_34.x >= 0.0)) {
    tmpvar_36 = tmpvar_35.x;
  } else {
    tmpvar_36 = -(tmpvar_35.x);
  };
  highp vec4 tmpvar_37;
  tmpvar_37 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_36))];
  if ((tmpvar_37.w < 0.0)) {
    highp vec2 tmpvar_38;
    tmpvar_38 = (tmpvar_37.xy - (tmpvar_37.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_38;
  } else {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_37.xy + (tmpvar_37.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_39;
  };
  highp float tmpvar_40;
  tmpvar_40 = clamp ((fract(
    ((tmpvar_12.x + tmpvar_12.y) + tmpvar_12.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_40;
  tmpvar_2 = _Color;
  highp vec4 tmpvar_41;
  tmpvar_41 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * 0.5);
  highp vec2 tmpvar_44;
  tmpvar_44.x = tmpvar_43.x;
  tmpvar_44.y = (tmpvar_43.y * _ProjectionParams.x);
  o_42.xy = (tmpvar_44 + tmpvar_43.w);
  o_42.zw = tmpvar_41.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_45;
  v_45.x = _World2Object[0].x;
  v_45.y = _World2Object[1].x;
  v_45.z = _World2Object[2].x;
  v_45.w = _World2Object[3].x;
  highp vec4 v_46;
  v_46.x = _World2Object[0].z;
  v_46.y = _World2Object[1].z;
  v_46.z = _World2Object[2].z;
  v_46.w = _World2Object[3].z;
  highp vec4 tmpvar_47;
  tmpvar_47.w = 1.0;
  tmpvar_47.xyz = normalize(((v_45.xyz * tmpvar_15.z) + (v_46.xyz * tmpvar_16.z)));
  mediump vec3 tmpvar_48;
  mediump vec4 normal_49;
  normal_49 = tmpvar_47;
  mediump vec3 x2_50;
  mediump vec3 x1_51;
  x1_51.x = dot (unity_SHAr, normal_49);
  x1_51.y = dot (unity_SHAg, normal_49);
  x1_51.z = dot (unity_SHAb, normal_49);
  mediump vec4 tmpvar_52;
  tmpvar_52 = (normal_49.xyzz * normal_49.yzzx);
  x2_50.x = dot (unity_SHBr, tmpvar_52);
  x2_50.y = dot (unity_SHBg, tmpvar_52);
  x2_50.z = dot (unity_SHBb, tmpvar_52);
  tmpvar_48 = ((x2_50 + (unity_SHC.xyz * 
    ((normal_49.x * normal_49.x) - (normal_49.y * normal_49.y))
  )) + x1_51);
  tmpvar_4 = tmpvar_48;
  gl_Position = tmpvar_41;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_42;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
in mediump vec4 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_9;
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_11 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_12;
  tmpvar_12 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_14.w;
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14.xyz + xlv_TEXCOORD5);
  light_3.xyz = tmpvar_15;
  lowp vec4 c_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_5 * light_3.xyz);
  c_16.xyz = tmpvar_17;
  c_16.w = tmpvar_6;
  c_2.xyz = c_16.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - tmpvar_12));
  highp vec3 tmpvar_14;
  tmpvar_14.y = 0.0;
  tmpvar_14.x = -(tmpvar_13.z);
  tmpvar_14.z = tmpvar_13.x;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15.z;
  tmpvar_16.z = -(tmpvar_15.x);
  highp float tmpvar_17;
  if ((abs(tmpvar_15.z) > (1e-08 * abs(tmpvar_16.z)))) {
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_16.z / tmpvar_15.z);
    tmpvar_17 = (tmpvar_18 * inversesqrt((
      (tmpvar_18 * tmpvar_18)
     + 1.0)));
    tmpvar_17 = (sign(tmpvar_17) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_17)))
     * 
      (1.570796 + (abs(tmpvar_17) * (-0.2146018 + (
        abs(tmpvar_17)
       * 
        (0.08656672 + (abs(tmpvar_17) * -0.03102955))
      ))))
    )));
    if ((tmpvar_15.z < 0.0)) {
      if ((tmpvar_16.z >= 0.0)) {
        tmpvar_17 += 3.141593;
      } else {
        tmpvar_17 = (tmpvar_17 - 3.141593);
      };
    };
  } else {
    tmpvar_17 = (sign(tmpvar_16.z) * 1.570796);
  };
  bvec3 tmpvar_19;
  tmpvar_19 = lessThan (vec3(tmpvar_17), vec3(0.0, 0.0, 0.0));
  float tmpvar_20;
  if (tmpvar_19.x) {
    tmpvar_20 = 6.283185;
  } else {
    tmpvar_20 = 0.0;
  };
  float tmpvar_21;
  if (tmpvar_19.y) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_19.z) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  vec3 tmpvar_23;
  tmpvar_23.x = tmpvar_20;
  tmpvar_23.y = tmpvar_21;
  tmpvar_23.z = tmpvar_22;
  highp vec3 tmpvar_24;
  tmpvar_24 = (vec3(tmpvar_17) + tmpvar_23);
  highp vec4 tmpvar_25;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_25 = _InstanceData;
  } else {
    tmpvar_25 = tmpvar_1;
  };
  highp vec3 tmpvar_26;
  tmpvar_26 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * tmpvar_25.x) * tmpvar_15);
  billboardPos_7.xz = tmpvar_26.xz;
  billboardPos_7.y = (tmpvar_26.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * tmpvar_25.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_27;
    vPos_27 = billboardPos_7;
    highp float fAdjust_28;
    highp float fLength_29;
    fLength_29 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_30;
    tmpvar_30 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_28 = tmpvar_30;
    if ((tmpvar_30 != 0.0)) {
      fAdjust_28 = pow (tmpvar_30, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_31;
    tmpvar_31.zw = vec2(0.0, 0.0);
    tmpvar_31.x = (tmpvar_12.x + tmpvar_25.w);
    tmpvar_31.y = (tmpvar_12.y + (tmpvar_25.w * 0.8));
    highp vec4 tmpvar_32;
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    tmpvar_32 = (((
      (tmpvar_33 * tmpvar_33)
     * 
      (3.0 - (2.0 * tmpvar_33))
    ) - 0.5) * 2.0);
    vPos_27.xz = (tmpvar_26.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_32.x + (tmpvar_32.y * tmpvar_32.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_28)));
    vPos_27 = (normalize(vPos_27) * fLength_29);
    billboardPos_7 = vPos_27;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_34;
  tmpvar_34 = (floor((
    ((tmpvar_24 + tmpvar_25.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.xxx);
  highp vec3 tmpvar_35;
  tmpvar_35 = (fract(abs(tmpvar_34)) * tmpvar_9.xxx);
  highp float tmpvar_36;
  if ((tmpvar_34.x >= 0.0)) {
    tmpvar_36 = tmpvar_35.x;
  } else {
    tmpvar_36 = -(tmpvar_35.x);
  };
  highp vec4 tmpvar_37;
  tmpvar_37 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_36))];
  if ((tmpvar_37.w < 0.0)) {
    highp vec2 tmpvar_38;
    tmpvar_38 = (tmpvar_37.xy - (tmpvar_37.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_38;
  } else {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_37.xy + (tmpvar_37.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_39;
  };
  highp float tmpvar_40;
  tmpvar_40 = clamp ((fract(
    ((tmpvar_12.x + tmpvar_12.y) + tmpvar_12.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_40;
  tmpvar_2 = _Color;
  highp vec4 tmpvar_41;
  tmpvar_41 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * 0.5);
  highp vec2 tmpvar_44;
  tmpvar_44.x = tmpvar_43.x;
  tmpvar_44.y = (tmpvar_43.y * _ProjectionParams.x);
  o_42.xy = (tmpvar_44 + tmpvar_43.w);
  o_42.zw = tmpvar_41.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_45;
  v_45.x = _World2Object[0].x;
  v_45.y = _World2Object[1].x;
  v_45.z = _World2Object[2].x;
  v_45.w = _World2Object[3].x;
  highp vec4 v_46;
  v_46.x = _World2Object[0].z;
  v_46.y = _World2Object[1].z;
  v_46.z = _World2Object[2].z;
  v_46.w = _World2Object[3].z;
  highp vec4 tmpvar_47;
  tmpvar_47.w = 1.0;
  tmpvar_47.xyz = normalize(((v_45.xyz * tmpvar_15.z) + (v_46.xyz * tmpvar_16.z)));
  mediump vec3 tmpvar_48;
  mediump vec4 normal_49;
  normal_49 = tmpvar_47;
  mediump vec3 x2_50;
  mediump vec3 x1_51;
  x1_51.x = dot (unity_SHAr, normal_49);
  x1_51.y = dot (unity_SHAg, normal_49);
  x1_51.z = dot (unity_SHAb, normal_49);
  mediump vec4 tmpvar_52;
  tmpvar_52 = (normal_49.xyzz * normal_49.yzzx);
  x2_50.x = dot (unity_SHBr, tmpvar_52);
  x2_50.y = dot (unity_SHBg, tmpvar_52);
  x2_50.z = dot (unity_SHBb, tmpvar_52);
  tmpvar_48 = ((x2_50 + (unity_SHC.xyz * 
    ((normal_49.x * normal_49.x) - (normal_49.y * normal_49.y))
  )) + x1_51);
  tmpvar_4 = tmpvar_48;
  gl_Position = tmpvar_41;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_42;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_9;
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_11 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_12;
  tmpvar_12 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_14.w;
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14.xyz + xlv_TEXCOORD5);
  light_3.xyz = tmpvar_15;
  lowp vec4 c_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_5 * light_3.xyz);
  c_16.xyz = tmpvar_17;
  c_16.w = tmpvar_6;
  c_2.xyz = c_16.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out highp vec3 xlv_TEXCOORD0;
out mediump vec4 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - tmpvar_12));
  highp vec3 tmpvar_14;
  tmpvar_14.y = 0.0;
  tmpvar_14.x = -(tmpvar_13.z);
  tmpvar_14.z = tmpvar_13.x;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15.z;
  tmpvar_16.z = -(tmpvar_15.x);
  highp float tmpvar_17;
  if ((abs(tmpvar_15.z) > (1e-08 * abs(tmpvar_16.z)))) {
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_16.z / tmpvar_15.z);
    tmpvar_17 = (tmpvar_18 * inversesqrt((
      (tmpvar_18 * tmpvar_18)
     + 1.0)));
    tmpvar_17 = (sign(tmpvar_17) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_17)))
     * 
      (1.570796 + (abs(tmpvar_17) * (-0.2146018 + (
        abs(tmpvar_17)
       * 
        (0.08656672 + (abs(tmpvar_17) * -0.03102955))
      ))))
    )));
    if ((tmpvar_15.z < 0.0)) {
      if ((tmpvar_16.z >= 0.0)) {
        tmpvar_17 += 3.141593;
      } else {
        tmpvar_17 = (tmpvar_17 - 3.141593);
      };
    };
  } else {
    tmpvar_17 = (sign(tmpvar_16.z) * 1.570796);
  };
  bvec3 tmpvar_19;
  tmpvar_19 = lessThan (vec3(tmpvar_17), vec3(0.0, 0.0, 0.0));
  float tmpvar_20;
  if (tmpvar_19.x) {
    tmpvar_20 = 6.283185;
  } else {
    tmpvar_20 = 0.0;
  };
  float tmpvar_21;
  if (tmpvar_19.y) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_19.z) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  vec3 tmpvar_23;
  tmpvar_23.x = tmpvar_20;
  tmpvar_23.y = tmpvar_21;
  tmpvar_23.z = tmpvar_22;
  highp vec3 tmpvar_24;
  tmpvar_24 = (vec3(tmpvar_17) + tmpvar_23);
  highp vec4 tmpvar_25;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_25 = _InstanceData;
  } else {
    tmpvar_25 = tmpvar_1;
  };
  highp vec3 tmpvar_26;
  tmpvar_26 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * tmpvar_25.x) * tmpvar_15);
  billboardPos_7.xz = tmpvar_26.xz;
  billboardPos_7.y = (tmpvar_26.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * tmpvar_25.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_27;
    vPos_27 = billboardPos_7;
    highp float fAdjust_28;
    highp float fLength_29;
    fLength_29 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_30;
    tmpvar_30 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_28 = tmpvar_30;
    if ((tmpvar_30 != 0.0)) {
      fAdjust_28 = pow (tmpvar_30, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_31;
    tmpvar_31.zw = vec2(0.0, 0.0);
    tmpvar_31.x = (tmpvar_12.x + tmpvar_25.w);
    tmpvar_31.y = (tmpvar_12.y + (tmpvar_25.w * 0.8));
    highp vec4 tmpvar_32;
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    tmpvar_32 = (((
      (tmpvar_33 * tmpvar_33)
     * 
      (3.0 - (2.0 * tmpvar_33))
    ) - 0.5) * 2.0);
    vPos_27.xz = (tmpvar_26.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_32.x + (tmpvar_32.y * tmpvar_32.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_28)));
    vPos_27 = (normalize(vPos_27) * fLength_29);
    billboardPos_7 = vPos_27;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_34;
  tmpvar_34 = (floor((
    ((tmpvar_24 + tmpvar_25.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.xxx);
  highp vec3 tmpvar_35;
  tmpvar_35 = (fract(abs(tmpvar_34)) * tmpvar_9.xxx);
  highp float tmpvar_36;
  if ((tmpvar_34.x >= 0.0)) {
    tmpvar_36 = tmpvar_35.x;
  } else {
    tmpvar_36 = -(tmpvar_35.x);
  };
  highp vec4 tmpvar_37;
  tmpvar_37 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_36))];
  if ((tmpvar_37.w < 0.0)) {
    highp vec2 tmpvar_38;
    tmpvar_38 = (tmpvar_37.xy - (tmpvar_37.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_38;
  } else {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_37.xy + (tmpvar_37.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_39;
  };
  highp float tmpvar_40;
  tmpvar_40 = clamp ((fract(
    ((tmpvar_12.x + tmpvar_12.y) + tmpvar_12.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_40;
  tmpvar_2 = _Color;
  highp vec4 tmpvar_41;
  tmpvar_41 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * 0.5);
  highp vec2 tmpvar_44;
  tmpvar_44.x = tmpvar_43.x;
  tmpvar_44.y = (tmpvar_43.y * _ProjectionParams.x);
  o_42.xy = (tmpvar_44 + tmpvar_43.w);
  o_42.zw = tmpvar_41.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_45;
  v_45.x = _World2Object[0].x;
  v_45.y = _World2Object[1].x;
  v_45.z = _World2Object[2].x;
  v_45.w = _World2Object[3].x;
  highp vec4 v_46;
  v_46.x = _World2Object[0].z;
  v_46.y = _World2Object[1].z;
  v_46.z = _World2Object[2].z;
  v_46.w = _World2Object[3].z;
  highp vec4 tmpvar_47;
  tmpvar_47.w = 1.0;
  tmpvar_47.xyz = normalize(((v_45.xyz * tmpvar_15.z) + (v_46.xyz * tmpvar_16.z)));
  mediump vec3 tmpvar_48;
  mediump vec4 normal_49;
  normal_49 = tmpvar_47;
  mediump vec3 x2_50;
  mediump vec3 x1_51;
  x1_51.x = dot (unity_SHAr, normal_49);
  x1_51.y = dot (unity_SHAg, normal_49);
  x1_51.z = dot (unity_SHAb, normal_49);
  mediump vec4 tmpvar_52;
  tmpvar_52 = (normal_49.xyzz * normal_49.yzzx);
  x2_50.x = dot (unity_SHBr, tmpvar_52);
  x2_50.y = dot (unity_SHBg, tmpvar_52);
  x2_50.z = dot (unity_SHBb, tmpvar_52);
  tmpvar_48 = ((x2_50 + (unity_SHC.xyz * 
    ((normal_49.x * normal_49.x) - (normal_49.y * normal_49.y))
  )) + x1_51);
  tmpvar_4 = tmpvar_48;
  gl_Position = tmpvar_41;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_42;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
in mediump vec4 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_9;
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_11 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_12;
  tmpvar_12 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_14.w;
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14.xyz + xlv_TEXCOORD5);
  light_3.xyz = tmpvar_15;
  lowp vec4 c_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_5 * light_3.xyz);
  c_16.xyz = tmpvar_17;
  c_16.w = tmpvar_6;
  c_2.xyz = c_16.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_28;
  };
  highp vec4 tmpvar_29;
  tmpvar_29 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (tmpvar_29 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = tmpvar_29.zw;
  highp vec3 tmpvar_33;
  tmpvar_33 = o_30.xyw;
  tmpvar_7 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_34;
  tmpvar_2 = _Color;
  highp vec4 tmpvar_35;
  tmpvar_35 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_36;
  highp vec4 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * 0.5);
  highp vec2 tmpvar_38;
  tmpvar_38.x = tmpvar_37.x;
  tmpvar_38.y = (tmpvar_37.y * _ProjectionParams.x);
  o_36.xy = (tmpvar_38 + tmpvar_37.w);
  o_36.zw = tmpvar_35.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_39;
  v_39.x = _World2Object[0].x;
  v_39.y = _World2Object[1].x;
  v_39.z = _World2Object[2].x;
  v_39.w = _World2Object[3].x;
  highp vec4 v_40;
  v_40.x = _World2Object[0].y;
  v_40.y = _World2Object[1].y;
  v_40.z = _World2Object[2].y;
  v_40.w = _World2Object[3].y;
  highp vec4 v_41;
  v_41.x = _World2Object[0].z;
  v_41.y = _World2Object[1].z;
  v_41.z = _World2Object[2].z;
  v_41.w = _World2Object[3].z;
  highp vec4 tmpvar_42;
  tmpvar_42.w = 1.0;
  tmpvar_42.xyz = normalize(((
    (v_39.xyz * _BillboardNormal.x)
   + 
    (v_40.xyz * _BillboardNormal.y)
  ) + (v_41.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_43;
  mediump vec4 normal_44;
  normal_44 = tmpvar_42;
  mediump vec3 x2_45;
  mediump vec3 x1_46;
  x1_46.x = dot (unity_SHAr, normal_44);
  x1_46.y = dot (unity_SHAg, normal_44);
  x1_46.z = dot (unity_SHAb, normal_44);
  mediump vec4 tmpvar_47;
  tmpvar_47 = (normal_44.xyzz * normal_44.yzzx);
  x2_45.x = dot (unity_SHBr, tmpvar_47);
  x2_45.y = dot (unity_SHBg, tmpvar_47);
  x2_45.z = dot (unity_SHBb, tmpvar_47);
  tmpvar_43 = ((x2_45 + (unity_SHC.xyz * 
    ((normal_44.x * normal_44.x) - (normal_44.y * normal_44.y))
  )) + x1_46);
  tmpvar_4 = tmpvar_43;
  gl_Position = tmpvar_35;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = o_36;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_18.w;
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18.xyz + xlv_TEXCOORD6);
  light_3.xyz = tmpvar_19;
  lowp vec4 c_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_5 * light_3.xyz);
  c_20.xyz = tmpvar_21;
  c_20.w = tmpvar_6;
  c_2.xyz = c_20.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out highp vec3 xlv_TEXCOORD0;
out mediump vec4 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_28;
  };
  highp vec4 tmpvar_29;
  tmpvar_29 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (tmpvar_29 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = tmpvar_29.zw;
  highp vec3 tmpvar_33;
  tmpvar_33 = o_30.xyw;
  tmpvar_7 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_34;
  tmpvar_2 = _Color;
  highp vec4 tmpvar_35;
  tmpvar_35 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_36;
  highp vec4 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * 0.5);
  highp vec2 tmpvar_38;
  tmpvar_38.x = tmpvar_37.x;
  tmpvar_38.y = (tmpvar_37.y * _ProjectionParams.x);
  o_36.xy = (tmpvar_38 + tmpvar_37.w);
  o_36.zw = tmpvar_35.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_39;
  v_39.x = _World2Object[0].x;
  v_39.y = _World2Object[1].x;
  v_39.z = _World2Object[2].x;
  v_39.w = _World2Object[3].x;
  highp vec4 v_40;
  v_40.x = _World2Object[0].y;
  v_40.y = _World2Object[1].y;
  v_40.z = _World2Object[2].y;
  v_40.w = _World2Object[3].y;
  highp vec4 v_41;
  v_41.x = _World2Object[0].z;
  v_41.y = _World2Object[1].z;
  v_41.z = _World2Object[2].z;
  v_41.w = _World2Object[3].z;
  highp vec4 tmpvar_42;
  tmpvar_42.w = 1.0;
  tmpvar_42.xyz = normalize(((
    (v_39.xyz * _BillboardNormal.x)
   + 
    (v_40.xyz * _BillboardNormal.y)
  ) + (v_41.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_43;
  mediump vec4 normal_44;
  normal_44 = tmpvar_42;
  mediump vec3 x2_45;
  mediump vec3 x1_46;
  x1_46.x = dot (unity_SHAr, normal_44);
  x1_46.y = dot (unity_SHAg, normal_44);
  x1_46.z = dot (unity_SHAb, normal_44);
  mediump vec4 tmpvar_47;
  tmpvar_47 = (normal_44.xyzz * normal_44.yzzx);
  x2_45.x = dot (unity_SHBr, tmpvar_47);
  x2_45.y = dot (unity_SHBg, tmpvar_47);
  x2_45.z = dot (unity_SHBb, tmpvar_47);
  tmpvar_43 = ((x2_45 + (unity_SHC.xyz * 
    ((normal_44.x * normal_44.x) - (normal_44.y * normal_44.y))
  )) + x1_46);
  tmpvar_4 = tmpvar_43;
  gl_Position = tmpvar_35;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = o_36;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
in mediump vec4 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17 = textureProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_18.w;
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18.xyz + xlv_TEXCOORD6);
  light_3.xyz = tmpvar_19;
  lowp vec4 c_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_5 * light_3.xyz);
  c_20.xyz = tmpvar_21;
  c_20.w = tmpvar_6;
  c_2.xyz = c_20.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_28;
  };
  highp vec4 tmpvar_29;
  tmpvar_29 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (tmpvar_29 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = tmpvar_29.zw;
  highp vec3 tmpvar_33;
  tmpvar_33 = o_30.xyw;
  tmpvar_7 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_34;
  tmpvar_2 = _Color;
  highp vec4 tmpvar_35;
  tmpvar_35 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_36;
  highp vec4 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * 0.5);
  highp vec2 tmpvar_38;
  tmpvar_38.x = tmpvar_37.x;
  tmpvar_38.y = (tmpvar_37.y * _ProjectionParams.x);
  o_36.xy = (tmpvar_38 + tmpvar_37.w);
  o_36.zw = tmpvar_35.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_39;
  v_39.x = _World2Object[0].x;
  v_39.y = _World2Object[1].x;
  v_39.z = _World2Object[2].x;
  v_39.w = _World2Object[3].x;
  highp vec4 v_40;
  v_40.x = _World2Object[0].y;
  v_40.y = _World2Object[1].y;
  v_40.z = _World2Object[2].y;
  v_40.w = _World2Object[3].y;
  highp vec4 v_41;
  v_41.x = _World2Object[0].z;
  v_41.y = _World2Object[1].z;
  v_41.z = _World2Object[2].z;
  v_41.w = _World2Object[3].z;
  highp vec4 tmpvar_42;
  tmpvar_42.w = 1.0;
  tmpvar_42.xyz = normalize(((
    (v_39.xyz * _BillboardNormal.x)
   + 
    (v_40.xyz * _BillboardNormal.y)
  ) + (v_41.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_43;
  mediump vec4 normal_44;
  normal_44 = tmpvar_42;
  mediump vec3 x2_45;
  mediump vec3 x1_46;
  x1_46.x = dot (unity_SHAr, normal_44);
  x1_46.y = dot (unity_SHAg, normal_44);
  x1_46.z = dot (unity_SHAb, normal_44);
  mediump vec4 tmpvar_47;
  tmpvar_47 = (normal_44.xyzz * normal_44.yzzx);
  x2_45.x = dot (unity_SHBr, tmpvar_47);
  x2_45.y = dot (unity_SHBg, tmpvar_47);
  x2_45.z = dot (unity_SHBb, tmpvar_47);
  tmpvar_43 = ((x2_45 + (unity_SHC.xyz * 
    ((normal_44.x * normal_44.x) - (normal_44.y * normal_44.y))
  )) + x1_46);
  tmpvar_4 = tmpvar_43;
  gl_Position = tmpvar_35;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = o_36;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_18.w;
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18.xyz + xlv_TEXCOORD6);
  light_3.xyz = tmpvar_19;
  lowp vec4 c_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_5 * light_3.xyz);
  c_20.xyz = tmpvar_21;
  c_20.w = tmpvar_6;
  c_2.xyz = c_20.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out highp vec3 xlv_TEXCOORD0;
out mediump vec4 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_28;
  };
  highp vec4 tmpvar_29;
  tmpvar_29 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (tmpvar_29 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = tmpvar_29.zw;
  highp vec3 tmpvar_33;
  tmpvar_33 = o_30.xyw;
  tmpvar_7 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_34;
  tmpvar_2 = _Color;
  highp vec4 tmpvar_35;
  tmpvar_35 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_36;
  highp vec4 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * 0.5);
  highp vec2 tmpvar_38;
  tmpvar_38.x = tmpvar_37.x;
  tmpvar_38.y = (tmpvar_37.y * _ProjectionParams.x);
  o_36.xy = (tmpvar_38 + tmpvar_37.w);
  o_36.zw = tmpvar_35.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_39;
  v_39.x = _World2Object[0].x;
  v_39.y = _World2Object[1].x;
  v_39.z = _World2Object[2].x;
  v_39.w = _World2Object[3].x;
  highp vec4 v_40;
  v_40.x = _World2Object[0].y;
  v_40.y = _World2Object[1].y;
  v_40.z = _World2Object[2].y;
  v_40.w = _World2Object[3].y;
  highp vec4 v_41;
  v_41.x = _World2Object[0].z;
  v_41.y = _World2Object[1].z;
  v_41.z = _World2Object[2].z;
  v_41.w = _World2Object[3].z;
  highp vec4 tmpvar_42;
  tmpvar_42.w = 1.0;
  tmpvar_42.xyz = normalize(((
    (v_39.xyz * _BillboardNormal.x)
   + 
    (v_40.xyz * _BillboardNormal.y)
  ) + (v_41.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_43;
  mediump vec4 normal_44;
  normal_44 = tmpvar_42;
  mediump vec3 x2_45;
  mediump vec3 x1_46;
  x1_46.x = dot (unity_SHAr, normal_44);
  x1_46.y = dot (unity_SHAg, normal_44);
  x1_46.z = dot (unity_SHAb, normal_44);
  mediump vec4 tmpvar_47;
  tmpvar_47 = (normal_44.xyzz * normal_44.yzzx);
  x2_45.x = dot (unity_SHBr, tmpvar_47);
  x2_45.y = dot (unity_SHBg, tmpvar_47);
  x2_45.z = dot (unity_SHBb, tmpvar_47);
  tmpvar_43 = ((x2_45 + (unity_SHC.xyz * 
    ((normal_44.x * normal_44.x) - (normal_44.y * normal_44.y))
  )) + x1_46);
  tmpvar_4 = tmpvar_43;
  gl_Position = tmpvar_35;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = o_36;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
in mediump vec4 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17 = textureProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_18.w;
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18.xyz + xlv_TEXCOORD6);
  light_3.xyz = tmpvar_19;
  lowp vec4 c_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_5 * light_3.xyz);
  c_20.xyz = tmpvar_21;
  c_20.w = tmpvar_6;
  c_2.xyz = c_20.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_28;
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = tmpvar_30.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  tmpvar_7 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_35;
  tmpvar_2 = _Color;
  highp vec4 tmpvar_36;
  tmpvar_36 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_37;
  highp vec4 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * 0.5);
  highp vec2 tmpvar_39;
  tmpvar_39.x = tmpvar_38.x;
  tmpvar_39.y = (tmpvar_38.y * _ProjectionParams.x);
  o_37.xy = (tmpvar_39 + tmpvar_38.w);
  o_37.zw = tmpvar_36.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_40;
  v_40.x = _World2Object[0].x;
  v_40.y = _World2Object[1].x;
  v_40.z = _World2Object[2].x;
  v_40.w = _World2Object[3].x;
  highp vec4 v_41;
  v_41.x = _World2Object[0].y;
  v_41.y = _World2Object[1].y;
  v_41.z = _World2Object[2].y;
  v_41.w = _World2Object[3].y;
  highp vec4 v_42;
  v_42.x = _World2Object[0].z;
  v_42.y = _World2Object[1].z;
  v_42.z = _World2Object[2].z;
  v_42.w = _World2Object[3].z;
  highp vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = normalize(((
    (v_40.xyz * _BillboardNormal.x)
   + 
    (v_41.xyz * _BillboardNormal.y)
  ) + (v_42.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_44;
  mediump vec4 normal_45;
  normal_45 = tmpvar_43;
  mediump vec3 x2_46;
  mediump vec3 x1_47;
  x1_47.x = dot (unity_SHAr, normal_45);
  x1_47.y = dot (unity_SHAg, normal_45);
  x1_47.z = dot (unity_SHAb, normal_45);
  mediump vec4 tmpvar_48;
  tmpvar_48 = (normal_45.xyzz * normal_45.yzzx);
  x2_46.x = dot (unity_SHBr, tmpvar_48);
  x2_46.y = dot (unity_SHBg, tmpvar_48);
  x2_46.z = dot (unity_SHBb, tmpvar_48);
  tmpvar_44 = ((x2_46 + (unity_SHC.xyz * 
    ((normal_45.x * normal_45.x) - (normal_45.y * normal_45.y))
  )) + x1_47);
  tmpvar_4 = tmpvar_44;
  gl_Position = tmpvar_36;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = o_37;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_16 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_19.w;
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xyz + xlv_TEXCOORD6);
  light_3.xyz = tmpvar_20;
  lowp vec4 c_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_5 * light_3.xyz);
  c_21.xyz = tmpvar_22;
  c_21.w = tmpvar_6;
  c_2.xyz = c_21.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out highp vec3 xlv_TEXCOORD0;
out mediump vec4 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_28;
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = tmpvar_30.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  tmpvar_7 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_35;
  tmpvar_2 = _Color;
  highp vec4 tmpvar_36;
  tmpvar_36 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_37;
  highp vec4 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * 0.5);
  highp vec2 tmpvar_39;
  tmpvar_39.x = tmpvar_38.x;
  tmpvar_39.y = (tmpvar_38.y * _ProjectionParams.x);
  o_37.xy = (tmpvar_39 + tmpvar_38.w);
  o_37.zw = tmpvar_36.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_40;
  v_40.x = _World2Object[0].x;
  v_40.y = _World2Object[1].x;
  v_40.z = _World2Object[2].x;
  v_40.w = _World2Object[3].x;
  highp vec4 v_41;
  v_41.x = _World2Object[0].y;
  v_41.y = _World2Object[1].y;
  v_41.z = _World2Object[2].y;
  v_41.w = _World2Object[3].y;
  highp vec4 v_42;
  v_42.x = _World2Object[0].z;
  v_42.y = _World2Object[1].z;
  v_42.z = _World2Object[2].z;
  v_42.w = _World2Object[3].z;
  highp vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = normalize(((
    (v_40.xyz * _BillboardNormal.x)
   + 
    (v_41.xyz * _BillboardNormal.y)
  ) + (v_42.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_44;
  mediump vec4 normal_45;
  normal_45 = tmpvar_43;
  mediump vec3 x2_46;
  mediump vec3 x1_47;
  x1_47.x = dot (unity_SHAr, normal_45);
  x1_47.y = dot (unity_SHAg, normal_45);
  x1_47.z = dot (unity_SHAb, normal_45);
  mediump vec4 tmpvar_48;
  tmpvar_48 = (normal_45.xyzz * normal_45.yzzx);
  x2_46.x = dot (unity_SHBr, tmpvar_48);
  x2_46.y = dot (unity_SHBg, tmpvar_48);
  x2_46.z = dot (unity_SHBb, tmpvar_48);
  tmpvar_44 = ((x2_46 + (unity_SHC.xyz * 
    ((normal_45.x * normal_45.x) - (normal_45.y * normal_45.y))
  )) + x1_47);
  tmpvar_4 = tmpvar_44;
  gl_Position = tmpvar_36;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = o_37;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
in mediump vec4 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_16 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = textureProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_19.w;
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xyz + xlv_TEXCOORD6);
  light_3.xyz = tmpvar_20;
  lowp vec4 c_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_5 * light_3.xyz);
  c_21.xyz = tmpvar_22;
  c_21.w = tmpvar_6;
  c_2.xyz = c_21.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_28;
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = tmpvar_30.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  tmpvar_7 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_35;
  tmpvar_2 = _Color;
  highp vec4 tmpvar_36;
  tmpvar_36 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_37;
  highp vec4 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * 0.5);
  highp vec2 tmpvar_39;
  tmpvar_39.x = tmpvar_38.x;
  tmpvar_39.y = (tmpvar_38.y * _ProjectionParams.x);
  o_37.xy = (tmpvar_39 + tmpvar_38.w);
  o_37.zw = tmpvar_36.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_40;
  v_40.x = _World2Object[0].x;
  v_40.y = _World2Object[1].x;
  v_40.z = _World2Object[2].x;
  v_40.w = _World2Object[3].x;
  highp vec4 v_41;
  v_41.x = _World2Object[0].y;
  v_41.y = _World2Object[1].y;
  v_41.z = _World2Object[2].y;
  v_41.w = _World2Object[3].y;
  highp vec4 v_42;
  v_42.x = _World2Object[0].z;
  v_42.y = _World2Object[1].z;
  v_42.z = _World2Object[2].z;
  v_42.w = _World2Object[3].z;
  highp vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = normalize(((
    (v_40.xyz * _BillboardNormal.x)
   + 
    (v_41.xyz * _BillboardNormal.y)
  ) + (v_42.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_44;
  mediump vec4 normal_45;
  normal_45 = tmpvar_43;
  mediump vec3 x2_46;
  mediump vec3 x1_47;
  x1_47.x = dot (unity_SHAr, normal_45);
  x1_47.y = dot (unity_SHAg, normal_45);
  x1_47.z = dot (unity_SHAb, normal_45);
  mediump vec4 tmpvar_48;
  tmpvar_48 = (normal_45.xyzz * normal_45.yzzx);
  x2_46.x = dot (unity_SHBr, tmpvar_48);
  x2_46.y = dot (unity_SHBg, tmpvar_48);
  x2_46.z = dot (unity_SHBb, tmpvar_48);
  tmpvar_44 = ((x2_46 + (unity_SHC.xyz * 
    ((normal_45.x * normal_45.x) - (normal_45.y * normal_45.y))
  )) + x1_47);
  tmpvar_4 = tmpvar_44;
  gl_Position = tmpvar_36;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = o_37;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_16 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_19.w;
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xyz + xlv_TEXCOORD6);
  light_3.xyz = tmpvar_20;
  lowp vec4 c_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_5 * light_3.xyz);
  c_21.xyz = tmpvar_22;
  c_21.w = tmpvar_6;
  c_2.xyz = c_21.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out highp vec3 xlv_TEXCOORD0;
out mediump vec4 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_28;
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = tmpvar_30.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  tmpvar_7 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_35;
  tmpvar_2 = _Color;
  highp vec4 tmpvar_36;
  tmpvar_36 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_37;
  highp vec4 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * 0.5);
  highp vec2 tmpvar_39;
  tmpvar_39.x = tmpvar_38.x;
  tmpvar_39.y = (tmpvar_38.y * _ProjectionParams.x);
  o_37.xy = (tmpvar_39 + tmpvar_38.w);
  o_37.zw = tmpvar_36.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_40;
  v_40.x = _World2Object[0].x;
  v_40.y = _World2Object[1].x;
  v_40.z = _World2Object[2].x;
  v_40.w = _World2Object[3].x;
  highp vec4 v_41;
  v_41.x = _World2Object[0].y;
  v_41.y = _World2Object[1].y;
  v_41.z = _World2Object[2].y;
  v_41.w = _World2Object[3].y;
  highp vec4 v_42;
  v_42.x = _World2Object[0].z;
  v_42.y = _World2Object[1].z;
  v_42.z = _World2Object[2].z;
  v_42.w = _World2Object[3].z;
  highp vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = normalize(((
    (v_40.xyz * _BillboardNormal.x)
   + 
    (v_41.xyz * _BillboardNormal.y)
  ) + (v_42.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_44;
  mediump vec4 normal_45;
  normal_45 = tmpvar_43;
  mediump vec3 x2_46;
  mediump vec3 x1_47;
  x1_47.x = dot (unity_SHAr, normal_45);
  x1_47.y = dot (unity_SHAg, normal_45);
  x1_47.z = dot (unity_SHAb, normal_45);
  mediump vec4 tmpvar_48;
  tmpvar_48 = (normal_45.xyzz * normal_45.yzzx);
  x2_46.x = dot (unity_SHBr, tmpvar_48);
  x2_46.y = dot (unity_SHBg, tmpvar_48);
  x2_46.z = dot (unity_SHBb, tmpvar_48);
  tmpvar_44 = ((x2_46 + (unity_SHC.xyz * 
    ((normal_45.x * normal_45.x) - (normal_45.y * normal_45.y))
  )) + x1_47);
  tmpvar_4 = tmpvar_44;
  gl_Position = tmpvar_36;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = o_37;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
in mediump vec4 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_16 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = textureProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_19.w;
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xyz + xlv_TEXCOORD6);
  light_3.xyz = tmpvar_20;
  lowp vec4 c_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_5 * light_3.xyz);
  c_21.xyz = tmpvar_22;
  c_21.w = tmpvar_6;
  c_2.xyz = c_21.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_28;
  };
  highp vec4 tmpvar_29;
  tmpvar_29 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (tmpvar_29 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = tmpvar_29.zw;
  highp vec3 tmpvar_33;
  tmpvar_33 = o_30.xyw;
  tmpvar_7 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_34;
  tmpvar_2 = _Color;
  highp vec4 tmpvar_35;
  tmpvar_35 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_36;
  highp vec4 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * 0.5);
  highp vec2 tmpvar_38;
  tmpvar_38.x = tmpvar_37.x;
  tmpvar_38.y = (tmpvar_37.y * _ProjectionParams.x);
  o_36.xy = (tmpvar_38 + tmpvar_37.w);
  o_36.zw = tmpvar_35.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_39;
  v_39.x = _World2Object[0].x;
  v_39.y = _World2Object[1].x;
  v_39.z = _World2Object[2].x;
  v_39.w = _World2Object[3].x;
  highp vec4 v_40;
  v_40.x = _World2Object[0].y;
  v_40.y = _World2Object[1].y;
  v_40.z = _World2Object[2].y;
  v_40.w = _World2Object[3].y;
  highp vec4 v_41;
  v_41.x = _World2Object[0].z;
  v_41.y = _World2Object[1].z;
  v_41.z = _World2Object[2].z;
  v_41.w = _World2Object[3].z;
  highp vec4 tmpvar_42;
  tmpvar_42.w = 1.0;
  tmpvar_42.xyz = normalize(((
    (v_39.xyz * _BillboardNormal.x)
   + 
    (v_40.xyz * _BillboardNormal.y)
  ) + (v_41.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_43;
  mediump vec4 normal_44;
  normal_44 = tmpvar_42;
  mediump vec3 x2_45;
  mediump vec3 x1_46;
  x1_46.x = dot (unity_SHAr, normal_44);
  x1_46.y = dot (unity_SHAg, normal_44);
  x1_46.z = dot (unity_SHAb, normal_44);
  mediump vec4 tmpvar_47;
  tmpvar_47 = (normal_44.xyzz * normal_44.yzzx);
  x2_45.x = dot (unity_SHBr, tmpvar_47);
  x2_45.y = dot (unity_SHBg, tmpvar_47);
  x2_45.z = dot (unity_SHBb, tmpvar_47);
  tmpvar_43 = ((x2_45 + (unity_SHC.xyz * 
    ((normal_44.x * normal_44.x) - (normal_44.y * normal_44.y))
  )) + x1_46);
  tmpvar_4 = tmpvar_43;
  gl_Position = tmpvar_35;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = o_36;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_18.w;
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18.xyz + xlv_TEXCOORD6);
  light_3.xyz = tmpvar_19;
  lowp vec4 c_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_5 * light_3.xyz);
  c_20.xyz = tmpvar_21;
  c_20.w = tmpvar_6;
  c_2.xyz = c_20.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out highp vec3 xlv_TEXCOORD0;
out mediump vec4 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_28;
  };
  highp vec4 tmpvar_29;
  tmpvar_29 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (tmpvar_29 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = tmpvar_29.zw;
  highp vec3 tmpvar_33;
  tmpvar_33 = o_30.xyw;
  tmpvar_7 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_34;
  tmpvar_2 = _Color;
  highp vec4 tmpvar_35;
  tmpvar_35 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_36;
  highp vec4 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * 0.5);
  highp vec2 tmpvar_38;
  tmpvar_38.x = tmpvar_37.x;
  tmpvar_38.y = (tmpvar_37.y * _ProjectionParams.x);
  o_36.xy = (tmpvar_38 + tmpvar_37.w);
  o_36.zw = tmpvar_35.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_39;
  v_39.x = _World2Object[0].x;
  v_39.y = _World2Object[1].x;
  v_39.z = _World2Object[2].x;
  v_39.w = _World2Object[3].x;
  highp vec4 v_40;
  v_40.x = _World2Object[0].y;
  v_40.y = _World2Object[1].y;
  v_40.z = _World2Object[2].y;
  v_40.w = _World2Object[3].y;
  highp vec4 v_41;
  v_41.x = _World2Object[0].z;
  v_41.y = _World2Object[1].z;
  v_41.z = _World2Object[2].z;
  v_41.w = _World2Object[3].z;
  highp vec4 tmpvar_42;
  tmpvar_42.w = 1.0;
  tmpvar_42.xyz = normalize(((
    (v_39.xyz * _BillboardNormal.x)
   + 
    (v_40.xyz * _BillboardNormal.y)
  ) + (v_41.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_43;
  mediump vec4 normal_44;
  normal_44 = tmpvar_42;
  mediump vec3 x2_45;
  mediump vec3 x1_46;
  x1_46.x = dot (unity_SHAr, normal_44);
  x1_46.y = dot (unity_SHAg, normal_44);
  x1_46.z = dot (unity_SHAb, normal_44);
  mediump vec4 tmpvar_47;
  tmpvar_47 = (normal_44.xyzz * normal_44.yzzx);
  x2_45.x = dot (unity_SHBr, tmpvar_47);
  x2_45.y = dot (unity_SHBg, tmpvar_47);
  x2_45.z = dot (unity_SHBb, tmpvar_47);
  tmpvar_43 = ((x2_45 + (unity_SHC.xyz * 
    ((normal_44.x * normal_44.x) - (normal_44.y * normal_44.y))
  )) + x1_46);
  tmpvar_4 = tmpvar_43;
  gl_Position = tmpvar_35;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = o_36;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
in mediump vec4 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17 = textureProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_18.w;
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18.xyz + xlv_TEXCOORD6);
  light_3.xyz = tmpvar_19;
  lowp vec4 c_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_5 * light_3.xyz);
  c_20.xyz = tmpvar_21;
  c_20.w = tmpvar_6;
  c_2.xyz = c_20.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_28;
  };
  highp vec4 tmpvar_29;
  tmpvar_29 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (tmpvar_29 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = tmpvar_29.zw;
  highp vec3 tmpvar_33;
  tmpvar_33 = o_30.xyw;
  tmpvar_7 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_34;
  tmpvar_2 = _Color;
  highp vec4 tmpvar_35;
  tmpvar_35 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_36;
  highp vec4 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * 0.5);
  highp vec2 tmpvar_38;
  tmpvar_38.x = tmpvar_37.x;
  tmpvar_38.y = (tmpvar_37.y * _ProjectionParams.x);
  o_36.xy = (tmpvar_38 + tmpvar_37.w);
  o_36.zw = tmpvar_35.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_39;
  v_39.x = _World2Object[0].x;
  v_39.y = _World2Object[1].x;
  v_39.z = _World2Object[2].x;
  v_39.w = _World2Object[3].x;
  highp vec4 v_40;
  v_40.x = _World2Object[0].y;
  v_40.y = _World2Object[1].y;
  v_40.z = _World2Object[2].y;
  v_40.w = _World2Object[3].y;
  highp vec4 v_41;
  v_41.x = _World2Object[0].z;
  v_41.y = _World2Object[1].z;
  v_41.z = _World2Object[2].z;
  v_41.w = _World2Object[3].z;
  highp vec4 tmpvar_42;
  tmpvar_42.w = 1.0;
  tmpvar_42.xyz = normalize(((
    (v_39.xyz * _BillboardNormal.x)
   + 
    (v_40.xyz * _BillboardNormal.y)
  ) + (v_41.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_43;
  mediump vec4 normal_44;
  normal_44 = tmpvar_42;
  mediump vec3 x2_45;
  mediump vec3 x1_46;
  x1_46.x = dot (unity_SHAr, normal_44);
  x1_46.y = dot (unity_SHAg, normal_44);
  x1_46.z = dot (unity_SHAb, normal_44);
  mediump vec4 tmpvar_47;
  tmpvar_47 = (normal_44.xyzz * normal_44.yzzx);
  x2_45.x = dot (unity_SHBr, tmpvar_47);
  x2_45.y = dot (unity_SHBg, tmpvar_47);
  x2_45.z = dot (unity_SHBb, tmpvar_47);
  tmpvar_43 = ((x2_45 + (unity_SHC.xyz * 
    ((normal_44.x * normal_44.x) - (normal_44.y * normal_44.y))
  )) + x1_46);
  tmpvar_4 = tmpvar_43;
  gl_Position = tmpvar_35;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = o_36;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_18.w;
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18.xyz + xlv_TEXCOORD6);
  light_3.xyz = tmpvar_19;
  lowp vec4 c_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_5 * light_3.xyz);
  c_20.xyz = tmpvar_21;
  c_20.w = tmpvar_6;
  c_2.xyz = c_20.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out highp vec3 xlv_TEXCOORD0;
out mediump vec4 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_28;
  };
  highp vec4 tmpvar_29;
  tmpvar_29 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (tmpvar_29 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = tmpvar_29.zw;
  highp vec3 tmpvar_33;
  tmpvar_33 = o_30.xyw;
  tmpvar_7 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_34;
  tmpvar_2 = _Color;
  highp vec4 tmpvar_35;
  tmpvar_35 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_36;
  highp vec4 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * 0.5);
  highp vec2 tmpvar_38;
  tmpvar_38.x = tmpvar_37.x;
  tmpvar_38.y = (tmpvar_37.y * _ProjectionParams.x);
  o_36.xy = (tmpvar_38 + tmpvar_37.w);
  o_36.zw = tmpvar_35.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_39;
  v_39.x = _World2Object[0].x;
  v_39.y = _World2Object[1].x;
  v_39.z = _World2Object[2].x;
  v_39.w = _World2Object[3].x;
  highp vec4 v_40;
  v_40.x = _World2Object[0].y;
  v_40.y = _World2Object[1].y;
  v_40.z = _World2Object[2].y;
  v_40.w = _World2Object[3].y;
  highp vec4 v_41;
  v_41.x = _World2Object[0].z;
  v_41.y = _World2Object[1].z;
  v_41.z = _World2Object[2].z;
  v_41.w = _World2Object[3].z;
  highp vec4 tmpvar_42;
  tmpvar_42.w = 1.0;
  tmpvar_42.xyz = normalize(((
    (v_39.xyz * _BillboardNormal.x)
   + 
    (v_40.xyz * _BillboardNormal.y)
  ) + (v_41.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_43;
  mediump vec4 normal_44;
  normal_44 = tmpvar_42;
  mediump vec3 x2_45;
  mediump vec3 x1_46;
  x1_46.x = dot (unity_SHAr, normal_44);
  x1_46.y = dot (unity_SHAg, normal_44);
  x1_46.z = dot (unity_SHAb, normal_44);
  mediump vec4 tmpvar_47;
  tmpvar_47 = (normal_44.xyzz * normal_44.yzzx);
  x2_45.x = dot (unity_SHBr, tmpvar_47);
  x2_45.y = dot (unity_SHBg, tmpvar_47);
  x2_45.z = dot (unity_SHBb, tmpvar_47);
  tmpvar_43 = ((x2_45 + (unity_SHC.xyz * 
    ((normal_44.x * normal_44.x) - (normal_44.y * normal_44.y))
  )) + x1_46);
  tmpvar_4 = tmpvar_43;
  gl_Position = tmpvar_35;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = o_36;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
in mediump vec4 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17 = textureProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_18.w;
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18.xyz + xlv_TEXCOORD6);
  light_3.xyz = tmpvar_19;
  lowp vec4 c_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_5 * light_3.xyz);
  c_20.xyz = tmpvar_21;
  c_20.w = tmpvar_6;
  c_2.xyz = c_20.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_28;
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = tmpvar_30.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  tmpvar_7 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_35;
  tmpvar_2 = _Color;
  highp vec4 tmpvar_36;
  tmpvar_36 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_37;
  highp vec4 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * 0.5);
  highp vec2 tmpvar_39;
  tmpvar_39.x = tmpvar_38.x;
  tmpvar_39.y = (tmpvar_38.y * _ProjectionParams.x);
  o_37.xy = (tmpvar_39 + tmpvar_38.w);
  o_37.zw = tmpvar_36.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_40;
  v_40.x = _World2Object[0].x;
  v_40.y = _World2Object[1].x;
  v_40.z = _World2Object[2].x;
  v_40.w = _World2Object[3].x;
  highp vec4 v_41;
  v_41.x = _World2Object[0].y;
  v_41.y = _World2Object[1].y;
  v_41.z = _World2Object[2].y;
  v_41.w = _World2Object[3].y;
  highp vec4 v_42;
  v_42.x = _World2Object[0].z;
  v_42.y = _World2Object[1].z;
  v_42.z = _World2Object[2].z;
  v_42.w = _World2Object[3].z;
  highp vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = normalize(((
    (v_40.xyz * _BillboardNormal.x)
   + 
    (v_41.xyz * _BillboardNormal.y)
  ) + (v_42.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_44;
  mediump vec4 normal_45;
  normal_45 = tmpvar_43;
  mediump vec3 x2_46;
  mediump vec3 x1_47;
  x1_47.x = dot (unity_SHAr, normal_45);
  x1_47.y = dot (unity_SHAg, normal_45);
  x1_47.z = dot (unity_SHAb, normal_45);
  mediump vec4 tmpvar_48;
  tmpvar_48 = (normal_45.xyzz * normal_45.yzzx);
  x2_46.x = dot (unity_SHBr, tmpvar_48);
  x2_46.y = dot (unity_SHBg, tmpvar_48);
  x2_46.z = dot (unity_SHBb, tmpvar_48);
  tmpvar_44 = ((x2_46 + (unity_SHC.xyz * 
    ((normal_45.x * normal_45.x) - (normal_45.y * normal_45.y))
  )) + x1_47);
  tmpvar_4 = tmpvar_44;
  gl_Position = tmpvar_36;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = o_37;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_16 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_19.w;
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xyz + xlv_TEXCOORD6);
  light_3.xyz = tmpvar_20;
  lowp vec4 c_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_5 * light_3.xyz);
  c_21.xyz = tmpvar_22;
  c_21.w = tmpvar_6;
  c_2.xyz = c_21.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out highp vec3 xlv_TEXCOORD0;
out mediump vec4 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_28;
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = tmpvar_30.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  tmpvar_7 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_35;
  tmpvar_2 = _Color;
  highp vec4 tmpvar_36;
  tmpvar_36 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_37;
  highp vec4 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * 0.5);
  highp vec2 tmpvar_39;
  tmpvar_39.x = tmpvar_38.x;
  tmpvar_39.y = (tmpvar_38.y * _ProjectionParams.x);
  o_37.xy = (tmpvar_39 + tmpvar_38.w);
  o_37.zw = tmpvar_36.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_40;
  v_40.x = _World2Object[0].x;
  v_40.y = _World2Object[1].x;
  v_40.z = _World2Object[2].x;
  v_40.w = _World2Object[3].x;
  highp vec4 v_41;
  v_41.x = _World2Object[0].y;
  v_41.y = _World2Object[1].y;
  v_41.z = _World2Object[2].y;
  v_41.w = _World2Object[3].y;
  highp vec4 v_42;
  v_42.x = _World2Object[0].z;
  v_42.y = _World2Object[1].z;
  v_42.z = _World2Object[2].z;
  v_42.w = _World2Object[3].z;
  highp vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = normalize(((
    (v_40.xyz * _BillboardNormal.x)
   + 
    (v_41.xyz * _BillboardNormal.y)
  ) + (v_42.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_44;
  mediump vec4 normal_45;
  normal_45 = tmpvar_43;
  mediump vec3 x2_46;
  mediump vec3 x1_47;
  x1_47.x = dot (unity_SHAr, normal_45);
  x1_47.y = dot (unity_SHAg, normal_45);
  x1_47.z = dot (unity_SHAb, normal_45);
  mediump vec4 tmpvar_48;
  tmpvar_48 = (normal_45.xyzz * normal_45.yzzx);
  x2_46.x = dot (unity_SHBr, tmpvar_48);
  x2_46.y = dot (unity_SHBg, tmpvar_48);
  x2_46.z = dot (unity_SHBb, tmpvar_48);
  tmpvar_44 = ((x2_46 + (unity_SHC.xyz * 
    ((normal_45.x * normal_45.x) - (normal_45.y * normal_45.y))
  )) + x1_47);
  tmpvar_4 = tmpvar_44;
  gl_Position = tmpvar_36;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = o_37;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
in mediump vec4 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_16 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = textureProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_19.w;
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xyz + xlv_TEXCOORD6);
  light_3.xyz = tmpvar_20;
  lowp vec4 c_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_5 * light_3.xyz);
  c_21.xyz = tmpvar_22;
  c_21.w = tmpvar_6;
  c_2.xyz = c_21.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_28;
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = tmpvar_30.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  tmpvar_7 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_35;
  tmpvar_2 = _Color;
  highp vec4 tmpvar_36;
  tmpvar_36 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_37;
  highp vec4 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * 0.5);
  highp vec2 tmpvar_39;
  tmpvar_39.x = tmpvar_38.x;
  tmpvar_39.y = (tmpvar_38.y * _ProjectionParams.x);
  o_37.xy = (tmpvar_39 + tmpvar_38.w);
  o_37.zw = tmpvar_36.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_40;
  v_40.x = _World2Object[0].x;
  v_40.y = _World2Object[1].x;
  v_40.z = _World2Object[2].x;
  v_40.w = _World2Object[3].x;
  highp vec4 v_41;
  v_41.x = _World2Object[0].y;
  v_41.y = _World2Object[1].y;
  v_41.z = _World2Object[2].y;
  v_41.w = _World2Object[3].y;
  highp vec4 v_42;
  v_42.x = _World2Object[0].z;
  v_42.y = _World2Object[1].z;
  v_42.z = _World2Object[2].z;
  v_42.w = _World2Object[3].z;
  highp vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = normalize(((
    (v_40.xyz * _BillboardNormal.x)
   + 
    (v_41.xyz * _BillboardNormal.y)
  ) + (v_42.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_44;
  mediump vec4 normal_45;
  normal_45 = tmpvar_43;
  mediump vec3 x2_46;
  mediump vec3 x1_47;
  x1_47.x = dot (unity_SHAr, normal_45);
  x1_47.y = dot (unity_SHAg, normal_45);
  x1_47.z = dot (unity_SHAb, normal_45);
  mediump vec4 tmpvar_48;
  tmpvar_48 = (normal_45.xyzz * normal_45.yzzx);
  x2_46.x = dot (unity_SHBr, tmpvar_48);
  x2_46.y = dot (unity_SHBg, tmpvar_48);
  x2_46.z = dot (unity_SHBb, tmpvar_48);
  tmpvar_44 = ((x2_46 + (unity_SHC.xyz * 
    ((normal_45.x * normal_45.x) - (normal_45.y * normal_45.y))
  )) + x1_47);
  tmpvar_4 = tmpvar_44;
  gl_Position = tmpvar_36;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = o_37;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_16 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_19.w;
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xyz + xlv_TEXCOORD6);
  light_3.xyz = tmpvar_20;
  lowp vec4 c_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_5 * light_3.xyz);
  c_21.xyz = tmpvar_22;
  c_21.w = tmpvar_6;
  c_2.xyz = c_21.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out highp vec3 xlv_TEXCOORD0;
out mediump vec4 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_28;
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = tmpvar_30.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  tmpvar_7 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_35;
  tmpvar_2 = _Color;
  highp vec4 tmpvar_36;
  tmpvar_36 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_37;
  highp vec4 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * 0.5);
  highp vec2 tmpvar_39;
  tmpvar_39.x = tmpvar_38.x;
  tmpvar_39.y = (tmpvar_38.y * _ProjectionParams.x);
  o_37.xy = (tmpvar_39 + tmpvar_38.w);
  o_37.zw = tmpvar_36.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_40;
  v_40.x = _World2Object[0].x;
  v_40.y = _World2Object[1].x;
  v_40.z = _World2Object[2].x;
  v_40.w = _World2Object[3].x;
  highp vec4 v_41;
  v_41.x = _World2Object[0].y;
  v_41.y = _World2Object[1].y;
  v_41.z = _World2Object[2].y;
  v_41.w = _World2Object[3].y;
  highp vec4 v_42;
  v_42.x = _World2Object[0].z;
  v_42.y = _World2Object[1].z;
  v_42.z = _World2Object[2].z;
  v_42.w = _World2Object[3].z;
  highp vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = normalize(((
    (v_40.xyz * _BillboardNormal.x)
   + 
    (v_41.xyz * _BillboardNormal.y)
  ) + (v_42.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_44;
  mediump vec4 normal_45;
  normal_45 = tmpvar_43;
  mediump vec3 x2_46;
  mediump vec3 x1_47;
  x1_47.x = dot (unity_SHAr, normal_45);
  x1_47.y = dot (unity_SHAg, normal_45);
  x1_47.z = dot (unity_SHAb, normal_45);
  mediump vec4 tmpvar_48;
  tmpvar_48 = (normal_45.xyzz * normal_45.yzzx);
  x2_46.x = dot (unity_SHBr, tmpvar_48);
  x2_46.y = dot (unity_SHBg, tmpvar_48);
  x2_46.z = dot (unity_SHBb, tmpvar_48);
  tmpvar_44 = ((x2_46 + (unity_SHC.xyz * 
    ((normal_45.x * normal_45.x) - (normal_45.y * normal_45.y))
  )) + x1_47);
  tmpvar_4 = tmpvar_44;
  gl_Position = tmpvar_36;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = o_37;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
in mediump vec4 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_16 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = textureProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_19.w;
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xyz + xlv_TEXCOORD6);
  light_3.xyz = tmpvar_20;
  lowp vec4 c_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_5 * light_3.xyz);
  c_21.xyz = tmpvar_22;
  c_21.w = tmpvar_6;
  c_2.xyz = c_21.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_40;
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * 0.5);
  highp vec2 tmpvar_44;
  tmpvar_44.x = tmpvar_43.x;
  tmpvar_44.y = (tmpvar_43.y * _ProjectionParams.x);
  o_42.xy = (tmpvar_44 + tmpvar_43.w);
  o_42.zw = tmpvar_41.zw;
  highp vec3 tmpvar_45;
  tmpvar_45 = o_42.xyw;
  tmpvar_7 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_46;
  tmpvar_2 = _Color;
  highp vec4 tmpvar_47;
  tmpvar_47 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = (tmpvar_47 * 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50.x = tmpvar_49.x;
  tmpvar_50.y = (tmpvar_49.y * _ProjectionParams.x);
  o_48.xy = (tmpvar_50 + tmpvar_49.w);
  o_48.zw = tmpvar_47.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_51;
  v_51.x = _World2Object[0].x;
  v_51.y = _World2Object[1].x;
  v_51.z = _World2Object[2].x;
  v_51.w = _World2Object[3].x;
  highp vec4 v_52;
  v_52.x = _World2Object[0].z;
  v_52.y = _World2Object[1].z;
  v_52.z = _World2Object[2].z;
  v_52.w = _World2Object[3].z;
  highp vec4 tmpvar_53;
  tmpvar_53.w = 1.0;
  tmpvar_53.xyz = normalize(((v_51.xyz * tmpvar_16.z) + (v_52.xyz * tmpvar_17.z)));
  mediump vec3 tmpvar_54;
  mediump vec4 normal_55;
  normal_55 = tmpvar_53;
  mediump vec3 x2_56;
  mediump vec3 x1_57;
  x1_57.x = dot (unity_SHAr, normal_55);
  x1_57.y = dot (unity_SHAg, normal_55);
  x1_57.z = dot (unity_SHAb, normal_55);
  mediump vec4 tmpvar_58;
  tmpvar_58 = (normal_55.xyzz * normal_55.yzzx);
  x2_56.x = dot (unity_SHBr, tmpvar_58);
  x2_56.y = dot (unity_SHBg, tmpvar_58);
  x2_56.z = dot (unity_SHBb, tmpvar_58);
  tmpvar_54 = ((x2_56 + (unity_SHC.xyz * 
    ((normal_55.x * normal_55.x) - (normal_55.y * normal_55.y))
  )) + x1_57);
  tmpvar_4 = tmpvar_54;
  gl_Position = tmpvar_47;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = o_48;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_18.w;
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18.xyz + xlv_TEXCOORD6);
  light_3.xyz = tmpvar_19;
  lowp vec4 c_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_5 * light_3.xyz);
  c_20.xyz = tmpvar_21;
  c_20.w = tmpvar_6;
  c_2.xyz = c_20.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out highp vec3 xlv_TEXCOORD0;
out mediump vec4 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_40;
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * 0.5);
  highp vec2 tmpvar_44;
  tmpvar_44.x = tmpvar_43.x;
  tmpvar_44.y = (tmpvar_43.y * _ProjectionParams.x);
  o_42.xy = (tmpvar_44 + tmpvar_43.w);
  o_42.zw = tmpvar_41.zw;
  highp vec3 tmpvar_45;
  tmpvar_45 = o_42.xyw;
  tmpvar_7 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_46;
  tmpvar_2 = _Color;
  highp vec4 tmpvar_47;
  tmpvar_47 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = (tmpvar_47 * 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50.x = tmpvar_49.x;
  tmpvar_50.y = (tmpvar_49.y * _ProjectionParams.x);
  o_48.xy = (tmpvar_50 + tmpvar_49.w);
  o_48.zw = tmpvar_47.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_51;
  v_51.x = _World2Object[0].x;
  v_51.y = _World2Object[1].x;
  v_51.z = _World2Object[2].x;
  v_51.w = _World2Object[3].x;
  highp vec4 v_52;
  v_52.x = _World2Object[0].z;
  v_52.y = _World2Object[1].z;
  v_52.z = _World2Object[2].z;
  v_52.w = _World2Object[3].z;
  highp vec4 tmpvar_53;
  tmpvar_53.w = 1.0;
  tmpvar_53.xyz = normalize(((v_51.xyz * tmpvar_16.z) + (v_52.xyz * tmpvar_17.z)));
  mediump vec3 tmpvar_54;
  mediump vec4 normal_55;
  normal_55 = tmpvar_53;
  mediump vec3 x2_56;
  mediump vec3 x1_57;
  x1_57.x = dot (unity_SHAr, normal_55);
  x1_57.y = dot (unity_SHAg, normal_55);
  x1_57.z = dot (unity_SHAb, normal_55);
  mediump vec4 tmpvar_58;
  tmpvar_58 = (normal_55.xyzz * normal_55.yzzx);
  x2_56.x = dot (unity_SHBr, tmpvar_58);
  x2_56.y = dot (unity_SHBg, tmpvar_58);
  x2_56.z = dot (unity_SHBb, tmpvar_58);
  tmpvar_54 = ((x2_56 + (unity_SHC.xyz * 
    ((normal_55.x * normal_55.x) - (normal_55.y * normal_55.y))
  )) + x1_57);
  tmpvar_4 = tmpvar_54;
  gl_Position = tmpvar_47;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = o_48;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
in mediump vec4 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17 = textureProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_18.w;
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18.xyz + xlv_TEXCOORD6);
  light_3.xyz = tmpvar_19;
  lowp vec4 c_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_5 * light_3.xyz);
  c_20.xyz = tmpvar_21;
  c_20.w = tmpvar_6;
  c_2.xyz = c_20.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_40;
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * 0.5);
  highp vec2 tmpvar_44;
  tmpvar_44.x = tmpvar_43.x;
  tmpvar_44.y = (tmpvar_43.y * _ProjectionParams.x);
  o_42.xy = (tmpvar_44 + tmpvar_43.w);
  o_42.zw = tmpvar_41.zw;
  highp vec3 tmpvar_45;
  tmpvar_45 = o_42.xyw;
  tmpvar_7 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_46;
  tmpvar_2 = _Color;
  highp vec4 tmpvar_47;
  tmpvar_47 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = (tmpvar_47 * 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50.x = tmpvar_49.x;
  tmpvar_50.y = (tmpvar_49.y * _ProjectionParams.x);
  o_48.xy = (tmpvar_50 + tmpvar_49.w);
  o_48.zw = tmpvar_47.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_51;
  v_51.x = _World2Object[0].x;
  v_51.y = _World2Object[1].x;
  v_51.z = _World2Object[2].x;
  v_51.w = _World2Object[3].x;
  highp vec4 v_52;
  v_52.x = _World2Object[0].z;
  v_52.y = _World2Object[1].z;
  v_52.z = _World2Object[2].z;
  v_52.w = _World2Object[3].z;
  highp vec4 tmpvar_53;
  tmpvar_53.w = 1.0;
  tmpvar_53.xyz = normalize(((v_51.xyz * tmpvar_16.z) + (v_52.xyz * tmpvar_17.z)));
  mediump vec3 tmpvar_54;
  mediump vec4 normal_55;
  normal_55 = tmpvar_53;
  mediump vec3 x2_56;
  mediump vec3 x1_57;
  x1_57.x = dot (unity_SHAr, normal_55);
  x1_57.y = dot (unity_SHAg, normal_55);
  x1_57.z = dot (unity_SHAb, normal_55);
  mediump vec4 tmpvar_58;
  tmpvar_58 = (normal_55.xyzz * normal_55.yzzx);
  x2_56.x = dot (unity_SHBr, tmpvar_58);
  x2_56.y = dot (unity_SHBg, tmpvar_58);
  x2_56.z = dot (unity_SHBb, tmpvar_58);
  tmpvar_54 = ((x2_56 + (unity_SHC.xyz * 
    ((normal_55.x * normal_55.x) - (normal_55.y * normal_55.y))
  )) + x1_57);
  tmpvar_4 = tmpvar_54;
  gl_Position = tmpvar_47;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = o_48;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_18.w;
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18.xyz + xlv_TEXCOORD6);
  light_3.xyz = tmpvar_19;
  lowp vec4 c_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_5 * light_3.xyz);
  c_20.xyz = tmpvar_21;
  c_20.w = tmpvar_6;
  c_2.xyz = c_20.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out highp vec3 xlv_TEXCOORD0;
out mediump vec4 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_40;
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * 0.5);
  highp vec2 tmpvar_44;
  tmpvar_44.x = tmpvar_43.x;
  tmpvar_44.y = (tmpvar_43.y * _ProjectionParams.x);
  o_42.xy = (tmpvar_44 + tmpvar_43.w);
  o_42.zw = tmpvar_41.zw;
  highp vec3 tmpvar_45;
  tmpvar_45 = o_42.xyw;
  tmpvar_7 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_46;
  tmpvar_2 = _Color;
  highp vec4 tmpvar_47;
  tmpvar_47 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = (tmpvar_47 * 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50.x = tmpvar_49.x;
  tmpvar_50.y = (tmpvar_49.y * _ProjectionParams.x);
  o_48.xy = (tmpvar_50 + tmpvar_49.w);
  o_48.zw = tmpvar_47.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_51;
  v_51.x = _World2Object[0].x;
  v_51.y = _World2Object[1].x;
  v_51.z = _World2Object[2].x;
  v_51.w = _World2Object[3].x;
  highp vec4 v_52;
  v_52.x = _World2Object[0].z;
  v_52.y = _World2Object[1].z;
  v_52.z = _World2Object[2].z;
  v_52.w = _World2Object[3].z;
  highp vec4 tmpvar_53;
  tmpvar_53.w = 1.0;
  tmpvar_53.xyz = normalize(((v_51.xyz * tmpvar_16.z) + (v_52.xyz * tmpvar_17.z)));
  mediump vec3 tmpvar_54;
  mediump vec4 normal_55;
  normal_55 = tmpvar_53;
  mediump vec3 x2_56;
  mediump vec3 x1_57;
  x1_57.x = dot (unity_SHAr, normal_55);
  x1_57.y = dot (unity_SHAg, normal_55);
  x1_57.z = dot (unity_SHAb, normal_55);
  mediump vec4 tmpvar_58;
  tmpvar_58 = (normal_55.xyzz * normal_55.yzzx);
  x2_56.x = dot (unity_SHBr, tmpvar_58);
  x2_56.y = dot (unity_SHBg, tmpvar_58);
  x2_56.z = dot (unity_SHBb, tmpvar_58);
  tmpvar_54 = ((x2_56 + (unity_SHC.xyz * 
    ((normal_55.x * normal_55.x) - (normal_55.y * normal_55.y))
  )) + x1_57);
  tmpvar_4 = tmpvar_54;
  gl_Position = tmpvar_47;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = o_48;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
in mediump vec4 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17 = textureProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_18.w;
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18.xyz + xlv_TEXCOORD6);
  light_3.xyz = tmpvar_19;
  lowp vec4 c_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_5 * light_3.xyz);
  c_20.xyz = tmpvar_21;
  c_20.w = tmpvar_6;
  c_2.xyz = c_20.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_40;
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_41;
  highp vec4 tmpvar_42;
  tmpvar_42 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_42 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = tmpvar_42.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  tmpvar_7 = tmpvar_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_47;
  tmpvar_2 = _Color;
  highp vec4 tmpvar_48;
  tmpvar_48 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = (tmpvar_48 * 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51.x = tmpvar_50.x;
  tmpvar_51.y = (tmpvar_50.y * _ProjectionParams.x);
  o_49.xy = (tmpvar_51 + tmpvar_50.w);
  o_49.zw = tmpvar_48.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_52;
  v_52.x = _World2Object[0].x;
  v_52.y = _World2Object[1].x;
  v_52.z = _World2Object[2].x;
  v_52.w = _World2Object[3].x;
  highp vec4 v_53;
  v_53.x = _World2Object[0].z;
  v_53.y = _World2Object[1].z;
  v_53.z = _World2Object[2].z;
  v_53.w = _World2Object[3].z;
  highp vec4 tmpvar_54;
  tmpvar_54.w = 1.0;
  tmpvar_54.xyz = normalize(((v_52.xyz * tmpvar_16.z) + (v_53.xyz * tmpvar_17.z)));
  mediump vec3 tmpvar_55;
  mediump vec4 normal_56;
  normal_56 = tmpvar_54;
  mediump vec3 x2_57;
  mediump vec3 x1_58;
  x1_58.x = dot (unity_SHAr, normal_56);
  x1_58.y = dot (unity_SHAg, normal_56);
  x1_58.z = dot (unity_SHAb, normal_56);
  mediump vec4 tmpvar_59;
  tmpvar_59 = (normal_56.xyzz * normal_56.yzzx);
  x2_57.x = dot (unity_SHBr, tmpvar_59);
  x2_57.y = dot (unity_SHBg, tmpvar_59);
  x2_57.z = dot (unity_SHBb, tmpvar_59);
  tmpvar_55 = ((x2_57 + (unity_SHC.xyz * 
    ((normal_56.x * normal_56.x) - (normal_56.y * normal_56.y))
  )) + x1_58);
  tmpvar_4 = tmpvar_55;
  gl_Position = tmpvar_48;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = o_49;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_16 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_19.w;
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xyz + xlv_TEXCOORD6);
  light_3.xyz = tmpvar_20;
  lowp vec4 c_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_5 * light_3.xyz);
  c_21.xyz = tmpvar_22;
  c_21.w = tmpvar_6;
  c_2.xyz = c_21.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out highp vec3 xlv_TEXCOORD0;
out mediump vec4 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_40;
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_41;
  highp vec4 tmpvar_42;
  tmpvar_42 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_42 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = tmpvar_42.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  tmpvar_7 = tmpvar_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_47;
  tmpvar_2 = _Color;
  highp vec4 tmpvar_48;
  tmpvar_48 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = (tmpvar_48 * 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51.x = tmpvar_50.x;
  tmpvar_51.y = (tmpvar_50.y * _ProjectionParams.x);
  o_49.xy = (tmpvar_51 + tmpvar_50.w);
  o_49.zw = tmpvar_48.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_52;
  v_52.x = _World2Object[0].x;
  v_52.y = _World2Object[1].x;
  v_52.z = _World2Object[2].x;
  v_52.w = _World2Object[3].x;
  highp vec4 v_53;
  v_53.x = _World2Object[0].z;
  v_53.y = _World2Object[1].z;
  v_53.z = _World2Object[2].z;
  v_53.w = _World2Object[3].z;
  highp vec4 tmpvar_54;
  tmpvar_54.w = 1.0;
  tmpvar_54.xyz = normalize(((v_52.xyz * tmpvar_16.z) + (v_53.xyz * tmpvar_17.z)));
  mediump vec3 tmpvar_55;
  mediump vec4 normal_56;
  normal_56 = tmpvar_54;
  mediump vec3 x2_57;
  mediump vec3 x1_58;
  x1_58.x = dot (unity_SHAr, normal_56);
  x1_58.y = dot (unity_SHAg, normal_56);
  x1_58.z = dot (unity_SHAb, normal_56);
  mediump vec4 tmpvar_59;
  tmpvar_59 = (normal_56.xyzz * normal_56.yzzx);
  x2_57.x = dot (unity_SHBr, tmpvar_59);
  x2_57.y = dot (unity_SHBg, tmpvar_59);
  x2_57.z = dot (unity_SHBb, tmpvar_59);
  tmpvar_55 = ((x2_57 + (unity_SHC.xyz * 
    ((normal_56.x * normal_56.x) - (normal_56.y * normal_56.y))
  )) + x1_58);
  tmpvar_4 = tmpvar_55;
  gl_Position = tmpvar_48;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = o_49;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
in mediump vec4 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_16 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = textureProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_19.w;
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xyz + xlv_TEXCOORD6);
  light_3.xyz = tmpvar_20;
  lowp vec4 c_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_5 * light_3.xyz);
  c_21.xyz = tmpvar_22;
  c_21.w = tmpvar_6;
  c_2.xyz = c_21.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_40;
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_41;
  highp vec4 tmpvar_42;
  tmpvar_42 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_42 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = tmpvar_42.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  tmpvar_7 = tmpvar_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_47;
  tmpvar_2 = _Color;
  highp vec4 tmpvar_48;
  tmpvar_48 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = (tmpvar_48 * 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51.x = tmpvar_50.x;
  tmpvar_51.y = (tmpvar_50.y * _ProjectionParams.x);
  o_49.xy = (tmpvar_51 + tmpvar_50.w);
  o_49.zw = tmpvar_48.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_52;
  v_52.x = _World2Object[0].x;
  v_52.y = _World2Object[1].x;
  v_52.z = _World2Object[2].x;
  v_52.w = _World2Object[3].x;
  highp vec4 v_53;
  v_53.x = _World2Object[0].z;
  v_53.y = _World2Object[1].z;
  v_53.z = _World2Object[2].z;
  v_53.w = _World2Object[3].z;
  highp vec4 tmpvar_54;
  tmpvar_54.w = 1.0;
  tmpvar_54.xyz = normalize(((v_52.xyz * tmpvar_16.z) + (v_53.xyz * tmpvar_17.z)));
  mediump vec3 tmpvar_55;
  mediump vec4 normal_56;
  normal_56 = tmpvar_54;
  mediump vec3 x2_57;
  mediump vec3 x1_58;
  x1_58.x = dot (unity_SHAr, normal_56);
  x1_58.y = dot (unity_SHAg, normal_56);
  x1_58.z = dot (unity_SHAb, normal_56);
  mediump vec4 tmpvar_59;
  tmpvar_59 = (normal_56.xyzz * normal_56.yzzx);
  x2_57.x = dot (unity_SHBr, tmpvar_59);
  x2_57.y = dot (unity_SHBg, tmpvar_59);
  x2_57.z = dot (unity_SHBb, tmpvar_59);
  tmpvar_55 = ((x2_57 + (unity_SHC.xyz * 
    ((normal_56.x * normal_56.x) - (normal_56.y * normal_56.y))
  )) + x1_58);
  tmpvar_4 = tmpvar_55;
  gl_Position = tmpvar_48;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = o_49;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_16 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_19.w;
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xyz + xlv_TEXCOORD6);
  light_3.xyz = tmpvar_20;
  lowp vec4 c_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_5 * light_3.xyz);
  c_21.xyz = tmpvar_22;
  c_21.w = tmpvar_6;
  c_2.xyz = c_21.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out highp vec3 xlv_TEXCOORD0;
out mediump vec4 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_40;
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_41;
  highp vec4 tmpvar_42;
  tmpvar_42 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_42 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = tmpvar_42.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  tmpvar_7 = tmpvar_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_47;
  tmpvar_2 = _Color;
  highp vec4 tmpvar_48;
  tmpvar_48 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = (tmpvar_48 * 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51.x = tmpvar_50.x;
  tmpvar_51.y = (tmpvar_50.y * _ProjectionParams.x);
  o_49.xy = (tmpvar_51 + tmpvar_50.w);
  o_49.zw = tmpvar_48.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_52;
  v_52.x = _World2Object[0].x;
  v_52.y = _World2Object[1].x;
  v_52.z = _World2Object[2].x;
  v_52.w = _World2Object[3].x;
  highp vec4 v_53;
  v_53.x = _World2Object[0].z;
  v_53.y = _World2Object[1].z;
  v_53.z = _World2Object[2].z;
  v_53.w = _World2Object[3].z;
  highp vec4 tmpvar_54;
  tmpvar_54.w = 1.0;
  tmpvar_54.xyz = normalize(((v_52.xyz * tmpvar_16.z) + (v_53.xyz * tmpvar_17.z)));
  mediump vec3 tmpvar_55;
  mediump vec4 normal_56;
  normal_56 = tmpvar_54;
  mediump vec3 x2_57;
  mediump vec3 x1_58;
  x1_58.x = dot (unity_SHAr, normal_56);
  x1_58.y = dot (unity_SHAg, normal_56);
  x1_58.z = dot (unity_SHAb, normal_56);
  mediump vec4 tmpvar_59;
  tmpvar_59 = (normal_56.xyzz * normal_56.yzzx);
  x2_57.x = dot (unity_SHBr, tmpvar_59);
  x2_57.y = dot (unity_SHBg, tmpvar_59);
  x2_57.z = dot (unity_SHBb, tmpvar_59);
  tmpvar_55 = ((x2_57 + (unity_SHC.xyz * 
    ((normal_56.x * normal_56.x) - (normal_56.y * normal_56.y))
  )) + x1_58);
  tmpvar_4 = tmpvar_55;
  gl_Position = tmpvar_48;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = o_49;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
in mediump vec4 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_16 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = textureProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_19.w;
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xyz + xlv_TEXCOORD6);
  light_3.xyz = tmpvar_20;
  lowp vec4 c_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_5 * light_3.xyz);
  c_21.xyz = tmpvar_22;
  c_21.w = tmpvar_6;
  c_2.xyz = c_21.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_40;
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * 0.5);
  highp vec2 tmpvar_44;
  tmpvar_44.x = tmpvar_43.x;
  tmpvar_44.y = (tmpvar_43.y * _ProjectionParams.x);
  o_42.xy = (tmpvar_44 + tmpvar_43.w);
  o_42.zw = tmpvar_41.zw;
  highp vec3 tmpvar_45;
  tmpvar_45 = o_42.xyw;
  tmpvar_7 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_46;
  tmpvar_2 = _Color;
  highp vec4 tmpvar_47;
  tmpvar_47 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = (tmpvar_47 * 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50.x = tmpvar_49.x;
  tmpvar_50.y = (tmpvar_49.y * _ProjectionParams.x);
  o_48.xy = (tmpvar_50 + tmpvar_49.w);
  o_48.zw = tmpvar_47.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_51;
  v_51.x = _World2Object[0].x;
  v_51.y = _World2Object[1].x;
  v_51.z = _World2Object[2].x;
  v_51.w = _World2Object[3].x;
  highp vec4 v_52;
  v_52.x = _World2Object[0].z;
  v_52.y = _World2Object[1].z;
  v_52.z = _World2Object[2].z;
  v_52.w = _World2Object[3].z;
  highp vec4 tmpvar_53;
  tmpvar_53.w = 1.0;
  tmpvar_53.xyz = normalize(((v_51.xyz * tmpvar_16.z) + (v_52.xyz * tmpvar_17.z)));
  mediump vec3 tmpvar_54;
  mediump vec4 normal_55;
  normal_55 = tmpvar_53;
  mediump vec3 x2_56;
  mediump vec3 x1_57;
  x1_57.x = dot (unity_SHAr, normal_55);
  x1_57.y = dot (unity_SHAg, normal_55);
  x1_57.z = dot (unity_SHAb, normal_55);
  mediump vec4 tmpvar_58;
  tmpvar_58 = (normal_55.xyzz * normal_55.yzzx);
  x2_56.x = dot (unity_SHBr, tmpvar_58);
  x2_56.y = dot (unity_SHBg, tmpvar_58);
  x2_56.z = dot (unity_SHBb, tmpvar_58);
  tmpvar_54 = ((x2_56 + (unity_SHC.xyz * 
    ((normal_55.x * normal_55.x) - (normal_55.y * normal_55.y))
  )) + x1_57);
  tmpvar_4 = tmpvar_54;
  gl_Position = tmpvar_47;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = o_48;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_18.w;
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18.xyz + xlv_TEXCOORD6);
  light_3.xyz = tmpvar_19;
  lowp vec4 c_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_5 * light_3.xyz);
  c_20.xyz = tmpvar_21;
  c_20.w = tmpvar_6;
  c_2.xyz = c_20.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out highp vec3 xlv_TEXCOORD0;
out mediump vec4 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_40;
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * 0.5);
  highp vec2 tmpvar_44;
  tmpvar_44.x = tmpvar_43.x;
  tmpvar_44.y = (tmpvar_43.y * _ProjectionParams.x);
  o_42.xy = (tmpvar_44 + tmpvar_43.w);
  o_42.zw = tmpvar_41.zw;
  highp vec3 tmpvar_45;
  tmpvar_45 = o_42.xyw;
  tmpvar_7 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_46;
  tmpvar_2 = _Color;
  highp vec4 tmpvar_47;
  tmpvar_47 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = (tmpvar_47 * 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50.x = tmpvar_49.x;
  tmpvar_50.y = (tmpvar_49.y * _ProjectionParams.x);
  o_48.xy = (tmpvar_50 + tmpvar_49.w);
  o_48.zw = tmpvar_47.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_51;
  v_51.x = _World2Object[0].x;
  v_51.y = _World2Object[1].x;
  v_51.z = _World2Object[2].x;
  v_51.w = _World2Object[3].x;
  highp vec4 v_52;
  v_52.x = _World2Object[0].z;
  v_52.y = _World2Object[1].z;
  v_52.z = _World2Object[2].z;
  v_52.w = _World2Object[3].z;
  highp vec4 tmpvar_53;
  tmpvar_53.w = 1.0;
  tmpvar_53.xyz = normalize(((v_51.xyz * tmpvar_16.z) + (v_52.xyz * tmpvar_17.z)));
  mediump vec3 tmpvar_54;
  mediump vec4 normal_55;
  normal_55 = tmpvar_53;
  mediump vec3 x2_56;
  mediump vec3 x1_57;
  x1_57.x = dot (unity_SHAr, normal_55);
  x1_57.y = dot (unity_SHAg, normal_55);
  x1_57.z = dot (unity_SHAb, normal_55);
  mediump vec4 tmpvar_58;
  tmpvar_58 = (normal_55.xyzz * normal_55.yzzx);
  x2_56.x = dot (unity_SHBr, tmpvar_58);
  x2_56.y = dot (unity_SHBg, tmpvar_58);
  x2_56.z = dot (unity_SHBb, tmpvar_58);
  tmpvar_54 = ((x2_56 + (unity_SHC.xyz * 
    ((normal_55.x * normal_55.x) - (normal_55.y * normal_55.y))
  )) + x1_57);
  tmpvar_4 = tmpvar_54;
  gl_Position = tmpvar_47;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = o_48;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
in mediump vec4 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17 = textureProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_18.w;
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18.xyz + xlv_TEXCOORD6);
  light_3.xyz = tmpvar_19;
  lowp vec4 c_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_5 * light_3.xyz);
  c_20.xyz = tmpvar_21;
  c_20.w = tmpvar_6;
  c_2.xyz = c_20.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_40;
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * 0.5);
  highp vec2 tmpvar_44;
  tmpvar_44.x = tmpvar_43.x;
  tmpvar_44.y = (tmpvar_43.y * _ProjectionParams.x);
  o_42.xy = (tmpvar_44 + tmpvar_43.w);
  o_42.zw = tmpvar_41.zw;
  highp vec3 tmpvar_45;
  tmpvar_45 = o_42.xyw;
  tmpvar_7 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_46;
  tmpvar_2 = _Color;
  highp vec4 tmpvar_47;
  tmpvar_47 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = (tmpvar_47 * 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50.x = tmpvar_49.x;
  tmpvar_50.y = (tmpvar_49.y * _ProjectionParams.x);
  o_48.xy = (tmpvar_50 + tmpvar_49.w);
  o_48.zw = tmpvar_47.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_51;
  v_51.x = _World2Object[0].x;
  v_51.y = _World2Object[1].x;
  v_51.z = _World2Object[2].x;
  v_51.w = _World2Object[3].x;
  highp vec4 v_52;
  v_52.x = _World2Object[0].z;
  v_52.y = _World2Object[1].z;
  v_52.z = _World2Object[2].z;
  v_52.w = _World2Object[3].z;
  highp vec4 tmpvar_53;
  tmpvar_53.w = 1.0;
  tmpvar_53.xyz = normalize(((v_51.xyz * tmpvar_16.z) + (v_52.xyz * tmpvar_17.z)));
  mediump vec3 tmpvar_54;
  mediump vec4 normal_55;
  normal_55 = tmpvar_53;
  mediump vec3 x2_56;
  mediump vec3 x1_57;
  x1_57.x = dot (unity_SHAr, normal_55);
  x1_57.y = dot (unity_SHAg, normal_55);
  x1_57.z = dot (unity_SHAb, normal_55);
  mediump vec4 tmpvar_58;
  tmpvar_58 = (normal_55.xyzz * normal_55.yzzx);
  x2_56.x = dot (unity_SHBr, tmpvar_58);
  x2_56.y = dot (unity_SHBg, tmpvar_58);
  x2_56.z = dot (unity_SHBb, tmpvar_58);
  tmpvar_54 = ((x2_56 + (unity_SHC.xyz * 
    ((normal_55.x * normal_55.x) - (normal_55.y * normal_55.y))
  )) + x1_57);
  tmpvar_4 = tmpvar_54;
  gl_Position = tmpvar_47;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = o_48;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_18.w;
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18.xyz + xlv_TEXCOORD6);
  light_3.xyz = tmpvar_19;
  lowp vec4 c_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_5 * light_3.xyz);
  c_20.xyz = tmpvar_21;
  c_20.w = tmpvar_6;
  c_2.xyz = c_20.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out highp vec3 xlv_TEXCOORD0;
out mediump vec4 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_40;
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * 0.5);
  highp vec2 tmpvar_44;
  tmpvar_44.x = tmpvar_43.x;
  tmpvar_44.y = (tmpvar_43.y * _ProjectionParams.x);
  o_42.xy = (tmpvar_44 + tmpvar_43.w);
  o_42.zw = tmpvar_41.zw;
  highp vec3 tmpvar_45;
  tmpvar_45 = o_42.xyw;
  tmpvar_7 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_46;
  tmpvar_2 = _Color;
  highp vec4 tmpvar_47;
  tmpvar_47 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = (tmpvar_47 * 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50.x = tmpvar_49.x;
  tmpvar_50.y = (tmpvar_49.y * _ProjectionParams.x);
  o_48.xy = (tmpvar_50 + tmpvar_49.w);
  o_48.zw = tmpvar_47.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_51;
  v_51.x = _World2Object[0].x;
  v_51.y = _World2Object[1].x;
  v_51.z = _World2Object[2].x;
  v_51.w = _World2Object[3].x;
  highp vec4 v_52;
  v_52.x = _World2Object[0].z;
  v_52.y = _World2Object[1].z;
  v_52.z = _World2Object[2].z;
  v_52.w = _World2Object[3].z;
  highp vec4 tmpvar_53;
  tmpvar_53.w = 1.0;
  tmpvar_53.xyz = normalize(((v_51.xyz * tmpvar_16.z) + (v_52.xyz * tmpvar_17.z)));
  mediump vec3 tmpvar_54;
  mediump vec4 normal_55;
  normal_55 = tmpvar_53;
  mediump vec3 x2_56;
  mediump vec3 x1_57;
  x1_57.x = dot (unity_SHAr, normal_55);
  x1_57.y = dot (unity_SHAg, normal_55);
  x1_57.z = dot (unity_SHAb, normal_55);
  mediump vec4 tmpvar_58;
  tmpvar_58 = (normal_55.xyzz * normal_55.yzzx);
  x2_56.x = dot (unity_SHBr, tmpvar_58);
  x2_56.y = dot (unity_SHBg, tmpvar_58);
  x2_56.z = dot (unity_SHBb, tmpvar_58);
  tmpvar_54 = ((x2_56 + (unity_SHC.xyz * 
    ((normal_55.x * normal_55.x) - (normal_55.y * normal_55.y))
  )) + x1_57);
  tmpvar_4 = tmpvar_54;
  gl_Position = tmpvar_47;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = o_48;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
in mediump vec4 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17 = textureProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_18.w;
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18.xyz + xlv_TEXCOORD6);
  light_3.xyz = tmpvar_19;
  lowp vec4 c_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_5 * light_3.xyz);
  c_20.xyz = tmpvar_21;
  c_20.w = tmpvar_6;
  c_2.xyz = c_20.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_40;
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_41;
  highp vec4 tmpvar_42;
  tmpvar_42 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_42 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = tmpvar_42.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  tmpvar_7 = tmpvar_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_47;
  tmpvar_2 = _Color;
  highp vec4 tmpvar_48;
  tmpvar_48 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = (tmpvar_48 * 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51.x = tmpvar_50.x;
  tmpvar_51.y = (tmpvar_50.y * _ProjectionParams.x);
  o_49.xy = (tmpvar_51 + tmpvar_50.w);
  o_49.zw = tmpvar_48.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_52;
  v_52.x = _World2Object[0].x;
  v_52.y = _World2Object[1].x;
  v_52.z = _World2Object[2].x;
  v_52.w = _World2Object[3].x;
  highp vec4 v_53;
  v_53.x = _World2Object[0].z;
  v_53.y = _World2Object[1].z;
  v_53.z = _World2Object[2].z;
  v_53.w = _World2Object[3].z;
  highp vec4 tmpvar_54;
  tmpvar_54.w = 1.0;
  tmpvar_54.xyz = normalize(((v_52.xyz * tmpvar_16.z) + (v_53.xyz * tmpvar_17.z)));
  mediump vec3 tmpvar_55;
  mediump vec4 normal_56;
  normal_56 = tmpvar_54;
  mediump vec3 x2_57;
  mediump vec3 x1_58;
  x1_58.x = dot (unity_SHAr, normal_56);
  x1_58.y = dot (unity_SHAg, normal_56);
  x1_58.z = dot (unity_SHAb, normal_56);
  mediump vec4 tmpvar_59;
  tmpvar_59 = (normal_56.xyzz * normal_56.yzzx);
  x2_57.x = dot (unity_SHBr, tmpvar_59);
  x2_57.y = dot (unity_SHBg, tmpvar_59);
  x2_57.z = dot (unity_SHBb, tmpvar_59);
  tmpvar_55 = ((x2_57 + (unity_SHC.xyz * 
    ((normal_56.x * normal_56.x) - (normal_56.y * normal_56.y))
  )) + x1_58);
  tmpvar_4 = tmpvar_55;
  gl_Position = tmpvar_48;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = o_49;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_16 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_19.w;
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xyz + xlv_TEXCOORD6);
  light_3.xyz = tmpvar_20;
  lowp vec4 c_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_5 * light_3.xyz);
  c_21.xyz = tmpvar_22;
  c_21.w = tmpvar_6;
  c_2.xyz = c_21.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out highp vec3 xlv_TEXCOORD0;
out mediump vec4 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_40;
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_41;
  highp vec4 tmpvar_42;
  tmpvar_42 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_42 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = tmpvar_42.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  tmpvar_7 = tmpvar_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_47;
  tmpvar_2 = _Color;
  highp vec4 tmpvar_48;
  tmpvar_48 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = (tmpvar_48 * 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51.x = tmpvar_50.x;
  tmpvar_51.y = (tmpvar_50.y * _ProjectionParams.x);
  o_49.xy = (tmpvar_51 + tmpvar_50.w);
  o_49.zw = tmpvar_48.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_52;
  v_52.x = _World2Object[0].x;
  v_52.y = _World2Object[1].x;
  v_52.z = _World2Object[2].x;
  v_52.w = _World2Object[3].x;
  highp vec4 v_53;
  v_53.x = _World2Object[0].z;
  v_53.y = _World2Object[1].z;
  v_53.z = _World2Object[2].z;
  v_53.w = _World2Object[3].z;
  highp vec4 tmpvar_54;
  tmpvar_54.w = 1.0;
  tmpvar_54.xyz = normalize(((v_52.xyz * tmpvar_16.z) + (v_53.xyz * tmpvar_17.z)));
  mediump vec3 tmpvar_55;
  mediump vec4 normal_56;
  normal_56 = tmpvar_54;
  mediump vec3 x2_57;
  mediump vec3 x1_58;
  x1_58.x = dot (unity_SHAr, normal_56);
  x1_58.y = dot (unity_SHAg, normal_56);
  x1_58.z = dot (unity_SHAb, normal_56);
  mediump vec4 tmpvar_59;
  tmpvar_59 = (normal_56.xyzz * normal_56.yzzx);
  x2_57.x = dot (unity_SHBr, tmpvar_59);
  x2_57.y = dot (unity_SHBg, tmpvar_59);
  x2_57.z = dot (unity_SHBb, tmpvar_59);
  tmpvar_55 = ((x2_57 + (unity_SHC.xyz * 
    ((normal_56.x * normal_56.x) - (normal_56.y * normal_56.y))
  )) + x1_58);
  tmpvar_4 = tmpvar_55;
  gl_Position = tmpvar_48;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = o_49;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
in mediump vec4 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_16 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = textureProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_19.w;
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xyz + xlv_TEXCOORD6);
  light_3.xyz = tmpvar_20;
  lowp vec4 c_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_5 * light_3.xyz);
  c_21.xyz = tmpvar_22;
  c_21.w = tmpvar_6;
  c_2.xyz = c_21.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_40;
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_41;
  highp vec4 tmpvar_42;
  tmpvar_42 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_42 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = tmpvar_42.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  tmpvar_7 = tmpvar_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_47;
  tmpvar_2 = _Color;
  highp vec4 tmpvar_48;
  tmpvar_48 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = (tmpvar_48 * 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51.x = tmpvar_50.x;
  tmpvar_51.y = (tmpvar_50.y * _ProjectionParams.x);
  o_49.xy = (tmpvar_51 + tmpvar_50.w);
  o_49.zw = tmpvar_48.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_52;
  v_52.x = _World2Object[0].x;
  v_52.y = _World2Object[1].x;
  v_52.z = _World2Object[2].x;
  v_52.w = _World2Object[3].x;
  highp vec4 v_53;
  v_53.x = _World2Object[0].z;
  v_53.y = _World2Object[1].z;
  v_53.z = _World2Object[2].z;
  v_53.w = _World2Object[3].z;
  highp vec4 tmpvar_54;
  tmpvar_54.w = 1.0;
  tmpvar_54.xyz = normalize(((v_52.xyz * tmpvar_16.z) + (v_53.xyz * tmpvar_17.z)));
  mediump vec3 tmpvar_55;
  mediump vec4 normal_56;
  normal_56 = tmpvar_54;
  mediump vec3 x2_57;
  mediump vec3 x1_58;
  x1_58.x = dot (unity_SHAr, normal_56);
  x1_58.y = dot (unity_SHAg, normal_56);
  x1_58.z = dot (unity_SHAb, normal_56);
  mediump vec4 tmpvar_59;
  tmpvar_59 = (normal_56.xyzz * normal_56.yzzx);
  x2_57.x = dot (unity_SHBr, tmpvar_59);
  x2_57.y = dot (unity_SHBg, tmpvar_59);
  x2_57.z = dot (unity_SHBb, tmpvar_59);
  tmpvar_55 = ((x2_57 + (unity_SHC.xyz * 
    ((normal_56.x * normal_56.x) - (normal_56.y * normal_56.y))
  )) + x1_58);
  tmpvar_4 = tmpvar_55;
  gl_Position = tmpvar_48;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = o_49;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_16 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_19.w;
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xyz + xlv_TEXCOORD6);
  light_3.xyz = tmpvar_20;
  lowp vec4 c_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_5 * light_3.xyz);
  c_21.xyz = tmpvar_22;
  c_21.w = tmpvar_6;
  c_2.xyz = c_21.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out highp vec3 xlv_TEXCOORD0;
out mediump vec4 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_5.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_6.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_6.xy = tmpvar_40;
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_41;
  highp vec4 tmpvar_42;
  tmpvar_42 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_42 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = tmpvar_42.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  tmpvar_7 = tmpvar_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = (tmpvar_7.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7.xy = tmpvar_47;
  tmpvar_2 = _Color;
  highp vec4 tmpvar_48;
  tmpvar_48 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = (tmpvar_48 * 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51.x = tmpvar_50.x;
  tmpvar_51.y = (tmpvar_50.y * _ProjectionParams.x);
  o_49.xy = (tmpvar_51 + tmpvar_50.w);
  o_49.zw = tmpvar_48.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_52;
  v_52.x = _World2Object[0].x;
  v_52.y = _World2Object[1].x;
  v_52.z = _World2Object[2].x;
  v_52.w = _World2Object[3].x;
  highp vec4 v_53;
  v_53.x = _World2Object[0].z;
  v_53.y = _World2Object[1].z;
  v_53.z = _World2Object[2].z;
  v_53.w = _World2Object[3].z;
  highp vec4 tmpvar_54;
  tmpvar_54.w = 1.0;
  tmpvar_54.xyz = normalize(((v_52.xyz * tmpvar_16.z) + (v_53.xyz * tmpvar_17.z)));
  mediump vec3 tmpvar_55;
  mediump vec4 normal_56;
  normal_56 = tmpvar_54;
  mediump vec3 x2_57;
  mediump vec3 x1_58;
  x1_58.x = dot (unity_SHAr, normal_56);
  x1_58.y = dot (unity_SHAg, normal_56);
  x1_58.z = dot (unity_SHAb, normal_56);
  mediump vec4 tmpvar_59;
  tmpvar_59 = (normal_56.xyzz * normal_56.yzzx);
  x2_57.x = dot (unity_SHBr, tmpvar_59);
  x2_57.y = dot (unity_SHBg, tmpvar_59);
  x2_57.z = dot (unity_SHBb, tmpvar_59);
  tmpvar_55 = ((x2_57 + (unity_SHC.xyz * 
    ((normal_56.x * normal_56.x) - (normal_56.y * normal_56.y))
  )) + x1_58);
  tmpvar_4 = tmpvar_55;
  gl_Position = tmpvar_48;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = o_49;
  xlv_TEXCOORD5 = tmpvar_3;
  xlv_TEXCOORD6 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
in mediump vec4 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_16 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = textureProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_19.w;
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xyz + xlv_TEXCOORD6);
  light_3.xyz = tmpvar_20;
  lowp vec4 c_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_5 * light_3.xyz);
  c_21.xyz = tmpvar_22;
  c_21.w = tmpvar_6;
  c_2.xyz = c_21.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
}
 }
 Pass {
  Name "DEFERRED"
  Tags { "LIGHTMODE"="Deferred" "QUEUE"="AlphaTest" "IGNOREPROJECTOR"="true" "DisableBatching"="LodFading" "RenderType"="TransparentCutout" }
  Cull Off
  GpuProgramID 303109
Program "vp" {
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_28;
  };
  tmpvar_4 = _Color;
  highp vec4 v_29;
  v_29.x = _World2Object[0].x;
  v_29.y = _World2Object[1].x;
  v_29.z = _World2Object[2].x;
  v_29.w = _World2Object[3].x;
  highp vec4 v_30;
  v_30.x = _World2Object[0].y;
  v_30.y = _World2Object[1].y;
  v_30.z = _World2Object[2].y;
  v_30.w = _World2Object[3].y;
  highp vec4 v_31;
  v_31.x = _World2Object[0].z;
  v_31.y = _World2Object[1].z;
  v_31.z = _World2Object[2].z;
  v_31.w = _World2Object[3].z;
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize(((
    (v_29.xyz * _BillboardNormal.x)
   + 
    (v_30.xyz * _BillboardNormal.y)
  ) + (v_31.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_32;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = worldNormal_2;
  mediump vec4 normal_34;
  normal_34 = tmpvar_33;
  mediump vec3 x2_35;
  mediump vec4 tmpvar_36;
  tmpvar_36 = (normal_34.xyzz * normal_34.yzzx);
  x2_35.x = dot (unity_SHBr, tmpvar_36);
  x2_35.y = dot (unity_SHBg, tmpvar_36);
  x2_35.z = dot (unity_SHBb, tmpvar_36);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = (x2_35 + (unity_SHC.xyz * (
    (normal_34.x * normal_34.x)
   - 
    (normal_34.y * normal_34.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_9;
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_11;
  mediump vec3 normalWorld_12;
  normalWorld_12 = tmpvar_3;
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = normalWorld_12;
  mediump vec3 x1_14;
  x1_14.x = dot (unity_SHAr, tmpvar_13);
  x1_14.y = dot (unity_SHAg, tmpvar_13);
  x1_14.z = dot (unity_SHAb, tmpvar_13);
  mediump vec4 outDiffuseOcclusion_15;
  mediump vec4 outNormal_16;
  mediump vec4 emission_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_5;
  outDiffuseOcclusion_15 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = vec3(0.0, 0.0, 0.0);
  emission_17 = tmpvar_20;
  emission_17.xyz = (emission_17.xyz + (tmpvar_5 * (xlv_TEXCOORD6 + x1_14)));
  outDiffuse_1.xyz = outDiffuseOcclusion_15.xyz;
  outEmission_2.w = emission_17.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_17.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_16;
  gl_FragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_28;
  };
  tmpvar_4 = _Color;
  highp vec4 v_29;
  v_29.x = _World2Object[0].x;
  v_29.y = _World2Object[1].x;
  v_29.z = _World2Object[2].x;
  v_29.w = _World2Object[3].x;
  highp vec4 v_30;
  v_30.x = _World2Object[0].y;
  v_30.y = _World2Object[1].y;
  v_30.z = _World2Object[2].y;
  v_30.w = _World2Object[3].y;
  highp vec4 v_31;
  v_31.x = _World2Object[0].z;
  v_31.y = _World2Object[1].z;
  v_31.z = _World2Object[2].z;
  v_31.w = _World2Object[3].z;
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize(((
    (v_29.xyz * _BillboardNormal.x)
   + 
    (v_30.xyz * _BillboardNormal.y)
  ) + (v_31.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_32;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = worldNormal_2;
  mediump vec4 normal_34;
  normal_34 = tmpvar_33;
  mediump vec3 x2_35;
  mediump vec4 tmpvar_36;
  tmpvar_36 = (normal_34.xyzz * normal_34.yzzx);
  x2_35.x = dot (unity_SHBr, tmpvar_36);
  x2_35.y = dot (unity_SHBg, tmpvar_36);
  x2_35.z = dot (unity_SHBb, tmpvar_36);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = (x2_35 + (unity_SHC.xyz * (
    (normal_34.x * normal_34.x)
   - 
    (normal_34.y * normal_34.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_9;
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_11;
  mediump vec3 normalWorld_12;
  normalWorld_12 = tmpvar_3;
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = normalWorld_12;
  mediump vec3 x1_14;
  x1_14.x = dot (unity_SHAr, tmpvar_13);
  x1_14.y = dot (unity_SHAg, tmpvar_13);
  x1_14.z = dot (unity_SHAb, tmpvar_13);
  mediump vec4 outDiffuseOcclusion_15;
  mediump vec4 outNormal_16;
  mediump vec4 emission_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_5;
  outDiffuseOcclusion_15 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = vec3(0.0, 0.0, 0.0);
  emission_17 = tmpvar_20;
  emission_17.xyz = (emission_17.xyz + (tmpvar_5 * (xlv_TEXCOORD6 + x1_14)));
  outDiffuse_1.xyz = outDiffuseOcclusion_15.xyz;
  outEmission_2.w = emission_17.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_17.xyz));
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_16;
  _glesFragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_28;
  };
  tmpvar_4 = _Color;
  highp vec4 v_29;
  v_29.x = _World2Object[0].x;
  v_29.y = _World2Object[1].x;
  v_29.z = _World2Object[2].x;
  v_29.w = _World2Object[3].x;
  highp vec4 v_30;
  v_30.x = _World2Object[0].y;
  v_30.y = _World2Object[1].y;
  v_30.z = _World2Object[2].y;
  v_30.w = _World2Object[3].y;
  highp vec4 v_31;
  v_31.x = _World2Object[0].z;
  v_31.y = _World2Object[1].z;
  v_31.z = _World2Object[2].z;
  v_31.w = _World2Object[3].z;
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize(((
    (v_29.xyz * _BillboardNormal.x)
   + 
    (v_30.xyz * _BillboardNormal.y)
  ) + (v_31.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_32;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = worldNormal_2;
  mediump vec4 normal_34;
  normal_34 = tmpvar_33;
  mediump vec3 x2_35;
  mediump vec4 tmpvar_36;
  tmpvar_36 = (normal_34.xyzz * normal_34.yzzx);
  x2_35.x = dot (unity_SHBr, tmpvar_36);
  x2_35.y = dot (unity_SHBg, tmpvar_36);
  x2_35.z = dot (unity_SHBb, tmpvar_36);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = (x2_35 + (unity_SHC.xyz * (
    (normal_34.x * normal_34.x)
   - 
    (normal_34.y * normal_34.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = (diffuseColor_6.w * _Color.w);
  tmpvar_5 = tmpvar_8;
  lowp float x_9;
  x_9 = (tmpvar_5 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_10;
  tmpvar_10 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_10;
  mediump vec3 normalWorld_11;
  normalWorld_11 = tmpvar_2;
  mediump vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = normalWorld_11;
  mediump vec3 x1_13;
  x1_13.x = dot (unity_SHAr, tmpvar_12);
  x1_13.y = dot (unity_SHAg, tmpvar_12);
  x1_13.z = dot (unity_SHAb, tmpvar_12);
  mediump vec4 outDiffuseOcclusion_14;
  mediump vec4 outNormal_15;
  mediump vec4 emission_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = tmpvar_4;
  outDiffuseOcclusion_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_15 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = vec3(0.0, 0.0, 0.0);
  emission_16 = tmpvar_19;
  emission_16.xyz = (emission_16.xyz + (tmpvar_4 * (xlv_TEXCOORD6 + x1_13)));
  outDiffuse_1.xyz = outDiffuseOcclusion_14.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_15;
  gl_FragData[3] = emission_16;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_28;
  };
  tmpvar_4 = _Color;
  highp vec4 v_29;
  v_29.x = _World2Object[0].x;
  v_29.y = _World2Object[1].x;
  v_29.z = _World2Object[2].x;
  v_29.w = _World2Object[3].x;
  highp vec4 v_30;
  v_30.x = _World2Object[0].y;
  v_30.y = _World2Object[1].y;
  v_30.z = _World2Object[2].y;
  v_30.w = _World2Object[3].y;
  highp vec4 v_31;
  v_31.x = _World2Object[0].z;
  v_31.y = _World2Object[1].z;
  v_31.z = _World2Object[2].z;
  v_31.w = _World2Object[3].z;
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize(((
    (v_29.xyz * _BillboardNormal.x)
   + 
    (v_30.xyz * _BillboardNormal.y)
  ) + (v_31.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_32;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = worldNormal_2;
  mediump vec4 normal_34;
  normal_34 = tmpvar_33;
  mediump vec3 x2_35;
  mediump vec4 tmpvar_36;
  tmpvar_36 = (normal_34.xyzz * normal_34.yzzx);
  x2_35.x = dot (unity_SHBr, tmpvar_36);
  x2_35.y = dot (unity_SHBg, tmpvar_36);
  x2_35.z = dot (unity_SHBb, tmpvar_36);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = (x2_35 + (unity_SHC.xyz * (
    (normal_34.x * normal_34.x)
   - 
    (normal_34.y * normal_34.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = (diffuseColor_6.w * _Color.w);
  tmpvar_5 = tmpvar_8;
  lowp float x_9;
  x_9 = (tmpvar_5 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_10;
  tmpvar_10 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_10;
  mediump vec3 normalWorld_11;
  normalWorld_11 = tmpvar_2;
  mediump vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = normalWorld_11;
  mediump vec3 x1_13;
  x1_13.x = dot (unity_SHAr, tmpvar_12);
  x1_13.y = dot (unity_SHAg, tmpvar_12);
  x1_13.z = dot (unity_SHAb, tmpvar_12);
  mediump vec4 outDiffuseOcclusion_14;
  mediump vec4 outNormal_15;
  mediump vec4 emission_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = tmpvar_4;
  outDiffuseOcclusion_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_15 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = vec3(0.0, 0.0, 0.0);
  emission_16 = tmpvar_19;
  emission_16.xyz = (emission_16.xyz + (tmpvar_4 * (xlv_TEXCOORD6 + x1_13)));
  outDiffuse_1.xyz = outDiffuseOcclusion_14.xyz;
  outDiffuse_1.w = 1.0;
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_15;
  _glesFragData[3] = emission_16;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_28;
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_29;
  tmpvar_4 = _Color;
  highp vec4 v_30;
  v_30.x = _World2Object[0].x;
  v_30.y = _World2Object[1].x;
  v_30.z = _World2Object[2].x;
  v_30.w = _World2Object[3].x;
  highp vec4 v_31;
  v_31.x = _World2Object[0].y;
  v_31.y = _World2Object[1].y;
  v_31.z = _World2Object[2].y;
  v_31.w = _World2Object[3].y;
  highp vec4 v_32;
  v_32.x = _World2Object[0].z;
  v_32.y = _World2Object[1].z;
  v_32.z = _World2Object[2].z;
  v_32.w = _World2Object[3].z;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(((
    (v_30.xyz * _BillboardNormal.x)
   + 
    (v_31.xyz * _BillboardNormal.y)
  ) + (v_32.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_33;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = worldNormal_2;
  mediump vec4 normal_35;
  normal_35 = tmpvar_34;
  mediump vec3 x2_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = (normal_35.xyzz * normal_35.yzzx);
  x2_36.x = dot (unity_SHBr, tmpvar_37);
  x2_36.y = dot (unity_SHBg, tmpvar_37);
  x2_36.z = dot (unity_SHBb, tmpvar_37);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = (x2_36 + (unity_SHC.xyz * (
    (normal_35.x * normal_35.x)
   - 
    (normal_35.y * normal_35.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_9;
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_11 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_12;
  tmpvar_12 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_12;
  mediump vec3 normalWorld_13;
  normalWorld_13 = tmpvar_3;
  mediump vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = normalWorld_13;
  mediump vec3 x1_15;
  x1_15.x = dot (unity_SHAr, tmpvar_14);
  x1_15.y = dot (unity_SHAg, tmpvar_14);
  x1_15.z = dot (unity_SHAb, tmpvar_14);
  mediump vec4 outDiffuseOcclusion_16;
  mediump vec4 outNormal_17;
  mediump vec4 emission_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = tmpvar_5;
  outDiffuseOcclusion_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_17 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = vec3(0.0, 0.0, 0.0);
  emission_18 = tmpvar_21;
  emission_18.xyz = (emission_18.xyz + (tmpvar_5 * (xlv_TEXCOORD6 + x1_15)));
  outDiffuse_1.xyz = outDiffuseOcclusion_16.xyz;
  outEmission_2.w = emission_18.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_18.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_17;
  gl_FragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_28;
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_29;
  tmpvar_4 = _Color;
  highp vec4 v_30;
  v_30.x = _World2Object[0].x;
  v_30.y = _World2Object[1].x;
  v_30.z = _World2Object[2].x;
  v_30.w = _World2Object[3].x;
  highp vec4 v_31;
  v_31.x = _World2Object[0].y;
  v_31.y = _World2Object[1].y;
  v_31.z = _World2Object[2].y;
  v_31.w = _World2Object[3].y;
  highp vec4 v_32;
  v_32.x = _World2Object[0].z;
  v_32.y = _World2Object[1].z;
  v_32.z = _World2Object[2].z;
  v_32.w = _World2Object[3].z;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(((
    (v_30.xyz * _BillboardNormal.x)
   + 
    (v_31.xyz * _BillboardNormal.y)
  ) + (v_32.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_33;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = worldNormal_2;
  mediump vec4 normal_35;
  normal_35 = tmpvar_34;
  mediump vec3 x2_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = (normal_35.xyzz * normal_35.yzzx);
  x2_36.x = dot (unity_SHBr, tmpvar_37);
  x2_36.y = dot (unity_SHBg, tmpvar_37);
  x2_36.z = dot (unity_SHBb, tmpvar_37);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = (x2_36 + (unity_SHC.xyz * (
    (normal_35.x * normal_35.x)
   - 
    (normal_35.y * normal_35.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_9;
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_11 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_12;
  tmpvar_12 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_12;
  mediump vec3 normalWorld_13;
  normalWorld_13 = tmpvar_3;
  mediump vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = normalWorld_13;
  mediump vec3 x1_15;
  x1_15.x = dot (unity_SHAr, tmpvar_14);
  x1_15.y = dot (unity_SHAg, tmpvar_14);
  x1_15.z = dot (unity_SHAb, tmpvar_14);
  mediump vec4 outDiffuseOcclusion_16;
  mediump vec4 outNormal_17;
  mediump vec4 emission_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = tmpvar_5;
  outDiffuseOcclusion_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_17 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = vec3(0.0, 0.0, 0.0);
  emission_18 = tmpvar_21;
  emission_18.xyz = (emission_18.xyz + (tmpvar_5 * (xlv_TEXCOORD6 + x1_15)));
  outDiffuse_1.xyz = outDiffuseOcclusion_16.xyz;
  outEmission_2.w = emission_18.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_18.xyz));
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_17;
  _glesFragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_28;
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_29;
  tmpvar_4 = _Color;
  highp vec4 v_30;
  v_30.x = _World2Object[0].x;
  v_30.y = _World2Object[1].x;
  v_30.z = _World2Object[2].x;
  v_30.w = _World2Object[3].x;
  highp vec4 v_31;
  v_31.x = _World2Object[0].y;
  v_31.y = _World2Object[1].y;
  v_31.z = _World2Object[2].y;
  v_31.w = _World2Object[3].y;
  highp vec4 v_32;
  v_32.x = _World2Object[0].z;
  v_32.y = _World2Object[1].z;
  v_32.z = _World2Object[2].z;
  v_32.w = _World2Object[3].z;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(((
    (v_30.xyz * _BillboardNormal.x)
   + 
    (v_31.xyz * _BillboardNormal.y)
  ) + (v_32.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_33;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = worldNormal_2;
  mediump vec4 normal_35;
  normal_35 = tmpvar_34;
  mediump vec3 x2_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = (normal_35.xyzz * normal_35.yzzx);
  x2_36.x = dot (unity_SHBr, tmpvar_37);
  x2_36.y = dot (unity_SHBg, tmpvar_37);
  x2_36.z = dot (unity_SHBb, tmpvar_37);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = (x2_36 + (unity_SHC.xyz * (
    (normal_35.x * normal_35.x)
   - 
    (normal_35.y * normal_35.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = (diffuseColor_6.w * _Color.w);
  tmpvar_5 = tmpvar_8;
  lowp float x_9;
  x_9 = (tmpvar_5 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (diffuseColor_6.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_6.xyz = clamp ((tmpvar_10 * (
    ((max (diffuseColor_6.x, max (diffuseColor_6.y, diffuseColor_6.z)) / max (tmpvar_10.x, max (tmpvar_10.y, tmpvar_10.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_11;
  tmpvar_11 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_11;
  mediump vec3 normalWorld_12;
  normalWorld_12 = tmpvar_2;
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = normalWorld_12;
  mediump vec3 x1_14;
  x1_14.x = dot (unity_SHAr, tmpvar_13);
  x1_14.y = dot (unity_SHAg, tmpvar_13);
  x1_14.z = dot (unity_SHAb, tmpvar_13);
  mediump vec4 outDiffuseOcclusion_15;
  mediump vec4 outNormal_16;
  mediump vec4 emission_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_4;
  outDiffuseOcclusion_15 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = vec3(0.0, 0.0, 0.0);
  emission_17 = tmpvar_20;
  emission_17.xyz = (emission_17.xyz + (tmpvar_4 * (xlv_TEXCOORD6 + x1_14)));
  outDiffuse_1.xyz = outDiffuseOcclusion_15.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_16;
  gl_FragData[3] = emission_17;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_20.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_21.x + (tmpvar_21.y * tmpvar_21.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_17)));
    vPos_16 = (normalize(vPos_16) * fLength_18);
    billboardPos_8 = vPos_16;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    ((_CameraXZAngle + tmpvar_14.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    highp vec2 tmpvar_27;
    tmpvar_27 = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_27;
  } else {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_28;
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_29;
  tmpvar_4 = _Color;
  highp vec4 v_30;
  v_30.x = _World2Object[0].x;
  v_30.y = _World2Object[1].x;
  v_30.z = _World2Object[2].x;
  v_30.w = _World2Object[3].x;
  highp vec4 v_31;
  v_31.x = _World2Object[0].y;
  v_31.y = _World2Object[1].y;
  v_31.z = _World2Object[2].y;
  v_31.w = _World2Object[3].y;
  highp vec4 v_32;
  v_32.x = _World2Object[0].z;
  v_32.y = _World2Object[1].z;
  v_32.z = _World2Object[2].z;
  v_32.w = _World2Object[3].z;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(((
    (v_30.xyz * _BillboardNormal.x)
   + 
    (v_31.xyz * _BillboardNormal.y)
  ) + (v_32.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_33;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = worldNormal_2;
  mediump vec4 normal_35;
  normal_35 = tmpvar_34;
  mediump vec3 x2_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = (normal_35.xyzz * normal_35.yzzx);
  x2_36.x = dot (unity_SHBr, tmpvar_37);
  x2_36.y = dot (unity_SHBg, tmpvar_37);
  x2_36.z = dot (unity_SHBb, tmpvar_37);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = (x2_36 + (unity_SHC.xyz * (
    (normal_35.x * normal_35.x)
   - 
    (normal_35.y * normal_35.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = (diffuseColor_6.w * _Color.w);
  tmpvar_5 = tmpvar_8;
  lowp float x_9;
  x_9 = (tmpvar_5 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (diffuseColor_6.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_6.xyz = clamp ((tmpvar_10 * (
    ((max (diffuseColor_6.x, max (diffuseColor_6.y, diffuseColor_6.z)) / max (tmpvar_10.x, max (tmpvar_10.y, tmpvar_10.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_11;
  tmpvar_11 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_11;
  mediump vec3 normalWorld_12;
  normalWorld_12 = tmpvar_2;
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = normalWorld_12;
  mediump vec3 x1_14;
  x1_14.x = dot (unity_SHAr, tmpvar_13);
  x1_14.y = dot (unity_SHAg, tmpvar_13);
  x1_14.z = dot (unity_SHAb, tmpvar_13);
  mediump vec4 outDiffuseOcclusion_15;
  mediump vec4 outNormal_16;
  mediump vec4 emission_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_4;
  outDiffuseOcclusion_15 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = vec3(0.0, 0.0, 0.0);
  emission_17 = tmpvar_20;
  emission_17.xyz = (emission_17.xyz + (tmpvar_4 * (xlv_TEXCOORD6 + x1_14)));
  outDiffuse_1.xyz = outDiffuseOcclusion_15.xyz;
  outDiffuse_1.w = 1.0;
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_16;
  _glesFragData[3] = emission_17;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_16.xz;
  billboardPos_9.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_9;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_21.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_22.x + (tmpvar_22.y * tmpvar_22.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_18)));
    vPos_17 = (normalize(vPos_17) * fLength_19);
    billboardPos_9 = vPos_17;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    ((_CameraXZAngle + tmpvar_15.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
    tmpvar_8.xy = tmpvar_28;
  } else {
    highp vec2 tmpvar_29;
    tmpvar_29 = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
    tmpvar_8.xy = tmpvar_29;
  };
  tmpvar_5 = _Color;
  highp vec3 tmpvar_30;
  tmpvar_30 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_31;
  v_31.x = _World2Object[0].x;
  v_31.y = _World2Object[1].x;
  v_31.z = _World2Object[2].x;
  v_31.w = _World2Object[3].x;
  highp vec4 v_32;
  v_32.x = _World2Object[0].y;
  v_32.y = _World2Object[1].y;
  v_32.z = _World2Object[2].y;
  v_32.w = _World2Object[3].y;
  highp vec4 v_33;
  v_33.x = _World2Object[0].z;
  v_33.y = _World2Object[1].z;
  v_33.z = _World2Object[2].z;
  v_33.w = _World2Object[3].z;
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize(((
    (v_31.xyz * _BillboardNormal.x)
   + 
    (v_32.xyz * _BillboardNormal.y)
  ) + (v_33.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_34;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = _Object2World[0].xyz;
  tmpvar_35[1] = _Object2World[1].xyz;
  tmpvar_35[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((tmpvar_35 * _BillboardTangent));
  worldTangent_3 = tmpvar_36;
  lowp vec3 tmpvar_37;
  tmpvar_37 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_38;
  tmpvar_38 = -(tmpvar_37);
  worldBinormal_2 = tmpvar_38;
  highp vec4 tmpvar_39;
  tmpvar_39.x = worldTangent_3.x;
  tmpvar_39.y = worldBinormal_2.x;
  tmpvar_39.z = worldNormal_4.x;
  tmpvar_39.w = tmpvar_30.x;
  highp vec4 tmpvar_40;
  tmpvar_40.x = worldTangent_3.y;
  tmpvar_40.y = worldBinormal_2.y;
  tmpvar_40.z = worldNormal_4.y;
  tmpvar_40.w = tmpvar_30.y;
  highp vec4 tmpvar_41;
  tmpvar_41.x = worldTangent_3.z;
  tmpvar_41.y = worldBinormal_2.z;
  tmpvar_41.z = worldNormal_4.z;
  tmpvar_41.w = tmpvar_30.z;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_42;
  tmpvar_42.w = 1.0;
  tmpvar_42.xyz = worldNormal_4;
  mediump vec4 normal_43;
  normal_43 = tmpvar_42;
  mediump vec3 x2_44;
  mediump vec4 tmpvar_45;
  tmpvar_45 = (normal_43.xyzz * normal_43.yzzx);
  x2_44.x = dot (unity_SHBr, tmpvar_45);
  x2_44.y = dot (unity_SHBg, tmpvar_45);
  x2_44.z = dot (unity_SHBb, tmpvar_45);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_39;
  xlv_TEXCOORD1 = tmpvar_40;
  xlv_TEXCOORD2 = tmpvar_41;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_44 + (unity_SHC.xyz * (
    (normal_43.x * normal_43.x)
   - 
    (normal_43.y * normal_43.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 worldN_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_7 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_9;
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_13;
  tmpvar_13 = dot (xlv_TEXCOORD0.xyz, tmpvar_12);
  worldN_3.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD1.xyz, tmpvar_12);
  worldN_3.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD2.xyz, tmpvar_12);
  worldN_3.z = tmpvar_15;
  mediump vec3 normalWorld_16;
  normalWorld_16 = worldN_3;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_16;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  mediump vec4 outDiffuseOcclusion_19;
  mediump vec4 outNormal_20;
  mediump vec4 emission_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_5;
  outDiffuseOcclusion_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = ((worldN_3 * 0.5) + 0.5);
  outNormal_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  emission_21 = tmpvar_24;
  emission_21.xyz = (emission_21.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_18)));
  outDiffuse_1.xyz = outDiffuseOcclusion_19.xyz;
  outEmission_2.w = emission_21.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_21.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_20;
  gl_FragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD6;
out mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_16.xz;
  billboardPos_9.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_9;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_21.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_22.x + (tmpvar_22.y * tmpvar_22.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_18)));
    vPos_17 = (normalize(vPos_17) * fLength_19);
    billboardPos_9 = vPos_17;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    ((_CameraXZAngle + tmpvar_15.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
    tmpvar_8.xy = tmpvar_28;
  } else {
    highp vec2 tmpvar_29;
    tmpvar_29 = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
    tmpvar_8.xy = tmpvar_29;
  };
  tmpvar_5 = _Color;
  highp vec3 tmpvar_30;
  tmpvar_30 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_31;
  v_31.x = _World2Object[0].x;
  v_31.y = _World2Object[1].x;
  v_31.z = _World2Object[2].x;
  v_31.w = _World2Object[3].x;
  highp vec4 v_32;
  v_32.x = _World2Object[0].y;
  v_32.y = _World2Object[1].y;
  v_32.z = _World2Object[2].y;
  v_32.w = _World2Object[3].y;
  highp vec4 v_33;
  v_33.x = _World2Object[0].z;
  v_33.y = _World2Object[1].z;
  v_33.z = _World2Object[2].z;
  v_33.w = _World2Object[3].z;
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize(((
    (v_31.xyz * _BillboardNormal.x)
   + 
    (v_32.xyz * _BillboardNormal.y)
  ) + (v_33.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_34;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = _Object2World[0].xyz;
  tmpvar_35[1] = _Object2World[1].xyz;
  tmpvar_35[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((tmpvar_35 * _BillboardTangent));
  worldTangent_3 = tmpvar_36;
  lowp vec3 tmpvar_37;
  tmpvar_37 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_38;
  tmpvar_38 = -(tmpvar_37);
  worldBinormal_2 = tmpvar_38;
  highp vec4 tmpvar_39;
  tmpvar_39.x = worldTangent_3.x;
  tmpvar_39.y = worldBinormal_2.x;
  tmpvar_39.z = worldNormal_4.x;
  tmpvar_39.w = tmpvar_30.x;
  highp vec4 tmpvar_40;
  tmpvar_40.x = worldTangent_3.y;
  tmpvar_40.y = worldBinormal_2.y;
  tmpvar_40.z = worldNormal_4.y;
  tmpvar_40.w = tmpvar_30.y;
  highp vec4 tmpvar_41;
  tmpvar_41.x = worldTangent_3.z;
  tmpvar_41.y = worldBinormal_2.z;
  tmpvar_41.z = worldNormal_4.z;
  tmpvar_41.w = tmpvar_30.z;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_42;
  tmpvar_42.w = 1.0;
  tmpvar_42.xyz = worldNormal_4;
  mediump vec4 normal_43;
  normal_43 = tmpvar_42;
  mediump vec3 x2_44;
  mediump vec4 tmpvar_45;
  tmpvar_45 = (normal_43.xyzz * normal_43.yzzx);
  x2_44.x = dot (unity_SHBr, tmpvar_45);
  x2_44.y = dot (unity_SHBg, tmpvar_45);
  x2_44.z = dot (unity_SHBb, tmpvar_45);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_39;
  xlv_TEXCOORD1 = tmpvar_40;
  xlv_TEXCOORD2 = tmpvar_41;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_44 + (unity_SHC.xyz * (
    (normal_43.x * normal_43.x)
   - 
    (normal_43.y * normal_43.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 worldN_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_7 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_9;
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_13;
  tmpvar_13 = dot (xlv_TEXCOORD0.xyz, tmpvar_12);
  worldN_3.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD1.xyz, tmpvar_12);
  worldN_3.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD2.xyz, tmpvar_12);
  worldN_3.z = tmpvar_15;
  mediump vec3 normalWorld_16;
  normalWorld_16 = worldN_3;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_16;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  mediump vec4 outDiffuseOcclusion_19;
  mediump vec4 outNormal_20;
  mediump vec4 emission_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_5;
  outDiffuseOcclusion_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = ((worldN_3 * 0.5) + 0.5);
  outNormal_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  emission_21 = tmpvar_24;
  emission_21.xyz = (emission_21.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_18)));
  outDiffuse_1.xyz = outDiffuseOcclusion_19.xyz;
  outEmission_2.w = emission_21.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_21.xyz));
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_20;
  _glesFragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_16.xz;
  billboardPos_9.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_9;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_21.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_22.x + (tmpvar_22.y * tmpvar_22.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_18)));
    vPos_17 = (normalize(vPos_17) * fLength_19);
    billboardPos_9 = vPos_17;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    ((_CameraXZAngle + tmpvar_15.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
    tmpvar_8.xy = tmpvar_28;
  } else {
    highp vec2 tmpvar_29;
    tmpvar_29 = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
    tmpvar_8.xy = tmpvar_29;
  };
  tmpvar_5 = _Color;
  highp vec3 tmpvar_30;
  tmpvar_30 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_31;
  v_31.x = _World2Object[0].x;
  v_31.y = _World2Object[1].x;
  v_31.z = _World2Object[2].x;
  v_31.w = _World2Object[3].x;
  highp vec4 v_32;
  v_32.x = _World2Object[0].y;
  v_32.y = _World2Object[1].y;
  v_32.z = _World2Object[2].y;
  v_32.w = _World2Object[3].y;
  highp vec4 v_33;
  v_33.x = _World2Object[0].z;
  v_33.y = _World2Object[1].z;
  v_33.z = _World2Object[2].z;
  v_33.w = _World2Object[3].z;
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize(((
    (v_31.xyz * _BillboardNormal.x)
   + 
    (v_32.xyz * _BillboardNormal.y)
  ) + (v_33.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_34;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = _Object2World[0].xyz;
  tmpvar_35[1] = _Object2World[1].xyz;
  tmpvar_35[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((tmpvar_35 * _BillboardTangent));
  worldTangent_3 = tmpvar_36;
  lowp vec3 tmpvar_37;
  tmpvar_37 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_38;
  tmpvar_38 = -(tmpvar_37);
  worldBinormal_2 = tmpvar_38;
  highp vec4 tmpvar_39;
  tmpvar_39.x = worldTangent_3.x;
  tmpvar_39.y = worldBinormal_2.x;
  tmpvar_39.z = worldNormal_4.x;
  tmpvar_39.w = tmpvar_30.x;
  highp vec4 tmpvar_40;
  tmpvar_40.x = worldTangent_3.y;
  tmpvar_40.y = worldBinormal_2.y;
  tmpvar_40.z = worldNormal_4.y;
  tmpvar_40.w = tmpvar_30.y;
  highp vec4 tmpvar_41;
  tmpvar_41.x = worldTangent_3.z;
  tmpvar_41.y = worldBinormal_2.z;
  tmpvar_41.z = worldNormal_4.z;
  tmpvar_41.w = tmpvar_30.z;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_42;
  tmpvar_42.w = 1.0;
  tmpvar_42.xyz = worldNormal_4;
  mediump vec4 normal_43;
  normal_43 = tmpvar_42;
  mediump vec3 x2_44;
  mediump vec4 tmpvar_45;
  tmpvar_45 = (normal_43.xyzz * normal_43.yzzx);
  x2_44.x = dot (unity_SHBr, tmpvar_45);
  x2_44.y = dot (unity_SHBg, tmpvar_45);
  x2_44.z = dot (unity_SHBb, tmpvar_45);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_39;
  xlv_TEXCOORD1 = tmpvar_40;
  xlv_TEXCOORD2 = tmpvar_41;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_44 + (unity_SHC.xyz * (
    (normal_43.x * normal_43.x)
   - 
    (normal_43.y * normal_43.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 worldN_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_6 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = (diffuseColor_6.w * _Color.w);
  tmpvar_5 = tmpvar_8;
  lowp float x_9;
  x_9 = (tmpvar_5 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_10;
  tmpvar_10 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_10;
  lowp vec3 tmpvar_11;
  tmpvar_11 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_12;
  tmpvar_12 = dot (xlv_TEXCOORD0.xyz, tmpvar_11);
  worldN_2.x = tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (xlv_TEXCOORD1.xyz, tmpvar_11);
  worldN_2.y = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD2.xyz, tmpvar_11);
  worldN_2.z = tmpvar_14;
  mediump vec3 normalWorld_15;
  normalWorld_15 = worldN_2;
  mediump vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = normalWorld_15;
  mediump vec3 x1_17;
  x1_17.x = dot (unity_SHAr, tmpvar_16);
  x1_17.y = dot (unity_SHAg, tmpvar_16);
  x1_17.z = dot (unity_SHAb, tmpvar_16);
  mediump vec4 outDiffuseOcclusion_18;
  mediump vec4 outNormal_19;
  mediump vec4 emission_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_4;
  outDiffuseOcclusion_18 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = ((worldN_2 * 0.5) + 0.5);
  outNormal_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = vec3(0.0, 0.0, 0.0);
  emission_20 = tmpvar_23;
  emission_20.xyz = (emission_20.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_17)));
  outDiffuse_1.xyz = outDiffuseOcclusion_18.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_19;
  gl_FragData[3] = emission_20;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD6;
out mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_16.xz;
  billboardPos_9.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_9;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_21.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_22.x + (tmpvar_22.y * tmpvar_22.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_18)));
    vPos_17 = (normalize(vPos_17) * fLength_19);
    billboardPos_9 = vPos_17;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    ((_CameraXZAngle + tmpvar_15.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
    tmpvar_8.xy = tmpvar_28;
  } else {
    highp vec2 tmpvar_29;
    tmpvar_29 = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
    tmpvar_8.xy = tmpvar_29;
  };
  tmpvar_5 = _Color;
  highp vec3 tmpvar_30;
  tmpvar_30 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_31;
  v_31.x = _World2Object[0].x;
  v_31.y = _World2Object[1].x;
  v_31.z = _World2Object[2].x;
  v_31.w = _World2Object[3].x;
  highp vec4 v_32;
  v_32.x = _World2Object[0].y;
  v_32.y = _World2Object[1].y;
  v_32.z = _World2Object[2].y;
  v_32.w = _World2Object[3].y;
  highp vec4 v_33;
  v_33.x = _World2Object[0].z;
  v_33.y = _World2Object[1].z;
  v_33.z = _World2Object[2].z;
  v_33.w = _World2Object[3].z;
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize(((
    (v_31.xyz * _BillboardNormal.x)
   + 
    (v_32.xyz * _BillboardNormal.y)
  ) + (v_33.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_34;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = _Object2World[0].xyz;
  tmpvar_35[1] = _Object2World[1].xyz;
  tmpvar_35[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((tmpvar_35 * _BillboardTangent));
  worldTangent_3 = tmpvar_36;
  lowp vec3 tmpvar_37;
  tmpvar_37 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_38;
  tmpvar_38 = -(tmpvar_37);
  worldBinormal_2 = tmpvar_38;
  highp vec4 tmpvar_39;
  tmpvar_39.x = worldTangent_3.x;
  tmpvar_39.y = worldBinormal_2.x;
  tmpvar_39.z = worldNormal_4.x;
  tmpvar_39.w = tmpvar_30.x;
  highp vec4 tmpvar_40;
  tmpvar_40.x = worldTangent_3.y;
  tmpvar_40.y = worldBinormal_2.y;
  tmpvar_40.z = worldNormal_4.y;
  tmpvar_40.w = tmpvar_30.y;
  highp vec4 tmpvar_41;
  tmpvar_41.x = worldTangent_3.z;
  tmpvar_41.y = worldBinormal_2.z;
  tmpvar_41.z = worldNormal_4.z;
  tmpvar_41.w = tmpvar_30.z;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_42;
  tmpvar_42.w = 1.0;
  tmpvar_42.xyz = worldNormal_4;
  mediump vec4 normal_43;
  normal_43 = tmpvar_42;
  mediump vec3 x2_44;
  mediump vec4 tmpvar_45;
  tmpvar_45 = (normal_43.xyzz * normal_43.yzzx);
  x2_44.x = dot (unity_SHBr, tmpvar_45);
  x2_44.y = dot (unity_SHBg, tmpvar_45);
  x2_44.z = dot (unity_SHBb, tmpvar_45);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_39;
  xlv_TEXCOORD1 = tmpvar_40;
  xlv_TEXCOORD2 = tmpvar_41;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_44 + (unity_SHC.xyz * (
    (normal_43.x * normal_43.x)
   - 
    (normal_43.y * normal_43.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 worldN_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_6 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = (diffuseColor_6.w * _Color.w);
  tmpvar_5 = tmpvar_8;
  lowp float x_9;
  x_9 = (tmpvar_5 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_10;
  tmpvar_10 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_10;
  lowp vec3 tmpvar_11;
  tmpvar_11 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_12;
  tmpvar_12 = dot (xlv_TEXCOORD0.xyz, tmpvar_11);
  worldN_2.x = tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (xlv_TEXCOORD1.xyz, tmpvar_11);
  worldN_2.y = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD2.xyz, tmpvar_11);
  worldN_2.z = tmpvar_14;
  mediump vec3 normalWorld_15;
  normalWorld_15 = worldN_2;
  mediump vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = normalWorld_15;
  mediump vec3 x1_17;
  x1_17.x = dot (unity_SHAr, tmpvar_16);
  x1_17.y = dot (unity_SHAg, tmpvar_16);
  x1_17.z = dot (unity_SHAb, tmpvar_16);
  mediump vec4 outDiffuseOcclusion_18;
  mediump vec4 outNormal_19;
  mediump vec4 emission_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_4;
  outDiffuseOcclusion_18 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = ((worldN_2 * 0.5) + 0.5);
  outNormal_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = vec3(0.0, 0.0, 0.0);
  emission_20 = tmpvar_23;
  emission_20.xyz = (emission_20.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_17)));
  outDiffuse_1.xyz = outDiffuseOcclusion_18.xyz;
  outDiffuse_1.w = 1.0;
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_19;
  _glesFragData[3] = emission_20;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_16.xz;
  billboardPos_9.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_9;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_21.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_22.x + (tmpvar_22.y * tmpvar_22.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_18)));
    vPos_17 = (normalize(vPos_17) * fLength_19);
    billboardPos_9 = vPos_17;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    ((_CameraXZAngle + tmpvar_15.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
    tmpvar_8.xy = tmpvar_28;
  } else {
    highp vec2 tmpvar_29;
    tmpvar_29 = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
    tmpvar_8.xy = tmpvar_29;
  };
  highp float tmpvar_30;
  tmpvar_30 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_30;
  tmpvar_5 = _Color;
  highp vec3 tmpvar_31;
  tmpvar_31 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_32;
  v_32.x = _World2Object[0].x;
  v_32.y = _World2Object[1].x;
  v_32.z = _World2Object[2].x;
  v_32.w = _World2Object[3].x;
  highp vec4 v_33;
  v_33.x = _World2Object[0].y;
  v_33.y = _World2Object[1].y;
  v_33.z = _World2Object[2].y;
  v_33.w = _World2Object[3].y;
  highp vec4 v_34;
  v_34.x = _World2Object[0].z;
  v_34.y = _World2Object[1].z;
  v_34.z = _World2Object[2].z;
  v_34.w = _World2Object[3].z;
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize(((
    (v_32.xyz * _BillboardNormal.x)
   + 
    (v_33.xyz * _BillboardNormal.y)
  ) + (v_34.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_35;
  highp mat3 tmpvar_36;
  tmpvar_36[0] = _Object2World[0].xyz;
  tmpvar_36[1] = _Object2World[1].xyz;
  tmpvar_36[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize((tmpvar_36 * _BillboardTangent));
  worldTangent_3 = tmpvar_37;
  lowp vec3 tmpvar_38;
  tmpvar_38 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_39;
  tmpvar_39 = -(tmpvar_38);
  worldBinormal_2 = tmpvar_39;
  highp vec4 tmpvar_40;
  tmpvar_40.x = worldTangent_3.x;
  tmpvar_40.y = worldBinormal_2.x;
  tmpvar_40.z = worldNormal_4.x;
  tmpvar_40.w = tmpvar_31.x;
  highp vec4 tmpvar_41;
  tmpvar_41.x = worldTangent_3.y;
  tmpvar_41.y = worldBinormal_2.y;
  tmpvar_41.z = worldNormal_4.y;
  tmpvar_41.w = tmpvar_31.y;
  highp vec4 tmpvar_42;
  tmpvar_42.x = worldTangent_3.z;
  tmpvar_42.y = worldBinormal_2.z;
  tmpvar_42.z = worldNormal_4.z;
  tmpvar_42.w = tmpvar_31.z;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = worldNormal_4;
  mediump vec4 normal_44;
  normal_44 = tmpvar_43;
  mediump vec3 x2_45;
  mediump vec4 tmpvar_46;
  tmpvar_46 = (normal_44.xyzz * normal_44.yzzx);
  x2_45.x = dot (unity_SHBr, tmpvar_46);
  x2_45.y = dot (unity_SHBg, tmpvar_46);
  x2_45.z = dot (unity_SHBb, tmpvar_46);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_40;
  xlv_TEXCOORD1 = tmpvar_41;
  xlv_TEXCOORD2 = tmpvar_42;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_45 + (unity_SHC.xyz * (
    (normal_44.x * normal_44.x)
   - 
    (normal_44.y * normal_44.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 worldN_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_7 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_9;
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_11 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_12;
  tmpvar_12 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD0.xyz, tmpvar_13);
  worldN_3.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD1.xyz, tmpvar_13);
  worldN_3.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD2.xyz, tmpvar_13);
  worldN_3.z = tmpvar_16;
  mediump vec3 normalWorld_17;
  normalWorld_17 = worldN_3;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_17;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  mediump vec4 outDiffuseOcclusion_20;
  mediump vec4 outNormal_21;
  mediump vec4 emission_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = tmpvar_5;
  outDiffuseOcclusion_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = ((worldN_3 * 0.5) + 0.5);
  outNormal_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  emission_22 = tmpvar_25;
  emission_22.xyz = (emission_22.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_19)));
  outDiffuse_1.xyz = outDiffuseOcclusion_20.xyz;
  outEmission_2.w = emission_22.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_22.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_21;
  gl_FragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD6;
out mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_16.xz;
  billboardPos_9.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_9;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_21.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_22.x + (tmpvar_22.y * tmpvar_22.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_18)));
    vPos_17 = (normalize(vPos_17) * fLength_19);
    billboardPos_9 = vPos_17;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    ((_CameraXZAngle + tmpvar_15.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
    tmpvar_8.xy = tmpvar_28;
  } else {
    highp vec2 tmpvar_29;
    tmpvar_29 = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
    tmpvar_8.xy = tmpvar_29;
  };
  highp float tmpvar_30;
  tmpvar_30 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_30;
  tmpvar_5 = _Color;
  highp vec3 tmpvar_31;
  tmpvar_31 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_32;
  v_32.x = _World2Object[0].x;
  v_32.y = _World2Object[1].x;
  v_32.z = _World2Object[2].x;
  v_32.w = _World2Object[3].x;
  highp vec4 v_33;
  v_33.x = _World2Object[0].y;
  v_33.y = _World2Object[1].y;
  v_33.z = _World2Object[2].y;
  v_33.w = _World2Object[3].y;
  highp vec4 v_34;
  v_34.x = _World2Object[0].z;
  v_34.y = _World2Object[1].z;
  v_34.z = _World2Object[2].z;
  v_34.w = _World2Object[3].z;
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize(((
    (v_32.xyz * _BillboardNormal.x)
   + 
    (v_33.xyz * _BillboardNormal.y)
  ) + (v_34.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_35;
  highp mat3 tmpvar_36;
  tmpvar_36[0] = _Object2World[0].xyz;
  tmpvar_36[1] = _Object2World[1].xyz;
  tmpvar_36[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize((tmpvar_36 * _BillboardTangent));
  worldTangent_3 = tmpvar_37;
  lowp vec3 tmpvar_38;
  tmpvar_38 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_39;
  tmpvar_39 = -(tmpvar_38);
  worldBinormal_2 = tmpvar_39;
  highp vec4 tmpvar_40;
  tmpvar_40.x = worldTangent_3.x;
  tmpvar_40.y = worldBinormal_2.x;
  tmpvar_40.z = worldNormal_4.x;
  tmpvar_40.w = tmpvar_31.x;
  highp vec4 tmpvar_41;
  tmpvar_41.x = worldTangent_3.y;
  tmpvar_41.y = worldBinormal_2.y;
  tmpvar_41.z = worldNormal_4.y;
  tmpvar_41.w = tmpvar_31.y;
  highp vec4 tmpvar_42;
  tmpvar_42.x = worldTangent_3.z;
  tmpvar_42.y = worldBinormal_2.z;
  tmpvar_42.z = worldNormal_4.z;
  tmpvar_42.w = tmpvar_31.z;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = worldNormal_4;
  mediump vec4 normal_44;
  normal_44 = tmpvar_43;
  mediump vec3 x2_45;
  mediump vec4 tmpvar_46;
  tmpvar_46 = (normal_44.xyzz * normal_44.yzzx);
  x2_45.x = dot (unity_SHBr, tmpvar_46);
  x2_45.y = dot (unity_SHBg, tmpvar_46);
  x2_45.z = dot (unity_SHBb, tmpvar_46);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_40;
  xlv_TEXCOORD1 = tmpvar_41;
  xlv_TEXCOORD2 = tmpvar_42;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_45 + (unity_SHC.xyz * (
    (normal_44.x * normal_44.x)
   - 
    (normal_44.y * normal_44.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 worldN_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_7 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_9;
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_11 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_12;
  tmpvar_12 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD0.xyz, tmpvar_13);
  worldN_3.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD1.xyz, tmpvar_13);
  worldN_3.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD2.xyz, tmpvar_13);
  worldN_3.z = tmpvar_16;
  mediump vec3 normalWorld_17;
  normalWorld_17 = worldN_3;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_17;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  mediump vec4 outDiffuseOcclusion_20;
  mediump vec4 outNormal_21;
  mediump vec4 emission_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = tmpvar_5;
  outDiffuseOcclusion_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = ((worldN_3 * 0.5) + 0.5);
  outNormal_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  emission_22 = tmpvar_25;
  emission_22.xyz = (emission_22.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_19)));
  outDiffuse_1.xyz = outDiffuseOcclusion_20.xyz;
  outEmission_2.w = emission_22.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_22.xyz));
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_21;
  _glesFragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_16.xz;
  billboardPos_9.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_9;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_21.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_22.x + (tmpvar_22.y * tmpvar_22.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_18)));
    vPos_17 = (normalize(vPos_17) * fLength_19);
    billboardPos_9 = vPos_17;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    ((_CameraXZAngle + tmpvar_15.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
    tmpvar_8.xy = tmpvar_28;
  } else {
    highp vec2 tmpvar_29;
    tmpvar_29 = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
    tmpvar_8.xy = tmpvar_29;
  };
  highp float tmpvar_30;
  tmpvar_30 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_30;
  tmpvar_5 = _Color;
  highp vec3 tmpvar_31;
  tmpvar_31 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_32;
  v_32.x = _World2Object[0].x;
  v_32.y = _World2Object[1].x;
  v_32.z = _World2Object[2].x;
  v_32.w = _World2Object[3].x;
  highp vec4 v_33;
  v_33.x = _World2Object[0].y;
  v_33.y = _World2Object[1].y;
  v_33.z = _World2Object[2].y;
  v_33.w = _World2Object[3].y;
  highp vec4 v_34;
  v_34.x = _World2Object[0].z;
  v_34.y = _World2Object[1].z;
  v_34.z = _World2Object[2].z;
  v_34.w = _World2Object[3].z;
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize(((
    (v_32.xyz * _BillboardNormal.x)
   + 
    (v_33.xyz * _BillboardNormal.y)
  ) + (v_34.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_35;
  highp mat3 tmpvar_36;
  tmpvar_36[0] = _Object2World[0].xyz;
  tmpvar_36[1] = _Object2World[1].xyz;
  tmpvar_36[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize((tmpvar_36 * _BillboardTangent));
  worldTangent_3 = tmpvar_37;
  lowp vec3 tmpvar_38;
  tmpvar_38 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_39;
  tmpvar_39 = -(tmpvar_38);
  worldBinormal_2 = tmpvar_39;
  highp vec4 tmpvar_40;
  tmpvar_40.x = worldTangent_3.x;
  tmpvar_40.y = worldBinormal_2.x;
  tmpvar_40.z = worldNormal_4.x;
  tmpvar_40.w = tmpvar_31.x;
  highp vec4 tmpvar_41;
  tmpvar_41.x = worldTangent_3.y;
  tmpvar_41.y = worldBinormal_2.y;
  tmpvar_41.z = worldNormal_4.y;
  tmpvar_41.w = tmpvar_31.y;
  highp vec4 tmpvar_42;
  tmpvar_42.x = worldTangent_3.z;
  tmpvar_42.y = worldBinormal_2.z;
  tmpvar_42.z = worldNormal_4.z;
  tmpvar_42.w = tmpvar_31.z;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = worldNormal_4;
  mediump vec4 normal_44;
  normal_44 = tmpvar_43;
  mediump vec3 x2_45;
  mediump vec4 tmpvar_46;
  tmpvar_46 = (normal_44.xyzz * normal_44.yzzx);
  x2_45.x = dot (unity_SHBr, tmpvar_46);
  x2_45.y = dot (unity_SHBg, tmpvar_46);
  x2_45.z = dot (unity_SHBb, tmpvar_46);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_40;
  xlv_TEXCOORD1 = tmpvar_41;
  xlv_TEXCOORD2 = tmpvar_42;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_45 + (unity_SHC.xyz * (
    (normal_44.x * normal_44.x)
   - 
    (normal_44.y * normal_44.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 worldN_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_6 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = (diffuseColor_6.w * _Color.w);
  tmpvar_5 = tmpvar_8;
  lowp float x_9;
  x_9 = (tmpvar_5 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (diffuseColor_6.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_6.xyz = clamp ((tmpvar_10 * (
    ((max (diffuseColor_6.x, max (diffuseColor_6.y, diffuseColor_6.z)) / max (tmpvar_10.x, max (tmpvar_10.y, tmpvar_10.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_11;
  tmpvar_11 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_13;
  tmpvar_13 = dot (xlv_TEXCOORD0.xyz, tmpvar_12);
  worldN_2.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD1.xyz, tmpvar_12);
  worldN_2.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD2.xyz, tmpvar_12);
  worldN_2.z = tmpvar_15;
  mediump vec3 normalWorld_16;
  normalWorld_16 = worldN_2;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_16;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  mediump vec4 outDiffuseOcclusion_19;
  mediump vec4 outNormal_20;
  mediump vec4 emission_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_4;
  outDiffuseOcclusion_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = ((worldN_2 * 0.5) + 0.5);
  outNormal_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  emission_21 = tmpvar_24;
  emission_21.xyz = (emission_21.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_18)));
  outDiffuse_1.xyz = outDiffuseOcclusion_19.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_20;
  gl_FragData[3] = emission_21;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD6;
out mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_16.xz;
  billboardPos_9.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_9;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_21.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_22.x + (tmpvar_22.y * tmpvar_22.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_18)));
    vPos_17 = (normalize(vPos_17) * fLength_19);
    billboardPos_9 = vPos_17;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    ((_CameraXZAngle + tmpvar_15.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
    tmpvar_8.xy = tmpvar_28;
  } else {
    highp vec2 tmpvar_29;
    tmpvar_29 = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
    tmpvar_8.xy = tmpvar_29;
  };
  highp float tmpvar_30;
  tmpvar_30 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_30;
  tmpvar_5 = _Color;
  highp vec3 tmpvar_31;
  tmpvar_31 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_32;
  v_32.x = _World2Object[0].x;
  v_32.y = _World2Object[1].x;
  v_32.z = _World2Object[2].x;
  v_32.w = _World2Object[3].x;
  highp vec4 v_33;
  v_33.x = _World2Object[0].y;
  v_33.y = _World2Object[1].y;
  v_33.z = _World2Object[2].y;
  v_33.w = _World2Object[3].y;
  highp vec4 v_34;
  v_34.x = _World2Object[0].z;
  v_34.y = _World2Object[1].z;
  v_34.z = _World2Object[2].z;
  v_34.w = _World2Object[3].z;
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize(((
    (v_32.xyz * _BillboardNormal.x)
   + 
    (v_33.xyz * _BillboardNormal.y)
  ) + (v_34.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_35;
  highp mat3 tmpvar_36;
  tmpvar_36[0] = _Object2World[0].xyz;
  tmpvar_36[1] = _Object2World[1].xyz;
  tmpvar_36[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize((tmpvar_36 * _BillboardTangent));
  worldTangent_3 = tmpvar_37;
  lowp vec3 tmpvar_38;
  tmpvar_38 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_39;
  tmpvar_39 = -(tmpvar_38);
  worldBinormal_2 = tmpvar_39;
  highp vec4 tmpvar_40;
  tmpvar_40.x = worldTangent_3.x;
  tmpvar_40.y = worldBinormal_2.x;
  tmpvar_40.z = worldNormal_4.x;
  tmpvar_40.w = tmpvar_31.x;
  highp vec4 tmpvar_41;
  tmpvar_41.x = worldTangent_3.y;
  tmpvar_41.y = worldBinormal_2.y;
  tmpvar_41.z = worldNormal_4.y;
  tmpvar_41.w = tmpvar_31.y;
  highp vec4 tmpvar_42;
  tmpvar_42.x = worldTangent_3.z;
  tmpvar_42.y = worldBinormal_2.z;
  tmpvar_42.z = worldNormal_4.z;
  tmpvar_42.w = tmpvar_31.z;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = worldNormal_4;
  mediump vec4 normal_44;
  normal_44 = tmpvar_43;
  mediump vec3 x2_45;
  mediump vec4 tmpvar_46;
  tmpvar_46 = (normal_44.xyzz * normal_44.yzzx);
  x2_45.x = dot (unity_SHBr, tmpvar_46);
  x2_45.y = dot (unity_SHBg, tmpvar_46);
  x2_45.z = dot (unity_SHBb, tmpvar_46);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_40;
  xlv_TEXCOORD1 = tmpvar_41;
  xlv_TEXCOORD2 = tmpvar_42;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_45 + (unity_SHC.xyz * (
    (normal_44.x * normal_44.x)
   - 
    (normal_44.y * normal_44.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 worldN_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_6 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = (diffuseColor_6.w * _Color.w);
  tmpvar_5 = tmpvar_8;
  lowp float x_9;
  x_9 = (tmpvar_5 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (diffuseColor_6.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_6.xyz = clamp ((tmpvar_10 * (
    ((max (diffuseColor_6.x, max (diffuseColor_6.y, diffuseColor_6.z)) / max (tmpvar_10.x, max (tmpvar_10.y, tmpvar_10.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_11;
  tmpvar_11 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_13;
  tmpvar_13 = dot (xlv_TEXCOORD0.xyz, tmpvar_12);
  worldN_2.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD1.xyz, tmpvar_12);
  worldN_2.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD2.xyz, tmpvar_12);
  worldN_2.z = tmpvar_15;
  mediump vec3 normalWorld_16;
  normalWorld_16 = worldN_2;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_16;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  mediump vec4 outDiffuseOcclusion_19;
  mediump vec4 outNormal_20;
  mediump vec4 emission_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_4;
  outDiffuseOcclusion_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = ((worldN_2 * 0.5) + 0.5);
  outNormal_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  emission_21 = tmpvar_24;
  emission_21.xyz = (emission_21.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_18)));
  outDiffuse_1.xyz = outDiffuseOcclusion_19.xyz;
  outDiffuse_1.w = 1.0;
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_20;
  _glesFragData[3] = emission_21;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_40;
  };
  tmpvar_4 = _Color;
  highp vec4 v_41;
  v_41.x = _World2Object[0].x;
  v_41.y = _World2Object[1].x;
  v_41.z = _World2Object[2].x;
  v_41.w = _World2Object[3].x;
  highp vec4 v_42;
  v_42.x = _World2Object[0].z;
  v_42.y = _World2Object[1].z;
  v_42.z = _World2Object[2].z;
  v_42.w = _World2Object[3].z;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(((v_41.xyz * tmpvar_16.z) + (v_42.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_43;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_44;
  tmpvar_44.w = 1.0;
  tmpvar_44.xyz = worldNormal_2;
  mediump vec4 normal_45;
  normal_45 = tmpvar_44;
  mediump vec3 x2_46;
  mediump vec4 tmpvar_47;
  tmpvar_47 = (normal_45.xyzz * normal_45.yzzx);
  x2_46.x = dot (unity_SHBr, tmpvar_47);
  x2_46.y = dot (unity_SHBg, tmpvar_47);
  x2_46.z = dot (unity_SHBb, tmpvar_47);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = (x2_46 + (unity_SHC.xyz * (
    (normal_45.x * normal_45.x)
   - 
    (normal_45.y * normal_45.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_9;
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_11;
  mediump vec3 normalWorld_12;
  normalWorld_12 = tmpvar_3;
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = normalWorld_12;
  mediump vec3 x1_14;
  x1_14.x = dot (unity_SHAr, tmpvar_13);
  x1_14.y = dot (unity_SHAg, tmpvar_13);
  x1_14.z = dot (unity_SHAb, tmpvar_13);
  mediump vec4 outDiffuseOcclusion_15;
  mediump vec4 outNormal_16;
  mediump vec4 emission_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_5;
  outDiffuseOcclusion_15 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = vec3(0.0, 0.0, 0.0);
  emission_17 = tmpvar_20;
  emission_17.xyz = (emission_17.xyz + (tmpvar_5 * (xlv_TEXCOORD6 + x1_14)));
  outDiffuse_1.xyz = outDiffuseOcclusion_15.xyz;
  outEmission_2.w = emission_17.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_17.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_16;
  gl_FragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_40;
  };
  tmpvar_4 = _Color;
  highp vec4 v_41;
  v_41.x = _World2Object[0].x;
  v_41.y = _World2Object[1].x;
  v_41.z = _World2Object[2].x;
  v_41.w = _World2Object[3].x;
  highp vec4 v_42;
  v_42.x = _World2Object[0].z;
  v_42.y = _World2Object[1].z;
  v_42.z = _World2Object[2].z;
  v_42.w = _World2Object[3].z;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(((v_41.xyz * tmpvar_16.z) + (v_42.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_43;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_44;
  tmpvar_44.w = 1.0;
  tmpvar_44.xyz = worldNormal_2;
  mediump vec4 normal_45;
  normal_45 = tmpvar_44;
  mediump vec3 x2_46;
  mediump vec4 tmpvar_47;
  tmpvar_47 = (normal_45.xyzz * normal_45.yzzx);
  x2_46.x = dot (unity_SHBr, tmpvar_47);
  x2_46.y = dot (unity_SHBg, tmpvar_47);
  x2_46.z = dot (unity_SHBb, tmpvar_47);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = (x2_46 + (unity_SHC.xyz * (
    (normal_45.x * normal_45.x)
   - 
    (normal_45.y * normal_45.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_9;
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_11;
  mediump vec3 normalWorld_12;
  normalWorld_12 = tmpvar_3;
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = normalWorld_12;
  mediump vec3 x1_14;
  x1_14.x = dot (unity_SHAr, tmpvar_13);
  x1_14.y = dot (unity_SHAg, tmpvar_13);
  x1_14.z = dot (unity_SHAb, tmpvar_13);
  mediump vec4 outDiffuseOcclusion_15;
  mediump vec4 outNormal_16;
  mediump vec4 emission_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_5;
  outDiffuseOcclusion_15 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = vec3(0.0, 0.0, 0.0);
  emission_17 = tmpvar_20;
  emission_17.xyz = (emission_17.xyz + (tmpvar_5 * (xlv_TEXCOORD6 + x1_14)));
  outDiffuse_1.xyz = outDiffuseOcclusion_15.xyz;
  outEmission_2.w = emission_17.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_17.xyz));
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_16;
  _glesFragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_40;
  };
  tmpvar_4 = _Color;
  highp vec4 v_41;
  v_41.x = _World2Object[0].x;
  v_41.y = _World2Object[1].x;
  v_41.z = _World2Object[2].x;
  v_41.w = _World2Object[3].x;
  highp vec4 v_42;
  v_42.x = _World2Object[0].z;
  v_42.y = _World2Object[1].z;
  v_42.z = _World2Object[2].z;
  v_42.w = _World2Object[3].z;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(((v_41.xyz * tmpvar_16.z) + (v_42.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_43;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_44;
  tmpvar_44.w = 1.0;
  tmpvar_44.xyz = worldNormal_2;
  mediump vec4 normal_45;
  normal_45 = tmpvar_44;
  mediump vec3 x2_46;
  mediump vec4 tmpvar_47;
  tmpvar_47 = (normal_45.xyzz * normal_45.yzzx);
  x2_46.x = dot (unity_SHBr, tmpvar_47);
  x2_46.y = dot (unity_SHBg, tmpvar_47);
  x2_46.z = dot (unity_SHBb, tmpvar_47);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = (x2_46 + (unity_SHC.xyz * (
    (normal_45.x * normal_45.x)
   - 
    (normal_45.y * normal_45.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = (diffuseColor_6.w * _Color.w);
  tmpvar_5 = tmpvar_8;
  lowp float x_9;
  x_9 = (tmpvar_5 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_10;
  tmpvar_10 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_10;
  mediump vec3 normalWorld_11;
  normalWorld_11 = tmpvar_2;
  mediump vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = normalWorld_11;
  mediump vec3 x1_13;
  x1_13.x = dot (unity_SHAr, tmpvar_12);
  x1_13.y = dot (unity_SHAg, tmpvar_12);
  x1_13.z = dot (unity_SHAb, tmpvar_12);
  mediump vec4 outDiffuseOcclusion_14;
  mediump vec4 outNormal_15;
  mediump vec4 emission_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = tmpvar_4;
  outDiffuseOcclusion_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_15 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = vec3(0.0, 0.0, 0.0);
  emission_16 = tmpvar_19;
  emission_16.xyz = (emission_16.xyz + (tmpvar_4 * (xlv_TEXCOORD6 + x1_13)));
  outDiffuse_1.xyz = outDiffuseOcclusion_14.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_15;
  gl_FragData[3] = emission_16;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_40;
  };
  tmpvar_4 = _Color;
  highp vec4 v_41;
  v_41.x = _World2Object[0].x;
  v_41.y = _World2Object[1].x;
  v_41.z = _World2Object[2].x;
  v_41.w = _World2Object[3].x;
  highp vec4 v_42;
  v_42.x = _World2Object[0].z;
  v_42.y = _World2Object[1].z;
  v_42.z = _World2Object[2].z;
  v_42.w = _World2Object[3].z;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(((v_41.xyz * tmpvar_16.z) + (v_42.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_43;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_44;
  tmpvar_44.w = 1.0;
  tmpvar_44.xyz = worldNormal_2;
  mediump vec4 normal_45;
  normal_45 = tmpvar_44;
  mediump vec3 x2_46;
  mediump vec4 tmpvar_47;
  tmpvar_47 = (normal_45.xyzz * normal_45.yzzx);
  x2_46.x = dot (unity_SHBr, tmpvar_47);
  x2_46.y = dot (unity_SHBg, tmpvar_47);
  x2_46.z = dot (unity_SHBb, tmpvar_47);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = (x2_46 + (unity_SHC.xyz * (
    (normal_45.x * normal_45.x)
   - 
    (normal_45.y * normal_45.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = (diffuseColor_6.w * _Color.w);
  tmpvar_5 = tmpvar_8;
  lowp float x_9;
  x_9 = (tmpvar_5 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_10;
  tmpvar_10 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_10;
  mediump vec3 normalWorld_11;
  normalWorld_11 = tmpvar_2;
  mediump vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = normalWorld_11;
  mediump vec3 x1_13;
  x1_13.x = dot (unity_SHAr, tmpvar_12);
  x1_13.y = dot (unity_SHAg, tmpvar_12);
  x1_13.z = dot (unity_SHAb, tmpvar_12);
  mediump vec4 outDiffuseOcclusion_14;
  mediump vec4 outNormal_15;
  mediump vec4 emission_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = tmpvar_4;
  outDiffuseOcclusion_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_15 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = vec3(0.0, 0.0, 0.0);
  emission_16 = tmpvar_19;
  emission_16.xyz = (emission_16.xyz + (tmpvar_4 * (xlv_TEXCOORD6 + x1_13)));
  outDiffuse_1.xyz = outDiffuseOcclusion_14.xyz;
  outDiffuse_1.w = 1.0;
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_15;
  _glesFragData[3] = emission_16;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_40;
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_41;
  tmpvar_4 = _Color;
  highp vec4 v_42;
  v_42.x = _World2Object[0].x;
  v_42.y = _World2Object[1].x;
  v_42.z = _World2Object[2].x;
  v_42.w = _World2Object[3].x;
  highp vec4 v_43;
  v_43.x = _World2Object[0].z;
  v_43.y = _World2Object[1].z;
  v_43.z = _World2Object[2].z;
  v_43.w = _World2Object[3].z;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(((v_42.xyz * tmpvar_16.z) + (v_43.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_44;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_45;
  tmpvar_45.w = 1.0;
  tmpvar_45.xyz = worldNormal_2;
  mediump vec4 normal_46;
  normal_46 = tmpvar_45;
  mediump vec3 x2_47;
  mediump vec4 tmpvar_48;
  tmpvar_48 = (normal_46.xyzz * normal_46.yzzx);
  x2_47.x = dot (unity_SHBr, tmpvar_48);
  x2_47.y = dot (unity_SHBg, tmpvar_48);
  x2_47.z = dot (unity_SHBb, tmpvar_48);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = (x2_47 + (unity_SHC.xyz * (
    (normal_46.x * normal_46.x)
   - 
    (normal_46.y * normal_46.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_9;
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_11 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_12;
  tmpvar_12 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_12;
  mediump vec3 normalWorld_13;
  normalWorld_13 = tmpvar_3;
  mediump vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = normalWorld_13;
  mediump vec3 x1_15;
  x1_15.x = dot (unity_SHAr, tmpvar_14);
  x1_15.y = dot (unity_SHAg, tmpvar_14);
  x1_15.z = dot (unity_SHAb, tmpvar_14);
  mediump vec4 outDiffuseOcclusion_16;
  mediump vec4 outNormal_17;
  mediump vec4 emission_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = tmpvar_5;
  outDiffuseOcclusion_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_17 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = vec3(0.0, 0.0, 0.0);
  emission_18 = tmpvar_21;
  emission_18.xyz = (emission_18.xyz + (tmpvar_5 * (xlv_TEXCOORD6 + x1_15)));
  outDiffuse_1.xyz = outDiffuseOcclusion_16.xyz;
  outEmission_2.w = emission_18.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_18.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_17;
  gl_FragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_40;
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_41;
  tmpvar_4 = _Color;
  highp vec4 v_42;
  v_42.x = _World2Object[0].x;
  v_42.y = _World2Object[1].x;
  v_42.z = _World2Object[2].x;
  v_42.w = _World2Object[3].x;
  highp vec4 v_43;
  v_43.x = _World2Object[0].z;
  v_43.y = _World2Object[1].z;
  v_43.z = _World2Object[2].z;
  v_43.w = _World2Object[3].z;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(((v_42.xyz * tmpvar_16.z) + (v_43.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_44;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_45;
  tmpvar_45.w = 1.0;
  tmpvar_45.xyz = worldNormal_2;
  mediump vec4 normal_46;
  normal_46 = tmpvar_45;
  mediump vec3 x2_47;
  mediump vec4 tmpvar_48;
  tmpvar_48 = (normal_46.xyzz * normal_46.yzzx);
  x2_47.x = dot (unity_SHBr, tmpvar_48);
  x2_47.y = dot (unity_SHBg, tmpvar_48);
  x2_47.z = dot (unity_SHBb, tmpvar_48);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = (x2_47 + (unity_SHC.xyz * (
    (normal_46.x * normal_46.x)
   - 
    (normal_46.y * normal_46.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_9;
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_11 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_12;
  tmpvar_12 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_12;
  mediump vec3 normalWorld_13;
  normalWorld_13 = tmpvar_3;
  mediump vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = normalWorld_13;
  mediump vec3 x1_15;
  x1_15.x = dot (unity_SHAr, tmpvar_14);
  x1_15.y = dot (unity_SHAg, tmpvar_14);
  x1_15.z = dot (unity_SHAb, tmpvar_14);
  mediump vec4 outDiffuseOcclusion_16;
  mediump vec4 outNormal_17;
  mediump vec4 emission_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = tmpvar_5;
  outDiffuseOcclusion_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_17 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = vec3(0.0, 0.0, 0.0);
  emission_18 = tmpvar_21;
  emission_18.xyz = (emission_18.xyz + (tmpvar_5 * (xlv_TEXCOORD6 + x1_15)));
  outDiffuse_1.xyz = outDiffuseOcclusion_16.xyz;
  outEmission_2.w = emission_18.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_18.xyz));
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_17;
  _glesFragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_40;
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_41;
  tmpvar_4 = _Color;
  highp vec4 v_42;
  v_42.x = _World2Object[0].x;
  v_42.y = _World2Object[1].x;
  v_42.z = _World2Object[2].x;
  v_42.w = _World2Object[3].x;
  highp vec4 v_43;
  v_43.x = _World2Object[0].z;
  v_43.y = _World2Object[1].z;
  v_43.z = _World2Object[2].z;
  v_43.w = _World2Object[3].z;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(((v_42.xyz * tmpvar_16.z) + (v_43.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_44;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_45;
  tmpvar_45.w = 1.0;
  tmpvar_45.xyz = worldNormal_2;
  mediump vec4 normal_46;
  normal_46 = tmpvar_45;
  mediump vec3 x2_47;
  mediump vec4 tmpvar_48;
  tmpvar_48 = (normal_46.xyzz * normal_46.yzzx);
  x2_47.x = dot (unity_SHBr, tmpvar_48);
  x2_47.y = dot (unity_SHBg, tmpvar_48);
  x2_47.z = dot (unity_SHBb, tmpvar_48);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = (x2_47 + (unity_SHC.xyz * (
    (normal_46.x * normal_46.x)
   - 
    (normal_46.y * normal_46.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = (diffuseColor_6.w * _Color.w);
  tmpvar_5 = tmpvar_8;
  lowp float x_9;
  x_9 = (tmpvar_5 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (diffuseColor_6.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_6.xyz = clamp ((tmpvar_10 * (
    ((max (diffuseColor_6.x, max (diffuseColor_6.y, diffuseColor_6.z)) / max (tmpvar_10.x, max (tmpvar_10.y, tmpvar_10.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_11;
  tmpvar_11 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_11;
  mediump vec3 normalWorld_12;
  normalWorld_12 = tmpvar_2;
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = normalWorld_12;
  mediump vec3 x1_14;
  x1_14.x = dot (unity_SHAr, tmpvar_13);
  x1_14.y = dot (unity_SHAg, tmpvar_13);
  x1_14.z = dot (unity_SHAb, tmpvar_13);
  mediump vec4 outDiffuseOcclusion_15;
  mediump vec4 outNormal_16;
  mediump vec4 emission_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_4;
  outDiffuseOcclusion_15 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = vec3(0.0, 0.0, 0.0);
  emission_17 = tmpvar_20;
  emission_17.xyz = (emission_17.xyz + (tmpvar_4 * (xlv_TEXCOORD6 + x1_14)));
  outDiffuse_1.xyz = outDiffuseOcclusion_15.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_16;
  gl_FragData[3] = emission_17;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD5;
out mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    highp float tmpvar_19;
    tmpvar_19 = (tmpvar_17.z / tmpvar_16.z);
    tmpvar_18 = (tmpvar_19 * inversesqrt((
      (tmpvar_19 * tmpvar_19)
     + 1.0)));
    tmpvar_18 = (sign(tmpvar_18) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_18)))
     * 
      (1.570796 + (abs(tmpvar_18) * (-0.2146018 + (
        abs(tmpvar_18)
       * 
        (0.08656672 + (abs(tmpvar_18) * -0.03102955))
      ))))
    )));
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  highp vec3 tmpvar_25;
  tmpvar_25 = (vec3(tmpvar_18) + tmpvar_24);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_32.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_33.x + (tmpvar_33.y * tmpvar_33.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_29)));
    vPos_28 = (normalize(vPos_28) * fLength_30);
    billboardPos_8 = vPos_28;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    ((tmpvar_25 + tmpvar_26.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    highp vec2 tmpvar_39;
    tmpvar_39 = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_39;
  } else {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_40;
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_41;
  tmpvar_4 = _Color;
  highp vec4 v_42;
  v_42.x = _World2Object[0].x;
  v_42.y = _World2Object[1].x;
  v_42.z = _World2Object[2].x;
  v_42.w = _World2Object[3].x;
  highp vec4 v_43;
  v_43.x = _World2Object[0].z;
  v_43.y = _World2Object[1].z;
  v_43.z = _World2Object[2].z;
  v_43.w = _World2Object[3].z;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(((v_42.xyz * tmpvar_16.z) + (v_43.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_44;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_45;
  tmpvar_45.w = 1.0;
  tmpvar_45.xyz = worldNormal_2;
  mediump vec4 normal_46;
  normal_46 = tmpvar_45;
  mediump vec3 x2_47;
  mediump vec4 tmpvar_48;
  tmpvar_48 = (normal_46.xyzz * normal_46.yzzx);
  x2_47.x = dot (unity_SHBr, tmpvar_48);
  x2_47.y = dot (unity_SHBg, tmpvar_48);
  x2_47.z = dot (unity_SHBb, tmpvar_48);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = (x2_47 + (unity_SHC.xyz * (
    (normal_46.x * normal_46.x)
   - 
    (normal_46.y * normal_46.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = (diffuseColor_6.w * _Color.w);
  tmpvar_5 = tmpvar_8;
  lowp float x_9;
  x_9 = (tmpvar_5 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (diffuseColor_6.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_6.xyz = clamp ((tmpvar_10 * (
    ((max (diffuseColor_6.x, max (diffuseColor_6.y, diffuseColor_6.z)) / max (tmpvar_10.x, max (tmpvar_10.y, tmpvar_10.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_11;
  tmpvar_11 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_11;
  mediump vec3 normalWorld_12;
  normalWorld_12 = tmpvar_2;
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = normalWorld_12;
  mediump vec3 x1_14;
  x1_14.x = dot (unity_SHAr, tmpvar_13);
  x1_14.y = dot (unity_SHAg, tmpvar_13);
  x1_14.z = dot (unity_SHAb, tmpvar_13);
  mediump vec4 outDiffuseOcclusion_15;
  mediump vec4 outNormal_16;
  mediump vec4 emission_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_4;
  outDiffuseOcclusion_15 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = vec3(0.0, 0.0, 0.0);
  emission_17 = tmpvar_20;
  emission_17.xyz = (emission_17.xyz + (tmpvar_4 * (xlv_TEXCOORD6 + x1_14)));
  outDiffuse_1.xyz = outDiffuseOcclusion_15.xyz;
  outDiffuse_1.w = 1.0;
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_16;
  _glesFragData[3] = emission_17;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_18.z / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.570796 + (abs(tmpvar_19) * (-0.2146018 + (
        abs(tmpvar_19)
       * 
        (0.08656672 + (abs(tmpvar_19) * -0.03102955))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  highp vec3 tmpvar_26;
  tmpvar_26 = (vec3(tmpvar_19) + tmpvar_25);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_9.xz = tmpvar_28.xz;
  billboardPos_9.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_9;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_33.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_34.x + (tmpvar_34.y * tmpvar_34.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_30)));
    vPos_29 = (normalize(vPos_29) * fLength_31);
    billboardPos_9 = vPos_29;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    ((tmpvar_26 + tmpvar_27.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_11.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
    tmpvar_8.xy = tmpvar_40;
  } else {
    highp vec2 tmpvar_41;
    tmpvar_41 = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
    tmpvar_8.xy = tmpvar_41;
  };
  tmpvar_5 = _Color;
  highp vec3 tmpvar_42;
  tmpvar_42 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_43;
  v_43.x = _World2Object[0].x;
  v_43.y = _World2Object[1].x;
  v_43.z = _World2Object[2].x;
  v_43.w = _World2Object[3].x;
  highp vec4 v_44;
  v_44.x = _World2Object[0].z;
  v_44.y = _World2Object[1].z;
  v_44.z = _World2Object[2].z;
  v_44.w = _World2Object[3].z;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(((v_43.xyz * tmpvar_17.z) + (v_44.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_45;
  highp mat3 tmpvar_46;
  tmpvar_46[0] = _Object2World[0].xyz;
  tmpvar_46[1] = _Object2World[1].xyz;
  tmpvar_46[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_47;
  tmpvar_47 = normalize((tmpvar_46 * tmpvar_17));
  worldTangent_3 = tmpvar_47;
  lowp vec3 tmpvar_48;
  tmpvar_48 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_49;
  tmpvar_49 = -(tmpvar_48);
  worldBinormal_2 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50.x = worldTangent_3.x;
  tmpvar_50.y = worldBinormal_2.x;
  tmpvar_50.z = worldNormal_4.x;
  tmpvar_50.w = tmpvar_42.x;
  highp vec4 tmpvar_51;
  tmpvar_51.x = worldTangent_3.y;
  tmpvar_51.y = worldBinormal_2.y;
  tmpvar_51.z = worldNormal_4.y;
  tmpvar_51.w = tmpvar_42.y;
  highp vec4 tmpvar_52;
  tmpvar_52.x = worldTangent_3.z;
  tmpvar_52.y = worldBinormal_2.z;
  tmpvar_52.z = worldNormal_4.z;
  tmpvar_52.w = tmpvar_42.z;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_53;
  tmpvar_53.w = 1.0;
  tmpvar_53.xyz = worldNormal_4;
  mediump vec4 normal_54;
  normal_54 = tmpvar_53;
  mediump vec3 x2_55;
  mediump vec4 tmpvar_56;
  tmpvar_56 = (normal_54.xyzz * normal_54.yzzx);
  x2_55.x = dot (unity_SHBr, tmpvar_56);
  x2_55.y = dot (unity_SHBg, tmpvar_56);
  x2_55.z = dot (unity_SHBb, tmpvar_56);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_50;
  xlv_TEXCOORD1 = tmpvar_51;
  xlv_TEXCOORD2 = tmpvar_52;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_55 + (unity_SHC.xyz * (
    (normal_54.x * normal_54.x)
   - 
    (normal_54.y * normal_54.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 worldN_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_7 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_9;
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_13;
  tmpvar_13 = dot (xlv_TEXCOORD0.xyz, tmpvar_12);
  worldN_3.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD1.xyz, tmpvar_12);
  worldN_3.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD2.xyz, tmpvar_12);
  worldN_3.z = tmpvar_15;
  mediump vec3 normalWorld_16;
  normalWorld_16 = worldN_3;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_16;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  mediump vec4 outDiffuseOcclusion_19;
  mediump vec4 outNormal_20;
  mediump vec4 emission_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_5;
  outDiffuseOcclusion_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = ((worldN_3 * 0.5) + 0.5);
  outNormal_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  emission_21 = tmpvar_24;
  emission_21.xyz = (emission_21.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_18)));
  outDiffuse_1.xyz = outDiffuseOcclusion_19.xyz;
  outEmission_2.w = emission_21.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_21.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_20;
  gl_FragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD6;
out mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_18.z / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.570796 + (abs(tmpvar_19) * (-0.2146018 + (
        abs(tmpvar_19)
       * 
        (0.08656672 + (abs(tmpvar_19) * -0.03102955))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  highp vec3 tmpvar_26;
  tmpvar_26 = (vec3(tmpvar_19) + tmpvar_25);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_9.xz = tmpvar_28.xz;
  billboardPos_9.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_9;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_33.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_34.x + (tmpvar_34.y * tmpvar_34.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_30)));
    vPos_29 = (normalize(vPos_29) * fLength_31);
    billboardPos_9 = vPos_29;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    ((tmpvar_26 + tmpvar_27.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_11.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
    tmpvar_8.xy = tmpvar_40;
  } else {
    highp vec2 tmpvar_41;
    tmpvar_41 = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
    tmpvar_8.xy = tmpvar_41;
  };
  tmpvar_5 = _Color;
  highp vec3 tmpvar_42;
  tmpvar_42 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_43;
  v_43.x = _World2Object[0].x;
  v_43.y = _World2Object[1].x;
  v_43.z = _World2Object[2].x;
  v_43.w = _World2Object[3].x;
  highp vec4 v_44;
  v_44.x = _World2Object[0].z;
  v_44.y = _World2Object[1].z;
  v_44.z = _World2Object[2].z;
  v_44.w = _World2Object[3].z;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(((v_43.xyz * tmpvar_17.z) + (v_44.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_45;
  highp mat3 tmpvar_46;
  tmpvar_46[0] = _Object2World[0].xyz;
  tmpvar_46[1] = _Object2World[1].xyz;
  tmpvar_46[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_47;
  tmpvar_47 = normalize((tmpvar_46 * tmpvar_17));
  worldTangent_3 = tmpvar_47;
  lowp vec3 tmpvar_48;
  tmpvar_48 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_49;
  tmpvar_49 = -(tmpvar_48);
  worldBinormal_2 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50.x = worldTangent_3.x;
  tmpvar_50.y = worldBinormal_2.x;
  tmpvar_50.z = worldNormal_4.x;
  tmpvar_50.w = tmpvar_42.x;
  highp vec4 tmpvar_51;
  tmpvar_51.x = worldTangent_3.y;
  tmpvar_51.y = worldBinormal_2.y;
  tmpvar_51.z = worldNormal_4.y;
  tmpvar_51.w = tmpvar_42.y;
  highp vec4 tmpvar_52;
  tmpvar_52.x = worldTangent_3.z;
  tmpvar_52.y = worldBinormal_2.z;
  tmpvar_52.z = worldNormal_4.z;
  tmpvar_52.w = tmpvar_42.z;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_53;
  tmpvar_53.w = 1.0;
  tmpvar_53.xyz = worldNormal_4;
  mediump vec4 normal_54;
  normal_54 = tmpvar_53;
  mediump vec3 x2_55;
  mediump vec4 tmpvar_56;
  tmpvar_56 = (normal_54.xyzz * normal_54.yzzx);
  x2_55.x = dot (unity_SHBr, tmpvar_56);
  x2_55.y = dot (unity_SHBg, tmpvar_56);
  x2_55.z = dot (unity_SHBb, tmpvar_56);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_50;
  xlv_TEXCOORD1 = tmpvar_51;
  xlv_TEXCOORD2 = tmpvar_52;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_55 + (unity_SHC.xyz * (
    (normal_54.x * normal_54.x)
   - 
    (normal_54.y * normal_54.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 worldN_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_7 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_9;
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_13;
  tmpvar_13 = dot (xlv_TEXCOORD0.xyz, tmpvar_12);
  worldN_3.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD1.xyz, tmpvar_12);
  worldN_3.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD2.xyz, tmpvar_12);
  worldN_3.z = tmpvar_15;
  mediump vec3 normalWorld_16;
  normalWorld_16 = worldN_3;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_16;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  mediump vec4 outDiffuseOcclusion_19;
  mediump vec4 outNormal_20;
  mediump vec4 emission_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_5;
  outDiffuseOcclusion_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = ((worldN_3 * 0.5) + 0.5);
  outNormal_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  emission_21 = tmpvar_24;
  emission_21.xyz = (emission_21.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_18)));
  outDiffuse_1.xyz = outDiffuseOcclusion_19.xyz;
  outEmission_2.w = emission_21.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_21.xyz));
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_20;
  _glesFragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_18.z / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.570796 + (abs(tmpvar_19) * (-0.2146018 + (
        abs(tmpvar_19)
       * 
        (0.08656672 + (abs(tmpvar_19) * -0.03102955))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  highp vec3 tmpvar_26;
  tmpvar_26 = (vec3(tmpvar_19) + tmpvar_25);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_9.xz = tmpvar_28.xz;
  billboardPos_9.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_9;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_33.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_34.x + (tmpvar_34.y * tmpvar_34.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_30)));
    vPos_29 = (normalize(vPos_29) * fLength_31);
    billboardPos_9 = vPos_29;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    ((tmpvar_26 + tmpvar_27.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_11.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
    tmpvar_8.xy = tmpvar_40;
  } else {
    highp vec2 tmpvar_41;
    tmpvar_41 = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
    tmpvar_8.xy = tmpvar_41;
  };
  tmpvar_5 = _Color;
  highp vec3 tmpvar_42;
  tmpvar_42 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_43;
  v_43.x = _World2Object[0].x;
  v_43.y = _World2Object[1].x;
  v_43.z = _World2Object[2].x;
  v_43.w = _World2Object[3].x;
  highp vec4 v_44;
  v_44.x = _World2Object[0].z;
  v_44.y = _World2Object[1].z;
  v_44.z = _World2Object[2].z;
  v_44.w = _World2Object[3].z;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(((v_43.xyz * tmpvar_17.z) + (v_44.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_45;
  highp mat3 tmpvar_46;
  tmpvar_46[0] = _Object2World[0].xyz;
  tmpvar_46[1] = _Object2World[1].xyz;
  tmpvar_46[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_47;
  tmpvar_47 = normalize((tmpvar_46 * tmpvar_17));
  worldTangent_3 = tmpvar_47;
  lowp vec3 tmpvar_48;
  tmpvar_48 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_49;
  tmpvar_49 = -(tmpvar_48);
  worldBinormal_2 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50.x = worldTangent_3.x;
  tmpvar_50.y = worldBinormal_2.x;
  tmpvar_50.z = worldNormal_4.x;
  tmpvar_50.w = tmpvar_42.x;
  highp vec4 tmpvar_51;
  tmpvar_51.x = worldTangent_3.y;
  tmpvar_51.y = worldBinormal_2.y;
  tmpvar_51.z = worldNormal_4.y;
  tmpvar_51.w = tmpvar_42.y;
  highp vec4 tmpvar_52;
  tmpvar_52.x = worldTangent_3.z;
  tmpvar_52.y = worldBinormal_2.z;
  tmpvar_52.z = worldNormal_4.z;
  tmpvar_52.w = tmpvar_42.z;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_53;
  tmpvar_53.w = 1.0;
  tmpvar_53.xyz = worldNormal_4;
  mediump vec4 normal_54;
  normal_54 = tmpvar_53;
  mediump vec3 x2_55;
  mediump vec4 tmpvar_56;
  tmpvar_56 = (normal_54.xyzz * normal_54.yzzx);
  x2_55.x = dot (unity_SHBr, tmpvar_56);
  x2_55.y = dot (unity_SHBg, tmpvar_56);
  x2_55.z = dot (unity_SHBb, tmpvar_56);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_50;
  xlv_TEXCOORD1 = tmpvar_51;
  xlv_TEXCOORD2 = tmpvar_52;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_55 + (unity_SHC.xyz * (
    (normal_54.x * normal_54.x)
   - 
    (normal_54.y * normal_54.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 worldN_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_6 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = (diffuseColor_6.w * _Color.w);
  tmpvar_5 = tmpvar_8;
  lowp float x_9;
  x_9 = (tmpvar_5 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_10;
  tmpvar_10 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_10;
  lowp vec3 tmpvar_11;
  tmpvar_11 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_12;
  tmpvar_12 = dot (xlv_TEXCOORD0.xyz, tmpvar_11);
  worldN_2.x = tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (xlv_TEXCOORD1.xyz, tmpvar_11);
  worldN_2.y = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD2.xyz, tmpvar_11);
  worldN_2.z = tmpvar_14;
  mediump vec3 normalWorld_15;
  normalWorld_15 = worldN_2;
  mediump vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = normalWorld_15;
  mediump vec3 x1_17;
  x1_17.x = dot (unity_SHAr, tmpvar_16);
  x1_17.y = dot (unity_SHAg, tmpvar_16);
  x1_17.z = dot (unity_SHAb, tmpvar_16);
  mediump vec4 outDiffuseOcclusion_18;
  mediump vec4 outNormal_19;
  mediump vec4 emission_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_4;
  outDiffuseOcclusion_18 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = ((worldN_2 * 0.5) + 0.5);
  outNormal_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = vec3(0.0, 0.0, 0.0);
  emission_20 = tmpvar_23;
  emission_20.xyz = (emission_20.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_17)));
  outDiffuse_1.xyz = outDiffuseOcclusion_18.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_19;
  gl_FragData[3] = emission_20;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD6;
out mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_18.z / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.570796 + (abs(tmpvar_19) * (-0.2146018 + (
        abs(tmpvar_19)
       * 
        (0.08656672 + (abs(tmpvar_19) * -0.03102955))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  highp vec3 tmpvar_26;
  tmpvar_26 = (vec3(tmpvar_19) + tmpvar_25);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_9.xz = tmpvar_28.xz;
  billboardPos_9.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_9;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_33.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_34.x + (tmpvar_34.y * tmpvar_34.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_30)));
    vPos_29 = (normalize(vPos_29) * fLength_31);
    billboardPos_9 = vPos_29;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    ((tmpvar_26 + tmpvar_27.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_11.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
    tmpvar_8.xy = tmpvar_40;
  } else {
    highp vec2 tmpvar_41;
    tmpvar_41 = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
    tmpvar_8.xy = tmpvar_41;
  };
  tmpvar_5 = _Color;
  highp vec3 tmpvar_42;
  tmpvar_42 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_43;
  v_43.x = _World2Object[0].x;
  v_43.y = _World2Object[1].x;
  v_43.z = _World2Object[2].x;
  v_43.w = _World2Object[3].x;
  highp vec4 v_44;
  v_44.x = _World2Object[0].z;
  v_44.y = _World2Object[1].z;
  v_44.z = _World2Object[2].z;
  v_44.w = _World2Object[3].z;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(((v_43.xyz * tmpvar_17.z) + (v_44.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_45;
  highp mat3 tmpvar_46;
  tmpvar_46[0] = _Object2World[0].xyz;
  tmpvar_46[1] = _Object2World[1].xyz;
  tmpvar_46[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_47;
  tmpvar_47 = normalize((tmpvar_46 * tmpvar_17));
  worldTangent_3 = tmpvar_47;
  lowp vec3 tmpvar_48;
  tmpvar_48 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_49;
  tmpvar_49 = -(tmpvar_48);
  worldBinormal_2 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50.x = worldTangent_3.x;
  tmpvar_50.y = worldBinormal_2.x;
  tmpvar_50.z = worldNormal_4.x;
  tmpvar_50.w = tmpvar_42.x;
  highp vec4 tmpvar_51;
  tmpvar_51.x = worldTangent_3.y;
  tmpvar_51.y = worldBinormal_2.y;
  tmpvar_51.z = worldNormal_4.y;
  tmpvar_51.w = tmpvar_42.y;
  highp vec4 tmpvar_52;
  tmpvar_52.x = worldTangent_3.z;
  tmpvar_52.y = worldBinormal_2.z;
  tmpvar_52.z = worldNormal_4.z;
  tmpvar_52.w = tmpvar_42.z;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_53;
  tmpvar_53.w = 1.0;
  tmpvar_53.xyz = worldNormal_4;
  mediump vec4 normal_54;
  normal_54 = tmpvar_53;
  mediump vec3 x2_55;
  mediump vec4 tmpvar_56;
  tmpvar_56 = (normal_54.xyzz * normal_54.yzzx);
  x2_55.x = dot (unity_SHBr, tmpvar_56);
  x2_55.y = dot (unity_SHBg, tmpvar_56);
  x2_55.z = dot (unity_SHBb, tmpvar_56);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_50;
  xlv_TEXCOORD1 = tmpvar_51;
  xlv_TEXCOORD2 = tmpvar_52;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_55 + (unity_SHC.xyz * (
    (normal_54.x * normal_54.x)
   - 
    (normal_54.y * normal_54.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 worldN_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_6 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = (diffuseColor_6.w * _Color.w);
  tmpvar_5 = tmpvar_8;
  lowp float x_9;
  x_9 = (tmpvar_5 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_10;
  tmpvar_10 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_10;
  lowp vec3 tmpvar_11;
  tmpvar_11 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_12;
  tmpvar_12 = dot (xlv_TEXCOORD0.xyz, tmpvar_11);
  worldN_2.x = tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (xlv_TEXCOORD1.xyz, tmpvar_11);
  worldN_2.y = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD2.xyz, tmpvar_11);
  worldN_2.z = tmpvar_14;
  mediump vec3 normalWorld_15;
  normalWorld_15 = worldN_2;
  mediump vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = normalWorld_15;
  mediump vec3 x1_17;
  x1_17.x = dot (unity_SHAr, tmpvar_16);
  x1_17.y = dot (unity_SHAg, tmpvar_16);
  x1_17.z = dot (unity_SHAb, tmpvar_16);
  mediump vec4 outDiffuseOcclusion_18;
  mediump vec4 outNormal_19;
  mediump vec4 emission_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_4;
  outDiffuseOcclusion_18 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = ((worldN_2 * 0.5) + 0.5);
  outNormal_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = vec3(0.0, 0.0, 0.0);
  emission_20 = tmpvar_23;
  emission_20.xyz = (emission_20.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_17)));
  outDiffuse_1.xyz = outDiffuseOcclusion_18.xyz;
  outDiffuse_1.w = 1.0;
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_19;
  _glesFragData[3] = emission_20;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_18.z / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.570796 + (abs(tmpvar_19) * (-0.2146018 + (
        abs(tmpvar_19)
       * 
        (0.08656672 + (abs(tmpvar_19) * -0.03102955))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  highp vec3 tmpvar_26;
  tmpvar_26 = (vec3(tmpvar_19) + tmpvar_25);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_9.xz = tmpvar_28.xz;
  billboardPos_9.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_9;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_33.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_34.x + (tmpvar_34.y * tmpvar_34.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_30)));
    vPos_29 = (normalize(vPos_29) * fLength_31);
    billboardPos_9 = vPos_29;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    ((tmpvar_26 + tmpvar_27.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_11.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
    tmpvar_8.xy = tmpvar_40;
  } else {
    highp vec2 tmpvar_41;
    tmpvar_41 = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
    tmpvar_8.xy = tmpvar_41;
  };
  highp float tmpvar_42;
  tmpvar_42 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_42;
  tmpvar_5 = _Color;
  highp vec3 tmpvar_43;
  tmpvar_43 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_44;
  v_44.x = _World2Object[0].x;
  v_44.y = _World2Object[1].x;
  v_44.z = _World2Object[2].x;
  v_44.w = _World2Object[3].x;
  highp vec4 v_45;
  v_45.x = _World2Object[0].z;
  v_45.y = _World2Object[1].z;
  v_45.z = _World2Object[2].z;
  v_45.w = _World2Object[3].z;
  highp vec3 tmpvar_46;
  tmpvar_46 = normalize(((v_44.xyz * tmpvar_17.z) + (v_45.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_46;
  highp mat3 tmpvar_47;
  tmpvar_47[0] = _Object2World[0].xyz;
  tmpvar_47[1] = _Object2World[1].xyz;
  tmpvar_47[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize((tmpvar_47 * tmpvar_17));
  worldTangent_3 = tmpvar_48;
  lowp vec3 tmpvar_49;
  tmpvar_49 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_50;
  tmpvar_50 = -(tmpvar_49);
  worldBinormal_2 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51.x = worldTangent_3.x;
  tmpvar_51.y = worldBinormal_2.x;
  tmpvar_51.z = worldNormal_4.x;
  tmpvar_51.w = tmpvar_43.x;
  highp vec4 tmpvar_52;
  tmpvar_52.x = worldTangent_3.y;
  tmpvar_52.y = worldBinormal_2.y;
  tmpvar_52.z = worldNormal_4.y;
  tmpvar_52.w = tmpvar_43.y;
  highp vec4 tmpvar_53;
  tmpvar_53.x = worldTangent_3.z;
  tmpvar_53.y = worldBinormal_2.z;
  tmpvar_53.z = worldNormal_4.z;
  tmpvar_53.w = tmpvar_43.z;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_54;
  tmpvar_54.w = 1.0;
  tmpvar_54.xyz = worldNormal_4;
  mediump vec4 normal_55;
  normal_55 = tmpvar_54;
  mediump vec3 x2_56;
  mediump vec4 tmpvar_57;
  tmpvar_57 = (normal_55.xyzz * normal_55.yzzx);
  x2_56.x = dot (unity_SHBr, tmpvar_57);
  x2_56.y = dot (unity_SHBg, tmpvar_57);
  x2_56.z = dot (unity_SHBb, tmpvar_57);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_51;
  xlv_TEXCOORD1 = tmpvar_52;
  xlv_TEXCOORD2 = tmpvar_53;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_56 + (unity_SHC.xyz * (
    (normal_55.x * normal_55.x)
   - 
    (normal_55.y * normal_55.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 worldN_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_7 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_9;
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_11 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_12;
  tmpvar_12 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD0.xyz, tmpvar_13);
  worldN_3.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD1.xyz, tmpvar_13);
  worldN_3.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD2.xyz, tmpvar_13);
  worldN_3.z = tmpvar_16;
  mediump vec3 normalWorld_17;
  normalWorld_17 = worldN_3;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_17;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  mediump vec4 outDiffuseOcclusion_20;
  mediump vec4 outNormal_21;
  mediump vec4 emission_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = tmpvar_5;
  outDiffuseOcclusion_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = ((worldN_3 * 0.5) + 0.5);
  outNormal_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  emission_22 = tmpvar_25;
  emission_22.xyz = (emission_22.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_19)));
  outDiffuse_1.xyz = outDiffuseOcclusion_20.xyz;
  outEmission_2.w = emission_22.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_22.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_21;
  gl_FragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD6;
out mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_18.z / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.570796 + (abs(tmpvar_19) * (-0.2146018 + (
        abs(tmpvar_19)
       * 
        (0.08656672 + (abs(tmpvar_19) * -0.03102955))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  highp vec3 tmpvar_26;
  tmpvar_26 = (vec3(tmpvar_19) + tmpvar_25);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_9.xz = tmpvar_28.xz;
  billboardPos_9.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_9;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_33.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_34.x + (tmpvar_34.y * tmpvar_34.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_30)));
    vPos_29 = (normalize(vPos_29) * fLength_31);
    billboardPos_9 = vPos_29;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    ((tmpvar_26 + tmpvar_27.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_11.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
    tmpvar_8.xy = tmpvar_40;
  } else {
    highp vec2 tmpvar_41;
    tmpvar_41 = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
    tmpvar_8.xy = tmpvar_41;
  };
  highp float tmpvar_42;
  tmpvar_42 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_42;
  tmpvar_5 = _Color;
  highp vec3 tmpvar_43;
  tmpvar_43 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_44;
  v_44.x = _World2Object[0].x;
  v_44.y = _World2Object[1].x;
  v_44.z = _World2Object[2].x;
  v_44.w = _World2Object[3].x;
  highp vec4 v_45;
  v_45.x = _World2Object[0].z;
  v_45.y = _World2Object[1].z;
  v_45.z = _World2Object[2].z;
  v_45.w = _World2Object[3].z;
  highp vec3 tmpvar_46;
  tmpvar_46 = normalize(((v_44.xyz * tmpvar_17.z) + (v_45.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_46;
  highp mat3 tmpvar_47;
  tmpvar_47[0] = _Object2World[0].xyz;
  tmpvar_47[1] = _Object2World[1].xyz;
  tmpvar_47[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize((tmpvar_47 * tmpvar_17));
  worldTangent_3 = tmpvar_48;
  lowp vec3 tmpvar_49;
  tmpvar_49 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_50;
  tmpvar_50 = -(tmpvar_49);
  worldBinormal_2 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51.x = worldTangent_3.x;
  tmpvar_51.y = worldBinormal_2.x;
  tmpvar_51.z = worldNormal_4.x;
  tmpvar_51.w = tmpvar_43.x;
  highp vec4 tmpvar_52;
  tmpvar_52.x = worldTangent_3.y;
  tmpvar_52.y = worldBinormal_2.y;
  tmpvar_52.z = worldNormal_4.y;
  tmpvar_52.w = tmpvar_43.y;
  highp vec4 tmpvar_53;
  tmpvar_53.x = worldTangent_3.z;
  tmpvar_53.y = worldBinormal_2.z;
  tmpvar_53.z = worldNormal_4.z;
  tmpvar_53.w = tmpvar_43.z;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_54;
  tmpvar_54.w = 1.0;
  tmpvar_54.xyz = worldNormal_4;
  mediump vec4 normal_55;
  normal_55 = tmpvar_54;
  mediump vec3 x2_56;
  mediump vec4 tmpvar_57;
  tmpvar_57 = (normal_55.xyzz * normal_55.yzzx);
  x2_56.x = dot (unity_SHBr, tmpvar_57);
  x2_56.y = dot (unity_SHBg, tmpvar_57);
  x2_56.z = dot (unity_SHBb, tmpvar_57);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_51;
  xlv_TEXCOORD1 = tmpvar_52;
  xlv_TEXCOORD2 = tmpvar_53;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_56 + (unity_SHC.xyz * (
    (normal_55.x * normal_55.x)
   - 
    (normal_55.y * normal_55.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 worldN_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_7 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_9;
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_11 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_12;
  tmpvar_12 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD0.xyz, tmpvar_13);
  worldN_3.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD1.xyz, tmpvar_13);
  worldN_3.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD2.xyz, tmpvar_13);
  worldN_3.z = tmpvar_16;
  mediump vec3 normalWorld_17;
  normalWorld_17 = worldN_3;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_17;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  mediump vec4 outDiffuseOcclusion_20;
  mediump vec4 outNormal_21;
  mediump vec4 emission_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = tmpvar_5;
  outDiffuseOcclusion_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = ((worldN_3 * 0.5) + 0.5);
  outNormal_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  emission_22 = tmpvar_25;
  emission_22.xyz = (emission_22.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_19)));
  outDiffuse_1.xyz = outDiffuseOcclusion_20.xyz;
  outEmission_2.w = emission_22.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_22.xyz));
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_21;
  _glesFragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_18.z / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.570796 + (abs(tmpvar_19) * (-0.2146018 + (
        abs(tmpvar_19)
       * 
        (0.08656672 + (abs(tmpvar_19) * -0.03102955))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  highp vec3 tmpvar_26;
  tmpvar_26 = (vec3(tmpvar_19) + tmpvar_25);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_9.xz = tmpvar_28.xz;
  billboardPos_9.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_9;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_33.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_34.x + (tmpvar_34.y * tmpvar_34.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_30)));
    vPos_29 = (normalize(vPos_29) * fLength_31);
    billboardPos_9 = vPos_29;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    ((tmpvar_26 + tmpvar_27.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_11.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
    tmpvar_8.xy = tmpvar_40;
  } else {
    highp vec2 tmpvar_41;
    tmpvar_41 = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
    tmpvar_8.xy = tmpvar_41;
  };
  highp float tmpvar_42;
  tmpvar_42 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_42;
  tmpvar_5 = _Color;
  highp vec3 tmpvar_43;
  tmpvar_43 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_44;
  v_44.x = _World2Object[0].x;
  v_44.y = _World2Object[1].x;
  v_44.z = _World2Object[2].x;
  v_44.w = _World2Object[3].x;
  highp vec4 v_45;
  v_45.x = _World2Object[0].z;
  v_45.y = _World2Object[1].z;
  v_45.z = _World2Object[2].z;
  v_45.w = _World2Object[3].z;
  highp vec3 tmpvar_46;
  tmpvar_46 = normalize(((v_44.xyz * tmpvar_17.z) + (v_45.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_46;
  highp mat3 tmpvar_47;
  tmpvar_47[0] = _Object2World[0].xyz;
  tmpvar_47[1] = _Object2World[1].xyz;
  tmpvar_47[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize((tmpvar_47 * tmpvar_17));
  worldTangent_3 = tmpvar_48;
  lowp vec3 tmpvar_49;
  tmpvar_49 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_50;
  tmpvar_50 = -(tmpvar_49);
  worldBinormal_2 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51.x = worldTangent_3.x;
  tmpvar_51.y = worldBinormal_2.x;
  tmpvar_51.z = worldNormal_4.x;
  tmpvar_51.w = tmpvar_43.x;
  highp vec4 tmpvar_52;
  tmpvar_52.x = worldTangent_3.y;
  tmpvar_52.y = worldBinormal_2.y;
  tmpvar_52.z = worldNormal_4.y;
  tmpvar_52.w = tmpvar_43.y;
  highp vec4 tmpvar_53;
  tmpvar_53.x = worldTangent_3.z;
  tmpvar_53.y = worldBinormal_2.z;
  tmpvar_53.z = worldNormal_4.z;
  tmpvar_53.w = tmpvar_43.z;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_54;
  tmpvar_54.w = 1.0;
  tmpvar_54.xyz = worldNormal_4;
  mediump vec4 normal_55;
  normal_55 = tmpvar_54;
  mediump vec3 x2_56;
  mediump vec4 tmpvar_57;
  tmpvar_57 = (normal_55.xyzz * normal_55.yzzx);
  x2_56.x = dot (unity_SHBr, tmpvar_57);
  x2_56.y = dot (unity_SHBg, tmpvar_57);
  x2_56.z = dot (unity_SHBb, tmpvar_57);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_51;
  xlv_TEXCOORD1 = tmpvar_52;
  xlv_TEXCOORD2 = tmpvar_53;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_56 + (unity_SHC.xyz * (
    (normal_55.x * normal_55.x)
   - 
    (normal_55.y * normal_55.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 worldN_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_6 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = (diffuseColor_6.w * _Color.w);
  tmpvar_5 = tmpvar_8;
  lowp float x_9;
  x_9 = (tmpvar_5 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (diffuseColor_6.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_6.xyz = clamp ((tmpvar_10 * (
    ((max (diffuseColor_6.x, max (diffuseColor_6.y, diffuseColor_6.z)) / max (tmpvar_10.x, max (tmpvar_10.y, tmpvar_10.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_11;
  tmpvar_11 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_13;
  tmpvar_13 = dot (xlv_TEXCOORD0.xyz, tmpvar_12);
  worldN_2.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD1.xyz, tmpvar_12);
  worldN_2.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD2.xyz, tmpvar_12);
  worldN_2.z = tmpvar_15;
  mediump vec3 normalWorld_16;
  normalWorld_16 = worldN_2;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_16;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  mediump vec4 outDiffuseOcclusion_19;
  mediump vec4 outNormal_20;
  mediump vec4 emission_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_4;
  outDiffuseOcclusion_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = ((worldN_2 * 0.5) + 0.5);
  outNormal_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  emission_21 = tmpvar_24;
  emission_21.xyz = (emission_21.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_18)));
  outDiffuse_1.xyz = outDiffuseOcclusion_19.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_20;
  gl_FragData[3] = emission_21;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD6;
out mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_18.z / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.570796 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.570796 + (abs(tmpvar_19) * (-0.2146018 + (
        abs(tmpvar_19)
       * 
        (0.08656672 + (abs(tmpvar_19) * -0.03102955))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  highp vec3 tmpvar_26;
  tmpvar_26 = (vec3(tmpvar_19) + tmpvar_25);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_9.xz = tmpvar_28.xz;
  billboardPos_9.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_9;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_33.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_34.x + (tmpvar_34.y * tmpvar_34.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_30)));
    vPos_29 = (normalize(vPos_29) * fLength_31);
    billboardPos_9 = vPos_29;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    ((tmpvar_26 + tmpvar_27.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_11.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    highp vec2 tmpvar_40;
    tmpvar_40 = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
    tmpvar_8.xy = tmpvar_40;
  } else {
    highp vec2 tmpvar_41;
    tmpvar_41 = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
    tmpvar_8.xy = tmpvar_41;
  };
  highp float tmpvar_42;
  tmpvar_42 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_42;
  tmpvar_5 = _Color;
  highp vec3 tmpvar_43;
  tmpvar_43 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_44;
  v_44.x = _World2Object[0].x;
  v_44.y = _World2Object[1].x;
  v_44.z = _World2Object[2].x;
  v_44.w = _World2Object[3].x;
  highp vec4 v_45;
  v_45.x = _World2Object[0].z;
  v_45.y = _World2Object[1].z;
  v_45.z = _World2Object[2].z;
  v_45.w = _World2Object[3].z;
  highp vec3 tmpvar_46;
  tmpvar_46 = normalize(((v_44.xyz * tmpvar_17.z) + (v_45.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_46;
  highp mat3 tmpvar_47;
  tmpvar_47[0] = _Object2World[0].xyz;
  tmpvar_47[1] = _Object2World[1].xyz;
  tmpvar_47[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize((tmpvar_47 * tmpvar_17));
  worldTangent_3 = tmpvar_48;
  lowp vec3 tmpvar_49;
  tmpvar_49 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_50;
  tmpvar_50 = -(tmpvar_49);
  worldBinormal_2 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51.x = worldTangent_3.x;
  tmpvar_51.y = worldBinormal_2.x;
  tmpvar_51.z = worldNormal_4.x;
  tmpvar_51.w = tmpvar_43.x;
  highp vec4 tmpvar_52;
  tmpvar_52.x = worldTangent_3.y;
  tmpvar_52.y = worldBinormal_2.y;
  tmpvar_52.z = worldNormal_4.y;
  tmpvar_52.w = tmpvar_43.y;
  highp vec4 tmpvar_53;
  tmpvar_53.x = worldTangent_3.z;
  tmpvar_53.y = worldBinormal_2.z;
  tmpvar_53.z = worldNormal_4.z;
  tmpvar_53.w = tmpvar_43.z;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_54;
  tmpvar_54.w = 1.0;
  tmpvar_54.xyz = worldNormal_4;
  mediump vec4 normal_55;
  normal_55 = tmpvar_54;
  mediump vec3 x2_56;
  mediump vec4 tmpvar_57;
  tmpvar_57 = (normal_55.xyzz * normal_55.yzzx);
  x2_56.x = dot (unity_SHBr, tmpvar_57);
  x2_56.y = dot (unity_SHBg, tmpvar_57);
  x2_56.z = dot (unity_SHBb, tmpvar_57);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_51;
  xlv_TEXCOORD1 = tmpvar_52;
  xlv_TEXCOORD2 = tmpvar_53;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_56 + (unity_SHC.xyz * (
    (normal_55.x * normal_55.x)
   - 
    (normal_55.y * normal_55.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 worldN_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_6 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = (diffuseColor_6.w * _Color.w);
  tmpvar_5 = tmpvar_8;
  lowp float x_9;
  x_9 = (tmpvar_5 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (diffuseColor_6.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  diffuseColor_6.xyz = clamp ((tmpvar_10 * (
    ((max (diffuseColor_6.x, max (diffuseColor_6.y, diffuseColor_6.z)) / max (tmpvar_10.x, max (tmpvar_10.y, tmpvar_10.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_11;
  tmpvar_11 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_13;
  tmpvar_13 = dot (xlv_TEXCOORD0.xyz, tmpvar_12);
  worldN_2.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD1.xyz, tmpvar_12);
  worldN_2.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD2.xyz, tmpvar_12);
  worldN_2.z = tmpvar_15;
  mediump vec3 normalWorld_16;
  normalWorld_16 = worldN_2;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_16;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  mediump vec4 outDiffuseOcclusion_19;
  mediump vec4 outNormal_20;
  mediump vec4 emission_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_4;
  outDiffuseOcclusion_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = ((worldN_2 * 0.5) + 0.5);
  outNormal_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  emission_21 = tmpvar_24;
  emission_21.xyz = (emission_21.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_18)));
  outDiffuse_1.xyz = outDiffuseOcclusion_19.xyz;
  outDiffuse_1.w = 1.0;
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_20;
  _glesFragData[3] = emission_21;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_16.xz;
  billboardPos_9.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_9;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_21.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_22.x + (tmpvar_22.y * tmpvar_22.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_18)));
    vPos_17 = (normalize(vPos_17) * fLength_19);
    billboardPos_9 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    ((_CameraXZAngle + tmpvar_15.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_28;
  } else {
    highp vec2 tmpvar_29;
    tmpvar_29 = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_29;
  };
  highp vec4 tmpvar_30;
  tmpvar_30 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = tmpvar_30.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  tmpvar_8 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_35;
  tmpvar_4 = _Color;
  highp vec4 v_36;
  v_36.x = _World2Object[0].x;
  v_36.y = _World2Object[1].x;
  v_36.z = _World2Object[2].x;
  v_36.w = _World2Object[3].x;
  highp vec4 v_37;
  v_37.x = _World2Object[0].y;
  v_37.y = _World2Object[1].y;
  v_37.z = _World2Object[2].y;
  v_37.w = _World2Object[3].y;
  highp vec4 v_38;
  v_38.x = _World2Object[0].z;
  v_38.y = _World2Object[1].z;
  v_38.z = _World2Object[2].z;
  v_38.w = _World2Object[3].z;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(((
    (v_36.xyz * _BillboardNormal.x)
   + 
    (v_37.xyz * _BillboardNormal.y)
  ) + (v_38.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_39;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = worldNormal_2;
  mediump vec4 normal_41;
  normal_41 = tmpvar_40;
  mediump vec3 x2_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = (normal_41.xyzz * normal_41.yzzx);
  x2_42.x = dot (unity_SHBr, tmpvar_43);
  x2_42.y = dot (unity_SHBg, tmpvar_43);
  x2_42.z = dot (unity_SHBb, tmpvar_43);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = (x2_42 + (unity_SHC.xyz * (
    (normal_41.x * normal_41.x)
   - 
    (normal_41.y * normal_41.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_16;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_3;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_17;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  mediump vec4 outDiffuseOcclusion_20;
  mediump vec4 outNormal_21;
  mediump vec4 emission_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = tmpvar_5;
  outDiffuseOcclusion_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  emission_22 = tmpvar_25;
  emission_22.xyz = (emission_22.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_19)));
  outDiffuse_1.xyz = outDiffuseOcclusion_20.xyz;
  outEmission_2.w = emission_22.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_22.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_21;
  gl_FragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD6;
out mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_16.xz;
  billboardPos_9.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_9;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_21.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_22.x + (tmpvar_22.y * tmpvar_22.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_18)));
    vPos_17 = (normalize(vPos_17) * fLength_19);
    billboardPos_9 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    ((_CameraXZAngle + tmpvar_15.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_28;
  } else {
    highp vec2 tmpvar_29;
    tmpvar_29 = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_29;
  };
  highp vec4 tmpvar_30;
  tmpvar_30 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = tmpvar_30.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  tmpvar_8 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_35;
  tmpvar_4 = _Color;
  highp vec4 v_36;
  v_36.x = _World2Object[0].x;
  v_36.y = _World2Object[1].x;
  v_36.z = _World2Object[2].x;
  v_36.w = _World2Object[3].x;
  highp vec4 v_37;
  v_37.x = _World2Object[0].y;
  v_37.y = _World2Object[1].y;
  v_37.z = _World2Object[2].y;
  v_37.w = _World2Object[3].y;
  highp vec4 v_38;
  v_38.x = _World2Object[0].z;
  v_38.y = _World2Object[1].z;
  v_38.z = _World2Object[2].z;
  v_38.w = _World2Object[3].z;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(((
    (v_36.xyz * _BillboardNormal.x)
   + 
    (v_37.xyz * _BillboardNormal.y)
  ) + (v_38.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_39;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = worldNormal_2;
  mediump vec4 normal_41;
  normal_41 = tmpvar_40;
  mediump vec3 x2_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = (normal_41.xyzz * normal_41.yzzx);
  x2_42.x = dot (unity_SHBr, tmpvar_43);
  x2_42.y = dot (unity_SHBg, tmpvar_43);
  x2_42.z = dot (unity_SHBb, tmpvar_43);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = (x2_42 + (unity_SHC.xyz * (
    (normal_41.x * normal_41.x)
   - 
    (normal_41.y * normal_41.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_16;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_3;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_17;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  mediump vec4 outDiffuseOcclusion_20;
  mediump vec4 outNormal_21;
  mediump vec4 emission_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = tmpvar_5;
  outDiffuseOcclusion_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  emission_22 = tmpvar_25;
  emission_22.xyz = (emission_22.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_19)));
  outDiffuse_1.xyz = outDiffuseOcclusion_20.xyz;
  outEmission_2.w = emission_22.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_22.xyz));
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_21;
  _glesFragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_16.xz;
  billboardPos_9.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_9;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_21.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_22.x + (tmpvar_22.y * tmpvar_22.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_18)));
    vPos_17 = (normalize(vPos_17) * fLength_19);
    billboardPos_9 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    ((_CameraXZAngle + tmpvar_15.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_28;
  } else {
    highp vec2 tmpvar_29;
    tmpvar_29 = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_29;
  };
  highp vec4 tmpvar_30;
  tmpvar_30 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = tmpvar_30.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  tmpvar_8 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_35;
  tmpvar_4 = _Color;
  highp vec4 v_36;
  v_36.x = _World2Object[0].x;
  v_36.y = _World2Object[1].x;
  v_36.z = _World2Object[2].x;
  v_36.w = _World2Object[3].x;
  highp vec4 v_37;
  v_37.x = _World2Object[0].y;
  v_37.y = _World2Object[1].y;
  v_37.z = _World2Object[2].y;
  v_37.w = _World2Object[3].y;
  highp vec4 v_38;
  v_38.x = _World2Object[0].z;
  v_38.y = _World2Object[1].z;
  v_38.z = _World2Object[2].z;
  v_38.w = _World2Object[3].z;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(((
    (v_36.xyz * _BillboardNormal.x)
   + 
    (v_37.xyz * _BillboardNormal.y)
  ) + (v_38.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_39;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = worldNormal_2;
  mediump vec4 normal_41;
  normal_41 = tmpvar_40;
  mediump vec3 x2_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = (normal_41.xyzz * normal_41.yzzx);
  x2_42.x = dot (unity_SHBr, tmpvar_43);
  x2_42.y = dot (unity_SHBg, tmpvar_43);
  x2_42.z = dot (unity_SHBb, tmpvar_43);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = (x2_42 + (unity_SHC.xyz * (
    (normal_41.x * normal_41.x)
   - 
    (normal_41.y * normal_41.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_7.x = tmpvar_8.x;
  mediump float tmpvar_9;
  tmpvar_9 = fract(tmpvar_8.y);
  highp float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * 0.0625) + unity_LODFade.y);
  projUV_7.y = tmpvar_10;
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_6.w * _Color.w);
  tmpvar_5 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_5 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_15;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_2;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_16;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  mediump vec4 outDiffuseOcclusion_19;
  mediump vec4 outNormal_20;
  mediump vec4 emission_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_4;
  outDiffuseOcclusion_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  emission_21 = tmpvar_24;
  emission_21.xyz = (emission_21.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_18)));
  outDiffuse_1.xyz = outDiffuseOcclusion_19.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_20;
  gl_FragData[3] = emission_21;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD6;
out mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_16.xz;
  billboardPos_9.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_9;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_21.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_22.x + (tmpvar_22.y * tmpvar_22.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_18)));
    vPos_17 = (normalize(vPos_17) * fLength_19);
    billboardPos_9 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    ((_CameraXZAngle + tmpvar_15.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_28;
  } else {
    highp vec2 tmpvar_29;
    tmpvar_29 = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_29;
  };
  highp vec4 tmpvar_30;
  tmpvar_30 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = tmpvar_30.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  tmpvar_8 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_35;
  tmpvar_4 = _Color;
  highp vec4 v_36;
  v_36.x = _World2Object[0].x;
  v_36.y = _World2Object[1].x;
  v_36.z = _World2Object[2].x;
  v_36.w = _World2Object[3].x;
  highp vec4 v_37;
  v_37.x = _World2Object[0].y;
  v_37.y = _World2Object[1].y;
  v_37.z = _World2Object[2].y;
  v_37.w = _World2Object[3].y;
  highp vec4 v_38;
  v_38.x = _World2Object[0].z;
  v_38.y = _World2Object[1].z;
  v_38.z = _World2Object[2].z;
  v_38.w = _World2Object[3].z;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(((
    (v_36.xyz * _BillboardNormal.x)
   + 
    (v_37.xyz * _BillboardNormal.y)
  ) + (v_38.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_39;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = worldNormal_2;
  mediump vec4 normal_41;
  normal_41 = tmpvar_40;
  mediump vec3 x2_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = (normal_41.xyzz * normal_41.yzzx);
  x2_42.x = dot (unity_SHBr, tmpvar_43);
  x2_42.y = dot (unity_SHBg, tmpvar_43);
  x2_42.z = dot (unity_SHBb, tmpvar_43);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = (x2_42 + (unity_SHC.xyz * (
    (normal_41.x * normal_41.x)
   - 
    (normal_41.y * normal_41.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_7.x = tmpvar_8.x;
  mediump float tmpvar_9;
  tmpvar_9 = fract(tmpvar_8.y);
  highp float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * 0.0625) + unity_LODFade.y);
  projUV_7.y = tmpvar_10;
  lowp float x_11;
  x_11 = (texture (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_6.w * _Color.w);
  tmpvar_5 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_5 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_15;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_2;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_16;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  mediump vec4 outDiffuseOcclusion_19;
  mediump vec4 outNormal_20;
  mediump vec4 emission_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_4;
  outDiffuseOcclusion_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  emission_21 = tmpvar_24;
  emission_21.xyz = (emission_21.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_18)));
  outDiffuse_1.xyz = outDiffuseOcclusion_19.xyz;
  outDiffuse_1.w = 1.0;
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_20;
  _glesFragData[3] = emission_21;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_16.xz;
  billboardPos_9.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_9;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_21.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_22.x + (tmpvar_22.y * tmpvar_22.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_18)));
    vPos_17 = (normalize(vPos_17) * fLength_19);
    billboardPos_9 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    ((_CameraXZAngle + tmpvar_15.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_28;
  } else {
    highp vec2 tmpvar_29;
    tmpvar_29 = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_29;
  };
  highp float tmpvar_30;
  tmpvar_30 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (tmpvar_31 * 0.5);
  highp vec2 tmpvar_34;
  tmpvar_34.x = tmpvar_33.x;
  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
  o_32.xy = (tmpvar_34 + tmpvar_33.w);
  o_32.zw = tmpvar_31.zw;
  highp vec3 tmpvar_35;
  tmpvar_35 = o_32.xyw;
  tmpvar_8 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_36;
  tmpvar_4 = _Color;
  highp vec4 v_37;
  v_37.x = _World2Object[0].x;
  v_37.y = _World2Object[1].x;
  v_37.z = _World2Object[2].x;
  v_37.w = _World2Object[3].x;
  highp vec4 v_38;
  v_38.x = _World2Object[0].y;
  v_38.y = _World2Object[1].y;
  v_38.z = _World2Object[2].y;
  v_38.w = _World2Object[3].y;
  highp vec4 v_39;
  v_39.x = _World2Object[0].z;
  v_39.y = _World2Object[1].z;
  v_39.z = _World2Object[2].z;
  v_39.w = _World2Object[3].z;
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize(((
    (v_37.xyz * _BillboardNormal.x)
   + 
    (v_38.xyz * _BillboardNormal.y)
  ) + (v_39.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_40;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = worldNormal_2;
  mediump vec4 normal_42;
  normal_42 = tmpvar_41;
  mediump vec3 x2_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = (normal_42.xyzz * normal_42.yzzx);
  x2_43.x = dot (unity_SHBr, tmpvar_44);
  x2_43.y = dot (unity_SHBg, tmpvar_44);
  x2_43.z = dot (unity_SHBb, tmpvar_44);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = (x2_43 + (unity_SHC.xyz * (
    (normal_42.x * normal_42.x)
   - 
    (normal_42.y * normal_42.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_16 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_17;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_3;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_18;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_19);
  x1_20.y = dot (unity_SHAg, tmpvar_19);
  x1_20.z = dot (unity_SHAb, tmpvar_19);
  mediump vec4 outDiffuseOcclusion_21;
  mediump vec4 outNormal_22;
  mediump vec4 emission_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = tmpvar_5;
  outDiffuseOcclusion_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_22 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = vec3(0.0, 0.0, 0.0);
  emission_23 = tmpvar_26;
  emission_23.xyz = (emission_23.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_20)));
  outDiffuse_1.xyz = outDiffuseOcclusion_21.xyz;
  outEmission_2.w = emission_23.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_23.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_22;
  gl_FragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD6;
out mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_16.xz;
  billboardPos_9.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_9;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_21.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_22.x + (tmpvar_22.y * tmpvar_22.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_18)));
    vPos_17 = (normalize(vPos_17) * fLength_19);
    billboardPos_9 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    ((_CameraXZAngle + tmpvar_15.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_28;
  } else {
    highp vec2 tmpvar_29;
    tmpvar_29 = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_29;
  };
  highp float tmpvar_30;
  tmpvar_30 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (tmpvar_31 * 0.5);
  highp vec2 tmpvar_34;
  tmpvar_34.x = tmpvar_33.x;
  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
  o_32.xy = (tmpvar_34 + tmpvar_33.w);
  o_32.zw = tmpvar_31.zw;
  highp vec3 tmpvar_35;
  tmpvar_35 = o_32.xyw;
  tmpvar_8 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_36;
  tmpvar_4 = _Color;
  highp vec4 v_37;
  v_37.x = _World2Object[0].x;
  v_37.y = _World2Object[1].x;
  v_37.z = _World2Object[2].x;
  v_37.w = _World2Object[3].x;
  highp vec4 v_38;
  v_38.x = _World2Object[0].y;
  v_38.y = _World2Object[1].y;
  v_38.z = _World2Object[2].y;
  v_38.w = _World2Object[3].y;
  highp vec4 v_39;
  v_39.x = _World2Object[0].z;
  v_39.y = _World2Object[1].z;
  v_39.z = _World2Object[2].z;
  v_39.w = _World2Object[3].z;
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize(((
    (v_37.xyz * _BillboardNormal.x)
   + 
    (v_38.xyz * _BillboardNormal.y)
  ) + (v_39.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_40;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = worldNormal_2;
  mediump vec4 normal_42;
  normal_42 = tmpvar_41;
  mediump vec3 x2_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = (normal_42.xyzz * normal_42.yzzx);
  x2_43.x = dot (unity_SHBr, tmpvar_44);
  x2_43.y = dot (unity_SHBg, tmpvar_44);
  x2_43.z = dot (unity_SHBb, tmpvar_44);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = (x2_43 + (unity_SHC.xyz * (
    (normal_42.x * normal_42.x)
   - 
    (normal_42.y * normal_42.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_7.xyz = clamp ((tmpvar_16 * (
    ((max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_17;
  tmpvar_17 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_17;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_3;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_18;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_19);
  x1_20.y = dot (unity_SHAg, tmpvar_19);
  x1_20.z = dot (unity_SHAb, tmpvar_19);
  mediump vec4 outDiffuseOcclusion_21;
  mediump vec4 outNormal_22;
  mediump vec4 emission_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = tmpvar_5;
  outDiffuseOcclusion_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_22 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = vec3(0.0, 0.0, 0.0);
  emission_23 = tmpvar_26;
  emission_23.xyz = (emission_23.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_20)));
  outDiffuse_1.xyz = outDiffuseOcclusion_21.xyz;
  outEmission_2.w = emission_23.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_23.xyz));
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_22;
  _glesFragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_16.xz;
  billboardPos_9.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_9;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_21.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_22.x + (tmpvar_22.y * tmpvar_22.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_18)));
    vPos_17 = (normalize(vPos_17) * fLength_19);
    billboardPos_9 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    ((_CameraXZAngle + tmpvar_15.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_28;
  } else {
    highp vec2 tmpvar_29;
    tmpvar_29 = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_29;
  };
  highp float tmpvar_30;
  tmpvar_30 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (tmpvar_31 * 0.5);
  highp vec2 tmpvar_34;
  tmpvar_34.x = tmpvar_33.x;
  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
  o_32.xy = (tmpvar_34 + tmpvar_33.w);
  o_32.zw = tmpvar_31.zw;
  highp vec3 tmpvar_35;
  tmpvar_35 = o_32.xyw;
  tmpvar_8 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_36;
  tmpvar_4 = _Color;
  highp vec4 v_37;
  v_37.x = _World2Object[0].x;
  v_37.y = _World2Object[1].x;
  v_37.z = _World2Object[2].x;
  v_37.w = _World2Object[3].x;
  highp vec4 v_38;
  v_38.x = _World2Object[0].y;
  v_38.y = _World2Object[1].y;
  v_38.z = _World2Object[2].y;
  v_38.w = _World2Object[3].y;
  highp vec4 v_39;
  v_39.x = _World2Object[0].z;
  v_39.y = _World2Object[1].z;
  v_39.z = _World2Object[2].z;
  v_39.w = _World2Object[3].z;
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize(((
    (v_37.xyz * _BillboardNormal.x)
   + 
    (v_38.xyz * _BillboardNormal.y)
  ) + (v_39.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_40;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = worldNormal_2;
  mediump vec4 normal_42;
  normal_42 = tmpvar_41;
  mediump vec3 x2_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = (normal_42.xyzz * normal_42.yzzx);
  x2_43.x = dot (unity_SHBr, tmpvar_44);
  x2_43.y = dot (unity_SHBg, tmpvar_44);
  x2_43.z = dot (unity_SHBb, tmpvar_44);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = (x2_43 + (unity_SHC.xyz * (
    (normal_42.x * normal_42.x)
   - 
    (normal_42.y * normal_42.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_7.x = tmpvar_8.x;
  mediump float tmpvar_9;
  tmpvar_9 = fract(tmpvar_8.y);
  highp float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * 0.0625) + unity_LODFade.y);
  projUV_7.y = tmpvar_10;
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_6.w * _Color.w);
  tmpvar_5 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_5 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_6.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_6.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_6.x, max (diffuseColor_6.y, diffuseColor_6.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_16;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_2;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_17;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  mediump vec4 outDiffuseOcclusion_20;
  mediump vec4 outNormal_21;
  mediump vec4 emission_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = tmpvar_4;
  outDiffuseOcclusion_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  emission_22 = tmpvar_25;
  emission_22.xyz = (emission_22.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_19)));
  outDiffuse_1.xyz = outDiffuseOcclusion_20.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_21;
  gl_FragData[3] = emission_22;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD6;
out mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_16.xz;
  billboardPos_9.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_9;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_21.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_22.x + (tmpvar_22.y * tmpvar_22.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_18)));
    vPos_17 = (normalize(vPos_17) * fLength_19);
    billboardPos_9 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_6.w = 1.0;
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    ((_CameraXZAngle + tmpvar_15.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    highp vec2 tmpvar_28;
    tmpvar_28 = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
    tmpvar_7.xy = tmpvar_28;
  } else {
    highp vec2 tmpvar_29;
    tmpvar_29 = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
    tmpvar_7.xy = tmpvar_29;
  };
  highp float tmpvar_30;
  tmpvar_30 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (tmpvar_31 * 0.5);
  highp vec2 tmpvar_34;
  tmpvar_34.x = tmpvar_33.x;
  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
  o_32.xy = (tmpvar_34 + tmpvar_33.w);
  o_32.zw = tmpvar_31.zw;
  highp vec3 tmpvar_35;
  tmpvar_35 = o_32.xyw;
  tmpvar_8 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (tmpvar_8.xy * (_ScreenParams.xy * 0.25));
  tmpvar_8.xy = tmpvar_36;
  tmpvar_4 = _Color;
  highp vec4 v_37;
  v_37.x = _World2Object[0].x;
  v_37.y = _World2Object[1].x;
  v_37.z = _World2Object[2].x;
  v_37.w = _World2Object[3].x;
  highp vec4 v_38;
  v_38.x = _World2Object[0].y;
  v_38.y = _World2Object[1].y;
  v_38.z = _World2Object[2].y;
  v_38.w = _World2Object[3].y;
  highp vec4 v_39;
  v_39.x = _World2Object[0].z;
  v_39.y = _World2Object[1].z;
  v_39.z = _World2Object[2].z;
  v_39.w = _World2Object[3].z;
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize(((
    (v_37.xyz * _BillboardNormal.x)
   + 
    (v_38.xyz * _BillboardNormal.y)
  ) + (v_39.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_40;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = worldNormal_2;
  mediump vec4 normal_42;
  normal_42 = tmpvar_41;
  mediump vec3 x2_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = (normal_42.xyzz * normal_42.yzzx);
  x2_43.x = dot (unity_SHBr, tmpvar_44);
  x2_43.y = dot (unity_SHBg, tmpvar_44);
  x2_43.z = dot (unity_SHBb, tmpvar_44);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = (x2_43 + (unity_SHC.xyz * (
    (normal_42.x * normal_42.x)
   - 
    (normal_42.y * normal_42.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_7.x = tmpvar_8.x;
  mediump float tmpvar_9;
  tmpvar_9 = fract(tmpvar_8.y);
  highp float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * 0.0625) + unity_LODFade.y);
  projUV_7.y = tmpvar_10;
  lowp float x_11;
  x_11 = (texture (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_6.w * _Color.w);
  tmpvar_5 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_5 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_6.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  diffuseColor_6.xyz = clamp ((tmpvar_15 * (
    ((max (diffuseColor_6.x, max (diffuseColor_6.y, diffuseColor_6.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_16;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_2;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_17;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  mediump vec4 outDiffuseOcclusion_20;
  mediump vec4 outNormal_21;
  mediump vec4 emission_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = tmpvar_4;
  outDiffuseOcclusion_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  emission_22 = tmpvar_25;
  emission_22.xyz = (emission_22.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_19)));
  outDiffuse_1.xyz = outDiffuseOcclusion_20.xyz;
  outDiffuse_1.w = 1.0;
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_21;
  _glesFragData[3] = emission_22;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec3 billboardPos_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  highp vec4 tmpvar_16;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_16 = _InstanceData;
  } else {
    tmpvar_16 = tmpvar_1;
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_16.x) * _BillboardTangent);
  billboardPos_10.xz = tmpvar_17.xz;
  billboardPos_10.y = (tmpvar_17.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_16.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_18;
    vPos_18 = billboardPos_10;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_10, billboardPos_10));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_10.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_15.x + tmpvar_16.w);
    tmpvar_22.y = (tmpvar_15.y + (tmpvar_16.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    vPos_18.xz = (tmpvar_17.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_23.x + (tmpvar_23.y * tmpvar_23.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_19)));
    vPos_18 = (normalize(vPos_18) * fLength_20);
    billboardPos_10 = vPos_18;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_10);
  tmpvar_7.w = 1.0;
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    ((_CameraXZAngle + tmpvar_16.z) * tmpvar_12.y)
   + 0.5)) / tmpvar_12.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_12.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    highp vec2 tmpvar_29;
    tmpvar_29 = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
    tmpvar_8.xy = tmpvar_29;
  } else {
    highp vec2 tmpvar_30;
    tmpvar_30 = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
    tmpvar_8.xy = tmpvar_30;
  };
  highp vec4 tmpvar_31;
  tmpvar_31 = (glstate_matrix_mvp * tmpvar_7);
  highp vec4 o_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (tmpvar_31 * 0.5);
  highp vec2 tmpvar_34;
  tmpvar_34.x = tmpvar_33.x;
  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
  o_32.xy = (tmpvar_34 + tmpvar_33.w);
  o_32.zw = tmpvar_31.zw;
  highp vec3 tmpvar_35;
  tmpvar_35 = o_32.xyw;
  tmpvar_9 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_36;
  tmpvar_5 = _Color;
  highp vec3 tmpvar_37;
  tmpvar_37 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_38;
  v_38.x = _World2Object[0].x;
  v_38.y = _World2Object[1].x;
  v_38.z = _World2Object[2].x;
  v_38.w = _World2Object[3].x;
  highp vec4 v_39;
  v_39.x = _World2Object[0].y;
  v_39.y = _World2Object[1].y;
  v_39.z = _World2Object[2].y;
  v_39.w = _World2Object[3].y;
  highp vec4 v_40;
  v_40.x = _World2Object[0].z;
  v_40.y = _World2Object[1].z;
  v_40.z = _World2Object[2].z;
  v_40.w = _World2Object[3].z;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize(((
    (v_38.xyz * _BillboardNormal.x)
   + 
    (v_39.xyz * _BillboardNormal.y)
  ) + (v_40.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_41;
  highp mat3 tmpvar_42;
  tmpvar_42[0] = _Object2World[0].xyz;
  tmpvar_42[1] = _Object2World[1].xyz;
  tmpvar_42[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize((tmpvar_42 * _BillboardTangent));
  worldTangent_3 = tmpvar_43;
  lowp vec3 tmpvar_44;
  tmpvar_44 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_45;
  tmpvar_45 = -(tmpvar_44);
  worldBinormal_2 = tmpvar_45;
  highp vec4 tmpvar_46;
  tmpvar_46.x = worldTangent_3.x;
  tmpvar_46.y = worldBinormal_2.x;
  tmpvar_46.z = worldNormal_4.x;
  tmpvar_46.w = tmpvar_37.x;
  highp vec4 tmpvar_47;
  tmpvar_47.x = worldTangent_3.y;
  tmpvar_47.y = worldBinormal_2.y;
  tmpvar_47.z = worldNormal_4.y;
  tmpvar_47.w = tmpvar_37.y;
  highp vec4 tmpvar_48;
  tmpvar_48.x = worldTangent_3.z;
  tmpvar_48.y = worldBinormal_2.z;
  tmpvar_48.z = worldNormal_4.z;
  tmpvar_48.w = tmpvar_37.z;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_49;
  tmpvar_49.w = 1.0;
  tmpvar_49.xyz = worldNormal_4;
  mediump vec4 normal_50;
  normal_50 = tmpvar_49;
  mediump vec3 x2_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = (normal_50.xyzz * normal_50.yzzx);
  x2_51.x = dot (unity_SHBr, tmpvar_52);
  x2_51.y = dot (unity_SHBg, tmpvar_52);
  x2_51.z = dot (unity_SHBb, tmpvar_52);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_46;
  xlv_TEXCOORD1 = tmpvar_47;
  xlv_TEXCOORD2 = tmpvar_48;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = (x2_51 + (unity_SHC.xyz * (
    (normal_50.x * normal_50.x)
   - 
    (normal_50.y * normal_50.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 worldN_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_3.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_3.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_3.z = tmpvar_20;
  mediump vec3 normalWorld_21;
  normalWorld_21 = worldN_3;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_21;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  mediump vec4 outDiffuseOcclusion_24;
  mediump vec4 outNormal_25;
  mediump vec4 emission_26;
  lowp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = tmpvar_5;
  outDiffuseOcclusion_24 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = ((worldN_3 * 0.5) + 0.5);
  outNormal_25 = tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = vec3(0.0, 0.0, 0.0);
  emission_26 = tmpvar_29;
  emission_26.xyz = (emission_26.xyz + (tmpvar_5 * (xlv_TEXCOORD8 + x1_23)));
  outDiffuse_1.xyz = outDiffuseOcclusion_24.xyz;
  outEmission_2.w = emission_26.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_26.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_25;
  gl_FragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD7;
out mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec3 billboardPos_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  highp vec4 tmpvar_16;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_16 = _InstanceData;
  } else {
    tmpvar_16 = tmpvar_1;
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_16.x) * _BillboardTangent);
  billboardPos_10.xz = tmpvar_17.xz;
  billboardPos_10.y = (tmpvar_17.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_16.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_18;
    vPos_18 = billboardPos_10;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_10, billboardPos_10));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_10.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_15.x + tmpvar_16.w);
    tmpvar_22.y = (tmpvar_15.y + (tmpvar_16.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    vPos_18.xz = (tmpvar_17.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_23.x + (tmpvar_23.y * tmpvar_23.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_19)));
    vPos_18 = (normalize(vPos_18) * fLength_20);
    billboardPos_10 = vPos_18;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_10);
  tmpvar_7.w = 1.0;
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    ((_CameraXZAngle + tmpvar_16.z) * tmpvar_12.y)
   + 0.5)) / tmpvar_12.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_12.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    highp vec2 tmpvar_29;
    tmpvar_29 = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
    tmpvar_8.xy = tmpvar_29;
  } else {
    highp vec2 tmpvar_30;
    tmpvar_30 = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
    tmpvar_8.xy = tmpvar_30;
  };
  highp vec4 tmpvar_31;
  tmpvar_31 = (glstate_matrix_mvp * tmpvar_7);
  highp vec4 o_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (tmpvar_31 * 0.5);
  highp vec2 tmpvar_34;
  tmpvar_34.x = tmpvar_33.x;
  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
  o_32.xy = (tmpvar_34 + tmpvar_33.w);
  o_32.zw = tmpvar_31.zw;
  highp vec3 tmpvar_35;
  tmpvar_35 = o_32.xyw;
  tmpvar_9 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_36;
  tmpvar_5 = _Color;
  highp vec3 tmpvar_37;
  tmpvar_37 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_38;
  v_38.x = _World2Object[0].x;
  v_38.y = _World2Object[1].x;
  v_38.z = _World2Object[2].x;
  v_38.w = _World2Object[3].x;
  highp vec4 v_39;
  v_39.x = _World2Object[0].y;
  v_39.y = _World2Object[1].y;
  v_39.z = _World2Object[2].y;
  v_39.w = _World2Object[3].y;
  highp vec4 v_40;
  v_40.x = _World2Object[0].z;
  v_40.y = _World2Object[1].z;
  v_40.z = _World2Object[2].z;
  v_40.w = _World2Object[3].z;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize(((
    (v_38.xyz * _BillboardNormal.x)
   + 
    (v_39.xyz * _BillboardNormal.y)
  ) + (v_40.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_41;
  highp mat3 tmpvar_42;
  tmpvar_42[0] = _Object2World[0].xyz;
  tmpvar_42[1] = _Object2World[1].xyz;
  tmpvar_42[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize((tmpvar_42 * _BillboardTangent));
  worldTangent_3 = tmpvar_43;
  lowp vec3 tmpvar_44;
  tmpvar_44 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_45;
  tmpvar_45 = -(tmpvar_44);
  worldBinormal_2 = tmpvar_45;
  highp vec4 tmpvar_46;
  tmpvar_46.x = worldTangent_3.x;
  tmpvar_46.y = worldBinormal_2.x;
  tmpvar_46.z = worldNormal_4.x;
  tmpvar_46.w = tmpvar_37.x;
  highp vec4 tmpvar_47;
  tmpvar_47.x = worldTangent_3.y;
  tmpvar_47.y = worldBinormal_2.y;
  tmpvar_47.z = worldNormal_4.y;
  tmpvar_47.w = tmpvar_37.y;
  highp vec4 tmpvar_48;
  tmpvar_48.x = worldTangent_3.z;
  tmpvar_48.y = worldBinormal_2.z;
  tmpvar_48.z = worldNormal_4.z;
  tmpvar_48.w = tmpvar_37.z;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_49;
  tmpvar_49.w = 1.0;
  tmpvar_49.xyz = worldNormal_4;
  mediump vec4 normal_50;
  normal_50 = tmpvar_49;
  mediump vec3 x2_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = (normal_50.xyzz * normal_50.yzzx);
  x2_51.x = dot (unity_SHBr, tmpvar_52);
  x2_51.y = dot (unity_SHBg, tmpvar_52);
  x2_51.z = dot (unity_SHBb, tmpvar_52);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_46;
  xlv_TEXCOORD1 = tmpvar_47;
  xlv_TEXCOORD2 = tmpvar_48;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = (x2_51 + (unity_SHC.xyz * (
    (normal_50.x * normal_50.x)
   - 
    (normal_50.y * normal_50.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 worldN_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_8.x = tmpvar_9.x;
  mediump float tmpvar_10;
  tmpvar_10 = fract(tmpvar_9.y);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * 0.0625) + unity_LODFade.y);
  projUV_8.y = tmpvar_11;
  lowp float x_12;
  x_12 = (texture (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_7 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_7.w * _Color.w);
  tmpvar_6 = tmpvar_14;
  lowp float x_15;
  x_15 = (tmpvar_6 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  tmpvar_5 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_3.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_3.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_3.z = tmpvar_20;
  mediump vec3 normalWorld_21;
  normalWorld_21 = worldN_3;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_21;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  mediump vec4 outDiffuseOcclusion_24;
  mediump vec4 outNormal_25;
  mediump vec4 emission_26;
  lowp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = tmpvar_5;
  outDiffuseOcclusion_24 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = ((worldN_3 * 0.5) + 0.5);
  outNormal_25 = tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = vec3(0.0, 0.0, 0.0);
  emission_26 = tmpvar_29;
  emission_26.xyz = (emission_26.xyz + (tmpvar_5 * (xlv_TEXCOORD8 + x1_23)));
  outDiffuse_1.xyz = outDiffuseOcclusion_24.xyz;
  outEmission_2.w = emission_26.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_26.xyz));
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_25;
  _glesFragData[3] = outEmission_2;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec3 billboardPos_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  highp vec4 tmpvar_16;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_16 = _InstanceData;
  } else {
    tmpvar_16 = tmpvar_1;
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_16.x) * _BillboardTangent);
  billboardPos_10.xz = tmpvar_17.xz;
  billboardPos_10.y = (tmpvar_17.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_16.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_18;
    vPos_18 = billboardPos_10;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_10, billboardPos_10));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_10.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_15.x + tmpvar_16.w);
    tmpvar_22.y = (tmpvar_15.y + (tmpvar_16.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    vPos_18.xz = (tmpvar_17.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_23.x + (tmpvar_23.y * tmpvar_23.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_19)));
    vPos_18 = (normalize(vPos_18) * fLength_20);
    billboardPos_10 = vPos_18;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_10);
  tmpvar_7.w = 1.0;
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    ((_CameraXZAngle + tmpvar_16.z) * tmpvar_12.y)
   + 0.5)) / tmpvar_12.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_12.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    highp vec2 tmpvar_29;
    tmpvar_29 = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
    tmpvar_8.xy = tmpvar_29;
  } else {
    highp vec2 tmpvar_30;
    tmpvar_30 = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
    tmpvar_8.xy = tmpvar_30;
  };
  highp vec4 tmpvar_31;
  tmpvar_31 = (glstate_matrix_mvp * tmpvar_7);
  highp vec4 o_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (tmpvar_31 * 0.5);
  highp vec2 tmpvar_34;
  tmpvar_34.x = tmpvar_33.x;
  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
  o_32.xy = (tmpvar_34 + tmpvar_33.w);
  o_32.zw = tmpvar_31.zw;
  highp vec3 tmpvar_35;
  tmpvar_35 = o_32.xyw;
  tmpvar_9 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_36;
  tmpvar_5 = _Color;
  highp vec3 tmpvar_37;
  tmpvar_37 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_38;
  v_38.x = _World2Object[0].x;
  v_38.y = _World2Object[1].x;
  v_38.z = _World2Object[2].x;
  v_38.w = _World2Object[3].x;
  highp vec4 v_39;
  v_39.x = _World2Object[0].y;
  v_39.y = _World2Object[1].y;
  v_39.z = _World2Object[2].y;
  v_39.w = _World2Object[3].y;
  highp vec4 v_40;
  v_40.x = _World2Object[0].z;
  v_40.y = _World2Object[1].z;
  v_40.z = _World2Object[2].z;
  v_40.w = _World2Object[3].z;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize(((
    (v_38.xyz * _BillboardNormal.x)
   + 
    (v_39.xyz * _BillboardNormal.y)
  ) + (v_40.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_41;
  highp mat3 tmpvar_42;
  tmpvar_42[0] = _Object2World[0].xyz;
  tmpvar_42[1] = _Object2World[1].xyz;
  tmpvar_42[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize((tmpvar_42 * _BillboardTangent));
  worldTangent_3 = tmpvar_43;
  lowp vec3 tmpvar_44;
  tmpvar_44 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_45;
  tmpvar_45 = -(tmpvar_44);
  worldBinormal_2 = tmpvar_45;
  highp vec4 tmpvar_46;
  tmpvar_46.x = worldTangent_3.x;
  tmpvar_46.y = worldBinormal_2.x;
  tmpvar_46.z = worldNormal_4.x;
  tmpvar_46.w = tmpvar_37.x;
  highp vec4 tmpvar_47;
  tmpvar_47.x = worldTangent_3.y;
  tmpvar_47.y = worldBinormal_2.y;
  tmpvar_47.z = worldNormal_4.y;
  tmpvar_47.w = tmpvar_37.y;
  highp vec4 tmpvar_48;
  tmpvar_48.x = worldTangent_3.z;
  tmpvar_48.y = worldBinormal_2.z;
  tmpvar_48.z = worldNormal_4.z;
  tmpvar_48.w = tmpvar_37.z;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_49;
  tmpvar_49.w = 1.0;
  tmpvar_49.xyz = worldNormal_4;
  mediump vec4 normal_50;
  normal_50 = tmpvar_49;
  mediump vec3 x2_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = (normal_50.xyzz * normal_50.yzzx);
  x2_51.x = dot (unity_SHBr, tmpvar_52);
  x2_51.y = dot (unity_SHBg, tmpvar_52);
  x2_51.z = dot (unity_SHBb, tmpvar_52);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_46;
  xlv_TEXCOORD1 = tmpvar_47;
  xlv_TEXCOORD2 = tmpvar_48;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = (x2_51 + (unity_SHC.xyz * (
    (normal_50.x * normal_50.x)
   - 
    (normal_50.y * normal_50.y)
  )));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : require
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 worldN_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_7.x = tmpvar_8.x;
  mediump float tmpvar_9;
  tmpvar_9 = fract(tmpvar_8.y);
  highp float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * 0.0625) + unity_LODFade.y);
  projUV_7.y = tmpvar_10;
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_6 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_6.w * _Color.w);
  tmpvar_5 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_5 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_15;
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_2.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_2.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_2.z = tmpvar_19;
  mediump vec3 normalWorld_20;
  normalWorld_20 = worldN_2;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_20;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  mediump vec4 outDiffuseOcclusion_23;
  mediump vec4 outNormal_24;
  mediump vec4 emission_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = tmpvar_4;
  outDiffuseOcclusion_23 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = ((worldN_2 * 0.5) + 0.5);
  outNormal_24 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = vec3(0.0, 0.0, 0.0);
  emission_25 = tmpvar_28;
  emission_25.xyz = (emission_25.xyz + (tmpvar_4 * (xlv_TEXCOORD8 + x1_22)));
  outDiffuse_1.xyz = outDiffuseOcclusion_23.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_24;
  gl_FragData[3] = emission_25;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out mediump vec4 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD7;
out mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  highp vec3 billboardPos_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  highp vec4 tmpvar_16;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_16 = _InstanceData;
  } else {
    tmpvar_16 = tmpvar_1;
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_16.x) * _BillboardTangent);
  billboardPos_10.xz = tmpvar_17.xz;
  billboardPos_10.y = (tmpvar_17.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_16.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_18;
    vPos_18 = billboardPos_10;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_10, billboardPos_10));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_10.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_15.x + tmpvar_16.w);
    tmpvar_22.y = (tmpvar_15.y + (tmpvar_16.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    vPos_18.xz = (tmpvar_17.xz + (_ST_WindVector.xz * (
      ((_ST_WindGlobal.y * (tmpvar_23.x + (tmpvar_23.y * tmpvar_23.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_19)));
    vPos_18 = (normalize(vPos_18) * fLength_20);
    billboardPos_10 = vPos_18;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_10);
  tmpvar_7.w = 1.0;
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    ((_CameraXZAngle + tmpvar_16.z) * tmpvar_12.y)
   + 0.5)) / tmpvar_12.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_12.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    highp vec2 tmpvar_29;
    tmpvar_29 = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
    tmpvar_8.xy = tmpvar_29;
  } else {
    highp vec2 tmpvar_30;
    tmpvar_30 = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
    tmpvar_8.xy = tmpvar_30;
  };
  highp vec4 tmpvar_31;
  tmpvar_31 = (glstate_matrix_mvp * tmpvar_7);
  highp vec4 o_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (tmpvar_31 * 0.5);
  highp vec2 tmpvar_34;
  tmpvar_34.x = tmpvar_33.x;
  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
  o_32.xy = (tmpvar_34 + tmpvar_33.w);
  o_32.zw = tmpvar_31.zw;
  highp vec3 tmpvar_35;
  tmpvar_35 = o_32.xyw;
  tmpvar_9 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (tmpvar_9.xy * (_ScreenParams.xy * 0.25));
  tmpvar_9.xy = tmpvar_36;
  tmpvar_5 = _Color;
  highp vec3 tmpvar_37;
  tmpvar_37 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_38;
  v_38.x = _World2Object[0].x;
  v_38.y = _World2Object[1].x;
  v_38.z = _World2Object[2].x;
  v_38.w = _World2Object[3].x;
  highp vec4 v_39;
  v_39.x = _World2Object[0].y;
  v_39.y = _World2Object[1].y;
  v_39.z = _World2Object[2].y;
  v_39.w = _World2Object[3].y;
  highp vec4 v_40;
  v_40.x = _World2Object[0].z;
  v_40.y = _World2Object[1].z;
  v_40.z = _World2Object[2].z;
  v_40.w = _World2Object[3].z;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize(((
    (v_38.xyz * _BillboardNormal.x)
   + 
    (v_39.xyz * _BillboardNormal.y)
  ) + (v_40.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_41;
  highp mat3 tmpvar_42;
  tmpvar_42[0] = _Object2World[0].xyz;
  tmpvar_42[1] = _Object2World[1].xyz;
  tmpvar_42[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize((tmpvar_42 * _BillboardTangent));
  worldTangent_3 = tmpvar_43;
  lowp vec3 tmpvar_44;
  tmpvar_44 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_45;
  tmpvar_45 = -(tmpvar_44);
  worldBinormal_2 = tmpvar_45;
  highp vec4 tmpvar_46;
  tmpvar_46.x = worldTangent_3.x;
  tmpvar_46.y = worldBinormal_2.x;
  tmpvar_46.z = worldNormal_4.x;
  tmpvar_46.w = tmpvar_37.x;
  highp vec4 tmpvar_47;
  tmpvar_47.x = worldTangent_3.y;
  tmpvar_47.y = worldBinormal_2.y;
  tmpvar_47.z = worldNormal_4.y;
  tmpvar_47.w = tmpvar_37.y;
  highp vec4 tmpvar_48;
  tmpvar_48.x = worldTangent_3.z;
  tmpvar_48.y = worldBinormal_2.z;
  tmpvar_48.z = worldNormal_4.z;
  tmpvar_48.w = tmpvar_37.z;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_49;
  tmpvar_49.w = 1.0;
  tmpvar_49.xyz = worldNormal_4;
  mediump vec4 normal_50;
  normal_50 = tmpvar_49;
  mediump vec3 x2_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = (normal_50.xyzz * normal_50.yzzx);
  x2_51.x = dot (unity_SHBr, tmpvar_52);
  x2_51.y = dot (unity_SHBg, tmpvar_52);
  x2_51.z = dot (unity_SHBb, tmpvar_52);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_46;
  xlv_TEXCOORD1 = tmpvar_47;
  xlv_TEXCOORD2 = tmpvar_48;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = (x2_51 + (unity_SHC.xyz * (
    (normal_50.x * normal_50.x)
   - 
    (normal_50.y * normal_50.y)
  )));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in mediump vec4 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 worldN_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_7.x = tmpvar_8.x;
  mediump float tmpvar_9;
  tmpvar_9 = fract(tmpvar_8.y);
  highp float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * 0.0625) + unity_LODFade.y);
  projUV_7.y = tmpvar_10;
  lowp float x_11;
  x_11 = (texture (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_6 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_6.w * _Color.w);
  tmpvar_5 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_5 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  tmpvar_4 = tmpvar_15;
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_2.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_2.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_2.z = tmpvar_19;
  mediump vec3 normalWorld_20;
  normalWorld_20 = worldN_2;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_20;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  mediump vec4 outDiffuseOcclusion_23;
  mediump vec4 outNormal_24;
  mediump vec4 emission_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = tmpvar_4;
  outDiffuseOcclusion_23 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = ((worldN_2 * 0.5) + 0.5);
  outNormal_24 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = vec3(0.0, 0.0, 0.0);
  emission_25 = tmpvar_28;
  emission_25.xyz = (emission_25.xyz + (tmpvar_4 * (xlv_TEXCOORD8 + x1_22)));
  outDiffuse_1.xyz = outDiffuseOcclusion_23.xyz;
  outDiffuse_1.w = 1.0;
  _glesFragData[0] = outDiffuse_1;
  _glesFragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  _glesFragData[2] = outNormal_24;
  _glesFragData[3] = emission_25;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
unifor